
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800200  000057cc  00005860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b3c  00800408  00800408  00005a68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000918  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bbdc  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003672  00000000  00000000  00011ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006148  00000000  00000000  0001566a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f74  00000000  00000000  0001b7b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003943  00000000  00000000  0001d728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a17c  00000000  00000000  0002106b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0002b1e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c2       	rjmp	.+1312   	; 0x522 <__ctors_end>
       2:	00 00       	nop
       4:	af c2       	rjmp	.+1374   	; 0x564 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c2       	rjmp	.+1370   	; 0x564 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c2       	rjmp	.+1366   	; 0x564 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c2       	rjmp	.+1362   	; 0x564 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c2       	rjmp	.+1358   	; 0x564 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c2       	rjmp	.+1354   	; 0x564 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c2       	rjmp	.+1350   	; 0x564 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c2       	rjmp	.+1346   	; 0x564 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c2       	rjmp	.+1342   	; 0x564 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c2       	rjmp	.+1338   	; 0x564 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c2       	rjmp	.+1334   	; 0x564 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_12>
      34:	97 c2       	rjmp	.+1326   	; 0x564 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c2       	rjmp	.+1322   	; 0x564 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c2       	rjmp	.+1318   	; 0x564 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c2       	rjmp	.+1314   	; 0x564 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c2       	rjmp	.+1310   	; 0x564 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c2       	rjmp	.+1306   	; 0x564 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c2       	rjmp	.+1302   	; 0x564 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c2       	rjmp	.+1298   	; 0x564 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__vector_21>
      58:	85 c2       	rjmp	.+1290   	; 0x564 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c2       	rjmp	.+1286   	; 0x564 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__vector_24>
      64:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__vector_25>
      68:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__vector_26>
      6c:	7b c2       	rjmp	.+1270   	; 0x564 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c2       	rjmp	.+1266   	; 0x564 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c2       	rjmp	.+1262   	; 0x564 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c2       	rjmp	.+1258   	; 0x564 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c2       	rjmp	.+1254   	; 0x564 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c2       	rjmp	.+1250   	; 0x564 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c2       	rjmp	.+1246   	; 0x564 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c2       	rjmp	.+1242   	; 0x564 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c2       	rjmp	.+1238   	; 0x564 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <__vector_36>
      94:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__vector_37>
      98:	65 c2       	rjmp	.+1226   	; 0x564 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9f 24 	jmp	0x493e	; 0x493e <__vector_39>
      a0:	61 c2       	rjmp	.+1218   	; 0x564 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c2       	rjmp	.+1214   	; 0x564 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c2       	rjmp	.+1210   	; 0x564 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c2       	rjmp	.+1206   	; 0x564 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c2       	rjmp	.+1202   	; 0x564 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c2       	rjmp	.+1198   	; 0x564 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c2       	rjmp	.+1194   	; 0x564 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c2       	rjmp	.+1190   	; 0x564 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c2       	rjmp	.+1186   	; 0x564 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c2       	rjmp	.+1182   	; 0x564 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c2       	rjmp	.+1178   	; 0x564 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__vector_51>
      d0:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__vector_52>
      d4:	47 c2       	rjmp	.+1166   	; 0x564 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c6 20 	jmp	0x418c	; 0x418c <__vector_54>
      dc:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__vector_55>
      e0:	41 c2       	rjmp	.+1154   	; 0x564 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 02       	muls	r16, r23
      e6:	07 02       	muls	r16, r23
      e8:	07 02       	muls	r16, r23
      ea:	41 02       	muls	r20, r17
      ec:	49 02       	muls	r20, r25
      ee:	5f 02       	muls	r21, r31
      f0:	07 02       	muls	r16, r23
      f2:	07 02       	muls	r16, r23
      f4:	41 02       	muls	r20, r17
      f6:	49 02       	muls	r20, r25
      f8:	c1 24       	eor	r12, r1
      fa:	31 25       	eor	r19, r1
      fc:	31 25       	eor	r19, r1
      fe:	31 25       	eor	r19, r1
     100:	31 25       	eor	r19, r1
     102:	31 25       	eor	r19, r1
     104:	31 25       	eor	r19, r1
     106:	31 25       	eor	r19, r1
     108:	c1 24       	eor	r12, r1
     10a:	31 25       	eor	r19, r1
     10c:	31 25       	eor	r19, r1
     10e:	31 25       	eor	r19, r1
     110:	31 25       	eor	r19, r1
     112:	31 25       	eor	r19, r1
     114:	31 25       	eor	r19, r1
     116:	31 25       	eor	r19, r1
     118:	c3 24       	eor	r12, r3
     11a:	31 25       	eor	r19, r1
     11c:	31 25       	eor	r19, r1
     11e:	31 25       	eor	r19, r1
     120:	31 25       	eor	r19, r1
     122:	31 25       	eor	r19, r1
     124:	31 25       	eor	r19, r1
     126:	31 25       	eor	r19, r1
     128:	31 25       	eor	r19, r1
     12a:	31 25       	eor	r19, r1
     12c:	31 25       	eor	r19, r1
     12e:	31 25       	eor	r19, r1
     130:	31 25       	eor	r19, r1
     132:	31 25       	eor	r19, r1
     134:	31 25       	eor	r19, r1
     136:	31 25       	eor	r19, r1
     138:	c3 24       	eor	r12, r3
     13a:	31 25       	eor	r19, r1
     13c:	31 25       	eor	r19, r1
     13e:	31 25       	eor	r19, r1
     140:	31 25       	eor	r19, r1
     142:	31 25       	eor	r19, r1
     144:	31 25       	eor	r19, r1
     146:	31 25       	eor	r19, r1
     148:	31 25       	eor	r19, r1
     14a:	31 25       	eor	r19, r1
     14c:	31 25       	eor	r19, r1
     14e:	31 25       	eor	r19, r1
     150:	31 25       	eor	r19, r1
     152:	31 25       	eor	r19, r1
     154:	31 25       	eor	r19, r1
     156:	31 25       	eor	r19, r1
     158:	2d 25       	eor	r18, r13
     15a:	31 25       	eor	r19, r1
     15c:	31 25       	eor	r19, r1
     15e:	31 25       	eor	r19, r1
     160:	31 25       	eor	r19, r1
     162:	31 25       	eor	r19, r1
     164:	31 25       	eor	r19, r1
     166:	31 25       	eor	r19, r1
     168:	f8 24       	eor	r15, r8
     16a:	31 25       	eor	r19, r1
     16c:	31 25       	eor	r19, r1
     16e:	31 25       	eor	r19, r1
     170:	31 25       	eor	r19, r1
     172:	31 25       	eor	r19, r1
     174:	31 25       	eor	r19, r1
     176:	31 25       	eor	r19, r1
     178:	31 25       	eor	r19, r1
     17a:	31 25       	eor	r19, r1
     17c:	31 25       	eor	r19, r1
     17e:	31 25       	eor	r19, r1
     180:	31 25       	eor	r19, r1
     182:	31 25       	eor	r19, r1
     184:	31 25       	eor	r19, r1
     186:	31 25       	eor	r19, r1
     188:	ec 24       	eor	r14, r12
     18a:	31 25       	eor	r19, r1
     18c:	31 25       	eor	r19, r1
     18e:	31 25       	eor	r19, r1
     190:	31 25       	eor	r19, r1
     192:	31 25       	eor	r19, r1
     194:	31 25       	eor	r19, r1
     196:	31 25       	eor	r19, r1
     198:	10 25       	eor	r17, r0
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <sevenSegmentDisplayController_create+0x30>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     21c:	05 e0       	ldi	r16, 0x05	; 5
     21e:	1e e0       	ldi	r17, 0x0E	; 14
     220:	0f 2e       	mov	r0, r31
     222:	f5 e3       	ldi	r31, 0x35	; 53
     224:	ef 2e       	mov	r14, r31
     226:	fe e0       	ldi	r31, 0x0E	; 14
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <uxDeletedTasksWaitingCleanUp>
     230:	88 23       	and	r24, r24
     232:	29 f1       	breq	.+74     	; 0x27e <prvIdleTask+0x62>
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	0f 92       	push	r0
     23a:	d8 01       	movw	r26, r16
     23c:	17 96       	adiw	r26, 0x07	; 7
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	c0 85       	ldd	r28, Z+8	; 0x08
     246:	d1 85       	ldd	r29, Z+9	; 0x09
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
     250:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <uxCurrentNumberOfTasks>
     254:	81 50       	subi	r24, 0x01	; 1
     256:	80 93 f8 0d 	sts	0x0DF8, r24	; 0x800df8 <uxCurrentNumberOfTasks>
     25a:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <uxDeletedTasksWaitingCleanUp>
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	80 93 04 0e 	sts	0x0E04, r24	; 0x800e04 <uxDeletedTasksWaitingCleanUp>
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	8b 8d       	ldd	r24, Y+27	; 0x1b
     26a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     26c:	0e 94 1f 0a 	call	0x143e	; 0x143e <vPortFree>
     270:	ce 01       	movw	r24, r28
     272:	0e 94 1f 0a 	call	0x143e	; 0x143e <vPortFree>
     276:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <uxDeletedTasksWaitingCleanUp>
     27a:	81 11       	cpse	r24, r1
     27c:	db cf       	rjmp	.-74     	; 0x234 <prvIdleTask+0x18>
     27e:	f7 01       	movw	r30, r14
     280:	80 81       	ld	r24, Z
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	10 f0       	brcs	.+4      	; 0x28a <prvIdleTask+0x6e>
     286:	0e 94 24 0b 	call	0x1648	; 0x1648 <vPortYield>
     28a:	0e 94 af 18 	call	0x315e	; 0x315e <vApplicationIdleHook>
     28e:	ce cf       	rjmp	.-100    	; 0x22c <prvIdleTask+0x10>

00000290 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	60 97       	sbiw	r28, 0x10	; 16
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	9a 87       	std	Y+10, r25	; 0x0a
     2aa:	89 87       	std	Y+9, r24	; 0x09
     2ac:	81 2c       	mov	r8, r1
     2ae:	91 2c       	mov	r9, r1
     2b0:	a1 2c       	mov	r10, r1
     2b2:	b1 2c       	mov	r11, r1
     2b4:	69 84       	ldd	r6, Y+9	; 0x09
     2b6:	7a 84       	ldd	r7, Y+10	; 0x0a
     2b8:	e0 91 af 0e 	lds	r30, 0x0EAF	; 0x800eaf <pxCurrentTimerList>
     2bc:	f0 91 b0 0e 	lds	r31, 0x0EB0	; 0x800eb0 <pxCurrentTimerList+0x1>
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <prvTimerTask+0x38>
     2c6:	13 c1       	rjmp	.+550    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     2c8:	07 80       	ldd	r0, Z+7	; 0x07
     2ca:	f0 85       	ldd	r31, Z+8	; 0x08
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 80       	ld	r2, Z
     2d0:	31 80       	ldd	r3, Z+1	; 0x01
     2d2:	42 80       	ldd	r4, Z+2	; 0x02
     2d4:	53 80       	ldd	r5, Z+3	; 0x03
     2d6:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskSuspendAll>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 19 18 	call	0x3032	; 0x3032 <prvSampleTimeNow>
     2e2:	6b 87       	std	Y+11, r22	; 0x0b
     2e4:	7c 87       	std	Y+12, r23	; 0x0c
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
     2e8:	9e 87       	std	Y+14, r25	; 0x0e
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	81 11       	cpse	r24, r1
     2ee:	67 c0       	rjmp	.+206    	; 0x3be <prvTimerTask+0x12e>
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2f6:	be 85       	ldd	r27, Y+14	; 0x0e
     2f8:	82 15       	cp	r24, r2
     2fa:	93 05       	cpc	r25, r3
     2fc:	a4 05       	cpc	r26, r4
     2fe:	b5 05       	cpc	r27, r5
     300:	08 f4       	brcc	.+2      	; 0x304 <prvTimerTask+0x74>
     302:	45 c0       	rjmp	.+138    	; 0x38e <prvTimerTask+0xfe>
     304:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>
     308:	e0 91 af 0e 	lds	r30, 0x0EAF	; 0x800eaf <pxCurrentTimerList>
     30c:	f0 91 b0 0e 	lds	r31, 0x0EB0	; 0x800eb0 <pxCurrentTimerList+0x1>
     310:	07 80       	ldd	r0, Z+7	; 0x07
     312:	f0 85       	ldd	r31, Z+8	; 0x08
     314:	e0 2d       	mov	r30, r0
     316:	a0 85       	ldd	r26, Z+8	; 0x08
     318:	b1 85       	ldd	r27, Z+9	; 0x09
     31a:	b8 8b       	std	Y+16, r27	; 0x10
     31c:	af 87       	std	Y+15, r26	; 0x0f
     31e:	cd 01       	movw	r24, r26
     320:	02 96       	adiw	r24, 0x02	; 2
     322:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
     326:	ef 85       	ldd	r30, Y+15	; 0x0f
     328:	f8 89       	ldd	r31, Y+16	; 0x10
     32a:	86 89       	ldd	r24, Z+22	; 0x16
     32c:	82 ff       	sbrs	r24, 2
     32e:	21 c0       	rjmp	.+66     	; 0x372 <prvTimerTask+0xe2>
     330:	46 85       	ldd	r20, Z+14	; 0x0e
     332:	57 85       	ldd	r21, Z+15	; 0x0f
     334:	60 89       	ldd	r22, Z+16	; 0x10
     336:	71 89       	ldd	r23, Z+17	; 0x11
     338:	42 0d       	add	r20, r2
     33a:	53 1d       	adc	r21, r3
     33c:	64 1d       	adc	r22, r4
     33e:	75 1d       	adc	r23, r5
     340:	72 01       	movw	r14, r4
     342:	61 01       	movw	r12, r2
     344:	0b 85       	ldd	r16, Y+11	; 0x0b
     346:	1c 85       	ldd	r17, Y+12	; 0x0c
     348:	2d 85       	ldd	r18, Y+13	; 0x0d
     34a:	3e 85       	ldd	r19, Y+14	; 0x0e
     34c:	cf 01       	movw	r24, r30
     34e:	0e 94 29 17 	call	0x2e52	; 0x2e52 <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	99 f0       	breq	.+38     	; 0x37c <prvTimerTask+0xec>
     356:	c8 2c       	mov	r12, r8
     358:	d9 2c       	mov	r13, r9
     35a:	ea 2c       	mov	r14, r10
     35c:	fb 2c       	mov	r15, r11
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a2 01       	movw	r20, r4
     364:	91 01       	movw	r18, r2
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	8f 85       	ldd	r24, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <xTimerGenericCommand>
     370:	05 c0       	rjmp	.+10     	; 0x37c <prvTimerTask+0xec>
     372:	8e 7f       	andi	r24, 0xFE	; 254
     374:	af 85       	ldd	r26, Y+15	; 0x0f
     376:	b8 89       	ldd	r27, Y+16	; 0x10
     378:	56 96       	adiw	r26, 0x16	; 22
     37a:	8c 93       	st	X, r24
     37c:	af 85       	ldd	r26, Y+15	; 0x0f
     37e:	b8 89       	ldd	r27, Y+16	; 0x10
     380:	54 96       	adiw	r26, 0x14	; 20
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	55 97       	sbiw	r26, 0x15	; 21
     388:	cd 01       	movw	r24, r26
     38a:	19 95       	eicall
     38c:	a1 c0       	rjmp	.+322    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	b2 01       	movw	r22, r4
     392:	a1 01       	movw	r20, r2
     394:	8b 85       	ldd	r24, Y+11	; 0x0b
     396:	9c 85       	ldd	r25, Y+12	; 0x0c
     398:	ad 85       	ldd	r26, Y+13	; 0x0d
     39a:	be 85       	ldd	r27, Y+14	; 0x0e
     39c:	48 1b       	sub	r20, r24
     39e:	59 0b       	sbc	r21, r25
     3a0:	6a 0b       	sbc	r22, r26
     3a2:	7b 0b       	sbc	r23, r27
     3a4:	80 91 ab 0e 	lds	r24, 0x0EAB	; 0x800eab <xTimerQueue>
     3a8:	90 91 ac 0e 	lds	r25, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
     3ac:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <vQueueWaitForMessageRestricted>
     3b0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>
     3b4:	81 11       	cpse	r24, r1
     3b6:	8c c0       	rjmp	.+280    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3b8:	0e 94 24 0b 	call	0x1648	; 0x1648 <vPortYield>
     3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3be:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>
     3c2:	86 c0       	rjmp	.+268    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <prvTimerTask+0x13c>
     3ca:	82 c0       	rjmp	.+260    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3cc:	4e 80       	ldd	r4, Y+6	; 0x06
     3ce:	5f 80       	ldd	r5, Y+7	; 0x07
     3d0:	d2 01       	movw	r26, r4
     3d2:	1c 96       	adiw	r26, 0x0c	; 12
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	1d 97       	sbiw	r26, 0x0d	; 13
     3da:	89 2b       	or	r24, r25
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <prvTimerTask+0x156>
     3de:	c2 01       	movw	r24, r4
     3e0:	02 96       	adiw	r24, 0x02	; 2
     3e2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
     3e6:	ce 01       	movw	r24, r28
     3e8:	08 96       	adiw	r24, 0x08	; 8
     3ea:	0e 94 19 18 	call	0x3032	; 0x3032 <prvSampleTimeNow>
     3ee:	8b 01       	movw	r16, r22
     3f0:	9c 01       	movw	r18, r24
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	0e 2e       	mov	r0, r30
     3f6:	00 0c       	add	r0, r0
     3f8:	ff 0b       	sbc	r31, r31
     3fa:	ea 30       	cpi	r30, 0x0A	; 10
     3fc:	f1 05       	cpc	r31, r1
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	67 c0       	rjmp	.+206    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     402:	88 27       	eor	r24, r24
     404:	ee 58       	subi	r30, 0x8E	; 142
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	8f 4f       	sbci	r24, 0xFF	; 255
     40a:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <__tablejump2__>
     40e:	f2 01       	movw	r30, r4
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	81 60       	ori	r24, 0x01	; 1
     414:	86 8b       	std	Z+22, r24	; 0x16
     416:	ca 80       	ldd	r12, Y+2	; 0x02
     418:	db 80       	ldd	r13, Y+3	; 0x03
     41a:	ec 80       	ldd	r14, Y+4	; 0x04
     41c:	fd 80       	ldd	r15, Y+5	; 0x05
     41e:	46 85       	ldd	r20, Z+14	; 0x0e
     420:	57 85       	ldd	r21, Z+15	; 0x0f
     422:	60 89       	ldd	r22, Z+16	; 0x10
     424:	71 89       	ldd	r23, Z+17	; 0x11
     426:	4c 0d       	add	r20, r12
     428:	5d 1d       	adc	r21, r13
     42a:	6e 1d       	adc	r22, r14
     42c:	7f 1d       	adc	r23, r15
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 29 17 	call	0x2e52	; 0x2e52 <prvInsertTimerInActiveList>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	4b c0       	rjmp	.+150    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43a:	d2 01       	movw	r26, r4
     43c:	54 96       	adiw	r26, 0x14	; 20
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	55 97       	sbiw	r26, 0x15	; 21
     444:	c2 01       	movw	r24, r4
     446:	19 95       	eicall
     448:	f2 01       	movw	r30, r4
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	82 ff       	sbrs	r24, 2
     44e:	40 c0       	rjmp	.+128    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     450:	4a 81       	ldd	r20, Y+2	; 0x02
     452:	5b 81       	ldd	r21, Y+3	; 0x03
     454:	6c 81       	ldd	r22, Y+4	; 0x04
     456:	7d 81       	ldd	r23, Y+5	; 0x05
     458:	86 85       	ldd	r24, Z+14	; 0x0e
     45a:	97 85       	ldd	r25, Z+15	; 0x0f
     45c:	a0 89       	ldd	r26, Z+16	; 0x10
     45e:	b1 89       	ldd	r27, Z+17	; 0x11
     460:	9a 01       	movw	r18, r20
     462:	ab 01       	movw	r20, r22
     464:	28 0f       	add	r18, r24
     466:	39 1f       	adc	r19, r25
     468:	4a 1f       	adc	r20, r26
     46a:	5b 1f       	adc	r21, r27
     46c:	c8 2c       	mov	r12, r8
     46e:	d9 2c       	mov	r13, r9
     470:	ea 2c       	mov	r14, r10
     472:	fb 2c       	mov	r15, r11
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	c2 01       	movw	r24, r4
     47c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <xTimerGenericCommand>
     480:	27 c0       	rjmp	.+78     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     482:	d2 01       	movw	r26, r4
     484:	56 96       	adiw	r26, 0x16	; 22
     486:	8c 91       	ld	r24, X
     488:	56 97       	sbiw	r26, 0x16	; 22
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	8c 93       	st	X, r24
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     492:	f2 01       	movw	r30, r4
     494:	86 89       	ldd	r24, Z+22	; 0x16
     496:	81 60       	ori	r24, 0x01	; 1
     498:	86 8b       	std	Z+22, r24	; 0x16
     49a:	4a 81       	ldd	r20, Y+2	; 0x02
     49c:	5b 81       	ldd	r21, Y+3	; 0x03
     49e:	6c 81       	ldd	r22, Y+4	; 0x04
     4a0:	7d 81       	ldd	r23, Y+5	; 0x05
     4a2:	46 87       	std	Z+14, r20	; 0x0e
     4a4:	57 87       	std	Z+15, r21	; 0x0f
     4a6:	60 8b       	std	Z+16, r22	; 0x10
     4a8:	71 8b       	std	Z+17, r23	; 0x11
     4aa:	40 0f       	add	r20, r16
     4ac:	51 1f       	adc	r21, r17
     4ae:	62 1f       	adc	r22, r18
     4b0:	73 1f       	adc	r23, r19
     4b2:	68 01       	movw	r12, r16
     4b4:	79 01       	movw	r14, r18
     4b6:	c2 01       	movw	r24, r4
     4b8:	0e 94 29 17 	call	0x2e52	; 0x2e52 <prvInsertTimerInActiveList>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4be:	f2 01       	movw	r30, r4
     4c0:	86 89       	ldd	r24, Z+22	; 0x16
     4c2:	81 fd       	sbrc	r24, 1
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c6:	c2 01       	movw	r24, r4
     4c8:	ba d7       	rcall	.+3956   	; 0x143e <vPortFree>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	86 8b       	std	Z+22, r24	; 0x16
     4d0:	28 2d       	mov	r18, r8
     4d2:	39 2d       	mov	r19, r9
     4d4:	4a 2d       	mov	r20, r10
     4d6:	5b 2d       	mov	r21, r11
     4d8:	66 2d       	mov	r22, r6
     4da:	77 2d       	mov	r23, r7
     4dc:	80 91 ab 0e 	lds	r24, 0x0EAB	; 0x800eab <xTimerQueue>
     4e0:	90 91 ac 0e 	lds	r25, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
     4e4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <xQueueReceive>
     4e8:	81 11       	cpse	r24, r1
     4ea:	6c cf       	rjmp	.-296    	; 0x3c4 <prvTimerTask+0x134>
     4ec:	e5 ce       	rjmp	.-566    	; 0x2b8 <prvTimerTask+0x28>
     4ee:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskSuspendAll>
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 19 18 	call	0x3032	; 0x3032 <prvSampleTimeNow>
     4fa:	6b 87       	std	Y+11, r22	; 0x0b
     4fc:	7c 87       	std	Y+12, r23	; 0x0c
     4fe:	8d 87       	std	Y+13, r24	; 0x0d
     500:	9e 87       	std	Y+14, r25	; 0x0e
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	81 11       	cpse	r24, r1
     506:	5b cf       	rjmp	.-330    	; 0x3be <prvTimerTask+0x12e>
     508:	e0 91 ad 0e 	lds	r30, 0x0EAD	; 0x800ead <pxOverflowTimerList>
     50c:	f0 91 ae 0e 	lds	r31, 0x0EAE	; 0x800eae <pxOverflowTimerList+0x1>
     510:	80 81       	ld	r24, Z
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	81 11       	cpse	r24, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	28 2c       	mov	r2, r8
     51a:	39 2c       	mov	r3, r9
     51c:	4a 2c       	mov	r4, r10
     51e:	5b 2c       	mov	r5, r11
     520:	37 cf       	rjmp	.-402    	; 0x390 <prvTimerTask+0x100>

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d1 e2       	ldi	r29, 0x21	; 33
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	0c bf       	out	0x3c, r16	; 60

00000532 <__do_copy_data>:
     532:	14 e0       	ldi	r17, 0x04	; 4
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b2 e0       	ldi	r27, 0x02	; 2
     538:	ec ec       	ldi	r30, 0xCC	; 204
     53a:	f7 e5       	ldi	r31, 0x57	; 87
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	0b bf       	out	0x3b, r16	; 59
     540:	02 c0       	rjmp	.+4      	; 0x546 <__do_copy_data+0x14>
     542:	07 90       	elpm	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	a8 30       	cpi	r26, 0x08	; 8
     548:	b1 07       	cpc	r27, r17
     54a:	d9 f7       	brne	.-10     	; 0x542 <__do_copy_data+0x10>

0000054c <__do_clear_bss>:
     54c:	2f e0       	ldi	r18, 0x0F	; 15
     54e:	a8 e0       	ldi	r26, 0x08	; 8
     550:	b4 e0       	ldi	r27, 0x04	; 4
     552:	01 c0       	rjmp	.+2      	; 0x556 <.do_clear_bss_start>

00000554 <.do_clear_bss_loop>:
     554:	1d 92       	st	X+, r1

00000556 <.do_clear_bss_start>:
     556:	a4 34       	cpi	r26, 0x44	; 68
     558:	b2 07       	cpc	r27, r18
     55a:	e1 f7       	brne	.-8      	; 0x554 <.do_clear_bss_loop>
     55c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <main>
     560:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <_exit>

00000564 <__bad_interrupt>:
     564:	4d cd       	rjmp	.-1382   	; 0x0 <__vectors>

00000566 <carbonDioxideController_task>:
	if (rc != MHZ19_OK)
	{
		printf("CO2 sensor does not OK\n");
	}
	rc = mh_z19_takeMeassuring();	
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     566:	0f 2e       	mov	r0, r31
     568:	f8 ee       	ldi	r31, 0xE8	; 232
     56a:	8f 2e       	mov	r8, r31
     56c:	f3 e0       	ldi	r31, 0x03	; 3
     56e:	9f 2e       	mov	r9, r31
     570:	a1 2c       	mov	r10, r1
     572:	b1 2c       	mov	r11, r1
     574:	f0 2d       	mov	r31, r0
	PORTA ^= _BV(PA2);
     576:	68 94       	set
     578:	ff 24       	eor	r15, r15
     57a:	f2 f8       	bld	r15, 2
	//
	PORTA ^= _BV(PA2);
	mh_z19_getCo2Ppm(&appm);
	int u = appm;
	
	printf("Carbon:%d\n",u);
     57c:	06 e6       	ldi	r16, 0x66	; 102
     57e:	12 e0       	ldi	r17, 0x02	; 2
	//mh_z19_setAutoCalibration(false);
	//mh_z19_injectCallBack(myCo2CallBack(appm));
	for(;;)
	{
	
	if (rc != MHZ19_OK)
     580:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <rc>
     584:	88 23       	and	r24, r24
     586:	21 f0       	breq	.+8      	; 0x590 <carbonDioxideController_task+0x2a>
	{
		printf("CO2 sensor does not OK\n");
     588:	8f e4       	ldi	r24, 0x4F	; 79
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
	}
	rc = mh_z19_takeMeassuring();	
     590:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <mh_z19_takeMeassuring>
     594:	80 93 25 0f 	sts	0x0F25, r24	; 0x800f25 <rc>
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     598:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <carbon>
     59c:	90 91 29 0f 	lds	r25, 0x0F29	; 0x800f29 <carbon+0x1>
     5a0:	72 d3       	rcall	.+1764   	; 0xc86 <carbonDioxideSensor_getReportInterval>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	4a ef       	ldi	r20, 0xFA	; 250
     5a8:	53 e4       	ldi	r21, 0x43	; 67
     5aa:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     5ae:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	ae e3       	ldi	r26, 0x3E	; 62
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     5be:	a5 01       	movw	r20, r10
     5c0:	94 01       	movw	r18, r8
     5c2:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     5c6:	ca 01       	movw	r24, r20
     5c8:	b9 01       	movw	r22, r18
     5ca:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
	PORTA ^= _BV(PA2);
     5ce:	82 b1       	in	r24, 0x02	; 2
     5d0:	8f 25       	eor	r24, r15
     5d2:	82 b9       	out	0x02, r24	; 2
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     5d4:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <carbon>
     5d8:	90 91 29 0f 	lds	r25, 0x0F29	; 0x800f29 <carbon+0x1>
     5dc:	54 d3       	rcall	.+1704   	; 0xc86 <carbonDioxideSensor_getReportInterval>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4a ef       	ldi	r20, 0xFA	; 250
     5e4:	53 e4       	ldi	r21, 0x43	; 67
     5e6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     5ea:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	ae e3       	ldi	r26, 0x3E	; 62
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     5fa:	a5 01       	movw	r20, r10
     5fc:	94 01       	movw	r18, r8
     5fe:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     602:	ca 01       	movw	r24, r20
     604:	b9 01       	movw	r22, r18
     606:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
	//
	PORTA ^= _BV(PA2);
     60a:	82 b1       	in	r24, 0x02	; 2
     60c:	8f 25       	eor	r24, r15
     60e:	82 b9       	out	0x02, r24	; 2
	mh_z19_getCo2Ppm(&appm);
     610:	86 e2       	ldi	r24, 0x26	; 38
     612:	9f e0       	ldi	r25, 0x0F	; 15
     614:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <mh_z19_getCo2Ppm>
	int u = appm;
     618:	d0 91 26 0f 	lds	r29, 0x0F26	; 0x800f26 <appm>
     61c:	c0 91 27 0f 	lds	r28, 0x0F27	; 0x800f27 <appm+0x1>
	
	printf("Carbon:%d\n",u);
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	1f 93       	push	r17
     626:	0f 93       	push	r16
     628:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
	carbonDioxideSensor_setValue(carbon,u);
     62c:	6d 2f       	mov	r22, r29
     62e:	7c 2f       	mov	r23, r28
     630:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <carbon>
     634:	90 91 29 0f 	lds	r25, 0x0F29	; 0x800f29 <carbon+0x1>
     638:	06 d3       	rcall	.+1548   	; 0xc46 <carbonDioxideSensor_setValue>
	myTime_t time = carbonDioxideSensor_getUpdateTime(carbon);
     63a:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <carbon>
     63e:	90 91 29 0f 	lds	r25, 0x0F29	; 0x800f29 <carbon+0x1>
     642:	66 d3       	rcall	.+1740   	; 0xd10 <carbonDioxideSensor_getUpdateTime>
	}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	99 cf       	rjmp	.-206    	; 0x580 <carbonDioxideController_task+0x1a>

0000064e <CO2SensorController_create>:
}

void CO2SensorController_create(carbonDioxideSensor_t co2)
{
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
		carbon = co2;
     654:	90 93 29 0f 	sts	0x0F29, r25	; 0x800f29 <carbon+0x1>
     658:	80 93 28 0f 	sts	0x0F28, r24	; 0x800f28 <carbon>
		printf("CO2 sensor started!!!\n");
     65c:	81 e7       	ldi	r24, 0x71	; 113
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
		xTaskCreate(carbonDioxideController_task,"COXTask",configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     664:	e1 2c       	mov	r14, r1
     666:	f1 2c       	mov	r15, r1
     668:	01 e0       	ldi	r16, 0x01	; 1
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 ec       	ldi	r20, 0xC0	; 192
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	67 e8       	ldi	r22, 0x87	; 135
     674:	72 e0       	ldi	r23, 0x02	; 2
     676:	83 eb       	ldi	r24, 0xB3	; 179
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 32 10 	call	0x2064	; 0x2064 <xTaskCreate>
		//vTaskStartScheduler();
}
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	08 95       	ret

00000686 <HumSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     686:	0f 2e       	mov	r0, r31
     688:	ff e8       	ldi	r31, 0x8F	; 143
     68a:	8f 2e       	mov	r8, r31
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	9f 2e       	mov	r9, r31
     690:	f0 2d       	mov	r31, r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
		PORTA ^= _BV(PA1);
     692:	12 e0       	ldi	r17, 0x02	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Humility sensor didn't measure!!!");
     694:	0f 2e       	mov	r0, r31
     696:	f3 eb       	ldi	r31, 0xB3	; 179
     698:	2f 2e       	mov	r2, r31
     69a:	f2 e0       	ldi	r31, 0x02	; 2
     69c:	3f 2e       	mov	r3, r31
     69e:	f0 2d       	mov	r31, r0
		humiditySensor_setValue(humSensor,humility);
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
		printf("Hum%d.%d",a,b);
     6a0:	0f 2e       	mov	r0, r31
     6a2:	f0 e1       	ldi	r31, 0x10	; 16
     6a4:	af 2e       	mov	r10, r31
     6a6:	f7 e2       	ldi	r31, 0x27	; 39
     6a8:	bf 2e       	mov	r11, r31
     6aa:	f0 2d       	mov	r31, r0
     6ac:	c5 ed       	ldi	r28, 0xD5	; 213
     6ae:	d2 e0       	ldi	r29, 0x02	; 2

void HumSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     6b0:	0e 94 b6 1c 	call	0x396c	; 0x396c <hih8120_wakeup>
     6b4:	88 23       	and	r24, r24
     6b6:	31 f0       	breq	.+12     	; 0x6c4 <HumSensorController_task+0x3e>
		{
			printf("Temperature sensor didn't wakeup!!!");
     6b8:	9f 92       	push	r9
     6ba:	8f 92       	push	r8
     6bc:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     6c4:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <humSensor>
     6c8:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <humSensor+0x1>
     6cc:	9a d3       	rcall	.+1844   	; 0xe02 <humiditySensor_getReportInterval>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4a ef       	ldi	r20, 0xFA	; 250
     6d4:	53 e4       	ldi	r21, 0x43	; 67
     6d6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     6da:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	ae e3       	ldi	r26, 0x3E	; 62
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     6ea:	28 ee       	ldi	r18, 0xE8	; 232
     6ec:	33 e0       	ldi	r19, 0x03	; 3
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     6f6:	ca 01       	movw	r24, r20
     6f8:	b9 01       	movw	r22, r18
     6fa:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
		PORTA ^= _BV(PA1);
     6fe:	82 b1       	in	r24, 0x02	; 2
     700:	81 27       	eor	r24, r17
     702:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     704:	0e 94 ca 1c 	call	0x3994	; 0x3994 <hih8120_measure>
     708:	88 23       	and	r24, r24
     70a:	31 f0       	breq	.+12     	; 0x718 <HumSensorController_task+0x92>
		{
			printf("Humility sensor didn't measure!!!");
     70c:	3f 92       	push	r3
     70e:	2f 92       	push	r2
     710:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     718:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <humSensor>
     71c:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <humSensor+0x1>
     720:	70 d3       	rcall	.+1760   	; 0xe02 <humiditySensor_getReportInterval>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4a ef       	ldi	r20, 0xFA	; 250
     728:	53 e4       	ldi	r21, 0x43	; 67
     72a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     72e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24
     736:	ae e3       	ldi	r26, 0x3E	; 62
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     73e:	28 ee       	ldi	r18, 0xE8	; 232
     740:	33 e0       	ldi	r19, 0x03	; 3
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     74a:	ca 01       	movw	r24, r20
     74c:	b9 01       	movw	r22, r18
     74e:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
		PORTA ^= _BV(PA1);
     752:	82 b1       	in	r24, 0x02	; 2
     754:	81 27       	eor	r24, r17
     756:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		humility = hih8120_getHumidity();
     758:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <hih8120_getHumidity>
     75c:	ab 01       	movw	r20, r22
     75e:	bc 01       	movw	r22, r24
     760:	40 93 08 04 	sts	0x0408, r20	; 0x800408 <__data_end>
     764:	50 93 09 04 	sts	0x0409, r21	; 0x800409 <__data_end+0x1>
     768:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <__data_end+0x2>
     76c:	70 93 0b 04 	sts	0x040B, r23	; 0x80040b <__data_end+0x3>
		humiditySensor_setValue(humSensor,humility);
     770:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <humSensor>
     774:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <humSensor+0x1>
     778:	1c d3       	rcall	.+1592   	; 0xdb2 <humiditySensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
     77a:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <humSensor>
     77e:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <humSensor+0x1>
     782:	64 d3       	rcall	.+1736   	; 0xe4c <humiditySensor_getValue>
     784:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fixsfsi>
     788:	6b 01       	movw	r12, r22
     78a:	7c 01       	movw	r14, r24
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
     78c:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <humSensor>
     790:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <humSensor+0x1>
     794:	5b d3       	rcall	.+1718   	; 0xe4c <humiditySensor_getValue>
     796:	2b 01       	movw	r4, r22
     798:	3c 01       	movw	r6, r24
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
     79a:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <humSensor>
     79e:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <humSensor+0x1>
     7a2:	79 d3       	rcall	.+1778   	; 0xe96 <humiditySensor_getUpdateTime>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
		printf("Hum%d.%d",a,b);
     7a6:	30 e4       	ldi	r19, 0x40	; 64
     7a8:	4c e1       	ldi	r20, 0x1C	; 28
     7aa:	56 e4       	ldi	r21, 0x46	; 70
     7ac:	c3 01       	movw	r24, r6
     7ae:	b2 01       	movw	r22, r4
     7b0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     7b4:	2b 01       	movw	r4, r22
     7b6:	3c 01       	movw	r6, r24
     7b8:	ac 9c       	mul	r10, r12
     7ba:	b0 01       	movw	r22, r0
     7bc:	ad 9c       	mul	r10, r13
     7be:	70 0d       	add	r23, r0
     7c0:	bc 9c       	mul	r11, r12
     7c2:	70 0d       	add	r23, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	07 2e       	mov	r0, r23
     7c8:	00 0c       	add	r0, r0
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__floatsisf>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	c3 01       	movw	r24, r6
     7d8:	b2 01       	movw	r22, r4
     7da:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__subsf3>
     7de:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fixsfsi>
     7e2:	7f 93       	push	r23
     7e4:	6f 93       	push	r22
     7e6:	df 92       	push	r13
     7e8:	cf 92       	push	r12
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
     7f2:	0f 90       	pop	r0
	}
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	58 cf       	rjmp	.-336    	; 0x6b0 <HumSensorController_task+0x2a>

00000800 <HumSensorController_create>:
     800:	ef 92       	push	r14
}

void HumSensorController_create(humiditySensor_t sensor)
{
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
	humSensor = sensor;
     806:	90 93 2b 0f 	sts	0x0F2B, r25	; 0x800f2b <humSensor+0x1>
     80a:	80 93 2a 0f 	sts	0x0F2A, r24	; 0x800f2a <humSensor>
		printf("Humility sensor started!!!\n");
     80e:	8e ed       	ldi	r24, 0xDE	; 222
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
		xTaskCreate(HumSensorController_task, "HumSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     816:	e1 2c       	mov	r14, r1
     818:	f1 2c       	mov	r15, r1
     81a:	01 e0       	ldi	r16, 0x01	; 1
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 ec       	ldi	r20, 0xC0	; 192
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	69 ef       	ldi	r22, 0xF9	; 249
     826:	72 e0       	ldi	r23, 0x02	; 2
     828:	83 e4       	ldi	r24, 0x43	; 67
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 32 10 	call	0x2064	; 0x2064 <xTaskCreate>
		//vTaskStartScheduler();
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	08 95       	ret

00000838 <sevenSegmentDisplayController_task>:
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
		myTime_t nowTime = myTime_getNowTime();
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
		display_7seg_display(time/100,2);
     838:	0f 2e       	mov	r0, r31
     83a:	f4 e6       	ldi	r31, 0x64	; 100
     83c:	8f 2e       	mov	r8, r31
     83e:	f0 2d       	mov	r31, r0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     840:	0f 2e       	mov	r0, r31
     842:	f8 ee       	ldi	r31, 0xE8	; 232
     844:	cf 2e       	mov	r12, r31
     846:	f3 e0       	ldi	r31, 0x03	; 3
     848:	df 2e       	mov	r13, r31
     84a:	e1 2c       	mov	r14, r1
     84c:	f1 2c       	mov	r15, r1
     84e:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA7);
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     850:	68 94       	set
     852:	99 24       	eor	r9, r9
     854:	96 f8       	bld	r9, 6
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA6);
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     856:	68 94       	set
     858:	aa 24       	eor	r10, r10
     85a:	a5 f8       	bld	r10, 5
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA5);
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     85c:	68 94       	set
     85e:	bb 24       	eor	r11, r11
     860:	b4 f8       	bld	r11, 4
void sevenSegmentDisplayController_task(void *pvParameters)
{
	while(1)
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
     862:	82 b1       	in	r24, 0x02	; 2
     864:	80 58       	subi	r24, 0x80	; 128
     866:	82 b9       	out	0x02, r24	; 2
		myTime_t nowTime = myTime_getNowTime();
     868:	c7 d4       	rcall	.+2446   	; 0x11f8 <myTime_getNowTime>
     86a:	ec 01       	movw	r28, r24
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
     86c:	cb d4       	rcall	.+2454   	; 0x1204 <myTime_getHour>
     86e:	8c 01       	movw	r16, r24
     870:	ce 01       	movw	r24, r28
     872:	cc d4       	rcall	.+2456   	; 0x120c <myTime_getMin>
     874:	80 9e       	mul	r8, r16
		display_7seg_display(time/100,2);
     876:	b0 01       	movw	r22, r0
     878:	81 9e       	mul	r8, r17
     87a:	70 0d       	add	r23, r0
     87c:	11 24       	eor	r1, r1
     87e:	86 0f       	add	r24, r22
     880:	97 1f       	adc	r25, r23
     882:	bc 01       	movw	r22, r24
     884:	99 0f       	add	r25, r25
     886:	88 0b       	sbc	r24, r24
     888:	99 0b       	sbc	r25, r25
     88a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__floatsisf>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	48 ec       	ldi	r20, 0xC8	; 200
     894:	52 e4       	ldi	r21, 0x42	; 66
     896:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__divsf3>
     89a:	42 e0       	ldi	r20, 0x02	; 2
     89c:	0e 94 14 1b 	call	0x3628	; 0x3628 <display_7seg_display>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	4a e7       	ldi	r20, 0x7A	; 122
     8a6:	54 e4       	ldi	r21, 0x44	; 68
     8a8:	60 91 2c 0f 	lds	r22, 0x0F2C	; 0x800f2c <updateTime>
     8ac:	70 91 2d 0f 	lds	r23, 0x0F2D	; 0x800f2d <updateTime+0x1>
     8b0:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <updateTime+0x2>
     8b4:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <updateTime+0x3>
     8b8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     8bc:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	ae e3       	ldi	r26, 0x3E	; 62
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     8cc:	a7 01       	movw	r20, r14
     8ce:	96 01       	movw	r18, r12
     8d0:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     8d4:	ca 01       	movw	r24, r20
     8d6:	b9 01       	movw	r22, r18
     8d8:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
     8dc:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
     8de:	80 58       	subi	r24, 0x80	; 128
     8e0:	82 b9       	out	0x02, r24	; 2
     8e2:	82 b1       	in	r24, 0x02	; 2
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     8e4:	89 25       	eor	r24, r9
		temperatureSensor_t temperatureSensor = sensorModelManager_getTemperatureSensor();
     8e6:	82 b9       	out	0x02, r24	; 2
     8e8:	dd d3       	rcall	.+1978   	; 0x10a4 <sensorModelManager_getTemperatureSensor>
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
     8ea:	73 d3       	rcall	.+1766   	; 0xfd2 <temperatureSensor_getValue>
     8ec:	42 e0       	ldi	r20, 0x02	; 2
     8ee:	0e 94 14 1b 	call	0x3628	; 0x3628 <display_7seg_display>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	4a e7       	ldi	r20, 0x7A	; 122
     8f8:	54 e4       	ldi	r21, 0x44	; 68
     8fa:	60 91 2c 0f 	lds	r22, 0x0F2C	; 0x800f2c <updateTime>
     8fe:	70 91 2d 0f 	lds	r23, 0x0F2D	; 0x800f2d <updateTime+0x1>
     902:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <updateTime+0x2>
     906:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <updateTime+0x3>
     90a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     90e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     912:	9b 01       	movw	r18, r22
     914:	ac 01       	movw	r20, r24
     916:	ae e3       	ldi	r26, 0x3E	; 62
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     91e:	a7 01       	movw	r20, r14
     920:	96 01       	movw	r18, r12
     922:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     926:	ca 01       	movw	r24, r20
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
     92e:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA6);
     930:	89 25       	eor	r24, r9
     932:	82 b9       	out	0x02, r24	; 2
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     934:	82 b1       	in	r24, 0x02	; 2
     936:	8a 25       	eor	r24, r10
     938:	82 b9       	out	0x02, r24	; 2
		humiditySensor_t humiditySensor = sensorModelManager_getHumiditySensor();
     93a:	b9 d3       	rcall	.+1906   	; 0x10ae <sensorModelManager_getHumiditySensor>
     93c:	87 d2       	rcall	.+1294   	; 0xe4c <humiditySensor_getValue>
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
     93e:	42 e0       	ldi	r20, 0x02	; 2
     940:	0e 94 14 1b 	call	0x3628	; 0x3628 <display_7seg_display>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     948:	4a e7       	ldi	r20, 0x7A	; 122
     94a:	54 e4       	ldi	r21, 0x44	; 68
     94c:	60 91 2c 0f 	lds	r22, 0x0F2C	; 0x800f2c <updateTime>
     950:	70 91 2d 0f 	lds	r23, 0x0F2D	; 0x800f2d <updateTime+0x1>
     954:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <updateTime+0x2>
     958:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <updateTime+0x3>
     95c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     960:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	ae e3       	ldi	r26, 0x3E	; 62
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     978:	ca 01       	movw	r24, r20
     97a:	b9 01       	movw	r22, r18
     97c:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
     980:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA5);
     982:	8a 25       	eor	r24, r10
     984:	82 b9       	out	0x02, r24	; 2
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     986:	82 b1       	in	r24, 0x02	; 2
     988:	8b 25       	eor	r24, r11
     98a:	82 b9       	out	0x02, r24	; 2
		carbonDioxideSensor_t carbonDioxideSensor = sensorModelManager_getCarbonDioxideSensor();
     98c:	95 d3       	rcall	.+1834   	; 0x10b8 <sensorModelManager_getCarbonDioxideSensor>
     98e:	a1 d1       	rcall	.+834    	; 0xcd2 <carbonDioxideSensor_getValue>
		display_7seg_display(carbonDioxideSensor_getValue(carbonDioxideSensor),0);
     990:	bc 01       	movw	r22, r24
     992:	99 0f       	add	r25, r25
     994:	88 0b       	sbc	r24, r24
     996:	99 0b       	sbc	r25, r25
     998:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__floatsisf>
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	0e 94 14 1b 	call	0x3628	; 0x3628 <display_7seg_display>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     9a6:	4a e7       	ldi	r20, 0x7A	; 122
     9a8:	54 e4       	ldi	r21, 0x44	; 68
     9aa:	60 91 2c 0f 	lds	r22, 0x0F2C	; 0x800f2c <updateTime>
     9ae:	70 91 2d 0f 	lds	r23, 0x0F2D	; 0x800f2d <updateTime+0x1>
     9b2:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <updateTime+0x2>
     9b6:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <updateTime+0x3>
     9ba:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     9be:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	ae e3       	ldi	r26, 0x3E	; 62
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     9ce:	a7 01       	movw	r20, r14
     9d0:	96 01       	movw	r18, r12
     9d2:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     9d6:	ca 01       	movw	r24, r20
     9d8:	b9 01       	movw	r22, r18
     9da:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
     9de:	82 b1       	in	r24, 0x02	; 2
     9e0:	8b 25       	eor	r24, r11
		PORTA ^= _BV(PA4);
     9e2:	82 b9       	out	0x02, r24	; 2
     9e4:	3e cf       	rjmp	.-388    	; 0x862 <sevenSegmentDisplayController_task+0x2a>

000009e6 <sevenSegmentDisplayController_create>:
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
	}
}

void sevenSegmentDisplayController_create(float displayUpdateTime)
{
     9ea:	0f 93       	push	r16
	updateTime = displayUpdateTime;
     9ec:	60 93 2c 0f 	sts	0x0F2C, r22	; 0x800f2c <updateTime>
     9f0:	70 93 2d 0f 	sts	0x0F2D, r23	; 0x800f2d <updateTime+0x1>
     9f4:	80 93 2e 0f 	sts	0x0F2E, r24	; 0x800f2e <updateTime+0x2>
     9f8:	90 93 2f 0f 	sts	0x0F2F, r25	; 0x800f2f <updateTime+0x3>
	//Init 7-segment Display
	display_7seg_initialise(NULL);
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 c5 1b 	call	0x378a	; 0x378a <display_7seg_initialise>
	display_7seg_powerUp();
     a04:	0e 94 ba 1b 	call	0x3774	; 0x3774 <display_7seg_powerUp>
	
	printf("7-segment Display started!!!\n");
     a08:	87 e0       	ldi	r24, 0x07	; 7
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
	xTaskCreate(sevenSegmentDisplayController_task, "7-segment Display Task", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     a10:	e1 2c       	mov	r14, r1
     a12:	f1 2c       	mov	r15, r1
     a14:	01 e0       	ldi	r16, 0x01	; 1
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 ec       	ldi	r20, 0xC0	; 192
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	64 e2       	ldi	r22, 0x24	; 36
     a20:	73 e0       	ldi	r23, 0x03	; 3
     a22:	8c e1       	ldi	r24, 0x1C	; 28
     a24:	94 e0       	ldi	r25, 0x04	; 4
     a26:	0e 94 32 10 	call	0x2064	; 0x2064 <xTaskCreate>
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	08 95       	ret

00000a32 <temperatureSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     a32:	0f 2e       	mov	r0, r31
     a34:	ff e8       	ldi	r31, 0x8F	; 143
     a36:	8f 2e       	mov	r8, r31
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	9f 2e       	mov	r9, r31
     a3c:	f0 2d       	mov	r31, r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
		PORTA ^= _BV(PA0);
     a3e:	11 e0       	ldi	r17, 0x01	; 1
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Temperature sensor didn't measure!!!");
     a40:	0f 2e       	mov	r0, r31
     a42:	fb e3       	ldi	r31, 0x3B	; 59
     a44:	2f 2e       	mov	r2, r31
     a46:	f3 e0       	ldi	r31, 0x03	; 3
     a48:	3f 2e       	mov	r3, r31
     a4a:	f0 2d       	mov	r31, r0
		temperatureSensor_setValue(temSensor,temperature);
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
		printf("temperature:%d.%d",a,b);
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f0 e1       	ldi	r31, 0x10	; 16
     a50:	af 2e       	mov	r10, r31
     a52:	f7 e2       	ldi	r31, 0x27	; 39
     a54:	bf 2e       	mov	r11, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	c0 e6       	ldi	r28, 0x60	; 96
     a5a:	d3 e0       	ldi	r29, 0x03	; 3

void temperatureSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     a5c:	0e 94 b6 1c 	call	0x396c	; 0x396c <hih8120_wakeup>
     a60:	88 23       	and	r24, r24
     a62:	31 f0       	breq	.+12     	; 0xa70 <temperatureSensorController_task+0x3e>
		{
			printf("Temperature sensor didn't wakeup!!!");
     a64:	9f 92       	push	r9
     a66:	8f 92       	push	r8
     a68:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     a70:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <temSensor>
     a74:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <temSensor+0x1>
     a78:	87 d2       	rcall	.+1294   	; 0xf88 <temperatureSensor_getReportInterval>
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	4a ef       	ldi	r20, 0xFA	; 250
     a80:	53 e4       	ldi	r21, 0x43	; 67
     a82:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     a86:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	ae e3       	ldi	r26, 0x3E	; 62
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     a96:	28 ee       	ldi	r18, 0xE8	; 232
     a98:	33 e0       	ldi	r19, 0x03	; 3
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     aa2:	ca 01       	movw	r24, r20
     aa4:	b9 01       	movw	r22, r18
     aa6:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
		PORTA ^= _BV(PA0);
     aaa:	82 b1       	in	r24, 0x02	; 2
     aac:	81 27       	eor	r24, r17
     aae:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     ab0:	0e 94 ca 1c 	call	0x3994	; 0x3994 <hih8120_measure>
     ab4:	88 23       	and	r24, r24
     ab6:	31 f0       	breq	.+12     	; 0xac4 <temperatureSensorController_task+0x92>
		{
			printf("Temperature sensor didn't measure!!!");
     ab8:	3f 92       	push	r3
     aba:	2f 92       	push	r2
     abc:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     ac4:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <temSensor>
     ac8:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <temSensor+0x1>
     acc:	5d d2       	rcall	.+1210   	; 0xf88 <temperatureSensor_getReportInterval>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	4a ef       	ldi	r20, 0xFA	; 250
     ad4:	53 e4       	ldi	r21, 0x43	; 67
     ad6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     ada:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fixunssfsi>
     ade:	9b 01       	movw	r18, r22
     ae0:	ac 01       	movw	r20, r24
     ae2:	ae e3       	ldi	r26, 0x3E	; 62
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__muluhisi3>
     aea:	28 ee       	ldi	r18, 0xE8	; 232
     aec:	33 e0       	ldi	r19, 0x03	; 3
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodsi4>
     af6:	ca 01       	movw	r24, r20
     af8:	b9 01       	movw	r22, r18
     afa:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
		PORTA ^= _BV(PA0);
     afe:	82 b1       	in	r24, 0x02	; 2
     b00:	81 27       	eor	r24, r17
     b02:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     b04:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <hih8120_getTemperature>
     b08:	ab 01       	movw	r20, r22
     b0a:	bc 01       	movw	r22, r24
     b0c:	40 93 0c 04 	sts	0x040C, r20	; 0x80040c <temperature>
     b10:	50 93 0d 04 	sts	0x040D, r21	; 0x80040d <temperature+0x1>
     b14:	60 93 0e 04 	sts	0x040E, r22	; 0x80040e <temperature+0x2>
     b18:	70 93 0f 04 	sts	0x040F, r23	; 0x80040f <temperature+0x3>
		temperatureSensor_setValue(temSensor,temperature);
     b1c:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <temSensor>
     b20:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <temSensor+0x1>
     b24:	09 d2       	rcall	.+1042   	; 0xf38 <temperatureSensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
     b26:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <temSensor>
     b2a:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <temSensor+0x1>
     b2e:	51 d2       	rcall	.+1186   	; 0xfd2 <temperatureSensor_getValue>
     b30:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fixsfsi>
     b34:	6b 01       	movw	r12, r22
     b36:	7c 01       	movw	r14, r24
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
     b38:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <temSensor>
     b3c:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <temSensor+0x1>
     b40:	48 d2       	rcall	.+1168   	; 0xfd2 <temperatureSensor_getValue>
     b42:	2b 01       	movw	r4, r22
     b44:	3c 01       	movw	r6, r24
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
     b46:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <temSensor>
     b4a:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <temSensor+0x1>
     b4e:	66 d2       	rcall	.+1228   	; 0x101c <temperatureSensor_getUpdateTime>
     b50:	20 e0       	ldi	r18, 0x00	; 0
		printf("temperature:%d.%d",a,b);
     b52:	30 e4       	ldi	r19, 0x40	; 64
     b54:	4c e1       	ldi	r20, 0x1C	; 28
     b56:	56 e4       	ldi	r21, 0x46	; 70
     b58:	c3 01       	movw	r24, r6
     b5a:	b2 01       	movw	r22, r4
     b5c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
     b60:	2b 01       	movw	r4, r22
     b62:	3c 01       	movw	r6, r24
     b64:	ac 9c       	mul	r10, r12
     b66:	b0 01       	movw	r22, r0
     b68:	ad 9c       	mul	r10, r13
     b6a:	70 0d       	add	r23, r0
     b6c:	bc 9c       	mul	r11, r12
     b6e:	70 0d       	add	r23, r0
     b70:	11 24       	eor	r1, r1
     b72:	07 2e       	mov	r0, r23
     b74:	00 0c       	add	r0, r0
     b76:	88 0b       	sbc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__floatsisf>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	c3 01       	movw	r24, r6
     b84:	b2 01       	movw	r22, r4
     b86:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__subsf3>
     b8a:	0e 94 cc 19 	call	0x3398	; 0x3398 <__fixsfsi>
     b8e:	7f 93       	push	r23
     b90:	6f 93       	push	r22
     b92:	df 92       	push	r13
     b94:	cf 92       	push	r12
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <printf>
     b9e:	0f 90       	pop	r0
	}
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	58 cf       	rjmp	.-336    	; 0xa5c <temperatureSensorController_task+0x2a>

00000bac <temperatureSensorController_create>:
     bac:	ef 92       	push	r14
}

void temperatureSensorController_create(temperatureSensor_t sensor)
{
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
	temSensor = sensor;
     bb2:	90 93 31 0f 	sts	0x0F31, r25	; 0x800f31 <temSensor+0x1>
     bb6:	80 93 30 0f 	sts	0x0F30, r24	; 0x800f30 <temSensor>
	printf("Temperature sensor started!!!\n");
     bba:	82 e7       	ldi	r24, 0x72	; 114
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
	xTaskCreate(temperatureSensorController_task, "TemperatureSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     bc2:	e1 2c       	mov	r14, r1
     bc4:	f1 2c       	mov	r15, r1
     bc6:	01 e0       	ldi	r16, 0x01	; 1
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 ec       	ldi	r20, 0xC0	; 192
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	60 e9       	ldi	r22, 0x90	; 144
     bd2:	73 e0       	ldi	r23, 0x03	; 3
     bd4:	89 e1       	ldi	r24, 0x19	; 25
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	0e 94 32 10 	call	0x2064	; 0x2064 <xTaskCreate>
	//vTaskStartScheduler();
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	08 95       	ret

00000be4 <carbonDioxideSensor_create>:
void carbonDioxideSensor_setReportInterval(carbonDioxideSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	6b 01       	movw	r12, r22
     bf4:	7c 01       	movw	r14, r24
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	8a e0       	ldi	r24, 0x0A	; 10
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
     c02:	ec 01       	movw	r28, r24
     c04:	89 2b       	or	r24, r25
     c06:	b1 f0       	breq	.+44     	; 0xc34 <carbonDioxideSensor_create+0x50>
     c08:	c8 82       	st	Y, r12
     c0a:	d9 82       	std	Y+1, r13	; 0x01
     c0c:	ea 82       	std	Y+2, r14	; 0x02
     c0e:	fb 82       	std	Y+3, r15	; 0x03
     c10:	1d 82       	std	Y+5, r1	; 0x05
     c12:	1c 82       	std	Y+4, r1	; 0x04
     c14:	b2 d2       	rcall	.+1380   	; 0x117a <myTime_create>
     c16:	99 87       	std	Y+9, r25	; 0x09
     c18:	88 87       	std	Y+8, r24	; 0x08
     c1a:	43 e0       	ldi	r20, 0x03	; 3
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	ec d6       	rcall	.+3544   	; 0x19fa <xQueueGenericCreate>
     c22:	9f 83       	std	Y+7, r25	; 0x07
     c24:	8e 83       	std	Y+6, r24	; 0x06
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	a9 01       	movw	r20, r18
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	04 d7       	rcall	.+3592   	; 0x1a3c <xQueueGenericSend>
     c34:	ce 01       	movw	r24, r28
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	08 95       	ret

00000c46 <carbonDioxideSensor_setValue>:

void carbonDioxideSensor_setValue(carbonDioxideSensor_t self,int value)
{
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	8b 01       	movw	r16, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     c52:	4f ef       	ldi	r20, 0xFF	; 255
     c54:	5f ef       	ldi	r21, 0xFF	; 255
     c56:	ba 01       	movw	r22, r20
     c58:	8e 81       	ldd	r24, Y+6	; 0x06
     c5a:	9f 81       	ldd	r25, Y+7	; 0x07
     c5c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueSemaphoreTake>
	self->value = value;
     c60:	1d 83       	std	Y+5, r17	; 0x05
     c62:	0c 83       	std	Y+4, r16	; 0x04
	myTime_updateToNowTime(self->updateTime);
     c64:	88 85       	ldd	r24, Y+8	; 0x08
     c66:	99 85       	ldd	r25, Y+9	; 0x09
     c68:	a0 d2       	rcall	.+1344   	; 0x11aa <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     c6a:	00 e0       	ldi	r16, 0x00	; 0
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	a9 01       	movw	r20, r18
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	8e 81       	ldd	r24, Y+6	; 0x06
     c78:	9f 81       	ldd	r25, Y+7	; 0x07
     c7a:	e0 d6       	rcall	.+3520   	; 0x1a3c <xQueueGenericSend>
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <carbonDioxideSensor_getReportInterval>:

float carbonDioxideSensor_getReportInterval(carbonDioxideSensor_t self)
{
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     c96:	4f ef       	ldi	r20, 0xFF	; 255
     c98:	5f ef       	ldi	r21, 0xFF	; 255
     c9a:	ba 01       	movw	r22, r20
     c9c:	8e 81       	ldd	r24, Y+6	; 0x06
     c9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ca0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     ca4:	c8 80       	ld	r12, Y
     ca6:	d9 80       	ldd	r13, Y+1	; 0x01
     ca8:	ea 80       	ldd	r14, Y+2	; 0x02
     caa:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     cac:	00 e0       	ldi	r16, 0x00	; 0
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	8e 81       	ldd	r24, Y+6	; 0x06
     cba:	9f 81       	ldd	r25, Y+7	; 0x07
     cbc:	bf d6       	rcall	.+3454   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     cbe:	c7 01       	movw	r24, r14
     cc0:	b6 01       	movw	r22, r12
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <carbonDioxideSensor_getValue>:

int carbonDioxideSensor_getValue(carbonDioxideSensor_t self)
{
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     cde:	4f ef       	ldi	r20, 0xFF	; 255
     ce0:	5f ef       	ldi	r21, 0xFF	; 255
     ce2:	ba 01       	movw	r22, r20
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xQueueSemaphoreTake>
	int result = self->value;
     cec:	ec 80       	ldd	r14, Y+4	; 0x04
     cee:	fd 80       	ldd	r15, Y+5	; 0x05
	xSemaphoreGive(self->readWriteSemaphore);
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	a9 01       	movw	r20, r18
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	8e 81       	ldd	r24, Y+6	; 0x06
     cfe:	9f 81       	ldd	r25, Y+7	; 0x07
     d00:	9d d6       	rcall	.+3386   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     d02:	c7 01       	movw	r24, r14
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	08 95       	ret

00000d10 <carbonDioxideSensor_getUpdateTime>:

myTime_t carbonDioxideSensor_getUpdateTime(carbonDioxideSensor_t self)
{
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d1c:	4f ef       	ldi	r20, 0xFF	; 255
     d1e:	5f ef       	ldi	r21, 0xFF	; 255
     d20:	ba 01       	movw	r22, r20
     d22:	8e 81       	ldd	r24, Y+6	; 0x06
     d24:	9f 81       	ldd	r25, Y+7	; 0x07
     d26:	f5 d7       	rcall	.+4074   	; 0x1d12 <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     d28:	e8 84       	ldd	r14, Y+8	; 0x08
     d2a:	f9 84       	ldd	r15, Y+9	; 0x09
	xSemaphoreGive(self->readWriteSemaphore);
     d2c:	00 e0       	ldi	r16, 0x00	; 0
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	a9 01       	movw	r20, r18
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	8e 81       	ldd	r24, Y+6	; 0x06
     d3a:	9f 81       	ldd	r25, Y+7	; 0x07
     d3c:	7f d6       	rcall	.+3326   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     d3e:	c7 01       	movw	r24, r14
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	08 95       	ret

00000d4c <humiditySensor_create>:
void humiditySensor_setReportInterval(humiditySensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	6b 01       	movw	r12, r22
     d5c:	7c 01       	movw	r14, r24
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	8c e0       	ldi	r24, 0x0C	; 12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
     d6a:	ec 01       	movw	r28, r24
     d6c:	89 2b       	or	r24, r25
     d6e:	c1 f0       	breq	.+48     	; 0xda0 <humiditySensor_create+0x54>
     d70:	c8 82       	st	Y, r12
     d72:	d9 82       	std	Y+1, r13	; 0x01
     d74:	ea 82       	std	Y+2, r14	; 0x02
     d76:	fb 82       	std	Y+3, r15	; 0x03
     d78:	1c 82       	std	Y+4, r1	; 0x04
     d7a:	1d 82       	std	Y+5, r1	; 0x05
     d7c:	1e 82       	std	Y+6, r1	; 0x06
     d7e:	1f 82       	std	Y+7, r1	; 0x07
     d80:	fc d1       	rcall	.+1016   	; 0x117a <myTime_create>
     d82:	9b 87       	std	Y+11, r25	; 0x0b
     d84:	8a 87       	std	Y+10, r24	; 0x0a
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	36 d6       	rcall	.+3180   	; 0x19fa <xQueueGenericCreate>
     d8e:	99 87       	std	Y+9, r25	; 0x09
     d90:	88 87       	std	Y+8, r24	; 0x08
     d92:	00 e0       	ldi	r16, 0x00	; 0
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	4e d6       	rcall	.+3228   	; 0x1a3c <xQueueGenericSend>
     da0:	ce 01       	movw	r24, r28
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	08 95       	ret

00000db2 <humiditySensor_setValue>:

void humiditySensor_setValue(humiditySensor_t self,float value)
{
     db2:	cf 92       	push	r12
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
     dc2:	6a 01       	movw	r12, r20
     dc4:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     dc6:	4f ef       	ldi	r20, 0xFF	; 255
     dc8:	5f ef       	ldi	r21, 0xFF	; 255
     dca:	ba 01       	movw	r22, r20
     dcc:	88 85       	ldd	r24, Y+8	; 0x08
     dce:	99 85       	ldd	r25, Y+9	; 0x09
     dd0:	a0 d7       	rcall	.+3904   	; 0x1d12 <xQueueSemaphoreTake>
	self->value = value;
     dd2:	cc 82       	std	Y+4, r12	; 0x04
     dd4:	dd 82       	std	Y+5, r13	; 0x05
     dd6:	ee 82       	std	Y+6, r14	; 0x06
     dd8:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     dda:	8a 85       	ldd	r24, Y+10	; 0x0a
     ddc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dde:	e5 d1       	rcall	.+970    	; 0x11aa <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     de0:	00 e0       	ldi	r16, 0x00	; 0
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	a9 01       	movw	r20, r18
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	88 85       	ldd	r24, Y+8	; 0x08
     dee:	99 85       	ldd	r25, Y+9	; 0x09
     df0:	25 d6       	rcall	.+3146   	; 0x1a3c <xQueueGenericSend>
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	08 95       	ret

00000e02 <humiditySensor_getReportInterval>:

float humiditySensor_getReportInterval(humiditySensor_t self)
{
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e12:	4f ef       	ldi	r20, 0xFF	; 255
     e14:	5f ef       	ldi	r21, 0xFF	; 255
     e16:	ba 01       	movw	r22, r20
     e18:	88 85       	ldd	r24, Y+8	; 0x08
     e1a:	99 85       	ldd	r25, Y+9	; 0x09
     e1c:	7a d7       	rcall	.+3828   	; 0x1d12 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     e1e:	c8 80       	ld	r12, Y
     e20:	d9 80       	ldd	r13, Y+1	; 0x01
     e22:	ea 80       	ldd	r14, Y+2	; 0x02
     e24:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     e26:	00 e0       	ldi	r16, 0x00	; 0
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	88 85       	ldd	r24, Y+8	; 0x08
     e34:	99 85       	ldd	r25, Y+9	; 0x09
     e36:	02 d6       	rcall	.+3076   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	08 95       	ret

00000e4c <humiditySensor_getValue>:

float humiditySensor_getValue(humiditySensor_t self)
{
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e5c:	4f ef       	ldi	r20, 0xFF	; 255
     e5e:	5f ef       	ldi	r21, 0xFF	; 255
     e60:	ba 01       	movw	r22, r20
     e62:	88 85       	ldd	r24, Y+8	; 0x08
     e64:	99 85       	ldd	r25, Y+9	; 0x09
     e66:	55 d7       	rcall	.+3754   	; 0x1d12 <xQueueSemaphoreTake>
	float result = self->value;
     e68:	cc 80       	ldd	r12, Y+4	; 0x04
     e6a:	dd 80       	ldd	r13, Y+5	; 0x05
     e6c:	ee 80       	ldd	r14, Y+6	; 0x06
     e6e:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	a9 01       	movw	r20, r18
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	88 85       	ldd	r24, Y+8	; 0x08
     e7e:	99 85       	ldd	r25, Y+9	; 0x09
     e80:	dd d5       	rcall	.+3002   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	08 95       	ret

00000e96 <humiditySensor_getUpdateTime>:

myTime_t humiditySensor_getUpdateTime(humiditySensor_t self)
{
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     ea2:	4f ef       	ldi	r20, 0xFF	; 255
     ea4:	5f ef       	ldi	r21, 0xFF	; 255
     ea6:	ba 01       	movw	r22, r20
     ea8:	88 85       	ldd	r24, Y+8	; 0x08
     eaa:	99 85       	ldd	r25, Y+9	; 0x09
     eac:	32 d7       	rcall	.+3684   	; 0x1d12 <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     eae:	ea 84       	ldd	r14, Y+10	; 0x0a
     eb0:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	88 85       	ldd	r24, Y+8	; 0x08
     ec0:	99 85       	ldd	r25, Y+9	; 0x09
     ec2:	bc d5       	rcall	.+2936   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     ec4:	c7 01       	movw	r24, r14
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	08 95       	ret

00000ed2 <temperatureSensor_create>:
void temperatureSensor_setReportInterval(temperatureSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	6b 01       	movw	r12, r22
     ee2:	7c 01       	movw	r14, r24
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	8c e0       	ldi	r24, 0x0C	; 12
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
     ef0:	ec 01       	movw	r28, r24
     ef2:	89 2b       	or	r24, r25
     ef4:	c1 f0       	breq	.+48     	; 0xf26 <temperatureSensor_create+0x54>
     ef6:	c8 82       	st	Y, r12
     ef8:	d9 82       	std	Y+1, r13	; 0x01
     efa:	ea 82       	std	Y+2, r14	; 0x02
     efc:	fb 82       	std	Y+3, r15	; 0x03
     efe:	1c 82       	std	Y+4, r1	; 0x04
     f00:	1d 82       	std	Y+5, r1	; 0x05
     f02:	1e 82       	std	Y+6, r1	; 0x06
     f04:	1f 82       	std	Y+7, r1	; 0x07
     f06:	39 d1       	rcall	.+626    	; 0x117a <myTime_create>
     f08:	9b 87       	std	Y+11, r25	; 0x0b
     f0a:	8a 87       	std	Y+10, r24	; 0x0a
     f0c:	43 e0       	ldi	r20, 0x03	; 3
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	73 d5       	rcall	.+2790   	; 0x19fa <xQueueGenericCreate>
     f14:	99 87       	std	Y+9, r25	; 0x09
     f16:	88 87       	std	Y+8, r24	; 0x08
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	8b d5       	rcall	.+2838   	; 0x1a3c <xQueueGenericSend>
     f26:	ce 01       	movw	r24, r28
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <temperatureSensor_setValue>:

void temperatureSensor_setValue(temperatureSensor_t self,float value)
{
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
     f48:	6a 01       	movw	r12, r20
     f4a:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f4c:	4f ef       	ldi	r20, 0xFF	; 255
     f4e:	5f ef       	ldi	r21, 0xFF	; 255
     f50:	ba 01       	movw	r22, r20
     f52:	88 85       	ldd	r24, Y+8	; 0x08
     f54:	99 85       	ldd	r25, Y+9	; 0x09
     f56:	dd d6       	rcall	.+3514   	; 0x1d12 <xQueueSemaphoreTake>
	self->value = value;
     f58:	cc 82       	std	Y+4, r12	; 0x04
     f5a:	dd 82       	std	Y+5, r13	; 0x05
     f5c:	ee 82       	std	Y+6, r14	; 0x06
     f5e:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     f60:	8a 85       	ldd	r24, Y+10	; 0x0a
     f62:	9b 85       	ldd	r25, Y+11	; 0x0b
     f64:	22 d1       	rcall	.+580    	; 0x11aa <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     f66:	00 e0       	ldi	r16, 0x00	; 0
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	a9 01       	movw	r20, r18
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	88 85       	ldd	r24, Y+8	; 0x08
     f74:	99 85       	ldd	r25, Y+9	; 0x09
     f76:	62 d5       	rcall	.+2756   	; 0x1a3c <xQueueGenericSend>
}
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret

00000f88 <temperatureSensor_getReportInterval>:

float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f98:	4f ef       	ldi	r20, 0xFF	; 255
     f9a:	5f ef       	ldi	r21, 0xFF	; 255
     f9c:	ba 01       	movw	r22, r20
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	99 85       	ldd	r25, Y+9	; 0x09
     fa2:	b7 d6       	rcall	.+3438   	; 0x1d12 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     fa4:	c8 80       	ld	r12, Y
     fa6:	d9 80       	ldd	r13, Y+1	; 0x01
     fa8:	ea 80       	ldd	r14, Y+2	; 0x02
     faa:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     fac:	00 e0       	ldi	r16, 0x00	; 0
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	a9 01       	movw	r20, r18
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	99 85       	ldd	r25, Y+9	; 0x09
     fbc:	3f d5       	rcall	.+2686   	; 0x1a3c <xQueueGenericSend>
	return result;
}
     fbe:	c7 01       	movw	r24, r14
     fc0:	b6 01       	movw	r22, r12
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     fe2:	4f ef       	ldi	r20, 0xFF	; 255
     fe4:	5f ef       	ldi	r21, 0xFF	; 255
     fe6:	ba 01       	movw	r22, r20
     fe8:	88 85       	ldd	r24, Y+8	; 0x08
     fea:	99 85       	ldd	r25, Y+9	; 0x09
     fec:	92 d6       	rcall	.+3364   	; 0x1d12 <xQueueSemaphoreTake>
	float result = self->value;
     fee:	cc 80       	ldd	r12, Y+4	; 0x04
     ff0:	dd 80       	ldd	r13, Y+5	; 0x05
     ff2:	ee 80       	ldd	r14, Y+6	; 0x06
     ff4:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     ff6:	00 e0       	ldi	r16, 0x00	; 0
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	88 85       	ldd	r24, Y+8	; 0x08
    1004:	99 85       	ldd	r25, Y+9	; 0x09
    1006:	1a d5       	rcall	.+2612   	; 0x1a3c <xQueueGenericSend>
	return result;
}
    1008:	c7 01       	movw	r24, r14
    100a:	b6 01       	movw	r22, r12
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	08 95       	ret

0000101c <temperatureSensor_getUpdateTime>:

myTime_t temperatureSensor_getUpdateTime(temperatureSensor_t self)
{
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
    1028:	4f ef       	ldi	r20, 0xFF	; 255
    102a:	5f ef       	ldi	r21, 0xFF	; 255
    102c:	ba 01       	movw	r22, r20
    102e:	88 85       	ldd	r24, Y+8	; 0x08
    1030:	99 85       	ldd	r25, Y+9	; 0x09
    1032:	6f d6       	rcall	.+3294   	; 0x1d12 <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
    1034:	ea 84       	ldd	r14, Y+10	; 0x0a
    1036:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
    1038:	00 e0       	ldi	r16, 0x00	; 0
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	88 85       	ldd	r24, Y+8	; 0x08
    1046:	99 85       	ldd	r25, Y+9	; 0x09
    1048:	f9 d4       	rcall	.+2546   	; 0x1a3c <xQueueGenericSend>
	return result;
}
    104a:	c7 01       	movw	r24, r14
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	08 95       	ret

00001058 <sensorModelManager_create>:
void sensorModelManager_setReportInterval(float reportInterval)
{
	temperatureSensor_setReportInterval(temperatureSensor,reportInterval);
	humiditySensor_setReportInterval(humiditySensor,reportInterval);
	carbonDioxideSensor_setReportInterval(carbonDioxideSensor,reportInterval);
}
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	9f e3       	ldi	r25, 0x3F	; 63
    1060:	c2 dc       	rcall	.-1660   	; 0x9e6 <sevenSegmentDisplayController_create>
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	9f e3       	ldi	r25, 0x3F	; 63
    106a:	33 df       	rcall	.-410    	; 0xed2 <temperatureSensor_create>
    106c:	90 93 35 0f 	sts	0x0F35, r25	; 0x800f35 <temperatureSensor+0x1>
    1070:	80 93 34 0f 	sts	0x0F34, r24	; 0x800f34 <temperatureSensor>
    1074:	9b dd       	rcall	.-1226   	; 0xbac <temperatureSensorController_create>
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	9f e3       	ldi	r25, 0x3F	; 63
    107e:	66 de       	rcall	.-820    	; 0xd4c <humiditySensor_create>
    1080:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <humiditySensor+0x1>
    1084:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <humiditySensor>
    1088:	bb db       	rcall	.-2186   	; 0x800 <HumSensorController_create>
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e8       	ldi	r24, 0x80	; 128
    1090:	9f e3       	ldi	r25, 0x3F	; 63
    1092:	a8 dd       	rcall	.-1200   	; 0xbe4 <carbonDioxideSensor_create>
    1094:	90 93 33 0f 	sts	0x0F33, r25	; 0x800f33 <carbonDioxideSensor+0x1>
    1098:	80 93 32 0f 	sts	0x0F32, r24	; 0x800f32 <carbonDioxideSensor>
    109c:	d8 da       	rcall	.-2640   	; 0x64e <CO2SensorController_create>
    109e:	0c 94 5f 11 	jmp	0x22be	; 0x22be <vTaskStartScheduler>
    10a2:	08 95       	ret

000010a4 <sensorModelManager_getTemperatureSensor>:

temperatureSensor_t sensorModelManager_getTemperatureSensor()
{
	return temperatureSensor;
}
    10a4:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temperatureSensor>
    10a8:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temperatureSensor+0x1>
    10ac:	08 95       	ret

000010ae <sensorModelManager_getHumiditySensor>:

humiditySensor_t sensorModelManager_getHumiditySensor()
{
	return humiditySensor;
}
    10ae:	80 91 36 0f 	lds	r24, 0x0F36	; 0x800f36 <humiditySensor>
    10b2:	90 91 37 0f 	lds	r25, 0x0F37	; 0x800f37 <humiditySensor+0x1>
    10b6:	08 95       	ret

000010b8 <sensorModelManager_getCarbonDioxideSensor>:

carbonDioxideSensor_t sensorModelManager_getCarbonDioxideSensor()
{
	return carbonDioxideSensor;
}
    10b8:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <carbonDioxideSensor>
    10bc:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <carbonDioxideSensor+0x1>
    10c0:	08 95       	ret

000010c2 <nowTimeClockTask>:
}

int myTime_getDay(myTime_t self)
{
	return self->day;
}
    10c2:	6e e3       	ldi	r22, 0x3E	; 62
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskDelay>
    10ce:	e0 91 38 0f 	lds	r30, 0x0F38	; 0x800f38 <nowTime>
    10d2:	f0 91 39 0f 	lds	r31, 0x0F39	; 0x800f39 <nowTime+0x1>
    10d6:	82 85       	ldd	r24, Z+10	; 0x0a
    10d8:	93 85       	ldd	r25, Z+11	; 0x0b
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	93 87       	std	Z+11, r25	; 0x0b
    10de:	82 87       	std	Z+10, r24	; 0x0a
    10e0:	cc 97       	sbiw	r24, 0x3c	; 60
    10e2:	7c f3       	brlt	.-34     	; 0x10c2 <nowTimeClockTask>
    10e4:	80 85       	ldd	r24, Z+8	; 0x08
    10e6:	91 85       	ldd	r25, Z+9	; 0x09
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	91 87       	std	Z+9, r25	; 0x09
    10ec:	80 87       	std	Z+8, r24	; 0x08
    10ee:	13 86       	std	Z+11, r1	; 0x0b
    10f0:	12 86       	std	Z+10, r1	; 0x0a
    10f2:	cc 97       	sbiw	r24, 0x3c	; 60
    10f4:	34 f3       	brlt	.-52     	; 0x10c2 <nowTimeClockTask>
    10f6:	86 81       	ldd	r24, Z+6	; 0x06
    10f8:	97 81       	ldd	r25, Z+7	; 0x07
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	97 83       	std	Z+7, r25	; 0x07
    10fe:	86 83       	std	Z+6, r24	; 0x06
    1100:	11 86       	std	Z+9, r1	; 0x09
    1102:	10 86       	std	Z+8, r1	; 0x08
    1104:	48 97       	sbiw	r24, 0x18	; 24
    1106:	ec f2       	brlt	.-70     	; 0x10c2 <nowTimeClockTask>
    1108:	17 82       	std	Z+7, r1	; 0x07
    110a:	16 82       	std	Z+6, r1	; 0x06
    110c:	da cf       	rjmp	.-76     	; 0x10c2 <nowTimeClockTask>

0000110e <mytime_tryCreateNowTime>:
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <nowTime>
    1118:	90 91 39 0f 	lds	r25, 0x0F39	; 0x800f39 <nowTime+0x1>
    111c:	89 2b       	or	r24, r25
    111e:	49 f5       	brne	.+82     	; 0x1172 <mytime_tryCreateNowTime+0x64>
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	8c e0       	ldi	r24, 0x0C	; 12
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
    112c:	fc 01       	movw	r30, r24
    112e:	90 93 39 0f 	sts	0x0F39, r25	; 0x800f39 <nowTime+0x1>
    1132:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <nowTime>
    1136:	89 2b       	or	r24, r25
    1138:	e1 f0       	breq	.+56     	; 0x1172 <mytime_tryCreateNowTime+0x64>
    113a:	11 82       	std	Z+1, r1	; 0x01
    113c:	10 82       	st	Z, r1
    113e:	13 82       	std	Z+3, r1	; 0x03
    1140:	12 82       	std	Z+2, r1	; 0x02
    1142:	15 82       	std	Z+5, r1	; 0x05
    1144:	14 82       	std	Z+4, r1	; 0x04
    1146:	17 82       	std	Z+7, r1	; 0x07
    1148:	16 82       	std	Z+6, r1	; 0x06
    114a:	11 86       	std	Z+9, r1	; 0x09
    114c:	10 86       	std	Z+8, r1	; 0x08
    114e:	13 86       	std	Z+11, r1	; 0x0b
    1150:	12 86       	std	Z+10, r1	; 0x0a
    1152:	86 ea       	ldi	r24, 0xA6	; 166
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
    115a:	e1 2c       	mov	r14, r1
    115c:	f1 2c       	mov	r15, r1
    115e:	01 e0       	ldi	r16, 0x01	; 1
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 ec       	ldi	r20, 0xC0	; 192
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	60 ec       	ldi	r22, 0xC0	; 192
    116a:	73 e0       	ldi	r23, 0x03	; 3
    116c:	81 e6       	ldi	r24, 0x61	; 97
    116e:	98 e0       	ldi	r25, 0x08	; 8
    1170:	79 d7       	rcall	.+3826   	; 0x2064 <xTaskCreate>
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret

0000117a <myTime_create>:
    117a:	c9 df       	rcall	.-110    	; 0x110e <mytime_tryCreateNowTime>
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	8c e0       	ldi	r24, 0x0C	; 12
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
    1188:	fc 01       	movw	r30, r24
    118a:	89 2b       	or	r24, r25
    118c:	61 f0       	breq	.+24     	; 0x11a6 <myTime_create+0x2c>
    118e:	11 82       	std	Z+1, r1	; 0x01
    1190:	10 82       	st	Z, r1
    1192:	13 82       	std	Z+3, r1	; 0x03
    1194:	12 82       	std	Z+2, r1	; 0x02
    1196:	15 82       	std	Z+5, r1	; 0x05
    1198:	14 82       	std	Z+4, r1	; 0x04
    119a:	17 82       	std	Z+7, r1	; 0x07
    119c:	16 82       	std	Z+6, r1	; 0x06
    119e:	11 86       	std	Z+9, r1	; 0x09
    11a0:	10 86       	std	Z+8, r1	; 0x08
    11a2:	13 86       	std	Z+11, r1	; 0x0b
    11a4:	12 86       	std	Z+10, r1	; 0x0a
    11a6:	cf 01       	movw	r24, r30
    11a8:	08 95       	ret

000011aa <myTime_updateToNowTime>:
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	ec 01       	movw	r28, r24
    11b0:	ae df       	rcall	.-164    	; 0x110e <mytime_tryCreateNowTime>
    11b2:	e0 91 38 0f 	lds	r30, 0x0F38	; 0x800f38 <nowTime>
    11b6:	f0 91 39 0f 	lds	r31, 0x0F39	; 0x800f39 <nowTime+0x1>
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	99 83       	std	Y+1, r25	; 0x01
    11c0:	88 83       	st	Y, r24
    11c2:	e0 91 38 0f 	lds	r30, 0x0F38	; 0x800f38 <nowTime>
    11c6:	f0 91 39 0f 	lds	r31, 0x0F39	; 0x800f39 <nowTime+0x1>
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	9b 83       	std	Y+3, r25	; 0x03
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	84 81       	ldd	r24, Z+4	; 0x04
    11d4:	95 81       	ldd	r25, Z+5	; 0x05
    11d6:	9d 83       	std	Y+5, r25	; 0x05
    11d8:	8c 83       	std	Y+4, r24	; 0x04
    11da:	86 81       	ldd	r24, Z+6	; 0x06
    11dc:	97 81       	ldd	r25, Z+7	; 0x07
    11de:	9f 83       	std	Y+7, r25	; 0x07
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	80 85       	ldd	r24, Z+8	; 0x08
    11e4:	91 85       	ldd	r25, Z+9	; 0x09
    11e6:	99 87       	std	Y+9, r25	; 0x09
    11e8:	88 87       	std	Y+8, r24	; 0x08
    11ea:	82 85       	ldd	r24, Z+10	; 0x0a
    11ec:	93 85       	ldd	r25, Z+11	; 0x0b
    11ee:	9b 87       	std	Y+11, r25	; 0x0b
    11f0:	8a 87       	std	Y+10, r24	; 0x0a
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	08 95       	ret

000011f8 <myTime_getNowTime>:
    11f8:	8a df       	rcall	.-236    	; 0x110e <mytime_tryCreateNowTime>
    11fa:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <nowTime>
    11fe:	90 91 39 0f 	lds	r25, 0x0F39	; 0x800f39 <nowTime+0x1>
    1202:	08 95       	ret

00001204 <myTime_getHour>:

int myTime_getHour(myTime_t self)
{
	return self->hour;
}
    1204:	fc 01       	movw	r30, r24
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	97 81       	ldd	r25, Z+7	; 0x07
    120a:	08 95       	ret

0000120c <myTime_getMin>:

int myTime_getMin(myTime_t self)
{
	return self->min;
}
    120c:	fc 01       	movw	r30, r24
    120e:	80 85       	ldd	r24, Z+8	; 0x08
    1210:	91 85       	ldd	r25, Z+9	; 0x09
    1212:	08 95       	ret

00001214 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    121a:	ec e1       	ldi	r30, 0x1C	; 28
    121c:	f4 e0       	ldi	r31, 0x04	; 4
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <prvInsertBlockIntoFreeList+0xe>
    1220:	f9 01       	movw	r30, r18
    1222:	20 81       	ld	r18, Z
    1224:	31 81       	ldd	r19, Z+1	; 0x01
    1226:	2a 17       	cp	r18, r26
    1228:	3b 07       	cpc	r19, r27
    122a:	d0 f3       	brcs	.-12     	; 0x1220 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	af 01       	movw	r20, r30
    1232:	48 0f       	add	r20, r24
    1234:	59 1f       	adc	r21, r25
    1236:	a4 17       	cp	r26, r20
    1238:	b5 07       	cpc	r27, r21
    123a:	49 f4       	brne	.+18     	; 0x124e <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	4d 91       	ld	r20, X+
    1240:	5c 91       	ld	r21, X
    1242:	13 97       	sbiw	r26, 0x03	; 3
    1244:	84 0f       	add	r24, r20
    1246:	95 1f       	adc	r25, r21
    1248:	93 83       	std	Z+3, r25	; 0x03
    124a:	82 83       	std	Z+2, r24	; 0x02
    124c:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    124e:	12 96       	adiw	r26, 0x02	; 2
    1250:	8d 91       	ld	r24, X+
    1252:	9c 91       	ld	r25, X
    1254:	13 97       	sbiw	r26, 0x03	; 3
    1256:	ed 01       	movw	r28, r26
    1258:	c8 0f       	add	r28, r24
    125a:	d9 1f       	adc	r29, r25
    125c:	2c 17       	cp	r18, r28
    125e:	3d 07       	cpc	r19, r29
    1260:	d9 f4       	brne	.+54     	; 0x1298 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1262:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <pxEnd>
    1266:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <pxEnd+0x1>
    126a:	c2 17       	cp	r28, r18
    126c:	d3 07       	cpc	r29, r19
    126e:	81 f0       	breq	.+32     	; 0x1290 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1270:	2a 81       	ldd	r18, Y+2	; 0x02
    1272:	3b 81       	ldd	r19, Y+3	; 0x03
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	13 96       	adiw	r26, 0x03	; 3
    127a:	9c 93       	st	X, r25
    127c:	8e 93       	st	-X, r24
    127e:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1280:	c0 81       	ld	r28, Z
    1282:	d1 81       	ldd	r29, Z+1	; 0x01
    1284:	88 81       	ld	r24, Y
    1286:	99 81       	ldd	r25, Y+1	; 0x01
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	9c 93       	st	X, r25
    128c:	8e 93       	st	-X, r24
    128e:	07 c0       	rjmp	.+14     	; 0x129e <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	dc 93       	st	X, r29
    1294:	ce 93       	st	-X, r28
    1296:	03 c0       	rjmp	.+6      	; 0x129e <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	3c 93       	st	X, r19
    129c:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    129e:	ae 17       	cp	r26, r30
    12a0:	bf 07       	cpc	r27, r31
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    12a4:	b1 83       	std	Z+1, r27	; 0x01
    12a6:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    12c0:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    12c4:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <pxEnd>
    12c8:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <pxEnd+0x1>
    12cc:	89 2b       	or	r24, r25
    12ce:	41 f5       	brne	.+80     	; 0x1320 <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    12d0:	ec e1       	ldi	r30, 0x1C	; 28
    12d2:	f4 e0       	ldi	r31, 0x04	; 4
    12d4:	a0 e2       	ldi	r26, 0x20	; 32
    12d6:	b4 e0       	ldi	r27, 0x04	; 4
    12d8:	b1 83       	std	Z+1, r27	; 0x01
    12da:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    12dc:	13 82       	std	Z+3, r1	; 0x03
    12de:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    12e0:	e0 ee       	ldi	r30, 0xE0	; 224
    12e2:	fd e0       	ldi	r31, 0x0D	; 13
    12e4:	f0 93 1b 04 	sts	0x041B, r31	; 0x80041b <pxEnd+0x1>
    12e8:	e0 93 1a 04 	sts	0x041A, r30	; 0x80041a <pxEnd>
    pxEnd->xBlockSize = 0;
    12ec:	13 82       	std	Z+3, r1	; 0x03
    12ee:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    12f0:	11 82       	std	Z+1, r1	; 0x01
    12f2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    12f4:	80 ec       	ldi	r24, 0xC0	; 192
    12f6:	99 e0       	ldi	r25, 0x09	; 9
    12f8:	13 96       	adiw	r26, 0x03	; 3
    12fa:	9c 93       	st	X, r25
    12fc:	8e 93       	st	-X, r24
    12fe:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1300:	ed 93       	st	X+, r30
    1302:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1304:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <xMinimumEverFreeBytesRemaining+0x1>
    1308:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    130c:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <xFreeBytesRemaining+0x1>
    1310:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e8       	ldi	r25, 0x80	; 128
    1318:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <xBlockAllocatedBit+0x1>
    131c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1320:	e0 90 10 04 	lds	r14, 0x0410	; 0x800410 <xBlockAllocatedBit>
    1324:	f0 90 11 04 	lds	r15, 0x0411	; 0x800411 <xBlockAllocatedBit+0x1>
    1328:	c7 01       	movw	r24, r14
    132a:	8c 23       	and	r24, r28
    132c:	9d 23       	and	r25, r29
    132e:	89 2b       	or	r24, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <pvPortMalloc+0x86>
    1332:	75 c0       	rjmp	.+234    	; 0x141e <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1334:	20 97       	sbiw	r28, 0x00	; 0
    1336:	09 f4       	brne	.+2      	; 0x133a <pvPortMalloc+0x8c>
    1338:	75 c0       	rjmp	.+234    	; 0x1424 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    133a:	9e 01       	movw	r18, r28
    133c:	2c 5f       	subi	r18, 0xFC	; 252
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1340:	c2 17       	cp	r28, r18
    1342:	d3 07       	cpc	r29, r19
    1344:	08 f0       	brcs	.+2      	; 0x1348 <pvPortMalloc+0x9a>
    1346:	6e c0       	rjmp	.+220    	; 0x1424 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <pvPortMalloc+0xa2>
    134e:	67 c0       	rjmp	.+206    	; 0x141e <pvPortMalloc+0x170>
    1350:	00 91 18 04 	lds	r16, 0x0418	; 0x800418 <xFreeBytesRemaining>
    1354:	10 91 19 04 	lds	r17, 0x0419	; 0x800419 <xFreeBytesRemaining+0x1>
    1358:	02 17       	cp	r16, r18
    135a:	13 07       	cpc	r17, r19
    135c:	08 f4       	brcc	.+2      	; 0x1360 <pvPortMalloc+0xb2>
    135e:	5f c0       	rjmp	.+190    	; 0x141e <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    1360:	c0 91 1c 04 	lds	r28, 0x041C	; 0x80041c <xStart>
    1364:	d0 91 1d 04 	lds	r29, 0x041D	; 0x80041d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1368:	ec e1       	ldi	r30, 0x1C	; 28
    136a:	f4 e0       	ldi	r31, 0x04	; 4
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <pvPortMalloc+0xc4>
    136e:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
    1370:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	82 17       	cp	r24, r18
    1378:	93 07       	cpc	r25, r19
    137a:	20 f4       	brcc	.+8      	; 0x1384 <pvPortMalloc+0xd6>
    137c:	88 81       	ld	r24, Y
    137e:	99 81       	ldd	r25, Y+1	; 0x01
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	a9 f7       	brne	.-22     	; 0x136e <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    1384:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <pxEnd>
    1388:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <pxEnd+0x1>
    138c:	c8 17       	cp	r28, r24
    138e:	d9 07       	cpc	r29, r25
    1390:	09 f4       	brne	.+2      	; 0x1394 <pvPortMalloc+0xe6>
    1392:	45 c0       	rjmp	.+138    	; 0x141e <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1394:	c0 80       	ld	r12, Z
    1396:	d1 80       	ldd	r13, Z+1	; 0x01
    1398:	84 e0       	ldi	r24, 0x04	; 4
    139a:	c8 0e       	add	r12, r24
    139c:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    139e:	88 81       	ld	r24, Y
    13a0:	99 81       	ldd	r25, Y+1	; 0x01
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    13a6:	4a 81       	ldd	r20, Y+2	; 0x02
    13a8:	5b 81       	ldd	r21, Y+3	; 0x03
    13aa:	42 1b       	sub	r20, r18
    13ac:	53 0b       	sbc	r21, r19
    13ae:	49 30       	cpi	r20, 0x09	; 9
    13b0:	51 05       	cpc	r21, r1
    13b2:	48 f0       	brcs	.+18     	; 0x13c6 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    13b4:	ce 01       	movw	r24, r28
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    13ba:	fc 01       	movw	r30, r24
    13bc:	53 83       	std	Z+3, r21	; 0x03
    13be:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    13c0:	3b 83       	std	Y+3, r19	; 0x03
    13c2:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    13c4:	27 df       	rcall	.-434    	; 0x1214 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	08 1b       	sub	r16, r24
    13cc:	19 0b       	sbc	r17, r25
    13ce:	10 93 19 04 	sts	0x0419, r17	; 0x800419 <xFreeBytesRemaining+0x1>
    13d2:	00 93 18 04 	sts	0x0418, r16	; 0x800418 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    13d6:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <xMinimumEverFreeBytesRemaining>
    13da:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <xMinimumEverFreeBytesRemaining+0x1>
    13de:	02 17       	cp	r16, r18
    13e0:	13 07       	cpc	r17, r19
    13e2:	20 f4       	brcc	.+8      	; 0x13ec <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    13e4:	10 93 17 04 	sts	0x0417, r17	; 0x800417 <xMinimumEverFreeBytesRemaining+0x1>
    13e8:	00 93 16 04 	sts	0x0416, r16	; 0x800416 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    13ec:	e8 2a       	or	r14, r24
    13ee:	f9 2a       	or	r15, r25
    13f0:	fb 82       	std	Y+3, r15	; 0x03
    13f2:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    13f8:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <xNumberOfSuccessfulAllocations>
    13fc:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <xNumberOfSuccessfulAllocations+0x1>
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <xNumberOfSuccessfulAllocations+0x1>
    1406:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    140a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    140e:	c1 14       	cp	r12, r1
    1410:	d1 04       	cpc	r13, r1
    1412:	59 f4       	brne	.+22     	; 0x142a <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    1414:	0e 94 b5 18 	call	0x316a	; 0x316a <vApplicationMallocFailedHook>
    1418:	c1 2c       	mov	r12, r1
    141a:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
    141c:	06 c0       	rjmp	.+12     	; 0x142a <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    141e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>
    1422:	f8 cf       	rjmp	.-16     	; 0x1414 <pvPortMalloc+0x166>
    1424:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>
    1428:	f5 cf       	rjmp	.-22     	; 0x1414 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    142a:	c6 01       	movw	r24, r12
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	08 95       	ret

0000143e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	91 f1       	breq	.+100    	; 0x14aa <vPortFree+0x6c>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1446:	fc 01       	movw	r30, r24
    1448:	34 97       	sbiw	r30, 0x04	; 4
    144a:	22 81       	ldd	r18, Z+2	; 0x02
    144c:	33 81       	ldd	r19, Z+3	; 0x03
    144e:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <xBlockAllocatedBit>
    1452:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <xBlockAllocatedBit+0x1>
    1456:	b9 01       	movw	r22, r18
    1458:	64 23       	and	r22, r20
    145a:	75 23       	and	r23, r21
    145c:	67 2b       	or	r22, r23
    145e:	29 f1       	breq	.+74     	; 0x14aa <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	67 2b       	or	r22, r23
    1466:	09 f5       	brne	.+66     	; 0x14aa <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1468:	ef 01       	movw	r28, r30
    146a:	40 95       	com	r20
    146c:	50 95       	com	r21
    146e:	24 23       	and	r18, r20
    1470:	35 23       	and	r19, r21
    1472:	33 83       	std	Z+3, r19	; 0x03
    1474:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
    1476:	59 d7       	rcall	.+3762   	; 0x232a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    1478:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <xFreeBytesRemaining>
    147c:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <xFreeBytesRemaining+0x1>
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	82 0f       	add	r24, r18
    1486:	93 1f       	adc	r25, r19
    1488:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <xFreeBytesRemaining+0x1>
    148c:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1490:	ce 01       	movw	r24, r28
    1492:	c0 de       	rcall	.-640    	; 0x1214 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1494:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <xNumberOfSuccessfulFrees>
    1498:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <xNumberOfSuccessfulFrees+0x1>
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <xNumberOfSuccessfulFrees+0x1>
    14a2:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    14a6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    14b0:	fc 01       	movw	r30, r24
    14b2:	03 96       	adiw	r24, 0x03	; 3
    14b4:	92 83       	std	Z+2, r25	; 0x02
    14b6:	81 83       	std	Z+1, r24	; 0x01
    14b8:	4f ef       	ldi	r20, 0xFF	; 255
    14ba:	5f ef       	ldi	r21, 0xFF	; 255
    14bc:	ba 01       	movw	r22, r20
    14be:	43 83       	std	Z+3, r20	; 0x03
    14c0:	54 83       	std	Z+4, r21	; 0x04
    14c2:	65 83       	std	Z+5, r22	; 0x05
    14c4:	76 83       	std	Z+6, r23	; 0x06
    14c6:	90 87       	std	Z+8, r25	; 0x08
    14c8:	87 83       	std	Z+7, r24	; 0x07
    14ca:	92 87       	std	Z+10, r25	; 0x0a
    14cc:	81 87       	std	Z+9, r24	; 0x09
    14ce:	10 82       	st	Z, r1
    14d0:	08 95       	ret

000014d2 <vListInitialiseItem>:
    14d2:	fc 01       	movw	r30, r24
    14d4:	13 86       	std	Z+11, r1	; 0x0b
    14d6:	12 86       	std	Z+10, r1	; 0x0a
    14d8:	08 95       	ret

000014da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    14e4:	08 81       	ld	r16, Y
    14e6:	19 81       	ldd	r17, Y+1	; 0x01
    14e8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ea:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    14ec:	0f 3f       	cpi	r16, 0xFF	; 255
    14ee:	4f ef       	ldi	r20, 0xFF	; 255
    14f0:	14 07       	cpc	r17, r20
    14f2:	24 07       	cpc	r18, r20
    14f4:	34 07       	cpc	r19, r20
    14f6:	21 f4       	brne	.+8      	; 0x1500 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    14f8:	fc 01       	movw	r30, r24
    14fa:	a1 85       	ldd	r26, Z+9	; 0x09
    14fc:	b2 85       	ldd	r27, Z+10	; 0x0a
    14fe:	11 c0       	rjmp	.+34     	; 0x1522 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1500:	dc 01       	movw	r26, r24
    1502:	13 96       	adiw	r26, 0x03	; 3
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vListInsert+0x2e>
    1506:	df 01       	movw	r26, r30
    1508:	14 96       	adiw	r26, 0x04	; 4
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	15 97       	sbiw	r26, 0x05	; 5
    1510:	40 81       	ld	r20, Z
    1512:	51 81       	ldd	r21, Z+1	; 0x01
    1514:	62 81       	ldd	r22, Z+2	; 0x02
    1516:	73 81       	ldd	r23, Z+3	; 0x03
    1518:	04 17       	cp	r16, r20
    151a:	15 07       	cpc	r17, r21
    151c:	26 07       	cpc	r18, r22
    151e:	37 07       	cpc	r19, r23
    1520:	90 f7       	brcc	.-28     	; 0x1506 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1522:	14 96       	adiw	r26, 0x04	; 4
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	15 97       	sbiw	r26, 0x05	; 5
    152a:	fd 83       	std	Y+5, r31	; 0x05
    152c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    152e:	d7 83       	std	Z+7, r29	; 0x07
    1530:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1532:	bf 83       	std	Y+7, r27	; 0x07
    1534:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1536:	15 96       	adiw	r26, 0x05	; 5
    1538:	dc 93       	st	X, r29
    153a:	ce 93       	st	-X, r28
    153c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    153e:	9b 87       	std	Y+11, r25	; 0x0b
    1540:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1542:	fc 01       	movw	r30, r24
    1544:	20 81       	ld	r18, Z
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	20 83       	st	Z, r18
}
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    155a:	a2 85       	ldd	r26, Z+10	; 0x0a
    155c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    155e:	c4 81       	ldd	r28, Z+4	; 0x04
    1560:	d5 81       	ldd	r29, Z+5	; 0x05
    1562:	86 81       	ldd	r24, Z+6	; 0x06
    1564:	97 81       	ldd	r25, Z+7	; 0x07
    1566:	9f 83       	std	Y+7, r25	; 0x07
    1568:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    156a:	c6 81       	ldd	r28, Z+6	; 0x06
    156c:	d7 81       	ldd	r29, Z+7	; 0x07
    156e:	84 81       	ldd	r24, Z+4	; 0x04
    1570:	95 81       	ldd	r25, Z+5	; 0x05
    1572:	9d 83       	std	Y+5, r25	; 0x05
    1574:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	8d 91       	ld	r24, X+
    157a:	9c 91       	ld	r25, X
    157c:	12 97       	sbiw	r26, 0x02	; 2
    157e:	e8 17       	cp	r30, r24
    1580:	f9 07       	cpc	r31, r25
    1582:	31 f4       	brne	.+12     	; 0x1590 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1584:	86 81       	ldd	r24, Z+6	; 0x06
    1586:	97 81       	ldd	r25, Z+7	; 0x07
    1588:	12 96       	adiw	r26, 0x02	; 2
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1590:	13 86       	std	Z+11, r1	; 0x0b
    1592:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1594:	8c 91       	ld	r24, X
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    159a:	8c 91       	ld	r24, X
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    15a2:	fc 01       	movw	r30, r24
    15a4:	60 83       	st	Z, r22
    15a6:	31 97       	sbiw	r30, 0x01	; 1
    15a8:	70 83       	st	Z, r23
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	10 82       	st	Z, r1
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	10 82       	st	Z, r1
    15b2:	31 97       	sbiw	r30, 0x01	; 1
    15b4:	20 e8       	ldi	r18, 0x80	; 128
    15b6:	20 83       	st	Z, r18
    15b8:	31 97       	sbiw	r30, 0x01	; 1
    15ba:	10 82       	st	Z, r1
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	10 82       	st	Z, r1
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	10 82       	st	Z, r1
    15c4:	77 97       	sbiw	r30, 0x17	; 23
    15c6:	40 83       	st	Z, r20
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	50 83       	st	Z, r21
    15cc:	86 97       	sbiw	r24, 0x26	; 38
    15ce:	08 95       	ret

000015d0 <xPortStartScheduler>:
    15d0:	a8 95       	wdr
    15d2:	90 ec       	ldi	r25, 0xC0	; 192
    15d4:	88 e1       	ldi	r24, 0x18	; 24
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	a8 95       	wdr
    15dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    15e6:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    15ea:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    15ee:	cd 91       	ld	r28, X+
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	dd 91       	ld	r29, X+
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	ff 91       	pop	r31
    15f8:	ef 91       	pop	r30
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	8f 90       	pop	r8
    1626:	7f 90       	pop	r7
    1628:	6f 90       	pop	r6
    162a:	5f 90       	pop	r5
    162c:	4f 90       	pop	r4
    162e:	3f 90       	pop	r3
    1630:	2f 90       	pop	r2
    1632:	1f 90       	pop	r1
    1634:	0f 90       	pop	r0
    1636:	0c be       	out	0x3c, r0	; 60
    1638:	0f 90       	pop	r0
    163a:	0b be       	out	0x3b, r0	; 59
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	08 95       	ret
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	08 95       	ret

00001648 <vPortYield>:
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	0f 92       	push	r0
    1650:	0b b6       	in	r0, 0x3b	; 59
    1652:	0f 92       	push	r0
    1654:	0c b6       	in	r0, 0x3c	; 60
    1656:	0f 92       	push	r0
    1658:	1f 92       	push	r1
    165a:	11 24       	eor	r1, r1
    165c:	2f 92       	push	r2
    165e:	3f 92       	push	r3
    1660:	4f 92       	push	r4
    1662:	5f 92       	push	r5
    1664:	6f 92       	push	r6
    1666:	7f 92       	push	r7
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	2f 93       	push	r18
    167e:	3f 93       	push	r19
    1680:	4f 93       	push	r20
    1682:	5f 93       	push	r21
    1684:	6f 93       	push	r22
    1686:	7f 93       	push	r23
    1688:	8f 93       	push	r24
    168a:	9f 93       	push	r25
    168c:	af 93       	push	r26
    168e:	bf 93       	push	r27
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
    1698:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    169c:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    16a0:	0d b6       	in	r0, 0x3d	; 61
    16a2:	0d 92       	st	X+, r0
    16a4:	0e b6       	in	r0, 0x3e	; 62
    16a6:	0d 92       	st	X+, r0
    16a8:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <vTaskSwitchContext>
    16ac:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    16b0:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    16b4:	cd 91       	ld	r28, X+
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	dd 91       	ld	r29, X+
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	5f 90       	pop	r5
    16f2:	4f 90       	pop	r4
    16f4:	3f 90       	pop	r3
    16f6:	2f 90       	pop	r2
    16f8:	1f 90       	pop	r1
    16fa:	0f 90       	pop	r0
    16fc:	0c be       	out	0x3c, r0	; 60
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	08 95       	ret

0000170a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	0f 92       	push	r0
    1712:	0b b6       	in	r0, 0x3b	; 59
    1714:	0f 92       	push	r0
    1716:	0c b6       	in	r0, 0x3c	; 60
    1718:	0f 92       	push	r0
    171a:	1f 92       	push	r1
    171c:	11 24       	eor	r1, r1
    171e:	2f 92       	push	r2
    1720:	3f 92       	push	r3
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	ef 93       	push	r30
    1758:	ff 93       	push	r31
    175a:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    175e:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1762:	0d b6       	in	r0, 0x3d	; 61
    1764:	0d 92       	st	X+, r0
    1766:	0e b6       	in	r0, 0x3e	; 62
    1768:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    176a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    176c:	f2 d5       	rcall	.+3044   	; 0x2352 <xTaskIncrementTick>
    176e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1770:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1774:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1778:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    177c:	cd 91       	ld	r28, X+
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	dd 91       	ld	r29, X+
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	9f 90       	pop	r9
    17b2:	8f 90       	pop	r8
    17b4:	7f 90       	pop	r7
    17b6:	6f 90       	pop	r6
    17b8:	5f 90       	pop	r5
    17ba:	4f 90       	pop	r4
    17bc:	3f 90       	pop	r3
    17be:	2f 90       	pop	r2
    17c0:	1f 90       	pop	r1
    17c2:	0f 90       	pop	r0
    17c4:	0c be       	out	0x3c, r0	; 60
    17c6:	0f 90       	pop	r0
    17c8:	0b be       	out	0x3b, r0	; 59
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    17d0:	08 95       	ret

000017d2 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    17d2:	9b df       	rcall	.-202    	; 0x170a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    17d4:	18 95       	reti

000017d6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	0f 92       	push	r0
    17dc:	fc 01       	movw	r30, r24
    17de:	96 8d       	ldd	r25, Z+30	; 0x1e
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	91 11       	cpse	r25, r1
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	08 95       	ret

000017ec <prvCopyDataToQueue>:
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
    17f6:	04 2f       	mov	r16, r20
    17f8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17fa:	48 a1       	ldd	r20, Y+32	; 0x20
    17fc:	41 11       	cpse	r20, r1
    17fe:	0c c0       	rjmp	.+24     	; 0x1818 <prvCopyDataToQueue+0x2c>
    1800:	88 81       	ld	r24, Y
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	89 2b       	or	r24, r25
    1806:	09 f0       	breq	.+2      	; 0x180a <prvCopyDataToQueue+0x1e>
    1808:	42 c0       	rjmp	.+132    	; 0x188e <prvCopyDataToQueue+0xa2>
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	0e 94 55 16 	call	0x2caa	; 0x2caa <xTaskPriorityDisinherit>
    1812:	1d 82       	std	Y+5, r1	; 0x05
    1814:	1c 82       	std	Y+4, r1	; 0x04
    1816:	42 c0       	rjmp	.+132    	; 0x189c <prvCopyDataToQueue+0xb0>
    1818:	01 11       	cpse	r16, r1
    181a:	17 c0       	rjmp	.+46     	; 0x184a <prvCopyDataToQueue+0x5e>
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <memcpy>
    1826:	28 a1       	ldd	r18, Y+32	; 0x20
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	82 0f       	add	r24, r18
    182e:	91 1d       	adc	r25, r1
    1830:	9b 83       	std	Y+3, r25	; 0x03
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	3d 81       	ldd	r19, Y+5	; 0x05
    1838:	82 17       	cp	r24, r18
    183a:	93 07       	cpc	r25, r19
    183c:	50 f1       	brcs	.+84     	; 0x1892 <prvCopyDataToQueue+0xa6>
    183e:	88 81       	ld	r24, Y
    1840:	99 81       	ldd	r25, Y+1	; 0x01
    1842:	9b 83       	std	Y+3, r25	; 0x03
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	29 c0       	rjmp	.+82     	; 0x189c <prvCopyDataToQueue+0xb0>
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <memcpy>
    1854:	88 a1       	ldd	r24, Y+32	; 0x20
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	91 95       	neg	r25
    185a:	81 95       	neg	r24
    185c:	91 09       	sbc	r25, r1
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	28 0f       	add	r18, r24
    1864:	39 1f       	adc	r19, r25
    1866:	3f 83       	std	Y+7, r19	; 0x07
    1868:	2e 83       	std	Y+6, r18	; 0x06
    186a:	48 81       	ld	r20, Y
    186c:	59 81       	ldd	r21, Y+1	; 0x01
    186e:	24 17       	cp	r18, r20
    1870:	35 07       	cpc	r19, r21
    1872:	30 f4       	brcc	.+12     	; 0x1880 <prvCopyDataToQueue+0x94>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	9f 83       	std	Y+7, r25	; 0x07
    187e:	8e 83       	std	Y+6, r24	; 0x06
    1880:	02 30       	cpi	r16, 0x02	; 2
    1882:	49 f4       	brne	.+18     	; 0x1896 <prvCopyDataToQueue+0xaa>
    1884:	11 23       	and	r17, r17
    1886:	49 f0       	breq	.+18     	; 0x189a <prvCopyDataToQueue+0xae>
    1888:	11 50       	subi	r17, 0x01	; 1
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	07 c0       	rjmp	.+14     	; 0x189c <prvCopyDataToQueue+0xb0>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	05 c0       	rjmp	.+10     	; 0x189c <prvCopyDataToQueue+0xb0>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	03 c0       	rjmp	.+6      	; 0x189c <prvCopyDataToQueue+0xb0>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	01 c0       	rjmp	.+2      	; 0x189c <prvCopyDataToQueue+0xb0>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	1f 5f       	subi	r17, 0xFF	; 255
    189e:	1e 8f       	std	Y+30, r17	; 0x1e
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <prvCopyDataFromQueue>:
    18aa:	fc 01       	movw	r30, r24
    18ac:	40 a1       	ldd	r20, Z+32	; 0x20
    18ae:	44 23       	and	r20, r20
    18b0:	a9 f0       	breq	.+42     	; 0x18dc <prvCopyDataFromQueue+0x32>
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	26 81       	ldd	r18, Z+6	; 0x06
    18b6:	37 81       	ldd	r19, Z+7	; 0x07
    18b8:	24 0f       	add	r18, r20
    18ba:	35 1f       	adc	r19, r21
    18bc:	37 83       	std	Z+7, r19	; 0x07
    18be:	26 83       	std	Z+6, r18	; 0x06
    18c0:	84 81       	ldd	r24, Z+4	; 0x04
    18c2:	95 81       	ldd	r25, Z+5	; 0x05
    18c4:	28 17       	cp	r18, r24
    18c6:	39 07       	cpc	r19, r25
    18c8:	20 f0       	brcs	.+8      	; 0x18d2 <prvCopyDataFromQueue+0x28>
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	97 83       	std	Z+7, r25	; 0x07
    18d0:	86 83       	std	Z+6, r24	; 0x06
    18d2:	cb 01       	movw	r24, r22
    18d4:	66 81       	ldd	r22, Z+6	; 0x06
    18d6:	77 81       	ldd	r23, Z+7	; 0x07
    18d8:	0c 94 e4 28 	jmp	0x51c8	; 0x51c8 <memcpy>
    18dc:	08 95       	ret

000018de <prvUnlockQueue>:
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	8c 01       	movw	r16, r24
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	0f 92       	push	r0
    18f0:	fc 01       	movw	r30, r24
    18f2:	c2 a1       	ldd	r28, Z+34	; 0x22
    18f4:	1c 16       	cp	r1, r28
    18f6:	ac f4       	brge	.+42     	; 0x1922 <prvUnlockQueue+0x44>
    18f8:	83 89       	ldd	r24, Z+19	; 0x13
    18fa:	81 11       	cpse	r24, r1
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <prvUnlockQueue+0x2c>
    18fe:	11 c0       	rjmp	.+34     	; 0x1922 <prvUnlockQueue+0x44>
    1900:	f8 01       	movw	r30, r16
    1902:	83 89       	ldd	r24, Z+19	; 0x13
    1904:	81 11       	cpse	r24, r1
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <prvUnlockQueue+0x34>
    1908:	0c c0       	rjmp	.+24     	; 0x1922 <prvUnlockQueue+0x44>
    190a:	78 01       	movw	r14, r16
    190c:	f3 e1       	ldi	r31, 0x13	; 19
    190e:	ef 0e       	add	r14, r31
    1910:	f1 1c       	adc	r15, r1
    1912:	c7 01       	movw	r24, r14
    1914:	0e 94 a2 14 	call	0x2944	; 0x2944 <xTaskRemoveFromEventList>
    1918:	81 11       	cpse	r24, r1
    191a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <vTaskMissedYield>
    191e:	c1 50       	subi	r28, 0x01	; 1
    1920:	79 f7       	brne	.-34     	; 0x1900 <prvUnlockQueue+0x22>
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	f8 01       	movw	r30, r16
    1926:	82 a3       	std	Z+34, r24	; 0x22
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	0f 92       	push	r0
    1932:	c1 a1       	ldd	r28, Z+33	; 0x21
    1934:	1c 16       	cp	r1, r28
    1936:	a4 f4       	brge	.+40     	; 0x1960 <prvUnlockQueue+0x82>
    1938:	80 85       	ldd	r24, Z+8	; 0x08
    193a:	81 11       	cpse	r24, r1
    193c:	06 c0       	rjmp	.+12     	; 0x194a <prvUnlockQueue+0x6c>
    193e:	10 c0       	rjmp	.+32     	; 0x1960 <prvUnlockQueue+0x82>
    1940:	f8 01       	movw	r30, r16
    1942:	80 85       	ldd	r24, Z+8	; 0x08
    1944:	81 11       	cpse	r24, r1
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <prvUnlockQueue+0x74>
    1948:	0b c0       	rjmp	.+22     	; 0x1960 <prvUnlockQueue+0x82>
    194a:	78 01       	movw	r14, r16
    194c:	f8 e0       	ldi	r31, 0x08	; 8
    194e:	ef 0e       	add	r14, r31
    1950:	f1 1c       	adc	r15, r1
    1952:	c7 01       	movw	r24, r14
    1954:	f7 d7       	rcall	.+4078   	; 0x2944 <xTaskRemoveFromEventList>
    1956:	81 11       	cpse	r24, r1
    1958:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <vTaskMissedYield>
    195c:	c1 50       	subi	r28, 0x01	; 1
    195e:	81 f7       	brne	.-32     	; 0x1940 <prvUnlockQueue+0x62>
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	f8 01       	movw	r30, r16
    1964:	81 a3       	std	Z+33, r24	; 0x21
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	08 95       	ret

00001976 <xQueueGenericReset>:
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ec 01       	movw	r28, r24
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	0f 92       	push	r0
    1982:	e8 81       	ld	r30, Y
    1984:	f9 81       	ldd	r31, Y+1	; 0x01
    1986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1988:	28 a1       	ldd	r18, Y+32	; 0x20
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	82 9f       	mul	r24, r18
    1990:	a0 01       	movw	r20, r0
    1992:	83 9f       	mul	r24, r19
    1994:	50 0d       	add	r21, r0
    1996:	92 9f       	mul	r25, r18
    1998:	50 0d       	add	r21, r0
    199a:	11 24       	eor	r1, r1
    199c:	4e 0f       	add	r20, r30
    199e:	5f 1f       	adc	r21, r31
    19a0:	5d 83       	std	Y+5, r21	; 0x05
    19a2:	4c 83       	std	Y+4, r20	; 0x04
    19a4:	1e 8e       	std	Y+30, r1	; 0x1e
    19a6:	fb 83       	std	Y+3, r31	; 0x03
    19a8:	ea 83       	std	Y+2, r30	; 0x02
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	82 9f       	mul	r24, r18
    19ae:	a0 01       	movw	r20, r0
    19b0:	83 9f       	mul	r24, r19
    19b2:	50 0d       	add	r21, r0
    19b4:	92 9f       	mul	r25, r18
    19b6:	50 0d       	add	r21, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	cf 01       	movw	r24, r30
    19bc:	84 0f       	add	r24, r20
    19be:	95 1f       	adc	r25, r21
    19c0:	9f 83       	std	Y+7, r25	; 0x07
    19c2:	8e 83       	std	Y+6, r24	; 0x06
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	8a a3       	std	Y+34, r24	; 0x22
    19ca:	61 11       	cpse	r22, r1
    19cc:	0a c0       	rjmp	.+20     	; 0x19e2 <xQueueGenericReset+0x6c>
    19ce:	88 85       	ldd	r24, Y+8	; 0x08
    19d0:	88 23       	and	r24, r24
    19d2:	69 f0       	breq	.+26     	; 0x19ee <xQueueGenericReset+0x78>
    19d4:	ce 01       	movw	r24, r28
    19d6:	08 96       	adiw	r24, 0x08	; 8
    19d8:	b5 d7       	rcall	.+3946   	; 0x2944 <xTaskRemoveFromEventList>
    19da:	88 23       	and	r24, r24
    19dc:	41 f0       	breq	.+16     	; 0x19ee <xQueueGenericReset+0x78>
    19de:	34 de       	rcall	.-920    	; 0x1648 <vPortYield>
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <xQueueGenericReset+0x78>
    19e2:	ce 01       	movw	r24, r28
    19e4:	08 96       	adiw	r24, 0x08	; 8
    19e6:	64 dd       	rcall	.-1336   	; 0x14b0 <vListInitialise>
    19e8:	ce 01       	movw	r24, r28
    19ea:	43 96       	adiw	r24, 0x13	; 19
    19ec:	61 dd       	rcall	.-1342   	; 0x14b0 <vListInitialise>
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <xQueueGenericCreate>:
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	08 2f       	mov	r16, r24
    1a04:	16 2f       	mov	r17, r22
    1a06:	86 9f       	mul	r24, r22
    1a08:	c0 01       	movw	r24, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	83 96       	adiw	r24, 0x23	; 35
    1a0e:	4f dc       	rcall	.-1890   	; 0x12ae <pvPortMalloc>
    1a10:	ec 01       	movw	r28, r24
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f0       	breq	.+26     	; 0x1a30 <xQueueGenericCreate+0x36>
    1a16:	11 11       	cpse	r17, r1
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <xQueueGenericCreate+0x26>
    1a1a:	99 83       	std	Y+1, r25	; 0x01
    1a1c:	88 83       	st	Y, r24
    1a1e:	03 c0       	rjmp	.+6      	; 0x1a26 <xQueueGenericCreate+0x2c>
    1a20:	83 96       	adiw	r24, 0x23	; 35
    1a22:	99 83       	std	Y+1, r25	; 0x01
    1a24:	88 83       	st	Y, r24
    1a26:	0f 8f       	std	Y+31, r16	; 0x1f
    1a28:	18 a3       	std	Y+32, r17	; 0x20
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	a3 df       	rcall	.-186    	; 0x1976 <xQueueGenericReset>
    1a30:	ce 01       	movw	r24, r28
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <xQueueGenericSend>:
    1a3c:	9f 92       	push	r9
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	29 97       	sbiw	r28, 0x09	; 9
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	7c 01       	movw	r14, r24
    1a64:	5b 01       	movw	r10, r22
    1a66:	2e 83       	std	Y+6, r18	; 0x06
    1a68:	3f 83       	std	Y+7, r19	; 0x07
    1a6a:	48 87       	std	Y+8, r20	; 0x08
    1a6c:	59 87       	std	Y+9, r21	; 0x09
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	99 24       	eor	r9, r9
    1a72:	93 94       	inc	r9
    1a74:	6c 01       	movw	r12, r24
    1a76:	88 e0       	ldi	r24, 0x08	; 8
    1a78:	c8 0e       	add	r12, r24
    1a7a:	d1 1c       	adc	r13, r1
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	0f 92       	push	r0
    1a82:	f7 01       	movw	r30, r14
    1a84:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a86:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a88:	98 17       	cp	r25, r24
    1a8a:	10 f0       	brcs	.+4      	; 0x1a90 <xQueueGenericSend+0x54>
    1a8c:	02 30       	cpi	r16, 0x02	; 2
    1a8e:	a9 f4       	brne	.+42     	; 0x1aba <xQueueGenericSend+0x7e>
    1a90:	40 2f       	mov	r20, r16
    1a92:	b5 01       	movw	r22, r10
    1a94:	c7 01       	movw	r24, r14
    1a96:	aa de       	rcall	.-684    	; 0x17ec <prvCopyDataToQueue>
    1a98:	f7 01       	movw	r30, r14
    1a9a:	93 89       	ldd	r25, Z+19	; 0x13
    1a9c:	99 23       	and	r25, r25
    1a9e:	39 f0       	breq	.+14     	; 0x1aae <xQueueGenericSend+0x72>
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	43 96       	adiw	r24, 0x13	; 19
    1aa4:	4f d7       	rcall	.+3742   	; 0x2944 <xTaskRemoveFromEventList>
    1aa6:	88 23       	and	r24, r24
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <xQueueGenericSend+0x76>
    1aaa:	ce dd       	rcall	.-1124   	; 0x1648 <vPortYield>
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <xQueueGenericSend+0x76>
    1aae:	81 11       	cpse	r24, r1
    1ab0:	cb dd       	rcall	.-1130   	; 0x1648 <vPortYield>
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	4b c0       	rjmp	.+150    	; 0x1b50 <xQueueGenericSend+0x114>
    1aba:	8e 81       	ldd	r24, Y+6	; 0x06
    1abc:	9f 81       	ldd	r25, Y+7	; 0x07
    1abe:	a8 85       	ldd	r26, Y+8	; 0x08
    1ac0:	b9 85       	ldd	r27, Y+9	; 0x09
    1ac2:	89 2b       	or	r24, r25
    1ac4:	8a 2b       	or	r24, r26
    1ac6:	8b 2b       	or	r24, r27
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <xQueueGenericSend+0x96>
    1aca:	0f 90       	pop	r0
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <xQueueGenericSend+0x114>
    1ad2:	11 11       	cpse	r17, r1
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <xQueueGenericSend+0xa2>
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	e4 d7       	rcall	.+4040   	; 0x2aa4 <vTaskInternalSetTimeOutState>
    1adc:	19 2d       	mov	r17, r9
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	23 d4       	rcall	.+2118   	; 0x232a <vTaskSuspendAll>
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	0f 92       	push	r0
    1aea:	f7 01       	movw	r30, r14
    1aec:	81 a1       	ldd	r24, Z+33	; 0x21
    1aee:	8f 3f       	cpi	r24, 0xFF	; 255
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <xQueueGenericSend+0xb8>
    1af2:	11 a2       	std	Z+33, r1	; 0x21
    1af4:	f7 01       	movw	r30, r14
    1af6:	82 a1       	ldd	r24, Z+34	; 0x22
    1af8:	8f 3f       	cpi	r24, 0xFF	; 255
    1afa:	09 f4       	brne	.+2      	; 0x1afe <xQueueGenericSend+0xc2>
    1afc:	12 a2       	std	Z+34, r1	; 0x22
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	be 01       	movw	r22, r28
    1b04:	6a 5f       	subi	r22, 0xFA	; 250
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	ce 01       	movw	r24, r28
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	dc d7       	rcall	.+4024   	; 0x2ac6 <xTaskCheckForTimeOut>
    1b0e:	81 11       	cpse	r24, r1
    1b10:	1b c0       	rjmp	.+54     	; 0x1b48 <xQueueGenericSend+0x10c>
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	0f 92       	push	r0
    1b18:	f7 01       	movw	r30, r14
    1b1a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b1c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	98 13       	cpse	r25, r24
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <xQueueGenericSend+0x104>
    1b26:	4e 81       	ldd	r20, Y+6	; 0x06
    1b28:	5f 81       	ldd	r21, Y+7	; 0x07
    1b2a:	68 85       	ldd	r22, Y+8	; 0x08
    1b2c:	79 85       	ldd	r23, Y+9	; 0x09
    1b2e:	c6 01       	movw	r24, r12
    1b30:	b0 d6       	rcall	.+3424   	; 0x2892 <vTaskPlaceOnEventList>
    1b32:	c7 01       	movw	r24, r14
    1b34:	d4 de       	rcall	.-600    	; 0x18de <prvUnlockQueue>
    1b36:	3d d5       	rcall	.+2682   	; 0x25b2 <xTaskResumeAll>
    1b38:	81 11       	cpse	r24, r1
    1b3a:	a0 cf       	rjmp	.-192    	; 0x1a7c <xQueueGenericSend+0x40>
    1b3c:	85 dd       	rcall	.-1270   	; 0x1648 <vPortYield>
    1b3e:	9e cf       	rjmp	.-196    	; 0x1a7c <xQueueGenericSend+0x40>
    1b40:	c7 01       	movw	r24, r14
    1b42:	cd de       	rcall	.-614    	; 0x18de <prvUnlockQueue>
    1b44:	36 d5       	rcall	.+2668   	; 0x25b2 <xTaskResumeAll>
    1b46:	9a cf       	rjmp	.-204    	; 0x1a7c <xQueueGenericSend+0x40>
    1b48:	c7 01       	movw	r24, r14
    1b4a:	c9 de       	rcall	.-622    	; 0x18de <prvUnlockQueue>
    1b4c:	32 d5       	rcall	.+2660   	; 0x25b2 <xTaskResumeAll>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	29 96       	adiw	r28, 0x09	; 9
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	08 95       	ret

00001b74 <xQueueGenericSendFromISR>:
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	8a 01       	movw	r16, r20
    1b82:	fc 01       	movw	r30, r24
    1b84:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b86:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b88:	53 17       	cp	r21, r19
    1b8a:	10 f0       	brcs	.+4      	; 0x1b90 <xQueueGenericSendFromISR+0x1c>
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	f1 f4       	brne	.+60     	; 0x1bcc <xQueueGenericSendFromISR+0x58>
    1b90:	42 2f       	mov	r20, r18
    1b92:	78 01       	movw	r14, r16
    1b94:	ec 01       	movw	r28, r24
    1b96:	1a a1       	ldd	r17, Y+34	; 0x22
    1b98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	27 de       	rcall	.-946    	; 0x17ec <prvCopyDataToQueue>
    1b9e:	1f 3f       	cpi	r17, 0xFF	; 255
    1ba0:	79 f4       	brne	.+30     	; 0x1bc0 <xQueueGenericSendFromISR+0x4c>
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	88 23       	and	r24, r24
    1ba6:	a1 f0       	breq	.+40     	; 0x1bd0 <xQueueGenericSendFromISR+0x5c>
    1ba8:	ce 01       	movw	r24, r28
    1baa:	43 96       	adiw	r24, 0x13	; 19
    1bac:	cb d6       	rcall	.+3478   	; 0x2944 <xTaskRemoveFromEventList>
    1bae:	88 23       	and	r24, r24
    1bb0:	89 f0       	breq	.+34     	; 0x1bd4 <xQueueGenericSendFromISR+0x60>
    1bb2:	e1 14       	cp	r14, r1
    1bb4:	f1 04       	cpc	r15, r1
    1bb6:	81 f0       	breq	.+32     	; 0x1bd8 <xQueueGenericSendFromISR+0x64>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	f7 01       	movw	r30, r14
    1bbc:	80 83       	st	Z, r24
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <xQueueGenericSendFromISR+0x66>
    1bc0:	ff 24       	eor	r15, r15
    1bc2:	f3 94       	inc	r15
    1bc4:	f1 0e       	add	r15, r17
    1bc6:	fa a2       	std	Y+34, r15	; 0x22
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <xQueueGenericSendFromISR+0x66>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <xQueueGenericSendFromISR+0x66>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <xQueueGenericSendFromISR+0x66>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <xQueueGenericSendFromISR+0x66>
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	08 95       	ret

00001be8 <xQueueReceive>:
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	29 97       	sbiw	r28, 0x09	; 9
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	8c 01       	movw	r16, r24
    1c10:	5b 01       	movw	r10, r22
    1c12:	2e 83       	std	Y+6, r18	; 0x06
    1c14:	3f 83       	std	Y+7, r19	; 0x07
    1c16:	48 87       	std	Y+8, r20	; 0x08
    1c18:	59 87       	std	Y+9, r21	; 0x09
    1c1a:	e1 2c       	mov	r14, r1
    1c1c:	99 24       	eor	r9, r9
    1c1e:	93 94       	inc	r9
    1c20:	6c 01       	movw	r12, r24
    1c22:	83 e1       	ldi	r24, 0x13	; 19
    1c24:	c8 0e       	add	r12, r24
    1c26:	d1 1c       	adc	r13, r1
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	0f 92       	push	r0
    1c2e:	f8 01       	movw	r30, r16
    1c30:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1c32:	ff 20       	and	r15, r15
    1c34:	91 f0       	breq	.+36     	; 0x1c5a <xQueueReceive+0x72>
    1c36:	b5 01       	movw	r22, r10
    1c38:	c8 01       	movw	r24, r16
    1c3a:	37 de       	rcall	.-914    	; 0x18aa <prvCopyDataFromQueue>
    1c3c:	fa 94       	dec	r15
    1c3e:	f8 01       	movw	r30, r16
    1c40:	f6 8e       	std	Z+30, r15	; 0x1e
    1c42:	80 85       	ldd	r24, Z+8	; 0x08
    1c44:	88 23       	and	r24, r24
    1c46:	29 f0       	breq	.+10     	; 0x1c52 <xQueueReceive+0x6a>
    1c48:	c8 01       	movw	r24, r16
    1c4a:	08 96       	adiw	r24, 0x08	; 8
    1c4c:	7b d6       	rcall	.+3318   	; 0x2944 <xTaskRemoveFromEventList>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	fb dc       	rcall	.-1546   	; 0x1648 <vPortYield>
    1c52:	0f 90       	pop	r0
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	4a c0       	rjmp	.+148    	; 0x1cee <xQueueReceive+0x106>
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5e:	a8 85       	ldd	r26, Y+8	; 0x08
    1c60:	b9 85       	ldd	r27, Y+9	; 0x09
    1c62:	89 2b       	or	r24, r25
    1c64:	8a 2b       	or	r24, r26
    1c66:	8b 2b       	or	r24, r27
    1c68:	21 f4       	brne	.+8      	; 0x1c72 <xQueueReceive+0x8a>
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	3e c0       	rjmp	.+124    	; 0x1cee <xQueueReceive+0x106>
    1c72:	e1 10       	cpse	r14, r1
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <xQueueReceive+0x96>
    1c76:	ce 01       	movw	r24, r28
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	14 d7       	rcall	.+3624   	; 0x2aa4 <vTaskInternalSetTimeOutState>
    1c7c:	e9 2c       	mov	r14, r9
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	53 d3       	rcall	.+1702   	; 0x232a <vTaskSuspendAll>
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	0f 92       	push	r0
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	81 a1       	ldd	r24, Z+33	; 0x21
    1c8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <xQueueReceive+0xac>
    1c92:	11 a2       	std	Z+33, r1	; 0x21
    1c94:	f8 01       	movw	r30, r16
    1c96:	82 a1       	ldd	r24, Z+34	; 0x22
    1c98:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <xQueueReceive+0xb6>
    1c9c:	12 a2       	std	Z+34, r1	; 0x22
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	be 01       	movw	r22, r28
    1ca4:	6a 5f       	subi	r22, 0xFA	; 250
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	0c d7       	rcall	.+3608   	; 0x2ac6 <xTaskCheckForTimeOut>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	15 c0       	rjmp	.+42     	; 0x1cdc <xQueueReceive+0xf4>
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	90 dd       	rcall	.-1248   	; 0x17d6 <prvIsQueueEmpty>
    1cb6:	88 23       	and	r24, r24
    1cb8:	69 f0       	breq	.+26     	; 0x1cd4 <xQueueReceive+0xec>
    1cba:	4e 81       	ldd	r20, Y+6	; 0x06
    1cbc:	5f 81       	ldd	r21, Y+7	; 0x07
    1cbe:	68 85       	ldd	r22, Y+8	; 0x08
    1cc0:	79 85       	ldd	r23, Y+9	; 0x09
    1cc2:	c6 01       	movw	r24, r12
    1cc4:	e6 d5       	rcall	.+3020   	; 0x2892 <vTaskPlaceOnEventList>
    1cc6:	c8 01       	movw	r24, r16
    1cc8:	0a de       	rcall	.-1004   	; 0x18de <prvUnlockQueue>
    1cca:	73 d4       	rcall	.+2278   	; 0x25b2 <xTaskResumeAll>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	ac cf       	rjmp	.-168    	; 0x1c28 <xQueueReceive+0x40>
    1cd0:	bb dc       	rcall	.-1674   	; 0x1648 <vPortYield>
    1cd2:	aa cf       	rjmp	.-172    	; 0x1c28 <xQueueReceive+0x40>
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	03 de       	rcall	.-1018   	; 0x18de <prvUnlockQueue>
    1cd8:	6c d4       	rcall	.+2264   	; 0x25b2 <xTaskResumeAll>
    1cda:	a6 cf       	rjmp	.-180    	; 0x1c28 <xQueueReceive+0x40>
    1cdc:	c8 01       	movw	r24, r16
    1cde:	ff dd       	rcall	.-1026   	; 0x18de <prvUnlockQueue>
    1ce0:	68 d4       	rcall	.+2256   	; 0x25b2 <xTaskResumeAll>
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	78 dd       	rcall	.-1296   	; 0x17d6 <prvIsQueueEmpty>
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <xQueueReceive+0x104>
    1cea:	9e cf       	rjmp	.-196    	; 0x1c28 <xQueueReceive+0x40>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	29 96       	adiw	r28, 0x09	; 9
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	df 90       	pop	r13
    1d08:	cf 90       	pop	r12
    1d0a:	bf 90       	pop	r11
    1d0c:	af 90       	pop	r10
    1d0e:	9f 90       	pop	r9
    1d10:	08 95       	ret

00001d12 <xQueueSemaphoreTake>:
    1d12:	bf 92       	push	r11
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	29 97       	sbiw	r28, 0x09	; 9
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	8c 01       	movw	r16, r24
    1d36:	4e 83       	std	Y+6, r20	; 0x06
    1d38:	5f 83       	std	Y+7, r21	; 0x07
    1d3a:	68 87       	std	Y+8, r22	; 0x08
    1d3c:	79 87       	std	Y+9, r23	; 0x09
    1d3e:	b1 2c       	mov	r11, r1
    1d40:	d1 2c       	mov	r13, r1
    1d42:	cc 24       	eor	r12, r12
    1d44:	c3 94       	inc	r12
    1d46:	7c 01       	movw	r14, r24
    1d48:	83 e1       	ldi	r24, 0x13	; 19
    1d4a:	e8 0e       	add	r14, r24
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	0f 92       	push	r0
    1d54:	d8 01       	movw	r26, r16
    1d56:	5e 96       	adiw	r26, 0x1e	; 30
    1d58:	8c 91       	ld	r24, X
    1d5a:	5e 97       	sbiw	r26, 0x1e	; 30
    1d5c:	88 23       	and	r24, r24
    1d5e:	d9 f0       	breq	.+54     	; 0x1d96 <xQueueSemaphoreTake+0x84>
    1d60:	81 50       	subi	r24, 0x01	; 1
    1d62:	5e 96       	adiw	r26, 0x1e	; 30
    1d64:	8c 93       	st	X, r24
    1d66:	5e 97       	sbiw	r26, 0x1e	; 30
    1d68:	8d 91       	ld	r24, X+
    1d6a:	9c 91       	ld	r25, X
    1d6c:	89 2b       	or	r24, r25
    1d6e:	29 f4       	brne	.+10     	; 0x1d7a <xQueueSemaphoreTake+0x68>
    1d70:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <pvTaskIncrementMutexHeldCount>
    1d74:	f8 01       	movw	r30, r16
    1d76:	95 83       	std	Z+5, r25	; 0x05
    1d78:	84 83       	std	Z+4, r24	; 0x04
    1d7a:	d8 01       	movw	r26, r16
    1d7c:	18 96       	adiw	r26, 0x08	; 8
    1d7e:	8c 91       	ld	r24, X
    1d80:	88 23       	and	r24, r24
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <xQueueSemaphoreTake+0x7c>
    1d84:	c8 01       	movw	r24, r16
    1d86:	08 96       	adiw	r24, 0x08	; 8
    1d88:	dd d5       	rcall	.+3002   	; 0x2944 <xTaskRemoveFromEventList>
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	5d dc       	rcall	.-1862   	; 0x1648 <vPortYield>
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	76 c0       	rjmp	.+236    	; 0x1e82 <xQueueSemaphoreTake+0x170>
    1d96:	8e 81       	ldd	r24, Y+6	; 0x06
    1d98:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9a:	a8 85       	ldd	r26, Y+8	; 0x08
    1d9c:	b9 85       	ldd	r27, Y+9	; 0x09
    1d9e:	89 2b       	or	r24, r25
    1da0:	8a 2b       	or	r24, r26
    1da2:	8b 2b       	or	r24, r27
    1da4:	21 f4       	brne	.+8      	; 0x1dae <xQueueSemaphoreTake+0x9c>
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	6a c0       	rjmp	.+212    	; 0x1e82 <xQueueSemaphoreTake+0x170>
    1dae:	d1 10       	cpse	r13, r1
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <xQueueSemaphoreTake+0xa8>
    1db2:	ce 01       	movw	r24, r28
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	76 d6       	rcall	.+3308   	; 0x2aa4 <vTaskInternalSetTimeOutState>
    1db8:	dc 2c       	mov	r13, r12
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	b5 d2       	rcall	.+1386   	; 0x232a <vTaskSuspendAll>
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	0f 92       	push	r0
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	81 a1       	ldd	r24, Z+33	; 0x21
    1dca:	8f 3f       	cpi	r24, 0xFF	; 255
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <xQueueSemaphoreTake+0xbe>
    1dce:	11 a2       	std	Z+33, r1	; 0x21
    1dd0:	d8 01       	movw	r26, r16
    1dd2:	92 96       	adiw	r26, 0x22	; 34
    1dd4:	8c 91       	ld	r24, X
    1dd6:	92 97       	sbiw	r26, 0x22	; 34
    1dd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1dda:	11 f4       	brne	.+4      	; 0x1de0 <xQueueSemaphoreTake+0xce>
    1ddc:	92 96       	adiw	r26, 0x22	; 34
    1dde:	1c 92       	st	X, r1
    1de0:	0f 90       	pop	r0
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	be 01       	movw	r22, r28
    1de6:	6a 5f       	subi	r22, 0xFA	; 250
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	ce 01       	movw	r24, r28
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	6b d6       	rcall	.+3286   	; 0x2ac6 <xTaskCheckForTimeOut>
    1df0:	81 11       	cpse	r24, r1
    1df2:	23 c0       	rjmp	.+70     	; 0x1e3a <xQueueSemaphoreTake+0x128>
    1df4:	c8 01       	movw	r24, r16
    1df6:	ef dc       	rcall	.-1570   	; 0x17d6 <prvIsQueueEmpty>
    1df8:	88 23       	and	r24, r24
    1dfa:	d9 f0       	breq	.+54     	; 0x1e32 <xQueueSemaphoreTake+0x120>
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	89 2b       	or	r24, r25
    1e04:	49 f4       	brne	.+18     	; 0x1e18 <xQueueSemaphoreTake+0x106>
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	0f 92       	push	r0
    1e0c:	84 81       	ldd	r24, Z+4	; 0x04
    1e0e:	95 81       	ldd	r25, Z+5	; 0x05
    1e10:	c5 d6       	rcall	.+3466   	; 0x2b9c <xTaskPriorityInherit>
    1e12:	b8 2e       	mov	r11, r24
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	4e 81       	ldd	r20, Y+6	; 0x06
    1e1a:	5f 81       	ldd	r21, Y+7	; 0x07
    1e1c:	68 85       	ldd	r22, Y+8	; 0x08
    1e1e:	79 85       	ldd	r23, Y+9	; 0x09
    1e20:	c7 01       	movw	r24, r14
    1e22:	37 d5       	rcall	.+2670   	; 0x2892 <vTaskPlaceOnEventList>
    1e24:	c8 01       	movw	r24, r16
    1e26:	5b dd       	rcall	.-1354   	; 0x18de <prvUnlockQueue>
    1e28:	c4 d3       	rcall	.+1928   	; 0x25b2 <xTaskResumeAll>
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	90 cf       	rjmp	.-224    	; 0x1d4e <xQueueSemaphoreTake+0x3c>
    1e2e:	0c dc       	rcall	.-2024   	; 0x1648 <vPortYield>
    1e30:	8e cf       	rjmp	.-228    	; 0x1d4e <xQueueSemaphoreTake+0x3c>
    1e32:	c8 01       	movw	r24, r16
    1e34:	54 dd       	rcall	.-1368   	; 0x18de <prvUnlockQueue>
    1e36:	bd d3       	rcall	.+1914   	; 0x25b2 <xTaskResumeAll>
    1e38:	8a cf       	rjmp	.-236    	; 0x1d4e <xQueueSemaphoreTake+0x3c>
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	50 dd       	rcall	.-1376   	; 0x18de <prvUnlockQueue>
    1e3e:	b9 d3       	rcall	.+1906   	; 0x25b2 <xTaskResumeAll>
    1e40:	c8 01       	movw	r24, r16
    1e42:	c9 dc       	rcall	.-1646   	; 0x17d6 <prvIsQueueEmpty>
    1e44:	88 23       	and	r24, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <xQueueSemaphoreTake+0x138>
    1e48:	82 cf       	rjmp	.-252    	; 0x1d4e <xQueueSemaphoreTake+0x3c>
    1e4a:	bb 20       	and	r11, r11
    1e4c:	c9 f0       	breq	.+50     	; 0x1e80 <xQueueSemaphoreTake+0x16e>
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	0f 92       	push	r0
    1e54:	f8 01       	movw	r30, r16
    1e56:	83 89       	ldd	r24, Z+19	; 0x13
    1e58:	88 23       	and	r24, r24
    1e5a:	39 f0       	breq	.+14     	; 0x1e6a <xQueueSemaphoreTake+0x158>
    1e5c:	02 8c       	ldd	r0, Z+26	; 0x1a
    1e5e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1e60:	e0 2d       	mov	r30, r0
    1e62:	80 81       	ld	r24, Z
    1e64:	6a e0       	ldi	r22, 0x0A	; 10
    1e66:	68 1b       	sub	r22, r24
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <xQueueSemaphoreTake+0x15a>
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	d8 01       	movw	r26, r16
    1e6e:	14 96       	adiw	r26, 0x04	; 4
    1e70:	8d 91       	ld	r24, X+
    1e72:	9c 91       	ld	r25, X
    1e74:	15 97       	sbiw	r26, 0x05	; 5
    1e76:	74 d7       	rcall	.+3816   	; 0x2d60 <vTaskPriorityDisinheritAfterTimeout>
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <xQueueSemaphoreTake+0x170>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	29 96       	adiw	r28, 0x09	; 9
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	08 95       	ret

00001ea2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	0f 92       	push	r0
    1eae:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <vQueueWaitForMessageRestricted+0x14>
    1eb4:	19 a2       	std	Y+33, r1	; 0x21
    1eb6:	8a a1       	ldd	r24, Y+34	; 0x22
    1eb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <vQueueWaitForMessageRestricted+0x1c>
    1ebc:	1a a2       	std	Y+34, r1	; 0x22
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1ec2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1ec8:	ce 01       	movw	r24, r28
    1eca:	43 96       	adiw	r24, 0x13	; 19
    1ecc:	f9 d4       	rcall	.+2546   	; 0x28c0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1ece:	ce 01       	movw	r24, r28
    1ed0:	06 dd       	rcall	.-1524   	; 0x18de <prvUnlockQueue>
    }
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret

00001ed8 <prvResetNextTaskUnblockTime>:
    1ed8:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxDelayedTaskList>
    1edc:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxDelayedTaskList+0x1>
    1ee0:	80 81       	ld	r24, Z
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	0c c0       	rjmp	.+24     	; 0x1efe <prvResetNextTaskUnblockTime+0x26>
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	9f ef       	ldi	r25, 0xFF	; 255
    1eea:	dc 01       	movw	r26, r24
    1eec:	80 93 e7 0d 	sts	0x0DE7, r24	; 0x800de7 <xNextTaskUnblockTime>
    1ef0:	90 93 e8 0d 	sts	0x0DE8, r25	; 0x800de8 <xNextTaskUnblockTime+0x1>
    1ef4:	a0 93 e9 0d 	sts	0x0DE9, r26	; 0x800de9 <xNextTaskUnblockTime+0x2>
    1ef8:	b0 93 ea 0d 	sts	0x0DEA, r27	; 0x800dea <xNextTaskUnblockTime+0x3>
    1efc:	08 95       	ret
    1efe:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxDelayedTaskList>
    1f02:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxDelayedTaskList+0x1>
    1f06:	07 80       	ldd	r0, Z+7	; 0x07
    1f08:	f0 85       	ldd	r31, Z+8	; 0x08
    1f0a:	e0 2d       	mov	r30, r0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	a2 81       	ldd	r26, Z+2	; 0x02
    1f12:	b3 81       	ldd	r27, Z+3	; 0x03
    1f14:	80 93 e7 0d 	sts	0x0DE7, r24	; 0x800de7 <xNextTaskUnblockTime>
    1f18:	90 93 e8 0d 	sts	0x0DE8, r25	; 0x800de8 <xNextTaskUnblockTime+0x1>
    1f1c:	a0 93 e9 0d 	sts	0x0DE9, r26	; 0x800de9 <xNextTaskUnblockTime+0x2>
    1f20:	b0 93 ea 0d 	sts	0x0DEA, r27	; 0x800dea <xNextTaskUnblockTime+0x3>
    1f24:	08 95       	ret

00001f26 <prvAddCurrentTaskToDelayedList>:
    1f26:	8f 92       	push	r8
    1f28:	9f 92       	push	r9
    1f2a:	af 92       	push	r10
    1f2c:	bf 92       	push	r11
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	6b 01       	movw	r12, r22
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	c4 2f       	mov	r28, r20
    1f40:	80 90 f4 0d 	lds	r8, 0x0DF4	; 0x800df4 <xTickCount>
    1f44:	90 90 f5 0d 	lds	r9, 0x0DF5	; 0x800df5 <xTickCount+0x1>
    1f48:	a0 90 f6 0d 	lds	r10, 0x0DF6	; 0x800df6 <xTickCount+0x2>
    1f4c:	b0 90 f7 0d 	lds	r11, 0x0DF7	; 0x800df7 <xTickCount+0x3>
    1f50:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1f54:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1f58:	02 96       	adiw	r24, 0x02	; 2
    1f5a:	fc da       	rcall	.-2568   	; 0x1554 <uxListRemove>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	c8 16       	cp	r12, r24
    1f60:	d8 06       	cpc	r13, r24
    1f62:	e8 06       	cpc	r14, r24
    1f64:	f8 06       	cpc	r15, r24
    1f66:	b1 f5       	brne	.+108    	; 0x1fd4 <prvAddCurrentTaskToDelayedList+0xae>
    1f68:	cc 23       	and	r28, r28
    1f6a:	a1 f1       	breq	.+104    	; 0x1fd4 <prvAddCurrentTaskToDelayedList+0xae>
    1f6c:	e9 ef       	ldi	r30, 0xF9	; 249
    1f6e:	fd e0       	ldi	r31, 0x0D	; 13
    1f70:	a1 81       	ldd	r26, Z+1	; 0x01
    1f72:	b2 81       	ldd	r27, Z+2	; 0x02
    1f74:	c0 91 a3 0e 	lds	r28, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1f78:	d0 91 a4 0e 	lds	r29, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1f7c:	bf 83       	std	Y+7, r27	; 0x07
    1f7e:	ae 83       	std	Y+6, r26	; 0x06
    1f80:	c0 91 a3 0e 	lds	r28, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1f84:	d0 91 a4 0e 	lds	r29, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1f88:	16 96       	adiw	r26, 0x06	; 6
    1f8a:	8d 91       	ld	r24, X+
    1f8c:	9c 91       	ld	r25, X
    1f8e:	17 97       	sbiw	r26, 0x07	; 7
    1f90:	99 87       	std	Y+9, r25	; 0x09
    1f92:	88 87       	std	Y+8, r24	; 0x08
    1f94:	16 96       	adiw	r26, 0x06	; 6
    1f96:	cd 91       	ld	r28, X+
    1f98:	dc 91       	ld	r29, X
    1f9a:	17 97       	sbiw	r26, 0x07	; 7
    1f9c:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1fa0:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1fa4:	02 96       	adiw	r24, 0x02	; 2
    1fa6:	9d 83       	std	Y+5, r25	; 0x05
    1fa8:	8c 83       	std	Y+4, r24	; 0x04
    1faa:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1fae:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1fb2:	02 96       	adiw	r24, 0x02	; 2
    1fb4:	17 96       	adiw	r26, 0x07	; 7
    1fb6:	9c 93       	st	X, r25
    1fb8:	8e 93       	st	-X, r24
    1fba:	16 97       	sbiw	r26, 0x06	; 6
    1fbc:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1fc0:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1fc4:	1d 96       	adiw	r26, 0x0d	; 13
    1fc6:	fc 93       	st	X, r31
    1fc8:	ee 93       	st	-X, r30
    1fca:	1c 97       	sbiw	r26, 0x0c	; 12
    1fcc:	80 81       	ld	r24, Z
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	80 83       	st	Z, r24
    1fd2:	3d c0       	rjmp	.+122    	; 0x204e <prvAddCurrentTaskToDelayedList+0x128>
    1fd4:	c8 0c       	add	r12, r8
    1fd6:	d9 1c       	adc	r13, r9
    1fd8:	ea 1c       	adc	r14, r10
    1fda:	fb 1c       	adc	r15, r11
    1fdc:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1fe0:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1fe4:	c2 82       	std	Z+2, r12	; 0x02
    1fe6:	d3 82       	std	Z+3, r13	; 0x03
    1fe8:	e4 82       	std	Z+4, r14	; 0x04
    1fea:	f5 82       	std	Z+5, r15	; 0x05
    1fec:	c8 14       	cp	r12, r8
    1fee:	d9 04       	cpc	r13, r9
    1ff0:	ea 04       	cpc	r14, r10
    1ff2:	fb 04       	cpc	r15, r11
    1ff4:	60 f4       	brcc	.+24     	; 0x200e <prvAddCurrentTaskToDelayedList+0xe8>
    1ff6:	60 91 a3 0e 	lds	r22, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    1ffa:	70 91 a4 0e 	lds	r23, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    1ffe:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <pxOverflowDelayedTaskList>
    2002:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <pxOverflowDelayedTaskList+0x1>
    2006:	6e 5f       	subi	r22, 0xFE	; 254
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	67 da       	rcall	.-2866   	; 0x14da <vListInsert>
    200c:	20 c0       	rjmp	.+64     	; 0x204e <prvAddCurrentTaskToDelayedList+0x128>
    200e:	60 91 a3 0e 	lds	r22, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2012:	70 91 a4 0e 	lds	r23, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2016:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxDelayedTaskList>
    201a:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxDelayedTaskList+0x1>
    201e:	6e 5f       	subi	r22, 0xFE	; 254
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	5b da       	rcall	.-2890   	; 0x14da <vListInsert>
    2024:	80 91 e7 0d 	lds	r24, 0x0DE7	; 0x800de7 <xNextTaskUnblockTime>
    2028:	90 91 e8 0d 	lds	r25, 0x0DE8	; 0x800de8 <xNextTaskUnblockTime+0x1>
    202c:	a0 91 e9 0d 	lds	r26, 0x0DE9	; 0x800de9 <xNextTaskUnblockTime+0x2>
    2030:	b0 91 ea 0d 	lds	r27, 0x0DEA	; 0x800dea <xNextTaskUnblockTime+0x3>
    2034:	c8 16       	cp	r12, r24
    2036:	d9 06       	cpc	r13, r25
    2038:	ea 06       	cpc	r14, r26
    203a:	fb 06       	cpc	r15, r27
    203c:	40 f4       	brcc	.+16     	; 0x204e <prvAddCurrentTaskToDelayedList+0x128>
    203e:	c0 92 e7 0d 	sts	0x0DE7, r12	; 0x800de7 <xNextTaskUnblockTime>
    2042:	d0 92 e8 0d 	sts	0x0DE8, r13	; 0x800de8 <xNextTaskUnblockTime+0x1>
    2046:	e0 92 e9 0d 	sts	0x0DE9, r14	; 0x800de9 <xNextTaskUnblockTime+0x2>
    204a:	f0 92 ea 0d 	sts	0x0DEA, r15	; 0x800dea <xNextTaskUnblockTime+0x3>
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	cf 90       	pop	r12
    205a:	bf 90       	pop	r11
    205c:	af 90       	pop	r10
    205e:	9f 90       	pop	r9
    2060:	8f 90       	pop	r8
    2062:	08 95       	ret

00002064 <xTaskCreate>:
    2064:	4f 92       	push	r4
    2066:	5f 92       	push	r5
    2068:	6f 92       	push	r6
    206a:	7f 92       	push	r7
    206c:	8f 92       	push	r8
    206e:	9f 92       	push	r9
    2070:	af 92       	push	r10
    2072:	bf 92       	push	r11
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	4c 01       	movw	r8, r24
    2086:	6b 01       	movw	r12, r22
    2088:	5a 01       	movw	r10, r20
    208a:	29 01       	movw	r4, r18
    208c:	ca 01       	movw	r24, r20
    208e:	0f d9       	rcall	.-3554   	; 0x12ae <pvPortMalloc>
    2090:	3c 01       	movw	r6, r24
    2092:	89 2b       	or	r24, r25
    2094:	09 f4       	brne	.+2      	; 0x2098 <xTaskCreate+0x34>
    2096:	01 c1       	rjmp	.+514    	; 0x229a <__stack+0x9b>
    2098:	84 e3       	ldi	r24, 0x34	; 52
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	08 d9       	rcall	.-3568   	; 0x12ae <pvPortMalloc>
    209e:	ec 01       	movw	r28, r24
    20a0:	89 2b       	or	r24, r25
    20a2:	99 f0       	breq	.+38     	; 0x20ca <xTaskCreate+0x66>
    20a4:	7c 8e       	std	Y+28, r7	; 0x1c
    20a6:	6b 8e       	std	Y+27, r6	; 0x1b
    20a8:	a5 01       	movw	r20, r10
    20aa:	65 ea       	ldi	r22, 0xA5	; 165
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	c3 01       	movw	r24, r6
    20b0:	0e 94 ed 28 	call	0x51da	; 0x51da <memset>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	a8 1a       	sub	r10, r24
    20b8:	b1 08       	sbc	r11, r1
    20ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20be:	a8 0e       	add	r10, r24
    20c0:	b9 1e       	adc	r11, r25
    20c2:	c1 14       	cp	r12, r1
    20c4:	d1 04       	cpc	r13, r1
    20c6:	21 f4       	brne	.+8      	; 0x20d0 <xTaskCreate+0x6c>
    20c8:	1f c0       	rjmp	.+62     	; 0x2108 <xTaskCreate+0xa4>
    20ca:	c3 01       	movw	r24, r6
    20cc:	b8 d9       	rcall	.-3216   	; 0x143e <vPortFree>
    20ce:	e5 c0       	rjmp	.+458    	; 0x229a <__stack+0x9b>
    20d0:	d6 01       	movw	r26, r12
    20d2:	8c 91       	ld	r24, X
    20d4:	8d 8f       	std	Y+29, r24	; 0x1d
    20d6:	8c 91       	ld	r24, X
    20d8:	88 23       	and	r24, r24
    20da:	a1 f0       	breq	.+40     	; 0x2104 <xTaskCreate+0xa0>
    20dc:	ae 01       	movw	r20, r28
    20de:	42 5e       	subi	r20, 0xE2	; 226
    20e0:	5f 4f       	sbci	r21, 0xFF	; 255
    20e2:	f6 01       	movw	r30, r12
    20e4:	31 96       	adiw	r30, 0x01	; 1
    20e6:	b0 e1       	ldi	r27, 0x10	; 16
    20e8:	cb 0e       	add	r12, r27
    20ea:	d1 1c       	adc	r13, r1
    20ec:	cf 01       	movw	r24, r30
    20ee:	21 91       	ld	r18, Z+
    20f0:	da 01       	movw	r26, r20
    20f2:	2d 93       	st	X+, r18
    20f4:	ad 01       	movw	r20, r26
    20f6:	dc 01       	movw	r26, r24
    20f8:	8c 91       	ld	r24, X
    20fa:	88 23       	and	r24, r24
    20fc:	19 f0       	breq	.+6      	; 0x2104 <xTaskCreate+0xa0>
    20fe:	ce 16       	cp	r12, r30
    2100:	df 06       	cpc	r13, r31
    2102:	a1 f7       	brne	.-24     	; 0x20ec <xTaskCreate+0x88>
    2104:	1c a6       	std	Y+44, r1	; 0x2c
    2106:	01 c0       	rjmp	.+2      	; 0x210a <xTaskCreate+0xa6>
    2108:	1d 8e       	std	Y+29, r1	; 0x1d
    210a:	0a 30       	cpi	r16, 0x0A	; 10
    210c:	08 f0       	brcs	.+2      	; 0x2110 <xTaskCreate+0xac>
    210e:	09 e0       	ldi	r16, 0x09	; 9
    2110:	0a 8f       	std	Y+26, r16	; 0x1a
    2112:	0d a7       	std	Y+45, r16	; 0x2d
    2114:	1e a6       	std	Y+46, r1	; 0x2e
    2116:	6e 01       	movw	r12, r28
    2118:	b2 e0       	ldi	r27, 0x02	; 2
    211a:	cb 0e       	add	r12, r27
    211c:	d1 1c       	adc	r13, r1
    211e:	c6 01       	movw	r24, r12
    2120:	d8 d9       	rcall	.-3152   	; 0x14d2 <vListInitialiseItem>
    2122:	ce 01       	movw	r24, r28
    2124:	0e 96       	adiw	r24, 0x0e	; 14
    2126:	d5 d9       	rcall	.-3158   	; 0x14d2 <vListInitialiseItem>
    2128:	db 87       	std	Y+11, r29	; 0x0b
    212a:	ca 87       	std	Y+10, r28	; 0x0a
    212c:	8a e0       	ldi	r24, 0x0A	; 10
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	80 1b       	sub	r24, r16
    2136:	91 09       	sbc	r25, r1
    2138:	a1 09       	sbc	r26, r1
    213a:	b1 09       	sbc	r27, r1
    213c:	8e 87       	std	Y+14, r24	; 0x0e
    213e:	9f 87       	std	Y+15, r25	; 0x0f
    2140:	a8 8b       	std	Y+16, r26	; 0x10
    2142:	b9 8b       	std	Y+17, r27	; 0x11
    2144:	df 8b       	std	Y+23, r29	; 0x17
    2146:	ce 8b       	std	Y+22, r28	; 0x16
    2148:	84 e0       	ldi	r24, 0x04	; 4
    214a:	fe 01       	movw	r30, r28
    214c:	bf 96       	adiw	r30, 0x2f	; 47
    214e:	df 01       	movw	r26, r30
    2150:	1d 92       	st	X+, r1
    2152:	8a 95       	dec	r24
    2154:	e9 f7       	brne	.-6      	; 0x2150 <xTaskCreate+0xec>
    2156:	1b aa       	std	Y+51, r1	; 0x33
    2158:	a2 01       	movw	r20, r4
    215a:	b4 01       	movw	r22, r8
    215c:	c5 01       	movw	r24, r10
    215e:	21 da       	rcall	.-3006   	; 0x15a2 <pxPortInitialiseStack>
    2160:	99 83       	std	Y+1, r25	; 0x01
    2162:	88 83       	st	Y, r24
    2164:	e1 14       	cp	r14, r1
    2166:	f1 04       	cpc	r15, r1
    2168:	19 f0       	breq	.+6      	; 0x2170 <xTaskCreate+0x10c>
    216a:	f7 01       	movw	r30, r14
    216c:	d1 83       	std	Z+1, r29	; 0x01
    216e:	c0 83       	st	Z, r28
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	0f 92       	push	r0
    2176:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <uxCurrentNumberOfTasks>
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	80 93 f8 0d 	sts	0x0DF8, r24	; 0x800df8 <uxCurrentNumberOfTasks>
    2180:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2184:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2188:	89 2b       	or	r24, r25
    218a:	a1 f5       	brne	.+104    	; 0x21f4 <xTaskCreate+0x190>
    218c:	d0 93 a4 0e 	sts	0x0EA4, r29	; 0x800ea4 <pxCurrentTCB+0x1>
    2190:	c0 93 a3 0e 	sts	0x0EA3, r28	; 0x800ea3 <pxCurrentTCB>
    2194:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <uxCurrentNumberOfTasks>
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	09 f0       	breq	.+2      	; 0x219e <xTaskCreate+0x13a>
    219c:	3b c0       	rjmp	.+118    	; 0x2214 <__stack+0x15>
    219e:	05 e3       	ldi	r16, 0x35	; 53
    21a0:	1e e0       	ldi	r17, 0x0E	; 14
    21a2:	0f 2e       	mov	r0, r31
    21a4:	f3 ea       	ldi	r31, 0xA3	; 163
    21a6:	ef 2e       	mov	r14, r31
    21a8:	fe e0       	ldi	r31, 0x0E	; 14
    21aa:	ff 2e       	mov	r15, r31
    21ac:	f0 2d       	mov	r31, r0
    21ae:	c8 01       	movw	r24, r16
    21b0:	7f d9       	rcall	.-3330   	; 0x14b0 <vListInitialise>
    21b2:	05 5f       	subi	r16, 0xF5	; 245
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	0e 15       	cp	r16, r14
    21b8:	1f 05       	cpc	r17, r15
    21ba:	c9 f7       	brne	.-14     	; 0x21ae <xTaskCreate+0x14a>
    21bc:	8a e2       	ldi	r24, 0x2A	; 42
    21be:	9e e0       	ldi	r25, 0x0E	; 14
    21c0:	77 d9       	rcall	.-3346   	; 0x14b0 <vListInitialise>
    21c2:	8f e1       	ldi	r24, 0x1F	; 31
    21c4:	9e e0       	ldi	r25, 0x0E	; 14
    21c6:	74 d9       	rcall	.-3352   	; 0x14b0 <vListInitialise>
    21c8:	80 e1       	ldi	r24, 0x10	; 16
    21ca:	9e e0       	ldi	r25, 0x0E	; 14
    21cc:	71 d9       	rcall	.-3358   	; 0x14b0 <vListInitialise>
    21ce:	85 e0       	ldi	r24, 0x05	; 5
    21d0:	9e e0       	ldi	r25, 0x0E	; 14
    21d2:	6e d9       	rcall	.-3364   	; 0x14b0 <vListInitialise>
    21d4:	89 ef       	ldi	r24, 0xF9	; 249
    21d6:	9d e0       	ldi	r25, 0x0D	; 13
    21d8:	6b d9       	rcall	.-3370   	; 0x14b0 <vListInitialise>
    21da:	8a e2       	ldi	r24, 0x2A	; 42
    21dc:	9e e0       	ldi	r25, 0x0E	; 14
    21de:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <pxDelayedTaskList+0x1>
    21e2:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <pxDelayedTaskList>
    21e6:	8f e1       	ldi	r24, 0x1F	; 31
    21e8:	9e e0       	ldi	r25, 0x0E	; 14
    21ea:	90 93 1c 0e 	sts	0x0E1C, r25	; 0x800e1c <pxOverflowDelayedTaskList+0x1>
    21ee:	80 93 1b 0e 	sts	0x0E1B, r24	; 0x800e1b <pxOverflowDelayedTaskList>
    21f2:	10 c0       	rjmp	.+32     	; 0x2214 <__stack+0x15>
    21f4:	80 91 f2 0d 	lds	r24, 0x0DF2	; 0x800df2 <xSchedulerRunning>
    21f8:	81 11       	cpse	r24, r1
    21fa:	0c c0       	rjmp	.+24     	; 0x2214 <__stack+0x15>
    21fc:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2200:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2204:	92 8d       	ldd	r25, Z+26	; 0x1a
    2206:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2208:	89 17       	cp	r24, r25
    220a:	20 f0       	brcs	.+8      	; 0x2214 <__stack+0x15>
    220c:	d0 93 a4 0e 	sts	0x0EA4, r29	; 0x800ea4 <pxCurrentTCB+0x1>
    2210:	c0 93 a3 0e 	sts	0x0EA3, r28	; 0x800ea3 <pxCurrentTCB>
    2214:	80 91 eb 0d 	lds	r24, 0x0DEB	; 0x800deb <uxTaskNumber>
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <uxTaskNumber>
    221e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2220:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    2224:	8e 17       	cp	r24, r30
    2226:	10 f4       	brcc	.+4      	; 0x222c <__stack+0x2d>
    2228:	e0 93 f3 0d 	sts	0x0DF3, r30	; 0x800df3 <uxTopReadyPriority>
    222c:	8b e0       	ldi	r24, 0x0B	; 11
    222e:	8e 9f       	mul	r24, r30
    2230:	f0 01       	movw	r30, r0
    2232:	11 24       	eor	r1, r1
    2234:	eb 5c       	subi	r30, 0xCB	; 203
    2236:	f1 4f       	sbci	r31, 0xF1	; 241
    2238:	01 80       	ldd	r0, Z+1	; 0x01
    223a:	f2 81       	ldd	r31, Z+2	; 0x02
    223c:	e0 2d       	mov	r30, r0
    223e:	ff 83       	std	Y+7, r31	; 0x07
    2240:	ee 83       	std	Y+6, r30	; 0x06
    2242:	26 81       	ldd	r18, Z+6	; 0x06
    2244:	37 81       	ldd	r19, Z+7	; 0x07
    2246:	39 87       	std	Y+9, r19	; 0x09
    2248:	28 87       	std	Y+8, r18	; 0x08
    224a:	a6 81       	ldd	r26, Z+6	; 0x06
    224c:	b7 81       	ldd	r27, Z+7	; 0x07
    224e:	15 96       	adiw	r26, 0x05	; 5
    2250:	dc 92       	st	X, r13
    2252:	ce 92       	st	-X, r12
    2254:	14 97       	sbiw	r26, 0x04	; 4
    2256:	d7 82       	std	Z+7, r13	; 0x07
    2258:	c6 82       	std	Z+6, r12	; 0x06
    225a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    225c:	8e 9f       	mul	r24, r30
    225e:	f0 01       	movw	r30, r0
    2260:	11 24       	eor	r1, r1
    2262:	eb 5c       	subi	r30, 0xCB	; 203
    2264:	f1 4f       	sbci	r31, 0xF1	; 241
    2266:	fd 87       	std	Y+13, r31	; 0x0d
    2268:	ec 87       	std	Y+12, r30	; 0x0c
    226a:	80 81       	ld	r24, Z
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 83       	st	Z, r24
    2270:	0f 90       	pop	r0
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	80 91 f2 0d 	lds	r24, 0x0DF2	; 0x800df2 <xSchedulerRunning>
    2278:	88 23       	and	r24, r24
    227a:	59 f0       	breq	.+22     	; 0x2292 <__stack+0x93>
    227c:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2280:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2284:	92 8d       	ldd	r25, Z+26	; 0x1a
    2286:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2288:	98 17       	cp	r25, r24
    228a:	28 f4       	brcc	.+10     	; 0x2296 <__stack+0x97>
    228c:	dd d9       	rcall	.-3142   	; 0x1648 <vPortYield>
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	05 c0       	rjmp	.+10     	; 0x229c <__stack+0x9d>
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	03 c0       	rjmp	.+6      	; 0x229c <__stack+0x9d>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	01 c0       	rjmp	.+2      	; 0x229c <__stack+0x9d>
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	df 90       	pop	r13
    22aa:	cf 90       	pop	r12
    22ac:	bf 90       	pop	r11
    22ae:	af 90       	pop	r10
    22b0:	9f 90       	pop	r9
    22b2:	8f 90       	pop	r8
    22b4:	7f 90       	pop	r7
    22b6:	6f 90       	pop	r6
    22b8:	5f 90       	pop	r5
    22ba:	4f 90       	pop	r4
    22bc:	08 95       	ret

000022be <vTaskStartScheduler>:
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	0f 93       	push	r16
    22c4:	0f 2e       	mov	r0, r31
    22c6:	f5 ee       	ldi	r31, 0xE5	; 229
    22c8:	ef 2e       	mov	r14, r31
    22ca:	fd e0       	ldi	r31, 0x0D	; 13
    22cc:	ff 2e       	mov	r15, r31
    22ce:	f0 2d       	mov	r31, r0
    22d0:	00 e0       	ldi	r16, 0x00	; 0
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 ec       	ldi	r20, 0xC0	; 192
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	61 ed       	ldi	r22, 0xD1	; 209
    22dc:	73 e0       	ldi	r23, 0x03	; 3
    22de:	8e e0       	ldi	r24, 0x0E	; 14
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	c0 de       	rcall	.-640    	; 0x2064 <xTaskCreate>
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	d9 f4       	brne	.+54     	; 0x231e <vTaskStartScheduler+0x60>
    22e8:	26 d6       	rcall	.+3148   	; 0x2f36 <xTimerCreateTimerTask>
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	c1 f4       	brne	.+48     	; 0x231e <vTaskStartScheduler+0x60>
    22ee:	f8 94       	cli
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	9f ef       	ldi	r25, 0xFF	; 255
    22f4:	dc 01       	movw	r26, r24
    22f6:	80 93 e7 0d 	sts	0x0DE7, r24	; 0x800de7 <xNextTaskUnblockTime>
    22fa:	90 93 e8 0d 	sts	0x0DE8, r25	; 0x800de8 <xNextTaskUnblockTime+0x1>
    22fe:	a0 93 e9 0d 	sts	0x0DE9, r26	; 0x800de9 <xNextTaskUnblockTime+0x2>
    2302:	b0 93 ea 0d 	sts	0x0DEA, r27	; 0x800dea <xNextTaskUnblockTime+0x3>
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	80 93 f2 0d 	sts	0x0DF2, r24	; 0x800df2 <xSchedulerRunning>
    230c:	10 92 f4 0d 	sts	0x0DF4, r1	; 0x800df4 <xTickCount>
    2310:	10 92 f5 0d 	sts	0x0DF5, r1	; 0x800df5 <xTickCount+0x1>
    2314:	10 92 f6 0d 	sts	0x0DF6, r1	; 0x800df6 <xTickCount+0x2>
    2318:	10 92 f7 0d 	sts	0x0DF7, r1	; 0x800df7 <xTickCount+0x3>
    231c:	59 d9       	rcall	.-3406   	; 0x15d0 <xPortStartScheduler>
    231e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2322:	0f 91       	pop	r16
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	08 95       	ret

0000232a <vTaskSuspendAll>:
    232a:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	80 93 e4 0d 	sts	0x0DE4, r24	; 0x800de4 <uxSchedulerSuspended>
    2334:	08 95       	ret

00002336 <xTaskGetTickCount>:
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	0f 92       	push	r0
    233c:	60 91 f4 0d 	lds	r22, 0x0DF4	; 0x800df4 <xTickCount>
    2340:	70 91 f5 0d 	lds	r23, 0x0DF5	; 0x800df5 <xTickCount+0x1>
    2344:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <xTickCount+0x2>
    2348:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <xTickCount+0x3>
    234c:	0f 90       	pop	r0
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	08 95       	ret

00002352 <xTaskIncrementTick>:
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    2366:	81 11       	cpse	r24, r1
    2368:	07 c1       	rjmp	.+526    	; 0x2578 <xTaskIncrementTick+0x226>
    236a:	c0 90 f4 0d 	lds	r12, 0x0DF4	; 0x800df4 <xTickCount>
    236e:	d0 90 f5 0d 	lds	r13, 0x0DF5	; 0x800df5 <xTickCount+0x1>
    2372:	e0 90 f6 0d 	lds	r14, 0x0DF6	; 0x800df6 <xTickCount+0x2>
    2376:	f0 90 f7 0d 	lds	r15, 0x0DF7	; 0x800df7 <xTickCount+0x3>
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	c8 1a       	sub	r12, r24
    237e:	d8 0a       	sbc	r13, r24
    2380:	e8 0a       	sbc	r14, r24
    2382:	f8 0a       	sbc	r15, r24
    2384:	c0 92 f4 0d 	sts	0x0DF4, r12	; 0x800df4 <xTickCount>
    2388:	d0 92 f5 0d 	sts	0x0DF5, r13	; 0x800df5 <xTickCount+0x1>
    238c:	e0 92 f6 0d 	sts	0x0DF6, r14	; 0x800df6 <xTickCount+0x2>
    2390:	f0 92 f7 0d 	sts	0x0DF7, r15	; 0x800df7 <xTickCount+0x3>
    2394:	c1 14       	cp	r12, r1
    2396:	d1 04       	cpc	r13, r1
    2398:	e1 04       	cpc	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	b1 f4       	brne	.+44     	; 0x23ca <xTaskIncrementTick+0x78>
    239e:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxDelayedTaskList>
    23a2:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxDelayedTaskList+0x1>
    23a6:	20 91 1b 0e 	lds	r18, 0x0E1B	; 0x800e1b <pxOverflowDelayedTaskList>
    23aa:	30 91 1c 0e 	lds	r19, 0x0E1C	; 0x800e1c <pxOverflowDelayedTaskList+0x1>
    23ae:	30 93 1e 0e 	sts	0x0E1E, r19	; 0x800e1e <pxDelayedTaskList+0x1>
    23b2:	20 93 1d 0e 	sts	0x0E1D, r18	; 0x800e1d <pxDelayedTaskList>
    23b6:	90 93 1c 0e 	sts	0x0E1C, r25	; 0x800e1c <pxOverflowDelayedTaskList+0x1>
    23ba:	80 93 1b 0e 	sts	0x0E1B, r24	; 0x800e1b <pxOverflowDelayedTaskList>
    23be:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <xNumOfOverflows>
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <xNumOfOverflows>
    23c8:	87 dd       	rcall	.-1266   	; 0x1ed8 <prvResetNextTaskUnblockTime>
    23ca:	80 91 e7 0d 	lds	r24, 0x0DE7	; 0x800de7 <xNextTaskUnblockTime>
    23ce:	90 91 e8 0d 	lds	r25, 0x0DE8	; 0x800de8 <xNextTaskUnblockTime+0x1>
    23d2:	a0 91 e9 0d 	lds	r26, 0x0DE9	; 0x800de9 <xNextTaskUnblockTime+0x2>
    23d6:	b0 91 ea 0d 	lds	r27, 0x0DEA	; 0x800dea <xNextTaskUnblockTime+0x3>
    23da:	c8 16       	cp	r12, r24
    23dc:	d9 06       	cpc	r13, r25
    23de:	ea 06       	cpc	r14, r26
    23e0:	fb 06       	cpc	r15, r27
    23e2:	10 f4       	brcc	.+4      	; 0x23e8 <xTaskIncrementTick+0x96>
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	b3 c0       	rjmp	.+358    	; 0x254e <xTaskIncrementTick+0x1fc>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	4b e0       	ldi	r20, 0x0B	; 11
    23ec:	51 e0       	ldi	r21, 0x01	; 1
    23ee:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxDelayedTaskList>
    23f2:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxDelayedTaskList+0x1>
    23f6:	90 81       	ld	r25, Z
    23f8:	91 11       	cpse	r25, r1
    23fa:	0c c0       	rjmp	.+24     	; 0x2414 <xTaskIncrementTick+0xc2>
    23fc:	4f ef       	ldi	r20, 0xFF	; 255
    23fe:	5f ef       	ldi	r21, 0xFF	; 255
    2400:	ba 01       	movw	r22, r20
    2402:	40 93 e7 0d 	sts	0x0DE7, r20	; 0x800de7 <xNextTaskUnblockTime>
    2406:	50 93 e8 0d 	sts	0x0DE8, r21	; 0x800de8 <xNextTaskUnblockTime+0x1>
    240a:	60 93 e9 0d 	sts	0x0DE9, r22	; 0x800de9 <xNextTaskUnblockTime+0x2>
    240e:	70 93 ea 0d 	sts	0x0DEA, r23	; 0x800dea <xNextTaskUnblockTime+0x3>
    2412:	9d c0       	rjmp	.+314    	; 0x254e <xTaskIncrementTick+0x1fc>
    2414:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxDelayedTaskList>
    2418:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxDelayedTaskList+0x1>
    241c:	07 80       	ldd	r0, Z+7	; 0x07
    241e:	f0 85       	ldd	r31, Z+8	; 0x08
    2420:	e0 2d       	mov	r30, r0
    2422:	00 84       	ldd	r0, Z+8	; 0x08
    2424:	f1 85       	ldd	r31, Z+9	; 0x09
    2426:	e0 2d       	mov	r30, r0
    2428:	02 81       	ldd	r16, Z+2	; 0x02
    242a:	13 81       	ldd	r17, Z+3	; 0x03
    242c:	24 81       	ldd	r18, Z+4	; 0x04
    242e:	35 81       	ldd	r19, Z+5	; 0x05
    2430:	c0 16       	cp	r12, r16
    2432:	d1 06       	cpc	r13, r17
    2434:	e2 06       	cpc	r14, r18
    2436:	f3 06       	cpc	r15, r19
    2438:	48 f4       	brcc	.+18     	; 0x244c <xTaskIncrementTick+0xfa>
    243a:	00 93 e7 0d 	sts	0x0DE7, r16	; 0x800de7 <xNextTaskUnblockTime>
    243e:	10 93 e8 0d 	sts	0x0DE8, r17	; 0x800de8 <xNextTaskUnblockTime+0x1>
    2442:	20 93 e9 0d 	sts	0x0DE9, r18	; 0x800de9 <xNextTaskUnblockTime+0x2>
    2446:	30 93 ea 0d 	sts	0x0DEA, r19	; 0x800dea <xNextTaskUnblockTime+0x3>
    244a:	81 c0       	rjmp	.+258    	; 0x254e <xTaskIncrementTick+0x1fc>
    244c:	a4 85       	ldd	r26, Z+12	; 0x0c
    244e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2450:	c6 81       	ldd	r28, Z+6	; 0x06
    2452:	d7 81       	ldd	r29, Z+7	; 0x07
    2454:	20 85       	ldd	r18, Z+8	; 0x08
    2456:	31 85       	ldd	r19, Z+9	; 0x09
    2458:	3f 83       	std	Y+7, r19	; 0x07
    245a:	2e 83       	std	Y+6, r18	; 0x06
    245c:	c0 85       	ldd	r28, Z+8	; 0x08
    245e:	d1 85       	ldd	r29, Z+9	; 0x09
    2460:	26 81       	ldd	r18, Z+6	; 0x06
    2462:	37 81       	ldd	r19, Z+7	; 0x07
    2464:	3d 83       	std	Y+5, r19	; 0x05
    2466:	2c 83       	std	Y+4, r18	; 0x04
    2468:	9f 01       	movw	r18, r30
    246a:	2e 5f       	subi	r18, 0xFE	; 254
    246c:	3f 4f       	sbci	r19, 0xFF	; 255
    246e:	11 96       	adiw	r26, 0x01	; 1
    2470:	6d 91       	ld	r22, X+
    2472:	7c 91       	ld	r23, X
    2474:	12 97       	sbiw	r26, 0x02	; 2
    2476:	62 17       	cp	r22, r18
    2478:	73 07       	cpc	r23, r19
    247a:	31 f4       	brne	.+12     	; 0x2488 <xTaskIncrementTick+0x136>
    247c:	60 85       	ldd	r22, Z+8	; 0x08
    247e:	71 85       	ldd	r23, Z+9	; 0x09
    2480:	12 96       	adiw	r26, 0x02	; 2
    2482:	7c 93       	st	X, r23
    2484:	6e 93       	st	-X, r22
    2486:	11 97       	sbiw	r26, 0x01	; 1
    2488:	15 86       	std	Z+13, r1	; 0x0d
    248a:	14 86       	std	Z+12, r1	; 0x0c
    248c:	9c 91       	ld	r25, X
    248e:	91 50       	subi	r25, 0x01	; 1
    2490:	9c 93       	st	X, r25
    2492:	a0 8d       	ldd	r26, Z+24	; 0x18
    2494:	b1 8d       	ldd	r27, Z+25	; 0x19
    2496:	10 97       	sbiw	r26, 0x00	; 0
    2498:	09 f1       	breq	.+66     	; 0x24dc <xTaskIncrementTick+0x18a>
    249a:	c2 89       	ldd	r28, Z+18	; 0x12
    249c:	d3 89       	ldd	r29, Z+19	; 0x13
    249e:	64 89       	ldd	r22, Z+20	; 0x14
    24a0:	75 89       	ldd	r23, Z+21	; 0x15
    24a2:	7f 83       	std	Y+7, r23	; 0x07
    24a4:	6e 83       	std	Y+6, r22	; 0x06
    24a6:	c4 89       	ldd	r28, Z+20	; 0x14
    24a8:	d5 89       	ldd	r29, Z+21	; 0x15
    24aa:	62 89       	ldd	r22, Z+18	; 0x12
    24ac:	73 89       	ldd	r23, Z+19	; 0x13
    24ae:	7d 83       	std	Y+5, r23	; 0x05
    24b0:	6c 83       	std	Y+4, r22	; 0x04
    24b2:	11 96       	adiw	r26, 0x01	; 1
    24b4:	cd 91       	ld	r28, X+
    24b6:	dc 91       	ld	r29, X
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	bf 01       	movw	r22, r30
    24bc:	62 5f       	subi	r22, 0xF2	; 242
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	c6 17       	cp	r28, r22
    24c2:	d7 07       	cpc	r29, r23
    24c4:	31 f4       	brne	.+12     	; 0x24d2 <xTaskIncrementTick+0x180>
    24c6:	64 89       	ldd	r22, Z+20	; 0x14
    24c8:	75 89       	ldd	r23, Z+21	; 0x15
    24ca:	12 96       	adiw	r26, 0x02	; 2
    24cc:	7c 93       	st	X, r23
    24ce:	6e 93       	st	-X, r22
    24d0:	11 97       	sbiw	r26, 0x01	; 1
    24d2:	11 8e       	std	Z+25, r1	; 0x19
    24d4:	10 8e       	std	Z+24, r1	; 0x18
    24d6:	9c 91       	ld	r25, X
    24d8:	91 50       	subi	r25, 0x01	; 1
    24da:	9c 93       	st	X, r25
    24dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24de:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    24e2:	9a 17       	cp	r25, r26
    24e4:	10 f4       	brcc	.+4      	; 0x24ea <xTaskIncrementTick+0x198>
    24e6:	a0 93 f3 0d 	sts	0x0DF3, r26	; 0x800df3 <uxTopReadyPriority>
    24ea:	4a 9f       	mul	r20, r26
    24ec:	d0 01       	movw	r26, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	ab 5c       	subi	r26, 0xCB	; 203
    24f2:	b1 4f       	sbci	r27, 0xF1	; 241
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	0d 90       	ld	r0, X+
    24f8:	bc 91       	ld	r27, X
    24fa:	a0 2d       	mov	r26, r0
    24fc:	b7 83       	std	Z+7, r27	; 0x07
    24fe:	a6 83       	std	Z+6, r26	; 0x06
    2500:	16 96       	adiw	r26, 0x06	; 6
    2502:	6d 91       	ld	r22, X+
    2504:	7c 91       	ld	r23, X
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	71 87       	std	Z+9, r23	; 0x09
    250a:	60 87       	std	Z+8, r22	; 0x08
    250c:	16 96       	adiw	r26, 0x06	; 6
    250e:	cd 91       	ld	r28, X+
    2510:	dc 91       	ld	r29, X
    2512:	17 97       	sbiw	r26, 0x07	; 7
    2514:	3d 83       	std	Y+5, r19	; 0x05
    2516:	2c 83       	std	Y+4, r18	; 0x04
    2518:	17 96       	adiw	r26, 0x07	; 7
    251a:	3c 93       	st	X, r19
    251c:	2e 93       	st	-X, r18
    251e:	16 97       	sbiw	r26, 0x06	; 6
    2520:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2522:	4a 9f       	mul	r20, r26
    2524:	d0 01       	movw	r26, r0
    2526:	11 24       	eor	r1, r1
    2528:	ab 5c       	subi	r26, 0xCB	; 203
    252a:	b1 4f       	sbci	r27, 0xF1	; 241
    252c:	b5 87       	std	Z+13, r27	; 0x0d
    252e:	a4 87       	std	Z+12, r26	; 0x0c
    2530:	9c 91       	ld	r25, X
    2532:	9f 5f       	subi	r25, 0xFF	; 255
    2534:	9c 93       	st	X, r25
    2536:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    253a:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    253e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2540:	5a 96       	adiw	r26, 0x1a	; 26
    2542:	9c 91       	ld	r25, X
    2544:	29 17       	cp	r18, r25
    2546:	08 f4       	brcc	.+2      	; 0x254a <xTaskIncrementTick+0x1f8>
    2548:	52 cf       	rjmp	.-348    	; 0x23ee <xTaskIncrementTick+0x9c>
    254a:	85 2f       	mov	r24, r21
    254c:	50 cf       	rjmp	.-352    	; 0x23ee <xTaskIncrementTick+0x9c>
    254e:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2552:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2556:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2558:	9b e0       	ldi	r25, 0x0B	; 11
    255a:	e9 9f       	mul	r30, r25
    255c:	f0 01       	movw	r30, r0
    255e:	11 24       	eor	r1, r1
    2560:	eb 5c       	subi	r30, 0xCB	; 203
    2562:	f1 4f       	sbci	r31, 0xF1	; 241
    2564:	90 81       	ld	r25, Z
    2566:	92 30       	cpi	r25, 0x02	; 2
    2568:	08 f0       	brcs	.+2      	; 0x256c <xTaskIncrementTick+0x21a>
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <xYieldPending>
    2570:	99 23       	and	r25, r25
    2572:	b1 f0       	breq	.+44     	; 0x25a0 <xTaskIncrementTick+0x24e>
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <xTaskIncrementTick+0x24e>
    2578:	80 91 ee 0d 	lds	r24, 0x0DEE	; 0x800dee <xPendedTicks>
    257c:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <xPendedTicks+0x1>
    2580:	a0 91 f0 0d 	lds	r26, 0x0DF0	; 0x800df0 <xPendedTicks+0x2>
    2584:	b0 91 f1 0d 	lds	r27, 0x0DF1	; 0x800df1 <xPendedTicks+0x3>
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	a1 1d       	adc	r26, r1
    258c:	b1 1d       	adc	r27, r1
    258e:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <xPendedTicks>
    2592:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <xPendedTicks+0x1>
    2596:	a0 93 f0 0d 	sts	0x0DF0, r26	; 0x800df0 <xPendedTicks+0x2>
    259a:	b0 93 f1 0d 	sts	0x0DF1, r27	; 0x800df1 <xPendedTicks+0x3>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	ff 90       	pop	r15
    25aa:	ef 90       	pop	r14
    25ac:	df 90       	pop	r13
    25ae:	cf 90       	pop	r12
    25b0:	08 95       	ret

000025b2 <xTaskResumeAll>:
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	0f 92       	push	r0
    25c8:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    25cc:	81 50       	subi	r24, 0x01	; 1
    25ce:	80 93 e4 0d 	sts	0x0DE4, r24	; 0x800de4 <uxSchedulerSuspended>
    25d2:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    25d6:	81 11       	cpse	r24, r1
    25d8:	c4 c0       	rjmp	.+392    	; 0x2762 <xTaskResumeAll+0x1b0>
    25da:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <uxCurrentNumberOfTasks>
    25de:	81 11       	cpse	r24, r1
    25e0:	8b c0       	rjmp	.+278    	; 0x26f8 <xTaskResumeAll+0x146>
    25e2:	c2 c0       	rjmp	.+388    	; 0x2768 <xTaskResumeAll+0x1b6>
    25e4:	d8 01       	movw	r26, r16
    25e6:	17 96       	adiw	r26, 0x07	; 7
    25e8:	ed 91       	ld	r30, X+
    25ea:	fc 91       	ld	r31, X
    25ec:	18 97       	sbiw	r26, 0x08	; 8
    25ee:	00 84       	ldd	r0, Z+8	; 0x08
    25f0:	f1 85       	ldd	r31, Z+9	; 0x09
    25f2:	e0 2d       	mov	r30, r0
    25f4:	a0 8d       	ldd	r26, Z+24	; 0x18
    25f6:	b1 8d       	ldd	r27, Z+25	; 0x19
    25f8:	82 89       	ldd	r24, Z+18	; 0x12
    25fa:	93 89       	ldd	r25, Z+19	; 0x13
    25fc:	64 89       	ldd	r22, Z+20	; 0x14
    25fe:	75 89       	ldd	r23, Z+21	; 0x15
    2600:	ec 01       	movw	r28, r24
    2602:	7f 83       	std	Y+7, r23	; 0x07
    2604:	6e 83       	std	Y+6, r22	; 0x06
    2606:	84 89       	ldd	r24, Z+20	; 0x14
    2608:	95 89       	ldd	r25, Z+21	; 0x15
    260a:	62 89       	ldd	r22, Z+18	; 0x12
    260c:	73 89       	ldd	r23, Z+19	; 0x13
    260e:	ec 01       	movw	r28, r24
    2610:	7d 83       	std	Y+5, r23	; 0x05
    2612:	6c 83       	std	Y+4, r22	; 0x04
    2614:	cf 01       	movw	r24, r30
    2616:	0e 96       	adiw	r24, 0x0e	; 14
    2618:	11 96       	adiw	r26, 0x01	; 1
    261a:	6d 91       	ld	r22, X+
    261c:	7c 91       	ld	r23, X
    261e:	12 97       	sbiw	r26, 0x02	; 2
    2620:	68 17       	cp	r22, r24
    2622:	79 07       	cpc	r23, r25
    2624:	31 f4       	brne	.+12     	; 0x2632 <xTaskResumeAll+0x80>
    2626:	84 89       	ldd	r24, Z+20	; 0x14
    2628:	95 89       	ldd	r25, Z+21	; 0x15
    262a:	12 96       	adiw	r26, 0x02	; 2
    262c:	9c 93       	st	X, r25
    262e:	8e 93       	st	-X, r24
    2630:	11 97       	sbiw	r26, 0x01	; 1
    2632:	11 8e       	std	Z+25, r1	; 0x19
    2634:	10 8e       	std	Z+24, r1	; 0x18
    2636:	8c 91       	ld	r24, X
    2638:	81 50       	subi	r24, 0x01	; 1
    263a:	8c 93       	st	X, r24
    263c:	a4 85       	ldd	r26, Z+12	; 0x0c
    263e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2640:	86 81       	ldd	r24, Z+6	; 0x06
    2642:	97 81       	ldd	r25, Z+7	; 0x07
    2644:	60 85       	ldd	r22, Z+8	; 0x08
    2646:	71 85       	ldd	r23, Z+9	; 0x09
    2648:	ec 01       	movw	r28, r24
    264a:	7f 83       	std	Y+7, r23	; 0x07
    264c:	6e 83       	std	Y+6, r22	; 0x06
    264e:	80 85       	ldd	r24, Z+8	; 0x08
    2650:	91 85       	ldd	r25, Z+9	; 0x09
    2652:	66 81       	ldd	r22, Z+6	; 0x06
    2654:	77 81       	ldd	r23, Z+7	; 0x07
    2656:	ec 01       	movw	r28, r24
    2658:	7d 83       	std	Y+5, r23	; 0x05
    265a:	6c 83       	std	Y+4, r22	; 0x04
    265c:	cf 01       	movw	r24, r30
    265e:	02 96       	adiw	r24, 0x02	; 2
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	6d 91       	ld	r22, X+
    2664:	7c 91       	ld	r23, X
    2666:	12 97       	sbiw	r26, 0x02	; 2
    2668:	68 17       	cp	r22, r24
    266a:	79 07       	cpc	r23, r25
    266c:	31 f4       	brne	.+12     	; 0x267a <xTaskResumeAll+0xc8>
    266e:	60 85       	ldd	r22, Z+8	; 0x08
    2670:	71 85       	ldd	r23, Z+9	; 0x09
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	7c 93       	st	X, r23
    2676:	6e 93       	st	-X, r22
    2678:	11 97       	sbiw	r26, 0x01	; 1
    267a:	15 86       	std	Z+13, r1	; 0x0d
    267c:	14 86       	std	Z+12, r1	; 0x0c
    267e:	2c 91       	ld	r18, X
    2680:	21 50       	subi	r18, 0x01	; 1
    2682:	2c 93       	st	X, r18
    2684:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2686:	20 91 f3 0d 	lds	r18, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    268a:	2a 17       	cp	r18, r26
    268c:	10 f4       	brcc	.+4      	; 0x2692 <xTaskResumeAll+0xe0>
    268e:	a0 93 f3 0d 	sts	0x0DF3, r26	; 0x800df3 <uxTopReadyPriority>
    2692:	3a 9f       	mul	r19, r26
    2694:	d0 01       	movw	r26, r0
    2696:	11 24       	eor	r1, r1
    2698:	ab 5c       	subi	r26, 0xCB	; 203
    269a:	b1 4f       	sbci	r27, 0xF1	; 241
    269c:	11 96       	adiw	r26, 0x01	; 1
    269e:	0d 90       	ld	r0, X+
    26a0:	bc 91       	ld	r27, X
    26a2:	a0 2d       	mov	r26, r0
    26a4:	b7 83       	std	Z+7, r27	; 0x07
    26a6:	a6 83       	std	Z+6, r26	; 0x06
    26a8:	16 96       	adiw	r26, 0x06	; 6
    26aa:	6d 91       	ld	r22, X+
    26ac:	7c 91       	ld	r23, X
    26ae:	17 97       	sbiw	r26, 0x07	; 7
    26b0:	71 87       	std	Z+9, r23	; 0x09
    26b2:	60 87       	std	Z+8, r22	; 0x08
    26b4:	16 96       	adiw	r26, 0x06	; 6
    26b6:	6d 91       	ld	r22, X+
    26b8:	7c 91       	ld	r23, X
    26ba:	17 97       	sbiw	r26, 0x07	; 7
    26bc:	eb 01       	movw	r28, r22
    26be:	9d 83       	std	Y+5, r25	; 0x05
    26c0:	8c 83       	std	Y+4, r24	; 0x04
    26c2:	17 96       	adiw	r26, 0x07	; 7
    26c4:	9c 93       	st	X, r25
    26c6:	8e 93       	st	-X, r24
    26c8:	16 97       	sbiw	r26, 0x06	; 6
    26ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26cc:	3a 9f       	mul	r19, r26
    26ce:	d0 01       	movw	r26, r0
    26d0:	11 24       	eor	r1, r1
    26d2:	ab 5c       	subi	r26, 0xCB	; 203
    26d4:	b1 4f       	sbci	r27, 0xF1	; 241
    26d6:	b5 87       	std	Z+13, r27	; 0x0d
    26d8:	a4 87       	std	Z+12, r26	; 0x0c
    26da:	8c 91       	ld	r24, X
    26dc:	8f 5f       	subi	r24, 0xFF	; 255
    26de:	8c 93       	st	X, r24
    26e0:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    26e4:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    26e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    26ea:	5a 96       	adiw	r26, 0x1a	; 26
    26ec:	8c 91       	ld	r24, X
    26ee:	98 17       	cp	r25, r24
    26f0:	48 f0       	brcs	.+18     	; 0x2704 <xTaskResumeAll+0x152>
    26f2:	40 93 ed 0d 	sts	0x0DED, r20	; 0x800ded <xYieldPending>
    26f6:	06 c0       	rjmp	.+12     	; 0x2704 <xTaskResumeAll+0x152>
    26f8:	e0 e0       	ldi	r30, 0x00	; 0
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	00 e1       	ldi	r16, 0x10	; 16
    26fe:	1e e0       	ldi	r17, 0x0E	; 14
    2700:	3b e0       	ldi	r19, 0x0B	; 11
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	d8 01       	movw	r26, r16
    2706:	8c 91       	ld	r24, X
    2708:	81 11       	cpse	r24, r1
    270a:	6c cf       	rjmp	.-296    	; 0x25e4 <xTaskResumeAll+0x32>
    270c:	ef 2b       	or	r30, r31
    270e:	09 f0       	breq	.+2      	; 0x2712 <xTaskResumeAll+0x160>
    2710:	e3 db       	rcall	.-2106   	; 0x1ed8 <prvResetNextTaskUnblockTime>
    2712:	c0 90 ee 0d 	lds	r12, 0x0DEE	; 0x800dee <xPendedTicks>
    2716:	d0 90 ef 0d 	lds	r13, 0x0DEF	; 0x800def <xPendedTicks+0x1>
    271a:	e0 90 f0 0d 	lds	r14, 0x0DF0	; 0x800df0 <xPendedTicks+0x2>
    271e:	f0 90 f1 0d 	lds	r15, 0x0DF1	; 0x800df1 <xPendedTicks+0x3>
    2722:	c1 14       	cp	r12, r1
    2724:	d1 04       	cpc	r13, r1
    2726:	e1 04       	cpc	r14, r1
    2728:	f1 04       	cpc	r15, r1
    272a:	99 f0       	breq	.+38     	; 0x2752 <xTaskResumeAll+0x1a0>
    272c:	c1 e0       	ldi	r28, 0x01	; 1
    272e:	11 de       	rcall	.-990    	; 0x2352 <xTaskIncrementTick>
    2730:	81 11       	cpse	r24, r1
    2732:	c0 93 ed 0d 	sts	0x0DED, r28	; 0x800ded <xYieldPending>
    2736:	b1 e0       	ldi	r27, 0x01	; 1
    2738:	cb 1a       	sub	r12, r27
    273a:	d1 08       	sbc	r13, r1
    273c:	e1 08       	sbc	r14, r1
    273e:	f1 08       	sbc	r15, r1
    2740:	b1 f7       	brne	.-20     	; 0x272e <xTaskResumeAll+0x17c>
    2742:	10 92 ee 0d 	sts	0x0DEE, r1	; 0x800dee <xPendedTicks>
    2746:	10 92 ef 0d 	sts	0x0DEF, r1	; 0x800def <xPendedTicks+0x1>
    274a:	10 92 f0 0d 	sts	0x0DF0, r1	; 0x800df0 <xPendedTicks+0x2>
    274e:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <xPendedTicks+0x3>
    2752:	80 91 ed 0d 	lds	r24, 0x0DED	; 0x800ded <xYieldPending>
    2756:	88 23       	and	r24, r24
    2758:	31 f0       	breq	.+12     	; 0x2766 <xTaskResumeAll+0x1b4>
    275a:	0e 94 24 0b 	call	0x1648	; 0x1648 <vPortYield>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	03 c0       	rjmp	.+6      	; 0x2768 <xTaskResumeAll+0x1b6>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <xTaskResumeAll+0x1b6>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	08 95       	ret

0000277e <vTaskDelay>:
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	6b 01       	movw	r12, r22
    2788:	7c 01       	movw	r14, r24
    278a:	67 2b       	or	r22, r23
    278c:	68 2b       	or	r22, r24
    278e:	69 2b       	or	r22, r25
    2790:	41 f0       	breq	.+16     	; 0x27a2 <vTaskDelay+0x24>
    2792:	cb dd       	rcall	.-1130   	; 0x232a <vTaskSuspendAll>
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	c7 01       	movw	r24, r14
    2798:	b6 01       	movw	r22, r12
    279a:	c5 db       	rcall	.-2166   	; 0x1f26 <prvAddCurrentTaskToDelayedList>
    279c:	0a df       	rcall	.-492    	; 0x25b2 <xTaskResumeAll>
    279e:	81 11       	cpse	r24, r1
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <vTaskDelay+0x28>
    27a2:	0e 94 24 0b 	call	0x1648	; 0x1648 <vPortYield>
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	08 95       	ret

000027b0 <vTaskSwitchContext>:
    27b0:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    27b4:	88 23       	and	r24, r24
    27b6:	21 f0       	breq	.+8      	; 0x27c0 <vTaskSwitchContext+0x10>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <xYieldPending>
    27be:	08 95       	ret
    27c0:	10 92 ed 0d 	sts	0x0DED, r1	; 0x800ded <xYieldPending>
    27c4:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    27c8:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    27cc:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    27d0:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    27d4:	2d 91       	ld	r18, X+
    27d6:	3c 91       	ld	r19, X
    27d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    27da:	94 8d       	ldd	r25, Z+28	; 0x1c
    27dc:	82 17       	cp	r24, r18
    27de:	93 07       	cpc	r25, r19
    27e0:	58 f0       	brcs	.+22     	; 0x27f8 <vTaskSwitchContext+0x48>
    27e2:	60 91 a3 0e 	lds	r22, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    27e6:	70 91 a4 0e 	lds	r23, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    27ea:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    27ee:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    27f2:	63 5e       	subi	r22, 0xE3	; 227
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	c5 d4       	rcall	.+2442   	; 0x3182 <vApplicationStackOverflowHook>
    27f8:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	9b e0       	ldi	r25, 0x0B	; 11
    2802:	89 9f       	mul	r24, r25
    2804:	f0 01       	movw	r30, r0
    2806:	11 24       	eor	r1, r1
    2808:	eb 5c       	subi	r30, 0xCB	; 203
    280a:	f1 4f       	sbci	r31, 0xF1	; 241
    280c:	90 81       	ld	r25, Z
    280e:	91 11       	cpse	r25, r1
    2810:	0e c0       	rjmp	.+28     	; 0x282e <vTaskSwitchContext+0x7e>
    2812:	4b e0       	ldi	r20, 0x0B	; 11
    2814:	81 50       	subi	r24, 0x01	; 1
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	42 9f       	mul	r20, r18
    281c:	f0 01       	movw	r30, r0
    281e:	43 9f       	mul	r20, r19
    2820:	f0 0d       	add	r31, r0
    2822:	11 24       	eor	r1, r1
    2824:	eb 5c       	subi	r30, 0xCB	; 203
    2826:	f1 4f       	sbci	r31, 0xF1	; 241
    2828:	90 81       	ld	r25, Z
    282a:	99 23       	and	r25, r25
    282c:	99 f3       	breq	.-26     	; 0x2814 <vTaskSwitchContext+0x64>
    282e:	9b e0       	ldi	r25, 0x0B	; 11
    2830:	92 9f       	mul	r25, r18
    2832:	a0 01       	movw	r20, r0
    2834:	93 9f       	mul	r25, r19
    2836:	50 0d       	add	r21, r0
    2838:	11 24       	eor	r1, r1
    283a:	da 01       	movw	r26, r20
    283c:	ab 5c       	subi	r26, 0xCB	; 203
    283e:	b1 4f       	sbci	r27, 0xF1	; 241
    2840:	11 96       	adiw	r26, 0x01	; 1
    2842:	ed 91       	ld	r30, X+
    2844:	fc 91       	ld	r31, X
    2846:	12 97       	sbiw	r26, 0x02	; 2
    2848:	04 80       	ldd	r0, Z+4	; 0x04
    284a:	f5 81       	ldd	r31, Z+5	; 0x05
    284c:	e0 2d       	mov	r30, r0
    284e:	12 96       	adiw	r26, 0x02	; 2
    2850:	fc 93       	st	X, r31
    2852:	ee 93       	st	-X, r30
    2854:	11 97       	sbiw	r26, 0x01	; 1
    2856:	48 5c       	subi	r20, 0xC8	; 200
    2858:	51 4f       	sbci	r21, 0xF1	; 241
    285a:	e4 17       	cp	r30, r20
    285c:	f5 07       	cpc	r31, r21
    285e:	29 f4       	brne	.+10     	; 0x286a <vTaskSwitchContext+0xba>
    2860:	44 81       	ldd	r20, Z+4	; 0x04
    2862:	55 81       	ldd	r21, Z+5	; 0x05
    2864:	fd 01       	movw	r30, r26
    2866:	52 83       	std	Z+2, r21	; 0x02
    2868:	41 83       	std	Z+1, r20	; 0x01
    286a:	9b e0       	ldi	r25, 0x0B	; 11
    286c:	92 9f       	mul	r25, r18
    286e:	f0 01       	movw	r30, r0
    2870:	93 9f       	mul	r25, r19
    2872:	f0 0d       	add	r31, r0
    2874:	11 24       	eor	r1, r1
    2876:	eb 5c       	subi	r30, 0xCB	; 203
    2878:	f1 4f       	sbci	r31, 0xF1	; 241
    287a:	01 80       	ldd	r0, Z+1	; 0x01
    287c:	f2 81       	ldd	r31, Z+2	; 0x02
    287e:	e0 2d       	mov	r30, r0
    2880:	20 85       	ldd	r18, Z+8	; 0x08
    2882:	31 85       	ldd	r19, Z+9	; 0x09
    2884:	30 93 a4 0e 	sts	0x0EA4, r19	; 0x800ea4 <pxCurrentTCB+0x1>
    2888:	20 93 a3 0e 	sts	0x0EA3, r18	; 0x800ea3 <pxCurrentTCB>
    288c:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <uxTopReadyPriority>
    2890:	08 95       	ret

00002892 <vTaskPlaceOnEventList>:
    2892:	cf 92       	push	r12
    2894:	df 92       	push	r13
    2896:	ef 92       	push	r14
    2898:	ff 92       	push	r15
    289a:	6a 01       	movw	r12, r20
    289c:	7b 01       	movw	r14, r22
    289e:	60 91 a3 0e 	lds	r22, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    28a2:	70 91 a4 0e 	lds	r23, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    28a6:	62 5f       	subi	r22, 0xF2	; 242
    28a8:	7f 4f       	sbci	r23, 0xFF	; 255
    28aa:	0e 94 6d 0a 	call	0x14da	; 0x14da <vListInsert>
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	c7 01       	movw	r24, r14
    28b2:	b6 01       	movw	r22, r12
    28b4:	38 db       	rcall	.-2448   	; 0x1f26 <prvAddCurrentTaskToDelayedList>
    28b6:	ff 90       	pop	r15
    28b8:	ef 90       	pop	r14
    28ba:	df 90       	pop	r13
    28bc:	cf 90       	pop	r12
    28be:	08 95       	ret

000028c0 <vTaskPlaceOnEventListRestricted>:
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	fc 01       	movw	r30, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	ba 01       	movw	r22, r20
    28ca:	a1 81       	ldd	r26, Z+1	; 0x01
    28cc:	b2 81       	ldd	r27, Z+2	; 0x02
    28ce:	c0 91 a3 0e 	lds	r28, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    28d2:	d0 91 a4 0e 	lds	r29, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    28d6:	bb 8b       	std	Y+19, r27	; 0x13
    28d8:	aa 8b       	std	Y+18, r26	; 0x12
    28da:	c0 91 a3 0e 	lds	r28, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    28de:	d0 91 a4 0e 	lds	r29, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    28e2:	16 96       	adiw	r26, 0x06	; 6
    28e4:	4d 91       	ld	r20, X+
    28e6:	5c 91       	ld	r21, X
    28e8:	17 97       	sbiw	r26, 0x07	; 7
    28ea:	5d 8b       	std	Y+21, r21	; 0x15
    28ec:	4c 8b       	std	Y+20, r20	; 0x14
    28ee:	16 96       	adiw	r26, 0x06	; 6
    28f0:	cd 91       	ld	r28, X+
    28f2:	dc 91       	ld	r29, X
    28f4:	17 97       	sbiw	r26, 0x07	; 7
    28f6:	40 91 a3 0e 	lds	r20, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    28fa:	50 91 a4 0e 	lds	r21, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    28fe:	42 5f       	subi	r20, 0xF2	; 242
    2900:	5f 4f       	sbci	r21, 0xFF	; 255
    2902:	5d 83       	std	Y+5, r21	; 0x05
    2904:	4c 83       	std	Y+4, r20	; 0x04
    2906:	40 91 a3 0e 	lds	r20, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    290a:	50 91 a4 0e 	lds	r21, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    290e:	42 5f       	subi	r20, 0xF2	; 242
    2910:	5f 4f       	sbci	r21, 0xFF	; 255
    2912:	17 96       	adiw	r26, 0x07	; 7
    2914:	5c 93       	st	X, r21
    2916:	4e 93       	st	-X, r20
    2918:	16 97       	sbiw	r26, 0x06	; 6
    291a:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    291e:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2922:	59 96       	adiw	r26, 0x19	; 25
    2924:	fc 93       	st	X, r31
    2926:	ee 93       	st	-X, r30
    2928:	58 97       	sbiw	r26, 0x18	; 24
    292a:	30 81       	ld	r19, Z
    292c:	3f 5f       	subi	r19, 0xFF	; 255
    292e:	30 83       	st	Z, r19
    2930:	22 23       	and	r18, r18
    2932:	19 f0       	breq	.+6      	; 0x293a <vTaskPlaceOnEventListRestricted+0x7a>
    2934:	6f ef       	ldi	r22, 0xFF	; 255
    2936:	7f ef       	ldi	r23, 0xFF	; 255
    2938:	cb 01       	movw	r24, r22
    293a:	42 2f       	mov	r20, r18
    293c:	f4 da       	rcall	.-2584   	; 0x1f26 <prvAddCurrentTaskToDelayedList>
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <xTaskRemoveFromEventList>:
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	dc 01       	movw	r26, r24
    294a:	17 96       	adiw	r26, 0x07	; 7
    294c:	ed 91       	ld	r30, X+
    294e:	fc 91       	ld	r31, X
    2950:	18 97       	sbiw	r26, 0x08	; 8
    2952:	00 84       	ldd	r0, Z+8	; 0x08
    2954:	f1 85       	ldd	r31, Z+9	; 0x09
    2956:	e0 2d       	mov	r30, r0
    2958:	a0 8d       	ldd	r26, Z+24	; 0x18
    295a:	b1 8d       	ldd	r27, Z+25	; 0x19
    295c:	c2 89       	ldd	r28, Z+18	; 0x12
    295e:	d3 89       	ldd	r29, Z+19	; 0x13
    2960:	84 89       	ldd	r24, Z+20	; 0x14
    2962:	95 89       	ldd	r25, Z+21	; 0x15
    2964:	9f 83       	std	Y+7, r25	; 0x07
    2966:	8e 83       	std	Y+6, r24	; 0x06
    2968:	c4 89       	ldd	r28, Z+20	; 0x14
    296a:	d5 89       	ldd	r29, Z+21	; 0x15
    296c:	82 89       	ldd	r24, Z+18	; 0x12
    296e:	93 89       	ldd	r25, Z+19	; 0x13
    2970:	9d 83       	std	Y+5, r25	; 0x05
    2972:	8c 83       	std	Y+4, r24	; 0x04
    2974:	9f 01       	movw	r18, r30
    2976:	22 5f       	subi	r18, 0xF2	; 242
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	11 96       	adiw	r26, 0x01	; 1
    297c:	8d 91       	ld	r24, X+
    297e:	9c 91       	ld	r25, X
    2980:	12 97       	sbiw	r26, 0x02	; 2
    2982:	82 17       	cp	r24, r18
    2984:	93 07       	cpc	r25, r19
    2986:	31 f4       	brne	.+12     	; 0x2994 <xTaskRemoveFromEventList+0x50>
    2988:	84 89       	ldd	r24, Z+20	; 0x14
    298a:	95 89       	ldd	r25, Z+21	; 0x15
    298c:	12 96       	adiw	r26, 0x02	; 2
    298e:	9c 93       	st	X, r25
    2990:	8e 93       	st	-X, r24
    2992:	11 97       	sbiw	r26, 0x01	; 1
    2994:	11 8e       	std	Z+25, r1	; 0x19
    2996:	10 8e       	std	Z+24, r1	; 0x18
    2998:	8c 91       	ld	r24, X
    299a:	81 50       	subi	r24, 0x01	; 1
    299c:	8c 93       	st	X, r24
    299e:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    29a2:	81 11       	cpse	r24, r1
    29a4:	52 c0       	rjmp	.+164    	; 0x2a4a <xTaskRemoveFromEventList+0x106>
    29a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    29a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    29aa:	c6 81       	ldd	r28, Z+6	; 0x06
    29ac:	d7 81       	ldd	r29, Z+7	; 0x07
    29ae:	80 85       	ldd	r24, Z+8	; 0x08
    29b0:	91 85       	ldd	r25, Z+9	; 0x09
    29b2:	9f 83       	std	Y+7, r25	; 0x07
    29b4:	8e 83       	std	Y+6, r24	; 0x06
    29b6:	c0 85       	ldd	r28, Z+8	; 0x08
    29b8:	d1 85       	ldd	r29, Z+9	; 0x09
    29ba:	86 81       	ldd	r24, Z+6	; 0x06
    29bc:	97 81       	ldd	r25, Z+7	; 0x07
    29be:	9d 83       	std	Y+5, r25	; 0x05
    29c0:	8c 83       	std	Y+4, r24	; 0x04
    29c2:	9f 01       	movw	r18, r30
    29c4:	2e 5f       	subi	r18, 0xFE	; 254
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	11 96       	adiw	r26, 0x01	; 1
    29ca:	8d 91       	ld	r24, X+
    29cc:	9c 91       	ld	r25, X
    29ce:	12 97       	sbiw	r26, 0x02	; 2
    29d0:	82 17       	cp	r24, r18
    29d2:	93 07       	cpc	r25, r19
    29d4:	31 f4       	brne	.+12     	; 0x29e2 <xTaskRemoveFromEventList+0x9e>
    29d6:	80 85       	ldd	r24, Z+8	; 0x08
    29d8:	91 85       	ldd	r25, Z+9	; 0x09
    29da:	12 96       	adiw	r26, 0x02	; 2
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
    29e0:	11 97       	sbiw	r26, 0x01	; 1
    29e2:	15 86       	std	Z+13, r1	; 0x0d
    29e4:	14 86       	std	Z+12, r1	; 0x0c
    29e6:	8c 91       	ld	r24, X
    29e8:	81 50       	subi	r24, 0x01	; 1
    29ea:	8c 93       	st	X, r24
    29ec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29ee:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    29f2:	8a 17       	cp	r24, r26
    29f4:	10 f4       	brcc	.+4      	; 0x29fa <xTaskRemoveFromEventList+0xb6>
    29f6:	a0 93 f3 0d 	sts	0x0DF3, r26	; 0x800df3 <uxTopReadyPriority>
    29fa:	8b e0       	ldi	r24, 0x0B	; 11
    29fc:	8a 9f       	mul	r24, r26
    29fe:	d0 01       	movw	r26, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	ab 5c       	subi	r26, 0xCB	; 203
    2a04:	b1 4f       	sbci	r27, 0xF1	; 241
    2a06:	11 96       	adiw	r26, 0x01	; 1
    2a08:	0d 90       	ld	r0, X+
    2a0a:	bc 91       	ld	r27, X
    2a0c:	a0 2d       	mov	r26, r0
    2a0e:	b7 83       	std	Z+7, r27	; 0x07
    2a10:	a6 83       	std	Z+6, r26	; 0x06
    2a12:	16 96       	adiw	r26, 0x06	; 6
    2a14:	4d 91       	ld	r20, X+
    2a16:	5c 91       	ld	r21, X
    2a18:	17 97       	sbiw	r26, 0x07	; 7
    2a1a:	51 87       	std	Z+9, r21	; 0x09
    2a1c:	40 87       	std	Z+8, r20	; 0x08
    2a1e:	16 96       	adiw	r26, 0x06	; 6
    2a20:	cd 91       	ld	r28, X+
    2a22:	dc 91       	ld	r29, X
    2a24:	17 97       	sbiw	r26, 0x07	; 7
    2a26:	3d 83       	std	Y+5, r19	; 0x05
    2a28:	2c 83       	std	Y+4, r18	; 0x04
    2a2a:	17 96       	adiw	r26, 0x07	; 7
    2a2c:	3c 93       	st	X, r19
    2a2e:	2e 93       	st	-X, r18
    2a30:	16 97       	sbiw	r26, 0x06	; 6
    2a32:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a34:	8a 9f       	mul	r24, r26
    2a36:	d0 01       	movw	r26, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	ab 5c       	subi	r26, 0xCB	; 203
    2a3c:	b1 4f       	sbci	r27, 0xF1	; 241
    2a3e:	b5 87       	std	Z+13, r27	; 0x0d
    2a40:	a4 87       	std	Z+12, r26	; 0x0c
    2a42:	8c 91       	ld	r24, X
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8c 93       	st	X, r24
    2a48:	1c c0       	rjmp	.+56     	; 0x2a82 <xTaskRemoveFromEventList+0x13e>
    2a4a:	40 e1       	ldi	r20, 0x10	; 16
    2a4c:	5e e0       	ldi	r21, 0x0E	; 14
    2a4e:	da 01       	movw	r26, r20
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	cd 91       	ld	r28, X+
    2a54:	dc 91       	ld	r29, X
    2a56:	12 97       	sbiw	r26, 0x02	; 2
    2a58:	d3 8b       	std	Z+19, r29	; 0x13
    2a5a:	c2 8b       	std	Z+18, r28	; 0x12
    2a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a60:	95 8b       	std	Z+21, r25	; 0x15
    2a62:	84 8b       	std	Z+20, r24	; 0x14
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	9f 81       	ldd	r25, Y+7	; 0x07
    2a68:	dc 01       	movw	r26, r24
    2a6a:	15 96       	adiw	r26, 0x05	; 5
    2a6c:	3c 93       	st	X, r19
    2a6e:	2e 93       	st	-X, r18
    2a70:	14 97       	sbiw	r26, 0x04	; 4
    2a72:	3f 83       	std	Y+7, r19	; 0x07
    2a74:	2e 83       	std	Y+6, r18	; 0x06
    2a76:	51 8f       	std	Z+25, r21	; 0x19
    2a78:	40 8f       	std	Z+24, r20	; 0x18
    2a7a:	da 01       	movw	r26, r20
    2a7c:	8c 91       	ld	r24, X
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	8c 93       	st	X, r24
    2a82:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2a86:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2a8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a8c:	5a 96       	adiw	r26, 0x1a	; 26
    2a8e:	8c 91       	ld	r24, X
    2a90:	89 17       	cp	r24, r25
    2a92:	20 f4       	brcc	.+8      	; 0x2a9c <xTaskRemoveFromEventList+0x158>
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <xYieldPending>
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <xTaskRemoveFromEventList+0x15a>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	08 95       	ret

00002aa4 <vTaskInternalSetTimeOutState>:
    2aa4:	20 91 ec 0d 	lds	r18, 0x0DEC	; 0x800dec <xNumOfOverflows>
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	20 83       	st	Z, r18
    2aac:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <xTickCount>
    2ab0:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <xTickCount+0x1>
    2ab4:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <xTickCount+0x2>
    2ab8:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <xTickCount+0x3>
    2abc:	41 83       	std	Z+1, r20	; 0x01
    2abe:	52 83       	std	Z+2, r21	; 0x02
    2ac0:	63 83       	std	Z+3, r22	; 0x03
    2ac2:	74 83       	std	Z+4, r23	; 0x04
    2ac4:	08 95       	ret

00002ac6 <xTaskCheckForTimeOut>:
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	fb 01       	movw	r30, r22
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	0f 92       	push	r0
    2ade:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <xTickCount>
    2ae2:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <xTickCount+0x1>
    2ae6:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <xTickCount+0x2>
    2aea:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <xTickCount+0x3>
    2aee:	00 81       	ld	r16, Z
    2af0:	11 81       	ldd	r17, Z+1	; 0x01
    2af2:	22 81       	ldd	r18, Z+2	; 0x02
    2af4:	33 81       	ldd	r19, Z+3	; 0x03
    2af6:	0f 3f       	cpi	r16, 0xFF	; 255
    2af8:	af ef       	ldi	r26, 0xFF	; 255
    2afa:	1a 07       	cpc	r17, r26
    2afc:	2a 07       	cpc	r18, r26
    2afe:	3a 07       	cpc	r19, r26
    2b00:	79 f1       	breq	.+94     	; 0x2b60 <xTaskCheckForTimeOut+0x9a>
    2b02:	ec 01       	movw	r28, r24
    2b04:	c9 80       	ldd	r12, Y+1	; 0x01
    2b06:	da 80       	ldd	r13, Y+2	; 0x02
    2b08:	eb 80       	ldd	r14, Y+3	; 0x03
    2b0a:	fc 80       	ldd	r15, Y+4	; 0x04
    2b0c:	a0 91 ec 0d 	lds	r26, 0x0DEC	; 0x800dec <xNumOfOverflows>
    2b10:	b8 81       	ld	r27, Y
    2b12:	ba 17       	cp	r27, r26
    2b14:	59 f0       	breq	.+22     	; 0x2b2c <xTaskCheckForTimeOut+0x66>
    2b16:	4c 15       	cp	r20, r12
    2b18:	5d 05       	cpc	r21, r13
    2b1a:	6e 05       	cpc	r22, r14
    2b1c:	7f 05       	cpc	r23, r15
    2b1e:	30 f0       	brcs	.+12     	; 0x2b2c <xTaskCheckForTimeOut+0x66>
    2b20:	10 82       	st	Z, r1
    2b22:	11 82       	std	Z+1, r1	; 0x01
    2b24:	12 82       	std	Z+2, r1	; 0x02
    2b26:	13 82       	std	Z+3, r1	; 0x03
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	1b c0       	rjmp	.+54     	; 0x2b62 <xTaskCheckForTimeOut+0x9c>
    2b2c:	4c 19       	sub	r20, r12
    2b2e:	5d 09       	sbc	r21, r13
    2b30:	6e 09       	sbc	r22, r14
    2b32:	7f 09       	sbc	r23, r15
    2b34:	40 17       	cp	r20, r16
    2b36:	51 07       	cpc	r21, r17
    2b38:	62 07       	cpc	r22, r18
    2b3a:	73 07       	cpc	r23, r19
    2b3c:	58 f4       	brcc	.+22     	; 0x2b54 <xTaskCheckForTimeOut+0x8e>
    2b3e:	04 1b       	sub	r16, r20
    2b40:	15 0b       	sbc	r17, r21
    2b42:	26 0b       	sbc	r18, r22
    2b44:	37 0b       	sbc	r19, r23
    2b46:	00 83       	st	Z, r16
    2b48:	11 83       	std	Z+1, r17	; 0x01
    2b4a:	22 83       	std	Z+2, r18	; 0x02
    2b4c:	33 83       	std	Z+3, r19	; 0x03
    2b4e:	aa df       	rcall	.-172    	; 0x2aa4 <vTaskInternalSetTimeOutState>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	07 c0       	rjmp	.+14     	; 0x2b62 <xTaskCheckForTimeOut+0x9c>
    2b54:	10 82       	st	Z, r1
    2b56:	11 82       	std	Z+1, r1	; 0x01
    2b58:	12 82       	std	Z+2, r1	; 0x02
    2b5a:	13 82       	std	Z+3, r1	; 0x03
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <xTaskCheckForTimeOut+0x9c>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	0f 90       	pop	r0
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    2b76:	08 95       	ret

00002b78 <vTaskMissedYield>:
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <xYieldPending>
    2b7e:	08 95       	ret

00002b80 <xTaskGetSchedulerState>:
    2b80:	80 91 f2 0d 	lds	r24, 0x0DF2	; 0x800df2 <xSchedulerRunning>
    2b84:	88 23       	and	r24, r24
    2b86:	31 f0       	breq	.+12     	; 0x2b94 <xTaskGetSchedulerState+0x14>
    2b88:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <uxSchedulerSuspended>
    2b8c:	88 23       	and	r24, r24
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <xTaskGetSchedulerState+0x18>
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	08 95       	ret
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	08 95       	ret
    2b98:	82 e0       	ldi	r24, 0x02	; 2
    2b9a:	08 95       	ret

00002b9c <xTaskPriorityInherit>:
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	89 2b       	or	r24, r25
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <xTaskPriorityInherit+0x10>
    2baa:	79 c0       	rjmp	.+242    	; 0x2c9e <xTaskPriorityInherit+0x102>
    2bac:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bae:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2bb2:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2bb6:	5a 96       	adiw	r26, 0x1a	; 26
    2bb8:	9c 91       	ld	r25, X
    2bba:	89 17       	cp	r24, r25
    2bbc:	08 f0       	brcs	.+2      	; 0x2bc0 <xTaskPriorityInherit+0x24>
    2bbe:	63 c0       	rjmp	.+198    	; 0x2c86 <xTaskPriorityInherit+0xea>
    2bc0:	46 85       	ldd	r20, Z+14	; 0x0e
    2bc2:	57 85       	ldd	r21, Z+15	; 0x0f
    2bc4:	60 89       	ldd	r22, Z+16	; 0x10
    2bc6:	71 89       	ldd	r23, Z+17	; 0x11
    2bc8:	77 23       	and	r23, r23
    2bca:	94 f0       	brlt	.+36     	; 0x2bf0 <xTaskPriorityInherit+0x54>
    2bcc:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2bd0:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2bd4:	5a 96       	adiw	r26, 0x1a	; 26
    2bd6:	9c 91       	ld	r25, X
    2bd8:	4a e0       	ldi	r20, 0x0A	; 10
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	49 1b       	sub	r20, r25
    2be2:	51 09       	sbc	r21, r1
    2be4:	61 09       	sbc	r22, r1
    2be6:	71 09       	sbc	r23, r1
    2be8:	46 87       	std	Z+14, r20	; 0x0e
    2bea:	57 87       	std	Z+15, r21	; 0x0f
    2bec:	60 8b       	std	Z+16, r22	; 0x10
    2bee:	71 8b       	std	Z+17, r23	; 0x11
    2bf0:	2b e0       	ldi	r18, 0x0B	; 11
    2bf2:	82 9f       	mul	r24, r18
    2bf4:	c0 01       	movw	r24, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	8b 5c       	subi	r24, 0xCB	; 203
    2bfa:	91 4f       	sbci	r25, 0xF1	; 241
    2bfc:	24 85       	ldd	r18, Z+12	; 0x0c
    2bfe:	35 85       	ldd	r19, Z+13	; 0x0d
    2c00:	28 17       	cp	r18, r24
    2c02:	39 07       	cpc	r19, r25
    2c04:	b9 f5       	brne	.+110    	; 0x2c74 <xTaskPriorityInherit+0xd8>
    2c06:	ef 01       	movw	r28, r30
    2c08:	8f 01       	movw	r16, r30
    2c0a:	0e 5f       	subi	r16, 0xFE	; 254
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	c8 01       	movw	r24, r16
    2c10:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
    2c14:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2c18:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2c1c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c1e:	ea 8f       	std	Y+26, r30	; 0x1a
    2c20:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    2c24:	8e 17       	cp	r24, r30
    2c26:	10 f4       	brcc	.+4      	; 0x2c2c <xTaskPriorityInherit+0x90>
    2c28:	e0 93 f3 0d 	sts	0x0DF3, r30	; 0x800df3 <uxTopReadyPriority>
    2c2c:	8b e0       	ldi	r24, 0x0B	; 11
    2c2e:	8e 9f       	mul	r24, r30
    2c30:	f0 01       	movw	r30, r0
    2c32:	11 24       	eor	r1, r1
    2c34:	eb 5c       	subi	r30, 0xCB	; 203
    2c36:	f1 4f       	sbci	r31, 0xF1	; 241
    2c38:	01 80       	ldd	r0, Z+1	; 0x01
    2c3a:	f2 81       	ldd	r31, Z+2	; 0x02
    2c3c:	e0 2d       	mov	r30, r0
    2c3e:	ff 83       	std	Y+7, r31	; 0x07
    2c40:	ee 83       	std	Y+6, r30	; 0x06
    2c42:	26 81       	ldd	r18, Z+6	; 0x06
    2c44:	37 81       	ldd	r19, Z+7	; 0x07
    2c46:	39 87       	std	Y+9, r19	; 0x09
    2c48:	28 87       	std	Y+8, r18	; 0x08
    2c4a:	a6 81       	ldd	r26, Z+6	; 0x06
    2c4c:	b7 81       	ldd	r27, Z+7	; 0x07
    2c4e:	15 96       	adiw	r26, 0x05	; 5
    2c50:	1c 93       	st	X, r17
    2c52:	0e 93       	st	-X, r16
    2c54:	14 97       	sbiw	r26, 0x04	; 4
    2c56:	17 83       	std	Z+7, r17	; 0x07
    2c58:	06 83       	std	Z+6, r16	; 0x06
    2c5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c5c:	8e 9f       	mul	r24, r30
    2c5e:	f0 01       	movw	r30, r0
    2c60:	11 24       	eor	r1, r1
    2c62:	eb 5c       	subi	r30, 0xCB	; 203
    2c64:	f1 4f       	sbci	r31, 0xF1	; 241
    2c66:	fd 87       	std	Y+13, r31	; 0x0d
    2c68:	ec 87       	std	Y+12, r30	; 0x0c
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	80 83       	st	Z, r24
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	16 c0       	rjmp	.+44     	; 0x2ca0 <xTaskPriorityInherit+0x104>
    2c74:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2c78:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2c7c:	5a 96       	adiw	r26, 0x1a	; 26
    2c7e:	8c 91       	ld	r24, X
    2c80:	82 8f       	std	Z+26, r24	; 0x1a
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	0d c0       	rjmp	.+26     	; 0x2ca0 <xTaskPriorityInherit+0x104>
    2c86:	a0 91 a3 0e 	lds	r26, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2c8a:	b0 91 a4 0e 	lds	r27, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	25 a5       	ldd	r18, Z+45	; 0x2d
    2c92:	5a 96       	adiw	r26, 0x1a	; 26
    2c94:	9c 91       	ld	r25, X
    2c96:	29 17       	cp	r18, r25
    2c98:	18 f0       	brcs	.+6      	; 0x2ca0 <xTaskPriorityInherit+0x104>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <xTaskPriorityInherit+0x104>
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	08 95       	ret

00002caa <xTaskPriorityDisinherit>:
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	89 2b       	or	r24, r25
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <xTaskPriorityDisinherit+0x10>
    2cb8:	49 c0       	rjmp	.+146    	; 0x2d4c <xTaskPriorityDisinherit+0xa2>
    2cba:	86 a5       	ldd	r24, Z+46	; 0x2e
    2cbc:	81 50       	subi	r24, 0x01	; 1
    2cbe:	86 a7       	std	Z+46, r24	; 0x2e
    2cc0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cc2:	95 a5       	ldd	r25, Z+45	; 0x2d
    2cc4:	29 17       	cp	r18, r25
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <xTaskPriorityDisinherit+0x20>
    2cc8:	43 c0       	rjmp	.+134    	; 0x2d50 <xTaskPriorityDisinherit+0xa6>
    2cca:	81 11       	cpse	r24, r1
    2ccc:	43 c0       	rjmp	.+134    	; 0x2d54 <xTaskPriorityDisinherit+0xaa>
    2cce:	ef 01       	movw	r28, r30
    2cd0:	8f 01       	movw	r16, r30
    2cd2:	0e 5f       	subi	r16, 0xFE	; 254
    2cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
    2cdc:	ed a5       	ldd	r30, Y+45	; 0x2d
    2cde:	ea 8f       	std	Y+26, r30	; 0x1a
    2ce0:	8a e0       	ldi	r24, 0x0A	; 10
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a0 e0       	ldi	r26, 0x00	; 0
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	8e 1b       	sub	r24, r30
    2cea:	91 09       	sbc	r25, r1
    2cec:	a1 09       	sbc	r26, r1
    2cee:	b1 09       	sbc	r27, r1
    2cf0:	8e 87       	std	Y+14, r24	; 0x0e
    2cf2:	9f 87       	std	Y+15, r25	; 0x0f
    2cf4:	a8 8b       	std	Y+16, r26	; 0x10
    2cf6:	b9 8b       	std	Y+17, r27	; 0x11
    2cf8:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    2cfc:	8e 17       	cp	r24, r30
    2cfe:	10 f4       	brcc	.+4      	; 0x2d04 <xTaskPriorityDisinherit+0x5a>
    2d00:	e0 93 f3 0d 	sts	0x0DF3, r30	; 0x800df3 <uxTopReadyPriority>
    2d04:	8b e0       	ldi	r24, 0x0B	; 11
    2d06:	8e 9f       	mul	r24, r30
    2d08:	f0 01       	movw	r30, r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	eb 5c       	subi	r30, 0xCB	; 203
    2d0e:	f1 4f       	sbci	r31, 0xF1	; 241
    2d10:	01 80       	ldd	r0, Z+1	; 0x01
    2d12:	f2 81       	ldd	r31, Z+2	; 0x02
    2d14:	e0 2d       	mov	r30, r0
    2d16:	ff 83       	std	Y+7, r31	; 0x07
    2d18:	ee 83       	std	Y+6, r30	; 0x06
    2d1a:	26 81       	ldd	r18, Z+6	; 0x06
    2d1c:	37 81       	ldd	r19, Z+7	; 0x07
    2d1e:	39 87       	std	Y+9, r19	; 0x09
    2d20:	28 87       	std	Y+8, r18	; 0x08
    2d22:	a6 81       	ldd	r26, Z+6	; 0x06
    2d24:	b7 81       	ldd	r27, Z+7	; 0x07
    2d26:	15 96       	adiw	r26, 0x05	; 5
    2d28:	1c 93       	st	X, r17
    2d2a:	0e 93       	st	-X, r16
    2d2c:	14 97       	sbiw	r26, 0x04	; 4
    2d2e:	17 83       	std	Z+7, r17	; 0x07
    2d30:	06 83       	std	Z+6, r16	; 0x06
    2d32:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d34:	8e 9f       	mul	r24, r30
    2d36:	f0 01       	movw	r30, r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	eb 5c       	subi	r30, 0xCB	; 203
    2d3c:	f1 4f       	sbci	r31, 0xF1	; 241
    2d3e:	fd 87       	std	Y+13, r31	; 0x0d
    2d40:	ec 87       	std	Y+12, r30	; 0x0c
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	80 83       	st	Z, r24
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <xTaskPriorityDisinherit+0xac>
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <xTaskPriorityDisinherit+0xac>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <xTaskPriorityDisinherit+0xac>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <vTaskPriorityDisinheritAfterTimeout>:
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	fc 01       	movw	r30, r24
    2d6a:	89 2b       	or	r24, r25
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2d6e:	5a c0       	rjmp	.+180    	; 0x2e24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2d70:	85 a5       	ldd	r24, Z+45	; 0x2d
    2d72:	86 17       	cp	r24, r22
    2d74:	08 f4       	brcc	.+2      	; 0x2d78 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2d76:	86 2f       	mov	r24, r22
    2d78:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d7a:	98 17       	cp	r25, r24
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2d7e:	52 c0       	rjmp	.+164    	; 0x2e24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2d80:	26 a5       	ldd	r18, Z+46	; 0x2e
    2d82:	21 30       	cpi	r18, 0x01	; 1
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2d86:	4e c0       	rjmp	.+156    	; 0x2e24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2d88:	82 8f       	std	Z+26, r24	; 0x1a
    2d8a:	46 85       	ldd	r20, Z+14	; 0x0e
    2d8c:	57 85       	ldd	r21, Z+15	; 0x0f
    2d8e:	60 89       	ldd	r22, Z+16	; 0x10
    2d90:	71 89       	ldd	r23, Z+17	; 0x11
    2d92:	77 23       	and	r23, r23
    2d94:	64 f0       	brlt	.+24     	; 0x2dae <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2d96:	4a e0       	ldi	r20, 0x0A	; 10
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	48 1b       	sub	r20, r24
    2da0:	51 09       	sbc	r21, r1
    2da2:	61 09       	sbc	r22, r1
    2da4:	71 09       	sbc	r23, r1
    2da6:	46 87       	std	Z+14, r20	; 0x0e
    2da8:	57 87       	std	Z+15, r21	; 0x0f
    2daa:	60 8b       	std	Z+16, r22	; 0x10
    2dac:	71 8b       	std	Z+17, r23	; 0x11
    2dae:	2b e0       	ldi	r18, 0x0B	; 11
    2db0:	92 9f       	mul	r25, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	8b 5c       	subi	r24, 0xCB	; 203
    2db8:	91 4f       	sbci	r25, 0xF1	; 241
    2dba:	24 85       	ldd	r18, Z+12	; 0x0c
    2dbc:	35 85       	ldd	r19, Z+13	; 0x0d
    2dbe:	28 17       	cp	r18, r24
    2dc0:	39 07       	cpc	r19, r25
    2dc2:	81 f5       	brne	.+96     	; 0x2e24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2dc4:	ef 01       	movw	r28, r30
    2dc6:	8f 01       	movw	r16, r30
    2dc8:	0e 5f       	subi	r16, 0xFE	; 254
    2dca:	1f 4f       	sbci	r17, 0xFF	; 255
    2dcc:	c8 01       	movw	r24, r16
    2dce:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
    2dd2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2dd4:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <uxTopReadyPriority>
    2dd8:	8e 17       	cp	r24, r30
    2dda:	10 f4       	brcc	.+4      	; 0x2de0 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2ddc:	e0 93 f3 0d 	sts	0x0DF3, r30	; 0x800df3 <uxTopReadyPriority>
    2de0:	8b e0       	ldi	r24, 0x0B	; 11
    2de2:	8e 9f       	mul	r24, r30
    2de4:	f0 01       	movw	r30, r0
    2de6:	11 24       	eor	r1, r1
    2de8:	eb 5c       	subi	r30, 0xCB	; 203
    2dea:	f1 4f       	sbci	r31, 0xF1	; 241
    2dec:	01 80       	ldd	r0, Z+1	; 0x01
    2dee:	f2 81       	ldd	r31, Z+2	; 0x02
    2df0:	e0 2d       	mov	r30, r0
    2df2:	ff 83       	std	Y+7, r31	; 0x07
    2df4:	ee 83       	std	Y+6, r30	; 0x06
    2df6:	26 81       	ldd	r18, Z+6	; 0x06
    2df8:	37 81       	ldd	r19, Z+7	; 0x07
    2dfa:	39 87       	std	Y+9, r19	; 0x09
    2dfc:	28 87       	std	Y+8, r18	; 0x08
    2dfe:	a6 81       	ldd	r26, Z+6	; 0x06
    2e00:	b7 81       	ldd	r27, Z+7	; 0x07
    2e02:	15 96       	adiw	r26, 0x05	; 5
    2e04:	1c 93       	st	X, r17
    2e06:	0e 93       	st	-X, r16
    2e08:	14 97       	sbiw	r26, 0x04	; 4
    2e0a:	17 83       	std	Z+7, r17	; 0x07
    2e0c:	06 83       	std	Z+6, r16	; 0x06
    2e0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e10:	8e 9f       	mul	r24, r30
    2e12:	f0 01       	movw	r30, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	eb 5c       	subi	r30, 0xCB	; 203
    2e18:	f1 4f       	sbci	r31, 0xF1	; 241
    2e1a:	fd 87       	std	Y+13, r31	; 0x0d
    2e1c:	ec 87       	std	Y+12, r30	; 0x0c
    2e1e:	80 81       	ld	r24, Z
    2e20:	8f 5f       	subi	r24, 0xFF	; 255
    2e22:	80 83       	st	Z, r24
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	08 95       	ret

00002e2e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2e2e:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2e32:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2e36:	89 2b       	or	r24, r25
    2e38:	39 f0       	breq	.+14     	; 0x2e48 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2e3a:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2e3e:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    2e42:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e44:	8f 5f       	subi	r24, 0xFF	; 255
    2e46:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2e48:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <pxCurrentTCB>
    2e4c:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <pxCurrentTCB+0x1>
    }
    2e50:	08 95       	ret

00002e52 <prvInsertTimerInActiveList>:
    2e52:	cf 92       	push	r12
    2e54:	df 92       	push	r13
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	fc 01       	movw	r30, r24
    2e60:	42 83       	std	Z+2, r20	; 0x02
    2e62:	53 83       	std	Z+3, r21	; 0x03
    2e64:	64 83       	std	Z+4, r22	; 0x04
    2e66:	75 83       	std	Z+5, r23	; 0x05
    2e68:	93 87       	std	Z+11, r25	; 0x0b
    2e6a:	82 87       	std	Z+10, r24	; 0x0a
    2e6c:	04 17       	cp	r16, r20
    2e6e:	15 07       	cpc	r17, r21
    2e70:	26 07       	cpc	r18, r22
    2e72:	37 07       	cpc	r19, r23
    2e74:	c0 f0       	brcs	.+48     	; 0x2ea6 <prvInsertTimerInActiveList+0x54>
    2e76:	0c 19       	sub	r16, r12
    2e78:	1d 09       	sbc	r17, r13
    2e7a:	2e 09       	sbc	r18, r14
    2e7c:	3f 09       	sbc	r19, r15
    2e7e:	86 85       	ldd	r24, Z+14	; 0x0e
    2e80:	97 85       	ldd	r25, Z+15	; 0x0f
    2e82:	a0 89       	ldd	r26, Z+16	; 0x10
    2e84:	b1 89       	ldd	r27, Z+17	; 0x11
    2e86:	08 17       	cp	r16, r24
    2e88:	19 07       	cpc	r17, r25
    2e8a:	2a 07       	cpc	r18, r26
    2e8c:	3b 07       	cpc	r19, r27
    2e8e:	00 f5       	brcc	.+64     	; 0x2ed0 <prvInsertTimerInActiveList+0x7e>
    2e90:	bf 01       	movw	r22, r30
    2e92:	6e 5f       	subi	r22, 0xFE	; 254
    2e94:	7f 4f       	sbci	r23, 0xFF	; 255
    2e96:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <pxOverflowTimerList>
    2e9a:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <pxOverflowTimerList+0x1>
    2e9e:	0e 94 6d 0a 	call	0x14da	; 0x14da <vListInsert>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	18 c0       	rjmp	.+48     	; 0x2ed6 <prvInsertTimerInActiveList+0x84>
    2ea6:	0c 15       	cp	r16, r12
    2ea8:	1d 05       	cpc	r17, r13
    2eaa:	2e 05       	cpc	r18, r14
    2eac:	3f 05       	cpc	r19, r15
    2eae:	28 f4       	brcc	.+10     	; 0x2eba <prvInsertTimerInActiveList+0x68>
    2eb0:	4c 15       	cp	r20, r12
    2eb2:	5d 05       	cpc	r21, r13
    2eb4:	6e 05       	cpc	r22, r14
    2eb6:	7f 05       	cpc	r23, r15
    2eb8:	68 f4       	brcc	.+26     	; 0x2ed4 <prvInsertTimerInActiveList+0x82>
    2eba:	bf 01       	movw	r22, r30
    2ebc:	6e 5f       	subi	r22, 0xFE	; 254
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <pxCurrentTimerList>
    2ec4:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <pxCurrentTimerList+0x1>
    2ec8:	0e 94 6d 0a 	call	0x14da	; 0x14da <vListInsert>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	03 c0       	rjmp	.+6      	; 0x2ed6 <prvInsertTimerInActiveList+0x84>
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <prvInsertTimerInActiveList+0x84>
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	df 90       	pop	r13
    2ee0:	cf 90       	pop	r12
    2ee2:	08 95       	ret

00002ee4 <prvCheckForValidListAndQueue>:
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	0f 92       	push	r0
    2eea:	80 91 ab 0e 	lds	r24, 0x0EAB	; 0x800eab <xTimerQueue>
    2eee:	90 91 ac 0e 	lds	r25, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
    2ef2:	89 2b       	or	r24, r25
    2ef4:	e9 f4       	brne	.+58     	; 0x2f30 <prvCheckForValidListAndQueue+0x4c>
    2ef6:	8c eb       	ldi	r24, 0xBC	; 188
    2ef8:	9e e0       	ldi	r25, 0x0E	; 14
    2efa:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInitialise>
    2efe:	81 eb       	ldi	r24, 0xB1	; 177
    2f00:	9e e0       	ldi	r25, 0x0E	; 14
    2f02:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInitialise>
    2f06:	8c eb       	ldi	r24, 0xBC	; 188
    2f08:	9e e0       	ldi	r25, 0x0E	; 14
    2f0a:	90 93 b0 0e 	sts	0x0EB0, r25	; 0x800eb0 <pxCurrentTimerList+0x1>
    2f0e:	80 93 af 0e 	sts	0x0EAF, r24	; 0x800eaf <pxCurrentTimerList>
    2f12:	81 eb       	ldi	r24, 0xB1	; 177
    2f14:	9e e0       	ldi	r25, 0x0E	; 14
    2f16:	90 93 ae 0e 	sts	0x0EAE, r25	; 0x800eae <pxOverflowTimerList+0x1>
    2f1a:	80 93 ad 0e 	sts	0x0EAD, r24	; 0x800ead <pxOverflowTimerList>
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	67 e0       	ldi	r22, 0x07	; 7
    2f22:	8a e0       	ldi	r24, 0x0A	; 10
    2f24:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <xQueueGenericCreate>
    2f28:	90 93 ac 0e 	sts	0x0EAC, r25	; 0x800eac <xTimerQueue+0x1>
    2f2c:	80 93 ab 0e 	sts	0x0EAB, r24	; 0x800eab <xTimerQueue>
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	08 95       	ret

00002f36 <xTimerCreateTimerTask>:
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	d3 df       	rcall	.-90     	; 0x2ee4 <prvCheckForValidListAndQueue>
    2f3e:	80 91 ab 0e 	lds	r24, 0x0EAB	; 0x800eab <xTimerQueue>
    2f42:	90 91 ac 0e 	lds	r25, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
    2f46:	89 2b       	or	r24, r25
    2f48:	89 f0       	breq	.+34     	; 0x2f6c <xTimerCreateTimerTask+0x36>
    2f4a:	0f 2e       	mov	r0, r31
    2f4c:	f9 ea       	ldi	r31, 0xA9	; 169
    2f4e:	ef 2e       	mov	r14, r31
    2f50:	fe e0       	ldi	r31, 0x0E	; 14
    2f52:	ff 2e       	mov	r15, r31
    2f54:	f0 2d       	mov	r31, r0
    2f56:	03 e0       	ldi	r16, 0x03	; 3
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 ec       	ldi	r20, 0xC0	; 192
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	66 ed       	ldi	r22, 0xD6	; 214
    2f62:	73 e0       	ldi	r23, 0x03	; 3
    2f64:	88 e4       	ldi	r24, 0x48	; 72
    2f66:	91 e0       	ldi	r25, 0x01	; 1
    2f68:	7d d8       	rcall	.-3846   	; 0x2064 <xTaskCreate>
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <xTimerCreateTimerTask+0x38>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	0f 91       	pop	r16
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	08 95       	ret

00002f76 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2f76:	8f 92       	push	r8
    2f78:	9f 92       	push	r9
    2f7a:	af 92       	push	r10
    2f7c:	bf 92       	push	r11
    2f7e:	cf 92       	push	r12
    2f80:	df 92       	push	r13
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	0f 93       	push	r16
    2f88:	1f 93       	push	r17
    2f8a:	cf 93       	push	r28
    2f8c:	df 93       	push	r29
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	27 97       	sbiw	r28, 0x07	; 7
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2f9e:	e0 91 ab 0e 	lds	r30, 0x0EAB	; 0x800eab <xTimerQueue>
    2fa2:	f0 91 ac 0e 	lds	r31, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
    2fa6:	30 97       	sbiw	r30, 0x00	; 0
    2fa8:	81 f1       	breq	.+96     	; 0x300a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2faa:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2fac:	2a 83       	std	Y+2, r18	; 0x02
    2fae:	3b 83       	std	Y+3, r19	; 0x03
    2fb0:	4c 83       	std	Y+4, r20	; 0x04
    2fb2:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2fb4:	9f 83       	std	Y+7, r25	; 0x07
    2fb6:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2fb8:	66 30       	cpi	r22, 0x06	; 6
    2fba:	f4 f4       	brge	.+60     	; 0x2ff8 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2fbc:	e1 dd       	rcall	.-1086   	; 0x2b80 <xTaskGetSchedulerState>
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	69 f4       	brne	.+26     	; 0x2fdc <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2fc2:	00 e0       	ldi	r16, 0x00	; 0
    2fc4:	a7 01       	movw	r20, r14
    2fc6:	96 01       	movw	r18, r12
    2fc8:	be 01       	movw	r22, r28
    2fca:	6f 5f       	subi	r22, 0xFF	; 255
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	80 91 ab 0e 	lds	r24, 0x0EAB	; 0x800eab <xTimerQueue>
    2fd2:	90 91 ac 0e 	lds	r25, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
    2fd6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <xQueueGenericSend>
    2fda:	18 c0       	rjmp	.+48     	; 0x300c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2fdc:	00 e0       	ldi	r16, 0x00	; 0
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	a9 01       	movw	r20, r18
    2fe4:	be 01       	movw	r22, r28
    2fe6:	6f 5f       	subi	r22, 0xFF	; 255
    2fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fea:	80 91 ab 0e 	lds	r24, 0x0EAB	; 0x800eab <xTimerQueue>
    2fee:	90 91 ac 0e 	lds	r25, 0x0EAC	; 0x800eac <xTimerQueue+0x1>
    2ff2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <xQueueGenericSend>
    2ff6:	0a c0       	rjmp	.+20     	; 0x300c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	a8 01       	movw	r20, r16
    2ffc:	be 01       	movw	r22, r28
    2ffe:	6f 5f       	subi	r22, 0xFF	; 255
    3000:	7f 4f       	sbci	r23, 0xFF	; 255
    3002:	cf 01       	movw	r24, r30
    3004:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xQueueGenericSendFromISR>
    3008:	01 c0       	rjmp	.+2      	; 0x300c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    300a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    300c:	27 96       	adiw	r28, 0x07	; 7
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	bf 90       	pop	r11
    302a:	af 90       	pop	r10
    302c:	9f 90       	pop	r9
    302e:	8f 90       	pop	r8
    3030:	08 95       	ret

00003032 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3032:	2f 92       	push	r2
    3034:	3f 92       	push	r3
    3036:	4f 92       	push	r4
    3038:	5f 92       	push	r5
    303a:	6f 92       	push	r6
    303c:	7f 92       	push	r7
    303e:	8f 92       	push	r8
    3040:	9f 92       	push	r9
    3042:	af 92       	push	r10
    3044:	bf 92       	push	r11
    3046:	cf 92       	push	r12
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3058:	6e d9       	rcall	.-3364   	; 0x2336 <xTaskGetTickCount>
    305a:	2b 01       	movw	r4, r22
    305c:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    305e:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <xLastTime.2436>
    3062:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <xLastTime.2436+0x1>
    3066:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <xLastTime.2436+0x2>
    306a:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <xLastTime.2436+0x3>
    306e:	48 16       	cp	r4, r24
    3070:	59 06       	cpc	r5, r25
    3072:	6a 06       	cpc	r6, r26
    3074:	7b 06       	cpc	r7, r27
    3076:	08 f0       	brcs	.+2      	; 0x307a <prvSampleTimeNow+0x48>
    3078:	53 c0       	rjmp	.+166    	; 0x3120 <prvSampleTimeNow+0xee>
    307a:	3b c0       	rjmp	.+118    	; 0x30f2 <prvSampleTimeNow+0xc0>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    307c:	07 80       	ldd	r0, Z+7	; 0x07
    307e:	f0 85       	ldd	r31, Z+8	; 0x08
    3080:	e0 2d       	mov	r30, r0
    3082:	80 80       	ld	r8, Z
    3084:	91 80       	ldd	r9, Z+1	; 0x01
    3086:	a2 80       	ldd	r10, Z+2	; 0x02
    3088:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    308a:	c0 85       	ldd	r28, Z+8	; 0x08
    308c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    308e:	8e 01       	movw	r16, r28
    3090:	0e 5f       	subi	r16, 0xFE	; 254
    3092:	1f 4f       	sbci	r17, 0xFF	; 255
    3094:	c8 01       	movw	r24, r16
    3096:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    309a:	ec 89       	ldd	r30, Y+20	; 0x14
    309c:	fd 89       	ldd	r31, Y+21	; 0x15
    309e:	ce 01       	movw	r24, r28
    30a0:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30a2:	8e 89       	ldd	r24, Y+22	; 0x16
    30a4:	82 ff       	sbrs	r24, 2
    30a6:	25 c0       	rjmp	.+74     	; 0x30f2 <prvSampleTimeNow+0xc0>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    30a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    30aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    30ac:	a8 89       	ldd	r26, Y+16	; 0x10
    30ae:	b9 89       	ldd	r27, Y+17	; 0x11
    30b0:	88 0d       	add	r24, r8
    30b2:	99 1d       	adc	r25, r9
    30b4:	aa 1d       	adc	r26, r10
    30b6:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    30b8:	88 16       	cp	r8, r24
    30ba:	99 06       	cpc	r9, r25
    30bc:	aa 06       	cpc	r10, r26
    30be:	bb 06       	cpc	r11, r27
    30c0:	70 f4       	brcc	.+28     	; 0x30de <prvSampleTimeNow+0xac>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    30c2:	8a 83       	std	Y+2, r24	; 0x02
    30c4:	9b 83       	std	Y+3, r25	; 0x03
    30c6:	ac 83       	std	Y+4, r26	; 0x04
    30c8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30ca:	db 87       	std	Y+11, r29	; 0x0b
    30cc:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    30ce:	b8 01       	movw	r22, r16
    30d0:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <pxCurrentTimerList>
    30d4:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <pxCurrentTimerList+0x1>
    30d8:	0e 94 6d 0a 	call	0x14da	; 0x14da <vListInsert>
    30dc:	0a c0       	rjmp	.+20     	; 0x30f2 <prvSampleTimeNow+0xc0>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    30de:	c1 2c       	mov	r12, r1
    30e0:	d1 2c       	mov	r13, r1
    30e2:	76 01       	movw	r14, r12
    30e4:	00 e0       	ldi	r16, 0x00	; 0
    30e6:	10 e0       	ldi	r17, 0x00	; 0
    30e8:	a5 01       	movw	r20, r10
    30ea:	94 01       	movw	r18, r8
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	ce 01       	movw	r24, r28
    30f0:	42 df       	rcall	.-380    	; 0x2f76 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    30f2:	e0 91 af 0e 	lds	r30, 0x0EAF	; 0x800eaf <pxCurrentTimerList>
    30f6:	f0 91 b0 0e 	lds	r31, 0x0EB0	; 0x800eb0 <pxCurrentTimerList+0x1>
    30fa:	80 81       	ld	r24, Z
    30fc:	81 11       	cpse	r24, r1
    30fe:	be cf       	rjmp	.-132    	; 0x307c <prvSampleTimeNow+0x4a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3100:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <pxOverflowTimerList>
    3104:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <pxOverflowTimerList+0x1>
    3108:	90 93 b0 0e 	sts	0x0EB0, r25	; 0x800eb0 <pxCurrentTimerList+0x1>
    310c:	80 93 af 0e 	sts	0x0EAF, r24	; 0x800eaf <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3110:	f0 93 ae 0e 	sts	0x0EAE, r31	; 0x800eae <pxOverflowTimerList+0x1>
    3114:	e0 93 ad 0e 	sts	0x0EAD, r30	; 0x800ead <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	f1 01       	movw	r30, r2
    311c:	80 83       	st	Z, r24
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <prvSampleTimeNow+0xf2>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3120:	f1 01       	movw	r30, r2
    3122:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3124:	40 92 a5 0e 	sts	0x0EA5, r4	; 0x800ea5 <xLastTime.2436>
    3128:	50 92 a6 0e 	sts	0x0EA6, r5	; 0x800ea6 <xLastTime.2436+0x1>
    312c:	60 92 a7 0e 	sts	0x0EA7, r6	; 0x800ea7 <xLastTime.2436+0x2>
    3130:	70 92 a8 0e 	sts	0x0EA8, r7	; 0x800ea8 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3134:	c3 01       	movw	r24, r6
    3136:	b2 01       	movw	r22, r4
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	df 90       	pop	r13
    3146:	cf 90       	pop	r12
    3148:	bf 90       	pop	r11
    314a:	af 90       	pop	r10
    314c:	9f 90       	pop	r9
    314e:	8f 90       	pop	r8
    3150:	7f 90       	pop	r7
    3152:	6f 90       	pop	r6
    3154:	5f 90       	pop	r5
    3156:	4f 90       	pop	r4
    3158:	3f 90       	pop	r3
    315a:	2f 90       	pop	r2
    315c:	08 95       	ret

0000315e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    315e:	08 95       	ret

00003160 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3160:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3162:	2f 9a       	sbi	0x05, 7	; 5
    3164:	08 95       	ret

00003166 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3166:	1f 9a       	sbi	0x03, 7	; 3
    3168:	08 95       	ret

0000316a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    316a:	fa df       	rcall	.-12     	; 0x3160 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    316c:	2f ef       	ldi	r18, 0xFF	; 255
    316e:	80 e7       	ldi	r24, 0x70	; 112
    3170:	92 e0       	ldi	r25, 0x02	; 2
    3172:	21 50       	subi	r18, 0x01	; 1
    3174:	80 40       	sbci	r24, 0x00	; 0
    3176:	90 40       	sbci	r25, 0x00	; 0
    3178:	e1 f7       	brne	.-8      	; 0x3172 <vApplicationMallocFailedHook+0x8>
    317a:	00 c0       	rjmp	.+0      	; 0x317c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    317c:	00 00       	nop
    317e:	f3 df       	rcall	.-26     	; 0x3166 <prvBlinkMainLed>
    3180:	f5 cf       	rjmp	.-22     	; 0x316c <vApplicationMallocFailedHook+0x2>

00003182 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3182:	ee df       	rcall	.-36     	; 0x3160 <prvSetMainLedOn>
    3184:	2f ef       	ldi	r18, 0xFF	; 255
    3186:	87 ea       	ldi	r24, 0xA7	; 167
    3188:	91 e6       	ldi	r25, 0x61	; 97
    318a:	21 50       	subi	r18, 0x01	; 1
    318c:	80 40       	sbci	r24, 0x00	; 0
    318e:	90 40       	sbci	r25, 0x00	; 0
    3190:	e1 f7       	brne	.-8      	; 0x318a <vApplicationStackOverflowHook+0x8>
    3192:	00 c0       	rjmp	.+0      	; 0x3194 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3194:	00 00       	nop
    3196:	e7 df       	rcall	.-50     	; 0x3166 <prvBlinkMainLed>
    3198:	f5 cf       	rjmp	.-22     	; 0x3184 <vApplicationStackOverflowHook+0x2>

0000319a <initialiseSystem>:
	// A3 for LoRaWAN
	// A4 means 7-segment Display is showing carbon dioxide
	// A5 means 7-segment Display is showing humidity
	// A6 means 7-segment Display is showing temperature
	// A7 means 7-segment Display is showing time(hh.mm)
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5) | _BV(DDA6) | _BV(DDA7);
    319a:	81 b1       	in	r24, 0x01	; 1
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	81 b9       	out	0x01, r24	; 1
	//Turn off all led
	PORTA ^= _BV(PA0);
    31a0:	92 b1       	in	r25, 0x02	; 2
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	89 27       	eor	r24, r25
    31a6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA1);
    31a8:	92 b1       	in	r25, 0x02	; 2
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	89 27       	eor	r24, r25
    31ae:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA2);
    31b0:	92 b1       	in	r25, 0x02	; 2
    31b2:	84 e0       	ldi	r24, 0x04	; 4
    31b4:	89 27       	eor	r24, r25
    31b6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA3);
    31b8:	92 b1       	in	r25, 0x02	; 2
    31ba:	88 e0       	ldi	r24, 0x08	; 8
    31bc:	89 27       	eor	r24, r25
    31be:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA4);
    31c0:	92 b1       	in	r25, 0x02	; 2
    31c2:	80 e1       	ldi	r24, 0x10	; 16
    31c4:	89 27       	eor	r24, r25
    31c6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA5);
    31c8:	92 b1       	in	r25, 0x02	; 2
    31ca:	80 e2       	ldi	r24, 0x20	; 32
    31cc:	89 27       	eor	r24, r25
    31ce:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA6);
    31d0:	92 b1       	in	r25, 0x02	; 2
    31d2:	80 e4       	ldi	r24, 0x40	; 64
    31d4:	89 27       	eor	r24, r25
    31d6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA7);
    31d8:	82 b1       	in	r24, 0x02	; 2
    31da:	80 58       	subi	r24, 0x80	; 128
    31dc:	82 b9       	out	0x02, r24	; 2
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <stdio_initialise>
    mh_z19_initialise(ser_USART3);
    31e4:	83 e0       	ldi	r24, 0x03	; 3
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	69 d4       	rcall	.+2258   	; 0x3abc <mh_z19_initialise>
	if ( HIH8120_OK == hih8120_initialise() )
    31ea:	a9 c3       	rjmp	.+1874   	; 0x393e <hih8120_initialise>
    31ec:	08 95       	ret

000031ee <main>:
    31ee:	d5 df       	rcall	.-86     	; 0x319a <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!!\n");
    31f0:	8e ed       	ldi	r24, 0xDE	; 222
    31f2:	93 e0       	ldi	r25, 0x03	; 3
    31f4:	0e 94 07 29 	call	0x520e	; 0x520e <puts>
	sensorModelManager_create();
    31f8:	0e 94 2c 08 	call	0x1058	; 0x1058 <sensorModelManager_create>
    31fc:	ff cf       	rjmp	.-2      	; 0x31fc <main+0xe>

000031fe <__subsf3>:
    31fe:	50 58       	subi	r21, 0x80	; 128

00003200 <__addsf3>:
    3200:	bb 27       	eor	r27, r27
    3202:	aa 27       	eor	r26, r26
    3204:	0e d0       	rcall	.+28     	; 0x3222 <__addsf3x>
    3206:	4d c1       	rjmp	.+666    	; 0x34a2 <__fp_round>
    3208:	3e d1       	rcall	.+636    	; 0x3486 <__fp_pscA>
    320a:	30 f0       	brcs	.+12     	; 0x3218 <__addsf3+0x18>
    320c:	43 d1       	rcall	.+646    	; 0x3494 <__fp_pscB>
    320e:	20 f0       	brcs	.+8      	; 0x3218 <__addsf3+0x18>
    3210:	31 f4       	brne	.+12     	; 0x321e <__addsf3+0x1e>
    3212:	9f 3f       	cpi	r25, 0xFF	; 255
    3214:	11 f4       	brne	.+4      	; 0x321a <__addsf3+0x1a>
    3216:	1e f4       	brtc	.+6      	; 0x321e <__addsf3+0x1e>
    3218:	33 c1       	rjmp	.+614    	; 0x3480 <__fp_nan>
    321a:	0e f4       	brtc	.+2      	; 0x321e <__addsf3+0x1e>
    321c:	e0 95       	com	r30
    321e:	e7 fb       	bst	r30, 7
    3220:	29 c1       	rjmp	.+594    	; 0x3474 <__fp_inf>

00003222 <__addsf3x>:
    3222:	e9 2f       	mov	r30, r25
    3224:	4f d1       	rcall	.+670    	; 0x34c4 <__fp_split3>
    3226:	80 f3       	brcs	.-32     	; 0x3208 <__addsf3+0x8>
    3228:	ba 17       	cp	r27, r26
    322a:	62 07       	cpc	r22, r18
    322c:	73 07       	cpc	r23, r19
    322e:	84 07       	cpc	r24, r20
    3230:	95 07       	cpc	r25, r21
    3232:	18 f0       	brcs	.+6      	; 0x323a <__addsf3x+0x18>
    3234:	71 f4       	brne	.+28     	; 0x3252 <__addsf3x+0x30>
    3236:	9e f5       	brtc	.+102    	; 0x329e <__addsf3x+0x7c>
    3238:	67 c1       	rjmp	.+718    	; 0x3508 <__fp_zero>
    323a:	0e f4       	brtc	.+2      	; 0x323e <__addsf3x+0x1c>
    323c:	e0 95       	com	r30
    323e:	0b 2e       	mov	r0, r27
    3240:	ba 2f       	mov	r27, r26
    3242:	a0 2d       	mov	r26, r0
    3244:	0b 01       	movw	r0, r22
    3246:	b9 01       	movw	r22, r18
    3248:	90 01       	movw	r18, r0
    324a:	0c 01       	movw	r0, r24
    324c:	ca 01       	movw	r24, r20
    324e:	a0 01       	movw	r20, r0
    3250:	11 24       	eor	r1, r1
    3252:	ff 27       	eor	r31, r31
    3254:	59 1b       	sub	r21, r25
    3256:	99 f0       	breq	.+38     	; 0x327e <__addsf3x+0x5c>
    3258:	59 3f       	cpi	r21, 0xF9	; 249
    325a:	50 f4       	brcc	.+20     	; 0x3270 <__addsf3x+0x4e>
    325c:	50 3e       	cpi	r21, 0xE0	; 224
    325e:	68 f1       	brcs	.+90     	; 0x32ba <__addsf3x+0x98>
    3260:	1a 16       	cp	r1, r26
    3262:	f0 40       	sbci	r31, 0x00	; 0
    3264:	a2 2f       	mov	r26, r18
    3266:	23 2f       	mov	r18, r19
    3268:	34 2f       	mov	r19, r20
    326a:	44 27       	eor	r20, r20
    326c:	58 5f       	subi	r21, 0xF8	; 248
    326e:	f3 cf       	rjmp	.-26     	; 0x3256 <__addsf3x+0x34>
    3270:	46 95       	lsr	r20
    3272:	37 95       	ror	r19
    3274:	27 95       	ror	r18
    3276:	a7 95       	ror	r26
    3278:	f0 40       	sbci	r31, 0x00	; 0
    327a:	53 95       	inc	r21
    327c:	c9 f7       	brne	.-14     	; 0x3270 <__addsf3x+0x4e>
    327e:	7e f4       	brtc	.+30     	; 0x329e <__addsf3x+0x7c>
    3280:	1f 16       	cp	r1, r31
    3282:	ba 0b       	sbc	r27, r26
    3284:	62 0b       	sbc	r22, r18
    3286:	73 0b       	sbc	r23, r19
    3288:	84 0b       	sbc	r24, r20
    328a:	ba f0       	brmi	.+46     	; 0x32ba <__addsf3x+0x98>
    328c:	91 50       	subi	r25, 0x01	; 1
    328e:	a1 f0       	breq	.+40     	; 0x32b8 <__addsf3x+0x96>
    3290:	ff 0f       	add	r31, r31
    3292:	bb 1f       	adc	r27, r27
    3294:	66 1f       	adc	r22, r22
    3296:	77 1f       	adc	r23, r23
    3298:	88 1f       	adc	r24, r24
    329a:	c2 f7       	brpl	.-16     	; 0x328c <__addsf3x+0x6a>
    329c:	0e c0       	rjmp	.+28     	; 0x32ba <__addsf3x+0x98>
    329e:	ba 0f       	add	r27, r26
    32a0:	62 1f       	adc	r22, r18
    32a2:	73 1f       	adc	r23, r19
    32a4:	84 1f       	adc	r24, r20
    32a6:	48 f4       	brcc	.+18     	; 0x32ba <__addsf3x+0x98>
    32a8:	87 95       	ror	r24
    32aa:	77 95       	ror	r23
    32ac:	67 95       	ror	r22
    32ae:	b7 95       	ror	r27
    32b0:	f7 95       	ror	r31
    32b2:	9e 3f       	cpi	r25, 0xFE	; 254
    32b4:	08 f0       	brcs	.+2      	; 0x32b8 <__addsf3x+0x96>
    32b6:	b3 cf       	rjmp	.-154    	; 0x321e <__addsf3+0x1e>
    32b8:	93 95       	inc	r25
    32ba:	88 0f       	add	r24, r24
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <__addsf3x+0x9e>
    32be:	99 27       	eor	r25, r25
    32c0:	ee 0f       	add	r30, r30
    32c2:	97 95       	ror	r25
    32c4:	87 95       	ror	r24
    32c6:	08 95       	ret

000032c8 <__divsf3>:
    32c8:	0c d0       	rcall	.+24     	; 0x32e2 <__divsf3x>
    32ca:	eb c0       	rjmp	.+470    	; 0x34a2 <__fp_round>
    32cc:	e3 d0       	rcall	.+454    	; 0x3494 <__fp_pscB>
    32ce:	40 f0       	brcs	.+16     	; 0x32e0 <__divsf3+0x18>
    32d0:	da d0       	rcall	.+436    	; 0x3486 <__fp_pscA>
    32d2:	30 f0       	brcs	.+12     	; 0x32e0 <__divsf3+0x18>
    32d4:	21 f4       	brne	.+8      	; 0x32de <__divsf3+0x16>
    32d6:	5f 3f       	cpi	r21, 0xFF	; 255
    32d8:	19 f0       	breq	.+6      	; 0x32e0 <__divsf3+0x18>
    32da:	cc c0       	rjmp	.+408    	; 0x3474 <__fp_inf>
    32dc:	51 11       	cpse	r21, r1
    32de:	15 c1       	rjmp	.+554    	; 0x350a <__fp_szero>
    32e0:	cf c0       	rjmp	.+414    	; 0x3480 <__fp_nan>

000032e2 <__divsf3x>:
    32e2:	f0 d0       	rcall	.+480    	; 0x34c4 <__fp_split3>
    32e4:	98 f3       	brcs	.-26     	; 0x32cc <__divsf3+0x4>

000032e6 <__divsf3_pse>:
    32e6:	99 23       	and	r25, r25
    32e8:	c9 f3       	breq	.-14     	; 0x32dc <__divsf3+0x14>
    32ea:	55 23       	and	r21, r21
    32ec:	b1 f3       	breq	.-20     	; 0x32da <__divsf3+0x12>
    32ee:	95 1b       	sub	r25, r21
    32f0:	55 0b       	sbc	r21, r21
    32f2:	bb 27       	eor	r27, r27
    32f4:	aa 27       	eor	r26, r26
    32f6:	62 17       	cp	r22, r18
    32f8:	73 07       	cpc	r23, r19
    32fa:	84 07       	cpc	r24, r20
    32fc:	38 f0       	brcs	.+14     	; 0x330c <__divsf3_pse+0x26>
    32fe:	9f 5f       	subi	r25, 0xFF	; 255
    3300:	5f 4f       	sbci	r21, 0xFF	; 255
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	44 1f       	adc	r20, r20
    3308:	aa 1f       	adc	r26, r26
    330a:	a9 f3       	breq	.-22     	; 0x32f6 <__divsf3_pse+0x10>
    330c:	33 d0       	rcall	.+102    	; 0x3374 <__divsf3_pse+0x8e>
    330e:	0e 2e       	mov	r0, r30
    3310:	3a f0       	brmi	.+14     	; 0x3320 <__divsf3_pse+0x3a>
    3312:	e0 e8       	ldi	r30, 0x80	; 128
    3314:	30 d0       	rcall	.+96     	; 0x3376 <__divsf3_pse+0x90>
    3316:	91 50       	subi	r25, 0x01	; 1
    3318:	50 40       	sbci	r21, 0x00	; 0
    331a:	e6 95       	lsr	r30
    331c:	00 1c       	adc	r0, r0
    331e:	ca f7       	brpl	.-14     	; 0x3312 <__divsf3_pse+0x2c>
    3320:	29 d0       	rcall	.+82     	; 0x3374 <__divsf3_pse+0x8e>
    3322:	fe 2f       	mov	r31, r30
    3324:	27 d0       	rcall	.+78     	; 0x3374 <__divsf3_pse+0x8e>
    3326:	66 0f       	add	r22, r22
    3328:	77 1f       	adc	r23, r23
    332a:	88 1f       	adc	r24, r24
    332c:	bb 1f       	adc	r27, r27
    332e:	26 17       	cp	r18, r22
    3330:	37 07       	cpc	r19, r23
    3332:	48 07       	cpc	r20, r24
    3334:	ab 07       	cpc	r26, r27
    3336:	b0 e8       	ldi	r27, 0x80	; 128
    3338:	09 f0       	breq	.+2      	; 0x333c <__divsf3_pse+0x56>
    333a:	bb 0b       	sbc	r27, r27
    333c:	80 2d       	mov	r24, r0
    333e:	bf 01       	movw	r22, r30
    3340:	ff 27       	eor	r31, r31
    3342:	93 58       	subi	r25, 0x83	; 131
    3344:	5f 4f       	sbci	r21, 0xFF	; 255
    3346:	2a f0       	brmi	.+10     	; 0x3352 <__divsf3_pse+0x6c>
    3348:	9e 3f       	cpi	r25, 0xFE	; 254
    334a:	51 05       	cpc	r21, r1
    334c:	68 f0       	brcs	.+26     	; 0x3368 <__divsf3_pse+0x82>
    334e:	92 c0       	rjmp	.+292    	; 0x3474 <__fp_inf>
    3350:	dc c0       	rjmp	.+440    	; 0x350a <__fp_szero>
    3352:	5f 3f       	cpi	r21, 0xFF	; 255
    3354:	ec f3       	brlt	.-6      	; 0x3350 <__divsf3_pse+0x6a>
    3356:	98 3e       	cpi	r25, 0xE8	; 232
    3358:	dc f3       	brlt	.-10     	; 0x3350 <__divsf3_pse+0x6a>
    335a:	86 95       	lsr	r24
    335c:	77 95       	ror	r23
    335e:	67 95       	ror	r22
    3360:	b7 95       	ror	r27
    3362:	f7 95       	ror	r31
    3364:	9f 5f       	subi	r25, 0xFF	; 255
    3366:	c9 f7       	brne	.-14     	; 0x335a <__divsf3_pse+0x74>
    3368:	88 0f       	add	r24, r24
    336a:	91 1d       	adc	r25, r1
    336c:	96 95       	lsr	r25
    336e:	87 95       	ror	r24
    3370:	97 f9       	bld	r25, 7
    3372:	08 95       	ret
    3374:	e1 e0       	ldi	r30, 0x01	; 1
    3376:	66 0f       	add	r22, r22
    3378:	77 1f       	adc	r23, r23
    337a:	88 1f       	adc	r24, r24
    337c:	bb 1f       	adc	r27, r27
    337e:	62 17       	cp	r22, r18
    3380:	73 07       	cpc	r23, r19
    3382:	84 07       	cpc	r24, r20
    3384:	ba 07       	cpc	r27, r26
    3386:	20 f0       	brcs	.+8      	; 0x3390 <__divsf3_pse+0xaa>
    3388:	62 1b       	sub	r22, r18
    338a:	73 0b       	sbc	r23, r19
    338c:	84 0b       	sbc	r24, r20
    338e:	ba 0b       	sbc	r27, r26
    3390:	ee 1f       	adc	r30, r30
    3392:	88 f7       	brcc	.-30     	; 0x3376 <__divsf3_pse+0x90>
    3394:	e0 95       	com	r30
    3396:	08 95       	ret

00003398 <__fixsfsi>:
    3398:	04 d0       	rcall	.+8      	; 0x33a2 <__fixunssfsi>
    339a:	68 94       	set
    339c:	b1 11       	cpse	r27, r1
    339e:	b5 c0       	rjmp	.+362    	; 0x350a <__fp_szero>
    33a0:	08 95       	ret

000033a2 <__fixunssfsi>:
    33a2:	98 d0       	rcall	.+304    	; 0x34d4 <__fp_splitA>
    33a4:	88 f0       	brcs	.+34     	; 0x33c8 <__fixunssfsi+0x26>
    33a6:	9f 57       	subi	r25, 0x7F	; 127
    33a8:	90 f0       	brcs	.+36     	; 0x33ce <__fixunssfsi+0x2c>
    33aa:	b9 2f       	mov	r27, r25
    33ac:	99 27       	eor	r25, r25
    33ae:	b7 51       	subi	r27, 0x17	; 23
    33b0:	a0 f0       	brcs	.+40     	; 0x33da <__fixunssfsi+0x38>
    33b2:	d1 f0       	breq	.+52     	; 0x33e8 <__fixunssfsi+0x46>
    33b4:	66 0f       	add	r22, r22
    33b6:	77 1f       	adc	r23, r23
    33b8:	88 1f       	adc	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	1a f0       	brmi	.+6      	; 0x33c4 <__fixunssfsi+0x22>
    33be:	ba 95       	dec	r27
    33c0:	c9 f7       	brne	.-14     	; 0x33b4 <__fixunssfsi+0x12>
    33c2:	12 c0       	rjmp	.+36     	; 0x33e8 <__fixunssfsi+0x46>
    33c4:	b1 30       	cpi	r27, 0x01	; 1
    33c6:	81 f0       	breq	.+32     	; 0x33e8 <__fixunssfsi+0x46>
    33c8:	9f d0       	rcall	.+318    	; 0x3508 <__fp_zero>
    33ca:	b1 e0       	ldi	r27, 0x01	; 1
    33cc:	08 95       	ret
    33ce:	9c c0       	rjmp	.+312    	; 0x3508 <__fp_zero>
    33d0:	67 2f       	mov	r22, r23
    33d2:	78 2f       	mov	r23, r24
    33d4:	88 27       	eor	r24, r24
    33d6:	b8 5f       	subi	r27, 0xF8	; 248
    33d8:	39 f0       	breq	.+14     	; 0x33e8 <__fixunssfsi+0x46>
    33da:	b9 3f       	cpi	r27, 0xF9	; 249
    33dc:	cc f3       	brlt	.-14     	; 0x33d0 <__fixunssfsi+0x2e>
    33de:	86 95       	lsr	r24
    33e0:	77 95       	ror	r23
    33e2:	67 95       	ror	r22
    33e4:	b3 95       	inc	r27
    33e6:	d9 f7       	brne	.-10     	; 0x33de <__fixunssfsi+0x3c>
    33e8:	3e f4       	brtc	.+14     	; 0x33f8 <__fixunssfsi+0x56>
    33ea:	90 95       	com	r25
    33ec:	80 95       	com	r24
    33ee:	70 95       	com	r23
    33f0:	61 95       	neg	r22
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	8f 4f       	sbci	r24, 0xFF	; 255
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	08 95       	ret

000033fa <__floatunsisf>:
    33fa:	e8 94       	clt
    33fc:	09 c0       	rjmp	.+18     	; 0x3410 <__floatsisf+0x12>

000033fe <__floatsisf>:
    33fe:	97 fb       	bst	r25, 7
    3400:	3e f4       	brtc	.+14     	; 0x3410 <__floatsisf+0x12>
    3402:	90 95       	com	r25
    3404:	80 95       	com	r24
    3406:	70 95       	com	r23
    3408:	61 95       	neg	r22
    340a:	7f 4f       	sbci	r23, 0xFF	; 255
    340c:	8f 4f       	sbci	r24, 0xFF	; 255
    340e:	9f 4f       	sbci	r25, 0xFF	; 255
    3410:	99 23       	and	r25, r25
    3412:	a9 f0       	breq	.+42     	; 0x343e <__floatsisf+0x40>
    3414:	f9 2f       	mov	r31, r25
    3416:	96 e9       	ldi	r25, 0x96	; 150
    3418:	bb 27       	eor	r27, r27
    341a:	93 95       	inc	r25
    341c:	f6 95       	lsr	r31
    341e:	87 95       	ror	r24
    3420:	77 95       	ror	r23
    3422:	67 95       	ror	r22
    3424:	b7 95       	ror	r27
    3426:	f1 11       	cpse	r31, r1
    3428:	f8 cf       	rjmp	.-16     	; 0x341a <__floatsisf+0x1c>
    342a:	fa f4       	brpl	.+62     	; 0x346a <__floatsisf+0x6c>
    342c:	bb 0f       	add	r27, r27
    342e:	11 f4       	brne	.+4      	; 0x3434 <__floatsisf+0x36>
    3430:	60 ff       	sbrs	r22, 0
    3432:	1b c0       	rjmp	.+54     	; 0x346a <__floatsisf+0x6c>
    3434:	6f 5f       	subi	r22, 0xFF	; 255
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	8f 4f       	sbci	r24, 0xFF	; 255
    343a:	9f 4f       	sbci	r25, 0xFF	; 255
    343c:	16 c0       	rjmp	.+44     	; 0x346a <__floatsisf+0x6c>
    343e:	88 23       	and	r24, r24
    3440:	11 f0       	breq	.+4      	; 0x3446 <__floatsisf+0x48>
    3442:	96 e9       	ldi	r25, 0x96	; 150
    3444:	11 c0       	rjmp	.+34     	; 0x3468 <__floatsisf+0x6a>
    3446:	77 23       	and	r23, r23
    3448:	21 f0       	breq	.+8      	; 0x3452 <__floatsisf+0x54>
    344a:	9e e8       	ldi	r25, 0x8E	; 142
    344c:	87 2f       	mov	r24, r23
    344e:	76 2f       	mov	r23, r22
    3450:	05 c0       	rjmp	.+10     	; 0x345c <__floatsisf+0x5e>
    3452:	66 23       	and	r22, r22
    3454:	71 f0       	breq	.+28     	; 0x3472 <__floatsisf+0x74>
    3456:	96 e8       	ldi	r25, 0x86	; 134
    3458:	86 2f       	mov	r24, r22
    345a:	70 e0       	ldi	r23, 0x00	; 0
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	2a f0       	brmi	.+10     	; 0x346a <__floatsisf+0x6c>
    3460:	9a 95       	dec	r25
    3462:	66 0f       	add	r22, r22
    3464:	77 1f       	adc	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	da f7       	brpl	.-10     	; 0x3460 <__floatsisf+0x62>
    346a:	88 0f       	add	r24, r24
    346c:	96 95       	lsr	r25
    346e:	87 95       	ror	r24
    3470:	97 f9       	bld	r25, 7
    3472:	08 95       	ret

00003474 <__fp_inf>:
    3474:	97 f9       	bld	r25, 7
    3476:	9f 67       	ori	r25, 0x7F	; 127
    3478:	80 e8       	ldi	r24, 0x80	; 128
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	08 95       	ret

00003480 <__fp_nan>:
    3480:	9f ef       	ldi	r25, 0xFF	; 255
    3482:	80 ec       	ldi	r24, 0xC0	; 192
    3484:	08 95       	ret

00003486 <__fp_pscA>:
    3486:	00 24       	eor	r0, r0
    3488:	0a 94       	dec	r0
    348a:	16 16       	cp	r1, r22
    348c:	17 06       	cpc	r1, r23
    348e:	18 06       	cpc	r1, r24
    3490:	09 06       	cpc	r0, r25
    3492:	08 95       	ret

00003494 <__fp_pscB>:
    3494:	00 24       	eor	r0, r0
    3496:	0a 94       	dec	r0
    3498:	12 16       	cp	r1, r18
    349a:	13 06       	cpc	r1, r19
    349c:	14 06       	cpc	r1, r20
    349e:	05 06       	cpc	r0, r21
    34a0:	08 95       	ret

000034a2 <__fp_round>:
    34a2:	09 2e       	mov	r0, r25
    34a4:	03 94       	inc	r0
    34a6:	00 0c       	add	r0, r0
    34a8:	11 f4       	brne	.+4      	; 0x34ae <__fp_round+0xc>
    34aa:	88 23       	and	r24, r24
    34ac:	52 f0       	brmi	.+20     	; 0x34c2 <__fp_round+0x20>
    34ae:	bb 0f       	add	r27, r27
    34b0:	40 f4       	brcc	.+16     	; 0x34c2 <__fp_round+0x20>
    34b2:	bf 2b       	or	r27, r31
    34b4:	11 f4       	brne	.+4      	; 0x34ba <__fp_round+0x18>
    34b6:	60 ff       	sbrs	r22, 0
    34b8:	04 c0       	rjmp	.+8      	; 0x34c2 <__fp_round+0x20>
    34ba:	6f 5f       	subi	r22, 0xFF	; 255
    34bc:	7f 4f       	sbci	r23, 0xFF	; 255
    34be:	8f 4f       	sbci	r24, 0xFF	; 255
    34c0:	9f 4f       	sbci	r25, 0xFF	; 255
    34c2:	08 95       	ret

000034c4 <__fp_split3>:
    34c4:	57 fd       	sbrc	r21, 7
    34c6:	90 58       	subi	r25, 0x80	; 128
    34c8:	44 0f       	add	r20, r20
    34ca:	55 1f       	adc	r21, r21
    34cc:	59 f0       	breq	.+22     	; 0x34e4 <__fp_splitA+0x10>
    34ce:	5f 3f       	cpi	r21, 0xFF	; 255
    34d0:	71 f0       	breq	.+28     	; 0x34ee <__fp_splitA+0x1a>
    34d2:	47 95       	ror	r20

000034d4 <__fp_splitA>:
    34d4:	88 0f       	add	r24, r24
    34d6:	97 fb       	bst	r25, 7
    34d8:	99 1f       	adc	r25, r25
    34da:	61 f0       	breq	.+24     	; 0x34f4 <__fp_splitA+0x20>
    34dc:	9f 3f       	cpi	r25, 0xFF	; 255
    34de:	79 f0       	breq	.+30     	; 0x34fe <__fp_splitA+0x2a>
    34e0:	87 95       	ror	r24
    34e2:	08 95       	ret
    34e4:	12 16       	cp	r1, r18
    34e6:	13 06       	cpc	r1, r19
    34e8:	14 06       	cpc	r1, r20
    34ea:	55 1f       	adc	r21, r21
    34ec:	f2 cf       	rjmp	.-28     	; 0x34d2 <__fp_split3+0xe>
    34ee:	46 95       	lsr	r20
    34f0:	f1 df       	rcall	.-30     	; 0x34d4 <__fp_splitA>
    34f2:	08 c0       	rjmp	.+16     	; 0x3504 <__fp_splitA+0x30>
    34f4:	16 16       	cp	r1, r22
    34f6:	17 06       	cpc	r1, r23
    34f8:	18 06       	cpc	r1, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	f1 cf       	rjmp	.-30     	; 0x34e0 <__fp_splitA+0xc>
    34fe:	86 95       	lsr	r24
    3500:	71 05       	cpc	r23, r1
    3502:	61 05       	cpc	r22, r1
    3504:	08 94       	sec
    3506:	08 95       	ret

00003508 <__fp_zero>:
    3508:	e8 94       	clt

0000350a <__fp_szero>:
    350a:	bb 27       	eor	r27, r27
    350c:	66 27       	eor	r22, r22
    350e:	77 27       	eor	r23, r23
    3510:	cb 01       	movw	r24, r22
    3512:	97 f9       	bld	r25, 7
    3514:	08 95       	ret

00003516 <__mulsf3>:
    3516:	0b d0       	rcall	.+22     	; 0x352e <__mulsf3x>
    3518:	c4 cf       	rjmp	.-120    	; 0x34a2 <__fp_round>
    351a:	b5 df       	rcall	.-150    	; 0x3486 <__fp_pscA>
    351c:	28 f0       	brcs	.+10     	; 0x3528 <__mulsf3+0x12>
    351e:	ba df       	rcall	.-140    	; 0x3494 <__fp_pscB>
    3520:	18 f0       	brcs	.+6      	; 0x3528 <__mulsf3+0x12>
    3522:	95 23       	and	r25, r21
    3524:	09 f0       	breq	.+2      	; 0x3528 <__mulsf3+0x12>
    3526:	a6 cf       	rjmp	.-180    	; 0x3474 <__fp_inf>
    3528:	ab cf       	rjmp	.-170    	; 0x3480 <__fp_nan>
    352a:	11 24       	eor	r1, r1
    352c:	ee cf       	rjmp	.-36     	; 0x350a <__fp_szero>

0000352e <__mulsf3x>:
    352e:	ca df       	rcall	.-108    	; 0x34c4 <__fp_split3>
    3530:	a0 f3       	brcs	.-24     	; 0x351a <__mulsf3+0x4>

00003532 <__mulsf3_pse>:
    3532:	95 9f       	mul	r25, r21
    3534:	d1 f3       	breq	.-12     	; 0x352a <__mulsf3+0x14>
    3536:	95 0f       	add	r25, r21
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	55 1f       	adc	r21, r21
    353c:	62 9f       	mul	r22, r18
    353e:	f0 01       	movw	r30, r0
    3540:	72 9f       	mul	r23, r18
    3542:	bb 27       	eor	r27, r27
    3544:	f0 0d       	add	r31, r0
    3546:	b1 1d       	adc	r27, r1
    3548:	63 9f       	mul	r22, r19
    354a:	aa 27       	eor	r26, r26
    354c:	f0 0d       	add	r31, r0
    354e:	b1 1d       	adc	r27, r1
    3550:	aa 1f       	adc	r26, r26
    3552:	64 9f       	mul	r22, r20
    3554:	66 27       	eor	r22, r22
    3556:	b0 0d       	add	r27, r0
    3558:	a1 1d       	adc	r26, r1
    355a:	66 1f       	adc	r22, r22
    355c:	82 9f       	mul	r24, r18
    355e:	22 27       	eor	r18, r18
    3560:	b0 0d       	add	r27, r0
    3562:	a1 1d       	adc	r26, r1
    3564:	62 1f       	adc	r22, r18
    3566:	73 9f       	mul	r23, r19
    3568:	b0 0d       	add	r27, r0
    356a:	a1 1d       	adc	r26, r1
    356c:	62 1f       	adc	r22, r18
    356e:	83 9f       	mul	r24, r19
    3570:	a0 0d       	add	r26, r0
    3572:	61 1d       	adc	r22, r1
    3574:	22 1f       	adc	r18, r18
    3576:	74 9f       	mul	r23, r20
    3578:	33 27       	eor	r19, r19
    357a:	a0 0d       	add	r26, r0
    357c:	61 1d       	adc	r22, r1
    357e:	23 1f       	adc	r18, r19
    3580:	84 9f       	mul	r24, r20
    3582:	60 0d       	add	r22, r0
    3584:	21 1d       	adc	r18, r1
    3586:	82 2f       	mov	r24, r18
    3588:	76 2f       	mov	r23, r22
    358a:	6a 2f       	mov	r22, r26
    358c:	11 24       	eor	r1, r1
    358e:	9f 57       	subi	r25, 0x7F	; 127
    3590:	50 40       	sbci	r21, 0x00	; 0
    3592:	8a f0       	brmi	.+34     	; 0x35b6 <__mulsf3_pse+0x84>
    3594:	e1 f0       	breq	.+56     	; 0x35ce <__mulsf3_pse+0x9c>
    3596:	88 23       	and	r24, r24
    3598:	4a f0       	brmi	.+18     	; 0x35ac <__mulsf3_pse+0x7a>
    359a:	ee 0f       	add	r30, r30
    359c:	ff 1f       	adc	r31, r31
    359e:	bb 1f       	adc	r27, r27
    35a0:	66 1f       	adc	r22, r22
    35a2:	77 1f       	adc	r23, r23
    35a4:	88 1f       	adc	r24, r24
    35a6:	91 50       	subi	r25, 0x01	; 1
    35a8:	50 40       	sbci	r21, 0x00	; 0
    35aa:	a9 f7       	brne	.-22     	; 0x3596 <__mulsf3_pse+0x64>
    35ac:	9e 3f       	cpi	r25, 0xFE	; 254
    35ae:	51 05       	cpc	r21, r1
    35b0:	70 f0       	brcs	.+28     	; 0x35ce <__mulsf3_pse+0x9c>
    35b2:	60 cf       	rjmp	.-320    	; 0x3474 <__fp_inf>
    35b4:	aa cf       	rjmp	.-172    	; 0x350a <__fp_szero>
    35b6:	5f 3f       	cpi	r21, 0xFF	; 255
    35b8:	ec f3       	brlt	.-6      	; 0x35b4 <__mulsf3_pse+0x82>
    35ba:	98 3e       	cpi	r25, 0xE8	; 232
    35bc:	dc f3       	brlt	.-10     	; 0x35b4 <__mulsf3_pse+0x82>
    35be:	86 95       	lsr	r24
    35c0:	77 95       	ror	r23
    35c2:	67 95       	ror	r22
    35c4:	b7 95       	ror	r27
    35c6:	f7 95       	ror	r31
    35c8:	e7 95       	ror	r30
    35ca:	9f 5f       	subi	r25, 0xFF	; 255
    35cc:	c1 f7       	brne	.-16     	; 0x35be <__mulsf3_pse+0x8c>
    35ce:	fe 2b       	or	r31, r30
    35d0:	88 0f       	add	r24, r24
    35d2:	91 1d       	adc	r25, r1
    35d4:	96 95       	lsr	r25
    35d6:	87 95       	ror	r24
    35d8:	97 f9       	bld	r25, 7
    35da:	08 95       	ret

000035dc <_spiCallBack>:
    35dc:	81 b3       	in	r24, 0x11	; 17
    35de:	8f 60       	ori	r24, 0x0F	; 15
    35e0:	81 bb       	out	0x11, r24	; 17
    35e2:	28 98       	cbi	0x05, 0	; 5
    35e4:	28 9a       	sbi	0x05, 0	; 5
    35e6:	21 b3       	in	r18, 0x11	; 17
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	00 90 f7 0e 	lds	r0, 0x0EF7	; 0x800ef7 <_digitNo>
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <_spiCallBack+0x1a>
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	0a 94       	dec	r0
    35f8:	e2 f7       	brpl	.-8      	; 0x35f2 <_spiCallBack+0x16>
    35fa:	80 95       	com	r24
    35fc:	82 23       	and	r24, r18
    35fe:	81 bb       	out	0x11, r24	; 17
    3600:	e0 91 c7 0e 	lds	r30, 0x0EC7	; 0x800ec7 <_displayDoneCallBack>
    3604:	f0 91 c8 0e 	lds	r31, 0x0EC8	; 0x800ec8 <_displayDoneCallBack+0x1>
    3608:	30 97       	sbiw	r30, 0x00	; 0
    360a:	09 f0       	breq	.+2      	; 0x360e <_spiCallBack+0x32>
    360c:	19 95       	eicall
    360e:	08 95       	ret

00003610 <display_7seg_displayErr>:
    3610:	9f b7       	in	r25, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	e3 ef       	ldi	r30, 0xF3	; 243
    3616:	fe e0       	ldi	r31, 0x0E	; 14
    3618:	10 82       	st	Z, r1
    361a:	8e e9       	ldi	r24, 0x9E	; 158
    361c:	81 83       	std	Z+1, r24	; 0x01
    361e:	8a e0       	ldi	r24, 0x0A	; 10
    3620:	82 83       	std	Z+2, r24	; 0x02
    3622:	83 83       	std	Z+3, r24	; 0x03
    3624:	9f bf       	out	0x3f, r25	; 63
    3626:	08 95       	ret

00003628 <display_7seg_display>:
    3628:	bf 92       	push	r11
    362a:	cf 92       	push	r12
    362c:	df 92       	push	r13
    362e:	ef 92       	push	r14
    3630:	ff 92       	push	r15
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	6b 01       	movw	r12, r22
    363c:	7c 01       	movw	r14, r24
    363e:	b4 2e       	mov	r11, r20
    3640:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_maxHexSegmentindex>
    3644:	83 e0       	ldi	r24, 0x03	; 3
    3646:	84 17       	cp	r24, r20
    3648:	78 f1       	brcs	.+94     	; 0x36a8 <display_7seg_display+0x80>
    364a:	64 2f       	mov	r22, r20
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	d3 de       	rcall	.-602    	; 0x33fa <__floatunsisf>
    3654:	9b 01       	movw	r18, r22
    3656:	ac 01       	movw	r20, r24
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	80 e2       	ldi	r24, 0x20	; 32
    365e:	91 e4       	ldi	r25, 0x41	; 65
    3660:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pow>
    3664:	a7 01       	movw	r20, r14
    3666:	96 01       	movw	r18, r12
    3668:	56 df       	rcall	.-340    	; 0x3516 <__mulsf3>
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	5f e3       	ldi	r21, 0x3F	; 63
    3672:	c6 dd       	rcall	.-1140   	; 0x3200 <__addsf3>
    3674:	0e 94 78 25 	call	0x4af0	; 0x4af0 <floor>
    3678:	8f de       	rcall	.-738    	; 0x3398 <__fixsfsi>
    367a:	ab 01       	movw	r20, r22
    367c:	77 23       	and	r23, r23
    367e:	64 f4       	brge	.+24     	; 0x3698 <display_7seg_display+0x70>
    3680:	44 27       	eor	r20, r20
    3682:	55 27       	eor	r21, r21
    3684:	46 1b       	sub	r20, r22
    3686:	57 0b       	sbc	r21, r23
    3688:	21 e0       	ldi	r18, 0x01	; 1
    368a:	48 3e       	cpi	r20, 0xE8	; 232
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	58 07       	cpc	r21, r24
    3690:	0c f4       	brge	.+2      	; 0x3694 <display_7seg_display+0x6c>
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	11 e0       	ldi	r17, 0x01	; 1
    3696:	0c c0       	rjmp	.+24     	; 0x36b0 <display_7seg_display+0x88>
    3698:	21 e0       	ldi	r18, 0x01	; 1
    369a:	40 31       	cpi	r20, 0x10	; 16
    369c:	87 e2       	ldi	r24, 0x27	; 39
    369e:	58 07       	cpc	r21, r24
    36a0:	0c f4       	brge	.+2      	; 0x36a4 <display_7seg_display+0x7c>
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	10 e0       	ldi	r17, 0x00	; 0
    36a6:	04 c0       	rjmp	.+8      	; 0x36b0 <display_7seg_display+0x88>
    36a8:	40 e0       	ldi	r20, 0x00	; 0
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	21 e0       	ldi	r18, 0x01	; 1
    36ae:	10 e0       	ldi	r17, 0x00	; 0
    36b0:	0f b7       	in	r16, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	22 23       	and	r18, r18
    36b6:	11 f0       	breq	.+4      	; 0x36bc <display_7seg_display+0x94>
    36b8:	ab df       	rcall	.-170    	; 0x3610 <display_7seg_displayErr>
    36ba:	51 c0       	rjmp	.+162    	; 0x375e <display_7seg_display+0x136>
    36bc:	c7 ef       	ldi	r28, 0xF7	; 247
    36be:	de e0       	ldi	r29, 0x0E	; 14
    36c0:	0f 2e       	mov	r0, r31
    36c2:	f3 ef       	ldi	r31, 0xF3	; 243
    36c4:	cf 2e       	mov	r12, r31
    36c6:	fe e0       	ldi	r31, 0x0E	; 14
    36c8:	df 2e       	mov	r13, r31
    36ca:	f0 2d       	mov	r31, r0
    36cc:	0f 2e       	mov	r0, r31
    36ce:	fa e0       	ldi	r31, 0x0A	; 10
    36d0:	ef 2e       	mov	r14, r31
    36d2:	f1 2c       	mov	r15, r1
    36d4:	f0 2d       	mov	r31, r0
    36d6:	ca 01       	movw	r24, r20
    36d8:	b7 01       	movw	r22, r14
    36da:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__divmodhi4>
    36de:	fc 01       	movw	r30, r24
    36e0:	ef 50       	subi	r30, 0x0F	; 15
    36e2:	fc 4f       	sbci	r31, 0xFC	; 252
    36e4:	80 81       	ld	r24, Z
    36e6:	8a 93       	st	-Y, r24
    36e8:	46 2f       	mov	r20, r22
    36ea:	57 2f       	mov	r21, r23
    36ec:	cc 15       	cp	r28, r12
    36ee:	dd 05       	cpc	r29, r13
    36f0:	91 f7       	brne	.-28     	; 0x36d6 <display_7seg_display+0xae>
    36f2:	43 e0       	ldi	r20, 0x03	; 3
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	4b 19       	sub	r20, r11
    36f8:	51 09       	sbc	r21, r1
    36fa:	14 16       	cp	r1, r20
    36fc:	15 06       	cpc	r1, r21
    36fe:	f4 f4       	brge	.+60     	; 0x373c <display_7seg_display+0x114>
    3700:	80 91 f3 0e 	lds	r24, 0x0EF3	; 0x800ef3 <_digitSegments>
    3704:	8c 3f       	cpi	r24, 0xFC	; 252
    3706:	49 f0       	breq	.+18     	; 0x371a <display_7seg_display+0xf2>
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	19 c0       	rjmp	.+50     	; 0x373e <display_7seg_display+0x116>
    370c:	fc 01       	movw	r30, r24
    370e:	ed 50       	subi	r30, 0x0D	; 13
    3710:	f1 4f       	sbci	r31, 0xF1	; 241
    3712:	30 81       	ld	r19, Z
    3714:	3c 3f       	cpi	r19, 0xFC	; 252
    3716:	21 f0       	breq	.+8      	; 0x3720 <display_7seg_display+0xf8>
    3718:	12 c0       	rjmp	.+36     	; 0x373e <display_7seg_display+0x116>
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	fc 01       	movw	r30, r24
    3722:	ed 50       	subi	r30, 0x0D	; 13
    3724:	f1 4f       	sbci	r31, 0xF1	; 241
    3726:	10 82       	st	Z, r1
    3728:	62 2f       	mov	r22, r18
    372a:	2f 5f       	subi	r18, 0xFF	; 255
    372c:	82 2f       	mov	r24, r18
    372e:	02 2e       	mov	r0, r18
    3730:	00 0c       	add	r0, r0
    3732:	99 0b       	sbc	r25, r25
    3734:	84 17       	cp	r24, r20
    3736:	95 07       	cpc	r25, r21
    3738:	4c f3       	brlt	.-46     	; 0x370c <display_7seg_display+0xe4>
    373a:	01 c0       	rjmp	.+2      	; 0x373e <display_7seg_display+0x116>
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	11 23       	and	r17, r17
    3740:	31 f0       	breq	.+12     	; 0x374e <display_7seg_display+0x126>
    3742:	e6 2f       	mov	r30, r22
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	ed 50       	subi	r30, 0x0D	; 13
    3748:	f1 4f       	sbci	r31, 0xF1	; 241
    374a:	82 e0       	ldi	r24, 0x02	; 2
    374c:	80 83       	st	Z, r24
    374e:	bb 20       	and	r11, r11
    3750:	31 f0       	breq	.+12     	; 0x375e <display_7seg_display+0x136>
    3752:	fa 01       	movw	r30, r20
    3754:	ed 50       	subi	r30, 0x0D	; 13
    3756:	f1 4f       	sbci	r31, 0xF1	; 241
    3758:	80 81       	ld	r24, Z
    375a:	81 60       	ori	r24, 0x01	; 1
    375c:	80 83       	st	Z, r24
    375e:	0f bf       	out	0x3f, r16	; 63
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	ff 90       	pop	r15
    376a:	ef 90       	pop	r14
    376c:	df 90       	pop	r13
    376e:	cf 90       	pop	r12
    3770:	bf 90       	pop	r11
    3772:	08 95       	ret

00003774 <display_7seg_powerUp>:
    3774:	85 b5       	in	r24, 0x25	; 37
    3776:	85 60       	ori	r24, 0x05	; 5
    3778:	85 bd       	out	0x25, r24	; 37
    377a:	08 95       	ret

0000377c <display_7seg_powerDown>:
    377c:	85 b5       	in	r24, 0x25	; 37
    377e:	88 7f       	andi	r24, 0xF8	; 248
    3780:	85 bd       	out	0x25, r24	; 37
    3782:	81 b3       	in	r24, 0x11	; 17
    3784:	8f 60       	ori	r24, 0x0F	; 15
    3786:	81 bb       	out	0x11, r24	; 17
    3788:	08 95       	ret

0000378a <display_7seg_initialise>:
    378a:	8f 92       	push	r8
    378c:	af 92       	push	r10
    378e:	cf 92       	push	r12
    3790:	ef 92       	push	r14
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	ec 01       	movw	r28, r24
    379c:	80 b3       	in	r24, 0x10	; 16
    379e:	8f 60       	ori	r24, 0x0F	; 15
    37a0:	80 bb       	out	0x10, r24	; 16
    37a2:	81 b3       	in	r24, 0x11	; 17
    37a4:	8f 60       	ori	r24, 0x0F	; 15
    37a6:	81 bb       	out	0x11, r24	; 17
    37a8:	20 9a       	sbi	0x04, 0	; 4
    37aa:	8e ee       	ldi	r24, 0xEE	; 238
    37ac:	9a e1       	ldi	r25, 0x1A	; 26
    37ae:	9f 93       	push	r25
    37b0:	8f 93       	push	r24
    37b2:	81 2c       	mov	r8, r1
    37b4:	a1 2c       	mov	r10, r1
    37b6:	c1 2c       	mov	r12, r1
    37b8:	e1 2c       	mov	r14, r1
    37ba:	00 e0       	ldi	r16, 0x00	; 0
    37bc:	10 e0       	ldi	r17, 0x00	; 0
    37be:	20 e2       	ldi	r18, 0x20	; 32
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	63 e0       	ldi	r22, 0x03	; 3
    37c4:	80 e1       	ldi	r24, 0x10	; 16
    37c6:	f8 d5       	rcall	.+3056   	; 0x43b8 <spi_create>
    37c8:	90 93 f9 0e 	sts	0x0EF9, r25	; 0x800ef9 <_spi+0x1>
    37cc:	80 93 f8 0e 	sts	0x0EF8, r24	; 0x800ef8 <_spi>
    37d0:	89 e1       	ldi	r24, 0x19	; 25
    37d2:	87 bd       	out	0x27, r24	; 39
    37d4:	84 b5       	in	r24, 0x24	; 36
    37d6:	82 60       	ori	r24, 0x02	; 2
    37d8:	84 bd       	out	0x24, r24	; 36
    37da:	ee e6       	ldi	r30, 0x6E	; 110
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	82 60       	ori	r24, 0x02	; 2
    37e2:	80 83       	st	Z, r24
    37e4:	cb df       	rcall	.-106    	; 0x377c <display_7seg_powerDown>
    37e6:	d0 93 c8 0e 	sts	0x0EC8, r29	; 0x800ec8 <_displayDoneCallBack+0x1>
    37ea:	c0 93 c7 0e 	sts	0x0EC7, r28	; 0x800ec7 <_displayDoneCallBack>
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	ef 90       	pop	r14
    37fc:	cf 90       	pop	r12
    37fe:	af 90       	pop	r10
    3800:	8f 90       	pop	r8
    3802:	08 95       	ret

00003804 <__vector_21>:
    3804:	1f 92       	push	r1
    3806:	0f 92       	push	r0
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	0f 92       	push	r0
    380c:	11 24       	eor	r1, r1
    380e:	0b b6       	in	r0, 0x3b	; 59
    3810:	0f 92       	push	r0
    3812:	2f 93       	push	r18
    3814:	3f 93       	push	r19
    3816:	4f 93       	push	r20
    3818:	5f 93       	push	r21
    381a:	6f 93       	push	r22
    381c:	7f 93       	push	r23
    381e:	8f 93       	push	r24
    3820:	9f 93       	push	r25
    3822:	af 93       	push	r26
    3824:	bf 93       	push	r27
    3826:	ef 93       	push	r30
    3828:	ff 93       	push	r31
    382a:	80 91 ca 0e 	lds	r24, 0x0ECA	; 0x800eca <_maxHexSegmentindex>
    382e:	88 23       	and	r24, r24
    3830:	69 f1       	breq	.+90     	; 0x388c <__vector_21+0x88>
    3832:	20 91 cb 0e 	lds	r18, 0x0ECB	; 0x800ecb <_intCounter>
    3836:	30 91 cc 0e 	lds	r19, 0x0ECC	; 0x800ecc <_intCounter+0x1>
    383a:	25 3f       	cpi	r18, 0xF5	; 245
    383c:	91 e0       	ldi	r25, 0x01	; 1
    383e:	39 07       	cpc	r19, r25
    3840:	38 f4       	brcc	.+14     	; 0x3850 <__vector_21+0x4c>
    3842:	2f 5f       	subi	r18, 0xFF	; 255
    3844:	3f 4f       	sbci	r19, 0xFF	; 255
    3846:	30 93 cc 0e 	sts	0x0ECC, r19	; 0x800ecc <_intCounter+0x1>
    384a:	20 93 cb 0e 	sts	0x0ECB, r18	; 0x800ecb <_intCounter>
    384e:	1e c0       	rjmp	.+60     	; 0x388c <__vector_21+0x88>
    3850:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <_intCounter+0x1>
    3854:	10 92 cb 0e 	sts	0x0ECB, r1	; 0x800ecb <_intCounter>
    3858:	e0 91 c9 0e 	lds	r30, 0x0EC9	; 0x800ec9 <_scrollIndex>
    385c:	2e 2f       	mov	r18, r30
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	04 97       	sbiw	r24, 0x04	; 4
    3864:	28 17       	cp	r18, r24
    3866:	39 07       	cpc	r19, r25
    3868:	14 f4       	brge	.+4      	; 0x386e <__vector_21+0x6a>
    386a:	ef 5f       	subi	r30, 0xFF	; 255
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <__vector_21+0x6c>
    386e:	e0 e0       	ldi	r30, 0x00	; 0
    3870:	e0 93 c9 0e 	sts	0x0EC9, r30	; 0x800ec9 <_scrollIndex>
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	e3 53       	subi	r30, 0x33	; 51
    3878:	f1 4f       	sbci	r31, 0xF1	; 241
    387a:	a3 ef       	ldi	r26, 0xF3	; 243
    387c:	be e0       	ldi	r27, 0x0E	; 14
    387e:	27 ef       	ldi	r18, 0xF7	; 247
    3880:	3e e0       	ldi	r19, 0x0E	; 14
    3882:	81 91       	ld	r24, Z+
    3884:	8d 93       	st	X+, r24
    3886:	a2 17       	cp	r26, r18
    3888:	b3 07       	cpc	r27, r19
    388a:	d9 f7       	brne	.-10     	; 0x3882 <__vector_21+0x7e>
    388c:	80 91 f7 0e 	lds	r24, 0x0EF7	; 0x800ef7 <_digitNo>
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	01 96       	adiw	r24, 0x01	; 1
    3894:	83 70       	andi	r24, 0x03	; 3
    3896:	90 78       	andi	r25, 0x80	; 128
    3898:	99 23       	and	r25, r25
    389a:	24 f4       	brge	.+8      	; 0x38a4 <__vector_21+0xa0>
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	8c 6f       	ori	r24, 0xFC	; 252
    38a0:	9f 6f       	ori	r25, 0xFF	; 255
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <_digitNo>
    38a8:	99 27       	eor	r25, r25
    38aa:	fc 01       	movw	r30, r24
    38ac:	ed 50       	subi	r30, 0x0D	; 13
    38ae:	f1 4f       	sbci	r31, 0xF1	; 241
    38b0:	60 81       	ld	r22, Z
    38b2:	60 95       	com	r22
    38b4:	80 91 f8 0e 	lds	r24, 0x0EF8	; 0x800ef8 <_spi>
    38b8:	90 91 f9 0e 	lds	r25, 0x0EF9	; 0x800ef9 <_spi+0x1>
    38bc:	4f d6       	rcall	.+3230   	; 0x455c <spi_sendByte>
    38be:	ff 91       	pop	r31
    38c0:	ef 91       	pop	r30
    38c2:	bf 91       	pop	r27
    38c4:	af 91       	pop	r26
    38c6:	9f 91       	pop	r25
    38c8:	8f 91       	pop	r24
    38ca:	7f 91       	pop	r23
    38cc:	6f 91       	pop	r22
    38ce:	5f 91       	pop	r21
    38d0:	4f 91       	pop	r20
    38d2:	3f 91       	pop	r19
    38d4:	2f 91       	pop	r18
    38d6:	0f 90       	pop	r0
    38d8:	0b be       	out	0x3b, r0	; 59
    38da:	0f 90       	pop	r0
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	0f 90       	pop	r0
    38e0:	1f 90       	pop	r1
    38e2:	18 95       	reti

000038e4 <_hihTwiCallback>:
    38e4:	65 30       	cpi	r22, 0x05	; 5
    38e6:	f1 f4       	brne	.+60     	; 0x3924 <_hihTwiCallback+0x40>
    38e8:	fa 01       	movw	r30, r20
    38ea:	80 81       	ld	r24, Z
    38ec:	8f 73       	andi	r24, 0x3F	; 63
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	98 2f       	mov	r25, r24
    38f2:	88 27       	eor	r24, r24
    38f4:	21 81       	ldd	r18, Z+1	; 0x01
    38f6:	82 2b       	or	r24, r18
    38f8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    38fc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	f0 e4       	ldi	r31, 0x40	; 64
    3904:	8f 9f       	mul	r24, r31
    3906:	c0 01       	movw	r24, r0
    3908:	11 24       	eor	r1, r1
    390a:	fa 01       	movw	r30, r20
    390c:	23 81       	ldd	r18, Z+3	; 0x03
    390e:	26 95       	lsr	r18
    3910:	26 95       	lsr	r18
    3912:	82 2b       	or	r24, r18
    3914:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3918:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 fa 0e 	sts	0x0EFA, r24	; 0x800efa <_measuringIsReady>
    3922:	08 95       	ret
    3924:	64 30       	cpi	r22, 0x04	; 4
    3926:	51 f0       	breq	.+20     	; 0x393c <_hihTwiCallback+0x58>
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e4       	ldi	r25, 0x40	; 64
    392c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3930:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3934:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3938:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    393c:	08 95       	ret

0000393e <hih8120_initialise>:
    393e:	0f 93       	push	r16
    3940:	1f 93       	push	r17
    3942:	02 e7       	ldi	r16, 0x72	; 114
    3944:	1c e1       	ldi	r17, 0x1C	; 28
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	34 e2       	ldi	r19, 0x24	; 36
    394a:	44 ef       	ldi	r20, 0xF4	; 244
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	60 e0       	ldi	r22, 0x00	; 0
    3950:	87 e2       	ldi	r24, 0x27	; 39
    3952:	25 d7       	rcall	.+3658   	; 0x479e <twiCreate>
    3954:	90 93 fc 0e 	sts	0x0EFC, r25	; 0x800efc <_hih8120Handler+0x1>
    3958:	80 93 fb 0e 	sts	0x0EFB, r24	; 0x800efb <_hih8120Handler>
    395c:	21 e0       	ldi	r18, 0x01	; 1
    395e:	89 2b       	or	r24, r25
    3960:	09 f0       	breq	.+2      	; 0x3964 <hih8120_initialise+0x26>
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	82 2f       	mov	r24, r18
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <hih8120_wakeup>:
    396c:	80 91 fb 0e 	lds	r24, 0x0EFB	; 0x800efb <_hih8120Handler>
    3970:	90 91 fc 0e 	lds	r25, 0x0EFC	; 0x800efc <_hih8120Handler+0x1>
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	51 f0       	breq	.+20     	; 0x398c <hih8120_wakeup+0x20>
    3978:	40 e0       	ldi	r20, 0x00	; 0
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	60 d7       	rcall	.+3776   	; 0x4840 <twiTransmit>
    3980:	84 30       	cpi	r24, 0x04	; 4
    3982:	31 f4       	brne	.+12     	; 0x3990 <hih8120_wakeup+0x24>
    3984:	10 92 fa 0e 	sts	0x0EFA, r1	; 0x800efa <_measuringIsReady>
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	08 95       	ret
    398c:	82 e0       	ldi	r24, 0x02	; 2
    398e:	08 95       	ret
    3990:	83 e0       	ldi	r24, 0x03	; 3
    3992:	08 95       	ret

00003994 <hih8120_measure>:
    3994:	80 91 fb 0e 	lds	r24, 0x0EFB	; 0x800efb <_hih8120Handler>
    3998:	90 91 fc 0e 	lds	r25, 0x0EFC	; 0x800efc <_hih8120Handler+0x1>
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	31 f0       	breq	.+12     	; 0x39ac <hih8120_measure+0x18>
    39a0:	64 e0       	ldi	r22, 0x04	; 4
    39a2:	9a d7       	rcall	.+3892   	; 0x48d8 <twiReceive>
    39a4:	85 30       	cpi	r24, 0x05	; 5
    39a6:	21 f0       	breq	.+8      	; 0x39b0 <hih8120_measure+0x1c>
    39a8:	83 e0       	ldi	r24, 0x03	; 3
    39aa:	08 95       	ret
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	08 95       	ret
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	08 95       	ret

000039b4 <hih8120_getHumidity>:
    39b4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    39b8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	1c dd       	rcall	.-1480   	; 0x33fa <__floatunsisf>
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	48 ec       	ldi	r20, 0xC8	; 200
    39c8:	52 e4       	ldi	r21, 0x42	; 66
    39ca:	a5 dd       	rcall	.-1206   	; 0x3516 <__mulsf3>
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	38 ef       	ldi	r19, 0xF8	; 248
    39d0:	4f e7       	ldi	r20, 0x7F	; 127
    39d2:	56 e4       	ldi	r21, 0x46	; 70
    39d4:	79 cc       	rjmp	.-1806   	; 0x32c8 <__divsf3>
    39d6:	08 95       	ret

000039d8 <hih8120_getTemperature>:
    39d8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    39dc:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	0a dd       	rcall	.-1516   	; 0x33fa <__floatunsisf>
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	45 e2       	ldi	r20, 0x25	; 37
    39ec:	53 e4       	ldi	r21, 0x43	; 67
    39ee:	93 dd       	rcall	.-1242   	; 0x3516 <__mulsf3>
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	38 ef       	ldi	r19, 0xF8	; 248
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	56 e4       	ldi	r21, 0x46	; 70
    39f8:	67 dc       	rcall	.-1842   	; 0x32c8 <__divsf3>
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	52 e4       	ldi	r21, 0x42	; 66
    3a02:	fd cb       	rjmp	.-2054   	; 0x31fe <__subsf3>
    3a04:	08 95       	ret

00003a06 <_serialCallBack>:
    3a06:	80 91 00 0f 	lds	r24, 0x0F00	; 0x800f00 <crc_sum.1945>
    3a0a:	86 0f       	add	r24, r22
    3a0c:	80 93 00 0f 	sts	0x0F00, r24	; 0x800f00 <crc_sum.1945>
    3a10:	90 91 03 0f 	lds	r25, 0x0F03	; 0x800f03 <_mh_state>
    3a14:	91 30       	cpi	r25, 0x01	; 1
    3a16:	79 f0       	breq	.+30     	; 0x3a36 <_serialCallBack+0x30>
    3a18:	28 f0       	brcs	.+10     	; 0x3a24 <_serialCallBack+0x1e>
    3a1a:	92 30       	cpi	r25, 0x02	; 2
    3a1c:	a9 f0       	breq	.+42     	; 0x3a48 <_serialCallBack+0x42>
    3a1e:	93 30       	cpi	r25, 0x03	; 3
    3a20:	19 f1       	breq	.+70     	; 0x3a68 <_serialCallBack+0x62>
    3a22:	08 95       	ret
    3a24:	6f 3f       	cpi	r22, 0xFF	; 255
    3a26:	09 f0       	breq	.+2      	; 0x3a2a <_serialCallBack+0x24>
    3a28:	48 c0       	rjmp	.+144    	; 0x3aba <_serialCallBack+0xb4>
    3a2a:	10 92 00 0f 	sts	0x0F00, r1	; 0x800f00 <crc_sum.1945>
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <_mh_state>
    3a34:	08 95       	ret
    3a36:	66 38       	cpi	r22, 0x86	; 134
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <_serialCallBack+0x36>
    3a3a:	3f c0       	rjmp	.+126    	; 0x3aba <_serialCallBack+0xb4>
    3a3c:	10 92 ff 0e 	sts	0x0EFF, r1	; 0x800eff <inDex.1943>
    3a40:	82 e0       	ldi	r24, 0x02	; 2
    3a42:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <_mh_state>
    3a46:	08 95       	ret
    3a48:	e0 91 ff 0e 	lds	r30, 0x0EFF	; 0x800eff <inDex.1943>
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	8e 0f       	add	r24, r30
    3a50:	80 93 ff 0e 	sts	0x0EFF, r24	; 0x800eff <inDex.1943>
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	e3 50       	subi	r30, 0x03	; 3
    3a58:	f1 4f       	sbci	r31, 0xF1	; 241
    3a5a:	60 83       	st	Z, r22
    3a5c:	82 30       	cpi	r24, 0x02	; 2
    3a5e:	69 f5       	brne	.+90     	; 0x3aba <_serialCallBack+0xb4>
    3a60:	83 e0       	ldi	r24, 0x03	; 3
    3a62:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <_mh_state>
    3a66:	08 95       	ret
    3a68:	90 91 ff 0e 	lds	r25, 0x0EFF	; 0x800eff <inDex.1943>
    3a6c:	21 e0       	ldi	r18, 0x01	; 1
    3a6e:	29 0f       	add	r18, r25
    3a70:	20 93 ff 0e 	sts	0x0EFF, r18	; 0x800eff <inDex.1943>
    3a74:	96 30       	cpi	r25, 0x06	; 6
    3a76:	09 f5       	brne	.+66     	; 0x3aba <_serialCallBack+0xb4>
    3a78:	81 11       	cpse	r24, r1
    3a7a:	0e c0       	rjmp	.+28     	; 0x3a98 <_serialCallBack+0x92>
    3a7c:	ed ef       	ldi	r30, 0xFD	; 253
    3a7e:	fe e0       	ldi	r31, 0x0E	; 14
    3a80:	80 81       	ld	r24, Z
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	98 2f       	mov	r25, r24
    3a86:	88 27       	eor	r24, r24
    3a88:	21 81       	ldd	r18, Z+1	; 0x01
    3a8a:	82 0f       	add	r24, r18
    3a8c:	91 1d       	adc	r25, r1
    3a8e:	90 93 05 0f 	sts	0x0F05, r25	; 0x800f05 <_ppm+0x1>
    3a92:	80 93 04 0f 	sts	0x0F04, r24	; 0x800f04 <_ppm>
    3a96:	04 c0       	rjmp	.+8      	; 0x3aa0 <_serialCallBack+0x9a>
    3a98:	10 92 05 0f 	sts	0x0F05, r1	; 0x800f05 <_ppm+0x1>
    3a9c:	10 92 04 0f 	sts	0x0F04, r1	; 0x800f04 <_ppm>
    3aa0:	10 92 03 0f 	sts	0x0F03, r1	; 0x800f03 <_mh_state>
    3aa4:	e0 91 01 0f 	lds	r30, 0x0F01	; 0x800f01 <_appCallBack>
    3aa8:	f0 91 02 0f 	lds	r31, 0x0F02	; 0x800f02 <_appCallBack+0x1>
    3aac:	30 97       	sbiw	r30, 0x00	; 0
    3aae:	29 f0       	breq	.+10     	; 0x3aba <_serialCallBack+0xb4>
    3ab0:	80 91 04 0f 	lds	r24, 0x0F04	; 0x800f04 <_ppm>
    3ab4:	90 91 05 0f 	lds	r25, 0x0F05	; 0x800f05 <_ppm+0x1>
    3ab8:	19 95       	eicall
    3aba:	08 95       	ret

00003abc <mh_z19_initialise>:
    3abc:	8f 92       	push	r8
    3abe:	9f 92       	push	r9
    3ac0:	af 92       	push	r10
    3ac2:	cf 92       	push	r12
    3ac4:	ef 92       	push	r14
    3ac6:	0f 93       	push	r16
    3ac8:	0f 2e       	mov	r0, r31
    3aca:	f3 e0       	ldi	r31, 0x03	; 3
    3acc:	8f 2e       	mov	r8, r31
    3ace:	fd e1       	ldi	r31, 0x1D	; 29
    3ad0:	9f 2e       	mov	r9, r31
    3ad2:	f0 2d       	mov	r31, r0
    3ad4:	68 94       	set
    3ad6:	aa 24       	eor	r10, r10
    3ad8:	a4 f8       	bld	r10, 4
    3ada:	68 94       	set
    3adc:	cc 24       	eor	r12, r12
    3ade:	c4 f8       	bld	r12, 4
    3ae0:	e1 2c       	mov	r14, r1
    3ae2:	00 e0       	ldi	r16, 0x00	; 0
    3ae4:	23 e0       	ldi	r18, 0x03	; 3
    3ae6:	40 e8       	ldi	r20, 0x80	; 128
    3ae8:	55 e2       	ldi	r21, 0x25	; 37
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	4b d0       	rcall	.+150    	; 0x3b86 <serial_create>
    3af0:	90 93 07 0f 	sts	0x0F07, r25	; 0x800f07 <_serial+0x1>
    3af4:	80 93 06 0f 	sts	0x0F06, r24	; 0x800f06 <_serial>
    3af8:	0f 91       	pop	r16
    3afa:	ef 90       	pop	r14
    3afc:	cf 90       	pop	r12
    3afe:	af 90       	pop	r10
    3b00:	9f 90       	pop	r9
    3b02:	8f 90       	pop	r8
    3b04:	08 95       	ret

00003b06 <mh_z19_takeMeassuring>:
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	29 97       	sbiw	r28, 0x09	; 9
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	89 e0       	ldi	r24, 0x09	; 9
    3b1c:	e2 e2       	ldi	r30, 0x22	; 34
    3b1e:	f2 e0       	ldi	r31, 0x02	; 2
    3b20:	9e 01       	movw	r18, r28
    3b22:	2f 5f       	subi	r18, 0xFF	; 255
    3b24:	3f 4f       	sbci	r19, 0xFF	; 255
    3b26:	d9 01       	movw	r26, r18
    3b28:	01 90       	ld	r0, Z+
    3b2a:	0d 92       	st	X+, r0
    3b2c:	8a 95       	dec	r24
    3b2e:	e1 f7       	brne	.-8      	; 0x3b28 <mh_z19_takeMeassuring+0x22>
    3b30:	10 92 05 0f 	sts	0x0F05, r1	; 0x800f05 <_ppm+0x1>
    3b34:	10 92 04 0f 	sts	0x0F04, r1	; 0x800f04 <_ppm>
    3b38:	80 91 06 0f 	lds	r24, 0x0F06	; 0x800f06 <_serial>
    3b3c:	90 91 07 0f 	lds	r25, 0x0F07	; 0x800f07 <_serial+0x1>
    3b40:	00 97       	sbiw	r24, 0x00	; 0
    3b42:	31 f0       	breq	.+12     	; 0x3b50 <mh_z19_takeMeassuring+0x4a>
    3b44:	42 2f       	mov	r20, r18
    3b46:	53 2f       	mov	r21, r19
    3b48:	69 e0       	ldi	r22, 0x09	; 9
    3b4a:	e9 d0       	rcall	.+466    	; 0x3d1e <serial_sendBytes>
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	01 c0       	rjmp	.+2      	; 0x3b52 <mh_z19_takeMeassuring+0x4c>
    3b50:	82 e0       	ldi	r24, 0x02	; 2
    3b52:	29 96       	adiw	r28, 0x09	; 9
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	08 95       	ret

00003b64 <mh_z19_getCo2Ppm>:
    3b64:	20 91 04 0f 	lds	r18, 0x0F04	; 0x800f04 <_ppm>
    3b68:	30 91 05 0f 	lds	r19, 0x0F05	; 0x800f05 <_ppm+0x1>
    3b6c:	21 15       	cp	r18, r1
    3b6e:	31 05       	cpc	r19, r1
    3b70:	29 f4       	brne	.+10     	; 0x3b7c <mh_z19_getCo2Ppm+0x18>
    3b72:	fc 01       	movw	r30, r24
    3b74:	11 82       	std	Z+1, r1	; 0x01
    3b76:	10 82       	st	Z, r1
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	08 95       	ret
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	31 83       	std	Z+1, r19	; 0x01
    3b80:	20 83       	st	Z, r18
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	08 95       	ret

00003b86 <serial_create>:
    3b86:	2f 92       	push	r2
    3b88:	3f 92       	push	r3
    3b8a:	4f 92       	push	r4
    3b8c:	5f 92       	push	r5
    3b8e:	6f 92       	push	r6
    3b90:	7f 92       	push	r7
    3b92:	8f 92       	push	r8
    3b94:	9f 92       	push	r9
    3b96:	af 92       	push	r10
    3b98:	cf 92       	push	r12
    3b9a:	ef 92       	push	r14
    3b9c:	ff 92       	push	r15
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
    3baa:	f8 2e       	mov	r15, r24
    3bac:	2a 01       	movw	r4, r20
    3bae:	3b 01       	movw	r6, r22
    3bb0:	88 e0       	ldi	r24, 0x08	; 8
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <malloc>
    3bb8:	8c 01       	movw	r16, r24
    3bba:	8f 2d       	mov	r24, r15
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	ee 0f       	add	r30, r30
    3bc2:	ff 1f       	adc	r31, r31
    3bc4:	e8 5f       	subi	r30, 0xF8	; 248
    3bc6:	f0 4f       	sbci	r31, 0xF0	; 240
    3bc8:	11 83       	std	Z+1, r17	; 0x01
    3bca:	00 83       	st	Z, r16
    3bcc:	01 15       	cp	r16, r1
    3bce:	11 05       	cpc	r17, r1
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <serial_create+0x4e>
    3bd2:	68 c0       	rjmp	.+208    	; 0x3ca4 <serial_create+0x11e>
    3bd4:	88 0f       	add	r24, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	fc 01       	movw	r30, r24
    3bda:	e5 5f       	subi	r30, 0xF5	; 245
    3bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    3bde:	80 81       	ld	r24, Z
    3be0:	91 81       	ldd	r25, Z+1	; 0x01
    3be2:	d8 01       	movw	r26, r16
    3be4:	8d 93       	st	X+, r24
    3be6:	9c 93       	st	X, r25
    3be8:	6c 2d       	mov	r22, r12
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	84 e0       	ldi	r24, 0x04	; 4
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
    3bf4:	1c 01       	movw	r2, r24
    3bf6:	61 e0       	ldi	r22, 0x01	; 1
    3bf8:	70 e0       	ldi	r23, 0x00	; 0
    3bfa:	86 e0       	ldi	r24, 0x06	; 6
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
    3c02:	7c 01       	movw	r14, r24
    3c04:	4c 2d       	mov	r20, r12
    3c06:	b1 01       	movw	r22, r2
    3c08:	57 d7       	rcall	.+3758   	; 0x4ab8 <fifo_init>
    3c0a:	f8 01       	movw	r30, r16
    3c0c:	f5 82       	std	Z+5, r15	; 0x05
    3c0e:	e4 82       	std	Z+4, r14	; 0x04
    3c10:	6a 2d       	mov	r22, r10
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	84 e0       	ldi	r24, 0x04	; 4
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
    3c1c:	1c 01       	movw	r2, r24
    3c1e:	61 e0       	ldi	r22, 0x01	; 1
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	86 e0       	ldi	r24, 0x06	; 6
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <calloc>
    3c2a:	7c 01       	movw	r14, r24
    3c2c:	4a 2d       	mov	r20, r10
    3c2e:	b1 01       	movw	r22, r2
    3c30:	43 d7       	rcall	.+3718   	; 0x4ab8 <fifo_init>
    3c32:	d8 01       	movw	r26, r16
    3c34:	13 96       	adiw	r26, 0x03	; 3
    3c36:	fc 92       	st	X, r15
    3c38:	ee 92       	st	-X, r14
    3c3a:	12 97       	sbiw	r26, 0x02	; 2
    3c3c:	17 96       	adiw	r26, 0x07	; 7
    3c3e:	9c 92       	st	X, r9
    3c40:	8e 92       	st	-X, r8
    3c42:	16 97       	sbiw	r26, 0x06	; 6
    3c44:	ff b6       	in	r15, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	ed 91       	ld	r30, X+
    3c4a:	fc 91       	ld	r31, X
    3c4c:	11 97       	sbiw	r26, 0x01	; 1
    3c4e:	36 97       	sbiw	r30, 0x06	; 6
    3c50:	80 81       	ld	r24, Z
    3c52:	82 60       	ori	r24, 0x02	; 2
    3c54:	80 83       	st	Z, r24
    3c56:	8d 90       	ld	r8, X+
    3c58:	9c 90       	ld	r9, X
    3c5a:	c3 01       	movw	r24, r6
    3c5c:	b2 01       	movw	r22, r4
    3c5e:	cd db       	rcall	.-2150   	; 0x33fa <__floatunsisf>
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e0       	ldi	r20, 0x00	; 0
    3c66:	51 e4       	ldi	r21, 0x41	; 65
    3c68:	56 dc       	rcall	.-1876   	; 0x3516 <__mulsf3>
    3c6a:	9b 01       	movw	r18, r22
    3c6c:	ac 01       	movw	r20, r24
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	74 e2       	ldi	r23, 0x24	; 36
    3c72:	84 e7       	ldi	r24, 0x74	; 116
    3c74:	9b e4       	ldi	r25, 0x4B	; 75
    3c76:	28 db       	rcall	.-2480   	; 0x32c8 <__divsf3>
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e8       	ldi	r20, 0x80	; 128
    3c7e:	5f e3       	ldi	r21, 0x3F	; 63
    3c80:	be da       	rcall	.-2692   	; 0x31fe <__subsf3>
    3c82:	8f db       	rcall	.-2274   	; 0x33a2 <__fixunssfsi>
    3c84:	f4 01       	movw	r30, r8
    3c86:	32 97       	sbiw	r30, 0x02	; 2
    3c88:	60 83       	st	Z, r22
    3c8a:	d8 01       	movw	r26, r16
    3c8c:	ed 91       	ld	r30, X+
    3c8e:	fc 91       	ld	r31, X
    3c90:	11 97       	sbiw	r26, 0x01	; 1
    3c92:	35 97       	sbiw	r30, 0x05	; 5
    3c94:	88 e9       	ldi	r24, 0x98	; 152
    3c96:	80 83       	st	Z, r24
    3c98:	ed 91       	ld	r30, X+
    3c9a:	fc 91       	ld	r31, X
    3c9c:	34 97       	sbiw	r30, 0x04	; 4
    3c9e:	86 e0       	ldi	r24, 0x06	; 6
    3ca0:	80 83       	st	Z, r24
    3ca2:	ff be       	out	0x3f, r15	; 63
    3ca4:	c8 01       	movw	r24, r16
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	ff 90       	pop	r15
    3cb0:	ef 90       	pop	r14
    3cb2:	cf 90       	pop	r12
    3cb4:	af 90       	pop	r10
    3cb6:	9f 90       	pop	r9
    3cb8:	8f 90       	pop	r8
    3cba:	7f 90       	pop	r7
    3cbc:	6f 90       	pop	r6
    3cbe:	5f 90       	pop	r5
    3cc0:	4f 90       	pop	r4
    3cc2:	3f 90       	pop	r3
    3cc4:	2f 90       	pop	r2
    3cc6:	08 95       	ret

00003cc8 <serial_sendByte>:
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	dc 01       	movw	r26, r24
    3cce:	89 2b       	or	r24, r25
    3cd0:	01 f1       	breq	.+64     	; 0x3d12 <serial_sendByte+0x4a>
    3cd2:	12 96       	adiw	r26, 0x02	; 2
    3cd4:	ed 91       	ld	r30, X+
    3cd6:	fc 91       	ld	r31, X
    3cd8:	13 97       	sbiw	r26, 0x03	; 3
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	82 81       	ldd	r24, Z+2	; 0x02
    3cde:	25 81       	ldd	r18, Z+5	; 0x05
    3ce0:	98 1b       	sub	r25, r24
    3ce2:	92 23       	and	r25, r18
    3ce4:	84 81       	ldd	r24, Z+4	; 0x04
    3ce6:	98 17       	cp	r25, r24
    3ce8:	b1 f0       	breq	.+44     	; 0x3d16 <serial_sendByte+0x4e>
    3cea:	83 81       	ldd	r24, Z+3	; 0x03
    3cec:	26 95       	lsr	r18
    3cee:	28 23       	and	r18, r24
    3cf0:	c0 81       	ld	r28, Z
    3cf2:	d1 81       	ldd	r29, Z+1	; 0x01
    3cf4:	c2 0f       	add	r28, r18
    3cf6:	d1 1d       	adc	r29, r1
    3cf8:	68 83       	st	Y, r22
    3cfa:	8f 5f       	subi	r24, 0xFF	; 255
    3cfc:	95 81       	ldd	r25, Z+5	; 0x05
    3cfe:	89 23       	and	r24, r25
    3d00:	83 83       	std	Z+3, r24	; 0x03
    3d02:	ed 91       	ld	r30, X+
    3d04:	fc 91       	ld	r31, X
    3d06:	35 97       	sbiw	r30, 0x05	; 5
    3d08:	80 81       	ld	r24, Z
    3d0a:	80 62       	ori	r24, 0x20	; 32
    3d0c:	80 83       	st	Z, r24
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	03 c0       	rjmp	.+6      	; 0x3d18 <serial_sendByte+0x50>
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	01 c0       	rjmp	.+2      	; 0x3d18 <serial_sendByte+0x50>
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	df 91       	pop	r29
    3d1a:	cf 91       	pop	r28
    3d1c:	08 95       	ret

00003d1e <serial_sendBytes>:
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	7c 01       	movw	r14, r24
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <serial_sendBytes+0x14>
    3d30:	41 c0       	rjmp	.+130    	; 0x3db4 <serial_sendBytes+0x96>
    3d32:	dc 01       	movw	r26, r24
    3d34:	12 96       	adiw	r26, 0x02	; 2
    3d36:	ed 91       	ld	r30, X+
    3d38:	fc 91       	ld	r31, X
    3d3a:	13 97       	sbiw	r26, 0x03	; 3
    3d3c:	93 81       	ldd	r25, Z+3	; 0x03
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	98 1b       	sub	r25, r24
    3d42:	85 81       	ldd	r24, Z+5	; 0x05
    3d44:	98 23       	and	r25, r24
    3d46:	84 81       	ldd	r24, Z+4	; 0x04
    3d48:	89 1b       	sub	r24, r25
    3d4a:	86 17       	cp	r24, r22
    3d4c:	a8 f1       	brcs	.+106    	; 0x3db8 <serial_sendBytes+0x9a>
    3d4e:	66 23       	and	r22, r22
    3d50:	41 f1       	breq	.+80     	; 0x3da2 <serial_sendBytes+0x84>
    3d52:	84 2f       	mov	r24, r20
    3d54:	95 2f       	mov	r25, r21
    3d56:	dc 01       	movw	r26, r24
    3d58:	61 50       	subi	r22, 0x01	; 1
    3d5a:	46 2f       	mov	r20, r22
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	4f 5f       	subi	r20, 0xFF	; 255
    3d60:	5f 4f       	sbci	r21, 0xFF	; 255
    3d62:	48 0f       	add	r20, r24
    3d64:	59 1f       	adc	r21, r25
    3d66:	e7 01       	movw	r28, r14
    3d68:	ea 81       	ldd	r30, Y+2	; 0x02
    3d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d6c:	93 81       	ldd	r25, Z+3	; 0x03
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	25 81       	ldd	r18, Z+5	; 0x05
    3d72:	98 1b       	sub	r25, r24
    3d74:	92 23       	and	r25, r18
    3d76:	84 81       	ldd	r24, Z+4	; 0x04
    3d78:	98 17       	cp	r25, r24
    3d7a:	79 f0       	breq	.+30     	; 0x3d9a <serial_sendBytes+0x7c>
    3d7c:	8c 91       	ld	r24, X
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	26 95       	lsr	r18
    3d82:	29 23       	and	r18, r25
    3d84:	60 81       	ld	r22, Z
    3d86:	71 81       	ldd	r23, Z+1	; 0x01
    3d88:	8b 01       	movw	r16, r22
    3d8a:	02 0f       	add	r16, r18
    3d8c:	11 1d       	adc	r17, r1
    3d8e:	e8 01       	movw	r28, r16
    3d90:	88 83       	st	Y, r24
    3d92:	9f 5f       	subi	r25, 0xFF	; 255
    3d94:	85 81       	ldd	r24, Z+5	; 0x05
    3d96:	98 23       	and	r25, r24
    3d98:	93 83       	std	Z+3, r25	; 0x03
    3d9a:	11 96       	adiw	r26, 0x01	; 1
    3d9c:	a4 17       	cp	r26, r20
    3d9e:	b5 07       	cpc	r27, r21
    3da0:	11 f7       	brne	.-60     	; 0x3d66 <serial_sendBytes+0x48>
    3da2:	d7 01       	movw	r26, r14
    3da4:	ed 91       	ld	r30, X+
    3da6:	fc 91       	ld	r31, X
    3da8:	35 97       	sbiw	r30, 0x05	; 5
    3daa:	80 81       	ld	r24, Z
    3dac:	80 62       	ori	r24, 0x20	; 32
    3dae:	80 83       	st	Z, r24
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	03 c0       	rjmp	.+6      	; 0x3dba <serial_sendBytes+0x9c>
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	01 c0       	rjmp	.+2      	; 0x3dba <serial_sendBytes+0x9c>
    3db8:	82 e0       	ldi	r24, 0x02	; 2
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	ff 90       	pop	r15
    3dc4:	ef 90       	pop	r14
    3dc6:	08 95       	ret

00003dc8 <serial_getByte>:
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	d1 f0       	breq	.+52     	; 0x3e00 <serial_getByte+0x38>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	14 96       	adiw	r26, 0x04	; 4
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	15 97       	sbiw	r26, 0x05	; 5
    3dd6:	93 81       	ldd	r25, Z+3	; 0x03
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	98 17       	cp	r25, r24
    3ddc:	99 f0       	breq	.+38     	; 0x3e04 <serial_getByte+0x3c>
    3dde:	92 81       	ldd	r25, Z+2	; 0x02
    3de0:	85 81       	ldd	r24, Z+5	; 0x05
    3de2:	86 95       	lsr	r24
    3de4:	89 23       	and	r24, r25
    3de6:	a0 81       	ld	r26, Z
    3de8:	b1 81       	ldd	r27, Z+1	; 0x01
    3dea:	a8 0f       	add	r26, r24
    3dec:	b1 1d       	adc	r27, r1
    3dee:	8c 91       	ld	r24, X
    3df0:	db 01       	movw	r26, r22
    3df2:	8c 93       	st	X, r24
    3df4:	9f 5f       	subi	r25, 0xFF	; 255
    3df6:	85 81       	ldd	r24, Z+5	; 0x05
    3df8:	98 23       	and	r25, r24
    3dfa:	92 83       	std	Z+2, r25	; 0x02
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	08 95       	ret
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	08 95       	ret
    3e04:	83 e0       	ldi	r24, 0x03	; 3
    3e06:	08 95       	ret

00003e08 <__vector_25>:
    3e08:	1f 92       	push	r1
    3e0a:	0f 92       	push	r0
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	0f 92       	push	r0
    3e10:	11 24       	eor	r1, r1
    3e12:	0b b6       	in	r0, 0x3b	; 59
    3e14:	0f 92       	push	r0
    3e16:	2f 93       	push	r18
    3e18:	3f 93       	push	r19
    3e1a:	4f 93       	push	r20
    3e1c:	5f 93       	push	r21
    3e1e:	6f 93       	push	r22
    3e20:	7f 93       	push	r23
    3e22:	8f 93       	push	r24
    3e24:	9f 93       	push	r25
    3e26:	af 93       	push	r26
    3e28:	bf 93       	push	r27
    3e2a:	cf 93       	push	r28
    3e2c:	df 93       	push	r29
    3e2e:	ef 93       	push	r30
    3e30:	ff 93       	push	r31
    3e32:	a0 91 08 0f 	lds	r26, 0x0F08	; 0x800f08 <_ser_handle>
    3e36:	b0 91 09 0f 	lds	r27, 0x0F09	; 0x800f09 <_ser_handle+0x1>
    3e3a:	10 97       	sbiw	r26, 0x00	; 0
    3e3c:	11 f1       	breq	.+68     	; 0x3e82 <__vector_25+0x7a>
    3e3e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3e42:	14 96       	adiw	r26, 0x04	; 4
    3e44:	ed 91       	ld	r30, X+
    3e46:	fc 91       	ld	r31, X
    3e48:	15 97       	sbiw	r26, 0x05	; 5
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	25 81       	ldd	r18, Z+5	; 0x05
    3e50:	98 1b       	sub	r25, r24
    3e52:	92 23       	and	r25, r18
    3e54:	84 81       	ldd	r24, Z+4	; 0x04
    3e56:	98 17       	cp	r25, r24
    3e58:	61 f0       	breq	.+24     	; 0x3e72 <__vector_25+0x6a>
    3e5a:	83 81       	ldd	r24, Z+3	; 0x03
    3e5c:	26 95       	lsr	r18
    3e5e:	28 23       	and	r18, r24
    3e60:	c0 81       	ld	r28, Z
    3e62:	d1 81       	ldd	r29, Z+1	; 0x01
    3e64:	c2 0f       	add	r28, r18
    3e66:	d1 1d       	adc	r29, r1
    3e68:	68 83       	st	Y, r22
    3e6a:	8f 5f       	subi	r24, 0xFF	; 255
    3e6c:	95 81       	ldd	r25, Z+5	; 0x05
    3e6e:	89 23       	and	r24, r25
    3e70:	83 83       	std	Z+3, r24	; 0x03
    3e72:	16 96       	adiw	r26, 0x06	; 6
    3e74:	ed 91       	ld	r30, X+
    3e76:	fc 91       	ld	r31, X
    3e78:	17 97       	sbiw	r26, 0x07	; 7
    3e7a:	30 97       	sbiw	r30, 0x00	; 0
    3e7c:	11 f0       	breq	.+4      	; 0x3e82 <__vector_25+0x7a>
    3e7e:	cd 01       	movw	r24, r26
    3e80:	19 95       	eicall
    3e82:	ff 91       	pop	r31
    3e84:	ef 91       	pop	r30
    3e86:	df 91       	pop	r29
    3e88:	cf 91       	pop	r28
    3e8a:	bf 91       	pop	r27
    3e8c:	af 91       	pop	r26
    3e8e:	9f 91       	pop	r25
    3e90:	8f 91       	pop	r24
    3e92:	7f 91       	pop	r23
    3e94:	6f 91       	pop	r22
    3e96:	5f 91       	pop	r21
    3e98:	4f 91       	pop	r20
    3e9a:	3f 91       	pop	r19
    3e9c:	2f 91       	pop	r18
    3e9e:	0f 90       	pop	r0
    3ea0:	0b be       	out	0x3b, r0	; 59
    3ea2:	0f 90       	pop	r0
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	0f 90       	pop	r0
    3ea8:	1f 90       	pop	r1
    3eaa:	18 95       	reti

00003eac <__vector_26>:
    3eac:	1f 92       	push	r1
    3eae:	0f 92       	push	r0
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	0f 92       	push	r0
    3eb4:	11 24       	eor	r1, r1
    3eb6:	0b b6       	in	r0, 0x3b	; 59
    3eb8:	0f 92       	push	r0
    3eba:	2f 93       	push	r18
    3ebc:	8f 93       	push	r24
    3ebe:	9f 93       	push	r25
    3ec0:	af 93       	push	r26
    3ec2:	bf 93       	push	r27
    3ec4:	ef 93       	push	r30
    3ec6:	ff 93       	push	r31
    3ec8:	e0 91 08 0f 	lds	r30, 0x0F08	; 0x800f08 <_ser_handle>
    3ecc:	f0 91 09 0f 	lds	r31, 0x0F09	; 0x800f09 <_ser_handle+0x1>
    3ed0:	30 97       	sbiw	r30, 0x00	; 0
    3ed2:	b9 f0       	breq	.+46     	; 0x3f02 <__vector_26+0x56>
    3ed4:	02 80       	ldd	r0, Z+2	; 0x02
    3ed6:	f3 81       	ldd	r31, Z+3	; 0x03
    3ed8:	e0 2d       	mov	r30, r0
    3eda:	93 81       	ldd	r25, Z+3	; 0x03
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	98 17       	cp	r25, r24
    3ee0:	b1 f0       	breq	.+44     	; 0x3f0e <__vector_26+0x62>
    3ee2:	92 81       	ldd	r25, Z+2	; 0x02
    3ee4:	85 81       	ldd	r24, Z+5	; 0x05
    3ee6:	28 2f       	mov	r18, r24
    3ee8:	26 95       	lsr	r18
    3eea:	29 23       	and	r18, r25
    3eec:	a0 81       	ld	r26, Z
    3eee:	b1 81       	ldd	r27, Z+1	; 0x01
    3ef0:	a2 0f       	add	r26, r18
    3ef2:	b1 1d       	adc	r27, r1
    3ef4:	2c 91       	ld	r18, X
    3ef6:	9f 5f       	subi	r25, 0xFF	; 255
    3ef8:	89 23       	and	r24, r25
    3efa:	82 83       	std	Z+2, r24	; 0x02
    3efc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3f00:	0b c0       	rjmp	.+22     	; 0x3f18 <__vector_26+0x6c>
    3f02:	e1 ec       	ldi	r30, 0xC1	; 193
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	80 81       	ld	r24, Z
    3f08:	8f 7d       	andi	r24, 0xDF	; 223
    3f0a:	80 83       	st	Z, r24
    3f0c:	05 c0       	rjmp	.+10     	; 0x3f18 <__vector_26+0x6c>
    3f0e:	e1 ec       	ldi	r30, 0xC1	; 193
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	8f 7d       	andi	r24, 0xDF	; 223
    3f16:	80 83       	st	Z, r24
    3f18:	ff 91       	pop	r31
    3f1a:	ef 91       	pop	r30
    3f1c:	bf 91       	pop	r27
    3f1e:	af 91       	pop	r26
    3f20:	9f 91       	pop	r25
    3f22:	8f 91       	pop	r24
    3f24:	2f 91       	pop	r18
    3f26:	0f 90       	pop	r0
    3f28:	0b be       	out	0x3b, r0	; 59
    3f2a:	0f 90       	pop	r0
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	0f 90       	pop	r0
    3f30:	1f 90       	pop	r1
    3f32:	18 95       	reti

00003f34 <__vector_36>:
    3f34:	1f 92       	push	r1
    3f36:	0f 92       	push	r0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	0f 92       	push	r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	0b b6       	in	r0, 0x3b	; 59
    3f40:	0f 92       	push	r0
    3f42:	2f 93       	push	r18
    3f44:	3f 93       	push	r19
    3f46:	4f 93       	push	r20
    3f48:	5f 93       	push	r21
    3f4a:	6f 93       	push	r22
    3f4c:	7f 93       	push	r23
    3f4e:	8f 93       	push	r24
    3f50:	9f 93       	push	r25
    3f52:	af 93       	push	r26
    3f54:	bf 93       	push	r27
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	ef 93       	push	r30
    3f5c:	ff 93       	push	r31
    3f5e:	a0 91 0a 0f 	lds	r26, 0x0F0A	; 0x800f0a <_ser_handle+0x2>
    3f62:	b0 91 0b 0f 	lds	r27, 0x0F0B	; 0x800f0b <_ser_handle+0x3>
    3f66:	10 97       	sbiw	r26, 0x00	; 0
    3f68:	11 f1       	breq	.+68     	; 0x3fae <__vector_36+0x7a>
    3f6a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3f6e:	14 96       	adiw	r26, 0x04	; 4
    3f70:	ed 91       	ld	r30, X+
    3f72:	fc 91       	ld	r31, X
    3f74:	15 97       	sbiw	r26, 0x05	; 5
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	25 81       	ldd	r18, Z+5	; 0x05
    3f7c:	98 1b       	sub	r25, r24
    3f7e:	92 23       	and	r25, r18
    3f80:	84 81       	ldd	r24, Z+4	; 0x04
    3f82:	98 17       	cp	r25, r24
    3f84:	61 f0       	breq	.+24     	; 0x3f9e <__vector_36+0x6a>
    3f86:	83 81       	ldd	r24, Z+3	; 0x03
    3f88:	26 95       	lsr	r18
    3f8a:	28 23       	and	r18, r24
    3f8c:	c0 81       	ld	r28, Z
    3f8e:	d1 81       	ldd	r29, Z+1	; 0x01
    3f90:	c2 0f       	add	r28, r18
    3f92:	d1 1d       	adc	r29, r1
    3f94:	68 83       	st	Y, r22
    3f96:	8f 5f       	subi	r24, 0xFF	; 255
    3f98:	95 81       	ldd	r25, Z+5	; 0x05
    3f9a:	89 23       	and	r24, r25
    3f9c:	83 83       	std	Z+3, r24	; 0x03
    3f9e:	16 96       	adiw	r26, 0x06	; 6
    3fa0:	ed 91       	ld	r30, X+
    3fa2:	fc 91       	ld	r31, X
    3fa4:	17 97       	sbiw	r26, 0x07	; 7
    3fa6:	30 97       	sbiw	r30, 0x00	; 0
    3fa8:	11 f0       	breq	.+4      	; 0x3fae <__vector_36+0x7a>
    3faa:	cd 01       	movw	r24, r26
    3fac:	19 95       	eicall
    3fae:	ff 91       	pop	r31
    3fb0:	ef 91       	pop	r30
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	bf 91       	pop	r27
    3fb8:	af 91       	pop	r26
    3fba:	9f 91       	pop	r25
    3fbc:	8f 91       	pop	r24
    3fbe:	7f 91       	pop	r23
    3fc0:	6f 91       	pop	r22
    3fc2:	5f 91       	pop	r21
    3fc4:	4f 91       	pop	r20
    3fc6:	3f 91       	pop	r19
    3fc8:	2f 91       	pop	r18
    3fca:	0f 90       	pop	r0
    3fcc:	0b be       	out	0x3b, r0	; 59
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti

00003fd8 <__vector_37>:
    3fd8:	1f 92       	push	r1
    3fda:	0f 92       	push	r0
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	0f 92       	push	r0
    3fe0:	11 24       	eor	r1, r1
    3fe2:	0b b6       	in	r0, 0x3b	; 59
    3fe4:	0f 92       	push	r0
    3fe6:	2f 93       	push	r18
    3fe8:	8f 93       	push	r24
    3fea:	9f 93       	push	r25
    3fec:	af 93       	push	r26
    3fee:	bf 93       	push	r27
    3ff0:	ef 93       	push	r30
    3ff2:	ff 93       	push	r31
    3ff4:	e0 91 0a 0f 	lds	r30, 0x0F0A	; 0x800f0a <_ser_handle+0x2>
    3ff8:	f0 91 0b 0f 	lds	r31, 0x0F0B	; 0x800f0b <_ser_handle+0x3>
    3ffc:	30 97       	sbiw	r30, 0x00	; 0
    3ffe:	b9 f0       	breq	.+46     	; 0x402e <__vector_37+0x56>
    4000:	02 80       	ldd	r0, Z+2	; 0x02
    4002:	f3 81       	ldd	r31, Z+3	; 0x03
    4004:	e0 2d       	mov	r30, r0
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	98 17       	cp	r25, r24
    400c:	b1 f0       	breq	.+44     	; 0x403a <__vector_37+0x62>
    400e:	92 81       	ldd	r25, Z+2	; 0x02
    4010:	85 81       	ldd	r24, Z+5	; 0x05
    4012:	28 2f       	mov	r18, r24
    4014:	26 95       	lsr	r18
    4016:	29 23       	and	r18, r25
    4018:	a0 81       	ld	r26, Z
    401a:	b1 81       	ldd	r27, Z+1	; 0x01
    401c:	a2 0f       	add	r26, r18
    401e:	b1 1d       	adc	r27, r1
    4020:	2c 91       	ld	r18, X
    4022:	9f 5f       	subi	r25, 0xFF	; 255
    4024:	89 23       	and	r24, r25
    4026:	82 83       	std	Z+2, r24	; 0x02
    4028:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    402c:	0b c0       	rjmp	.+22     	; 0x4044 <__vector_37+0x6c>
    402e:	e9 ec       	ldi	r30, 0xC9	; 201
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z
    4034:	8f 7d       	andi	r24, 0xDF	; 223
    4036:	80 83       	st	Z, r24
    4038:	05 c0       	rjmp	.+10     	; 0x4044 <__vector_37+0x6c>
    403a:	e9 ec       	ldi	r30, 0xC9	; 201
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	80 81       	ld	r24, Z
    4040:	8f 7d       	andi	r24, 0xDF	; 223
    4042:	80 83       	st	Z, r24
    4044:	ff 91       	pop	r31
    4046:	ef 91       	pop	r30
    4048:	bf 91       	pop	r27
    404a:	af 91       	pop	r26
    404c:	9f 91       	pop	r25
    404e:	8f 91       	pop	r24
    4050:	2f 91       	pop	r18
    4052:	0f 90       	pop	r0
    4054:	0b be       	out	0x3b, r0	; 59
    4056:	0f 90       	pop	r0
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	0f 90       	pop	r0
    405c:	1f 90       	pop	r1
    405e:	18 95       	reti

00004060 <__vector_51>:
    4060:	1f 92       	push	r1
    4062:	0f 92       	push	r0
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	0f 92       	push	r0
    4068:	11 24       	eor	r1, r1
    406a:	0b b6       	in	r0, 0x3b	; 59
    406c:	0f 92       	push	r0
    406e:	2f 93       	push	r18
    4070:	3f 93       	push	r19
    4072:	4f 93       	push	r20
    4074:	5f 93       	push	r21
    4076:	6f 93       	push	r22
    4078:	7f 93       	push	r23
    407a:	8f 93       	push	r24
    407c:	9f 93       	push	r25
    407e:	af 93       	push	r26
    4080:	bf 93       	push	r27
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	ef 93       	push	r30
    4088:	ff 93       	push	r31
    408a:	a0 91 0c 0f 	lds	r26, 0x0F0C	; 0x800f0c <_ser_handle+0x4>
    408e:	b0 91 0d 0f 	lds	r27, 0x0F0D	; 0x800f0d <_ser_handle+0x5>
    4092:	10 97       	sbiw	r26, 0x00	; 0
    4094:	11 f1       	breq	.+68     	; 0x40da <__vector_51+0x7a>
    4096:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    409a:	14 96       	adiw	r26, 0x04	; 4
    409c:	ed 91       	ld	r30, X+
    409e:	fc 91       	ld	r31, X
    40a0:	15 97       	sbiw	r26, 0x05	; 5
    40a2:	93 81       	ldd	r25, Z+3	; 0x03
    40a4:	82 81       	ldd	r24, Z+2	; 0x02
    40a6:	25 81       	ldd	r18, Z+5	; 0x05
    40a8:	98 1b       	sub	r25, r24
    40aa:	92 23       	and	r25, r18
    40ac:	84 81       	ldd	r24, Z+4	; 0x04
    40ae:	98 17       	cp	r25, r24
    40b0:	61 f0       	breq	.+24     	; 0x40ca <__vector_51+0x6a>
    40b2:	83 81       	ldd	r24, Z+3	; 0x03
    40b4:	26 95       	lsr	r18
    40b6:	28 23       	and	r18, r24
    40b8:	c0 81       	ld	r28, Z
    40ba:	d1 81       	ldd	r29, Z+1	; 0x01
    40bc:	c2 0f       	add	r28, r18
    40be:	d1 1d       	adc	r29, r1
    40c0:	68 83       	st	Y, r22
    40c2:	8f 5f       	subi	r24, 0xFF	; 255
    40c4:	95 81       	ldd	r25, Z+5	; 0x05
    40c6:	89 23       	and	r24, r25
    40c8:	83 83       	std	Z+3, r24	; 0x03
    40ca:	16 96       	adiw	r26, 0x06	; 6
    40cc:	ed 91       	ld	r30, X+
    40ce:	fc 91       	ld	r31, X
    40d0:	17 97       	sbiw	r26, 0x07	; 7
    40d2:	30 97       	sbiw	r30, 0x00	; 0
    40d4:	11 f0       	breq	.+4      	; 0x40da <__vector_51+0x7a>
    40d6:	cd 01       	movw	r24, r26
    40d8:	19 95       	eicall
    40da:	ff 91       	pop	r31
    40dc:	ef 91       	pop	r30
    40de:	df 91       	pop	r29
    40e0:	cf 91       	pop	r28
    40e2:	bf 91       	pop	r27
    40e4:	af 91       	pop	r26
    40e6:	9f 91       	pop	r25
    40e8:	8f 91       	pop	r24
    40ea:	7f 91       	pop	r23
    40ec:	6f 91       	pop	r22
    40ee:	5f 91       	pop	r21
    40f0:	4f 91       	pop	r20
    40f2:	3f 91       	pop	r19
    40f4:	2f 91       	pop	r18
    40f6:	0f 90       	pop	r0
    40f8:	0b be       	out	0x3b, r0	; 59
    40fa:	0f 90       	pop	r0
    40fc:	0f be       	out	0x3f, r0	; 63
    40fe:	0f 90       	pop	r0
    4100:	1f 90       	pop	r1
    4102:	18 95       	reti

00004104 <__vector_52>:
    4104:	1f 92       	push	r1
    4106:	0f 92       	push	r0
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	0f 92       	push	r0
    410c:	11 24       	eor	r1, r1
    410e:	0b b6       	in	r0, 0x3b	; 59
    4110:	0f 92       	push	r0
    4112:	2f 93       	push	r18
    4114:	8f 93       	push	r24
    4116:	9f 93       	push	r25
    4118:	af 93       	push	r26
    411a:	bf 93       	push	r27
    411c:	ef 93       	push	r30
    411e:	ff 93       	push	r31
    4120:	e0 91 0c 0f 	lds	r30, 0x0F0C	; 0x800f0c <_ser_handle+0x4>
    4124:	f0 91 0d 0f 	lds	r31, 0x0F0D	; 0x800f0d <_ser_handle+0x5>
    4128:	30 97       	sbiw	r30, 0x00	; 0
    412a:	b9 f0       	breq	.+46     	; 0x415a <__vector_52+0x56>
    412c:	02 80       	ldd	r0, Z+2	; 0x02
    412e:	f3 81       	ldd	r31, Z+3	; 0x03
    4130:	e0 2d       	mov	r30, r0
    4132:	93 81       	ldd	r25, Z+3	; 0x03
    4134:	82 81       	ldd	r24, Z+2	; 0x02
    4136:	98 17       	cp	r25, r24
    4138:	b1 f0       	breq	.+44     	; 0x4166 <__vector_52+0x62>
    413a:	92 81       	ldd	r25, Z+2	; 0x02
    413c:	85 81       	ldd	r24, Z+5	; 0x05
    413e:	28 2f       	mov	r18, r24
    4140:	26 95       	lsr	r18
    4142:	29 23       	and	r18, r25
    4144:	a0 81       	ld	r26, Z
    4146:	b1 81       	ldd	r27, Z+1	; 0x01
    4148:	a2 0f       	add	r26, r18
    414a:	b1 1d       	adc	r27, r1
    414c:	2c 91       	ld	r18, X
    414e:	9f 5f       	subi	r25, 0xFF	; 255
    4150:	89 23       	and	r24, r25
    4152:	82 83       	std	Z+2, r24	; 0x02
    4154:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4158:	0b c0       	rjmp	.+22     	; 0x4170 <__vector_52+0x6c>
    415a:	e1 ed       	ldi	r30, 0xD1	; 209
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	80 81       	ld	r24, Z
    4160:	8f 7d       	andi	r24, 0xDF	; 223
    4162:	80 83       	st	Z, r24
    4164:	05 c0       	rjmp	.+10     	; 0x4170 <__vector_52+0x6c>
    4166:	e1 ed       	ldi	r30, 0xD1	; 209
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	80 81       	ld	r24, Z
    416c:	8f 7d       	andi	r24, 0xDF	; 223
    416e:	80 83       	st	Z, r24
    4170:	ff 91       	pop	r31
    4172:	ef 91       	pop	r30
    4174:	bf 91       	pop	r27
    4176:	af 91       	pop	r26
    4178:	9f 91       	pop	r25
    417a:	8f 91       	pop	r24
    417c:	2f 91       	pop	r18
    417e:	0f 90       	pop	r0
    4180:	0b be       	out	0x3b, r0	; 59
    4182:	0f 90       	pop	r0
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	0f 90       	pop	r0
    4188:	1f 90       	pop	r1
    418a:	18 95       	reti

0000418c <__vector_54>:
    418c:	1f 92       	push	r1
    418e:	0f 92       	push	r0
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	0f 92       	push	r0
    4194:	11 24       	eor	r1, r1
    4196:	0b b6       	in	r0, 0x3b	; 59
    4198:	0f 92       	push	r0
    419a:	2f 93       	push	r18
    419c:	3f 93       	push	r19
    419e:	4f 93       	push	r20
    41a0:	5f 93       	push	r21
    41a2:	6f 93       	push	r22
    41a4:	7f 93       	push	r23
    41a6:	8f 93       	push	r24
    41a8:	9f 93       	push	r25
    41aa:	af 93       	push	r26
    41ac:	bf 93       	push	r27
    41ae:	cf 93       	push	r28
    41b0:	df 93       	push	r29
    41b2:	ef 93       	push	r30
    41b4:	ff 93       	push	r31
    41b6:	a0 91 0e 0f 	lds	r26, 0x0F0E	; 0x800f0e <_ser_handle+0x6>
    41ba:	b0 91 0f 0f 	lds	r27, 0x0F0F	; 0x800f0f <_ser_handle+0x7>
    41be:	10 97       	sbiw	r26, 0x00	; 0
    41c0:	11 f1       	breq	.+68     	; 0x4206 <__vector_54+0x7a>
    41c2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    41c6:	14 96       	adiw	r26, 0x04	; 4
    41c8:	ed 91       	ld	r30, X+
    41ca:	fc 91       	ld	r31, X
    41cc:	15 97       	sbiw	r26, 0x05	; 5
    41ce:	93 81       	ldd	r25, Z+3	; 0x03
    41d0:	82 81       	ldd	r24, Z+2	; 0x02
    41d2:	25 81       	ldd	r18, Z+5	; 0x05
    41d4:	98 1b       	sub	r25, r24
    41d6:	92 23       	and	r25, r18
    41d8:	84 81       	ldd	r24, Z+4	; 0x04
    41da:	98 17       	cp	r25, r24
    41dc:	61 f0       	breq	.+24     	; 0x41f6 <__vector_54+0x6a>
    41de:	83 81       	ldd	r24, Z+3	; 0x03
    41e0:	26 95       	lsr	r18
    41e2:	28 23       	and	r18, r24
    41e4:	c0 81       	ld	r28, Z
    41e6:	d1 81       	ldd	r29, Z+1	; 0x01
    41e8:	c2 0f       	add	r28, r18
    41ea:	d1 1d       	adc	r29, r1
    41ec:	68 83       	st	Y, r22
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	95 81       	ldd	r25, Z+5	; 0x05
    41f2:	89 23       	and	r24, r25
    41f4:	83 83       	std	Z+3, r24	; 0x03
    41f6:	16 96       	adiw	r26, 0x06	; 6
    41f8:	ed 91       	ld	r30, X+
    41fa:	fc 91       	ld	r31, X
    41fc:	17 97       	sbiw	r26, 0x07	; 7
    41fe:	30 97       	sbiw	r30, 0x00	; 0
    4200:	11 f0       	breq	.+4      	; 0x4206 <__vector_54+0x7a>
    4202:	cd 01       	movw	r24, r26
    4204:	19 95       	eicall
    4206:	ff 91       	pop	r31
    4208:	ef 91       	pop	r30
    420a:	df 91       	pop	r29
    420c:	cf 91       	pop	r28
    420e:	bf 91       	pop	r27
    4210:	af 91       	pop	r26
    4212:	9f 91       	pop	r25
    4214:	8f 91       	pop	r24
    4216:	7f 91       	pop	r23
    4218:	6f 91       	pop	r22
    421a:	5f 91       	pop	r21
    421c:	4f 91       	pop	r20
    421e:	3f 91       	pop	r19
    4220:	2f 91       	pop	r18
    4222:	0f 90       	pop	r0
    4224:	0b be       	out	0x3b, r0	; 59
    4226:	0f 90       	pop	r0
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	0f 90       	pop	r0
    422c:	1f 90       	pop	r1
    422e:	18 95       	reti

00004230 <__vector_55>:
    4230:	1f 92       	push	r1
    4232:	0f 92       	push	r0
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	0f 92       	push	r0
    4238:	11 24       	eor	r1, r1
    423a:	0b b6       	in	r0, 0x3b	; 59
    423c:	0f 92       	push	r0
    423e:	2f 93       	push	r18
    4240:	8f 93       	push	r24
    4242:	9f 93       	push	r25
    4244:	af 93       	push	r26
    4246:	bf 93       	push	r27
    4248:	ef 93       	push	r30
    424a:	ff 93       	push	r31
    424c:	e0 91 0e 0f 	lds	r30, 0x0F0E	; 0x800f0e <_ser_handle+0x6>
    4250:	f0 91 0f 0f 	lds	r31, 0x0F0F	; 0x800f0f <_ser_handle+0x7>
    4254:	30 97       	sbiw	r30, 0x00	; 0
    4256:	b9 f0       	breq	.+46     	; 0x4286 <__vector_55+0x56>
    4258:	02 80       	ldd	r0, Z+2	; 0x02
    425a:	f3 81       	ldd	r31, Z+3	; 0x03
    425c:	e0 2d       	mov	r30, r0
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	98 17       	cp	r25, r24
    4264:	b1 f0       	breq	.+44     	; 0x4292 <__vector_55+0x62>
    4266:	92 81       	ldd	r25, Z+2	; 0x02
    4268:	85 81       	ldd	r24, Z+5	; 0x05
    426a:	28 2f       	mov	r18, r24
    426c:	26 95       	lsr	r18
    426e:	29 23       	and	r18, r25
    4270:	a0 81       	ld	r26, Z
    4272:	b1 81       	ldd	r27, Z+1	; 0x01
    4274:	a2 0f       	add	r26, r18
    4276:	b1 1d       	adc	r27, r1
    4278:	2c 91       	ld	r18, X
    427a:	9f 5f       	subi	r25, 0xFF	; 255
    427c:	89 23       	and	r24, r25
    427e:	82 83       	std	Z+2, r24	; 0x02
    4280:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4284:	0b c0       	rjmp	.+22     	; 0x429c <__vector_55+0x6c>
    4286:	e1 e3       	ldi	r30, 0x31	; 49
    4288:	f1 e0       	ldi	r31, 0x01	; 1
    428a:	80 81       	ld	r24, Z
    428c:	8f 7d       	andi	r24, 0xDF	; 223
    428e:	80 83       	st	Z, r24
    4290:	05 c0       	rjmp	.+10     	; 0x429c <__vector_55+0x6c>
    4292:	e1 e3       	ldi	r30, 0x31	; 49
    4294:	f1 e0       	ldi	r31, 0x01	; 1
    4296:	80 81       	ld	r24, Z
    4298:	8f 7d       	andi	r24, 0xDF	; 223
    429a:	80 83       	st	Z, r24
    429c:	ff 91       	pop	r31
    429e:	ef 91       	pop	r30
    42a0:	bf 91       	pop	r27
    42a2:	af 91       	pop	r26
    42a4:	9f 91       	pop	r25
    42a6:	8f 91       	pop	r24
    42a8:	2f 91       	pop	r18
    42aa:	0f 90       	pop	r0
    42ac:	0b be       	out	0x3b, r0	; 59
    42ae:	0f 90       	pop	r0
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	0f 90       	pop	r0
    42b4:	1f 90       	pop	r1
    42b6:	18 95       	reti

000042b8 <usart_getchar>:
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
    42bc:	1f 92       	push	r1
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	be 01       	movw	r22, r28
    42c4:	6f 5f       	subi	r22, 0xFF	; 255
    42c6:	7f 4f       	sbci	r23, 0xFF	; 255
    42c8:	80 91 10 0f 	lds	r24, 0x0F10	; 0x800f10 <_com_serial_instance>
    42cc:	90 91 11 0f 	lds	r25, 0x0F11	; 0x800f11 <_com_serial_instance+0x1>
    42d0:	7b dd       	rcall	.-1290   	; 0x3dc8 <serial_getByte>
    42d2:	81 11       	cpse	r24, r1
    42d4:	f6 cf       	rjmp	.-20     	; 0x42c2 <usart_getchar+0xa>
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0f 90       	pop	r0
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	08 95       	ret

000042e2 <usart_putchar>:
    42e2:	68 2f       	mov	r22, r24
    42e4:	80 91 10 0f 	lds	r24, 0x0F10	; 0x800f10 <_com_serial_instance>
    42e8:	90 91 11 0f 	lds	r25, 0x0F11	; 0x800f11 <_com_serial_instance+0x1>
    42ec:	ed dc       	rcall	.-1574   	; 0x3cc8 <serial_sendByte>
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	08 95       	ret

000042f4 <stdio_initialise>:
    42f4:	8f 92       	push	r8
    42f6:	9f 92       	push	r9
    42f8:	af 92       	push	r10
    42fa:	cf 92       	push	r12
    42fc:	ef 92       	push	r14
    42fe:	0f 93       	push	r16
    4300:	81 2c       	mov	r8, r1
    4302:	91 2c       	mov	r9, r1
    4304:	68 94       	set
    4306:	aa 24       	eor	r10, r10
    4308:	a7 f8       	bld	r10, 7
    430a:	68 94       	set
    430c:	cc 24       	eor	r12, r12
    430e:	c7 f8       	bld	r12, 7
    4310:	e1 2c       	mov	r14, r1
    4312:	00 e0       	ldi	r16, 0x00	; 0
    4314:	23 e0       	ldi	r18, 0x03	; 3
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	51 ee       	ldi	r21, 0xE1	; 225
    431a:	60 e0       	ldi	r22, 0x00	; 0
    431c:	70 e0       	ldi	r23, 0x00	; 0
    431e:	33 dc       	rcall	.-1946   	; 0x3b86 <serial_create>
    4320:	90 93 11 0f 	sts	0x0F11, r25	; 0x800f11 <_com_serial_instance+0x1>
    4324:	80 93 10 0f 	sts	0x0F10, r24	; 0x800f10 <_com_serial_instance>
    4328:	ee e3       	ldi	r30, 0x3E	; 62
    432a:	ff e0       	ldi	r31, 0x0F	; 15
    432c:	83 e1       	ldi	r24, 0x13	; 19
    432e:	92 e0       	ldi	r25, 0x02	; 2
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	80 83       	st	Z, r24
    4334:	93 83       	std	Z+3, r25	; 0x03
    4336:	82 83       	std	Z+2, r24	; 0x02
    4338:	0f 91       	pop	r16
    433a:	ef 90       	pop	r14
    433c:	cf 90       	pop	r12
    433e:	af 90       	pop	r10
    4340:	9f 90       	pop	r9
    4342:	8f 90       	pop	r8
    4344:	08 95       	ret

00004346 <_select_instance>:
    4346:	e0 91 13 0f 	lds	r30, 0x0F13	; 0x800f13 <_this>
    434a:	f0 91 14 0f 	lds	r31, 0x0F14	; 0x800f14 <_this+0x1>
    434e:	30 97       	sbiw	r30, 0x00	; 0
    4350:	f9 f0       	breq	.+62     	; 0x4390 <_select_instance+0x4a>
    4352:	a0 81       	ld	r26, Z
    4354:	b1 81       	ldd	r27, Z+1	; 0x01
    4356:	10 97       	sbiw	r26, 0x00	; 0
    4358:	d9 f0       	breq	.+54     	; 0x4390 <_select_instance+0x4a>
    435a:	23 81       	ldd	r18, Z+3	; 0x03
    435c:	21 30       	cpi	r18, 0x01	; 1
    435e:	69 f4       	brne	.+26     	; 0x437a <_select_instance+0x34>
    4360:	4c 91       	ld	r20, X
    4362:	21 e0       	ldi	r18, 0x01	; 1
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	02 80       	ldd	r0, Z+2	; 0x02
    4368:	02 c0       	rjmp	.+4      	; 0x436e <_select_instance+0x28>
    436a:	22 0f       	add	r18, r18
    436c:	33 1f       	adc	r19, r19
    436e:	0a 94       	dec	r0
    4370:	e2 f7       	brpl	.-8      	; 0x436a <_select_instance+0x24>
    4372:	20 95       	com	r18
    4374:	24 23       	and	r18, r20
    4376:	2c 93       	st	X, r18
    4378:	0b c0       	rjmp	.+22     	; 0x4390 <_select_instance+0x4a>
    437a:	4c 91       	ld	r20, X
    437c:	21 e0       	ldi	r18, 0x01	; 1
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	02 80       	ldd	r0, Z+2	; 0x02
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <_select_instance+0x42>
    4384:	22 0f       	add	r18, r18
    4386:	33 1f       	adc	r19, r19
    4388:	0a 94       	dec	r0
    438a:	e2 f7       	brpl	.-8      	; 0x4384 <_select_instance+0x3e>
    438c:	24 2b       	or	r18, r20
    438e:	2c 93       	st	X, r18
    4390:	90 93 14 0f 	sts	0x0F14, r25	; 0x800f14 <_this+0x1>
    4394:	80 93 13 0f 	sts	0x0F13, r24	; 0x800f13 <_this>
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	69 f0       	breq	.+26     	; 0x43b6 <_select_instance+0x70>
    439c:	10 92 15 0f 	sts	0x0F15, r1	; 0x800f15 <_spi_active>
    43a0:	2c b5       	in	r18, 0x2c	; 44
    43a2:	2f 73       	andi	r18, 0x3F	; 63
    43a4:	2c bd       	out	0x2c, r18	; 44
    43a6:	fc 01       	movw	r30, r24
    43a8:	24 81       	ldd	r18, Z+4	; 0x04
    43aa:	2c bd       	out	0x2c, r18	; 44
    43ac:	85 81       	ldd	r24, Z+5	; 0x05
    43ae:	8d bd       	out	0x2d, r24	; 45
    43b0:	8c b5       	in	r24, 0x2c	; 44
    43b2:	80 64       	ori	r24, 0x40	; 64
    43b4:	8c bd       	out	0x2c, r24	; 44
    43b6:	08 95       	ret

000043b8 <spi_create>:
    43b8:	4f 92       	push	r4
    43ba:	5f 92       	push	r5
    43bc:	6f 92       	push	r6
    43be:	7f 92       	push	r7
    43c0:	8f 92       	push	r8
    43c2:	9f 92       	push	r9
    43c4:	af 92       	push	r10
    43c6:	bf 92       	push	r11
    43c8:	cf 92       	push	r12
    43ca:	df 92       	push	r13
    43cc:	ef 92       	push	r14
    43ce:	ff 92       	push	r15
    43d0:	0f 93       	push	r16
    43d2:	1f 93       	push	r17
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	98 2e       	mov	r9, r24
    43de:	b6 2e       	mov	r11, r22
    43e0:	d4 2e       	mov	r13, r20
    43e2:	f2 2e       	mov	r15, r18
    43e4:	80 91 12 0f 	lds	r24, 0x0F12	; 0x800f12 <_initialised>
    43e8:	81 11       	cpse	r24, r1
    43ea:	06 c0       	rjmp	.+12     	; 0x43f8 <spi_create+0x40>
    43ec:	84 b1       	in	r24, 0x04	; 4
    43ee:	87 60       	ori	r24, 0x07	; 7
    43f0:	84 b9       	out	0x04, r24	; 4
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	80 93 12 0f 	sts	0x0F12, r24	; 0x800f12 <_initialised>
    43f8:	8c e0       	ldi	r24, 0x0C	; 12
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	c0 d5       	rcall	.+2944   	; 0x4f7e <malloc>
    43fe:	3c 01       	movw	r6, r24
    4400:	dc 01       	movw	r26, r24
    4402:	11 96       	adiw	r26, 0x01	; 1
    4404:	1c 93       	st	X, r17
    4406:	0e 93       	st	-X, r16
    4408:	12 96       	adiw	r26, 0x02	; 2
    440a:	ec 92       	st	X, r14
    440c:	12 97       	sbiw	r26, 0x02	; 2
    440e:	13 96       	adiw	r26, 0x03	; 3
    4410:	cc 92       	st	X, r12
    4412:	13 97       	sbiw	r26, 0x03	; 3
    4414:	8d 2d       	mov	r24, r13
    4416:	88 0f       	add	r24, r24
    4418:	88 0f       	add	r24, r24
    441a:	f8 2a       	or	r15, r24
    441c:	eb 2d       	mov	r30, r11
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	ef 5f       	subi	r30, 0xFF	; 255
    4422:	fb 4f       	sbci	r31, 0xFB	; 251
    4424:	80 81       	ld	r24, Z
    4426:	98 2a       	or	r9, r24
    4428:	8f 2d       	mov	r24, r15
    442a:	89 29       	or	r24, r9
    442c:	14 96       	adiw	r26, 0x04	; 4
    442e:	8c 93       	st	X, r24
    4430:	b3 e0       	ldi	r27, 0x03	; 3
    4432:	bb 15       	cp	r27, r11
    4434:	18 f4       	brcc	.+6      	; 0x443c <spi_create+0x84>
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	f3 01       	movw	r30, r6
    443a:	85 83       	std	Z+5, r24	; 0x05
    443c:	a1 10       	cpse	r10, r1
    443e:	06 c0       	rjmp	.+12     	; 0x444c <spi_create+0x94>
    4440:	d3 01       	movw	r26, r6
    4442:	19 96       	adiw	r26, 0x09	; 9
    4444:	1c 92       	st	X, r1
    4446:	1e 92       	st	-X, r1
    4448:	18 97       	sbiw	r26, 0x08	; 8
    444a:	12 c0       	rjmp	.+36     	; 0x4470 <spi_create+0xb8>
    444c:	6a 2d       	mov	r22, r10
    444e:	70 e0       	ldi	r23, 0x00	; 0
    4450:	84 e0       	ldi	r24, 0x04	; 4
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	7a d5       	rcall	.+2804   	; 0x4f4a <calloc>
    4456:	2c 01       	movw	r4, r24
    4458:	61 e0       	ldi	r22, 0x01	; 1
    445a:	70 e0       	ldi	r23, 0x00	; 0
    445c:	86 e0       	ldi	r24, 0x06	; 6
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	74 d5       	rcall	.+2792   	; 0x4f4a <calloc>
    4462:	6c 01       	movw	r12, r24
    4464:	4a 2d       	mov	r20, r10
    4466:	b2 01       	movw	r22, r4
    4468:	27 d3       	rcall	.+1614   	; 0x4ab8 <fifo_init>
    446a:	f3 01       	movw	r30, r6
    446c:	d1 86       	std	Z+9, r13	; 0x09
    446e:	c0 86       	std	Z+8, r12	; 0x08
    4470:	81 10       	cpse	r8, r1
    4472:	06 c0       	rjmp	.+12     	; 0x4480 <spi_create+0xc8>
    4474:	d3 01       	movw	r26, r6
    4476:	17 96       	adiw	r26, 0x07	; 7
    4478:	1c 92       	st	X, r1
    447a:	1e 92       	st	-X, r1
    447c:	16 97       	sbiw	r26, 0x06	; 6
    447e:	12 c0       	rjmp	.+36     	; 0x44a4 <spi_create+0xec>
    4480:	68 2d       	mov	r22, r8
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	84 e0       	ldi	r24, 0x04	; 4
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	60 d5       	rcall	.+2752   	; 0x4f4a <calloc>
    448a:	5c 01       	movw	r10, r24
    448c:	61 e0       	ldi	r22, 0x01	; 1
    448e:	70 e0       	ldi	r23, 0x00	; 0
    4490:	86 e0       	ldi	r24, 0x06	; 6
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	5a d5       	rcall	.+2740   	; 0x4f4a <calloc>
    4496:	6c 01       	movw	r12, r24
    4498:	48 2d       	mov	r20, r8
    449a:	b5 01       	movw	r22, r10
    449c:	0d d3       	rcall	.+1562   	; 0x4ab8 <fifo_init>
    449e:	f3 01       	movw	r30, r6
    44a0:	d7 82       	std	Z+7, r13	; 0x07
    44a2:	c6 82       	std	Z+6, r12	; 0x06
    44a4:	8c 89       	ldd	r24, Y+20	; 0x14
    44a6:	9d 89       	ldd	r25, Y+21	; 0x15
    44a8:	d3 01       	movw	r26, r6
    44aa:	1b 96       	adiw	r26, 0x0b	; 11
    44ac:	9c 93       	st	X, r25
    44ae:	8e 93       	st	-X, r24
    44b0:	1a 97       	sbiw	r26, 0x0a	; 10
    44b2:	01 15       	cp	r16, r1
    44b4:	11 05       	cpc	r17, r1
    44b6:	59 f0       	breq	.+22     	; 0x44ce <spi_create+0x116>
    44b8:	f8 01       	movw	r30, r16
    44ba:	22 91       	ld	r18, -Z
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <spi_create+0x10e>
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	ea 94       	dec	r14
    44c8:	e2 f7       	brpl	.-8      	; 0x44c2 <spi_create+0x10a>
    44ca:	82 2b       	or	r24, r18
    44cc:	80 83       	st	Z, r24
    44ce:	2f b7       	in	r18, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	40 91 13 0f 	lds	r20, 0x0F13	; 0x800f13 <_this>
    44d6:	50 91 14 0f 	lds	r21, 0x0F14	; 0x800f14 <_this+0x1>
    44da:	70 92 14 0f 	sts	0x0F14, r7	; 0x800f14 <_this+0x1>
    44de:	60 92 13 0f 	sts	0x0F13, r6	; 0x800f13 <_this>
    44e2:	d3 01       	movw	r26, r6
    44e4:	ed 91       	ld	r30, X+
    44e6:	fc 91       	ld	r31, X
    44e8:	11 97       	sbiw	r26, 0x01	; 1
    44ea:	30 97       	sbiw	r30, 0x00	; 0
    44ec:	01 f1       	breq	.+64     	; 0x452e <spi_create+0x176>
    44ee:	13 96       	adiw	r26, 0x03	; 3
    44f0:	8c 91       	ld	r24, X
    44f2:	13 97       	sbiw	r26, 0x03	; 3
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	71 f4       	brne	.+28     	; 0x4514 <spi_create+0x15c>
    44f8:	30 81       	ld	r19, Z
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	12 96       	adiw	r26, 0x02	; 2
    4500:	0c 90       	ld	r0, X
    4502:	02 c0       	rjmp	.+4      	; 0x4508 <spi_create+0x150>
    4504:	88 0f       	add	r24, r24
    4506:	99 1f       	adc	r25, r25
    4508:	0a 94       	dec	r0
    450a:	e2 f7       	brpl	.-8      	; 0x4504 <spi_create+0x14c>
    450c:	80 95       	com	r24
    450e:	83 23       	and	r24, r19
    4510:	80 83       	st	Z, r24
    4512:	0d c0       	rjmp	.+26     	; 0x452e <spi_create+0x176>
    4514:	30 81       	ld	r19, Z
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	d3 01       	movw	r26, r6
    451c:	12 96       	adiw	r26, 0x02	; 2
    451e:	0c 90       	ld	r0, X
    4520:	02 c0       	rjmp	.+4      	; 0x4526 <spi_create+0x16e>
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	0a 94       	dec	r0
    4528:	e2 f7       	brpl	.-8      	; 0x4522 <spi_create+0x16a>
    452a:	83 2b       	or	r24, r19
    452c:	80 83       	st	Z, r24
    452e:	50 93 14 0f 	sts	0x0F14, r21	; 0x800f14 <_this+0x1>
    4532:	40 93 13 0f 	sts	0x0F13, r20	; 0x800f13 <_this>
    4536:	2f bf       	out	0x3f, r18	; 63
    4538:	c3 01       	movw	r24, r6
    453a:	df 91       	pop	r29
    453c:	cf 91       	pop	r28
    453e:	1f 91       	pop	r17
    4540:	0f 91       	pop	r16
    4542:	ff 90       	pop	r15
    4544:	ef 90       	pop	r14
    4546:	df 90       	pop	r13
    4548:	cf 90       	pop	r12
    454a:	bf 90       	pop	r11
    454c:	af 90       	pop	r10
    454e:	9f 90       	pop	r9
    4550:	8f 90       	pop	r8
    4552:	7f 90       	pop	r7
    4554:	6f 90       	pop	r6
    4556:	5f 90       	pop	r5
    4558:	4f 90       	pop	r4
    455a:	08 95       	ret

0000455c <spi_sendByte>:
    455c:	1f 93       	push	r17
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	00 97       	sbiw	r24, 0x00	; 0
    4564:	09 f4       	brne	.+2      	; 0x4568 <spi_sendByte+0xc>
    4566:	6a c0       	rjmp	.+212    	; 0x463c <spi_sendByte+0xe0>
    4568:	16 2f       	mov	r17, r22
    456a:	ec 01       	movw	r28, r24
    456c:	80 91 13 0f 	lds	r24, 0x0F13	; 0x800f13 <_this>
    4570:	90 91 14 0f 	lds	r25, 0x0F14	; 0x800f14 <_this+0x1>
    4574:	c8 17       	cp	r28, r24
    4576:	d9 07       	cpc	r29, r25
    4578:	11 f0       	breq	.+4      	; 0x457e <spi_sendByte+0x22>
    457a:	ce 01       	movw	r24, r28
    457c:	e4 de       	rcall	.-568    	; 0x4346 <_select_instance>
    457e:	8f b7       	in	r24, 0x3f	; 63
    4580:	2f b7       	in	r18, 0x3f	; 63
    4582:	f8 94       	cli
    4584:	80 91 15 0f 	lds	r24, 0x0F15	; 0x800f15 <_spi_active>
    4588:	81 11       	cpse	r24, r1
    458a:	31 c0       	rjmp	.+98     	; 0x45ee <spi_sendByte+0x92>
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	80 93 15 0f 	sts	0x0F15, r24	; 0x800f15 <_spi_active>
    4592:	a0 91 13 0f 	lds	r26, 0x0F13	; 0x800f13 <_this>
    4596:	b0 91 14 0f 	lds	r27, 0x0F14	; 0x800f14 <_this+0x1>
    459a:	ed 91       	ld	r30, X+
    459c:	fc 91       	ld	r31, X
    459e:	11 97       	sbiw	r26, 0x01	; 1
    45a0:	30 97       	sbiw	r30, 0x00	; 0
    45a2:	f9 f0       	breq	.+62     	; 0x45e2 <spi_sendByte+0x86>
    45a4:	13 96       	adiw	r26, 0x03	; 3
    45a6:	8c 91       	ld	r24, X
    45a8:	13 97       	sbiw	r26, 0x03	; 3
    45aa:	81 30       	cpi	r24, 0x01	; 1
    45ac:	69 f4       	brne	.+26     	; 0x45c8 <spi_sendByte+0x6c>
    45ae:	30 81       	ld	r19, Z
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	12 96       	adiw	r26, 0x02	; 2
    45b6:	0c 90       	ld	r0, X
    45b8:	02 c0       	rjmp	.+4      	; 0x45be <spi_sendByte+0x62>
    45ba:	88 0f       	add	r24, r24
    45bc:	99 1f       	adc	r25, r25
    45be:	0a 94       	dec	r0
    45c0:	e2 f7       	brpl	.-8      	; 0x45ba <spi_sendByte+0x5e>
    45c2:	83 2b       	or	r24, r19
    45c4:	80 83       	st	Z, r24
    45c6:	0d c0       	rjmp	.+26     	; 0x45e2 <spi_sendByte+0x86>
    45c8:	30 81       	ld	r19, Z
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	12 96       	adiw	r26, 0x02	; 2
    45d0:	0c 90       	ld	r0, X
    45d2:	02 c0       	rjmp	.+4      	; 0x45d8 <spi_sendByte+0x7c>
    45d4:	88 0f       	add	r24, r24
    45d6:	99 1f       	adc	r25, r25
    45d8:	0a 94       	dec	r0
    45da:	e2 f7       	brpl	.-8      	; 0x45d4 <spi_sendByte+0x78>
    45dc:	80 95       	com	r24
    45de:	83 23       	and	r24, r19
    45e0:	80 83       	st	Z, r24
    45e2:	8c b5       	in	r24, 0x2c	; 44
    45e4:	80 68       	ori	r24, 0x80	; 128
    45e6:	8c bd       	out	0x2c, r24	; 44
    45e8:	1e bd       	out	0x2e, r17	; 46
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	25 c0       	rjmp	.+74     	; 0x4638 <spi_sendByte+0xdc>
    45ee:	ee 81       	ldd	r30, Y+6	; 0x06
    45f0:	ff 81       	ldd	r31, Y+7	; 0x07
    45f2:	30 97       	sbiw	r30, 0x00	; 0
    45f4:	e1 f0       	breq	.+56     	; 0x462e <spi_sendByte+0xd2>
    45f6:	34 81       	ldd	r19, Z+4	; 0x04
    45f8:	83 81       	ldd	r24, Z+3	; 0x03
    45fa:	42 81       	ldd	r20, Z+2	; 0x02
    45fc:	95 81       	ldd	r25, Z+5	; 0x05
    45fe:	84 1b       	sub	r24, r20
    4600:	89 23       	and	r24, r25
    4602:	38 17       	cp	r19, r24
    4604:	b1 f0       	breq	.+44     	; 0x4632 <spi_sendByte+0xd6>
    4606:	83 81       	ldd	r24, Z+3	; 0x03
    4608:	42 81       	ldd	r20, Z+2	; 0x02
    460a:	84 1b       	sub	r24, r20
    460c:	89 23       	and	r24, r25
    460e:	38 17       	cp	r19, r24
    4610:	91 f0       	breq	.+36     	; 0x4636 <spi_sendByte+0xda>
    4612:	83 81       	ldd	r24, Z+3	; 0x03
    4614:	96 95       	lsr	r25
    4616:	98 23       	and	r25, r24
    4618:	a0 81       	ld	r26, Z
    461a:	b1 81       	ldd	r27, Z+1	; 0x01
    461c:	a9 0f       	add	r26, r25
    461e:	b1 1d       	adc	r27, r1
    4620:	1c 93       	st	X, r17
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	95 81       	ldd	r25, Z+5	; 0x05
    4626:	89 23       	and	r24, r25
    4628:	83 83       	std	Z+3, r24	; 0x03
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	05 c0       	rjmp	.+10     	; 0x4638 <spi_sendByte+0xdc>
    462e:	82 e0       	ldi	r24, 0x02	; 2
    4630:	03 c0       	rjmp	.+6      	; 0x4638 <spi_sendByte+0xdc>
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	01 c0       	rjmp	.+2      	; 0x4638 <spi_sendByte+0xdc>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	2f bf       	out	0x3f, r18	; 63
    463a:	01 c0       	rjmp	.+2      	; 0x463e <spi_sendByte+0xe2>
    463c:	83 e0       	ldi	r24, 0x03	; 3
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	1f 91       	pop	r17
    4644:	08 95       	ret

00004646 <__vector_24>:
    4646:	1f 92       	push	r1
    4648:	0f 92       	push	r0
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	0f 92       	push	r0
    464e:	11 24       	eor	r1, r1
    4650:	0b b6       	in	r0, 0x3b	; 59
    4652:	0f 92       	push	r0
    4654:	2f 93       	push	r18
    4656:	3f 93       	push	r19
    4658:	4f 93       	push	r20
    465a:	5f 93       	push	r21
    465c:	6f 93       	push	r22
    465e:	7f 93       	push	r23
    4660:	8f 93       	push	r24
    4662:	9f 93       	push	r25
    4664:	af 93       	push	r26
    4666:	bf 93       	push	r27
    4668:	cf 93       	push	r28
    466a:	df 93       	push	r29
    466c:	ef 93       	push	r30
    466e:	ff 93       	push	r31
    4670:	6e b5       	in	r22, 0x2e	; 46
    4672:	a0 91 13 0f 	lds	r26, 0x0F13	; 0x800f13 <_this>
    4676:	b0 91 14 0f 	lds	r27, 0x0F14	; 0x800f14 <_this+0x1>
    467a:	18 96       	adiw	r26, 0x08	; 8
    467c:	ed 91       	ld	r30, X+
    467e:	fc 91       	ld	r31, X
    4680:	19 97       	sbiw	r26, 0x09	; 9
    4682:	30 97       	sbiw	r30, 0x00	; 0
    4684:	a1 f0       	breq	.+40     	; 0x46ae <__vector_24+0x68>
    4686:	83 81       	ldd	r24, Z+3	; 0x03
    4688:	22 81       	ldd	r18, Z+2	; 0x02
    468a:	95 81       	ldd	r25, Z+5	; 0x05
    468c:	82 1b       	sub	r24, r18
    468e:	89 23       	and	r24, r25
    4690:	24 81       	ldd	r18, Z+4	; 0x04
    4692:	82 17       	cp	r24, r18
    4694:	61 f0       	breq	.+24     	; 0x46ae <__vector_24+0x68>
    4696:	83 81       	ldd	r24, Z+3	; 0x03
    4698:	96 95       	lsr	r25
    469a:	98 23       	and	r25, r24
    469c:	c0 81       	ld	r28, Z
    469e:	d1 81       	ldd	r29, Z+1	; 0x01
    46a0:	c9 0f       	add	r28, r25
    46a2:	d1 1d       	adc	r29, r1
    46a4:	68 83       	st	Y, r22
    46a6:	8f 5f       	subi	r24, 0xFF	; 255
    46a8:	95 81       	ldd	r25, Z+5	; 0x05
    46aa:	89 23       	and	r24, r25
    46ac:	83 83       	std	Z+3, r24	; 0x03
    46ae:	16 96       	adiw	r26, 0x06	; 6
    46b0:	ed 91       	ld	r30, X+
    46b2:	fc 91       	ld	r31, X
    46b4:	17 97       	sbiw	r26, 0x07	; 7
    46b6:	30 97       	sbiw	r30, 0x00	; 0
    46b8:	99 f0       	breq	.+38     	; 0x46e0 <__vector_24+0x9a>
    46ba:	93 81       	ldd	r25, Z+3	; 0x03
    46bc:	82 81       	ldd	r24, Z+2	; 0x02
    46be:	98 17       	cp	r25, r24
    46c0:	79 f0       	breq	.+30     	; 0x46e0 <__vector_24+0x9a>
    46c2:	92 81       	ldd	r25, Z+2	; 0x02
    46c4:	85 81       	ldd	r24, Z+5	; 0x05
    46c6:	28 2f       	mov	r18, r24
    46c8:	26 95       	lsr	r18
    46ca:	29 23       	and	r18, r25
    46cc:	a0 81       	ld	r26, Z
    46ce:	b1 81       	ldd	r27, Z+1	; 0x01
    46d0:	a2 0f       	add	r26, r18
    46d2:	b1 1d       	adc	r27, r1
    46d4:	2c 91       	ld	r18, X
    46d6:	9f 5f       	subi	r25, 0xFF	; 255
    46d8:	89 23       	and	r24, r25
    46da:	82 83       	std	Z+2, r24	; 0x02
    46dc:	2e bd       	out	0x2e, r18	; 46
    46de:	2d c0       	rjmp	.+90     	; 0x473a <__vector_24+0xf4>
    46e0:	8c b5       	in	r24, 0x2c	; 44
    46e2:	8f 77       	andi	r24, 0x7F	; 127
    46e4:	8c bd       	out	0x2c, r24	; 44
    46e6:	10 92 15 0f 	sts	0x0F15, r1	; 0x800f15 <_spi_active>
    46ea:	a0 91 13 0f 	lds	r26, 0x0F13	; 0x800f13 <_this>
    46ee:	b0 91 14 0f 	lds	r27, 0x0F14	; 0x800f14 <_this+0x1>
    46f2:	ed 91       	ld	r30, X+
    46f4:	fc 91       	ld	r31, X
    46f6:	11 97       	sbiw	r26, 0x01	; 1
    46f8:	30 97       	sbiw	r30, 0x00	; 0
    46fa:	f9 f0       	breq	.+62     	; 0x473a <__vector_24+0xf4>
    46fc:	13 96       	adiw	r26, 0x03	; 3
    46fe:	8c 91       	ld	r24, X
    4700:	13 97       	sbiw	r26, 0x03	; 3
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	71 f4       	brne	.+28     	; 0x4722 <__vector_24+0xdc>
    4706:	20 81       	ld	r18, Z
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	12 96       	adiw	r26, 0x02	; 2
    470e:	0c 90       	ld	r0, X
    4710:	02 c0       	rjmp	.+4      	; 0x4716 <__vector_24+0xd0>
    4712:	88 0f       	add	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	0a 94       	dec	r0
    4718:	e2 f7       	brpl	.-8      	; 0x4712 <__vector_24+0xcc>
    471a:	80 95       	com	r24
    471c:	82 23       	and	r24, r18
    471e:	80 83       	st	Z, r24
    4720:	0c c0       	rjmp	.+24     	; 0x473a <__vector_24+0xf4>
    4722:	20 81       	ld	r18, Z
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	12 96       	adiw	r26, 0x02	; 2
    472a:	0c 90       	ld	r0, X
    472c:	02 c0       	rjmp	.+4      	; 0x4732 <__vector_24+0xec>
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	0a 94       	dec	r0
    4734:	e2 f7       	brpl	.-8      	; 0x472e <__vector_24+0xe8>
    4736:	82 2b       	or	r24, r18
    4738:	80 83       	st	Z, r24
    473a:	80 91 13 0f 	lds	r24, 0x0F13	; 0x800f13 <_this>
    473e:	90 91 14 0f 	lds	r25, 0x0F14	; 0x800f14 <_this+0x1>
    4742:	dc 01       	movw	r26, r24
    4744:	1a 96       	adiw	r26, 0x0a	; 10
    4746:	ed 91       	ld	r30, X+
    4748:	fc 91       	ld	r31, X
    474a:	1b 97       	sbiw	r26, 0x0b	; 11
    474c:	30 97       	sbiw	r30, 0x00	; 0
    474e:	09 f0       	breq	.+2      	; 0x4752 <__vector_24+0x10c>
    4750:	19 95       	eicall
    4752:	ff 91       	pop	r31
    4754:	ef 91       	pop	r30
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	bf 91       	pop	r27
    475c:	af 91       	pop	r26
    475e:	9f 91       	pop	r25
    4760:	8f 91       	pop	r24
    4762:	7f 91       	pop	r23
    4764:	6f 91       	pop	r22
    4766:	5f 91       	pop	r21
    4768:	4f 91       	pop	r20
    476a:	3f 91       	pop	r19
    476c:	2f 91       	pop	r18
    476e:	0f 90       	pop	r0
    4770:	0b be       	out	0x3b, r0	; 59
    4772:	0f 90       	pop	r0
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	0f 90       	pop	r0
    4778:	1f 90       	pop	r1
    477a:	18 95       	reti

0000477c <_initTwiInterface>:
    477c:	80 91 24 0f 	lds	r24, 0x0F24	; 0x800f24 <_twiIsInitiated>
    4780:	81 11       	cpse	r24, r1
    4782:	0c c0       	rjmp	.+24     	; 0x479c <_initTwiInterface+0x20>
    4784:	8c e0       	ldi	r24, 0x0C	; 12
    4786:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    478a:	8f ef       	ldi	r24, 0xFF	; 255
    478c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4790:	84 e0       	ldi	r24, 0x04	; 4
    4792:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	80 93 24 0f 	sts	0x0F24, r24	; 0x800f24 <_twiIsInitiated>
    479c:	08 95       	ret

0000479e <twiCreate>:
    479e:	af 92       	push	r10
    47a0:	bf 92       	push	r11
    47a2:	cf 92       	push	r12
    47a4:	df 92       	push	r13
    47a6:	ef 92       	push	r14
    47a8:	ff 92       	push	r15
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	a8 2e       	mov	r10, r24
    47b4:	b6 2e       	mov	r11, r22
    47b6:	69 01       	movw	r12, r18
    47b8:	7a 01       	movw	r14, r20
    47ba:	84 e0       	ldi	r24, 0x04	; 4
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	df d3       	rcall	.+1982   	; 0x4f7e <malloc>
    47c0:	ec 01       	movw	r28, r24
    47c2:	89 2b       	or	r24, r25
    47c4:	61 f1       	breq	.+88     	; 0x481e <twiCreate+0x80>
    47c6:	a8 82       	st	Y, r10
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	b8 12       	cpse	r11, r24
    47cc:	12 c0       	rjmp	.+36     	; 0x47f2 <twiCreate+0x54>
    47ce:	c7 01       	movw	r24, r14
    47d0:	b6 01       	movw	r22, r12
    47d2:	20 ea       	ldi	r18, 0xA0	; 160
    47d4:	36 e8       	ldi	r19, 0x86	; 134
    47d6:	41 e0       	ldi	r20, 0x01	; 1
    47d8:	50 e0       	ldi	r21, 0x00	; 0
    47da:	60 d3       	rcall	.+1728   	; 0x4e9c <__udivmodsi4>
    47dc:	da 01       	movw	r26, r20
    47de:	c9 01       	movw	r24, r18
    47e0:	40 97       	sbiw	r24, 0x10	; 16
    47e2:	a1 09       	sbc	r26, r1
    47e4:	b1 09       	sbc	r27, r1
    47e6:	b6 95       	lsr	r27
    47e8:	a7 95       	ror	r26
    47ea:	97 95       	ror	r25
    47ec:	87 95       	ror	r24
    47ee:	89 83       	std	Y+1, r24	; 0x01
    47f0:	11 c0       	rjmp	.+34     	; 0x4814 <twiCreate+0x76>
    47f2:	c7 01       	movw	r24, r14
    47f4:	b6 01       	movw	r22, r12
    47f6:	20 e8       	ldi	r18, 0x80	; 128
    47f8:	3a e1       	ldi	r19, 0x1A	; 26
    47fa:	46 e0       	ldi	r20, 0x06	; 6
    47fc:	50 e0       	ldi	r21, 0x00	; 0
    47fe:	4e d3       	rcall	.+1692   	; 0x4e9c <__udivmodsi4>
    4800:	da 01       	movw	r26, r20
    4802:	c9 01       	movw	r24, r18
    4804:	40 97       	sbiw	r24, 0x10	; 16
    4806:	a1 09       	sbc	r26, r1
    4808:	b1 09       	sbc	r27, r1
    480a:	b6 95       	lsr	r27
    480c:	a7 95       	ror	r26
    480e:	97 95       	ror	r25
    4810:	87 95       	ror	r24
    4812:	89 83       	std	Y+1, r24	; 0x01
    4814:	1b 83       	std	Y+3, r17	; 0x03
    4816:	0a 83       	std	Y+2, r16	; 0x02
    4818:	8c 2f       	mov	r24, r28
    481a:	9d 2f       	mov	r25, r29
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <twiCreate+0x84>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	df 91       	pop	r29
    4824:	cf 91       	pop	r28
    4826:	1f 91       	pop	r17
    4828:	0f 91       	pop	r16
    482a:	ff 90       	pop	r15
    482c:	ef 90       	pop	r14
    482e:	df 90       	pop	r13
    4830:	cf 90       	pop	r12
    4832:	bf 90       	pop	r11
    4834:	af 90       	pop	r10
    4836:	08 95       	ret

00004838 <twiIsBusy>:
    4838:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    483c:	81 70       	andi	r24, 0x01	; 1
    483e:	08 95       	ret

00004840 <twiTransmit>:
    4840:	ff 92       	push	r15
    4842:	0f 93       	push	r16
    4844:	1f 93       	push	r17
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	00 97       	sbiw	r24, 0x00	; 0
    484c:	d1 f1       	breq	.+116    	; 0x48c2 <twiTransmit+0x82>
    484e:	4a 30       	cpi	r20, 0x0A	; 10
    4850:	d0 f5       	brcc	.+116    	; 0x48c6 <twiTransmit+0x86>
    4852:	f4 2e       	mov	r15, r20
    4854:	8b 01       	movw	r16, r22
    4856:	ec 01       	movw	r28, r24
    4858:	ef df       	rcall	.-34     	; 0x4838 <twiIsBusy>
    485a:	81 11       	cpse	r24, r1
    485c:	36 c0       	rjmp	.+108    	; 0x48ca <twiTransmit+0x8a>
    485e:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_twiCurrentHandler>
    4862:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_twiCurrentHandler+0x1>
    4866:	c8 17       	cp	r28, r24
    4868:	d9 07       	cpc	r29, r25
    486a:	41 f0       	breq	.+16     	; 0x487c <twiTransmit+0x3c>
    486c:	87 df       	rcall	.-242    	; 0x477c <_initTwiInterface>
    486e:	89 81       	ldd	r24, Y+1	; 0x01
    4870:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4874:	d0 93 18 0f 	sts	0x0F18, r29	; 0x800f18 <_twiCurrentHandler+0x1>
    4878:	c0 93 17 0f 	sts	0x0F17, r28	; 0x800f17 <_twiCurrentHandler>
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	8f 0d       	add	r24, r15
    4880:	80 93 19 0f 	sts	0x0F19, r24	; 0x800f19 <_twiMessageLen>
    4884:	88 81       	ld	r24, Y
    4886:	88 0f       	add	r24, r24
    4888:	80 93 1a 0f 	sts	0x0F1A, r24	; 0x800f1a <_twiMessageBuffer>
    488c:	ff 20       	and	r15, r15
    488e:	89 f0       	breq	.+34     	; 0x48b2 <twiTransmit+0x72>
    4890:	f8 01       	movw	r30, r16
    4892:	ab e1       	ldi	r26, 0x1B	; 27
    4894:	bf e0       	ldi	r27, 0x0F	; 15
    4896:	4f ef       	ldi	r20, 0xFF	; 255
    4898:	4f 0d       	add	r20, r15
    489a:	64 2f       	mov	r22, r20
    489c:	70 e0       	ldi	r23, 0x00	; 0
    489e:	cb 01       	movw	r24, r22
    48a0:	01 96       	adiw	r24, 0x01	; 1
    48a2:	b8 01       	movw	r22, r16
    48a4:	68 0f       	add	r22, r24
    48a6:	79 1f       	adc	r23, r25
    48a8:	81 91       	ld	r24, Z+
    48aa:	8d 93       	st	X+, r24
    48ac:	e6 17       	cp	r30, r22
    48ae:	f7 07       	cpc	r31, r23
    48b0:	d9 f7       	brne	.-10     	; 0x48a8 <twiTransmit+0x68>
    48b2:	88 ef       	ldi	r24, 0xF8	; 248
    48b4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    48b8:	85 ea       	ldi	r24, 0xA5	; 165
    48ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48be:	84 e0       	ldi	r24, 0x04	; 4
    48c0:	05 c0       	rjmp	.+10     	; 0x48cc <twiTransmit+0x8c>
    48c2:	86 e0       	ldi	r24, 0x06	; 6
    48c4:	03 c0       	rjmp	.+6      	; 0x48cc <twiTransmit+0x8c>
    48c6:	87 e0       	ldi	r24, 0x07	; 7
    48c8:	01 c0       	rjmp	.+2      	; 0x48cc <twiTransmit+0x8c>
    48ca:	82 e0       	ldi	r24, 0x02	; 2
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	1f 91       	pop	r17
    48d2:	0f 91       	pop	r16
    48d4:	ff 90       	pop	r15
    48d6:	08 95       	ret

000048d8 <twiReceive>:
    48d8:	1f 93       	push	r17
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	00 97       	sbiw	r24, 0x00	; 0
    48e0:	29 f1       	breq	.+74     	; 0x492c <twiReceive+0x54>
    48e2:	6b 30       	cpi	r22, 0x0B	; 11
    48e4:	28 f5       	brcc	.+74     	; 0x4930 <twiReceive+0x58>
    48e6:	16 2f       	mov	r17, r22
    48e8:	ec 01       	movw	r28, r24
    48ea:	a6 df       	rcall	.-180    	; 0x4838 <twiIsBusy>
    48ec:	81 11       	cpse	r24, r1
    48ee:	22 c0       	rjmp	.+68     	; 0x4934 <twiReceive+0x5c>
    48f0:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_twiCurrentHandler>
    48f4:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_twiCurrentHandler+0x1>
    48f8:	c8 17       	cp	r28, r24
    48fa:	d9 07       	cpc	r29, r25
    48fc:	41 f0       	breq	.+16     	; 0x490e <twiReceive+0x36>
    48fe:	3e df       	rcall	.-388    	; 0x477c <_initTwiInterface>
    4900:	89 81       	ldd	r24, Y+1	; 0x01
    4902:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4906:	d0 93 18 0f 	sts	0x0F18, r29	; 0x800f18 <_twiCurrentHandler+0x1>
    490a:	c0 93 17 0f 	sts	0x0F17, r28	; 0x800f17 <_twiCurrentHandler>
    490e:	10 93 19 0f 	sts	0x0F19, r17	; 0x800f19 <_twiMessageLen>
    4912:	88 81       	ld	r24, Y
    4914:	88 0f       	add	r24, r24
    4916:	81 60       	ori	r24, 0x01	; 1
    4918:	80 93 1a 0f 	sts	0x0F1A, r24	; 0x800f1a <_twiMessageBuffer>
    491c:	88 ef       	ldi	r24, 0xF8	; 248
    491e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4922:	85 ea       	ldi	r24, 0xA5	; 165
    4924:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4928:	85 e0       	ldi	r24, 0x05	; 5
    492a:	05 c0       	rjmp	.+10     	; 0x4936 <twiReceive+0x5e>
    492c:	86 e0       	ldi	r24, 0x06	; 6
    492e:	03 c0       	rjmp	.+6      	; 0x4936 <twiReceive+0x5e>
    4930:	87 e0       	ldi	r24, 0x07	; 7
    4932:	01 c0       	rjmp	.+2      	; 0x4936 <twiReceive+0x5e>
    4934:	82 e0       	ldi	r24, 0x02	; 2
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	1f 91       	pop	r17
    493c:	08 95       	ret

0000493e <__vector_39>:
    493e:	1f 92       	push	r1
    4940:	0f 92       	push	r0
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	0f 92       	push	r0
    4946:	11 24       	eor	r1, r1
    4948:	0b b6       	in	r0, 0x3b	; 59
    494a:	0f 92       	push	r0
    494c:	2f 93       	push	r18
    494e:	3f 93       	push	r19
    4950:	4f 93       	push	r20
    4952:	5f 93       	push	r21
    4954:	6f 93       	push	r22
    4956:	7f 93       	push	r23
    4958:	8f 93       	push	r24
    495a:	9f 93       	push	r25
    495c:	af 93       	push	r26
    495e:	bf 93       	push	r27
    4960:	ef 93       	push	r30
    4962:	ff 93       	push	r31
    4964:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4968:	8e 2f       	mov	r24, r30
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	fc 01       	movw	r30, r24
    496e:	38 97       	sbiw	r30, 0x08	; 8
    4970:	e1 35       	cpi	r30, 0x51	; 81
    4972:	f1 05       	cpc	r31, r1
    4974:	08 f0       	brcs	.+2      	; 0x4978 <__vector_39+0x3a>
    4976:	75 c0       	rjmp	.+234    	; 0x4a62 <__vector_39+0x124>
    4978:	88 27       	eor	r24, r24
    497a:	e4 58       	subi	r30, 0x84	; 132
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	8f 4f       	sbci	r24, 0xFF	; 255
    4980:	af c2       	rjmp	.+1374   	; 0x4ee0 <__tablejump2__>
    4982:	10 92 16 0f 	sts	0x0F16, r1	; 0x800f16 <_index.1885>
    4986:	e0 91 16 0f 	lds	r30, 0x0F16	; 0x800f16 <_index.1885>
    498a:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiMessageLen>
    498e:	e8 17       	cp	r30, r24
    4990:	70 f4       	brcc	.+28     	; 0x49ae <__vector_39+0x70>
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	8e 0f       	add	r24, r30
    4996:	80 93 16 0f 	sts	0x0F16, r24	; 0x800f16 <_index.1885>
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	e6 5e       	subi	r30, 0xE6	; 230
    499e:	f0 4f       	sbci	r31, 0xF0	; 240
    49a0:	80 81       	ld	r24, Z
    49a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49a6:	85 e8       	ldi	r24, 0x85	; 133
    49a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49ac:	72 c0       	rjmp	.+228    	; 0x4a92 <__vector_39+0x154>
    49ae:	84 e9       	ldi	r24, 0x94	; 148
    49b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49b4:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_twiCurrentHandler>
    49b8:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_twiCurrentHandler+0x1>
    49bc:	dc 01       	movw	r26, r24
    49be:	12 96       	adiw	r26, 0x02	; 2
    49c0:	ed 91       	ld	r30, X+
    49c2:	fc 91       	ld	r31, X
    49c4:	13 97       	sbiw	r26, 0x03	; 3
    49c6:	30 97       	sbiw	r30, 0x00	; 0
    49c8:	09 f4       	brne	.+2      	; 0x49cc <__vector_39+0x8e>
    49ca:	63 c0       	rjmp	.+198    	; 0x4a92 <__vector_39+0x154>
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	40 e0       	ldi	r20, 0x00	; 0
    49d0:	50 e0       	ldi	r21, 0x00	; 0
    49d2:	64 e0       	ldi	r22, 0x04	; 4
    49d4:	19 95       	eicall
    49d6:	5d c0       	rjmp	.+186    	; 0x4a92 <__vector_39+0x154>
    49d8:	e0 91 16 0f 	lds	r30, 0x0F16	; 0x800f16 <_index.1885>
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	8e 0f       	add	r24, r30
    49e0:	80 93 16 0f 	sts	0x0F16, r24	; 0x800f16 <_index.1885>
    49e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49e8:	f0 e0       	ldi	r31, 0x00	; 0
    49ea:	e6 5e       	subi	r30, 0xE6	; 230
    49ec:	f0 4f       	sbci	r31, 0xF0	; 240
    49ee:	80 83       	st	Z, r24
    49f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    49f4:	80 34       	cpi	r24, 0x40	; 64
    49f6:	11 f4       	brne	.+4      	; 0x49fc <__vector_39+0xbe>
    49f8:	10 92 16 0f 	sts	0x0F16, r1	; 0x800f16 <_index.1885>
    49fc:	20 91 16 0f 	lds	r18, 0x0F16	; 0x800f16 <_index.1885>
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiMessageLen>
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	01 97       	sbiw	r24, 0x01	; 1
    4a0a:	28 17       	cp	r18, r24
    4a0c:	39 07       	cpc	r19, r25
    4a0e:	24 f4       	brge	.+8      	; 0x4a18 <__vector_39+0xda>
    4a10:	85 ec       	ldi	r24, 0xC5	; 197
    4a12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a16:	3d c0       	rjmp	.+122    	; 0x4a92 <__vector_39+0x154>
    4a18:	85 e8       	ldi	r24, 0x85	; 133
    4a1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a1e:	39 c0       	rjmp	.+114    	; 0x4a92 <__vector_39+0x154>
    4a20:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4a24:	e0 91 16 0f 	lds	r30, 0x0F16	; 0x800f16 <_index.1885>
    4a28:	f0 e0       	ldi	r31, 0x00	; 0
    4a2a:	e6 5e       	subi	r30, 0xE6	; 230
    4a2c:	f0 4f       	sbci	r31, 0xF0	; 240
    4a2e:	80 83       	st	Z, r24
    4a30:	84 e9       	ldi	r24, 0x94	; 148
    4a32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a36:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_twiCurrentHandler>
    4a3a:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_twiCurrentHandler+0x1>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	12 96       	adiw	r26, 0x02	; 2
    4a42:	ed 91       	ld	r30, X+
    4a44:	fc 91       	ld	r31, X
    4a46:	13 97       	sbiw	r26, 0x03	; 3
    4a48:	30 97       	sbiw	r30, 0x00	; 0
    4a4a:	19 f1       	breq	.+70     	; 0x4a92 <__vector_39+0x154>
    4a4c:	20 91 19 0f 	lds	r18, 0x0F19	; 0x800f19 <_twiMessageLen>
    4a50:	4a e1       	ldi	r20, 0x1A	; 26
    4a52:	5f e0       	ldi	r21, 0x0F	; 15
    4a54:	65 e0       	ldi	r22, 0x05	; 5
    4a56:	19 95       	eicall
    4a58:	1c c0       	rjmp	.+56     	; 0x4a92 <__vector_39+0x154>
    4a5a:	85 ea       	ldi	r24, 0xA5	; 165
    4a5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a60:	18 c0       	rjmp	.+48     	; 0x4a92 <__vector_39+0x154>
    4a62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4a66:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4a6a:	84 e0       	ldi	r24, 0x04	; 4
    4a6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a70:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_twiCurrentHandler>
    4a74:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_twiCurrentHandler+0x1>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	12 96       	adiw	r26, 0x02	; 2
    4a7c:	ed 91       	ld	r30, X+
    4a7e:	fc 91       	ld	r31, X
    4a80:	13 97       	sbiw	r26, 0x03	; 3
    4a82:	30 97       	sbiw	r30, 0x00	; 0
    4a84:	31 f0       	breq	.+12     	; 0x4a92 <__vector_39+0x154>
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	50 e0       	ldi	r21, 0x00	; 0
    4a8c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4a90:	19 95       	eicall
    4a92:	ff 91       	pop	r31
    4a94:	ef 91       	pop	r30
    4a96:	bf 91       	pop	r27
    4a98:	af 91       	pop	r26
    4a9a:	9f 91       	pop	r25
    4a9c:	8f 91       	pop	r24
    4a9e:	7f 91       	pop	r23
    4aa0:	6f 91       	pop	r22
    4aa2:	5f 91       	pop	r21
    4aa4:	4f 91       	pop	r20
    4aa6:	3f 91       	pop	r19
    4aa8:	2f 91       	pop	r18
    4aaa:	0f 90       	pop	r0
    4aac:	0b be       	out	0x3b, r0	; 59
    4aae:	0f 90       	pop	r0
    4ab0:	0f be       	out	0x3f, r0	; 63
    4ab2:	0f 90       	pop	r0
    4ab4:	1f 90       	pop	r1
    4ab6:	18 95       	reti

00004ab8 <fifo_init>:
    4ab8:	fc 01       	movw	r30, r24
    4aba:	41 11       	cpse	r20, r1
    4abc:	01 c0       	rjmp	.+2      	; 0x4ac0 <fifo_init+0x8>
    4abe:	80 d3       	rcall	.+1792   	; 0x51c0 <abort>
    4ac0:	84 2f       	mov	r24, r20
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	9c 01       	movw	r18, r24
    4ac6:	21 50       	subi	r18, 0x01	; 1
    4ac8:	31 09       	sbc	r19, r1
    4aca:	82 23       	and	r24, r18
    4acc:	93 23       	and	r25, r19
    4ace:	89 2b       	or	r24, r25
    4ad0:	09 f0       	breq	.+2      	; 0x4ad4 <fifo_init+0x1c>
    4ad2:	76 d3       	rcall	.+1772   	; 0x51c0 <abort>
    4ad4:	41 38       	cpi	r20, 0x81	; 129
    4ad6:	08 f0       	brcs	.+2      	; 0x4ada <fifo_init+0x22>
    4ad8:	73 d3       	rcall	.+1766   	; 0x51c0 <abort>
    4ada:	12 82       	std	Z+2, r1	; 0x02
    4adc:	13 82       	std	Z+3, r1	; 0x03
    4ade:	44 83       	std	Z+4, r20	; 0x04
    4ae0:	44 0f       	add	r20, r20
    4ae2:	41 50       	subi	r20, 0x01	; 1
    4ae4:	45 83       	std	Z+5, r20	; 0x05
    4ae6:	71 83       	std	Z+1, r23	; 0x01
    4ae8:	60 83       	st	Z, r22
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	08 95       	ret

00004af0 <floor>:
    4af0:	3c d0       	rcall	.+120    	; 0x4b6a <__fp_trunc>
    4af2:	88 f0       	brcs	.+34     	; 0x4b16 <floor+0x26>
    4af4:	9f 37       	cpi	r25, 0x7F	; 127
    4af6:	48 f4       	brcc	.+18     	; 0x4b0a <floor+0x1a>
    4af8:	91 11       	cpse	r25, r1
    4afa:	16 f0       	brts	.+4      	; 0x4b00 <floor+0x10>
    4afc:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__fp_szero>
    4b00:	60 e0       	ldi	r22, 0x00	; 0
    4b02:	70 e0       	ldi	r23, 0x00	; 0
    4b04:	80 e8       	ldi	r24, 0x80	; 128
    4b06:	9f eb       	ldi	r25, 0xBF	; 191
    4b08:	08 95       	ret
    4b0a:	26 f4       	brtc	.+8      	; 0x4b14 <floor+0x24>
    4b0c:	1b 16       	cp	r1, r27
    4b0e:	61 1d       	adc	r22, r1
    4b10:	71 1d       	adc	r23, r1
    4b12:	81 1d       	adc	r24, r1
    4b14:	01 c0       	rjmp	.+2      	; 0x4b18 <__fp_mintl>
    4b16:	1b c0       	rjmp	.+54     	; 0x4b4e <__fp_mpack>

00004b18 <__fp_mintl>:
    4b18:	88 23       	and	r24, r24
    4b1a:	71 f4       	brne	.+28     	; 0x4b38 <__fp_mintl+0x20>
    4b1c:	77 23       	and	r23, r23
    4b1e:	21 f0       	breq	.+8      	; 0x4b28 <__fp_mintl+0x10>
    4b20:	98 50       	subi	r25, 0x08	; 8
    4b22:	87 2b       	or	r24, r23
    4b24:	76 2f       	mov	r23, r22
    4b26:	07 c0       	rjmp	.+14     	; 0x4b36 <__fp_mintl+0x1e>
    4b28:	66 23       	and	r22, r22
    4b2a:	11 f4       	brne	.+4      	; 0x4b30 <__fp_mintl+0x18>
    4b2c:	99 27       	eor	r25, r25
    4b2e:	0d c0       	rjmp	.+26     	; 0x4b4a <__fp_mintl+0x32>
    4b30:	90 51       	subi	r25, 0x10	; 16
    4b32:	86 2b       	or	r24, r22
    4b34:	70 e0       	ldi	r23, 0x00	; 0
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	2a f0       	brmi	.+10     	; 0x4b44 <__fp_mintl+0x2c>
    4b3a:	9a 95       	dec	r25
    4b3c:	66 0f       	add	r22, r22
    4b3e:	77 1f       	adc	r23, r23
    4b40:	88 1f       	adc	r24, r24
    4b42:	da f7       	brpl	.-10     	; 0x4b3a <__fp_mintl+0x22>
    4b44:	88 0f       	add	r24, r24
    4b46:	96 95       	lsr	r25
    4b48:	87 95       	ror	r24
    4b4a:	97 f9       	bld	r25, 7
    4b4c:	08 95       	ret

00004b4e <__fp_mpack>:
    4b4e:	9f 3f       	cpi	r25, 0xFF	; 255
    4b50:	31 f0       	breq	.+12     	; 0x4b5e <__fp_mpack_finite+0xc>

00004b52 <__fp_mpack_finite>:
    4b52:	91 50       	subi	r25, 0x01	; 1
    4b54:	20 f4       	brcc	.+8      	; 0x4b5e <__fp_mpack_finite+0xc>
    4b56:	87 95       	ror	r24
    4b58:	77 95       	ror	r23
    4b5a:	67 95       	ror	r22
    4b5c:	b7 95       	ror	r27
    4b5e:	88 0f       	add	r24, r24
    4b60:	91 1d       	adc	r25, r1
    4b62:	96 95       	lsr	r25
    4b64:	87 95       	ror	r24
    4b66:	97 f9       	bld	r25, 7
    4b68:	08 95       	ret

00004b6a <__fp_trunc>:
    4b6a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__fp_splitA>
    4b6e:	a0 f0       	brcs	.+40     	; 0x4b98 <__fp_trunc+0x2e>
    4b70:	be e7       	ldi	r27, 0x7E	; 126
    4b72:	b9 17       	cp	r27, r25
    4b74:	88 f4       	brcc	.+34     	; 0x4b98 <__fp_trunc+0x2e>
    4b76:	bb 27       	eor	r27, r27
    4b78:	9f 38       	cpi	r25, 0x8F	; 143
    4b7a:	60 f4       	brcc	.+24     	; 0x4b94 <__fp_trunc+0x2a>
    4b7c:	16 16       	cp	r1, r22
    4b7e:	b1 1d       	adc	r27, r1
    4b80:	67 2f       	mov	r22, r23
    4b82:	78 2f       	mov	r23, r24
    4b84:	88 27       	eor	r24, r24
    4b86:	98 5f       	subi	r25, 0xF8	; 248
    4b88:	f7 cf       	rjmp	.-18     	; 0x4b78 <__fp_trunc+0xe>
    4b8a:	86 95       	lsr	r24
    4b8c:	77 95       	ror	r23
    4b8e:	67 95       	ror	r22
    4b90:	b1 1d       	adc	r27, r1
    4b92:	93 95       	inc	r25
    4b94:	96 39       	cpi	r25, 0x96	; 150
    4b96:	c8 f3       	brcs	.-14     	; 0x4b8a <__fp_trunc+0x20>
    4b98:	08 95       	ret

00004b9a <pow>:
    4b9a:	fa 01       	movw	r30, r20
    4b9c:	ee 0f       	add	r30, r30
    4b9e:	ff 1f       	adc	r31, r31
    4ba0:	30 96       	adiw	r30, 0x00	; 0
    4ba2:	21 05       	cpc	r18, r1
    4ba4:	31 05       	cpc	r19, r1
    4ba6:	a1 f1       	breq	.+104    	; 0x4c10 <pow+0x76>
    4ba8:	61 15       	cp	r22, r1
    4baa:	71 05       	cpc	r23, r1
    4bac:	61 f4       	brne	.+24     	; 0x4bc6 <pow+0x2c>
    4bae:	80 38       	cpi	r24, 0x80	; 128
    4bb0:	bf e3       	ldi	r27, 0x3F	; 63
    4bb2:	9b 07       	cpc	r25, r27
    4bb4:	49 f1       	breq	.+82     	; 0x4c08 <pow+0x6e>
    4bb6:	68 94       	set
    4bb8:	90 38       	cpi	r25, 0x80	; 128
    4bba:	81 05       	cpc	r24, r1
    4bbc:	61 f0       	breq	.+24     	; 0x4bd6 <pow+0x3c>
    4bbe:	80 38       	cpi	r24, 0x80	; 128
    4bc0:	bf ef       	ldi	r27, 0xFF	; 255
    4bc2:	9b 07       	cpc	r25, r27
    4bc4:	41 f0       	breq	.+16     	; 0x4bd6 <pow+0x3c>
    4bc6:	99 23       	and	r25, r25
    4bc8:	4a f5       	brpl	.+82     	; 0x4c1c <pow+0x82>
    4bca:	ff 3f       	cpi	r31, 0xFF	; 255
    4bcc:	e1 05       	cpc	r30, r1
    4bce:	31 05       	cpc	r19, r1
    4bd0:	21 05       	cpc	r18, r1
    4bd2:	19 f1       	breq	.+70     	; 0x4c1a <pow+0x80>
    4bd4:	e8 94       	clt
    4bd6:	08 94       	sec
    4bd8:	e7 95       	ror	r30
    4bda:	d9 01       	movw	r26, r18
    4bdc:	aa 23       	and	r26, r26
    4bde:	29 f4       	brne	.+10     	; 0x4bea <pow+0x50>
    4be0:	ab 2f       	mov	r26, r27
    4be2:	be 2f       	mov	r27, r30
    4be4:	f8 5f       	subi	r31, 0xF8	; 248
    4be6:	d0 f3       	brcs	.-12     	; 0x4bdc <pow+0x42>
    4be8:	10 c0       	rjmp	.+32     	; 0x4c0a <pow+0x70>
    4bea:	ff 5f       	subi	r31, 0xFF	; 255
    4bec:	70 f4       	brcc	.+28     	; 0x4c0a <pow+0x70>
    4bee:	a6 95       	lsr	r26
    4bf0:	e0 f7       	brcc	.-8      	; 0x4bea <pow+0x50>
    4bf2:	f7 39       	cpi	r31, 0x97	; 151
    4bf4:	50 f0       	brcs	.+20     	; 0x4c0a <pow+0x70>
    4bf6:	19 f0       	breq	.+6      	; 0x4bfe <pow+0x64>
    4bf8:	ff 3a       	cpi	r31, 0xAF	; 175
    4bfa:	38 f4       	brcc	.+14     	; 0x4c0a <pow+0x70>
    4bfc:	9f 77       	andi	r25, 0x7F	; 127
    4bfe:	9f 93       	push	r25
    4c00:	0d d0       	rcall	.+26     	; 0x4c1c <pow+0x82>
    4c02:	0f 90       	pop	r0
    4c04:	07 fc       	sbrc	r0, 7
    4c06:	90 58       	subi	r25, 0x80	; 128
    4c08:	08 95       	ret
    4c0a:	46 f0       	brts	.+16     	; 0x4c1c <pow+0x82>
    4c0c:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__fp_nan>
    4c10:	60 e0       	ldi	r22, 0x00	; 0
    4c12:	70 e0       	ldi	r23, 0x00	; 0
    4c14:	80 e8       	ldi	r24, 0x80	; 128
    4c16:	9f e3       	ldi	r25, 0x3F	; 63
    4c18:	08 95       	ret
    4c1a:	4f e7       	ldi	r20, 0x7F	; 127
    4c1c:	9f 77       	andi	r25, 0x7F	; 127
    4c1e:	5f 93       	push	r21
    4c20:	4f 93       	push	r20
    4c22:	3f 93       	push	r19
    4c24:	2f 93       	push	r18
    4c26:	ac d0       	rcall	.+344    	; 0x4d80 <log>
    4c28:	2f 91       	pop	r18
    4c2a:	3f 91       	pop	r19
    4c2c:	4f 91       	pop	r20
    4c2e:	5f 91       	pop	r21
    4c30:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    4c34:	08 c0       	rjmp	.+16     	; 0x4c46 <exp>
    4c36:	29 f4       	brne	.+10     	; 0x4c42 <pow+0xa8>
    4c38:	16 f0       	brts	.+4      	; 0x4c3e <pow+0xa4>
    4c3a:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__fp_inf>
    4c3e:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__fp_zero>
    4c42:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__fp_nan>

00004c46 <exp>:
    4c46:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__fp_splitA>
    4c4a:	a8 f3       	brcs	.-22     	; 0x4c36 <pow+0x9c>
    4c4c:	96 38       	cpi	r25, 0x86	; 134
    4c4e:	a0 f7       	brcc	.-24     	; 0x4c38 <pow+0x9e>
    4c50:	07 f8       	bld	r0, 7
    4c52:	0f 92       	push	r0
    4c54:	e8 94       	clt
    4c56:	2b e3       	ldi	r18, 0x3B	; 59
    4c58:	3a ea       	ldi	r19, 0xAA	; 170
    4c5a:	48 eb       	ldi	r20, 0xB8	; 184
    4c5c:	5f e7       	ldi	r21, 0x7F	; 127
    4c5e:	0e 94 99 1a 	call	0x3532	; 0x3532 <__mulsf3_pse>
    4c62:	0f 92       	push	r0
    4c64:	0f 92       	push	r0
    4c66:	0f 92       	push	r0
    4c68:	4d b7       	in	r20, 0x3d	; 61
    4c6a:	5e b7       	in	r21, 0x3e	; 62
    4c6c:	0f 92       	push	r0
    4c6e:	cf d0       	rcall	.+414    	; 0x4e0e <modf>
    4c70:	ea e9       	ldi	r30, 0x9A	; 154
    4c72:	f1 e0       	ldi	r31, 0x01	; 1
    4c74:	16 d0       	rcall	.+44     	; 0x4ca2 <__fp_powser>
    4c76:	4f 91       	pop	r20
    4c78:	5f 91       	pop	r21
    4c7a:	ef 91       	pop	r30
    4c7c:	ff 91       	pop	r31
    4c7e:	e5 95       	asr	r30
    4c80:	ee 1f       	adc	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	49 f0       	breq	.+18     	; 0x4c98 <exp+0x52>
    4c86:	fe 57       	subi	r31, 0x7E	; 126
    4c88:	e0 68       	ori	r30, 0x80	; 128
    4c8a:	44 27       	eor	r20, r20
    4c8c:	ee 0f       	add	r30, r30
    4c8e:	44 1f       	adc	r20, r20
    4c90:	fa 95       	dec	r31
    4c92:	e1 f7       	brne	.-8      	; 0x4c8c <exp+0x46>
    4c94:	41 95       	neg	r20
    4c96:	55 0b       	sbc	r21, r21
    4c98:	36 d0       	rcall	.+108    	; 0x4d06 <ldexp>
    4c9a:	0f 90       	pop	r0
    4c9c:	07 fe       	sbrs	r0, 7
    4c9e:	28 c0       	rjmp	.+80     	; 0x4cf0 <inverse>
    4ca0:	08 95       	ret

00004ca2 <__fp_powser>:
    4ca2:	df 93       	push	r29
    4ca4:	cf 93       	push	r28
    4ca6:	1f 93       	push	r17
    4ca8:	0f 93       	push	r16
    4caa:	ff 92       	push	r15
    4cac:	ef 92       	push	r14
    4cae:	df 92       	push	r13
    4cb0:	7b 01       	movw	r14, r22
    4cb2:	8c 01       	movw	r16, r24
    4cb4:	68 94       	set
    4cb6:	06 c0       	rjmp	.+12     	; 0x4cc4 <__fp_powser+0x22>
    4cb8:	da 2e       	mov	r13, r26
    4cba:	ef 01       	movw	r28, r30
    4cbc:	0e 94 97 1a 	call	0x352e	; 0x352e <__mulsf3x>
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	e8 94       	clt
    4cc4:	a5 91       	lpm	r26, Z+
    4cc6:	25 91       	lpm	r18, Z+
    4cc8:	35 91       	lpm	r19, Z+
    4cca:	45 91       	lpm	r20, Z+
    4ccc:	55 91       	lpm	r21, Z+
    4cce:	a6 f3       	brts	.-24     	; 0x4cb8 <__fp_powser+0x16>
    4cd0:	ef 01       	movw	r28, r30
    4cd2:	0e 94 11 19 	call	0x3222	; 0x3222 <__addsf3x>
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	97 01       	movw	r18, r14
    4cda:	a8 01       	movw	r20, r16
    4cdc:	da 94       	dec	r13
    4cde:	69 f7       	brne	.-38     	; 0x4cba <__fp_powser+0x18>
    4ce0:	df 90       	pop	r13
    4ce2:	ef 90       	pop	r14
    4ce4:	ff 90       	pop	r15
    4ce6:	0f 91       	pop	r16
    4ce8:	1f 91       	pop	r17
    4cea:	cf 91       	pop	r28
    4cec:	df 91       	pop	r29
    4cee:	08 95       	ret

00004cf0 <inverse>:
    4cf0:	9b 01       	movw	r18, r22
    4cf2:	ac 01       	movw	r20, r24
    4cf4:	60 e0       	ldi	r22, 0x00	; 0
    4cf6:	70 e0       	ldi	r23, 0x00	; 0
    4cf8:	80 e8       	ldi	r24, 0x80	; 128
    4cfa:	9f e3       	ldi	r25, 0x3F	; 63
    4cfc:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__divsf3>
    4d00:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__fp_inf>
    4d04:	24 cf       	rjmp	.-440    	; 0x4b4e <__fp_mpack>

00004d06 <ldexp>:
    4d06:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__fp_splitA>
    4d0a:	e0 f3       	brcs	.-8      	; 0x4d04 <inverse+0x14>
    4d0c:	99 23       	and	r25, r25
    4d0e:	d1 f3       	breq	.-12     	; 0x4d04 <inverse+0x14>
    4d10:	94 0f       	add	r25, r20
    4d12:	51 1d       	adc	r21, r1
    4d14:	ab f3       	brvs	.-22     	; 0x4d00 <inverse+0x10>
    4d16:	91 50       	subi	r25, 0x01	; 1
    4d18:	50 40       	sbci	r21, 0x00	; 0
    4d1a:	94 f0       	brlt	.+36     	; 0x4d40 <ldexp+0x3a>
    4d1c:	59 f0       	breq	.+22     	; 0x4d34 <ldexp+0x2e>
    4d1e:	88 23       	and	r24, r24
    4d20:	32 f0       	brmi	.+12     	; 0x4d2e <ldexp+0x28>
    4d22:	66 0f       	add	r22, r22
    4d24:	77 1f       	adc	r23, r23
    4d26:	88 1f       	adc	r24, r24
    4d28:	91 50       	subi	r25, 0x01	; 1
    4d2a:	50 40       	sbci	r21, 0x00	; 0
    4d2c:	c1 f7       	brne	.-16     	; 0x4d1e <ldexp+0x18>
    4d2e:	9e 3f       	cpi	r25, 0xFE	; 254
    4d30:	51 05       	cpc	r21, r1
    4d32:	34 f7       	brge	.-52     	; 0x4d00 <inverse+0x10>
    4d34:	88 0f       	add	r24, r24
    4d36:	91 1d       	adc	r25, r1
    4d38:	96 95       	lsr	r25
    4d3a:	87 95       	ror	r24
    4d3c:	97 f9       	bld	r25, 7
    4d3e:	08 95       	ret
    4d40:	5f 3f       	cpi	r21, 0xFF	; 255
    4d42:	ac f0       	brlt	.+42     	; 0x4d6e <ldexp+0x68>
    4d44:	98 3e       	cpi	r25, 0xE8	; 232
    4d46:	9c f0       	brlt	.+38     	; 0x4d6e <ldexp+0x68>
    4d48:	bb 27       	eor	r27, r27
    4d4a:	86 95       	lsr	r24
    4d4c:	77 95       	ror	r23
    4d4e:	67 95       	ror	r22
    4d50:	b7 95       	ror	r27
    4d52:	08 f4       	brcc	.+2      	; 0x4d56 <ldexp+0x50>
    4d54:	b1 60       	ori	r27, 0x01	; 1
    4d56:	93 95       	inc	r25
    4d58:	c1 f7       	brne	.-16     	; 0x4d4a <ldexp+0x44>
    4d5a:	bb 0f       	add	r27, r27
    4d5c:	58 f7       	brcc	.-42     	; 0x4d34 <ldexp+0x2e>
    4d5e:	11 f4       	brne	.+4      	; 0x4d64 <ldexp+0x5e>
    4d60:	60 ff       	sbrs	r22, 0
    4d62:	e8 cf       	rjmp	.-48     	; 0x4d34 <ldexp+0x2e>
    4d64:	6f 5f       	subi	r22, 0xFF	; 255
    4d66:	7f 4f       	sbci	r23, 0xFF	; 255
    4d68:	8f 4f       	sbci	r24, 0xFF	; 255
    4d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d6c:	e3 cf       	rjmp	.-58     	; 0x4d34 <ldexp+0x2e>
    4d6e:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__fp_szero>
    4d72:	0e f0       	brts	.+2      	; 0x4d76 <ldexp+0x70>
    4d74:	ec ce       	rjmp	.-552    	; 0x4b4e <__fp_mpack>
    4d76:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__fp_nan>
    4d7a:	68 94       	set
    4d7c:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__fp_inf>

00004d80 <log>:
    4d80:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__fp_splitA>
    4d84:	b0 f3       	brcs	.-20     	; 0x4d72 <ldexp+0x6c>
    4d86:	99 23       	and	r25, r25
    4d88:	c1 f3       	breq	.-16     	; 0x4d7a <ldexp+0x74>
    4d8a:	ae f3       	brts	.-22     	; 0x4d76 <ldexp+0x70>
    4d8c:	df 93       	push	r29
    4d8e:	cf 93       	push	r28
    4d90:	1f 93       	push	r17
    4d92:	0f 93       	push	r16
    4d94:	ff 92       	push	r15
    4d96:	c9 2f       	mov	r28, r25
    4d98:	dd 27       	eor	r29, r29
    4d9a:	88 23       	and	r24, r24
    4d9c:	2a f0       	brmi	.+10     	; 0x4da8 <log+0x28>
    4d9e:	21 97       	sbiw	r28, 0x01	; 1
    4da0:	66 0f       	add	r22, r22
    4da2:	77 1f       	adc	r23, r23
    4da4:	88 1f       	adc	r24, r24
    4da6:	da f7       	brpl	.-10     	; 0x4d9e <log+0x1e>
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	40 e8       	ldi	r20, 0x80	; 128
    4dae:	5f eb       	ldi	r21, 0xBF	; 191
    4db0:	9f e3       	ldi	r25, 0x3F	; 63
    4db2:	88 39       	cpi	r24, 0x98	; 152
    4db4:	20 f0       	brcs	.+8      	; 0x4dbe <log+0x3e>
    4db6:	80 3e       	cpi	r24, 0xE0	; 224
    4db8:	38 f0       	brcs	.+14     	; 0x4dc8 <log+0x48>
    4dba:	21 96       	adiw	r28, 0x01	; 1
    4dbc:	8f 77       	andi	r24, 0x7F	; 127
    4dbe:	0e 94 00 19 	call	0x3200	; 0x3200 <__addsf3>
    4dc2:	e2 ec       	ldi	r30, 0xC2	; 194
    4dc4:	f1 e0       	ldi	r31, 0x01	; 1
    4dc6:	04 c0       	rjmp	.+8      	; 0x4dd0 <log+0x50>
    4dc8:	0e 94 00 19 	call	0x3200	; 0x3200 <__addsf3>
    4dcc:	ef ee       	ldi	r30, 0xEF	; 239
    4dce:	f1 e0       	ldi	r31, 0x01	; 1
    4dd0:	68 df       	rcall	.-304    	; 0x4ca2 <__fp_powser>
    4dd2:	8b 01       	movw	r16, r22
    4dd4:	be 01       	movw	r22, r28
    4dd6:	ec 01       	movw	r28, r24
    4dd8:	fb 2e       	mov	r15, r27
    4dda:	6f 57       	subi	r22, 0x7F	; 127
    4ddc:	71 09       	sbc	r23, r1
    4dde:	75 95       	asr	r23
    4de0:	77 1f       	adc	r23, r23
    4de2:	88 0b       	sbc	r24, r24
    4de4:	99 0b       	sbc	r25, r25
    4de6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__floatsisf>
    4dea:	28 e1       	ldi	r18, 0x18	; 24
    4dec:	32 e7       	ldi	r19, 0x72	; 114
    4dee:	41 e3       	ldi	r20, 0x31	; 49
    4df0:	5f e3       	ldi	r21, 0x3F	; 63
    4df2:	0e 94 97 1a 	call	0x352e	; 0x352e <__mulsf3x>
    4df6:	af 2d       	mov	r26, r15
    4df8:	98 01       	movw	r18, r16
    4dfa:	ae 01       	movw	r20, r28
    4dfc:	ff 90       	pop	r15
    4dfe:	0f 91       	pop	r16
    4e00:	1f 91       	pop	r17
    4e02:	cf 91       	pop	r28
    4e04:	df 91       	pop	r29
    4e06:	0e 94 11 19 	call	0x3222	; 0x3222 <__addsf3x>
    4e0a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_round>

00004e0e <modf>:
    4e0e:	fa 01       	movw	r30, r20
    4e10:	dc 01       	movw	r26, r24
    4e12:	aa 0f       	add	r26, r26
    4e14:	bb 1f       	adc	r27, r27
    4e16:	9b 01       	movw	r18, r22
    4e18:	ac 01       	movw	r20, r24
    4e1a:	bf 57       	subi	r27, 0x7F	; 127
    4e1c:	28 f4       	brcc	.+10     	; 0x4e28 <modf+0x1a>
    4e1e:	22 27       	eor	r18, r18
    4e20:	33 27       	eor	r19, r19
    4e22:	44 27       	eor	r20, r20
    4e24:	50 78       	andi	r21, 0x80	; 128
    4e26:	20 c0       	rjmp	.+64     	; 0x4e68 <modf+0x5a>
    4e28:	b7 51       	subi	r27, 0x17	; 23
    4e2a:	90 f4       	brcc	.+36     	; 0x4e50 <modf+0x42>
    4e2c:	ab 2f       	mov	r26, r27
    4e2e:	00 24       	eor	r0, r0
    4e30:	46 95       	lsr	r20
    4e32:	37 95       	ror	r19
    4e34:	27 95       	ror	r18
    4e36:	01 1c       	adc	r0, r1
    4e38:	a3 95       	inc	r26
    4e3a:	d2 f3       	brmi	.-12     	; 0x4e30 <modf+0x22>
    4e3c:	00 20       	and	r0, r0
    4e3e:	71 f0       	breq	.+28     	; 0x4e5c <modf+0x4e>
    4e40:	22 0f       	add	r18, r18
    4e42:	33 1f       	adc	r19, r19
    4e44:	44 1f       	adc	r20, r20
    4e46:	b3 95       	inc	r27
    4e48:	da f3       	brmi	.-10     	; 0x4e40 <modf+0x32>
    4e4a:	0e d0       	rcall	.+28     	; 0x4e68 <modf+0x5a>
    4e4c:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__subsf3>
    4e50:	61 30       	cpi	r22, 0x01	; 1
    4e52:	71 05       	cpc	r23, r1
    4e54:	a0 e8       	ldi	r26, 0x80	; 128
    4e56:	8a 07       	cpc	r24, r26
    4e58:	b9 46       	sbci	r27, 0x69	; 105
    4e5a:	30 f4       	brcc	.+12     	; 0x4e68 <modf+0x5a>
    4e5c:	9b 01       	movw	r18, r22
    4e5e:	ac 01       	movw	r20, r24
    4e60:	66 27       	eor	r22, r22
    4e62:	77 27       	eor	r23, r23
    4e64:	88 27       	eor	r24, r24
    4e66:	90 78       	andi	r25, 0x80	; 128
    4e68:	30 96       	adiw	r30, 0x00	; 0
    4e6a:	21 f0       	breq	.+8      	; 0x4e74 <modf+0x66>
    4e6c:	20 83       	st	Z, r18
    4e6e:	31 83       	std	Z+1, r19	; 0x01
    4e70:	42 83       	std	Z+2, r20	; 0x02
    4e72:	53 83       	std	Z+3, r21	; 0x03
    4e74:	08 95       	ret

00004e76 <__divmodhi4>:
    4e76:	97 fb       	bst	r25, 7
    4e78:	07 2e       	mov	r0, r23
    4e7a:	16 f4       	brtc	.+4      	; 0x4e80 <__divmodhi4+0xa>
    4e7c:	00 94       	com	r0
    4e7e:	06 d0       	rcall	.+12     	; 0x4e8c <__divmodhi4_neg1>
    4e80:	77 fd       	sbrc	r23, 7
    4e82:	08 d0       	rcall	.+16     	; 0x4e94 <__divmodhi4_neg2>
    4e84:	3f d0       	rcall	.+126    	; 0x4f04 <__udivmodhi4>
    4e86:	07 fc       	sbrc	r0, 7
    4e88:	05 d0       	rcall	.+10     	; 0x4e94 <__divmodhi4_neg2>
    4e8a:	3e f4       	brtc	.+14     	; 0x4e9a <__divmodhi4_exit>

00004e8c <__divmodhi4_neg1>:
    4e8c:	90 95       	com	r25
    4e8e:	81 95       	neg	r24
    4e90:	9f 4f       	sbci	r25, 0xFF	; 255
    4e92:	08 95       	ret

00004e94 <__divmodhi4_neg2>:
    4e94:	70 95       	com	r23
    4e96:	61 95       	neg	r22
    4e98:	7f 4f       	sbci	r23, 0xFF	; 255

00004e9a <__divmodhi4_exit>:
    4e9a:	08 95       	ret

00004e9c <__udivmodsi4>:
    4e9c:	a1 e2       	ldi	r26, 0x21	; 33
    4e9e:	1a 2e       	mov	r1, r26
    4ea0:	aa 1b       	sub	r26, r26
    4ea2:	bb 1b       	sub	r27, r27
    4ea4:	fd 01       	movw	r30, r26
    4ea6:	0d c0       	rjmp	.+26     	; 0x4ec2 <__udivmodsi4_ep>

00004ea8 <__udivmodsi4_loop>:
    4ea8:	aa 1f       	adc	r26, r26
    4eaa:	bb 1f       	adc	r27, r27
    4eac:	ee 1f       	adc	r30, r30
    4eae:	ff 1f       	adc	r31, r31
    4eb0:	a2 17       	cp	r26, r18
    4eb2:	b3 07       	cpc	r27, r19
    4eb4:	e4 07       	cpc	r30, r20
    4eb6:	f5 07       	cpc	r31, r21
    4eb8:	20 f0       	brcs	.+8      	; 0x4ec2 <__udivmodsi4_ep>
    4eba:	a2 1b       	sub	r26, r18
    4ebc:	b3 0b       	sbc	r27, r19
    4ebe:	e4 0b       	sbc	r30, r20
    4ec0:	f5 0b       	sbc	r31, r21

00004ec2 <__udivmodsi4_ep>:
    4ec2:	66 1f       	adc	r22, r22
    4ec4:	77 1f       	adc	r23, r23
    4ec6:	88 1f       	adc	r24, r24
    4ec8:	99 1f       	adc	r25, r25
    4eca:	1a 94       	dec	r1
    4ecc:	69 f7       	brne	.-38     	; 0x4ea8 <__udivmodsi4_loop>
    4ece:	60 95       	com	r22
    4ed0:	70 95       	com	r23
    4ed2:	80 95       	com	r24
    4ed4:	90 95       	com	r25
    4ed6:	9b 01       	movw	r18, r22
    4ed8:	ac 01       	movw	r20, r24
    4eda:	bd 01       	movw	r22, r26
    4edc:	cf 01       	movw	r24, r30
    4ede:	08 95       	ret

00004ee0 <__tablejump2__>:
    4ee0:	ee 0f       	add	r30, r30
    4ee2:	ff 1f       	adc	r31, r31
    4ee4:	88 1f       	adc	r24, r24
    4ee6:	8b bf       	out	0x3b, r24	; 59
    4ee8:	07 90       	elpm	r0, Z+
    4eea:	f6 91       	elpm	r31, Z
    4eec:	e0 2d       	mov	r30, r0
    4eee:	19 94       	eijmp

00004ef0 <__muluhisi3>:
    4ef0:	1d d0       	rcall	.+58     	; 0x4f2c <__umulhisi3>
    4ef2:	a5 9f       	mul	r26, r21
    4ef4:	90 0d       	add	r25, r0
    4ef6:	b4 9f       	mul	r27, r20
    4ef8:	90 0d       	add	r25, r0
    4efa:	a4 9f       	mul	r26, r20
    4efc:	80 0d       	add	r24, r0
    4efe:	91 1d       	adc	r25, r1
    4f00:	11 24       	eor	r1, r1
    4f02:	08 95       	ret

00004f04 <__udivmodhi4>:
    4f04:	aa 1b       	sub	r26, r26
    4f06:	bb 1b       	sub	r27, r27
    4f08:	51 e1       	ldi	r21, 0x11	; 17
    4f0a:	07 c0       	rjmp	.+14     	; 0x4f1a <__udivmodhi4_ep>

00004f0c <__udivmodhi4_loop>:
    4f0c:	aa 1f       	adc	r26, r26
    4f0e:	bb 1f       	adc	r27, r27
    4f10:	a6 17       	cp	r26, r22
    4f12:	b7 07       	cpc	r27, r23
    4f14:	10 f0       	brcs	.+4      	; 0x4f1a <__udivmodhi4_ep>
    4f16:	a6 1b       	sub	r26, r22
    4f18:	b7 0b       	sbc	r27, r23

00004f1a <__udivmodhi4_ep>:
    4f1a:	88 1f       	adc	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	5a 95       	dec	r21
    4f20:	a9 f7       	brne	.-22     	; 0x4f0c <__udivmodhi4_loop>
    4f22:	80 95       	com	r24
    4f24:	90 95       	com	r25
    4f26:	bc 01       	movw	r22, r24
    4f28:	cd 01       	movw	r24, r26
    4f2a:	08 95       	ret

00004f2c <__umulhisi3>:
    4f2c:	a2 9f       	mul	r26, r18
    4f2e:	b0 01       	movw	r22, r0
    4f30:	b3 9f       	mul	r27, r19
    4f32:	c0 01       	movw	r24, r0
    4f34:	a3 9f       	mul	r26, r19
    4f36:	70 0d       	add	r23, r0
    4f38:	81 1d       	adc	r24, r1
    4f3a:	11 24       	eor	r1, r1
    4f3c:	91 1d       	adc	r25, r1
    4f3e:	b2 9f       	mul	r27, r18
    4f40:	70 0d       	add	r23, r0
    4f42:	81 1d       	adc	r24, r1
    4f44:	11 24       	eor	r1, r1
    4f46:	91 1d       	adc	r25, r1
    4f48:	08 95       	ret

00004f4a <calloc>:
    4f4a:	0f 93       	push	r16
    4f4c:	1f 93       	push	r17
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	86 9f       	mul	r24, r22
    4f54:	80 01       	movw	r16, r0
    4f56:	87 9f       	mul	r24, r23
    4f58:	10 0d       	add	r17, r0
    4f5a:	96 9f       	mul	r25, r22
    4f5c:	10 0d       	add	r17, r0
    4f5e:	11 24       	eor	r1, r1
    4f60:	c8 01       	movw	r24, r16
    4f62:	0d d0       	rcall	.+26     	; 0x4f7e <malloc>
    4f64:	ec 01       	movw	r28, r24
    4f66:	00 97       	sbiw	r24, 0x00	; 0
    4f68:	21 f0       	breq	.+8      	; 0x4f72 <calloc+0x28>
    4f6a:	a8 01       	movw	r20, r16
    4f6c:	60 e0       	ldi	r22, 0x00	; 0
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	34 d1       	rcall	.+616    	; 0x51da <memset>
    4f72:	ce 01       	movw	r24, r28
    4f74:	df 91       	pop	r29
    4f76:	cf 91       	pop	r28
    4f78:	1f 91       	pop	r17
    4f7a:	0f 91       	pop	r16
    4f7c:	08 95       	ret

00004f7e <malloc>:
    4f7e:	0f 93       	push	r16
    4f80:	1f 93       	push	r17
    4f82:	cf 93       	push	r28
    4f84:	df 93       	push	r29
    4f86:	82 30       	cpi	r24, 0x02	; 2
    4f88:	91 05       	cpc	r25, r1
    4f8a:	10 f4       	brcc	.+4      	; 0x4f90 <malloc+0x12>
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	e0 91 3c 0f 	lds	r30, 0x0F3C	; 0x800f3c <__flp>
    4f94:	f0 91 3d 0f 	lds	r31, 0x0F3D	; 0x800f3d <__flp+0x1>
    4f98:	20 e0       	ldi	r18, 0x00	; 0
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	a0 e0       	ldi	r26, 0x00	; 0
    4f9e:	b0 e0       	ldi	r27, 0x00	; 0
    4fa0:	30 97       	sbiw	r30, 0x00	; 0
    4fa2:	19 f1       	breq	.+70     	; 0x4fea <malloc+0x6c>
    4fa4:	40 81       	ld	r20, Z
    4fa6:	51 81       	ldd	r21, Z+1	; 0x01
    4fa8:	02 81       	ldd	r16, Z+2	; 0x02
    4faa:	13 81       	ldd	r17, Z+3	; 0x03
    4fac:	48 17       	cp	r20, r24
    4fae:	59 07       	cpc	r21, r25
    4fb0:	c8 f0       	brcs	.+50     	; 0x4fe4 <malloc+0x66>
    4fb2:	84 17       	cp	r24, r20
    4fb4:	95 07       	cpc	r25, r21
    4fb6:	69 f4       	brne	.+26     	; 0x4fd2 <malloc+0x54>
    4fb8:	10 97       	sbiw	r26, 0x00	; 0
    4fba:	31 f0       	breq	.+12     	; 0x4fc8 <malloc+0x4a>
    4fbc:	12 96       	adiw	r26, 0x02	; 2
    4fbe:	0c 93       	st	X, r16
    4fc0:	12 97       	sbiw	r26, 0x02	; 2
    4fc2:	13 96       	adiw	r26, 0x03	; 3
    4fc4:	1c 93       	st	X, r17
    4fc6:	27 c0       	rjmp	.+78     	; 0x5016 <malloc+0x98>
    4fc8:	00 93 3c 0f 	sts	0x0F3C, r16	; 0x800f3c <__flp>
    4fcc:	10 93 3d 0f 	sts	0x0F3D, r17	; 0x800f3d <__flp+0x1>
    4fd0:	22 c0       	rjmp	.+68     	; 0x5016 <malloc+0x98>
    4fd2:	21 15       	cp	r18, r1
    4fd4:	31 05       	cpc	r19, r1
    4fd6:	19 f0       	breq	.+6      	; 0x4fde <malloc+0x60>
    4fd8:	42 17       	cp	r20, r18
    4fda:	53 07       	cpc	r21, r19
    4fdc:	18 f4       	brcc	.+6      	; 0x4fe4 <malloc+0x66>
    4fde:	9a 01       	movw	r18, r20
    4fe0:	bd 01       	movw	r22, r26
    4fe2:	ef 01       	movw	r28, r30
    4fe4:	df 01       	movw	r26, r30
    4fe6:	f8 01       	movw	r30, r16
    4fe8:	db cf       	rjmp	.-74     	; 0x4fa0 <malloc+0x22>
    4fea:	21 15       	cp	r18, r1
    4fec:	31 05       	cpc	r19, r1
    4fee:	f9 f0       	breq	.+62     	; 0x502e <malloc+0xb0>
    4ff0:	28 1b       	sub	r18, r24
    4ff2:	39 0b       	sbc	r19, r25
    4ff4:	24 30       	cpi	r18, 0x04	; 4
    4ff6:	31 05       	cpc	r19, r1
    4ff8:	80 f4       	brcc	.+32     	; 0x501a <malloc+0x9c>
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ffe:	61 15       	cp	r22, r1
    5000:	71 05       	cpc	r23, r1
    5002:	21 f0       	breq	.+8      	; 0x500c <malloc+0x8e>
    5004:	fb 01       	movw	r30, r22
    5006:	93 83       	std	Z+3, r25	; 0x03
    5008:	82 83       	std	Z+2, r24	; 0x02
    500a:	04 c0       	rjmp	.+8      	; 0x5014 <malloc+0x96>
    500c:	90 93 3d 0f 	sts	0x0F3D, r25	; 0x800f3d <__flp+0x1>
    5010:	80 93 3c 0f 	sts	0x0F3C, r24	; 0x800f3c <__flp>
    5014:	fe 01       	movw	r30, r28
    5016:	32 96       	adiw	r30, 0x02	; 2
    5018:	44 c0       	rjmp	.+136    	; 0x50a2 <malloc+0x124>
    501a:	fe 01       	movw	r30, r28
    501c:	e2 0f       	add	r30, r18
    501e:	f3 1f       	adc	r31, r19
    5020:	81 93       	st	Z+, r24
    5022:	91 93       	st	Z+, r25
    5024:	22 50       	subi	r18, 0x02	; 2
    5026:	31 09       	sbc	r19, r1
    5028:	39 83       	std	Y+1, r19	; 0x01
    502a:	28 83       	st	Y, r18
    502c:	3a c0       	rjmp	.+116    	; 0x50a2 <malloc+0x124>
    502e:	20 91 3a 0f 	lds	r18, 0x0F3A	; 0x800f3a <__brkval>
    5032:	30 91 3b 0f 	lds	r19, 0x0F3B	; 0x800f3b <__brkval+0x1>
    5036:	23 2b       	or	r18, r19
    5038:	41 f4       	brne	.+16     	; 0x504a <malloc+0xcc>
    503a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    503e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5042:	30 93 3b 0f 	sts	0x0F3B, r19	; 0x800f3b <__brkval+0x1>
    5046:	20 93 3a 0f 	sts	0x0F3A, r18	; 0x800f3a <__brkval>
    504a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    504e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5052:	21 15       	cp	r18, r1
    5054:	31 05       	cpc	r19, r1
    5056:	41 f4       	brne	.+16     	; 0x5068 <malloc+0xea>
    5058:	2d b7       	in	r18, 0x3d	; 61
    505a:	3e b7       	in	r19, 0x3e	; 62
    505c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5060:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5064:	24 1b       	sub	r18, r20
    5066:	35 0b       	sbc	r19, r21
    5068:	e0 91 3a 0f 	lds	r30, 0x0F3A	; 0x800f3a <__brkval>
    506c:	f0 91 3b 0f 	lds	r31, 0x0F3B	; 0x800f3b <__brkval+0x1>
    5070:	e2 17       	cp	r30, r18
    5072:	f3 07       	cpc	r31, r19
    5074:	a0 f4       	brcc	.+40     	; 0x509e <malloc+0x120>
    5076:	2e 1b       	sub	r18, r30
    5078:	3f 0b       	sbc	r19, r31
    507a:	28 17       	cp	r18, r24
    507c:	39 07       	cpc	r19, r25
    507e:	78 f0       	brcs	.+30     	; 0x509e <malloc+0x120>
    5080:	ac 01       	movw	r20, r24
    5082:	4e 5f       	subi	r20, 0xFE	; 254
    5084:	5f 4f       	sbci	r21, 0xFF	; 255
    5086:	24 17       	cp	r18, r20
    5088:	35 07       	cpc	r19, r21
    508a:	48 f0       	brcs	.+18     	; 0x509e <malloc+0x120>
    508c:	4e 0f       	add	r20, r30
    508e:	5f 1f       	adc	r21, r31
    5090:	50 93 3b 0f 	sts	0x0F3B, r21	; 0x800f3b <__brkval+0x1>
    5094:	40 93 3a 0f 	sts	0x0F3A, r20	; 0x800f3a <__brkval>
    5098:	81 93       	st	Z+, r24
    509a:	91 93       	st	Z+, r25
    509c:	02 c0       	rjmp	.+4      	; 0x50a2 <malloc+0x124>
    509e:	e0 e0       	ldi	r30, 0x00	; 0
    50a0:	f0 e0       	ldi	r31, 0x00	; 0
    50a2:	cf 01       	movw	r24, r30
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	1f 91       	pop	r17
    50aa:	0f 91       	pop	r16
    50ac:	08 95       	ret

000050ae <free>:
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	00 97       	sbiw	r24, 0x00	; 0
    50b4:	09 f4       	brne	.+2      	; 0x50b8 <free+0xa>
    50b6:	81 c0       	rjmp	.+258    	; 0x51ba <free+0x10c>
    50b8:	fc 01       	movw	r30, r24
    50ba:	32 97       	sbiw	r30, 0x02	; 2
    50bc:	13 82       	std	Z+3, r1	; 0x03
    50be:	12 82       	std	Z+2, r1	; 0x02
    50c0:	a0 91 3c 0f 	lds	r26, 0x0F3C	; 0x800f3c <__flp>
    50c4:	b0 91 3d 0f 	lds	r27, 0x0F3D	; 0x800f3d <__flp+0x1>
    50c8:	10 97       	sbiw	r26, 0x00	; 0
    50ca:	81 f4       	brne	.+32     	; 0x50ec <free+0x3e>
    50cc:	20 81       	ld	r18, Z
    50ce:	31 81       	ldd	r19, Z+1	; 0x01
    50d0:	82 0f       	add	r24, r18
    50d2:	93 1f       	adc	r25, r19
    50d4:	20 91 3a 0f 	lds	r18, 0x0F3A	; 0x800f3a <__brkval>
    50d8:	30 91 3b 0f 	lds	r19, 0x0F3B	; 0x800f3b <__brkval+0x1>
    50dc:	28 17       	cp	r18, r24
    50de:	39 07       	cpc	r19, r25
    50e0:	51 f5       	brne	.+84     	; 0x5136 <free+0x88>
    50e2:	f0 93 3b 0f 	sts	0x0F3B, r31	; 0x800f3b <__brkval+0x1>
    50e6:	e0 93 3a 0f 	sts	0x0F3A, r30	; 0x800f3a <__brkval>
    50ea:	67 c0       	rjmp	.+206    	; 0x51ba <free+0x10c>
    50ec:	ed 01       	movw	r28, r26
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	ce 17       	cp	r28, r30
    50f4:	df 07       	cpc	r29, r31
    50f6:	40 f4       	brcc	.+16     	; 0x5108 <free+0x5a>
    50f8:	4a 81       	ldd	r20, Y+2	; 0x02
    50fa:	5b 81       	ldd	r21, Y+3	; 0x03
    50fc:	9e 01       	movw	r18, r28
    50fe:	41 15       	cp	r20, r1
    5100:	51 05       	cpc	r21, r1
    5102:	f1 f0       	breq	.+60     	; 0x5140 <free+0x92>
    5104:	ea 01       	movw	r28, r20
    5106:	f5 cf       	rjmp	.-22     	; 0x50f2 <free+0x44>
    5108:	d3 83       	std	Z+3, r29	; 0x03
    510a:	c2 83       	std	Z+2, r28	; 0x02
    510c:	40 81       	ld	r20, Z
    510e:	51 81       	ldd	r21, Z+1	; 0x01
    5110:	84 0f       	add	r24, r20
    5112:	95 1f       	adc	r25, r21
    5114:	c8 17       	cp	r28, r24
    5116:	d9 07       	cpc	r29, r25
    5118:	59 f4       	brne	.+22     	; 0x5130 <free+0x82>
    511a:	88 81       	ld	r24, Y
    511c:	99 81       	ldd	r25, Y+1	; 0x01
    511e:	84 0f       	add	r24, r20
    5120:	95 1f       	adc	r25, r21
    5122:	02 96       	adiw	r24, 0x02	; 2
    5124:	91 83       	std	Z+1, r25	; 0x01
    5126:	80 83       	st	Z, r24
    5128:	8a 81       	ldd	r24, Y+2	; 0x02
    512a:	9b 81       	ldd	r25, Y+3	; 0x03
    512c:	93 83       	std	Z+3, r25	; 0x03
    512e:	82 83       	std	Z+2, r24	; 0x02
    5130:	21 15       	cp	r18, r1
    5132:	31 05       	cpc	r19, r1
    5134:	29 f4       	brne	.+10     	; 0x5140 <free+0x92>
    5136:	f0 93 3d 0f 	sts	0x0F3D, r31	; 0x800f3d <__flp+0x1>
    513a:	e0 93 3c 0f 	sts	0x0F3C, r30	; 0x800f3c <__flp>
    513e:	3d c0       	rjmp	.+122    	; 0x51ba <free+0x10c>
    5140:	e9 01       	movw	r28, r18
    5142:	fb 83       	std	Y+3, r31	; 0x03
    5144:	ea 83       	std	Y+2, r30	; 0x02
    5146:	49 91       	ld	r20, Y+
    5148:	59 91       	ld	r21, Y+
    514a:	c4 0f       	add	r28, r20
    514c:	d5 1f       	adc	r29, r21
    514e:	ec 17       	cp	r30, r28
    5150:	fd 07       	cpc	r31, r29
    5152:	61 f4       	brne	.+24     	; 0x516c <free+0xbe>
    5154:	80 81       	ld	r24, Z
    5156:	91 81       	ldd	r25, Z+1	; 0x01
    5158:	84 0f       	add	r24, r20
    515a:	95 1f       	adc	r25, r21
    515c:	02 96       	adiw	r24, 0x02	; 2
    515e:	e9 01       	movw	r28, r18
    5160:	99 83       	std	Y+1, r25	; 0x01
    5162:	88 83       	st	Y, r24
    5164:	82 81       	ldd	r24, Z+2	; 0x02
    5166:	93 81       	ldd	r25, Z+3	; 0x03
    5168:	9b 83       	std	Y+3, r25	; 0x03
    516a:	8a 83       	std	Y+2, r24	; 0x02
    516c:	e0 e0       	ldi	r30, 0x00	; 0
    516e:	f0 e0       	ldi	r31, 0x00	; 0
    5170:	12 96       	adiw	r26, 0x02	; 2
    5172:	8d 91       	ld	r24, X+
    5174:	9c 91       	ld	r25, X
    5176:	13 97       	sbiw	r26, 0x03	; 3
    5178:	00 97       	sbiw	r24, 0x00	; 0
    517a:	19 f0       	breq	.+6      	; 0x5182 <free+0xd4>
    517c:	fd 01       	movw	r30, r26
    517e:	dc 01       	movw	r26, r24
    5180:	f7 cf       	rjmp	.-18     	; 0x5170 <free+0xc2>
    5182:	8d 91       	ld	r24, X+
    5184:	9c 91       	ld	r25, X
    5186:	11 97       	sbiw	r26, 0x01	; 1
    5188:	9d 01       	movw	r18, r26
    518a:	2e 5f       	subi	r18, 0xFE	; 254
    518c:	3f 4f       	sbci	r19, 0xFF	; 255
    518e:	82 0f       	add	r24, r18
    5190:	93 1f       	adc	r25, r19
    5192:	20 91 3a 0f 	lds	r18, 0x0F3A	; 0x800f3a <__brkval>
    5196:	30 91 3b 0f 	lds	r19, 0x0F3B	; 0x800f3b <__brkval+0x1>
    519a:	28 17       	cp	r18, r24
    519c:	39 07       	cpc	r19, r25
    519e:	69 f4       	brne	.+26     	; 0x51ba <free+0x10c>
    51a0:	30 97       	sbiw	r30, 0x00	; 0
    51a2:	29 f4       	brne	.+10     	; 0x51ae <free+0x100>
    51a4:	10 92 3d 0f 	sts	0x0F3D, r1	; 0x800f3d <__flp+0x1>
    51a8:	10 92 3c 0f 	sts	0x0F3C, r1	; 0x800f3c <__flp>
    51ac:	02 c0       	rjmp	.+4      	; 0x51b2 <free+0x104>
    51ae:	13 82       	std	Z+3, r1	; 0x03
    51b0:	12 82       	std	Z+2, r1	; 0x02
    51b2:	b0 93 3b 0f 	sts	0x0F3B, r27	; 0x800f3b <__brkval+0x1>
    51b6:	a0 93 3a 0f 	sts	0x0F3A, r26	; 0x800f3a <__brkval>
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	08 95       	ret

000051c0 <abort>:
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	f8 94       	cli
    51c6:	00 c3       	rjmp	.+1536   	; 0x57c8 <_exit>

000051c8 <memcpy>:
    51c8:	fb 01       	movw	r30, r22
    51ca:	dc 01       	movw	r26, r24
    51cc:	02 c0       	rjmp	.+4      	; 0x51d2 <memcpy+0xa>
    51ce:	01 90       	ld	r0, Z+
    51d0:	0d 92       	st	X+, r0
    51d2:	41 50       	subi	r20, 0x01	; 1
    51d4:	50 40       	sbci	r21, 0x00	; 0
    51d6:	d8 f7       	brcc	.-10     	; 0x51ce <memcpy+0x6>
    51d8:	08 95       	ret

000051da <memset>:
    51da:	dc 01       	movw	r26, r24
    51dc:	01 c0       	rjmp	.+2      	; 0x51e0 <memset+0x6>
    51de:	6d 93       	st	X+, r22
    51e0:	41 50       	subi	r20, 0x01	; 1
    51e2:	50 40       	sbci	r21, 0x00	; 0
    51e4:	e0 f7       	brcc	.-8      	; 0x51de <memset+0x4>
    51e6:	08 95       	ret

000051e8 <printf>:
    51e8:	cf 93       	push	r28
    51ea:	df 93       	push	r29
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
    51f0:	ae 01       	movw	r20, r28
    51f2:	4a 5f       	subi	r20, 0xFA	; 250
    51f4:	5f 4f       	sbci	r21, 0xFF	; 255
    51f6:	fa 01       	movw	r30, r20
    51f8:	61 91       	ld	r22, Z+
    51fa:	71 91       	ld	r23, Z+
    51fc:	af 01       	movw	r20, r30
    51fe:	80 91 40 0f 	lds	r24, 0x0F40	; 0x800f40 <__iob+0x2>
    5202:	90 91 41 0f 	lds	r25, 0x0F41	; 0x800f41 <__iob+0x3>
    5206:	33 d0       	rcall	.+102    	; 0x526e <vfprintf>
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	08 95       	ret

0000520e <puts>:
    520e:	0f 93       	push	r16
    5210:	1f 93       	push	r17
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	e0 91 40 0f 	lds	r30, 0x0F40	; 0x800f40 <__iob+0x2>
    521a:	f0 91 41 0f 	lds	r31, 0x0F41	; 0x800f41 <__iob+0x3>
    521e:	23 81       	ldd	r18, Z+3	; 0x03
    5220:	21 ff       	sbrs	r18, 1
    5222:	1b c0       	rjmp	.+54     	; 0x525a <puts+0x4c>
    5224:	8c 01       	movw	r16, r24
    5226:	d0 e0       	ldi	r29, 0x00	; 0
    5228:	c0 e0       	ldi	r28, 0x00	; 0
    522a:	f8 01       	movw	r30, r16
    522c:	81 91       	ld	r24, Z+
    522e:	8f 01       	movw	r16, r30
    5230:	60 91 40 0f 	lds	r22, 0x0F40	; 0x800f40 <__iob+0x2>
    5234:	70 91 41 0f 	lds	r23, 0x0F41	; 0x800f41 <__iob+0x3>
    5238:	db 01       	movw	r26, r22
    523a:	18 96       	adiw	r26, 0x08	; 8
    523c:	ed 91       	ld	r30, X+
    523e:	fc 91       	ld	r31, X
    5240:	19 97       	sbiw	r26, 0x09	; 9
    5242:	88 23       	and	r24, r24
    5244:	31 f0       	breq	.+12     	; 0x5252 <puts+0x44>
    5246:	19 95       	eicall
    5248:	89 2b       	or	r24, r25
    524a:	79 f3       	breq	.-34     	; 0x522a <puts+0x1c>
    524c:	df ef       	ldi	r29, 0xFF	; 255
    524e:	cf ef       	ldi	r28, 0xFF	; 255
    5250:	ec cf       	rjmp	.-40     	; 0x522a <puts+0x1c>
    5252:	8a e0       	ldi	r24, 0x0A	; 10
    5254:	19 95       	eicall
    5256:	89 2b       	or	r24, r25
    5258:	19 f0       	breq	.+6      	; 0x5260 <puts+0x52>
    525a:	8f ef       	ldi	r24, 0xFF	; 255
    525c:	9f ef       	ldi	r25, 0xFF	; 255
    525e:	02 c0       	rjmp	.+4      	; 0x5264 <puts+0x56>
    5260:	8d 2f       	mov	r24, r29
    5262:	9c 2f       	mov	r25, r28
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	1f 91       	pop	r17
    526a:	0f 91       	pop	r16
    526c:	08 95       	ret

0000526e <vfprintf>:
    526e:	2f 92       	push	r2
    5270:	3f 92       	push	r3
    5272:	4f 92       	push	r4
    5274:	5f 92       	push	r5
    5276:	6f 92       	push	r6
    5278:	7f 92       	push	r7
    527a:	8f 92       	push	r8
    527c:	9f 92       	push	r9
    527e:	af 92       	push	r10
    5280:	bf 92       	push	r11
    5282:	cf 92       	push	r12
    5284:	df 92       	push	r13
    5286:	ef 92       	push	r14
    5288:	ff 92       	push	r15
    528a:	0f 93       	push	r16
    528c:	1f 93       	push	r17
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    5292:	cd b7       	in	r28, 0x3d	; 61
    5294:	de b7       	in	r29, 0x3e	; 62
    5296:	2b 97       	sbiw	r28, 0x0b	; 11
    5298:	0f b6       	in	r0, 0x3f	; 63
    529a:	f8 94       	cli
    529c:	de bf       	out	0x3e, r29	; 62
    529e:	0f be       	out	0x3f, r0	; 63
    52a0:	cd bf       	out	0x3d, r28	; 61
    52a2:	6c 01       	movw	r12, r24
    52a4:	7b 01       	movw	r14, r22
    52a6:	8a 01       	movw	r16, r20
    52a8:	fc 01       	movw	r30, r24
    52aa:	17 82       	std	Z+7, r1	; 0x07
    52ac:	16 82       	std	Z+6, r1	; 0x06
    52ae:	83 81       	ldd	r24, Z+3	; 0x03
    52b0:	81 ff       	sbrs	r24, 1
    52b2:	bf c1       	rjmp	.+894    	; 0x5632 <vfprintf+0x3c4>
    52b4:	ce 01       	movw	r24, r28
    52b6:	01 96       	adiw	r24, 0x01	; 1
    52b8:	3c 01       	movw	r6, r24
    52ba:	f6 01       	movw	r30, r12
    52bc:	93 81       	ldd	r25, Z+3	; 0x03
    52be:	f7 01       	movw	r30, r14
    52c0:	93 fd       	sbrc	r25, 3
    52c2:	85 91       	lpm	r24, Z+
    52c4:	93 ff       	sbrs	r25, 3
    52c6:	81 91       	ld	r24, Z+
    52c8:	7f 01       	movw	r14, r30
    52ca:	88 23       	and	r24, r24
    52cc:	09 f4       	brne	.+2      	; 0x52d0 <vfprintf+0x62>
    52ce:	ad c1       	rjmp	.+858    	; 0x562a <vfprintf+0x3bc>
    52d0:	85 32       	cpi	r24, 0x25	; 37
    52d2:	39 f4       	brne	.+14     	; 0x52e2 <vfprintf+0x74>
    52d4:	93 fd       	sbrc	r25, 3
    52d6:	85 91       	lpm	r24, Z+
    52d8:	93 ff       	sbrs	r25, 3
    52da:	81 91       	ld	r24, Z+
    52dc:	7f 01       	movw	r14, r30
    52de:	85 32       	cpi	r24, 0x25	; 37
    52e0:	21 f4       	brne	.+8      	; 0x52ea <vfprintf+0x7c>
    52e2:	b6 01       	movw	r22, r12
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	d6 d1       	rcall	.+940    	; 0x5694 <fputc>
    52e8:	e8 cf       	rjmp	.-48     	; 0x52ba <vfprintf+0x4c>
    52ea:	91 2c       	mov	r9, r1
    52ec:	21 2c       	mov	r2, r1
    52ee:	31 2c       	mov	r3, r1
    52f0:	ff e1       	ldi	r31, 0x1F	; 31
    52f2:	f3 15       	cp	r31, r3
    52f4:	d8 f0       	brcs	.+54     	; 0x532c <vfprintf+0xbe>
    52f6:	8b 32       	cpi	r24, 0x2B	; 43
    52f8:	79 f0       	breq	.+30     	; 0x5318 <vfprintf+0xaa>
    52fa:	38 f4       	brcc	.+14     	; 0x530a <vfprintf+0x9c>
    52fc:	80 32       	cpi	r24, 0x20	; 32
    52fe:	79 f0       	breq	.+30     	; 0x531e <vfprintf+0xb0>
    5300:	83 32       	cpi	r24, 0x23	; 35
    5302:	a1 f4       	brne	.+40     	; 0x532c <vfprintf+0xbe>
    5304:	23 2d       	mov	r18, r3
    5306:	20 61       	ori	r18, 0x10	; 16
    5308:	1d c0       	rjmp	.+58     	; 0x5344 <vfprintf+0xd6>
    530a:	8d 32       	cpi	r24, 0x2D	; 45
    530c:	61 f0       	breq	.+24     	; 0x5326 <vfprintf+0xb8>
    530e:	80 33       	cpi	r24, 0x30	; 48
    5310:	69 f4       	brne	.+26     	; 0x532c <vfprintf+0xbe>
    5312:	23 2d       	mov	r18, r3
    5314:	21 60       	ori	r18, 0x01	; 1
    5316:	16 c0       	rjmp	.+44     	; 0x5344 <vfprintf+0xd6>
    5318:	83 2d       	mov	r24, r3
    531a:	82 60       	ori	r24, 0x02	; 2
    531c:	38 2e       	mov	r3, r24
    531e:	e3 2d       	mov	r30, r3
    5320:	e4 60       	ori	r30, 0x04	; 4
    5322:	3e 2e       	mov	r3, r30
    5324:	2a c0       	rjmp	.+84     	; 0x537a <vfprintf+0x10c>
    5326:	f3 2d       	mov	r31, r3
    5328:	f8 60       	ori	r31, 0x08	; 8
    532a:	1d c0       	rjmp	.+58     	; 0x5366 <vfprintf+0xf8>
    532c:	37 fc       	sbrc	r3, 7
    532e:	2d c0       	rjmp	.+90     	; 0x538a <vfprintf+0x11c>
    5330:	20 ed       	ldi	r18, 0xD0	; 208
    5332:	28 0f       	add	r18, r24
    5334:	2a 30       	cpi	r18, 0x0A	; 10
    5336:	40 f0       	brcs	.+16     	; 0x5348 <vfprintf+0xda>
    5338:	8e 32       	cpi	r24, 0x2E	; 46
    533a:	b9 f4       	brne	.+46     	; 0x536a <vfprintf+0xfc>
    533c:	36 fc       	sbrc	r3, 6
    533e:	75 c1       	rjmp	.+746    	; 0x562a <vfprintf+0x3bc>
    5340:	23 2d       	mov	r18, r3
    5342:	20 64       	ori	r18, 0x40	; 64
    5344:	32 2e       	mov	r3, r18
    5346:	19 c0       	rjmp	.+50     	; 0x537a <vfprintf+0x10c>
    5348:	36 fe       	sbrs	r3, 6
    534a:	06 c0       	rjmp	.+12     	; 0x5358 <vfprintf+0xea>
    534c:	8a e0       	ldi	r24, 0x0A	; 10
    534e:	98 9e       	mul	r9, r24
    5350:	20 0d       	add	r18, r0
    5352:	11 24       	eor	r1, r1
    5354:	92 2e       	mov	r9, r18
    5356:	11 c0       	rjmp	.+34     	; 0x537a <vfprintf+0x10c>
    5358:	ea e0       	ldi	r30, 0x0A	; 10
    535a:	2e 9e       	mul	r2, r30
    535c:	20 0d       	add	r18, r0
    535e:	11 24       	eor	r1, r1
    5360:	22 2e       	mov	r2, r18
    5362:	f3 2d       	mov	r31, r3
    5364:	f0 62       	ori	r31, 0x20	; 32
    5366:	3f 2e       	mov	r3, r31
    5368:	08 c0       	rjmp	.+16     	; 0x537a <vfprintf+0x10c>
    536a:	8c 36       	cpi	r24, 0x6C	; 108
    536c:	21 f4       	brne	.+8      	; 0x5376 <vfprintf+0x108>
    536e:	83 2d       	mov	r24, r3
    5370:	80 68       	ori	r24, 0x80	; 128
    5372:	38 2e       	mov	r3, r24
    5374:	02 c0       	rjmp	.+4      	; 0x537a <vfprintf+0x10c>
    5376:	88 36       	cpi	r24, 0x68	; 104
    5378:	41 f4       	brne	.+16     	; 0x538a <vfprintf+0x11c>
    537a:	f7 01       	movw	r30, r14
    537c:	93 fd       	sbrc	r25, 3
    537e:	85 91       	lpm	r24, Z+
    5380:	93 ff       	sbrs	r25, 3
    5382:	81 91       	ld	r24, Z+
    5384:	7f 01       	movw	r14, r30
    5386:	81 11       	cpse	r24, r1
    5388:	b3 cf       	rjmp	.-154    	; 0x52f0 <vfprintf+0x82>
    538a:	98 2f       	mov	r25, r24
    538c:	9f 7d       	andi	r25, 0xDF	; 223
    538e:	95 54       	subi	r25, 0x45	; 69
    5390:	93 30       	cpi	r25, 0x03	; 3
    5392:	28 f4       	brcc	.+10     	; 0x539e <vfprintf+0x130>
    5394:	0c 5f       	subi	r16, 0xFC	; 252
    5396:	1f 4f       	sbci	r17, 0xFF	; 255
    5398:	9f e3       	ldi	r25, 0x3F	; 63
    539a:	99 83       	std	Y+1, r25	; 0x01
    539c:	0d c0       	rjmp	.+26     	; 0x53b8 <vfprintf+0x14a>
    539e:	83 36       	cpi	r24, 0x63	; 99
    53a0:	31 f0       	breq	.+12     	; 0x53ae <vfprintf+0x140>
    53a2:	83 37       	cpi	r24, 0x73	; 115
    53a4:	71 f0       	breq	.+28     	; 0x53c2 <vfprintf+0x154>
    53a6:	83 35       	cpi	r24, 0x53	; 83
    53a8:	09 f0       	breq	.+2      	; 0x53ac <vfprintf+0x13e>
    53aa:	55 c0       	rjmp	.+170    	; 0x5456 <vfprintf+0x1e8>
    53ac:	20 c0       	rjmp	.+64     	; 0x53ee <vfprintf+0x180>
    53ae:	f8 01       	movw	r30, r16
    53b0:	80 81       	ld	r24, Z
    53b2:	89 83       	std	Y+1, r24	; 0x01
    53b4:	0e 5f       	subi	r16, 0xFE	; 254
    53b6:	1f 4f       	sbci	r17, 0xFF	; 255
    53b8:	88 24       	eor	r8, r8
    53ba:	83 94       	inc	r8
    53bc:	91 2c       	mov	r9, r1
    53be:	53 01       	movw	r10, r6
    53c0:	12 c0       	rjmp	.+36     	; 0x53e6 <vfprintf+0x178>
    53c2:	28 01       	movw	r4, r16
    53c4:	f2 e0       	ldi	r31, 0x02	; 2
    53c6:	4f 0e       	add	r4, r31
    53c8:	51 1c       	adc	r5, r1
    53ca:	f8 01       	movw	r30, r16
    53cc:	a0 80       	ld	r10, Z
    53ce:	b1 80       	ldd	r11, Z+1	; 0x01
    53d0:	36 fe       	sbrs	r3, 6
    53d2:	03 c0       	rjmp	.+6      	; 0x53da <vfprintf+0x16c>
    53d4:	69 2d       	mov	r22, r9
    53d6:	70 e0       	ldi	r23, 0x00	; 0
    53d8:	02 c0       	rjmp	.+4      	; 0x53de <vfprintf+0x170>
    53da:	6f ef       	ldi	r22, 0xFF	; 255
    53dc:	7f ef       	ldi	r23, 0xFF	; 255
    53de:	c5 01       	movw	r24, r10
    53e0:	4e d1       	rcall	.+668    	; 0x567e <strnlen>
    53e2:	4c 01       	movw	r8, r24
    53e4:	82 01       	movw	r16, r4
    53e6:	f3 2d       	mov	r31, r3
    53e8:	ff 77       	andi	r31, 0x7F	; 127
    53ea:	3f 2e       	mov	r3, r31
    53ec:	15 c0       	rjmp	.+42     	; 0x5418 <vfprintf+0x1aa>
    53ee:	28 01       	movw	r4, r16
    53f0:	22 e0       	ldi	r18, 0x02	; 2
    53f2:	42 0e       	add	r4, r18
    53f4:	51 1c       	adc	r5, r1
    53f6:	f8 01       	movw	r30, r16
    53f8:	a0 80       	ld	r10, Z
    53fa:	b1 80       	ldd	r11, Z+1	; 0x01
    53fc:	36 fe       	sbrs	r3, 6
    53fe:	03 c0       	rjmp	.+6      	; 0x5406 <vfprintf+0x198>
    5400:	69 2d       	mov	r22, r9
    5402:	70 e0       	ldi	r23, 0x00	; 0
    5404:	02 c0       	rjmp	.+4      	; 0x540a <vfprintf+0x19c>
    5406:	6f ef       	ldi	r22, 0xFF	; 255
    5408:	7f ef       	ldi	r23, 0xFF	; 255
    540a:	c5 01       	movw	r24, r10
    540c:	2d d1       	rcall	.+602    	; 0x5668 <strnlen_P>
    540e:	4c 01       	movw	r8, r24
    5410:	f3 2d       	mov	r31, r3
    5412:	f0 68       	ori	r31, 0x80	; 128
    5414:	3f 2e       	mov	r3, r31
    5416:	82 01       	movw	r16, r4
    5418:	33 fc       	sbrc	r3, 3
    541a:	19 c0       	rjmp	.+50     	; 0x544e <vfprintf+0x1e0>
    541c:	82 2d       	mov	r24, r2
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	88 16       	cp	r8, r24
    5422:	99 06       	cpc	r9, r25
    5424:	a0 f4       	brcc	.+40     	; 0x544e <vfprintf+0x1e0>
    5426:	b6 01       	movw	r22, r12
    5428:	80 e2       	ldi	r24, 0x20	; 32
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	33 d1       	rcall	.+614    	; 0x5694 <fputc>
    542e:	2a 94       	dec	r2
    5430:	f5 cf       	rjmp	.-22     	; 0x541c <vfprintf+0x1ae>
    5432:	f5 01       	movw	r30, r10
    5434:	37 fc       	sbrc	r3, 7
    5436:	85 91       	lpm	r24, Z+
    5438:	37 fe       	sbrs	r3, 7
    543a:	81 91       	ld	r24, Z+
    543c:	5f 01       	movw	r10, r30
    543e:	b6 01       	movw	r22, r12
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	28 d1       	rcall	.+592    	; 0x5694 <fputc>
    5444:	21 10       	cpse	r2, r1
    5446:	2a 94       	dec	r2
    5448:	21 e0       	ldi	r18, 0x01	; 1
    544a:	82 1a       	sub	r8, r18
    544c:	91 08       	sbc	r9, r1
    544e:	81 14       	cp	r8, r1
    5450:	91 04       	cpc	r9, r1
    5452:	79 f7       	brne	.-34     	; 0x5432 <vfprintf+0x1c4>
    5454:	e1 c0       	rjmp	.+450    	; 0x5618 <vfprintf+0x3aa>
    5456:	84 36       	cpi	r24, 0x64	; 100
    5458:	11 f0       	breq	.+4      	; 0x545e <vfprintf+0x1f0>
    545a:	89 36       	cpi	r24, 0x69	; 105
    545c:	39 f5       	brne	.+78     	; 0x54ac <vfprintf+0x23e>
    545e:	f8 01       	movw	r30, r16
    5460:	37 fe       	sbrs	r3, 7
    5462:	07 c0       	rjmp	.+14     	; 0x5472 <vfprintf+0x204>
    5464:	60 81       	ld	r22, Z
    5466:	71 81       	ldd	r23, Z+1	; 0x01
    5468:	82 81       	ldd	r24, Z+2	; 0x02
    546a:	93 81       	ldd	r25, Z+3	; 0x03
    546c:	0c 5f       	subi	r16, 0xFC	; 252
    546e:	1f 4f       	sbci	r17, 0xFF	; 255
    5470:	08 c0       	rjmp	.+16     	; 0x5482 <vfprintf+0x214>
    5472:	60 81       	ld	r22, Z
    5474:	71 81       	ldd	r23, Z+1	; 0x01
    5476:	07 2e       	mov	r0, r23
    5478:	00 0c       	add	r0, r0
    547a:	88 0b       	sbc	r24, r24
    547c:	99 0b       	sbc	r25, r25
    547e:	0e 5f       	subi	r16, 0xFE	; 254
    5480:	1f 4f       	sbci	r17, 0xFF	; 255
    5482:	f3 2d       	mov	r31, r3
    5484:	ff 76       	andi	r31, 0x6F	; 111
    5486:	3f 2e       	mov	r3, r31
    5488:	97 ff       	sbrs	r25, 7
    548a:	09 c0       	rjmp	.+18     	; 0x549e <vfprintf+0x230>
    548c:	90 95       	com	r25
    548e:	80 95       	com	r24
    5490:	70 95       	com	r23
    5492:	61 95       	neg	r22
    5494:	7f 4f       	sbci	r23, 0xFF	; 255
    5496:	8f 4f       	sbci	r24, 0xFF	; 255
    5498:	9f 4f       	sbci	r25, 0xFF	; 255
    549a:	f0 68       	ori	r31, 0x80	; 128
    549c:	3f 2e       	mov	r3, r31
    549e:	2a e0       	ldi	r18, 0x0A	; 10
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	a3 01       	movw	r20, r6
    54a4:	33 d1       	rcall	.+614    	; 0x570c <__ultoa_invert>
    54a6:	88 2e       	mov	r8, r24
    54a8:	86 18       	sub	r8, r6
    54aa:	44 c0       	rjmp	.+136    	; 0x5534 <vfprintf+0x2c6>
    54ac:	85 37       	cpi	r24, 0x75	; 117
    54ae:	31 f4       	brne	.+12     	; 0x54bc <vfprintf+0x24e>
    54b0:	23 2d       	mov	r18, r3
    54b2:	2f 7e       	andi	r18, 0xEF	; 239
    54b4:	b2 2e       	mov	r11, r18
    54b6:	2a e0       	ldi	r18, 0x0A	; 10
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	25 c0       	rjmp	.+74     	; 0x5506 <vfprintf+0x298>
    54bc:	93 2d       	mov	r25, r3
    54be:	99 7f       	andi	r25, 0xF9	; 249
    54c0:	b9 2e       	mov	r11, r25
    54c2:	8f 36       	cpi	r24, 0x6F	; 111
    54c4:	c1 f0       	breq	.+48     	; 0x54f6 <vfprintf+0x288>
    54c6:	18 f4       	brcc	.+6      	; 0x54ce <vfprintf+0x260>
    54c8:	88 35       	cpi	r24, 0x58	; 88
    54ca:	79 f0       	breq	.+30     	; 0x54ea <vfprintf+0x27c>
    54cc:	ae c0       	rjmp	.+348    	; 0x562a <vfprintf+0x3bc>
    54ce:	80 37       	cpi	r24, 0x70	; 112
    54d0:	19 f0       	breq	.+6      	; 0x54d8 <vfprintf+0x26a>
    54d2:	88 37       	cpi	r24, 0x78	; 120
    54d4:	21 f0       	breq	.+8      	; 0x54de <vfprintf+0x270>
    54d6:	a9 c0       	rjmp	.+338    	; 0x562a <vfprintf+0x3bc>
    54d8:	e9 2f       	mov	r30, r25
    54da:	e0 61       	ori	r30, 0x10	; 16
    54dc:	be 2e       	mov	r11, r30
    54de:	b4 fe       	sbrs	r11, 4
    54e0:	0d c0       	rjmp	.+26     	; 0x54fc <vfprintf+0x28e>
    54e2:	fb 2d       	mov	r31, r11
    54e4:	f4 60       	ori	r31, 0x04	; 4
    54e6:	bf 2e       	mov	r11, r31
    54e8:	09 c0       	rjmp	.+18     	; 0x54fc <vfprintf+0x28e>
    54ea:	34 fe       	sbrs	r3, 4
    54ec:	0a c0       	rjmp	.+20     	; 0x5502 <vfprintf+0x294>
    54ee:	29 2f       	mov	r18, r25
    54f0:	26 60       	ori	r18, 0x06	; 6
    54f2:	b2 2e       	mov	r11, r18
    54f4:	06 c0       	rjmp	.+12     	; 0x5502 <vfprintf+0x294>
    54f6:	28 e0       	ldi	r18, 0x08	; 8
    54f8:	30 e0       	ldi	r19, 0x00	; 0
    54fa:	05 c0       	rjmp	.+10     	; 0x5506 <vfprintf+0x298>
    54fc:	20 e1       	ldi	r18, 0x10	; 16
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <vfprintf+0x298>
    5502:	20 e1       	ldi	r18, 0x10	; 16
    5504:	32 e0       	ldi	r19, 0x02	; 2
    5506:	f8 01       	movw	r30, r16
    5508:	b7 fe       	sbrs	r11, 7
    550a:	07 c0       	rjmp	.+14     	; 0x551a <vfprintf+0x2ac>
    550c:	60 81       	ld	r22, Z
    550e:	71 81       	ldd	r23, Z+1	; 0x01
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	0c 5f       	subi	r16, 0xFC	; 252
    5516:	1f 4f       	sbci	r17, 0xFF	; 255
    5518:	06 c0       	rjmp	.+12     	; 0x5526 <vfprintf+0x2b8>
    551a:	60 81       	ld	r22, Z
    551c:	71 81       	ldd	r23, Z+1	; 0x01
    551e:	80 e0       	ldi	r24, 0x00	; 0
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	0e 5f       	subi	r16, 0xFE	; 254
    5524:	1f 4f       	sbci	r17, 0xFF	; 255
    5526:	a3 01       	movw	r20, r6
    5528:	f1 d0       	rcall	.+482    	; 0x570c <__ultoa_invert>
    552a:	88 2e       	mov	r8, r24
    552c:	86 18       	sub	r8, r6
    552e:	fb 2d       	mov	r31, r11
    5530:	ff 77       	andi	r31, 0x7F	; 127
    5532:	3f 2e       	mov	r3, r31
    5534:	36 fe       	sbrs	r3, 6
    5536:	0d c0       	rjmp	.+26     	; 0x5552 <vfprintf+0x2e4>
    5538:	23 2d       	mov	r18, r3
    553a:	2e 7f       	andi	r18, 0xFE	; 254
    553c:	a2 2e       	mov	r10, r18
    553e:	89 14       	cp	r8, r9
    5540:	58 f4       	brcc	.+22     	; 0x5558 <vfprintf+0x2ea>
    5542:	34 fe       	sbrs	r3, 4
    5544:	0b c0       	rjmp	.+22     	; 0x555c <vfprintf+0x2ee>
    5546:	32 fc       	sbrc	r3, 2
    5548:	09 c0       	rjmp	.+18     	; 0x555c <vfprintf+0x2ee>
    554a:	83 2d       	mov	r24, r3
    554c:	8e 7e       	andi	r24, 0xEE	; 238
    554e:	a8 2e       	mov	r10, r24
    5550:	05 c0       	rjmp	.+10     	; 0x555c <vfprintf+0x2ee>
    5552:	b8 2c       	mov	r11, r8
    5554:	a3 2c       	mov	r10, r3
    5556:	03 c0       	rjmp	.+6      	; 0x555e <vfprintf+0x2f0>
    5558:	b8 2c       	mov	r11, r8
    555a:	01 c0       	rjmp	.+2      	; 0x555e <vfprintf+0x2f0>
    555c:	b9 2c       	mov	r11, r9
    555e:	a4 fe       	sbrs	r10, 4
    5560:	0f c0       	rjmp	.+30     	; 0x5580 <vfprintf+0x312>
    5562:	fe 01       	movw	r30, r28
    5564:	e8 0d       	add	r30, r8
    5566:	f1 1d       	adc	r31, r1
    5568:	80 81       	ld	r24, Z
    556a:	80 33       	cpi	r24, 0x30	; 48
    556c:	21 f4       	brne	.+8      	; 0x5576 <vfprintf+0x308>
    556e:	9a 2d       	mov	r25, r10
    5570:	99 7e       	andi	r25, 0xE9	; 233
    5572:	a9 2e       	mov	r10, r25
    5574:	09 c0       	rjmp	.+18     	; 0x5588 <vfprintf+0x31a>
    5576:	a2 fe       	sbrs	r10, 2
    5578:	06 c0       	rjmp	.+12     	; 0x5586 <vfprintf+0x318>
    557a:	b3 94       	inc	r11
    557c:	b3 94       	inc	r11
    557e:	04 c0       	rjmp	.+8      	; 0x5588 <vfprintf+0x31a>
    5580:	8a 2d       	mov	r24, r10
    5582:	86 78       	andi	r24, 0x86	; 134
    5584:	09 f0       	breq	.+2      	; 0x5588 <vfprintf+0x31a>
    5586:	b3 94       	inc	r11
    5588:	a3 fc       	sbrc	r10, 3
    558a:	10 c0       	rjmp	.+32     	; 0x55ac <vfprintf+0x33e>
    558c:	a0 fe       	sbrs	r10, 0
    558e:	06 c0       	rjmp	.+12     	; 0x559c <vfprintf+0x32e>
    5590:	b2 14       	cp	r11, r2
    5592:	80 f4       	brcc	.+32     	; 0x55b4 <vfprintf+0x346>
    5594:	28 0c       	add	r2, r8
    5596:	92 2c       	mov	r9, r2
    5598:	9b 18       	sub	r9, r11
    559a:	0d c0       	rjmp	.+26     	; 0x55b6 <vfprintf+0x348>
    559c:	b2 14       	cp	r11, r2
    559e:	58 f4       	brcc	.+22     	; 0x55b6 <vfprintf+0x348>
    55a0:	b6 01       	movw	r22, r12
    55a2:	80 e2       	ldi	r24, 0x20	; 32
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	76 d0       	rcall	.+236    	; 0x5694 <fputc>
    55a8:	b3 94       	inc	r11
    55aa:	f8 cf       	rjmp	.-16     	; 0x559c <vfprintf+0x32e>
    55ac:	b2 14       	cp	r11, r2
    55ae:	18 f4       	brcc	.+6      	; 0x55b6 <vfprintf+0x348>
    55b0:	2b 18       	sub	r2, r11
    55b2:	02 c0       	rjmp	.+4      	; 0x55b8 <vfprintf+0x34a>
    55b4:	98 2c       	mov	r9, r8
    55b6:	21 2c       	mov	r2, r1
    55b8:	a4 fe       	sbrs	r10, 4
    55ba:	0f c0       	rjmp	.+30     	; 0x55da <vfprintf+0x36c>
    55bc:	b6 01       	movw	r22, r12
    55be:	80 e3       	ldi	r24, 0x30	; 48
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	68 d0       	rcall	.+208    	; 0x5694 <fputc>
    55c4:	a2 fe       	sbrs	r10, 2
    55c6:	16 c0       	rjmp	.+44     	; 0x55f4 <vfprintf+0x386>
    55c8:	a1 fc       	sbrc	r10, 1
    55ca:	03 c0       	rjmp	.+6      	; 0x55d2 <vfprintf+0x364>
    55cc:	88 e7       	ldi	r24, 0x78	; 120
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	02 c0       	rjmp	.+4      	; 0x55d6 <vfprintf+0x368>
    55d2:	88 e5       	ldi	r24, 0x58	; 88
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	b6 01       	movw	r22, r12
    55d8:	0c c0       	rjmp	.+24     	; 0x55f2 <vfprintf+0x384>
    55da:	8a 2d       	mov	r24, r10
    55dc:	86 78       	andi	r24, 0x86	; 134
    55de:	51 f0       	breq	.+20     	; 0x55f4 <vfprintf+0x386>
    55e0:	a1 fe       	sbrs	r10, 1
    55e2:	02 c0       	rjmp	.+4      	; 0x55e8 <vfprintf+0x37a>
    55e4:	8b e2       	ldi	r24, 0x2B	; 43
    55e6:	01 c0       	rjmp	.+2      	; 0x55ea <vfprintf+0x37c>
    55e8:	80 e2       	ldi	r24, 0x20	; 32
    55ea:	a7 fc       	sbrc	r10, 7
    55ec:	8d e2       	ldi	r24, 0x2D	; 45
    55ee:	b6 01       	movw	r22, r12
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	50 d0       	rcall	.+160    	; 0x5694 <fputc>
    55f4:	89 14       	cp	r8, r9
    55f6:	30 f4       	brcc	.+12     	; 0x5604 <vfprintf+0x396>
    55f8:	b6 01       	movw	r22, r12
    55fa:	80 e3       	ldi	r24, 0x30	; 48
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	4a d0       	rcall	.+148    	; 0x5694 <fputc>
    5600:	9a 94       	dec	r9
    5602:	f8 cf       	rjmp	.-16     	; 0x55f4 <vfprintf+0x386>
    5604:	8a 94       	dec	r8
    5606:	f3 01       	movw	r30, r6
    5608:	e8 0d       	add	r30, r8
    560a:	f1 1d       	adc	r31, r1
    560c:	80 81       	ld	r24, Z
    560e:	b6 01       	movw	r22, r12
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	40 d0       	rcall	.+128    	; 0x5694 <fputc>
    5614:	81 10       	cpse	r8, r1
    5616:	f6 cf       	rjmp	.-20     	; 0x5604 <vfprintf+0x396>
    5618:	22 20       	and	r2, r2
    561a:	09 f4       	brne	.+2      	; 0x561e <vfprintf+0x3b0>
    561c:	4e ce       	rjmp	.-868    	; 0x52ba <vfprintf+0x4c>
    561e:	b6 01       	movw	r22, r12
    5620:	80 e2       	ldi	r24, 0x20	; 32
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	37 d0       	rcall	.+110    	; 0x5694 <fputc>
    5626:	2a 94       	dec	r2
    5628:	f7 cf       	rjmp	.-18     	; 0x5618 <vfprintf+0x3aa>
    562a:	f6 01       	movw	r30, r12
    562c:	86 81       	ldd	r24, Z+6	; 0x06
    562e:	97 81       	ldd	r25, Z+7	; 0x07
    5630:	02 c0       	rjmp	.+4      	; 0x5636 <vfprintf+0x3c8>
    5632:	8f ef       	ldi	r24, 0xFF	; 255
    5634:	9f ef       	ldi	r25, 0xFF	; 255
    5636:	2b 96       	adiw	r28, 0x0b	; 11
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	de bf       	out	0x3e, r29	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	cd bf       	out	0x3d, r28	; 61
    5642:	df 91       	pop	r29
    5644:	cf 91       	pop	r28
    5646:	1f 91       	pop	r17
    5648:	0f 91       	pop	r16
    564a:	ff 90       	pop	r15
    564c:	ef 90       	pop	r14
    564e:	df 90       	pop	r13
    5650:	cf 90       	pop	r12
    5652:	bf 90       	pop	r11
    5654:	af 90       	pop	r10
    5656:	9f 90       	pop	r9
    5658:	8f 90       	pop	r8
    565a:	7f 90       	pop	r7
    565c:	6f 90       	pop	r6
    565e:	5f 90       	pop	r5
    5660:	4f 90       	pop	r4
    5662:	3f 90       	pop	r3
    5664:	2f 90       	pop	r2
    5666:	08 95       	ret

00005668 <strnlen_P>:
    5668:	fc 01       	movw	r30, r24
    566a:	05 90       	lpm	r0, Z+
    566c:	61 50       	subi	r22, 0x01	; 1
    566e:	70 40       	sbci	r23, 0x00	; 0
    5670:	01 10       	cpse	r0, r1
    5672:	d8 f7       	brcc	.-10     	; 0x566a <strnlen_P+0x2>
    5674:	80 95       	com	r24
    5676:	90 95       	com	r25
    5678:	8e 0f       	add	r24, r30
    567a:	9f 1f       	adc	r25, r31
    567c:	08 95       	ret

0000567e <strnlen>:
    567e:	fc 01       	movw	r30, r24
    5680:	61 50       	subi	r22, 0x01	; 1
    5682:	70 40       	sbci	r23, 0x00	; 0
    5684:	01 90       	ld	r0, Z+
    5686:	01 10       	cpse	r0, r1
    5688:	d8 f7       	brcc	.-10     	; 0x5680 <strnlen+0x2>
    568a:	80 95       	com	r24
    568c:	90 95       	com	r25
    568e:	8e 0f       	add	r24, r30
    5690:	9f 1f       	adc	r25, r31
    5692:	08 95       	ret

00005694 <fputc>:
    5694:	0f 93       	push	r16
    5696:	1f 93       	push	r17
    5698:	cf 93       	push	r28
    569a:	df 93       	push	r29
    569c:	fb 01       	movw	r30, r22
    569e:	23 81       	ldd	r18, Z+3	; 0x03
    56a0:	21 fd       	sbrc	r18, 1
    56a2:	03 c0       	rjmp	.+6      	; 0x56aa <fputc+0x16>
    56a4:	8f ef       	ldi	r24, 0xFF	; 255
    56a6:	9f ef       	ldi	r25, 0xFF	; 255
    56a8:	2c c0       	rjmp	.+88     	; 0x5702 <fputc+0x6e>
    56aa:	22 ff       	sbrs	r18, 2
    56ac:	16 c0       	rjmp	.+44     	; 0x56da <fputc+0x46>
    56ae:	46 81       	ldd	r20, Z+6	; 0x06
    56b0:	57 81       	ldd	r21, Z+7	; 0x07
    56b2:	24 81       	ldd	r18, Z+4	; 0x04
    56b4:	35 81       	ldd	r19, Z+5	; 0x05
    56b6:	42 17       	cp	r20, r18
    56b8:	53 07       	cpc	r21, r19
    56ba:	44 f4       	brge	.+16     	; 0x56cc <fputc+0x38>
    56bc:	a0 81       	ld	r26, Z
    56be:	b1 81       	ldd	r27, Z+1	; 0x01
    56c0:	9d 01       	movw	r18, r26
    56c2:	2f 5f       	subi	r18, 0xFF	; 255
    56c4:	3f 4f       	sbci	r19, 0xFF	; 255
    56c6:	31 83       	std	Z+1, r19	; 0x01
    56c8:	20 83       	st	Z, r18
    56ca:	8c 93       	st	X, r24
    56cc:	26 81       	ldd	r18, Z+6	; 0x06
    56ce:	37 81       	ldd	r19, Z+7	; 0x07
    56d0:	2f 5f       	subi	r18, 0xFF	; 255
    56d2:	3f 4f       	sbci	r19, 0xFF	; 255
    56d4:	37 83       	std	Z+7, r19	; 0x07
    56d6:	26 83       	std	Z+6, r18	; 0x06
    56d8:	14 c0       	rjmp	.+40     	; 0x5702 <fputc+0x6e>
    56da:	8b 01       	movw	r16, r22
    56dc:	ec 01       	movw	r28, r24
    56de:	fb 01       	movw	r30, r22
    56e0:	00 84       	ldd	r0, Z+8	; 0x08
    56e2:	f1 85       	ldd	r31, Z+9	; 0x09
    56e4:	e0 2d       	mov	r30, r0
    56e6:	19 95       	eicall
    56e8:	89 2b       	or	r24, r25
    56ea:	e1 f6       	brne	.-72     	; 0x56a4 <fputc+0x10>
    56ec:	d8 01       	movw	r26, r16
    56ee:	16 96       	adiw	r26, 0x06	; 6
    56f0:	8d 91       	ld	r24, X+
    56f2:	9c 91       	ld	r25, X
    56f4:	17 97       	sbiw	r26, 0x07	; 7
    56f6:	01 96       	adiw	r24, 0x01	; 1
    56f8:	17 96       	adiw	r26, 0x07	; 7
    56fa:	9c 93       	st	X, r25
    56fc:	8e 93       	st	-X, r24
    56fe:	16 97       	sbiw	r26, 0x06	; 6
    5700:	ce 01       	movw	r24, r28
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	08 95       	ret

0000570c <__ultoa_invert>:
    570c:	fa 01       	movw	r30, r20
    570e:	aa 27       	eor	r26, r26
    5710:	28 30       	cpi	r18, 0x08	; 8
    5712:	51 f1       	breq	.+84     	; 0x5768 <__ultoa_invert+0x5c>
    5714:	20 31       	cpi	r18, 0x10	; 16
    5716:	81 f1       	breq	.+96     	; 0x5778 <__ultoa_invert+0x6c>
    5718:	e8 94       	clt
    571a:	6f 93       	push	r22
    571c:	6e 7f       	andi	r22, 0xFE	; 254
    571e:	6e 5f       	subi	r22, 0xFE	; 254
    5720:	7f 4f       	sbci	r23, 0xFF	; 255
    5722:	8f 4f       	sbci	r24, 0xFF	; 255
    5724:	9f 4f       	sbci	r25, 0xFF	; 255
    5726:	af 4f       	sbci	r26, 0xFF	; 255
    5728:	b1 e0       	ldi	r27, 0x01	; 1
    572a:	3e d0       	rcall	.+124    	; 0x57a8 <__ultoa_invert+0x9c>
    572c:	b4 e0       	ldi	r27, 0x04	; 4
    572e:	3c d0       	rcall	.+120    	; 0x57a8 <__ultoa_invert+0x9c>
    5730:	67 0f       	add	r22, r23
    5732:	78 1f       	adc	r23, r24
    5734:	89 1f       	adc	r24, r25
    5736:	9a 1f       	adc	r25, r26
    5738:	a1 1d       	adc	r26, r1
    573a:	68 0f       	add	r22, r24
    573c:	79 1f       	adc	r23, r25
    573e:	8a 1f       	adc	r24, r26
    5740:	91 1d       	adc	r25, r1
    5742:	a1 1d       	adc	r26, r1
    5744:	6a 0f       	add	r22, r26
    5746:	71 1d       	adc	r23, r1
    5748:	81 1d       	adc	r24, r1
    574a:	91 1d       	adc	r25, r1
    574c:	a1 1d       	adc	r26, r1
    574e:	20 d0       	rcall	.+64     	; 0x5790 <__ultoa_invert+0x84>
    5750:	09 f4       	brne	.+2      	; 0x5754 <__ultoa_invert+0x48>
    5752:	68 94       	set
    5754:	3f 91       	pop	r19
    5756:	2a e0       	ldi	r18, 0x0A	; 10
    5758:	26 9f       	mul	r18, r22
    575a:	11 24       	eor	r1, r1
    575c:	30 19       	sub	r19, r0
    575e:	30 5d       	subi	r19, 0xD0	; 208
    5760:	31 93       	st	Z+, r19
    5762:	de f6       	brtc	.-74     	; 0x571a <__ultoa_invert+0xe>
    5764:	cf 01       	movw	r24, r30
    5766:	08 95       	ret
    5768:	46 2f       	mov	r20, r22
    576a:	47 70       	andi	r20, 0x07	; 7
    576c:	40 5d       	subi	r20, 0xD0	; 208
    576e:	41 93       	st	Z+, r20
    5770:	b3 e0       	ldi	r27, 0x03	; 3
    5772:	0f d0       	rcall	.+30     	; 0x5792 <__ultoa_invert+0x86>
    5774:	c9 f7       	brne	.-14     	; 0x5768 <__ultoa_invert+0x5c>
    5776:	f6 cf       	rjmp	.-20     	; 0x5764 <__ultoa_invert+0x58>
    5778:	46 2f       	mov	r20, r22
    577a:	4f 70       	andi	r20, 0x0F	; 15
    577c:	40 5d       	subi	r20, 0xD0	; 208
    577e:	4a 33       	cpi	r20, 0x3A	; 58
    5780:	18 f0       	brcs	.+6      	; 0x5788 <__ultoa_invert+0x7c>
    5782:	49 5d       	subi	r20, 0xD9	; 217
    5784:	31 fd       	sbrc	r19, 1
    5786:	40 52       	subi	r20, 0x20	; 32
    5788:	41 93       	st	Z+, r20
    578a:	02 d0       	rcall	.+4      	; 0x5790 <__ultoa_invert+0x84>
    578c:	a9 f7       	brne	.-22     	; 0x5778 <__ultoa_invert+0x6c>
    578e:	ea cf       	rjmp	.-44     	; 0x5764 <__ultoa_invert+0x58>
    5790:	b4 e0       	ldi	r27, 0x04	; 4
    5792:	a6 95       	lsr	r26
    5794:	97 95       	ror	r25
    5796:	87 95       	ror	r24
    5798:	77 95       	ror	r23
    579a:	67 95       	ror	r22
    579c:	ba 95       	dec	r27
    579e:	c9 f7       	brne	.-14     	; 0x5792 <__ultoa_invert+0x86>
    57a0:	00 97       	sbiw	r24, 0x00	; 0
    57a2:	61 05       	cpc	r22, r1
    57a4:	71 05       	cpc	r23, r1
    57a6:	08 95       	ret
    57a8:	9b 01       	movw	r18, r22
    57aa:	ac 01       	movw	r20, r24
    57ac:	0a 2e       	mov	r0, r26
    57ae:	06 94       	lsr	r0
    57b0:	57 95       	ror	r21
    57b2:	47 95       	ror	r20
    57b4:	37 95       	ror	r19
    57b6:	27 95       	ror	r18
    57b8:	ba 95       	dec	r27
    57ba:	c9 f7       	brne	.-14     	; 0x57ae <__ultoa_invert+0xa2>
    57bc:	62 0f       	add	r22, r18
    57be:	73 1f       	adc	r23, r19
    57c0:	84 1f       	adc	r24, r20
    57c2:	95 1f       	adc	r25, r21
    57c4:	a0 1d       	adc	r26, r0
    57c6:	08 95       	ret

000057c8 <_exit>:
    57c8:	f8 94       	cli

000057ca <__stop_program>:
    57ca:	ff cf       	rjmp	.-2      	; 0x57ca <__stop_program>
