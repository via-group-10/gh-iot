
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800200  00005198  0000522c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b26  0080035a  0080035a  00005386  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000868  00000000  00000000  00005424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b06f  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000311f  00000000  00000000  00010cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a08  00000000  00000000  00013e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001db0  00000000  00000000  00019824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036fc  00000000  00000000  0001b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009b8d  00000000  00000000  0001ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  0002885d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c2       	rjmp	.+1298   	; 0x514 <__ctors_end>
       2:	00 00       	nop
       4:	a8 c2       	rjmp	.+1360   	; 0x556 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c2       	rjmp	.+1356   	; 0x556 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c2       	rjmp	.+1352   	; 0x556 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c2       	rjmp	.+1348   	; 0x556 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c2       	rjmp	.+1344   	; 0x556 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c2       	rjmp	.+1340   	; 0x556 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9c c2       	rjmp	.+1336   	; 0x556 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9a c2       	rjmp	.+1332   	; 0x556 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c2       	rjmp	.+1328   	; 0x556 <__bad_interrupt>
      26:	00 00       	nop
      28:	96 c2       	rjmp	.+1324   	; 0x556 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	94 c2       	rjmp	.+1320   	; 0x556 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_12>
      34:	90 c2       	rjmp	.+1312   	; 0x556 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c2       	rjmp	.+1308   	; 0x556 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8c c2       	rjmp	.+1304   	; 0x556 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8a c2       	rjmp	.+1300   	; 0x556 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c2       	rjmp	.+1296   	; 0x556 <__bad_interrupt>
      46:	00 00       	nop
      48:	86 c2       	rjmp	.+1292   	; 0x556 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c2       	rjmp	.+1288   	; 0x556 <__bad_interrupt>
      4e:	00 00       	nop
      50:	82 c2       	rjmp	.+1284   	; 0x556 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__vector_21>
      58:	7e c2       	rjmp	.+1276   	; 0x556 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7c c2       	rjmp	.+1272   	; 0x556 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__vector_24>
      64:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__vector_25>
      68:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__vector_26>
      6c:	74 c2       	rjmp	.+1256   	; 0x556 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c2       	rjmp	.+1252   	; 0x556 <__bad_interrupt>
      72:	00 00       	nop
      74:	70 c2       	rjmp	.+1248   	; 0x556 <__bad_interrupt>
      76:	00 00       	nop
      78:	6e c2       	rjmp	.+1244   	; 0x556 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6c c2       	rjmp	.+1240   	; 0x556 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6a c2       	rjmp	.+1236   	; 0x556 <__bad_interrupt>
      82:	00 00       	nop
      84:	68 c2       	rjmp	.+1232   	; 0x556 <__bad_interrupt>
      86:	00 00       	nop
      88:	66 c2       	rjmp	.+1228   	; 0x556 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	64 c2       	rjmp	.+1224   	; 0x556 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__vector_36>
      94:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <__vector_37>
      98:	5e c2       	rjmp	.+1212   	; 0x556 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 85 21 	jmp	0x430a	; 0x430a <__vector_39>
      a0:	5a c2       	rjmp	.+1204   	; 0x556 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	58 c2       	rjmp	.+1200   	; 0x556 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	56 c2       	rjmp	.+1196   	; 0x556 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	54 c2       	rjmp	.+1192   	; 0x556 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	52 c2       	rjmp	.+1188   	; 0x556 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	50 c2       	rjmp	.+1184   	; 0x556 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4e c2       	rjmp	.+1180   	; 0x556 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4c c2       	rjmp	.+1176   	; 0x556 <__bad_interrupt>
      be:	00 00       	nop
      c0:	4a c2       	rjmp	.+1172   	; 0x556 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	48 c2       	rjmp	.+1168   	; 0x556 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	46 c2       	rjmp	.+1164   	; 0x556 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__vector_51>
      d0:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__vector_52>
      d4:	40 c2       	rjmp	.+1152   	; 0x556 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__vector_54>
      dc:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__vector_55>
      e0:	3a c2       	rjmp	.+1140   	; 0x556 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	00 02       	muls	r16, r16
      e6:	00 02       	muls	r16, r16
      e8:	00 02       	muls	r16, r16
      ea:	3a 02       	muls	r19, r26
      ec:	42 02       	muls	r20, r18
      ee:	58 02       	muls	r21, r24
      f0:	00 02       	muls	r16, r16
      f2:	00 02       	muls	r16, r16
      f4:	3a 02       	muls	r19, r26
      f6:	42 02       	muls	r20, r18
      f8:	a7 21       	and	r26, r7
      fa:	17 22       	and	r1, r23
      fc:	17 22       	and	r1, r23
      fe:	17 22       	and	r1, r23
     100:	17 22       	and	r1, r23
     102:	17 22       	and	r1, r23
     104:	17 22       	and	r1, r23
     106:	17 22       	and	r1, r23
     108:	a7 21       	and	r26, r7
     10a:	17 22       	and	r1, r23
     10c:	17 22       	and	r1, r23
     10e:	17 22       	and	r1, r23
     110:	17 22       	and	r1, r23
     112:	17 22       	and	r1, r23
     114:	17 22       	and	r1, r23
     116:	17 22       	and	r1, r23
     118:	a9 21       	and	r26, r9
     11a:	17 22       	and	r1, r23
     11c:	17 22       	and	r1, r23
     11e:	17 22       	and	r1, r23
     120:	17 22       	and	r1, r23
     122:	17 22       	and	r1, r23
     124:	17 22       	and	r1, r23
     126:	17 22       	and	r1, r23
     128:	17 22       	and	r1, r23
     12a:	17 22       	and	r1, r23
     12c:	17 22       	and	r1, r23
     12e:	17 22       	and	r1, r23
     130:	17 22       	and	r1, r23
     132:	17 22       	and	r1, r23
     134:	17 22       	and	r1, r23
     136:	17 22       	and	r1, r23
     138:	a9 21       	and	r26, r9
     13a:	17 22       	and	r1, r23
     13c:	17 22       	and	r1, r23
     13e:	17 22       	and	r1, r23
     140:	17 22       	and	r1, r23
     142:	17 22       	and	r1, r23
     144:	17 22       	and	r1, r23
     146:	17 22       	and	r1, r23
     148:	17 22       	and	r1, r23
     14a:	17 22       	and	r1, r23
     14c:	17 22       	and	r1, r23
     14e:	17 22       	and	r1, r23
     150:	17 22       	and	r1, r23
     152:	17 22       	and	r1, r23
     154:	17 22       	and	r1, r23
     156:	17 22       	and	r1, r23
     158:	13 22       	and	r1, r19
     15a:	17 22       	and	r1, r23
     15c:	17 22       	and	r1, r23
     15e:	17 22       	and	r1, r23
     160:	17 22       	and	r1, r23
     162:	17 22       	and	r1, r23
     164:	17 22       	and	r1, r23
     166:	17 22       	and	r1, r23
     168:	de 21       	and	r29, r14
     16a:	17 22       	and	r1, r23
     16c:	17 22       	and	r1, r23
     16e:	17 22       	and	r1, r23
     170:	17 22       	and	r1, r23
     172:	17 22       	and	r1, r23
     174:	17 22       	and	r1, r23
     176:	17 22       	and	r1, r23
     178:	17 22       	and	r1, r23
     17a:	17 22       	and	r1, r23
     17c:	17 22       	and	r1, r23
     17e:	17 22       	and	r1, r23
     180:	17 22       	and	r1, r23
     182:	17 22       	and	r1, r23
     184:	17 22       	and	r1, r23
     186:	17 22       	and	r1, r23
     188:	d2 21       	and	r29, r2
     18a:	17 22       	and	r1, r23
     18c:	17 22       	and	r1, r23
     18e:	17 22       	and	r1, r23
     190:	17 22       	and	r1, r23
     192:	17 22       	and	r1, r23
     194:	17 22       	and	r1, r23
     196:	17 22       	and	r1, r23
     198:	f6 21       	and	r31, r6
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <carbonDioxideSensor_getValue+0x36>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     21c:	03 e5       	ldi	r16, 0x53	; 83
     21e:	1d e0       	ldi	r17, 0x0D	; 13
     220:	0f 2e       	mov	r0, r31
     222:	f3 e8       	ldi	r31, 0x83	; 131
     224:	ef 2e       	mov	r14, r31
     226:	fd e0       	ldi	r31, 0x0D	; 13
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	80 91 52 0d 	lds	r24, 0x0D52	; 0x800d52 <uxDeletedTasksWaitingCleanUp>
     230:	88 23       	and	r24, r24
     232:	11 f1       	breq	.+68     	; 0x278 <prvIdleTask+0x5c>
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	0f 92       	push	r0
     23a:	d8 01       	movw	r26, r16
     23c:	17 96       	adiw	r26, 0x07	; 7
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	c0 85       	ldd	r28, Z+8	; 0x08
     246:	d1 85       	ldd	r29, Z+9	; 0x09
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	95 d7       	rcall	.+3882   	; 0x1178 <uxListRemove>
     24e:	80 91 46 0d 	lds	r24, 0x0D46	; 0x800d46 <uxCurrentNumberOfTasks>
     252:	81 50       	subi	r24, 0x01	; 1
     254:	80 93 46 0d 	sts	0x0D46, r24	; 0x800d46 <uxCurrentNumberOfTasks>
     258:	80 91 52 0d 	lds	r24, 0x0D52	; 0x800d52 <uxDeletedTasksWaitingCleanUp>
     25c:	81 50       	subi	r24, 0x01	; 1
     25e:	80 93 52 0d 	sts	0x0D52, r24	; 0x800d52 <uxDeletedTasksWaitingCleanUp>
     262:	0f 90       	pop	r0
     264:	0f be       	out	0x3f, r0	; 63
     266:	8b 8d       	ldd	r24, Y+27	; 0x1b
     268:	9c 8d       	ldd	r25, Y+28	; 0x1c
     26a:	fb d6       	rcall	.+3574   	; 0x1062 <vPortFree>
     26c:	ce 01       	movw	r24, r28
     26e:	f9 d6       	rcall	.+3570   	; 0x1062 <vPortFree>
     270:	80 91 52 0d 	lds	r24, 0x0D52	; 0x800d52 <uxDeletedTasksWaitingCleanUp>
     274:	81 11       	cpse	r24, r1
     276:	de cf       	rjmp	.-68     	; 0x234 <prvIdleTask+0x18>
     278:	f7 01       	movw	r30, r14
     27a:	80 81       	ld	r24, Z
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	08 f0       	brcs	.+2      	; 0x282 <prvIdleTask+0x66>
     280:	f5 d7       	rcall	.+4074   	; 0x126c <vPortYield>
     282:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <vApplicationIdleHook>
     286:	d2 cf       	rjmp	.-92     	; 0x22c <prvIdleTask+0x10>

00000288 <prvTimerTask>:
     288:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	60 97       	sbiw	r28, 0x10	; 16
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	ce 01       	movw	r24, r28
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	9a 87       	std	Y+10, r25	; 0x0a
     2a2:	89 87       	std	Y+9, r24	; 0x09
     2a4:	81 2c       	mov	r8, r1
     2a6:	91 2c       	mov	r9, r1
     2a8:	a1 2c       	mov	r10, r1
     2aa:	b1 2c       	mov	r11, r1
     2ac:	69 84       	ldd	r6, Y+9	; 0x09
     2ae:	7a 84       	ldd	r7, Y+10	; 0x0a
     2b0:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <pxCurrentTimerList>
     2b4:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <pxCurrentTimerList+0x1>
     2b8:	80 81       	ld	r24, Z
     2ba:	88 23       	and	r24, r24
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <prvTimerTask+0x38>
     2be:	10 c1       	rjmp	.+544    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     2c0:	07 80       	ldd	r0, Z+7	; 0x07
     2c2:	f0 85       	ldd	r31, Z+8	; 0x08
     2c4:	e0 2d       	mov	r30, r0
     2c6:	20 80       	ld	r2, Z
     2c8:	31 80       	ldd	r3, Z+1	; 0x01
     2ca:	42 80       	ldd	r4, Z+2	; 0x02
     2cc:	53 80       	ldd	r5, Z+3	; 0x03
     2ce:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <vTaskSuspendAll>
     2d2:	ce 01       	movw	r24, r28
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <prvSampleTimeNow>
     2da:	6b 87       	std	Y+11, r22	; 0x0b
     2dc:	7c 87       	std	Y+12, r23	; 0x0c
     2de:	8d 87       	std	Y+13, r24	; 0x0d
     2e0:	9e 87       	std	Y+14, r25	; 0x0e
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	81 11       	cpse	r24, r1
     2e6:	65 c0       	rjmp	.+202    	; 0x3b2 <prvTimerTask+0x12a>
     2e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ec:	ad 85       	ldd	r26, Y+13	; 0x0d
     2ee:	be 85       	ldd	r27, Y+14	; 0x0e
     2f0:	82 15       	cp	r24, r2
     2f2:	93 05       	cpc	r25, r3
     2f4:	a4 05       	cpc	r26, r4
     2f6:	b5 05       	cpc	r27, r5
     2f8:	08 f4       	brcc	.+2      	; 0x2fc <prvTimerTask+0x74>
     2fa:	44 c0       	rjmp	.+136    	; 0x384 <prvTimerTask+0xfc>
     2fc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>
     300:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <pxCurrentTimerList>
     304:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <pxCurrentTimerList+0x1>
     308:	07 80       	ldd	r0, Z+7	; 0x07
     30a:	f0 85       	ldd	r31, Z+8	; 0x08
     30c:	e0 2d       	mov	r30, r0
     30e:	a0 85       	ldd	r26, Z+8	; 0x08
     310:	b1 85       	ldd	r27, Z+9	; 0x09
     312:	b8 8b       	std	Y+16, r27	; 0x10
     314:	af 87       	std	Y+15, r26	; 0x0f
     316:	cd 01       	movw	r24, r26
     318:	02 96       	adiw	r24, 0x02	; 2
     31a:	2e d7       	rcall	.+3676   	; 0x1178 <uxListRemove>
     31c:	ef 85       	ldd	r30, Y+15	; 0x0f
     31e:	f8 89       	ldd	r31, Y+16	; 0x10
     320:	86 89       	ldd	r24, Z+22	; 0x16
     322:	82 ff       	sbrs	r24, 2
     324:	21 c0       	rjmp	.+66     	; 0x368 <prvTimerTask+0xe0>
     326:	46 85       	ldd	r20, Z+14	; 0x0e
     328:	57 85       	ldd	r21, Z+15	; 0x0f
     32a:	60 89       	ldd	r22, Z+16	; 0x10
     32c:	71 89       	ldd	r23, Z+17	; 0x11
     32e:	42 0d       	add	r20, r2
     330:	53 1d       	adc	r21, r3
     332:	64 1d       	adc	r22, r4
     334:	75 1d       	adc	r23, r5
     336:	72 01       	movw	r14, r4
     338:	61 01       	movw	r12, r2
     33a:	0b 85       	ldd	r16, Y+11	; 0x0b
     33c:	1c 85       	ldd	r17, Y+12	; 0x0c
     33e:	2d 85       	ldd	r18, Y+13	; 0x0d
     340:	3e 85       	ldd	r19, Y+14	; 0x0e
     342:	cf 01       	movw	r24, r30
     344:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <prvInsertTimerInActiveList>
     348:	88 23       	and	r24, r24
     34a:	99 f0       	breq	.+38     	; 0x372 <prvTimerTask+0xea>
     34c:	c8 2c       	mov	r12, r8
     34e:	d9 2c       	mov	r13, r9
     350:	ea 2c       	mov	r14, r10
     352:	fb 2c       	mov	r15, r11
     354:	00 e0       	ldi	r16, 0x00	; 0
     356:	10 e0       	ldi	r17, 0x00	; 0
     358:	a2 01       	movw	r20, r4
     35a:	91 01       	movw	r18, r2
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	8f 85       	ldd	r24, Y+15	; 0x0f
     360:	98 89       	ldd	r25, Y+16	; 0x10
     362:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <xTimerGenericCommand>
     366:	05 c0       	rjmp	.+10     	; 0x372 <prvTimerTask+0xea>
     368:	8e 7f       	andi	r24, 0xFE	; 254
     36a:	af 85       	ldd	r26, Y+15	; 0x0f
     36c:	b8 89       	ldd	r27, Y+16	; 0x10
     36e:	56 96       	adiw	r26, 0x16	; 22
     370:	8c 93       	st	X, r24
     372:	af 85       	ldd	r26, Y+15	; 0x0f
     374:	b8 89       	ldd	r27, Y+16	; 0x10
     376:	54 96       	adiw	r26, 0x14	; 20
     378:	ed 91       	ld	r30, X+
     37a:	fc 91       	ld	r31, X
     37c:	55 97       	sbiw	r26, 0x15	; 21
     37e:	cd 01       	movw	r24, r26
     380:	19 95       	eicall
     382:	9f c0       	rjmp	.+318    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	b2 01       	movw	r22, r4
     388:	a1 01       	movw	r20, r2
     38a:	8b 85       	ldd	r24, Y+11	; 0x0b
     38c:	9c 85       	ldd	r25, Y+12	; 0x0c
     38e:	ad 85       	ldd	r26, Y+13	; 0x0d
     390:	be 85       	ldd	r27, Y+14	; 0x0e
     392:	48 1b       	sub	r20, r24
     394:	59 0b       	sbc	r21, r25
     396:	6a 0b       	sbc	r22, r26
     398:	7b 0b       	sbc	r23, r27
     39a:	80 91 f9 0d 	lds	r24, 0x0DF9	; 0x800df9 <xTimerQueue>
     39e:	90 91 fa 0d 	lds	r25, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
     3a2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <vQueueWaitForMessageRestricted>
     3a6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>
     3aa:	81 11       	cpse	r24, r1
     3ac:	8a c0       	rjmp	.+276    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     3ae:	5e d7       	rcall	.+3772   	; 0x126c <vPortYield>
     3b0:	88 c0       	rjmp	.+272    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     3b2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>
     3b6:	85 c0       	rjmp	.+266    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	88 23       	and	r24, r24
     3bc:	0c f4       	brge	.+2      	; 0x3c0 <prvTimerTask+0x138>
     3be:	81 c0       	rjmp	.+258    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     3c0:	4e 80       	ldd	r4, Y+6	; 0x06
     3c2:	5f 80       	ldd	r5, Y+7	; 0x07
     3c4:	d2 01       	movw	r26, r4
     3c6:	1c 96       	adiw	r26, 0x0c	; 12
     3c8:	8d 91       	ld	r24, X+
     3ca:	9c 91       	ld	r25, X
     3cc:	1d 97       	sbiw	r26, 0x0d	; 13
     3ce:	89 2b       	or	r24, r25
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <prvTimerTask+0x150>
     3d2:	c2 01       	movw	r24, r4
     3d4:	02 96       	adiw	r24, 0x02	; 2
     3d6:	d0 d6       	rcall	.+3488   	; 0x1178 <uxListRemove>
     3d8:	ce 01       	movw	r24, r28
     3da:	08 96       	adiw	r24, 0x08	; 8
     3dc:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <prvSampleTimeNow>
     3e0:	8b 01       	movw	r16, r22
     3e2:	9c 01       	movw	r18, r24
     3e4:	e9 81       	ldd	r30, Y+1	; 0x01
     3e6:	0e 2e       	mov	r0, r30
     3e8:	00 0c       	add	r0, r0
     3ea:	ff 0b       	sbc	r31, r31
     3ec:	ea 30       	cpi	r30, 0x0A	; 10
     3ee:	f1 05       	cpc	r31, r1
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <prvTimerTask+0x16c>
     3f2:	67 c0       	rjmp	.+206    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     3f4:	88 27       	eor	r24, r24
     3f6:	ee 58       	subi	r30, 0x8E	; 142
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	8f 4f       	sbci	r24, 0xFF	; 255
     3fc:	0c 94 56 24 	jmp	0x48ac	; 0x48ac <__tablejump2__>
     400:	f2 01       	movw	r30, r4
     402:	86 89       	ldd	r24, Z+22	; 0x16
     404:	81 60       	ori	r24, 0x01	; 1
     406:	86 8b       	std	Z+22, r24	; 0x16
     408:	ca 80       	ldd	r12, Y+2	; 0x02
     40a:	db 80       	ldd	r13, Y+3	; 0x03
     40c:	ec 80       	ldd	r14, Y+4	; 0x04
     40e:	fd 80       	ldd	r15, Y+5	; 0x05
     410:	46 85       	ldd	r20, Z+14	; 0x0e
     412:	57 85       	ldd	r21, Z+15	; 0x0f
     414:	60 89       	ldd	r22, Z+16	; 0x10
     416:	71 89       	ldd	r23, Z+17	; 0x11
     418:	4c 0d       	add	r20, r12
     41a:	5d 1d       	adc	r21, r13
     41c:	6e 1d       	adc	r22, r14
     41e:	7f 1d       	adc	r23, r15
     420:	c2 01       	movw	r24, r4
     422:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <prvInsertTimerInActiveList>
     426:	88 23       	and	r24, r24
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	4b c0       	rjmp	.+150    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     42c:	d2 01       	movw	r26, r4
     42e:	54 96       	adiw	r26, 0x14	; 20
     430:	ed 91       	ld	r30, X+
     432:	fc 91       	ld	r31, X
     434:	55 97       	sbiw	r26, 0x15	; 21
     436:	c2 01       	movw	r24, r4
     438:	19 95       	eicall
     43a:	f2 01       	movw	r30, r4
     43c:	86 89       	ldd	r24, Z+22	; 0x16
     43e:	82 ff       	sbrs	r24, 2
     440:	40 c0       	rjmp	.+128    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     442:	4a 81       	ldd	r20, Y+2	; 0x02
     444:	5b 81       	ldd	r21, Y+3	; 0x03
     446:	6c 81       	ldd	r22, Y+4	; 0x04
     448:	7d 81       	ldd	r23, Y+5	; 0x05
     44a:	86 85       	ldd	r24, Z+14	; 0x0e
     44c:	97 85       	ldd	r25, Z+15	; 0x0f
     44e:	a0 89       	ldd	r26, Z+16	; 0x10
     450:	b1 89       	ldd	r27, Z+17	; 0x11
     452:	9a 01       	movw	r18, r20
     454:	ab 01       	movw	r20, r22
     456:	28 0f       	add	r18, r24
     458:	39 1f       	adc	r19, r25
     45a:	4a 1f       	adc	r20, r26
     45c:	5b 1f       	adc	r21, r27
     45e:	c8 2c       	mov	r12, r8
     460:	d9 2c       	mov	r13, r9
     462:	ea 2c       	mov	r14, r10
     464:	fb 2c       	mov	r15, r11
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	c2 01       	movw	r24, r4
     46e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <xTimerGenericCommand>
     472:	27 c0       	rjmp	.+78     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     474:	d2 01       	movw	r26, r4
     476:	56 96       	adiw	r26, 0x16	; 22
     478:	8c 91       	ld	r24, X
     47a:	56 97       	sbiw	r26, 0x16	; 22
     47c:	8e 7f       	andi	r24, 0xFE	; 254
     47e:	56 96       	adiw	r26, 0x16	; 22
     480:	8c 93       	st	X, r24
     482:	1f c0       	rjmp	.+62     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     484:	f2 01       	movw	r30, r4
     486:	86 89       	ldd	r24, Z+22	; 0x16
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	86 8b       	std	Z+22, r24	; 0x16
     48c:	4a 81       	ldd	r20, Y+2	; 0x02
     48e:	5b 81       	ldd	r21, Y+3	; 0x03
     490:	6c 81       	ldd	r22, Y+4	; 0x04
     492:	7d 81       	ldd	r23, Y+5	; 0x05
     494:	46 87       	std	Z+14, r20	; 0x0e
     496:	57 87       	std	Z+15, r21	; 0x0f
     498:	60 8b       	std	Z+16, r22	; 0x10
     49a:	71 8b       	std	Z+17, r23	; 0x11
     49c:	40 0f       	add	r20, r16
     49e:	51 1f       	adc	r21, r17
     4a0:	62 1f       	adc	r22, r18
     4a2:	73 1f       	adc	r23, r19
     4a4:	68 01       	movw	r12, r16
     4a6:	79 01       	movw	r14, r18
     4a8:	c2 01       	movw	r24, r4
     4aa:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <prvInsertTimerInActiveList>
     4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4b0:	f2 01       	movw	r30, r4
     4b2:	86 89       	ldd	r24, Z+22	; 0x16
     4b4:	81 fd       	sbrc	r24, 1
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b8:	c2 01       	movw	r24, r4
     4ba:	d3 d5       	rcall	.+2982   	; 0x1062 <vPortFree>
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4be:	8e 7f       	andi	r24, 0xFE	; 254
     4c0:	86 8b       	std	Z+22, r24	; 0x16
     4c2:	28 2d       	mov	r18, r8
     4c4:	39 2d       	mov	r19, r9
     4c6:	4a 2d       	mov	r20, r10
     4c8:	5b 2d       	mov	r21, r11
     4ca:	66 2d       	mov	r22, r6
     4cc:	77 2d       	mov	r23, r7
     4ce:	80 91 f9 0d 	lds	r24, 0x0DF9	; 0x800df9 <xTimerQueue>
     4d2:	90 91 fa 0d 	lds	r25, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
     4d6:	0e 94 06 0c 	call	0x180c	; 0x180c <xQueueReceive>
     4da:	81 11       	cpse	r24, r1
     4dc:	6d cf       	rjmp	.-294    	; 0x3b8 <prvTimerTask+0x130>
     4de:	e8 ce       	rjmp	.-560    	; 0x2b0 <prvTimerTask+0x28>
     4e0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <vTaskSuspendAll>
     4e4:	ce 01       	movw	r24, r28
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <prvSampleTimeNow>
     4ec:	6b 87       	std	Y+11, r22	; 0x0b
     4ee:	7c 87       	std	Y+12, r23	; 0x0c
     4f0:	8d 87       	std	Y+13, r24	; 0x0d
     4f2:	9e 87       	std	Y+14, r25	; 0x0e
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	81 11       	cpse	r24, r1
     4f8:	5c cf       	rjmp	.-328    	; 0x3b2 <prvTimerTask+0x12a>
     4fa:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <pxOverflowTimerList>
     4fe:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <pxOverflowTimerList+0x1>
     502:	80 81       	ld	r24, Z
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	81 11       	cpse	r24, r1
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	28 2c       	mov	r2, r8
     50c:	39 2c       	mov	r3, r9
     50e:	4a 2c       	mov	r4, r10
     510:	5b 2c       	mov	r5, r11
     512:	39 cf       	rjmp	.-398    	; 0x386 <prvTimerTask+0xfe>

00000514 <__ctors_end>:
     514:	11 24       	eor	r1, r1
     516:	1f be       	out	0x3f, r1	; 63
     518:	cf ef       	ldi	r28, 0xFF	; 255
     51a:	d1 e2       	ldi	r29, 0x21	; 33
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	0c bf       	out	0x3c, r16	; 60

00000524 <__do_copy_data>:
     524:	13 e0       	ldi	r17, 0x03	; 3
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b2 e0       	ldi	r27, 0x02	; 2
     52a:	e8 e9       	ldi	r30, 0x98	; 152
     52c:	f1 e5       	ldi	r31, 0x51	; 81
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	0b bf       	out	0x3b, r16	; 59
     532:	02 c0       	rjmp	.+4      	; 0x538 <__do_copy_data+0x14>
     534:	07 90       	elpm	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	aa 35       	cpi	r26, 0x5A	; 90
     53a:	b1 07       	cpc	r27, r17
     53c:	d9 f7       	brne	.-10     	; 0x534 <__do_copy_data+0x10>

0000053e <__do_clear_bss>:
     53e:	2e e0       	ldi	r18, 0x0E	; 14
     540:	aa e5       	ldi	r26, 0x5A	; 90
     542:	b3 e0       	ldi	r27, 0x03	; 3
     544:	01 c0       	rjmp	.+2      	; 0x548 <.do_clear_bss_start>

00000546 <.do_clear_bss_loop>:
     546:	1d 92       	st	X+, r1

00000548 <.do_clear_bss_start>:
     548:	a0 38       	cpi	r26, 0x80	; 128
     54a:	b2 07       	cpc	r27, r18
     54c:	e1 f7       	brne	.-8      	; 0x546 <.do_clear_bss_loop>
     54e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <main>
     552:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <_exit>

00000556 <__bad_interrupt>:
     556:	54 cd       	rjmp	.-1368   	; 0x0 <__vectors>

00000558 <sevenSegmentDisplayController_task>:
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
		myTime_t nowTime = myTime_getNowTime();
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
		display_7seg_display(time/100,2);
     558:	0f 2e       	mov	r0, r31
     55a:	f4 e6       	ldi	r31, 0x64	; 100
     55c:	8f 2e       	mov	r8, r31
     55e:	f0 2d       	mov	r31, r0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     560:	0f 2e       	mov	r0, r31
     562:	f8 ee       	ldi	r31, 0xE8	; 232
     564:	cf 2e       	mov	r12, r31
     566:	f3 e0       	ldi	r31, 0x03	; 3
     568:	df 2e       	mov	r13, r31
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
     56e:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA7);
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     570:	68 94       	set
     572:	99 24       	eor	r9, r9
     574:	96 f8       	bld	r9, 6
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA6);
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     576:	68 94       	set
     578:	aa 24       	eor	r10, r10
     57a:	a5 f8       	bld	r10, 5
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA5);
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     57c:	68 94       	set
     57e:	bb 24       	eor	r11, r11
     580:	b4 f8       	bld	r11, 4
void sevenSegmentDisplayController_task(void *pvParameters)
{
	while(1)
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
     582:	82 b1       	in	r24, 0x02	; 2
     584:	80 58       	subi	r24, 0x80	; 128
     586:	82 b9       	out	0x02, r24	; 2
		myTime_t nowTime = myTime_getNowTime();
     588:	39 d4       	rcall	.+2162   	; 0xdfc <myTime_getNowTime>
     58a:	ec 01       	movw	r28, r24
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
     58c:	49 d4       	rcall	.+2194   	; 0xe20 <myTime_getHour>
     58e:	8c 01       	movw	r16, r24
     590:	ce 01       	movw	r24, r28
     592:	4a d4       	rcall	.+2196   	; 0xe28 <myTime_getMin>
     594:	80 9e       	mul	r8, r16
		display_7seg_display(time/100,2);
     596:	b0 01       	movw	r22, r0
     598:	81 9e       	mul	r8, r17
     59a:	70 0d       	add	r23, r0
     59c:	11 24       	eor	r1, r1
     59e:	86 0f       	add	r24, r22
     5a0:	97 1f       	adc	r25, r23
     5a2:	bc 01       	movw	r22, r24
     5a4:	99 0f       	add	r25, r25
     5a6:	88 0b       	sbc	r24, r24
     5a8:	99 0b       	sbc	r25, r25
     5aa:	0e 94 0c 18 	call	0x3018	; 0x3018 <__floatsisf>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	48 ec       	ldi	r20, 0xC8	; 200
     5b4:	52 e4       	ldi	r21, 0x42	; 66
     5b6:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__divsf3>
     5ba:	42 e0       	ldi	r20, 0x02	; 2
     5bc:	0e 94 21 19 	call	0x3242	; 0x3242 <display_7seg_display>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	4a e7       	ldi	r20, 0x7A	; 122
     5c6:	54 e4       	ldi	r21, 0x44	; 68
     5c8:	60 91 68 0e 	lds	r22, 0x0E68	; 0x800e68 <updateTime>
     5cc:	70 91 69 0e 	lds	r23, 0x0E69	; 0x800e69 <updateTime+0x1>
     5d0:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <updateTime+0x2>
     5d4:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <updateTime+0x3>
     5d8:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     5dc:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__fixunssfsi>
     5e0:	9b 01       	movw	r18, r22
     5e2:	ac 01       	movw	r20, r24
     5e4:	ae e3       	ldi	r26, 0x3E	; 62
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__muluhisi3>
     5ec:	a7 01       	movw	r20, r14
     5ee:	96 01       	movw	r18, r12
     5f0:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodsi4>
     5f4:	ca 01       	movw	r24, r20
     5f6:	b9 01       	movw	r22, r18
     5f8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
     5fc:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
     5fe:	80 58       	subi	r24, 0x80	; 128
     600:	82 b9       	out	0x02, r24	; 2
     602:	82 b1       	in	r24, 0x02	; 2
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     604:	89 25       	eor	r24, r9
		temperatureSensor_t temperatureSensor = sensorModelManager_getTemperatureSensor();
     606:	82 b9       	out	0x02, r24	; 2
     608:	4f d3       	rcall	.+1694   	; 0xca8 <sensorModelManager_getTemperatureSensor>
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
     60a:	e7 d2       	rcall	.+1486   	; 0xbda <temperatureSensor_getValue>
     60c:	42 e0       	ldi	r20, 0x02	; 2
     60e:	0e 94 21 19 	call	0x3242	; 0x3242 <display_7seg_display>
     612:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	4a e7       	ldi	r20, 0x7A	; 122
     618:	54 e4       	ldi	r21, 0x44	; 68
     61a:	60 91 68 0e 	lds	r22, 0x0E68	; 0x800e68 <updateTime>
     61e:	70 91 69 0e 	lds	r23, 0x0E69	; 0x800e69 <updateTime+0x1>
     622:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <updateTime+0x2>
     626:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <updateTime+0x3>
     62a:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     62e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__fixunssfsi>
     632:	9b 01       	movw	r18, r22
     634:	ac 01       	movw	r20, r24
     636:	ae e3       	ldi	r26, 0x3E	; 62
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__muluhisi3>
     63e:	a7 01       	movw	r20, r14
     640:	96 01       	movw	r18, r12
     642:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodsi4>
     646:	ca 01       	movw	r24, r20
     648:	b9 01       	movw	r22, r18
     64a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
     64e:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA6);
     650:	89 25       	eor	r24, r9
     652:	82 b9       	out	0x02, r24	; 2
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     654:	82 b1       	in	r24, 0x02	; 2
     656:	8a 25       	eor	r24, r10
     658:	82 b9       	out	0x02, r24	; 2
		humiditySensor_t humiditySensor = sensorModelManager_getHumiditySensor();
     65a:	2b d3       	rcall	.+1622   	; 0xcb2 <sensorModelManager_getHumiditySensor>
     65c:	19 d2       	rcall	.+1074   	; 0xa90 <humiditySensor_getValue>
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
     65e:	42 e0       	ldi	r20, 0x02	; 2
     660:	0e 94 21 19 	call	0x3242	; 0x3242 <display_7seg_display>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     668:	4a e7       	ldi	r20, 0x7A	; 122
     66a:	54 e4       	ldi	r21, 0x44	; 68
     66c:	60 91 68 0e 	lds	r22, 0x0E68	; 0x800e68 <updateTime>
     670:	70 91 69 0e 	lds	r23, 0x0E69	; 0x800e69 <updateTime+0x1>
     674:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <updateTime+0x2>
     678:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <updateTime+0x3>
     67c:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     680:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__fixunssfsi>
     684:	9b 01       	movw	r18, r22
     686:	ac 01       	movw	r20, r24
     688:	ae e3       	ldi	r26, 0x3E	; 62
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__muluhisi3>
     690:	a7 01       	movw	r20, r14
     692:	96 01       	movw	r18, r12
     694:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodsi4>
     698:	ca 01       	movw	r24, r20
     69a:	b9 01       	movw	r22, r18
     69c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
     6a0:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA5);
     6a2:	8a 25       	eor	r24, r10
     6a4:	82 b9       	out	0x02, r24	; 2
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     6a6:	82 b1       	in	r24, 0x02	; 2
     6a8:	8b 25       	eor	r24, r11
     6aa:	82 b9       	out	0x02, r24	; 2
		carbonDioxideSensor_t carbonDioxideSensor = sensorModelManager_getCarbonDioxideSensor();
     6ac:	07 d3       	rcall	.+1550   	; 0xcbc <sensorModelManager_getCarbonDioxideSensor>
     6ae:	98 d1       	rcall	.+816    	; 0x9e0 <carbonDioxideSensor_getValue>
		display_7seg_display(carbonDioxideSensor_getValue(carbonDioxideSensor),2);
     6b0:	42 e0       	ldi	r20, 0x02	; 2
     6b2:	0e 94 21 19 	call	0x3242	; 0x3242 <display_7seg_display>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     6ba:	4a e7       	ldi	r20, 0x7A	; 122
     6bc:	54 e4       	ldi	r21, 0x44	; 68
     6be:	60 91 68 0e 	lds	r22, 0x0E68	; 0x800e68 <updateTime>
     6c2:	70 91 69 0e 	lds	r23, 0x0E69	; 0x800e69 <updateTime+0x1>
     6c6:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <updateTime+0x2>
     6ca:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <updateTime+0x3>
     6ce:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     6d2:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__fixunssfsi>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	ae e3       	ldi	r26, 0x3E	; 62
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__muluhisi3>
     6e2:	a7 01       	movw	r20, r14
     6e4:	96 01       	movw	r18, r12
     6e6:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodsi4>
     6ea:	ca 01       	movw	r24, r20
     6ec:	b9 01       	movw	r22, r18
     6ee:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
     6f2:	82 b1       	in	r24, 0x02	; 2
     6f4:	8b 25       	eor	r24, r11
		PORTA ^= _BV(PA4);
     6f6:	82 b9       	out	0x02, r24	; 2
     6f8:	44 cf       	rjmp	.-376    	; 0x582 <sevenSegmentDisplayController_task+0x2a>

000006fa <sevenSegmentDisplayController_create>:
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
	}
}

void sevenSegmentDisplayController_create(float displayUpdateTime)
{
     6fe:	0f 93       	push	r16
	updateTime = displayUpdateTime;
     700:	60 93 68 0e 	sts	0x0E68, r22	; 0x800e68 <updateTime>
     704:	70 93 69 0e 	sts	0x0E69, r23	; 0x800e69 <updateTime+0x1>
     708:	80 93 6a 0e 	sts	0x0E6A, r24	; 0x800e6a <updateTime+0x2>
     70c:	90 93 6b 0e 	sts	0x0E6B, r25	; 0x800e6b <updateTime+0x3>
	//Init 7-segment Display
	display_7seg_initialise(NULL);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <display_7seg_initialise>
	display_7seg_powerUp();
     718:	0e 94 c7 19 	call	0x338e	; 0x338e <display_7seg_powerUp>
	
	printf("7-segment Display started!!!\n");
     71c:	82 e2       	ldi	r24, 0x22	; 34
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	0e 94 ed 25 	call	0x4bda	; 0x4bda <puts>
	xTaskCreate(sevenSegmentDisplayController_task, "7-segment Display Task", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     724:	e1 2c       	mov	r14, r1
     726:	f1 2c       	mov	r15, r1
     728:	01 e0       	ldi	r16, 0x01	; 1
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 ec       	ldi	r20, 0xC0	; 192
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	6f e3       	ldi	r22, 0x3F	; 63
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	8c ea       	ldi	r24, 0xAC	; 172
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xTaskCreate>
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	08 95       	ret

00000746 <temperatureSensorController_task>:

float temperature = 0.0;
temperatureSensor_t sensor;

void temperatureSensorController_task(void *pvParameters)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	2a 97       	sbiw	r28, 0x0a	; 10
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
			printf("Temperature sensor didn't wakeup!!!");
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(sensor)*500));
		PORTA ^= _BV(PA0);
     75a:	11 e0       	ldi	r17, 0x01	; 1
		temperatureSensor_setValue(sensor,temperature);
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(sensor);
		int b = temperatureSensor_getValue(sensor)*10000-a*10000;
		myTime_t time = temperatureSensor_getUpdateTime(sensor);
		printf("temperature(%d.%d.%d %d:%d:%d):%d.%d",myTime_getYear(time), myTime_getMon(time), myTime_getDay(time), myTime_getHour(time), myTime_getMin(time), myTime_getSec(time),a,b);
     75c:	0f 2e       	mov	r0, r31
     75e:	f0 e1       	ldi	r31, 0x10	; 16
     760:	4f 2e       	mov	r4, r31
     762:	f7 e2       	ldi	r31, 0x27	; 39
     764:	5f 2e       	mov	r5, r31
     766:	f0 2d       	mov	r31, r0
     768:	0f 2e       	mov	r0, r31
     76a:	ff e9       	ldi	r31, 0x9F	; 159
     76c:	6f 2e       	mov	r6, r31
     76e:	f2 e0       	ldi	r31, 0x02	; 2
     770:	7f 2e       	mov	r7, r31
     772:	f0 2d       	mov	r31, r0

void temperatureSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     774:	0e 94 c3 1a 	call	0x3586	; 0x3586 <hih8120_wakeup>
     778:	88 23       	and	r24, r24
     77a:	41 f0       	breq	.+16     	; 0x78c <temperatureSensorController_task+0x46>
		{
			printf("Temperature sensor didn't wakeup!!!");
     77c:	86 e5       	ldi	r24, 0x56	; 86
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	9f 93       	push	r25
     782:	8f 93       	push	r24
     784:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <printf>
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(sensor)*500));
     78c:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <sensor>
     790:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <sensor+0x1>
     794:	fd d1       	rcall	.+1018   	; 0xb90 <temperatureSensor_getReportInterval>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	4a ef       	ldi	r20, 0xFA	; 250
     79c:	53 e4       	ldi	r21, 0x43	; 67
     79e:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     7a2:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__fixunssfsi>
     7a6:	9b 01       	movw	r18, r22
     7a8:	ac 01       	movw	r20, r24
     7aa:	ae e3       	ldi	r26, 0x3E	; 62
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__muluhisi3>
     7b2:	28 ee       	ldi	r18, 0xE8	; 232
     7b4:	33 e0       	ldi	r19, 0x03	; 3
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodsi4>
     7be:	ca 01       	movw	r24, r20
     7c0:	b9 01       	movw	r22, r18
     7c2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
		PORTA ^= _BV(PA0);
     7c6:	82 b1       	in	r24, 0x02	; 2
     7c8:	81 27       	eor	r24, r17
     7ca:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     7cc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <hih8120_measure>
     7d0:	88 23       	and	r24, r24
     7d2:	41 f0       	breq	.+16     	; 0x7e4 <temperatureSensorController_task+0x9e>
		{
			printf("Temperature sensor didn't measure!!!");
     7d4:	8a e7       	ldi	r24, 0x7A	; 122
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <printf>
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(sensor)*500));
     7e4:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <sensor>
     7e8:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <sensor+0x1>
     7ec:	d1 d1       	rcall	.+930    	; 0xb90 <temperatureSensor_getReportInterval>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4a ef       	ldi	r20, 0xFA	; 250
     7f4:	53 e4       	ldi	r21, 0x43	; 67
     7f6:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     7fa:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__fixunssfsi>
     7fe:	9b 01       	movw	r18, r22
     800:	ac 01       	movw	r20, r24
     802:	ae e3       	ldi	r26, 0x3E	; 62
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__muluhisi3>
     80a:	28 ee       	ldi	r18, 0xE8	; 232
     80c:	33 e0       	ldi	r19, 0x03	; 3
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodsi4>
     816:	ca 01       	movw	r24, r20
     818:	b9 01       	movw	r22, r18
     81a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
		PORTA ^= _BV(PA0);
     81e:	82 b1       	in	r24, 0x02	; 2
     820:	81 27       	eor	r24, r17
     822:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     824:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <hih8120_getTemperature>
     828:	ab 01       	movw	r20, r22
     82a:	bc 01       	movw	r22, r24
     82c:	40 93 5a 03 	sts	0x035A, r20	; 0x80035a <__data_end>
     830:	50 93 5b 03 	sts	0x035B, r21	; 0x80035b <__data_end+0x1>
     834:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <__data_end+0x2>
     838:	70 93 5d 03 	sts	0x035D, r23	; 0x80035d <__data_end+0x3>
		temperatureSensor_setValue(sensor,temperature);
     83c:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <sensor>
     840:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <sensor+0x1>
     844:	7d d1       	rcall	.+762    	; 0xb40 <temperatureSensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(sensor);
     846:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <sensor>
     84a:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <sensor+0x1>
     84e:	c5 d1       	rcall	.+906    	; 0xbda <temperatureSensor_getValue>
     850:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__fixsfsi>
     854:	6b 01       	movw	r12, r22
     856:	7c 01       	movw	r14, r24
		int b = temperatureSensor_getValue(sensor)*10000-a*10000;
     858:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <sensor>
     85c:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <sensor+0x1>
     860:	bc d1       	rcall	.+888    	; 0xbda <temperatureSensor_getValue>
     862:	4b 01       	movw	r8, r22
     864:	5c 01       	movw	r10, r24
		myTime_t time = temperatureSensor_getUpdateTime(sensor);
     866:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <sensor>
     86a:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <sensor+0x1>
     86e:	da d1       	rcall	.+948    	; 0xc24 <temperatureSensor_getUpdateTime>
     870:	99 87       	std	Y+9, r25	; 0x09
     872:	88 87       	std	Y+8, r24	; 0x08
		printf("temperature(%d.%d.%d %d:%d:%d):%d.%d",myTime_getYear(time), myTime_getMon(time), myTime_getDay(time), myTime_getHour(time), myTime_getMin(time), myTime_getSec(time),a,b);
     874:	dd d2       	rcall	.+1466   	; 0xe30 <myTime_getSec>
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	88 85       	ldd	r24, Y+8	; 0x08
     87c:	99 85       	ldd	r25, Y+9	; 0x09
     87e:	d4 d2       	rcall	.+1448   	; 0xe28 <myTime_getMin>
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	88 85       	ldd	r24, Y+8	; 0x08
     886:	99 85       	ldd	r25, Y+9	; 0x09
     888:	cb d2       	rcall	.+1430   	; 0xe20 <myTime_getHour>
     88a:	8d 83       	std	Y+5, r24	; 0x05
     88c:	9e 83       	std	Y+6, r25	; 0x06
     88e:	88 85       	ldd	r24, Y+8	; 0x08
     890:	99 85       	ldd	r25, Y+9	; 0x09
     892:	c2 d2       	rcall	.+1412   	; 0xe18 <myTime_getDay>
     894:	8f 83       	std	Y+7, r24	; 0x07
     896:	29 2e       	mov	r2, r25
     898:	88 85       	ldd	r24, Y+8	; 0x08
     89a:	99 85       	ldd	r25, Y+9	; 0x09
     89c:	b9 d2       	rcall	.+1394   	; 0xe10 <myTime_getMon>
     89e:	08 2f       	mov	r16, r24
     8a0:	39 2e       	mov	r3, r25
     8a2:	88 85       	ldd	r24, Y+8	; 0x08
     8a4:	99 85       	ldd	r25, Y+9	; 0x09
     8a6:	b0 d2       	rcall	.+1376   	; 0xe08 <myTime_getYear>
     8a8:	88 87       	std	Y+8, r24	; 0x08
     8aa:	9a 87       	std	Y+10, r25	; 0x0a
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e4       	ldi	r19, 0x40	; 64
     8b0:	4c e1       	ldi	r20, 0x1C	; 28
     8b2:	56 e4       	ldi	r21, 0x46	; 70
     8b4:	c5 01       	movw	r24, r10
     8b6:	b4 01       	movw	r22, r8
     8b8:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
     8bc:	4b 01       	movw	r8, r22
     8be:	5c 01       	movw	r10, r24
     8c0:	4c 9c       	mul	r4, r12
     8c2:	b0 01       	movw	r22, r0
     8c4:	4d 9c       	mul	r4, r13
     8c6:	70 0d       	add	r23, r0
     8c8:	5c 9c       	mul	r5, r12
     8ca:	70 0d       	add	r23, r0
     8cc:	11 24       	eor	r1, r1
     8ce:	07 2e       	mov	r0, r23
     8d0:	00 0c       	add	r0, r0
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	0e 94 0c 18 	call	0x3018	; 0x3018 <__floatsisf>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	c5 01       	movw	r24, r10
     8e0:	b4 01       	movw	r22, r8
     8e2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__subsf3>
     8e6:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__fixsfsi>
     8ea:	7f 93       	push	r23
     8ec:	6f 93       	push	r22
     8ee:	df 92       	push	r13
     8f0:	cf 92       	push	r12
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	8f 93       	push	r24
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	9f 93       	push	r25
     8fa:	2c 81       	ldd	r18, Y+4	; 0x04
     8fc:	2f 93       	push	r18
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	8f 93       	push	r24
     902:	9e 81       	ldd	r25, Y+6	; 0x06
     904:	9f 93       	push	r25
     906:	2d 81       	ldd	r18, Y+5	; 0x05
     908:	2f 93       	push	r18
     90a:	2f 92       	push	r2
     90c:	8f 81       	ldd	r24, Y+7	; 0x07
     90e:	8f 93       	push	r24
     910:	3f 92       	push	r3
     912:	0f 93       	push	r16
     914:	9a 85       	ldd	r25, Y+10	; 0x0a
     916:	9f 93       	push	r25
     918:	28 85       	ldd	r18, Y+8	; 0x08
     91a:	2f 93       	push	r18
     91c:	7f 92       	push	r7
     91e:	6f 92       	push	r6
     920:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <printf>
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
	}
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	22 cf       	rjmp	.-444    	; 0x774 <temperatureSensorController_task+0x2e>

00000930 <temperatureSensorController_create>:
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
}

void temperatureSensorController_create(temperatureSensor_t temperatureSensor)
{
     934:	0f 93       	push	r16
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
	if ( HIH8120_OK == hih8120_initialise() )
     93c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <hih8120_initialise>
     940:	81 11       	cpse	r24, r1
     942:	15 c0       	rjmp	.+42     	; 0x96e <temperatureSensorController_create+0x3e>
	{
		sensor = temperatureSensor;
     944:	d0 93 6d 0e 	sts	0x0E6D, r29	; 0x800e6d <sensor+0x1>
     948:	c0 93 6c 0e 	sts	0x0E6C, r28	; 0x800e6c <sensor>
		printf("Temperature sensor started!!!\n");
     94c:	84 ec       	ldi	r24, 0xC4	; 196
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	0e 94 ed 25 	call	0x4bda	; 0x4bda <puts>
		xTaskCreate(temperatureSensorController_task, "TemperatureSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     954:	e1 2c       	mov	r14, r1
     956:	f1 2c       	mov	r15, r1
     958:	01 e0       	ldi	r16, 0x01	; 1
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 ec       	ldi	r20, 0xC0	; 192
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	62 ee       	ldi	r22, 0xE2	; 226
     964:	72 e0       	ldi	r23, 0x02	; 2
     966:	83 ea       	ldi	r24, 0xA3	; 163
     968:	93 e0       	ldi	r25, 0x03	; 3
     96a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xTaskCreate>
		//vTaskStartScheduler();
	}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <carbonDioxideSensor_create>:
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	float result = self->reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
	return result;
}
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	6b 01       	movw	r12, r22
     98a:	7c 01       	movw	r14, r24
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
     998:	ec 01       	movw	r28, r24
     99a:	89 2b       	or	r24, r25
     99c:	c1 f0       	breq	.+48     	; 0x9ce <carbonDioxideSensor_create+0x54>
     99e:	c8 82       	st	Y, r12
     9a0:	d9 82       	std	Y+1, r13	; 0x01
     9a2:	ea 82       	std	Y+2, r14	; 0x02
     9a4:	fb 82       	std	Y+3, r15	; 0x03
     9a6:	1c 82       	std	Y+4, r1	; 0x04
     9a8:	1d 82       	std	Y+5, r1	; 0x05
     9aa:	1e 82       	std	Y+6, r1	; 0x06
     9ac:	1f 82       	std	Y+7, r1	; 0x07
     9ae:	e7 d1       	rcall	.+974    	; 0xd7e <myTime_create>
     9b0:	9b 87       	std	Y+11, r25	; 0x0b
     9b2:	8a 87       	std	Y+10, r24	; 0x0a
     9b4:	43 e0       	ldi	r20, 0x03	; 3
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	31 d6       	rcall	.+3170   	; 0x161e <xQueueGenericCreate>
     9bc:	99 87       	std	Y+9, r25	; 0x09
     9be:	88 87       	std	Y+8, r24	; 0x08
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	a9 01       	movw	r20, r18
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	49 d6       	rcall	.+3218   	; 0x1660 <xQueueGenericSend>
     9ce:	ce 01       	movw	r24, r28
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	08 95       	ret

000009e0 <carbonDioxideSensor_getValue>:

float carbonDioxideSensor_getValue(carbonDioxideSensor_t self)
{
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     9f0:	4f ef       	ldi	r20, 0xFF	; 255
     9f2:	5f ef       	ldi	r21, 0xFF	; 255
     9f4:	ba 01       	movw	r22, r20
     9f6:	88 85       	ldd	r24, Y+8	; 0x08
     9f8:	99 85       	ldd	r25, Y+9	; 0x09
     9fa:	9d d7       	rcall	.+3898   	; 0x1936 <xQueueSemaphoreTake>
	float result = self->value;
     9fc:	cc 80       	ldd	r12, Y+4	; 0x04
     9fe:	dd 80       	ldd	r13, Y+5	; 0x05
     a00:	ee 80       	ldd	r14, Y+6	; 0x06
     a02:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     a04:	00 e0       	ldi	r16, 0x00	; 0
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a9 01       	movw	r20, r18
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	88 85       	ldd	r24, Y+8	; 0x08
     a12:	99 85       	ldd	r25, Y+9	; 0x09
     a14:	25 d6       	rcall	.+3146   	; 0x1660 <xQueueGenericSend>
	return result;
}
     a16:	c7 01       	movw	r24, r14
     a18:	b6 01       	movw	r22, r12
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	08 95       	ret

00000a2a <humiditySensor_create>:
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	float result = self->reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
	return result;
}
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	6b 01       	movw	r12, r22
     a3a:	7c 01       	movw	r14, r24
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	8c e0       	ldi	r24, 0x0C	; 12
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
     a48:	ec 01       	movw	r28, r24
     a4a:	89 2b       	or	r24, r25
     a4c:	c1 f0       	breq	.+48     	; 0xa7e <humiditySensor_create+0x54>
     a4e:	c8 82       	st	Y, r12
     a50:	d9 82       	std	Y+1, r13	; 0x01
     a52:	ea 82       	std	Y+2, r14	; 0x02
     a54:	fb 82       	std	Y+3, r15	; 0x03
     a56:	1c 82       	std	Y+4, r1	; 0x04
     a58:	1d 82       	std	Y+5, r1	; 0x05
     a5a:	1e 82       	std	Y+6, r1	; 0x06
     a5c:	1f 82       	std	Y+7, r1	; 0x07
     a5e:	8f d1       	rcall	.+798    	; 0xd7e <myTime_create>
     a60:	9b 87       	std	Y+11, r25	; 0x0b
     a62:	8a 87       	std	Y+10, r24	; 0x0a
     a64:	43 e0       	ldi	r20, 0x03	; 3
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	d9 d5       	rcall	.+2994   	; 0x161e <xQueueGenericCreate>
     a6c:	99 87       	std	Y+9, r25	; 0x09
     a6e:	88 87       	std	Y+8, r24	; 0x08
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	a9 01       	movw	r20, r18
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	f1 d5       	rcall	.+3042   	; 0x1660 <xQueueGenericSend>
     a7e:	ce 01       	movw	r24, r28
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	08 95       	ret

00000a90 <humiditySensor_getValue>:

float humiditySensor_getValue(humiditySensor_t self)
{
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     aa0:	4f ef       	ldi	r20, 0xFF	; 255
     aa2:	5f ef       	ldi	r21, 0xFF	; 255
     aa4:	ba 01       	movw	r22, r20
     aa6:	88 85       	ldd	r24, Y+8	; 0x08
     aa8:	99 85       	ldd	r25, Y+9	; 0x09
     aaa:	45 d7       	rcall	.+3722   	; 0x1936 <xQueueSemaphoreTake>
	float result = self->value;
     aac:	cc 80       	ldd	r12, Y+4	; 0x04
     aae:	dd 80       	ldd	r13, Y+5	; 0x05
     ab0:	ee 80       	ldd	r14, Y+6	; 0x06
     ab2:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     ab4:	00 e0       	ldi	r16, 0x00	; 0
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	a9 01       	movw	r20, r18
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	88 85       	ldd	r24, Y+8	; 0x08
     ac2:	99 85       	ldd	r25, Y+9	; 0x09
     ac4:	cd d5       	rcall	.+2970   	; 0x1660 <xQueueGenericSend>
	return result;
}
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	08 95       	ret

00000ada <temperatureSensor_create>:
void temperatureSensor_setReportInterval(temperatureSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	6b 01       	movw	r12, r22
     aea:	7c 01       	movw	r14, r24
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	8c e0       	ldi	r24, 0x0C	; 12
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
     af8:	ec 01       	movw	r28, r24
     afa:	89 2b       	or	r24, r25
     afc:	c1 f0       	breq	.+48     	; 0xb2e <temperatureSensor_create+0x54>
     afe:	c8 82       	st	Y, r12
     b00:	d9 82       	std	Y+1, r13	; 0x01
     b02:	ea 82       	std	Y+2, r14	; 0x02
     b04:	fb 82       	std	Y+3, r15	; 0x03
     b06:	1c 82       	std	Y+4, r1	; 0x04
     b08:	1d 82       	std	Y+5, r1	; 0x05
     b0a:	1e 82       	std	Y+6, r1	; 0x06
     b0c:	1f 82       	std	Y+7, r1	; 0x07
     b0e:	37 d1       	rcall	.+622    	; 0xd7e <myTime_create>
     b10:	9b 87       	std	Y+11, r25	; 0x0b
     b12:	8a 87       	std	Y+10, r24	; 0x0a
     b14:	43 e0       	ldi	r20, 0x03	; 3
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	81 d5       	rcall	.+2818   	; 0x161e <xQueueGenericCreate>
     b1c:	99 87       	std	Y+9, r25	; 0x09
     b1e:	88 87       	std	Y+8, r24	; 0x08
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	a9 01       	movw	r20, r18
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	99 d5       	rcall	.+2866   	; 0x1660 <xQueueGenericSend>
     b2e:	ce 01       	movw	r24, r28
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <temperatureSensor_setValue>:

void temperatureSensor_setValue(temperatureSensor_t self,float value)
{
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
     b50:	6a 01       	movw	r12, r20
     b52:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     b54:	4f ef       	ldi	r20, 0xFF	; 255
     b56:	5f ef       	ldi	r21, 0xFF	; 255
     b58:	ba 01       	movw	r22, r20
     b5a:	88 85       	ldd	r24, Y+8	; 0x08
     b5c:	99 85       	ldd	r25, Y+9	; 0x09
     b5e:	eb d6       	rcall	.+3542   	; 0x1936 <xQueueSemaphoreTake>
	self->value = value;
     b60:	cc 82       	std	Y+4, r12	; 0x04
     b62:	dd 82       	std	Y+5, r13	; 0x05
     b64:	ee 82       	std	Y+6, r14	; 0x06
     b66:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     b68:	8a 85       	ldd	r24, Y+10	; 0x0a
     b6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b6c:	20 d1       	rcall	.+576    	; 0xdae <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     b6e:	00 e0       	ldi	r16, 0x00	; 0
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	a9 01       	movw	r20, r18
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	88 85       	ldd	r24, Y+8	; 0x08
     b7c:	99 85       	ldd	r25, Y+9	; 0x09
     b7e:	70 d5       	rcall	.+2784   	; 0x1660 <xQueueGenericSend>
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	cf 90       	pop	r12
     b8e:	08 95       	ret

00000b90 <temperatureSensor_getReportInterval>:

float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     ba0:	4f ef       	ldi	r20, 0xFF	; 255
     ba2:	5f ef       	ldi	r21, 0xFF	; 255
     ba4:	ba 01       	movw	r22, r20
     ba6:	88 85       	ldd	r24, Y+8	; 0x08
     ba8:	99 85       	ldd	r25, Y+9	; 0x09
     baa:	c5 d6       	rcall	.+3466   	; 0x1936 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     bac:	c8 80       	ld	r12, Y
     bae:	d9 80       	ldd	r13, Y+1	; 0x01
     bb0:	ea 80       	ldd	r14, Y+2	; 0x02
     bb2:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	a9 01       	movw	r20, r18
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	88 85       	ldd	r24, Y+8	; 0x08
     bc2:	99 85       	ldd	r25, Y+9	; 0x09
     bc4:	4d d5       	rcall	.+2714   	; 0x1660 <xQueueGenericSend>
	return result;
}
     bc6:	c7 01       	movw	r24, r14
     bc8:	b6 01       	movw	r22, r12
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	08 95       	ret

00000bda <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     bea:	4f ef       	ldi	r20, 0xFF	; 255
     bec:	5f ef       	ldi	r21, 0xFF	; 255
     bee:	ba 01       	movw	r22, r20
     bf0:	88 85       	ldd	r24, Y+8	; 0x08
     bf2:	99 85       	ldd	r25, Y+9	; 0x09
     bf4:	a0 d6       	rcall	.+3392   	; 0x1936 <xQueueSemaphoreTake>
	float result = self->value;
     bf6:	cc 80       	ldd	r12, Y+4	; 0x04
     bf8:	dd 80       	ldd	r13, Y+5	; 0x05
     bfa:	ee 80       	ldd	r14, Y+6	; 0x06
     bfc:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     bfe:	00 e0       	ldi	r16, 0x00	; 0
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	a9 01       	movw	r20, r18
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	88 85       	ldd	r24, Y+8	; 0x08
     c0c:	99 85       	ldd	r25, Y+9	; 0x09
     c0e:	28 d5       	rcall	.+2640   	; 0x1660 <xQueueGenericSend>
	return result;
}
     c10:	c7 01       	movw	r24, r14
     c12:	b6 01       	movw	r22, r12
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	08 95       	ret

00000c24 <temperatureSensor_getUpdateTime>:

myTime_t temperatureSensor_getUpdateTime(temperatureSensor_t self)
{
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     c30:	4f ef       	ldi	r20, 0xFF	; 255
     c32:	5f ef       	ldi	r21, 0xFF	; 255
     c34:	ba 01       	movw	r22, r20
     c36:	88 85       	ldd	r24, Y+8	; 0x08
     c38:	99 85       	ldd	r25, Y+9	; 0x09
     c3a:	7d d6       	rcall	.+3322   	; 0x1936 <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     c3c:	ea 84       	ldd	r14, Y+10	; 0x0a
     c3e:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	88 85       	ldd	r24, Y+8	; 0x08
     c4e:	99 85       	ldd	r25, Y+9	; 0x09
     c50:	07 d5       	rcall	.+2574   	; 0x1660 <xQueueGenericSend>
	return result;
}
     c52:	c7 01       	movw	r24, r14
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	08 95       	ret

00000c60 <sensorModelManager_create>:
void sensorModelManager_setReportInterval(float reportInterval)
{
	temperatureSensor_setReportInterval(temperatureSensor,reportInterval);
	humiditySensor_setReportInterval(humiditySensor,reportInterval);
	carbonDioxideSensor_setReportInterval(carbonDioxideSensor,reportInterval);
}
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	9f e3       	ldi	r25, 0x3F	; 63
     c68:	48 dd       	rcall	.-1392   	; 0x6fa <sevenSegmentDisplayController_create>
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 e8       	ldi	r24, 0x80	; 128
     c70:	9f e3       	ldi	r25, 0x3F	; 63
     c72:	33 df       	rcall	.-410    	; 0xada <temperatureSensor_create>
     c74:	90 93 71 0e 	sts	0x0E71, r25	; 0x800e71 <temperatureSensor+0x1>
     c78:	80 93 70 0e 	sts	0x0E70, r24	; 0x800e70 <temperatureSensor>
     c7c:	59 de       	rcall	.-846    	; 0x930 <temperatureSensorController_create>
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	9f e3       	ldi	r25, 0x3F	; 63
     c86:	d1 de       	rcall	.-606    	; 0xa2a <humiditySensor_create>
     c88:	90 93 73 0e 	sts	0x0E73, r25	; 0x800e73 <humiditySensor+0x1>
     c8c:	80 93 72 0e 	sts	0x0E72, r24	; 0x800e72 <humiditySensor>
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e8       	ldi	r24, 0x80	; 128
     c96:	9f e3       	ldi	r25, 0x3F	; 63
     c98:	70 de       	rcall	.-800    	; 0x97a <carbonDioxideSensor_create>
     c9a:	90 93 6f 0e 	sts	0x0E6F, r25	; 0x800e6f <carbonDioxideSensor+0x1>
     c9e:	80 93 6e 0e 	sts	0x0E6E, r24	; 0x800e6e <carbonDioxideSensor>
     ca2:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <vTaskStartScheduler>
     ca6:	08 95       	ret

00000ca8 <sensorModelManager_getTemperatureSensor>:

temperatureSensor_t sensorModelManager_getTemperatureSensor()
{
	return temperatureSensor;
}
     ca8:	80 91 70 0e 	lds	r24, 0x0E70	; 0x800e70 <temperatureSensor>
     cac:	90 91 71 0e 	lds	r25, 0x0E71	; 0x800e71 <temperatureSensor+0x1>
     cb0:	08 95       	ret

00000cb2 <sensorModelManager_getHumiditySensor>:

humiditySensor_t sensorModelManager_getHumiditySensor()
{
	return humiditySensor;
}
     cb2:	80 91 72 0e 	lds	r24, 0x0E72	; 0x800e72 <humiditySensor>
     cb6:	90 91 73 0e 	lds	r25, 0x0E73	; 0x800e73 <humiditySensor+0x1>
     cba:	08 95       	ret

00000cbc <sensorModelManager_getCarbonDioxideSensor>:

carbonDioxideSensor_t sensorModelManager_getCarbonDioxideSensor()
{
	return carbonDioxideSensor;
}
     cbc:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <carbonDioxideSensor>
     cc0:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <carbonDioxideSensor+0x1>
     cc4:	08 95       	ret

00000cc6 <nowTimeClockTask>:
	nowTime->mon = mon;
	nowTime->day = day;
	nowTime->hour = hour;
	nowTime->min = min;
	nowTime->sec = sec;
}
     cc6:	6e e3       	ldi	r22, 0x3E	; 62
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <vTaskDelay>
     cd2:	e0 91 74 0e 	lds	r30, 0x0E74	; 0x800e74 <nowTime>
     cd6:	f0 91 75 0e 	lds	r31, 0x0E75	; 0x800e75 <nowTime+0x1>
     cda:	82 85       	ldd	r24, Z+10	; 0x0a
     cdc:	93 85       	ldd	r25, Z+11	; 0x0b
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	93 87       	std	Z+11, r25	; 0x0b
     ce2:	82 87       	std	Z+10, r24	; 0x0a
     ce4:	cc 97       	sbiw	r24, 0x3c	; 60
     ce6:	7c f3       	brlt	.-34     	; 0xcc6 <nowTimeClockTask>
     ce8:	80 85       	ldd	r24, Z+8	; 0x08
     cea:	91 85       	ldd	r25, Z+9	; 0x09
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	91 87       	std	Z+9, r25	; 0x09
     cf0:	80 87       	std	Z+8, r24	; 0x08
     cf2:	13 86       	std	Z+11, r1	; 0x0b
     cf4:	12 86       	std	Z+10, r1	; 0x0a
     cf6:	cc 97       	sbiw	r24, 0x3c	; 60
     cf8:	34 f3       	brlt	.-52     	; 0xcc6 <nowTimeClockTask>
     cfa:	86 81       	ldd	r24, Z+6	; 0x06
     cfc:	97 81       	ldd	r25, Z+7	; 0x07
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	97 83       	std	Z+7, r25	; 0x07
     d02:	86 83       	std	Z+6, r24	; 0x06
     d04:	11 86       	std	Z+9, r1	; 0x09
     d06:	10 86       	std	Z+8, r1	; 0x08
     d08:	48 97       	sbiw	r24, 0x18	; 24
     d0a:	ec f2       	brlt	.-70     	; 0xcc6 <nowTimeClockTask>
     d0c:	17 82       	std	Z+7, r1	; 0x07
     d0e:	16 82       	std	Z+6, r1	; 0x06
     d10:	da cf       	rjmp	.-76     	; 0xcc6 <nowTimeClockTask>

00000d12 <mytime_tryCreateNowTime>:
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	80 91 74 0e 	lds	r24, 0x0E74	; 0x800e74 <nowTime>
     d1c:	90 91 75 0e 	lds	r25, 0x0E75	; 0x800e75 <nowTime+0x1>
     d20:	89 2b       	or	r24, r25
     d22:	49 f5       	brne	.+82     	; 0xd76 <mytime_tryCreateNowTime+0x64>
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
     d30:	fc 01       	movw	r30, r24
     d32:	90 93 75 0e 	sts	0x0E75, r25	; 0x800e75 <nowTime+0x1>
     d36:	80 93 74 0e 	sts	0x0E74, r24	; 0x800e74 <nowTime>
     d3a:	89 2b       	or	r24, r25
     d3c:	e1 f0       	breq	.+56     	; 0xd76 <mytime_tryCreateNowTime+0x64>
     d3e:	11 82       	std	Z+1, r1	; 0x01
     d40:	10 82       	st	Z, r1
     d42:	13 82       	std	Z+3, r1	; 0x03
     d44:	12 82       	std	Z+2, r1	; 0x02
     d46:	15 82       	std	Z+5, r1	; 0x05
     d48:	14 82       	std	Z+4, r1	; 0x04
     d4a:	17 82       	std	Z+7, r1	; 0x07
     d4c:	16 82       	std	Z+6, r1	; 0x06
     d4e:	11 86       	std	Z+9, r1	; 0x09
     d50:	10 86       	std	Z+8, r1	; 0x08
     d52:	13 86       	std	Z+11, r1	; 0x0b
     d54:	12 86       	std	Z+10, r1	; 0x0a
     d56:	88 ef       	ldi	r24, 0xF8	; 248
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <puts>
     d5e:	e1 2c       	mov	r14, r1
     d60:	f1 2c       	mov	r15, r1
     d62:	01 e0       	ldi	r16, 0x01	; 1
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 ec       	ldi	r20, 0xC0	; 192
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	62 e1       	ldi	r22, 0x12	; 18
     d6e:	73 e0       	ldi	r23, 0x03	; 3
     d70:	83 e6       	ldi	r24, 0x63	; 99
     d72:	96 e0       	ldi	r25, 0x06	; 6
     d74:	89 d7       	rcall	.+3858   	; 0x1c88 <xTaskCreate>
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	08 95       	ret

00000d7e <myTime_create>:
     d7e:	c9 df       	rcall	.-110    	; 0xd12 <mytime_tryCreateNowTime>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
     d8c:	fc 01       	movw	r30, r24
     d8e:	89 2b       	or	r24, r25
     d90:	61 f0       	breq	.+24     	; 0xdaa <myTime_create+0x2c>
     d92:	11 82       	std	Z+1, r1	; 0x01
     d94:	10 82       	st	Z, r1
     d96:	13 82       	std	Z+3, r1	; 0x03
     d98:	12 82       	std	Z+2, r1	; 0x02
     d9a:	15 82       	std	Z+5, r1	; 0x05
     d9c:	14 82       	std	Z+4, r1	; 0x04
     d9e:	17 82       	std	Z+7, r1	; 0x07
     da0:	16 82       	std	Z+6, r1	; 0x06
     da2:	11 86       	std	Z+9, r1	; 0x09
     da4:	10 86       	std	Z+8, r1	; 0x08
     da6:	13 86       	std	Z+11, r1	; 0x0b
     da8:	12 86       	std	Z+10, r1	; 0x0a
     daa:	cf 01       	movw	r24, r30
     dac:	08 95       	ret

00000dae <myTime_updateToNowTime>:

void myTime_updateToNowTime(myTime_t self)
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
	mytime_tryCreateNowTime();
     db4:	ae df       	rcall	.-164    	; 0xd12 <mytime_tryCreateNowTime>
	self->year = nowTime->year;
     db6:	e0 91 74 0e 	lds	r30, 0x0E74	; 0x800e74 <nowTime>
     dba:	f0 91 75 0e 	lds	r31, 0x0E75	; 0x800e75 <nowTime+0x1>
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	99 83       	std	Y+1, r25	; 0x01
     dc4:	88 83       	st	Y, r24
	self->mon = nowTime->mon;
     dc6:	e0 91 74 0e 	lds	r30, 0x0E74	; 0x800e74 <nowTime>
     dca:	f0 91 75 0e 	lds	r31, 0x0E75	; 0x800e75 <nowTime+0x1>
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	9b 83       	std	Y+3, r25	; 0x03
     dd4:	8a 83       	std	Y+2, r24	; 0x02
	self->day = nowTime->day;
     dd6:	84 81       	ldd	r24, Z+4	; 0x04
     dd8:	95 81       	ldd	r25, Z+5	; 0x05
     dda:	9d 83       	std	Y+5, r25	; 0x05
     ddc:	8c 83       	std	Y+4, r24	; 0x04
	self->hour = nowTime->hour;
     dde:	86 81       	ldd	r24, Z+6	; 0x06
     de0:	97 81       	ldd	r25, Z+7	; 0x07
     de2:	9f 83       	std	Y+7, r25	; 0x07
     de4:	8e 83       	std	Y+6, r24	; 0x06
	self->min = nowTime->min;
     de6:	80 85       	ldd	r24, Z+8	; 0x08
     de8:	91 85       	ldd	r25, Z+9	; 0x09
     dea:	99 87       	std	Y+9, r25	; 0x09
     dec:	88 87       	std	Y+8, r24	; 0x08
	self->sec = nowTime->sec;
     dee:	82 85       	ldd	r24, Z+10	; 0x0a
     df0:	93 85       	ldd	r25, Z+11	; 0x0b
     df2:	9b 87       	std	Y+11, r25	; 0x0b
     df4:	8a 87       	std	Y+10, r24	; 0x0a
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <myTime_getNowTime>:

myTime_t myTime_getNowTime()
{
	mytime_tryCreateNowTime();
     dfc:	8a df       	rcall	.-236    	; 0xd12 <mytime_tryCreateNowTime>
	return nowTime;
}
     dfe:	80 91 74 0e 	lds	r24, 0x0E74	; 0x800e74 <nowTime>
     e02:	90 91 75 0e 	lds	r25, 0x0E75	; 0x800e75 <nowTime+0x1>
     e06:	08 95       	ret

00000e08 <myTime_getYear>:

int myTime_getYear(myTime_t self)
{
	return self->year;
}
     e08:	fc 01       	movw	r30, r24
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	08 95       	ret

00000e10 <myTime_getMon>:

int myTime_getMon(myTime_t self)
{
	return self->mon;
}
     e10:	fc 01       	movw	r30, r24
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	08 95       	ret

00000e18 <myTime_getDay>:

int myTime_getDay(myTime_t self)
{
	return self->day;
}
     e18:	fc 01       	movw	r30, r24
     e1a:	84 81       	ldd	r24, Z+4	; 0x04
     e1c:	95 81       	ldd	r25, Z+5	; 0x05
     e1e:	08 95       	ret

00000e20 <myTime_getHour>:

int myTime_getHour(myTime_t self)
{
	return self->hour;
}
     e20:	fc 01       	movw	r30, r24
     e22:	86 81       	ldd	r24, Z+6	; 0x06
     e24:	97 81       	ldd	r25, Z+7	; 0x07
     e26:	08 95       	ret

00000e28 <myTime_getMin>:

int myTime_getMin(myTime_t self)
{
	return self->min;
}
     e28:	fc 01       	movw	r30, r24
     e2a:	80 85       	ldd	r24, Z+8	; 0x08
     e2c:	91 85       	ldd	r25, Z+9	; 0x09
     e2e:	08 95       	ret

00000e30 <myTime_getSec>:

int myTime_getSec(myTime_t self)
{
	return self->sec;
}
     e30:	fc 01       	movw	r30, r24
     e32:	82 85       	ldd	r24, Z+10	; 0x0a
     e34:	93 85       	ldd	r25, Z+11	; 0x0b
     e36:	08 95       	ret

00000e38 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     e3e:	ea e6       	ldi	r30, 0x6A	; 106
     e40:	f3 e0       	ldi	r31, 0x03	; 3
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <prvInsertBlockIntoFreeList+0xe>
     e44:	f9 01       	movw	r30, r18
     e46:	20 81       	ld	r18, Z
     e48:	31 81       	ldd	r19, Z+1	; 0x01
     e4a:	2a 17       	cp	r18, r26
     e4c:	3b 07       	cpc	r19, r27
     e4e:	d0 f3       	brcs	.-12     	; 0xe44 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	af 01       	movw	r20, r30
     e56:	48 0f       	add	r20, r24
     e58:	59 1f       	adc	r21, r25
     e5a:	a4 17       	cp	r26, r20
     e5c:	b5 07       	cpc	r27, r21
     e5e:	49 f4       	brne	.+18     	; 0xe72 <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     e60:	12 96       	adiw	r26, 0x02	; 2
     e62:	4d 91       	ld	r20, X+
     e64:	5c 91       	ld	r21, X
     e66:	13 97       	sbiw	r26, 0x03	; 3
     e68:	84 0f       	add	r24, r20
     e6a:	95 1f       	adc	r25, r21
     e6c:	93 83       	std	Z+3, r25	; 0x03
     e6e:	82 83       	std	Z+2, r24	; 0x02
     e70:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     e72:	12 96       	adiw	r26, 0x02	; 2
     e74:	8d 91       	ld	r24, X+
     e76:	9c 91       	ld	r25, X
     e78:	13 97       	sbiw	r26, 0x03	; 3
     e7a:	ed 01       	movw	r28, r26
     e7c:	c8 0f       	add	r28, r24
     e7e:	d9 1f       	adc	r29, r25
     e80:	2c 17       	cp	r18, r28
     e82:	3d 07       	cpc	r19, r29
     e84:	d9 f4       	brne	.+54     	; 0xebc <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     e86:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <pxEnd>
     e8a:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <pxEnd+0x1>
     e8e:	c2 17       	cp	r28, r18
     e90:	d3 07       	cpc	r29, r19
     e92:	81 f0       	breq	.+32     	; 0xeb4 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     e94:	2a 81       	ldd	r18, Y+2	; 0x02
     e96:	3b 81       	ldd	r19, Y+3	; 0x03
     e98:	82 0f       	add	r24, r18
     e9a:	93 1f       	adc	r25, r19
     e9c:	13 96       	adiw	r26, 0x03	; 3
     e9e:	9c 93       	st	X, r25
     ea0:	8e 93       	st	-X, r24
     ea2:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     ea4:	c0 81       	ld	r28, Z
     ea6:	d1 81       	ldd	r29, Z+1	; 0x01
     ea8:	88 81       	ld	r24, Y
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	9c 93       	st	X, r25
     eb0:	8e 93       	st	-X, r24
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	dc 93       	st	X, r29
     eb8:	ce 93       	st	-X, r28
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	3c 93       	st	X, r19
     ec0:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     ec2:	ae 17       	cp	r26, r30
     ec4:	bf 07       	cpc	r27, r31
     ec6:	11 f0       	breq	.+4      	; 0xecc <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     ec8:	b1 83       	std	Z+1, r27	; 0x01
     eca:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     ee4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     ee8:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <pxEnd>
     eec:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <pxEnd+0x1>
     ef0:	89 2b       	or	r24, r25
     ef2:	41 f5       	brne	.+80     	; 0xf44 <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     ef4:	ea e6       	ldi	r30, 0x6A	; 106
     ef6:	f3 e0       	ldi	r31, 0x03	; 3
     ef8:	ae e6       	ldi	r26, 0x6E	; 110
     efa:	b3 e0       	ldi	r27, 0x03	; 3
     efc:	b1 83       	std	Z+1, r27	; 0x01
     efe:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     f00:	13 82       	std	Z+3, r1	; 0x03
     f02:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     f04:	ee e2       	ldi	r30, 0x2E	; 46
     f06:	fd e0       	ldi	r31, 0x0D	; 13
     f08:	f0 93 69 03 	sts	0x0369, r31	; 0x800369 <pxEnd+0x1>
     f0c:	e0 93 68 03 	sts	0x0368, r30	; 0x800368 <pxEnd>
    pxEnd->xBlockSize = 0;
     f10:	13 82       	std	Z+3, r1	; 0x03
     f12:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     f14:	11 82       	std	Z+1, r1	; 0x01
     f16:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     f18:	80 ec       	ldi	r24, 0xC0	; 192
     f1a:	99 e0       	ldi	r25, 0x09	; 9
     f1c:	13 96       	adiw	r26, 0x03	; 3
     f1e:	9c 93       	st	X, r25
     f20:	8e 93       	st	-X, r24
     f22:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     f24:	ed 93       	st	X+, r30
     f26:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     f28:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <xMinimumEverFreeBytesRemaining+0x1>
     f2c:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     f30:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <xFreeBytesRemaining+0x1>
     f34:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e8       	ldi	r25, 0x80	; 128
     f3c:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <xBlockAllocatedBit+0x1>
     f40:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     f44:	e0 90 5e 03 	lds	r14, 0x035E	; 0x80035e <xBlockAllocatedBit>
     f48:	f0 90 5f 03 	lds	r15, 0x035F	; 0x80035f <xBlockAllocatedBit+0x1>
     f4c:	c7 01       	movw	r24, r14
     f4e:	8c 23       	and	r24, r28
     f50:	9d 23       	and	r25, r29
     f52:	89 2b       	or	r24, r25
     f54:	09 f0       	breq	.+2      	; 0xf58 <pvPortMalloc+0x86>
     f56:	75 c0       	rjmp	.+234    	; 0x1042 <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     f58:	20 97       	sbiw	r28, 0x00	; 0
     f5a:	09 f4       	brne	.+2      	; 0xf5e <pvPortMalloc+0x8c>
     f5c:	75 c0       	rjmp	.+234    	; 0x1048 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     f5e:	9e 01       	movw	r18, r28
     f60:	2c 5f       	subi	r18, 0xFC	; 252
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     f64:	c2 17       	cp	r28, r18
     f66:	d3 07       	cpc	r29, r19
     f68:	08 f0       	brcs	.+2      	; 0xf6c <pvPortMalloc+0x9a>
     f6a:	6e c0       	rjmp	.+220    	; 0x1048 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     f6c:	21 15       	cp	r18, r1
     f6e:	31 05       	cpc	r19, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <pvPortMalloc+0xa2>
     f72:	67 c0       	rjmp	.+206    	; 0x1042 <pvPortMalloc+0x170>
     f74:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <xFreeBytesRemaining>
     f78:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <xFreeBytesRemaining+0x1>
     f7c:	02 17       	cp	r16, r18
     f7e:	13 07       	cpc	r17, r19
     f80:	08 f4       	brcc	.+2      	; 0xf84 <pvPortMalloc+0xb2>
     f82:	5f c0       	rjmp	.+190    	; 0x1042 <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     f84:	c0 91 6a 03 	lds	r28, 0x036A	; 0x80036a <xStart>
     f88:	d0 91 6b 03 	lds	r29, 0x036B	; 0x80036b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     f8c:	ea e6       	ldi	r30, 0x6A	; 106
     f8e:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <pvPortMalloc+0xc4>
     f92:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     f94:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	82 17       	cp	r24, r18
     f9c:	93 07       	cpc	r25, r19
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <pvPortMalloc+0xd6>
     fa0:	88 81       	ld	r24, Y
     fa2:	99 81       	ldd	r25, Y+1	; 0x01
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	a9 f7       	brne	.-22     	; 0xf92 <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     fa8:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <pxEnd>
     fac:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <pxEnd+0x1>
     fb0:	c8 17       	cp	r28, r24
     fb2:	d9 07       	cpc	r29, r25
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <pvPortMalloc+0xe6>
     fb6:	45 c0       	rjmp	.+138    	; 0x1042 <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     fb8:	c0 80       	ld	r12, Z
     fba:	d1 80       	ldd	r13, Z+1	; 0x01
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	c8 0e       	add	r12, r24
     fc0:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     fc2:	88 81       	ld	r24, Y
     fc4:	99 81       	ldd	r25, Y+1	; 0x01
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     fca:	4a 81       	ldd	r20, Y+2	; 0x02
     fcc:	5b 81       	ldd	r21, Y+3	; 0x03
     fce:	42 1b       	sub	r20, r18
     fd0:	53 0b       	sbc	r21, r19
     fd2:	49 30       	cpi	r20, 0x09	; 9
     fd4:	51 05       	cpc	r21, r1
     fd6:	48 f0       	brcs	.+18     	; 0xfea <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     fd8:	ce 01       	movw	r24, r28
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     fde:	fc 01       	movw	r30, r24
     fe0:	53 83       	std	Z+3, r21	; 0x03
     fe2:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     fe4:	3b 83       	std	Y+3, r19	; 0x03
     fe6:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     fe8:	27 df       	rcall	.-434    	; 0xe38 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	9b 81       	ldd	r25, Y+3	; 0x03
     fee:	08 1b       	sub	r16, r24
     ff0:	19 0b       	sbc	r17, r25
     ff2:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <xFreeBytesRemaining+0x1>
     ff6:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     ffa:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <xMinimumEverFreeBytesRemaining>
     ffe:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <xMinimumEverFreeBytesRemaining+0x1>
    1002:	02 17       	cp	r16, r18
    1004:	13 07       	cpc	r17, r19
    1006:	20 f4       	brcc	.+8      	; 0x1010 <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1008:	10 93 65 03 	sts	0x0365, r17	; 0x800365 <xMinimumEverFreeBytesRemaining+0x1>
    100c:	00 93 64 03 	sts	0x0364, r16	; 0x800364 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1010:	e8 2a       	or	r14, r24
    1012:	f9 2a       	or	r15, r25
    1014:	fb 82       	std	Y+3, r15	; 0x03
    1016:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1018:	19 82       	std	Y+1, r1	; 0x01
    101a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    101c:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <xNumberOfSuccessfulAllocations>
    1020:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <xNumberOfSuccessfulAllocations+0x1>
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <xNumberOfSuccessfulAllocations+0x1>
    102a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    102e:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    1032:	c1 14       	cp	r12, r1
    1034:	d1 04       	cpc	r13, r1
    1036:	59 f4       	brne	.+22     	; 0x104e <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    1038:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <vApplicationMallocFailedHook>
    103c:	c1 2c       	mov	r12, r1
    103e:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
    1040:	06 c0       	rjmp	.+12     	; 0x104e <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1042:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>
    1046:	f8 cf       	rjmp	.-16     	; 0x1038 <pvPortMalloc+0x166>
    1048:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>
    104c:	f5 cf       	rjmp	.-22     	; 0x1038 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    104e:	c6 01       	movw	r24, r12
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	08 95       	ret

00001062 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	91 f1       	breq	.+100    	; 0x10ce <vPortFree+0x6c>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    106a:	fc 01       	movw	r30, r24
    106c:	34 97       	sbiw	r30, 0x04	; 4
    106e:	22 81       	ldd	r18, Z+2	; 0x02
    1070:	33 81       	ldd	r19, Z+3	; 0x03
    1072:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <xBlockAllocatedBit>
    1076:	50 91 5f 03 	lds	r21, 0x035F	; 0x80035f <xBlockAllocatedBit+0x1>
    107a:	b9 01       	movw	r22, r18
    107c:	64 23       	and	r22, r20
    107e:	75 23       	and	r23, r21
    1080:	67 2b       	or	r22, r23
    1082:	29 f1       	breq	.+74     	; 0x10ce <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	67 2b       	or	r22, r23
    108a:	09 f5       	brne	.+66     	; 0x10ce <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    108c:	ef 01       	movw	r28, r30
    108e:	40 95       	com	r20
    1090:	50 95       	com	r21
    1092:	24 23       	and	r18, r20
    1094:	35 23       	and	r19, r21
    1096:	33 83       	std	Z+3, r19	; 0x03
    1098:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
    109a:	59 d7       	rcall	.+3762   	; 0x1f4e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    109c:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <xFreeBytesRemaining>
    10a0:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <xFreeBytesRemaining+0x1>
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <xFreeBytesRemaining+0x1>
    10b0:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    10b4:	ce 01       	movw	r24, r28
    10b6:	c0 de       	rcall	.-640    	; 0xe38 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    10b8:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <xNumberOfSuccessfulFrees>
    10bc:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <xNumberOfSuccessfulFrees+0x1>
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <xNumberOfSuccessfulFrees+0x1>
    10c6:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    10ca:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    10d4:	fc 01       	movw	r30, r24
    10d6:	03 96       	adiw	r24, 0x03	; 3
    10d8:	92 83       	std	Z+2, r25	; 0x02
    10da:	81 83       	std	Z+1, r24	; 0x01
    10dc:	4f ef       	ldi	r20, 0xFF	; 255
    10de:	5f ef       	ldi	r21, 0xFF	; 255
    10e0:	ba 01       	movw	r22, r20
    10e2:	43 83       	std	Z+3, r20	; 0x03
    10e4:	54 83       	std	Z+4, r21	; 0x04
    10e6:	65 83       	std	Z+5, r22	; 0x05
    10e8:	76 83       	std	Z+6, r23	; 0x06
    10ea:	90 87       	std	Z+8, r25	; 0x08
    10ec:	87 83       	std	Z+7, r24	; 0x07
    10ee:	92 87       	std	Z+10, r25	; 0x0a
    10f0:	81 87       	std	Z+9, r24	; 0x09
    10f2:	10 82       	st	Z, r1
    10f4:	08 95       	ret

000010f6 <vListInitialiseItem>:
    10f6:	fc 01       	movw	r30, r24
    10f8:	13 86       	std	Z+11, r1	; 0x0b
    10fa:	12 86       	std	Z+10, r1	; 0x0a
    10fc:	08 95       	ret

000010fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1108:	08 81       	ld	r16, Y
    110a:	19 81       	ldd	r17, Y+1	; 0x01
    110c:	2a 81       	ldd	r18, Y+2	; 0x02
    110e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1110:	0f 3f       	cpi	r16, 0xFF	; 255
    1112:	4f ef       	ldi	r20, 0xFF	; 255
    1114:	14 07       	cpc	r17, r20
    1116:	24 07       	cpc	r18, r20
    1118:	34 07       	cpc	r19, r20
    111a:	21 f4       	brne	.+8      	; 0x1124 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    111c:	fc 01       	movw	r30, r24
    111e:	a1 85       	ldd	r26, Z+9	; 0x09
    1120:	b2 85       	ldd	r27, Z+10	; 0x0a
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1124:	dc 01       	movw	r26, r24
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	01 c0       	rjmp	.+2      	; 0x112c <vListInsert+0x2e>
    112a:	df 01       	movw	r26, r30
    112c:	14 96       	adiw	r26, 0x04	; 4
    112e:	ed 91       	ld	r30, X+
    1130:	fc 91       	ld	r31, X
    1132:	15 97       	sbiw	r26, 0x05	; 5
    1134:	40 81       	ld	r20, Z
    1136:	51 81       	ldd	r21, Z+1	; 0x01
    1138:	62 81       	ldd	r22, Z+2	; 0x02
    113a:	73 81       	ldd	r23, Z+3	; 0x03
    113c:	04 17       	cp	r16, r20
    113e:	15 07       	cpc	r17, r21
    1140:	26 07       	cpc	r18, r22
    1142:	37 07       	cpc	r19, r23
    1144:	90 f7       	brcc	.-28     	; 0x112a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1146:	14 96       	adiw	r26, 0x04	; 4
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	15 97       	sbiw	r26, 0x05	; 5
    114e:	fd 83       	std	Y+5, r31	; 0x05
    1150:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1152:	d7 83       	std	Z+7, r29	; 0x07
    1154:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1156:	bf 83       	std	Y+7, r27	; 0x07
    1158:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    115a:	15 96       	adiw	r26, 0x05	; 5
    115c:	dc 93       	st	X, r29
    115e:	ce 93       	st	-X, r28
    1160:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1162:	9b 87       	std	Y+11, r25	; 0x0b
    1164:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1166:	fc 01       	movw	r30, r24
    1168:	20 81       	ld	r18, Z
    116a:	2f 5f       	subi	r18, 0xFF	; 255
    116c:	20 83       	st	Z, r18
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    117e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1180:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1182:	c4 81       	ldd	r28, Z+4	; 0x04
    1184:	d5 81       	ldd	r29, Z+5	; 0x05
    1186:	86 81       	ldd	r24, Z+6	; 0x06
    1188:	97 81       	ldd	r25, Z+7	; 0x07
    118a:	9f 83       	std	Y+7, r25	; 0x07
    118c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    118e:	c6 81       	ldd	r28, Z+6	; 0x06
    1190:	d7 81       	ldd	r29, Z+7	; 0x07
    1192:	84 81       	ldd	r24, Z+4	; 0x04
    1194:	95 81       	ldd	r25, Z+5	; 0x05
    1196:	9d 83       	std	Y+5, r25	; 0x05
    1198:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	12 97       	sbiw	r26, 0x02	; 2
    11a2:	e8 17       	cp	r30, r24
    11a4:	f9 07       	cpc	r31, r25
    11a6:	31 f4       	brne	.+12     	; 0x11b4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    11a8:	86 81       	ldd	r24, Z+6	; 0x06
    11aa:	97 81       	ldd	r25, Z+7	; 0x07
    11ac:	12 96       	adiw	r26, 0x02	; 2
    11ae:	9c 93       	st	X, r25
    11b0:	8e 93       	st	-X, r24
    11b2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    11b4:	13 86       	std	Z+11, r1	; 0x0b
    11b6:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    11b8:	8c 91       	ld	r24, X
    11ba:	81 50       	subi	r24, 0x01	; 1
    11bc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    11be:	8c 91       	ld	r24, X
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    11c6:	fc 01       	movw	r30, r24
    11c8:	60 83       	st	Z, r22
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	70 83       	st	Z, r23
    11ce:	31 97       	sbiw	r30, 0x01	; 1
    11d0:	10 82       	st	Z, r1
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	10 82       	st	Z, r1
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	20 e8       	ldi	r18, 0x80	; 128
    11da:	20 83       	st	Z, r18
    11dc:	31 97       	sbiw	r30, 0x01	; 1
    11de:	10 82       	st	Z, r1
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	10 82       	st	Z, r1
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	10 82       	st	Z, r1
    11e8:	77 97       	sbiw	r30, 0x17	; 23
    11ea:	40 83       	st	Z, r20
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	50 83       	st	Z, r21
    11f0:	86 97       	sbiw	r24, 0x26	; 38
    11f2:	08 95       	ret

000011f4 <xPortStartScheduler>:
    11f4:	a8 95       	wdr
    11f6:	90 ec       	ldi	r25, 0xC0	; 192
    11f8:	88 e1       	ldi	r24, 0x18	; 24
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	a8 95       	wdr
    1200:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    120a:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    120e:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1212:	cd 91       	ld	r28, X+
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	dd 91       	ld	r29, X+
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	3f 90       	pop	r3
    1254:	2f 90       	pop	r2
    1256:	1f 90       	pop	r1
    1258:	0f 90       	pop	r0
    125a:	0c be       	out	0x3c, r0	; 60
    125c:	0f 90       	pop	r0
    125e:	0b be       	out	0x3b, r0	; 59
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	08 95       	ret
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	08 95       	ret

0000126c <vPortYield>:
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	0f 92       	push	r0
    1274:	0b b6       	in	r0, 0x3b	; 59
    1276:	0f 92       	push	r0
    1278:	0c b6       	in	r0, 0x3c	; 60
    127a:	0f 92       	push	r0
    127c:	1f 92       	push	r1
    127e:	11 24       	eor	r1, r1
    1280:	2f 92       	push	r2
    1282:	3f 92       	push	r3
    1284:	4f 92       	push	r4
    1286:	5f 92       	push	r5
    1288:	6f 92       	push	r6
    128a:	7f 92       	push	r7
    128c:	8f 92       	push	r8
    128e:	9f 92       	push	r9
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	2f 93       	push	r18
    12a2:	3f 93       	push	r19
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	af 93       	push	r26
    12b2:	bf 93       	push	r27
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
    12bc:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    12c0:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    12c4:	0d b6       	in	r0, 0x3d	; 61
    12c6:	0d 92       	st	X+, r0
    12c8:	0e b6       	in	r0, 0x3e	; 62
    12ca:	0d 92       	st	X+, r0
    12cc:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <vTaskSwitchContext>
    12d0:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    12d4:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    12d8:	cd 91       	ld	r28, X+
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	dd 91       	ld	r29, X+
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	7f 90       	pop	r7
    1312:	6f 90       	pop	r6
    1314:	5f 90       	pop	r5
    1316:	4f 90       	pop	r4
    1318:	3f 90       	pop	r3
    131a:	2f 90       	pop	r2
    131c:	1f 90       	pop	r1
    131e:	0f 90       	pop	r0
    1320:	0c be       	out	0x3c, r0	; 60
    1322:	0f 90       	pop	r0
    1324:	0b be       	out	0x3b, r0	; 59
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	08 95       	ret

0000132e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	0f 92       	push	r0
    1336:	0b b6       	in	r0, 0x3b	; 59
    1338:	0f 92       	push	r0
    133a:	0c b6       	in	r0, 0x3c	; 60
    133c:	0f 92       	push	r0
    133e:	1f 92       	push	r1
    1340:	11 24       	eor	r1, r1
    1342:	2f 92       	push	r2
    1344:	3f 92       	push	r3
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	6f 92       	push	r6
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	2f 93       	push	r18
    1364:	3f 93       	push	r19
    1366:	4f 93       	push	r20
    1368:	5f 93       	push	r21
    136a:	6f 93       	push	r22
    136c:	7f 93       	push	r23
    136e:	8f 93       	push	r24
    1370:	9f 93       	push	r25
    1372:	af 93       	push	r26
    1374:	bf 93       	push	r27
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1382:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1386:	0d b6       	in	r0, 0x3d	; 61
    1388:	0d 92       	st	X+, r0
    138a:	0e b6       	in	r0, 0x3e	; 62
    138c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    138e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1390:	f2 d5       	rcall	.+3044   	; 0x1f76 <xTaskIncrementTick>
    1392:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1394:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1398:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    139c:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    13a0:	cd 91       	ld	r28, X+
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	dd 91       	ld	r29, X+
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	9f 90       	pop	r9
    13d6:	8f 90       	pop	r8
    13d8:	7f 90       	pop	r7
    13da:	6f 90       	pop	r6
    13dc:	5f 90       	pop	r5
    13de:	4f 90       	pop	r4
    13e0:	3f 90       	pop	r3
    13e2:	2f 90       	pop	r2
    13e4:	1f 90       	pop	r1
    13e6:	0f 90       	pop	r0
    13e8:	0c be       	out	0x3c, r0	; 60
    13ea:	0f 90       	pop	r0
    13ec:	0b be       	out	0x3b, r0	; 59
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    13f4:	08 95       	ret

000013f6 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    13f6:	9b df       	rcall	.-202    	; 0x132e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    13f8:	18 95       	reti

000013fa <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	0f 92       	push	r0
    1400:	fc 01       	movw	r30, r24
    1402:	96 8d       	ldd	r25, Z+30	; 0x1e
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	91 11       	cpse	r25, r1
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret

00001410 <prvCopyDataToQueue>:
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	04 2f       	mov	r16, r20
    141c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    141e:	48 a1       	ldd	r20, Y+32	; 0x20
    1420:	41 11       	cpse	r20, r1
    1422:	0c c0       	rjmp	.+24     	; 0x143c <prvCopyDataToQueue+0x2c>
    1424:	88 81       	ld	r24, Y
    1426:	99 81       	ldd	r25, Y+1	; 0x01
    1428:	89 2b       	or	r24, r25
    142a:	09 f0       	breq	.+2      	; 0x142e <prvCopyDataToQueue+0x1e>
    142c:	42 c0       	rjmp	.+132    	; 0x14b2 <prvCopyDataToQueue+0xa2>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	0e 94 67 14 	call	0x28ce	; 0x28ce <xTaskPriorityDisinherit>
    1436:	1d 82       	std	Y+5, r1	; 0x05
    1438:	1c 82       	std	Y+4, r1	; 0x04
    143a:	42 c0       	rjmp	.+132    	; 0x14c0 <prvCopyDataToQueue+0xb0>
    143c:	01 11       	cpse	r16, r1
    143e:	17 c0       	rjmp	.+46     	; 0x146e <prvCopyDataToQueue+0x5e>
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <memcpy>
    144a:	28 a1       	ldd	r18, Y+32	; 0x20
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	82 0f       	add	r24, r18
    1452:	91 1d       	adc	r25, r1
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	2c 81       	ldd	r18, Y+4	; 0x04
    145a:	3d 81       	ldd	r19, Y+5	; 0x05
    145c:	82 17       	cp	r24, r18
    145e:	93 07       	cpc	r25, r19
    1460:	50 f1       	brcs	.+84     	; 0x14b6 <prvCopyDataToQueue+0xa6>
    1462:	88 81       	ld	r24, Y
    1464:	99 81       	ldd	r25, Y+1	; 0x01
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	29 c0       	rjmp	.+82     	; 0x14c0 <prvCopyDataToQueue+0xb0>
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <memcpy>
    1478:	88 a1       	ldd	r24, Y+32	; 0x20
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	91 95       	neg	r25
    147e:	81 95       	neg	r24
    1480:	91 09       	sbc	r25, r1
    1482:	2e 81       	ldd	r18, Y+6	; 0x06
    1484:	3f 81       	ldd	r19, Y+7	; 0x07
    1486:	28 0f       	add	r18, r24
    1488:	39 1f       	adc	r19, r25
    148a:	3f 83       	std	Y+7, r19	; 0x07
    148c:	2e 83       	std	Y+6, r18	; 0x06
    148e:	48 81       	ld	r20, Y
    1490:	59 81       	ldd	r21, Y+1	; 0x01
    1492:	24 17       	cp	r18, r20
    1494:	35 07       	cpc	r19, r21
    1496:	30 f4       	brcc	.+12     	; 0x14a4 <prvCopyDataToQueue+0x94>
    1498:	2c 81       	ldd	r18, Y+4	; 0x04
    149a:	3d 81       	ldd	r19, Y+5	; 0x05
    149c:	82 0f       	add	r24, r18
    149e:	93 1f       	adc	r25, r19
    14a0:	9f 83       	std	Y+7, r25	; 0x07
    14a2:	8e 83       	std	Y+6, r24	; 0x06
    14a4:	02 30       	cpi	r16, 0x02	; 2
    14a6:	49 f4       	brne	.+18     	; 0x14ba <prvCopyDataToQueue+0xaa>
    14a8:	11 23       	and	r17, r17
    14aa:	49 f0       	breq	.+18     	; 0x14be <prvCopyDataToQueue+0xae>
    14ac:	11 50       	subi	r17, 0x01	; 1
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <prvCopyDataToQueue+0xb0>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <prvCopyDataToQueue+0xb0>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <prvCopyDataToQueue+0xb0>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <prvCopyDataToQueue+0xb0>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	1f 5f       	subi	r17, 0xFF	; 255
    14c2:	1e 8f       	std	Y+30, r17	; 0x1e
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	08 95       	ret

000014ce <prvCopyDataFromQueue>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	40 a1       	ldd	r20, Z+32	; 0x20
    14d2:	44 23       	and	r20, r20
    14d4:	a9 f0       	breq	.+42     	; 0x1500 <prvCopyDataFromQueue+0x32>
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	26 81       	ldd	r18, Z+6	; 0x06
    14da:	37 81       	ldd	r19, Z+7	; 0x07
    14dc:	24 0f       	add	r18, r20
    14de:	35 1f       	adc	r19, r21
    14e0:	37 83       	std	Z+7, r19	; 0x07
    14e2:	26 83       	std	Z+6, r18	; 0x06
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	95 81       	ldd	r25, Z+5	; 0x05
    14e8:	28 17       	cp	r18, r24
    14ea:	39 07       	cpc	r19, r25
    14ec:	20 f0       	brcs	.+8      	; 0x14f6 <prvCopyDataFromQueue+0x28>
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	97 83       	std	Z+7, r25	; 0x07
    14f4:	86 83       	std	Z+6, r24	; 0x06
    14f6:	cb 01       	movw	r24, r22
    14f8:	66 81       	ldd	r22, Z+6	; 0x06
    14fa:	77 81       	ldd	r23, Z+7	; 0x07
    14fc:	0c 94 ca 25 	jmp	0x4b94	; 0x4b94 <memcpy>
    1500:	08 95       	ret

00001502 <prvUnlockQueue>:
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	8c 01       	movw	r16, r24
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	0f 92       	push	r0
    1514:	fc 01       	movw	r30, r24
    1516:	c2 a1       	ldd	r28, Z+34	; 0x22
    1518:	1c 16       	cp	r1, r28
    151a:	ac f4       	brge	.+42     	; 0x1546 <prvUnlockQueue+0x44>
    151c:	83 89       	ldd	r24, Z+19	; 0x13
    151e:	81 11       	cpse	r24, r1
    1520:	06 c0       	rjmp	.+12     	; 0x152e <prvUnlockQueue+0x2c>
    1522:	11 c0       	rjmp	.+34     	; 0x1546 <prvUnlockQueue+0x44>
    1524:	f8 01       	movw	r30, r16
    1526:	83 89       	ldd	r24, Z+19	; 0x13
    1528:	81 11       	cpse	r24, r1
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <prvUnlockQueue+0x34>
    152c:	0c c0       	rjmp	.+24     	; 0x1546 <prvUnlockQueue+0x44>
    152e:	78 01       	movw	r14, r16
    1530:	f3 e1       	ldi	r31, 0x13	; 19
    1532:	ef 0e       	add	r14, r31
    1534:	f1 1c       	adc	r15, r1
    1536:	c7 01       	movw	r24, r14
    1538:	0e 94 b4 12 	call	0x2568	; 0x2568 <xTaskRemoveFromEventList>
    153c:	81 11       	cpse	r24, r1
    153e:	0e 94 ce 13 	call	0x279c	; 0x279c <vTaskMissedYield>
    1542:	c1 50       	subi	r28, 0x01	; 1
    1544:	79 f7       	brne	.-34     	; 0x1524 <prvUnlockQueue+0x22>
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	f8 01       	movw	r30, r16
    154a:	82 a3       	std	Z+34, r24	; 0x22
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	0f 92       	push	r0
    1556:	c1 a1       	ldd	r28, Z+33	; 0x21
    1558:	1c 16       	cp	r1, r28
    155a:	a4 f4       	brge	.+40     	; 0x1584 <prvUnlockQueue+0x82>
    155c:	80 85       	ldd	r24, Z+8	; 0x08
    155e:	81 11       	cpse	r24, r1
    1560:	06 c0       	rjmp	.+12     	; 0x156e <prvUnlockQueue+0x6c>
    1562:	10 c0       	rjmp	.+32     	; 0x1584 <prvUnlockQueue+0x82>
    1564:	f8 01       	movw	r30, r16
    1566:	80 85       	ldd	r24, Z+8	; 0x08
    1568:	81 11       	cpse	r24, r1
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <prvUnlockQueue+0x74>
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <prvUnlockQueue+0x82>
    156e:	78 01       	movw	r14, r16
    1570:	f8 e0       	ldi	r31, 0x08	; 8
    1572:	ef 0e       	add	r14, r31
    1574:	f1 1c       	adc	r15, r1
    1576:	c7 01       	movw	r24, r14
    1578:	f7 d7       	rcall	.+4078   	; 0x2568 <xTaskRemoveFromEventList>
    157a:	81 11       	cpse	r24, r1
    157c:	0e 94 ce 13 	call	0x279c	; 0x279c <vTaskMissedYield>
    1580:	c1 50       	subi	r28, 0x01	; 1
    1582:	81 f7       	brne	.-32     	; 0x1564 <prvUnlockQueue+0x62>
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	f8 01       	movw	r30, r16
    1588:	81 a3       	std	Z+33, r24	; 0x21
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	08 95       	ret

0000159a <xQueueGenericReset>:
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	0f 92       	push	r0
    15a6:	e8 81       	ld	r30, Y
    15a8:	f9 81       	ldd	r31, Y+1	; 0x01
    15aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ac:	28 a1       	ldd	r18, Y+32	; 0x20
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	82 9f       	mul	r24, r18
    15b4:	a0 01       	movw	r20, r0
    15b6:	83 9f       	mul	r24, r19
    15b8:	50 0d       	add	r21, r0
    15ba:	92 9f       	mul	r25, r18
    15bc:	50 0d       	add	r21, r0
    15be:	11 24       	eor	r1, r1
    15c0:	4e 0f       	add	r20, r30
    15c2:	5f 1f       	adc	r21, r31
    15c4:	5d 83       	std	Y+5, r21	; 0x05
    15c6:	4c 83       	std	Y+4, r20	; 0x04
    15c8:	1e 8e       	std	Y+30, r1	; 0x1e
    15ca:	fb 83       	std	Y+3, r31	; 0x03
    15cc:	ea 83       	std	Y+2, r30	; 0x02
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	82 9f       	mul	r24, r18
    15d2:	a0 01       	movw	r20, r0
    15d4:	83 9f       	mul	r24, r19
    15d6:	50 0d       	add	r21, r0
    15d8:	92 9f       	mul	r25, r18
    15da:	50 0d       	add	r21, r0
    15dc:	11 24       	eor	r1, r1
    15de:	cf 01       	movw	r24, r30
    15e0:	84 0f       	add	r24, r20
    15e2:	95 1f       	adc	r25, r21
    15e4:	9f 83       	std	Y+7, r25	; 0x07
    15e6:	8e 83       	std	Y+6, r24	; 0x06
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	89 a3       	std	Y+33, r24	; 0x21
    15ec:	8a a3       	std	Y+34, r24	; 0x22
    15ee:	61 11       	cpse	r22, r1
    15f0:	0a c0       	rjmp	.+20     	; 0x1606 <xQueueGenericReset+0x6c>
    15f2:	88 85       	ldd	r24, Y+8	; 0x08
    15f4:	88 23       	and	r24, r24
    15f6:	69 f0       	breq	.+26     	; 0x1612 <xQueueGenericReset+0x78>
    15f8:	ce 01       	movw	r24, r28
    15fa:	08 96       	adiw	r24, 0x08	; 8
    15fc:	b5 d7       	rcall	.+3946   	; 0x2568 <xTaskRemoveFromEventList>
    15fe:	88 23       	and	r24, r24
    1600:	41 f0       	breq	.+16     	; 0x1612 <xQueueGenericReset+0x78>
    1602:	34 de       	rcall	.-920    	; 0x126c <vPortYield>
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <xQueueGenericReset+0x78>
    1606:	ce 01       	movw	r24, r28
    1608:	08 96       	adiw	r24, 0x08	; 8
    160a:	64 dd       	rcall	.-1336   	; 0x10d4 <vListInitialise>
    160c:	ce 01       	movw	r24, r28
    160e:	43 96       	adiw	r24, 0x13	; 19
    1610:	61 dd       	rcall	.-1342   	; 0x10d4 <vListInitialise>
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <xQueueGenericCreate>:
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	08 2f       	mov	r16, r24
    1628:	16 2f       	mov	r17, r22
    162a:	86 9f       	mul	r24, r22
    162c:	c0 01       	movw	r24, r0
    162e:	11 24       	eor	r1, r1
    1630:	83 96       	adiw	r24, 0x23	; 35
    1632:	4f dc       	rcall	.-1890   	; 0xed2 <pvPortMalloc>
    1634:	ec 01       	movw	r28, r24
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	69 f0       	breq	.+26     	; 0x1654 <xQueueGenericCreate+0x36>
    163a:	11 11       	cpse	r17, r1
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <xQueueGenericCreate+0x26>
    163e:	99 83       	std	Y+1, r25	; 0x01
    1640:	88 83       	st	Y, r24
    1642:	03 c0       	rjmp	.+6      	; 0x164a <xQueueGenericCreate+0x2c>
    1644:	83 96       	adiw	r24, 0x23	; 35
    1646:	99 83       	std	Y+1, r25	; 0x01
    1648:	88 83       	st	Y, r24
    164a:	0f 8f       	std	Y+31, r16	; 0x1f
    164c:	18 a3       	std	Y+32, r17	; 0x20
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	ce 01       	movw	r24, r28
    1652:	a3 df       	rcall	.-186    	; 0x159a <xQueueGenericReset>
    1654:	ce 01       	movw	r24, r28
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <xQueueGenericSend>:
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	29 97       	sbiw	r28, 0x09	; 9
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	7c 01       	movw	r14, r24
    1688:	5b 01       	movw	r10, r22
    168a:	2e 83       	std	Y+6, r18	; 0x06
    168c:	3f 83       	std	Y+7, r19	; 0x07
    168e:	48 87       	std	Y+8, r20	; 0x08
    1690:	59 87       	std	Y+9, r21	; 0x09
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	99 24       	eor	r9, r9
    1696:	93 94       	inc	r9
    1698:	6c 01       	movw	r12, r24
    169a:	88 e0       	ldi	r24, 0x08	; 8
    169c:	c8 0e       	add	r12, r24
    169e:	d1 1c       	adc	r13, r1
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	0f 92       	push	r0
    16a6:	f7 01       	movw	r30, r14
    16a8:	96 8d       	ldd	r25, Z+30	; 0x1e
    16aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    16ac:	98 17       	cp	r25, r24
    16ae:	10 f0       	brcs	.+4      	; 0x16b4 <xQueueGenericSend+0x54>
    16b0:	02 30       	cpi	r16, 0x02	; 2
    16b2:	a9 f4       	brne	.+42     	; 0x16de <xQueueGenericSend+0x7e>
    16b4:	40 2f       	mov	r20, r16
    16b6:	b5 01       	movw	r22, r10
    16b8:	c7 01       	movw	r24, r14
    16ba:	aa de       	rcall	.-684    	; 0x1410 <prvCopyDataToQueue>
    16bc:	f7 01       	movw	r30, r14
    16be:	93 89       	ldd	r25, Z+19	; 0x13
    16c0:	99 23       	and	r25, r25
    16c2:	39 f0       	breq	.+14     	; 0x16d2 <xQueueGenericSend+0x72>
    16c4:	c7 01       	movw	r24, r14
    16c6:	43 96       	adiw	r24, 0x13	; 19
    16c8:	4f d7       	rcall	.+3742   	; 0x2568 <xTaskRemoveFromEventList>
    16ca:	88 23       	and	r24, r24
    16cc:	21 f0       	breq	.+8      	; 0x16d6 <xQueueGenericSend+0x76>
    16ce:	ce dd       	rcall	.-1124   	; 0x126c <vPortYield>
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <xQueueGenericSend+0x76>
    16d2:	81 11       	cpse	r24, r1
    16d4:	cb dd       	rcall	.-1130   	; 0x126c <vPortYield>
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	4b c0       	rjmp	.+150    	; 0x1774 <xQueueGenericSend+0x114>
    16de:	8e 81       	ldd	r24, Y+6	; 0x06
    16e0:	9f 81       	ldd	r25, Y+7	; 0x07
    16e2:	a8 85       	ldd	r26, Y+8	; 0x08
    16e4:	b9 85       	ldd	r27, Y+9	; 0x09
    16e6:	89 2b       	or	r24, r25
    16e8:	8a 2b       	or	r24, r26
    16ea:	8b 2b       	or	r24, r27
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <xQueueGenericSend+0x96>
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <xQueueGenericSend+0x114>
    16f6:	11 11       	cpse	r17, r1
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <xQueueGenericSend+0xa2>
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	e4 d7       	rcall	.+4040   	; 0x26c8 <vTaskInternalSetTimeOutState>
    1700:	19 2d       	mov	r17, r9
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	23 d4       	rcall	.+2118   	; 0x1f4e <vTaskSuspendAll>
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	0f 92       	push	r0
    170e:	f7 01       	movw	r30, r14
    1710:	81 a1       	ldd	r24, Z+33	; 0x21
    1712:	8f 3f       	cpi	r24, 0xFF	; 255
    1714:	09 f4       	brne	.+2      	; 0x1718 <xQueueGenericSend+0xb8>
    1716:	11 a2       	std	Z+33, r1	; 0x21
    1718:	f7 01       	movw	r30, r14
    171a:	82 a1       	ldd	r24, Z+34	; 0x22
    171c:	8f 3f       	cpi	r24, 0xFF	; 255
    171e:	09 f4       	brne	.+2      	; 0x1722 <xQueueGenericSend+0xc2>
    1720:	12 a2       	std	Z+34, r1	; 0x22
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	be 01       	movw	r22, r28
    1728:	6a 5f       	subi	r22, 0xFA	; 250
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	dc d7       	rcall	.+4024   	; 0x26ea <xTaskCheckForTimeOut>
    1732:	81 11       	cpse	r24, r1
    1734:	1b c0       	rjmp	.+54     	; 0x176c <xQueueGenericSend+0x10c>
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	f7 01       	movw	r30, r14
    173e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1740:	87 8d       	ldd	r24, Z+31	; 0x1f
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	98 13       	cpse	r25, r24
    1748:	0d c0       	rjmp	.+26     	; 0x1764 <xQueueGenericSend+0x104>
    174a:	4e 81       	ldd	r20, Y+6	; 0x06
    174c:	5f 81       	ldd	r21, Y+7	; 0x07
    174e:	68 85       	ldd	r22, Y+8	; 0x08
    1750:	79 85       	ldd	r23, Y+9	; 0x09
    1752:	c6 01       	movw	r24, r12
    1754:	b0 d6       	rcall	.+3424   	; 0x24b6 <vTaskPlaceOnEventList>
    1756:	c7 01       	movw	r24, r14
    1758:	d4 de       	rcall	.-600    	; 0x1502 <prvUnlockQueue>
    175a:	3d d5       	rcall	.+2682   	; 0x21d6 <xTaskResumeAll>
    175c:	81 11       	cpse	r24, r1
    175e:	a0 cf       	rjmp	.-192    	; 0x16a0 <xQueueGenericSend+0x40>
    1760:	85 dd       	rcall	.-1270   	; 0x126c <vPortYield>
    1762:	9e cf       	rjmp	.-196    	; 0x16a0 <xQueueGenericSend+0x40>
    1764:	c7 01       	movw	r24, r14
    1766:	cd de       	rcall	.-614    	; 0x1502 <prvUnlockQueue>
    1768:	36 d5       	rcall	.+2668   	; 0x21d6 <xTaskResumeAll>
    176a:	9a cf       	rjmp	.-204    	; 0x16a0 <xQueueGenericSend+0x40>
    176c:	c7 01       	movw	r24, r14
    176e:	c9 de       	rcall	.-622    	; 0x1502 <prvUnlockQueue>
    1770:	32 d5       	rcall	.+2660   	; 0x21d6 <xTaskResumeAll>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	29 96       	adiw	r28, 0x09	; 9
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	bf 90       	pop	r11
    1792:	af 90       	pop	r10
    1794:	9f 90       	pop	r9
    1796:	08 95       	ret

00001798 <xQueueGenericSendFromISR>:
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	8a 01       	movw	r16, r20
    17a6:	fc 01       	movw	r30, r24
    17a8:	56 8d       	ldd	r21, Z+30	; 0x1e
    17aa:	37 8d       	ldd	r19, Z+31	; 0x1f
    17ac:	53 17       	cp	r21, r19
    17ae:	10 f0       	brcs	.+4      	; 0x17b4 <xQueueGenericSendFromISR+0x1c>
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	f1 f4       	brne	.+60     	; 0x17f0 <xQueueGenericSendFromISR+0x58>
    17b4:	42 2f       	mov	r20, r18
    17b6:	78 01       	movw	r14, r16
    17b8:	ec 01       	movw	r28, r24
    17ba:	1a a1       	ldd	r17, Y+34	; 0x22
    17bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17be:	ce 01       	movw	r24, r28
    17c0:	27 de       	rcall	.-946    	; 0x1410 <prvCopyDataToQueue>
    17c2:	1f 3f       	cpi	r17, 0xFF	; 255
    17c4:	79 f4       	brne	.+30     	; 0x17e4 <xQueueGenericSendFromISR+0x4c>
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	88 23       	and	r24, r24
    17ca:	a1 f0       	breq	.+40     	; 0x17f4 <xQueueGenericSendFromISR+0x5c>
    17cc:	ce 01       	movw	r24, r28
    17ce:	43 96       	adiw	r24, 0x13	; 19
    17d0:	cb d6       	rcall	.+3478   	; 0x2568 <xTaskRemoveFromEventList>
    17d2:	88 23       	and	r24, r24
    17d4:	89 f0       	breq	.+34     	; 0x17f8 <xQueueGenericSendFromISR+0x60>
    17d6:	e1 14       	cp	r14, r1
    17d8:	f1 04       	cpc	r15, r1
    17da:	81 f0       	breq	.+32     	; 0x17fc <xQueueGenericSendFromISR+0x64>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	f7 01       	movw	r30, r14
    17e0:	80 83       	st	Z, r24
    17e2:	0d c0       	rjmp	.+26     	; 0x17fe <xQueueGenericSendFromISR+0x66>
    17e4:	ff 24       	eor	r15, r15
    17e6:	f3 94       	inc	r15
    17e8:	f1 0e       	add	r15, r17
    17ea:	fa a2       	std	Y+34, r15	; 0x22
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <xQueueGenericSendFromISR+0x66>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <xQueueGenericSendFromISR+0x66>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <xQueueGenericSendFromISR+0x66>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <xQueueGenericSendFromISR+0x66>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	08 95       	ret

0000180c <xQueueReceive>:
    180c:	9f 92       	push	r9
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	29 97       	sbiw	r28, 0x09	; 9
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	8c 01       	movw	r16, r24
    1834:	5b 01       	movw	r10, r22
    1836:	2e 83       	std	Y+6, r18	; 0x06
    1838:	3f 83       	std	Y+7, r19	; 0x07
    183a:	48 87       	std	Y+8, r20	; 0x08
    183c:	59 87       	std	Y+9, r21	; 0x09
    183e:	e1 2c       	mov	r14, r1
    1840:	99 24       	eor	r9, r9
    1842:	93 94       	inc	r9
    1844:	6c 01       	movw	r12, r24
    1846:	83 e1       	ldi	r24, 0x13	; 19
    1848:	c8 0e       	add	r12, r24
    184a:	d1 1c       	adc	r13, r1
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	0f 92       	push	r0
    1852:	f8 01       	movw	r30, r16
    1854:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1856:	ff 20       	and	r15, r15
    1858:	91 f0       	breq	.+36     	; 0x187e <xQueueReceive+0x72>
    185a:	b5 01       	movw	r22, r10
    185c:	c8 01       	movw	r24, r16
    185e:	37 de       	rcall	.-914    	; 0x14ce <prvCopyDataFromQueue>
    1860:	fa 94       	dec	r15
    1862:	f8 01       	movw	r30, r16
    1864:	f6 8e       	std	Z+30, r15	; 0x1e
    1866:	80 85       	ldd	r24, Z+8	; 0x08
    1868:	88 23       	and	r24, r24
    186a:	29 f0       	breq	.+10     	; 0x1876 <xQueueReceive+0x6a>
    186c:	c8 01       	movw	r24, r16
    186e:	08 96       	adiw	r24, 0x08	; 8
    1870:	7b d6       	rcall	.+3318   	; 0x2568 <xTaskRemoveFromEventList>
    1872:	81 11       	cpse	r24, r1
    1874:	fb dc       	rcall	.-1546   	; 0x126c <vPortYield>
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	4a c0       	rjmp	.+148    	; 0x1912 <xQueueReceive+0x106>
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
    1880:	9f 81       	ldd	r25, Y+7	; 0x07
    1882:	a8 85       	ldd	r26, Y+8	; 0x08
    1884:	b9 85       	ldd	r27, Y+9	; 0x09
    1886:	89 2b       	or	r24, r25
    1888:	8a 2b       	or	r24, r26
    188a:	8b 2b       	or	r24, r27
    188c:	21 f4       	brne	.+8      	; 0x1896 <xQueueReceive+0x8a>
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	3e c0       	rjmp	.+124    	; 0x1912 <xQueueReceive+0x106>
    1896:	e1 10       	cpse	r14, r1
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <xQueueReceive+0x96>
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	14 d7       	rcall	.+3624   	; 0x26c8 <vTaskInternalSetTimeOutState>
    18a0:	e9 2c       	mov	r14, r9
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	53 d3       	rcall	.+1702   	; 0x1f4e <vTaskSuspendAll>
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	0f 92       	push	r0
    18ae:	f8 01       	movw	r30, r16
    18b0:	81 a1       	ldd	r24, Z+33	; 0x21
    18b2:	8f 3f       	cpi	r24, 0xFF	; 255
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <xQueueReceive+0xac>
    18b6:	11 a2       	std	Z+33, r1	; 0x21
    18b8:	f8 01       	movw	r30, r16
    18ba:	82 a1       	ldd	r24, Z+34	; 0x22
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	09 f4       	brne	.+2      	; 0x18c2 <xQueueReceive+0xb6>
    18c0:	12 a2       	std	Z+34, r1	; 0x22
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	be 01       	movw	r22, r28
    18c8:	6a 5f       	subi	r22, 0xFA	; 250
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	ce 01       	movw	r24, r28
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	0c d7       	rcall	.+3608   	; 0x26ea <xTaskCheckForTimeOut>
    18d2:	81 11       	cpse	r24, r1
    18d4:	15 c0       	rjmp	.+42     	; 0x1900 <xQueueReceive+0xf4>
    18d6:	c8 01       	movw	r24, r16
    18d8:	90 dd       	rcall	.-1248   	; 0x13fa <prvIsQueueEmpty>
    18da:	88 23       	and	r24, r24
    18dc:	69 f0       	breq	.+26     	; 0x18f8 <xQueueReceive+0xec>
    18de:	4e 81       	ldd	r20, Y+6	; 0x06
    18e0:	5f 81       	ldd	r21, Y+7	; 0x07
    18e2:	68 85       	ldd	r22, Y+8	; 0x08
    18e4:	79 85       	ldd	r23, Y+9	; 0x09
    18e6:	c6 01       	movw	r24, r12
    18e8:	e6 d5       	rcall	.+3020   	; 0x24b6 <vTaskPlaceOnEventList>
    18ea:	c8 01       	movw	r24, r16
    18ec:	0a de       	rcall	.-1004   	; 0x1502 <prvUnlockQueue>
    18ee:	73 d4       	rcall	.+2278   	; 0x21d6 <xTaskResumeAll>
    18f0:	81 11       	cpse	r24, r1
    18f2:	ac cf       	rjmp	.-168    	; 0x184c <xQueueReceive+0x40>
    18f4:	bb dc       	rcall	.-1674   	; 0x126c <vPortYield>
    18f6:	aa cf       	rjmp	.-172    	; 0x184c <xQueueReceive+0x40>
    18f8:	c8 01       	movw	r24, r16
    18fa:	03 de       	rcall	.-1018   	; 0x1502 <prvUnlockQueue>
    18fc:	6c d4       	rcall	.+2264   	; 0x21d6 <xTaskResumeAll>
    18fe:	a6 cf       	rjmp	.-180    	; 0x184c <xQueueReceive+0x40>
    1900:	c8 01       	movw	r24, r16
    1902:	ff dd       	rcall	.-1026   	; 0x1502 <prvUnlockQueue>
    1904:	68 d4       	rcall	.+2256   	; 0x21d6 <xTaskResumeAll>
    1906:	c8 01       	movw	r24, r16
    1908:	78 dd       	rcall	.-1296   	; 0x13fa <prvIsQueueEmpty>
    190a:	88 23       	and	r24, r24
    190c:	09 f4       	brne	.+2      	; 0x1910 <xQueueReceive+0x104>
    190e:	9e cf       	rjmp	.-196    	; 0x184c <xQueueReceive+0x40>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	29 96       	adiw	r28, 0x09	; 9
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	9f 90       	pop	r9
    1934:	08 95       	ret

00001936 <xQueueSemaphoreTake>:
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	29 97       	sbiw	r28, 0x09	; 9
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	8c 01       	movw	r16, r24
    195a:	4e 83       	std	Y+6, r20	; 0x06
    195c:	5f 83       	std	Y+7, r21	; 0x07
    195e:	68 87       	std	Y+8, r22	; 0x08
    1960:	79 87       	std	Y+9, r23	; 0x09
    1962:	b1 2c       	mov	r11, r1
    1964:	d1 2c       	mov	r13, r1
    1966:	cc 24       	eor	r12, r12
    1968:	c3 94       	inc	r12
    196a:	7c 01       	movw	r14, r24
    196c:	83 e1       	ldi	r24, 0x13	; 19
    196e:	e8 0e       	add	r14, r24
    1970:	f1 1c       	adc	r15, r1
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	0f 92       	push	r0
    1978:	d8 01       	movw	r26, r16
    197a:	5e 96       	adiw	r26, 0x1e	; 30
    197c:	8c 91       	ld	r24, X
    197e:	5e 97       	sbiw	r26, 0x1e	; 30
    1980:	88 23       	and	r24, r24
    1982:	d9 f0       	breq	.+54     	; 0x19ba <xQueueSemaphoreTake+0x84>
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	5e 96       	adiw	r26, 0x1e	; 30
    1988:	8c 93       	st	X, r24
    198a:	5e 97       	sbiw	r26, 0x1e	; 30
    198c:	8d 91       	ld	r24, X+
    198e:	9c 91       	ld	r25, X
    1990:	89 2b       	or	r24, r25
    1992:	29 f4       	brne	.+10     	; 0x199e <xQueueSemaphoreTake+0x68>
    1994:	0e 94 29 15 	call	0x2a52	; 0x2a52 <pvTaskIncrementMutexHeldCount>
    1998:	f8 01       	movw	r30, r16
    199a:	95 83       	std	Z+5, r25	; 0x05
    199c:	84 83       	std	Z+4, r24	; 0x04
    199e:	d8 01       	movw	r26, r16
    19a0:	18 96       	adiw	r26, 0x08	; 8
    19a2:	8c 91       	ld	r24, X
    19a4:	88 23       	and	r24, r24
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <xQueueSemaphoreTake+0x7c>
    19a8:	c8 01       	movw	r24, r16
    19aa:	08 96       	adiw	r24, 0x08	; 8
    19ac:	dd d5       	rcall	.+3002   	; 0x2568 <xTaskRemoveFromEventList>
    19ae:	81 11       	cpse	r24, r1
    19b0:	5d dc       	rcall	.-1862   	; 0x126c <vPortYield>
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	76 c0       	rjmp	.+236    	; 0x1aa6 <xQueueSemaphoreTake+0x170>
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	a8 85       	ldd	r26, Y+8	; 0x08
    19c0:	b9 85       	ldd	r27, Y+9	; 0x09
    19c2:	89 2b       	or	r24, r25
    19c4:	8a 2b       	or	r24, r26
    19c6:	8b 2b       	or	r24, r27
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <xQueueSemaphoreTake+0x9c>
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	6a c0       	rjmp	.+212    	; 0x1aa6 <xQueueSemaphoreTake+0x170>
    19d2:	d1 10       	cpse	r13, r1
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <xQueueSemaphoreTake+0xa8>
    19d6:	ce 01       	movw	r24, r28
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	76 d6       	rcall	.+3308   	; 0x26c8 <vTaskInternalSetTimeOutState>
    19dc:	dc 2c       	mov	r13, r12
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	b5 d2       	rcall	.+1386   	; 0x1f4e <vTaskSuspendAll>
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	0f 92       	push	r0
    19ea:	f8 01       	movw	r30, r16
    19ec:	81 a1       	ldd	r24, Z+33	; 0x21
    19ee:	8f 3f       	cpi	r24, 0xFF	; 255
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <xQueueSemaphoreTake+0xbe>
    19f2:	11 a2       	std	Z+33, r1	; 0x21
    19f4:	d8 01       	movw	r26, r16
    19f6:	92 96       	adiw	r26, 0x22	; 34
    19f8:	8c 91       	ld	r24, X
    19fa:	92 97       	sbiw	r26, 0x22	; 34
    19fc:	8f 3f       	cpi	r24, 0xFF	; 255
    19fe:	11 f4       	brne	.+4      	; 0x1a04 <xQueueSemaphoreTake+0xce>
    1a00:	92 96       	adiw	r26, 0x22	; 34
    1a02:	1c 92       	st	X, r1
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	be 01       	movw	r22, r28
    1a0a:	6a 5f       	subi	r22, 0xFA	; 250
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	ce 01       	movw	r24, r28
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	6b d6       	rcall	.+3286   	; 0x26ea <xTaskCheckForTimeOut>
    1a14:	81 11       	cpse	r24, r1
    1a16:	23 c0       	rjmp	.+70     	; 0x1a5e <xQueueSemaphoreTake+0x128>
    1a18:	c8 01       	movw	r24, r16
    1a1a:	ef dc       	rcall	.-1570   	; 0x13fa <prvIsQueueEmpty>
    1a1c:	88 23       	and	r24, r24
    1a1e:	d9 f0       	breq	.+54     	; 0x1a56 <xQueueSemaphoreTake+0x120>
    1a20:	f8 01       	movw	r30, r16
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	89 2b       	or	r24, r25
    1a28:	49 f4       	brne	.+18     	; 0x1a3c <xQueueSemaphoreTake+0x106>
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
    1a30:	84 81       	ldd	r24, Z+4	; 0x04
    1a32:	95 81       	ldd	r25, Z+5	; 0x05
    1a34:	c5 d6       	rcall	.+3466   	; 0x27c0 <xTaskPriorityInherit>
    1a36:	b8 2e       	mov	r11, r24
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a3e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a40:	68 85       	ldd	r22, Y+8	; 0x08
    1a42:	79 85       	ldd	r23, Y+9	; 0x09
    1a44:	c7 01       	movw	r24, r14
    1a46:	37 d5       	rcall	.+2670   	; 0x24b6 <vTaskPlaceOnEventList>
    1a48:	c8 01       	movw	r24, r16
    1a4a:	5b dd       	rcall	.-1354   	; 0x1502 <prvUnlockQueue>
    1a4c:	c4 d3       	rcall	.+1928   	; 0x21d6 <xTaskResumeAll>
    1a4e:	81 11       	cpse	r24, r1
    1a50:	90 cf       	rjmp	.-224    	; 0x1972 <xQueueSemaphoreTake+0x3c>
    1a52:	0c dc       	rcall	.-2024   	; 0x126c <vPortYield>
    1a54:	8e cf       	rjmp	.-228    	; 0x1972 <xQueueSemaphoreTake+0x3c>
    1a56:	c8 01       	movw	r24, r16
    1a58:	54 dd       	rcall	.-1368   	; 0x1502 <prvUnlockQueue>
    1a5a:	bd d3       	rcall	.+1914   	; 0x21d6 <xTaskResumeAll>
    1a5c:	8a cf       	rjmp	.-236    	; 0x1972 <xQueueSemaphoreTake+0x3c>
    1a5e:	c8 01       	movw	r24, r16
    1a60:	50 dd       	rcall	.-1376   	; 0x1502 <prvUnlockQueue>
    1a62:	b9 d3       	rcall	.+1906   	; 0x21d6 <xTaskResumeAll>
    1a64:	c8 01       	movw	r24, r16
    1a66:	c9 dc       	rcall	.-1646   	; 0x13fa <prvIsQueueEmpty>
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <xQueueSemaphoreTake+0x138>
    1a6c:	82 cf       	rjmp	.-252    	; 0x1972 <xQueueSemaphoreTake+0x3c>
    1a6e:	bb 20       	and	r11, r11
    1a70:	c9 f0       	breq	.+50     	; 0x1aa4 <xQueueSemaphoreTake+0x16e>
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	0f 92       	push	r0
    1a78:	f8 01       	movw	r30, r16
    1a7a:	83 89       	ldd	r24, Z+19	; 0x13
    1a7c:	88 23       	and	r24, r24
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <xQueueSemaphoreTake+0x158>
    1a80:	02 8c       	ldd	r0, Z+26	; 0x1a
    1a82:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1a84:	e0 2d       	mov	r30, r0
    1a86:	80 81       	ld	r24, Z
    1a88:	6a e0       	ldi	r22, 0x0A	; 10
    1a8a:	68 1b       	sub	r22, r24
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <xQueueSemaphoreTake+0x15a>
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	d8 01       	movw	r26, r16
    1a92:	14 96       	adiw	r26, 0x04	; 4
    1a94:	8d 91       	ld	r24, X+
    1a96:	9c 91       	ld	r25, X
    1a98:	15 97       	sbiw	r26, 0x05	; 5
    1a9a:	74 d7       	rcall	.+3816   	; 0x2984 <vTaskPriorityDisinheritAfterTimeout>
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <xQueueSemaphoreTake+0x170>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	29 96       	adiw	r28, 0x09	; 9
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	08 95       	ret

00001ac6 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	0f 92       	push	r0
    1ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <vQueueWaitForMessageRestricted+0x14>
    1ad8:	19 a2       	std	Y+33, r1	; 0x21
    1ada:	8a a1       	ldd	r24, Y+34	; 0x22
    1adc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <vQueueWaitForMessageRestricted+0x1c>
    1ae0:	1a a2       	std	Y+34, r1	; 0x22
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1ae6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ae8:	81 11       	cpse	r24, r1
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1aec:	ce 01       	movw	r24, r28
    1aee:	43 96       	adiw	r24, 0x13	; 19
    1af0:	f9 d4       	rcall	.+2546   	; 0x24e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1af2:	ce 01       	movw	r24, r28
    1af4:	06 dd       	rcall	.-1524   	; 0x1502 <prvUnlockQueue>
    }
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <prvResetNextTaskUnblockTime>:
    1afc:	e0 91 6b 0d 	lds	r30, 0x0D6B	; 0x800d6b <pxDelayedTaskList>
    1b00:	f0 91 6c 0d 	lds	r31, 0x0D6C	; 0x800d6c <pxDelayedTaskList+0x1>
    1b04:	80 81       	ld	r24, Z
    1b06:	81 11       	cpse	r24, r1
    1b08:	0c c0       	rjmp	.+24     	; 0x1b22 <prvResetNextTaskUnblockTime+0x26>
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
    1b0e:	dc 01       	movw	r26, r24
    1b10:	80 93 35 0d 	sts	0x0D35, r24	; 0x800d35 <xNextTaskUnblockTime>
    1b14:	90 93 36 0d 	sts	0x0D36, r25	; 0x800d36 <xNextTaskUnblockTime+0x1>
    1b18:	a0 93 37 0d 	sts	0x0D37, r26	; 0x800d37 <xNextTaskUnblockTime+0x2>
    1b1c:	b0 93 38 0d 	sts	0x0D38, r27	; 0x800d38 <xNextTaskUnblockTime+0x3>
    1b20:	08 95       	ret
    1b22:	e0 91 6b 0d 	lds	r30, 0x0D6B	; 0x800d6b <pxDelayedTaskList>
    1b26:	f0 91 6c 0d 	lds	r31, 0x0D6C	; 0x800d6c <pxDelayedTaskList+0x1>
    1b2a:	07 80       	ldd	r0, Z+7	; 0x07
    1b2c:	f0 85       	ldd	r31, Z+8	; 0x08
    1b2e:	e0 2d       	mov	r30, r0
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	a2 81       	ldd	r26, Z+2	; 0x02
    1b36:	b3 81       	ldd	r27, Z+3	; 0x03
    1b38:	80 93 35 0d 	sts	0x0D35, r24	; 0x800d35 <xNextTaskUnblockTime>
    1b3c:	90 93 36 0d 	sts	0x0D36, r25	; 0x800d36 <xNextTaskUnblockTime+0x1>
    1b40:	a0 93 37 0d 	sts	0x0D37, r26	; 0x800d37 <xNextTaskUnblockTime+0x2>
    1b44:	b0 93 38 0d 	sts	0x0D38, r27	; 0x800d38 <xNextTaskUnblockTime+0x3>
    1b48:	08 95       	ret

00001b4a <prvAddCurrentTaskToDelayedList>:
    1b4a:	8f 92       	push	r8
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	6b 01       	movw	r12, r22
    1b60:	7c 01       	movw	r14, r24
    1b62:	c4 2f       	mov	r28, r20
    1b64:	80 90 42 0d 	lds	r8, 0x0D42	; 0x800d42 <xTickCount>
    1b68:	90 90 43 0d 	lds	r9, 0x0D43	; 0x800d43 <xTickCount+0x1>
    1b6c:	a0 90 44 0d 	lds	r10, 0x0D44	; 0x800d44 <xTickCount+0x2>
    1b70:	b0 90 45 0d 	lds	r11, 0x0D45	; 0x800d45 <xTickCount+0x3>
    1b74:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1b78:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1b7c:	02 96       	adiw	r24, 0x02	; 2
    1b7e:	fc da       	rcall	.-2568   	; 0x1178 <uxListRemove>
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	c8 16       	cp	r12, r24
    1b84:	d8 06       	cpc	r13, r24
    1b86:	e8 06       	cpc	r14, r24
    1b88:	f8 06       	cpc	r15, r24
    1b8a:	b1 f5       	brne	.+108    	; 0x1bf8 <prvAddCurrentTaskToDelayedList+0xae>
    1b8c:	cc 23       	and	r28, r28
    1b8e:	a1 f1       	breq	.+104    	; 0x1bf8 <prvAddCurrentTaskToDelayedList+0xae>
    1b90:	e7 e4       	ldi	r30, 0x47	; 71
    1b92:	fd e0       	ldi	r31, 0x0D	; 13
    1b94:	a1 81       	ldd	r26, Z+1	; 0x01
    1b96:	b2 81       	ldd	r27, Z+2	; 0x02
    1b98:	c0 91 f1 0d 	lds	r28, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1b9c:	d0 91 f2 0d 	lds	r29, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1ba0:	bf 83       	std	Y+7, r27	; 0x07
    1ba2:	ae 83       	std	Y+6, r26	; 0x06
    1ba4:	c0 91 f1 0d 	lds	r28, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1ba8:	d0 91 f2 0d 	lds	r29, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1bac:	16 96       	adiw	r26, 0x06	; 6
    1bae:	8d 91       	ld	r24, X+
    1bb0:	9c 91       	ld	r25, X
    1bb2:	17 97       	sbiw	r26, 0x07	; 7
    1bb4:	99 87       	std	Y+9, r25	; 0x09
    1bb6:	88 87       	std	Y+8, r24	; 0x08
    1bb8:	16 96       	adiw	r26, 0x06	; 6
    1bba:	cd 91       	ld	r28, X+
    1bbc:	dc 91       	ld	r29, X
    1bbe:	17 97       	sbiw	r26, 0x07	; 7
    1bc0:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1bc4:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1bc8:	02 96       	adiw	r24, 0x02	; 2
    1bca:	9d 83       	std	Y+5, r25	; 0x05
    1bcc:	8c 83       	std	Y+4, r24	; 0x04
    1bce:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1bd2:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1bd6:	02 96       	adiw	r24, 0x02	; 2
    1bd8:	17 96       	adiw	r26, 0x07	; 7
    1bda:	9c 93       	st	X, r25
    1bdc:	8e 93       	st	-X, r24
    1bde:	16 97       	sbiw	r26, 0x06	; 6
    1be0:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1be4:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1be8:	1d 96       	adiw	r26, 0x0d	; 13
    1bea:	fc 93       	st	X, r31
    1bec:	ee 93       	st	-X, r30
    1bee:	1c 97       	sbiw	r26, 0x0c	; 12
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	80 83       	st	Z, r24
    1bf6:	3d c0       	rjmp	.+122    	; 0x1c72 <prvAddCurrentTaskToDelayedList+0x128>
    1bf8:	c8 0c       	add	r12, r8
    1bfa:	d9 1c       	adc	r13, r9
    1bfc:	ea 1c       	adc	r14, r10
    1bfe:	fb 1c       	adc	r15, r11
    1c00:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1c04:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1c08:	c2 82       	std	Z+2, r12	; 0x02
    1c0a:	d3 82       	std	Z+3, r13	; 0x03
    1c0c:	e4 82       	std	Z+4, r14	; 0x04
    1c0e:	f5 82       	std	Z+5, r15	; 0x05
    1c10:	c8 14       	cp	r12, r8
    1c12:	d9 04       	cpc	r13, r9
    1c14:	ea 04       	cpc	r14, r10
    1c16:	fb 04       	cpc	r15, r11
    1c18:	60 f4       	brcc	.+24     	; 0x1c32 <prvAddCurrentTaskToDelayedList+0xe8>
    1c1a:	60 91 f1 0d 	lds	r22, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1c1e:	70 91 f2 0d 	lds	r23, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1c22:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <pxOverflowDelayedTaskList>
    1c26:	90 91 6a 0d 	lds	r25, 0x0D6A	; 0x800d6a <pxOverflowDelayedTaskList+0x1>
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	67 da       	rcall	.-2866   	; 0x10fe <vListInsert>
    1c30:	20 c0       	rjmp	.+64     	; 0x1c72 <prvAddCurrentTaskToDelayedList+0x128>
    1c32:	60 91 f1 0d 	lds	r22, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1c36:	70 91 f2 0d 	lds	r23, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1c3a:	80 91 6b 0d 	lds	r24, 0x0D6B	; 0x800d6b <pxDelayedTaskList>
    1c3e:	90 91 6c 0d 	lds	r25, 0x0D6C	; 0x800d6c <pxDelayedTaskList+0x1>
    1c42:	6e 5f       	subi	r22, 0xFE	; 254
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	5b da       	rcall	.-2890   	; 0x10fe <vListInsert>
    1c48:	80 91 35 0d 	lds	r24, 0x0D35	; 0x800d35 <xNextTaskUnblockTime>
    1c4c:	90 91 36 0d 	lds	r25, 0x0D36	; 0x800d36 <xNextTaskUnblockTime+0x1>
    1c50:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <xNextTaskUnblockTime+0x2>
    1c54:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <xNextTaskUnblockTime+0x3>
    1c58:	c8 16       	cp	r12, r24
    1c5a:	d9 06       	cpc	r13, r25
    1c5c:	ea 06       	cpc	r14, r26
    1c5e:	fb 06       	cpc	r15, r27
    1c60:	40 f4       	brcc	.+16     	; 0x1c72 <prvAddCurrentTaskToDelayedList+0x128>
    1c62:	c0 92 35 0d 	sts	0x0D35, r12	; 0x800d35 <xNextTaskUnblockTime>
    1c66:	d0 92 36 0d 	sts	0x0D36, r13	; 0x800d36 <xNextTaskUnblockTime+0x1>
    1c6a:	e0 92 37 0d 	sts	0x0D37, r14	; 0x800d37 <xNextTaskUnblockTime+0x2>
    1c6e:	f0 92 38 0d 	sts	0x0D38, r15	; 0x800d38 <xNextTaskUnblockTime+0x3>
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	bf 90       	pop	r11
    1c80:	af 90       	pop	r10
    1c82:	9f 90       	pop	r9
    1c84:	8f 90       	pop	r8
    1c86:	08 95       	ret

00001c88 <xTaskCreate>:
    1c88:	4f 92       	push	r4
    1c8a:	5f 92       	push	r5
    1c8c:	6f 92       	push	r6
    1c8e:	7f 92       	push	r7
    1c90:	8f 92       	push	r8
    1c92:	9f 92       	push	r9
    1c94:	af 92       	push	r10
    1c96:	bf 92       	push	r11
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	4c 01       	movw	r8, r24
    1caa:	6b 01       	movw	r12, r22
    1cac:	5a 01       	movw	r10, r20
    1cae:	29 01       	movw	r4, r18
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	0f d9       	rcall	.-3554   	; 0xed2 <pvPortMalloc>
    1cb4:	3c 01       	movw	r6, r24
    1cb6:	89 2b       	or	r24, r25
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <xTaskCreate+0x34>
    1cba:	01 c1       	rjmp	.+514    	; 0x1ebe <xTaskCreate+0x236>
    1cbc:	84 e3       	ldi	r24, 0x34	; 52
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	08 d9       	rcall	.-3568   	; 0xed2 <pvPortMalloc>
    1cc2:	ec 01       	movw	r28, r24
    1cc4:	89 2b       	or	r24, r25
    1cc6:	99 f0       	breq	.+38     	; 0x1cee <xTaskCreate+0x66>
    1cc8:	7c 8e       	std	Y+28, r7	; 0x1c
    1cca:	6b 8e       	std	Y+27, r6	; 0x1b
    1ccc:	a5 01       	movw	r20, r10
    1cce:	65 ea       	ldi	r22, 0xA5	; 165
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	c3 01       	movw	r24, r6
    1cd4:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <memset>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	a8 1a       	sub	r10, r24
    1cdc:	b1 08       	sbc	r11, r1
    1cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce2:	a8 0e       	add	r10, r24
    1ce4:	b9 1e       	adc	r11, r25
    1ce6:	c1 14       	cp	r12, r1
    1ce8:	d1 04       	cpc	r13, r1
    1cea:	21 f4       	brne	.+8      	; 0x1cf4 <xTaskCreate+0x6c>
    1cec:	1f c0       	rjmp	.+62     	; 0x1d2c <xTaskCreate+0xa4>
    1cee:	c3 01       	movw	r24, r6
    1cf0:	b8 d9       	rcall	.-3216   	; 0x1062 <vPortFree>
    1cf2:	e5 c0       	rjmp	.+458    	; 0x1ebe <xTaskCreate+0x236>
    1cf4:	d6 01       	movw	r26, r12
    1cf6:	8c 91       	ld	r24, X
    1cf8:	8d 8f       	std	Y+29, r24	; 0x1d
    1cfa:	8c 91       	ld	r24, X
    1cfc:	88 23       	and	r24, r24
    1cfe:	a1 f0       	breq	.+40     	; 0x1d28 <xTaskCreate+0xa0>
    1d00:	ae 01       	movw	r20, r28
    1d02:	42 5e       	subi	r20, 0xE2	; 226
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255
    1d06:	f6 01       	movw	r30, r12
    1d08:	31 96       	adiw	r30, 0x01	; 1
    1d0a:	b0 e1       	ldi	r27, 0x10	; 16
    1d0c:	cb 0e       	add	r12, r27
    1d0e:	d1 1c       	adc	r13, r1
    1d10:	cf 01       	movw	r24, r30
    1d12:	21 91       	ld	r18, Z+
    1d14:	da 01       	movw	r26, r20
    1d16:	2d 93       	st	X+, r18
    1d18:	ad 01       	movw	r20, r26
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	8c 91       	ld	r24, X
    1d1e:	88 23       	and	r24, r24
    1d20:	19 f0       	breq	.+6      	; 0x1d28 <xTaskCreate+0xa0>
    1d22:	ce 16       	cp	r12, r30
    1d24:	df 06       	cpc	r13, r31
    1d26:	a1 f7       	brne	.-24     	; 0x1d10 <xTaskCreate+0x88>
    1d28:	1c a6       	std	Y+44, r1	; 0x2c
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <xTaskCreate+0xa6>
    1d2c:	1d 8e       	std	Y+29, r1	; 0x1d
    1d2e:	0a 30       	cpi	r16, 0x0A	; 10
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <xTaskCreate+0xac>
    1d32:	09 e0       	ldi	r16, 0x09	; 9
    1d34:	0a 8f       	std	Y+26, r16	; 0x1a
    1d36:	0d a7       	std	Y+45, r16	; 0x2d
    1d38:	1e a6       	std	Y+46, r1	; 0x2e
    1d3a:	6e 01       	movw	r12, r28
    1d3c:	b2 e0       	ldi	r27, 0x02	; 2
    1d3e:	cb 0e       	add	r12, r27
    1d40:	d1 1c       	adc	r13, r1
    1d42:	c6 01       	movw	r24, r12
    1d44:	d8 d9       	rcall	.-3152   	; 0x10f6 <vListInitialiseItem>
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 96       	adiw	r24, 0x0e	; 14
    1d4a:	d5 d9       	rcall	.-3158   	; 0x10f6 <vListInitialiseItem>
    1d4c:	db 87       	std	Y+11, r29	; 0x0b
    1d4e:	ca 87       	std	Y+10, r28	; 0x0a
    1d50:	8a e0       	ldi	r24, 0x0A	; 10
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	80 1b       	sub	r24, r16
    1d5a:	91 09       	sbc	r25, r1
    1d5c:	a1 09       	sbc	r26, r1
    1d5e:	b1 09       	sbc	r27, r1
    1d60:	8e 87       	std	Y+14, r24	; 0x0e
    1d62:	9f 87       	std	Y+15, r25	; 0x0f
    1d64:	a8 8b       	std	Y+16, r26	; 0x10
    1d66:	b9 8b       	std	Y+17, r27	; 0x11
    1d68:	df 8b       	std	Y+23, r29	; 0x17
    1d6a:	ce 8b       	std	Y+22, r28	; 0x16
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	fe 01       	movw	r30, r28
    1d70:	bf 96       	adiw	r30, 0x2f	; 47
    1d72:	df 01       	movw	r26, r30
    1d74:	1d 92       	st	X+, r1
    1d76:	8a 95       	dec	r24
    1d78:	e9 f7       	brne	.-6      	; 0x1d74 <xTaskCreate+0xec>
    1d7a:	1b aa       	std	Y+51, r1	; 0x33
    1d7c:	a2 01       	movw	r20, r4
    1d7e:	b4 01       	movw	r22, r8
    1d80:	c5 01       	movw	r24, r10
    1d82:	21 da       	rcall	.-3006   	; 0x11c6 <pxPortInitialiseStack>
    1d84:	99 83       	std	Y+1, r25	; 0x01
    1d86:	88 83       	st	Y, r24
    1d88:	e1 14       	cp	r14, r1
    1d8a:	f1 04       	cpc	r15, r1
    1d8c:	19 f0       	breq	.+6      	; 0x1d94 <xTaskCreate+0x10c>
    1d8e:	f7 01       	movw	r30, r14
    1d90:	d1 83       	std	Z+1, r29	; 0x01
    1d92:	c0 83       	st	Z, r28
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	0f 92       	push	r0
    1d9a:	80 91 46 0d 	lds	r24, 0x0D46	; 0x800d46 <uxCurrentNumberOfTasks>
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	80 93 46 0d 	sts	0x0D46, r24	; 0x800d46 <uxCurrentNumberOfTasks>
    1da4:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1da8:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1dac:	89 2b       	or	r24, r25
    1dae:	a1 f5       	brne	.+104    	; 0x1e18 <xTaskCreate+0x190>
    1db0:	d0 93 f2 0d 	sts	0x0DF2, r29	; 0x800df2 <pxCurrentTCB+0x1>
    1db4:	c0 93 f1 0d 	sts	0x0DF1, r28	; 0x800df1 <pxCurrentTCB>
    1db8:	80 91 46 0d 	lds	r24, 0x0D46	; 0x800d46 <uxCurrentNumberOfTasks>
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <xTaskCreate+0x13a>
    1dc0:	3b c0       	rjmp	.+118    	; 0x1e38 <xTaskCreate+0x1b0>
    1dc2:	03 e8       	ldi	r16, 0x83	; 131
    1dc4:	1d e0       	ldi	r17, 0x0D	; 13
    1dc6:	0f 2e       	mov	r0, r31
    1dc8:	f1 ef       	ldi	r31, 0xF1	; 241
    1dca:	ef 2e       	mov	r14, r31
    1dcc:	fd e0       	ldi	r31, 0x0D	; 13
    1dce:	ff 2e       	mov	r15, r31
    1dd0:	f0 2d       	mov	r31, r0
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	7f d9       	rcall	.-3330   	; 0x10d4 <vListInitialise>
    1dd6:	05 5f       	subi	r16, 0xF5	; 245
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	0e 15       	cp	r16, r14
    1ddc:	1f 05       	cpc	r17, r15
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <xTaskCreate+0x14a>
    1de0:	88 e7       	ldi	r24, 0x78	; 120
    1de2:	9d e0       	ldi	r25, 0x0D	; 13
    1de4:	77 d9       	rcall	.-3346   	; 0x10d4 <vListInitialise>
    1de6:	8d e6       	ldi	r24, 0x6D	; 109
    1de8:	9d e0       	ldi	r25, 0x0D	; 13
    1dea:	74 d9       	rcall	.-3352   	; 0x10d4 <vListInitialise>
    1dec:	8e e5       	ldi	r24, 0x5E	; 94
    1dee:	9d e0       	ldi	r25, 0x0D	; 13
    1df0:	71 d9       	rcall	.-3358   	; 0x10d4 <vListInitialise>
    1df2:	83 e5       	ldi	r24, 0x53	; 83
    1df4:	9d e0       	ldi	r25, 0x0D	; 13
    1df6:	6e d9       	rcall	.-3364   	; 0x10d4 <vListInitialise>
    1df8:	87 e4       	ldi	r24, 0x47	; 71
    1dfa:	9d e0       	ldi	r25, 0x0D	; 13
    1dfc:	6b d9       	rcall	.-3370   	; 0x10d4 <vListInitialise>
    1dfe:	88 e7       	ldi	r24, 0x78	; 120
    1e00:	9d e0       	ldi	r25, 0x0D	; 13
    1e02:	90 93 6c 0d 	sts	0x0D6C, r25	; 0x800d6c <pxDelayedTaskList+0x1>
    1e06:	80 93 6b 0d 	sts	0x0D6B, r24	; 0x800d6b <pxDelayedTaskList>
    1e0a:	8d e6       	ldi	r24, 0x6D	; 109
    1e0c:	9d e0       	ldi	r25, 0x0D	; 13
    1e0e:	90 93 6a 0d 	sts	0x0D6A, r25	; 0x800d6a <pxOverflowDelayedTaskList+0x1>
    1e12:	80 93 69 0d 	sts	0x0D69, r24	; 0x800d69 <pxOverflowDelayedTaskList>
    1e16:	10 c0       	rjmp	.+32     	; 0x1e38 <xTaskCreate+0x1b0>
    1e18:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <xSchedulerRunning>
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	0c c0       	rjmp	.+24     	; 0x1e38 <xTaskCreate+0x1b0>
    1e20:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1e24:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1e28:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e2c:	89 17       	cp	r24, r25
    1e2e:	20 f0       	brcs	.+8      	; 0x1e38 <xTaskCreate+0x1b0>
    1e30:	d0 93 f2 0d 	sts	0x0DF2, r29	; 0x800df2 <pxCurrentTCB+0x1>
    1e34:	c0 93 f1 0d 	sts	0x0DF1, r28	; 0x800df1 <pxCurrentTCB>
    1e38:	80 91 39 0d 	lds	r24, 0x0D39	; 0x800d39 <uxTaskNumber>
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	80 93 39 0d 	sts	0x0D39, r24	; 0x800d39 <uxTaskNumber>
    1e42:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e44:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    1e48:	8e 17       	cp	r24, r30
    1e4a:	10 f4       	brcc	.+4      	; 0x1e50 <xTaskCreate+0x1c8>
    1e4c:	e0 93 41 0d 	sts	0x0D41, r30	; 0x800d41 <uxTopReadyPriority>
    1e50:	8b e0       	ldi	r24, 0x0B	; 11
    1e52:	8e 9f       	mul	r24, r30
    1e54:	f0 01       	movw	r30, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	ed 57       	subi	r30, 0x7D	; 125
    1e5a:	f2 4f       	sbci	r31, 0xF2	; 242
    1e5c:	01 80       	ldd	r0, Z+1	; 0x01
    1e5e:	f2 81       	ldd	r31, Z+2	; 0x02
    1e60:	e0 2d       	mov	r30, r0
    1e62:	ff 83       	std	Y+7, r31	; 0x07
    1e64:	ee 83       	std	Y+6, r30	; 0x06
    1e66:	26 81       	ldd	r18, Z+6	; 0x06
    1e68:	37 81       	ldd	r19, Z+7	; 0x07
    1e6a:	39 87       	std	Y+9, r19	; 0x09
    1e6c:	28 87       	std	Y+8, r18	; 0x08
    1e6e:	a6 81       	ldd	r26, Z+6	; 0x06
    1e70:	b7 81       	ldd	r27, Z+7	; 0x07
    1e72:	15 96       	adiw	r26, 0x05	; 5
    1e74:	dc 92       	st	X, r13
    1e76:	ce 92       	st	-X, r12
    1e78:	14 97       	sbiw	r26, 0x04	; 4
    1e7a:	d7 82       	std	Z+7, r13	; 0x07
    1e7c:	c6 82       	std	Z+6, r12	; 0x06
    1e7e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e80:	8e 9f       	mul	r24, r30
    1e82:	f0 01       	movw	r30, r0
    1e84:	11 24       	eor	r1, r1
    1e86:	ed 57       	subi	r30, 0x7D	; 125
    1e88:	f2 4f       	sbci	r31, 0xF2	; 242
    1e8a:	fd 87       	std	Y+13, r31	; 0x0d
    1e8c:	ec 87       	std	Y+12, r30	; 0x0c
    1e8e:	80 81       	ld	r24, Z
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	80 83       	st	Z, r24
    1e94:	0f 90       	pop	r0
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <xSchedulerRunning>
    1e9c:	88 23       	and	r24, r24
    1e9e:	59 f0       	breq	.+22     	; 0x1eb6 <xTaskCreate+0x22e>
    1ea0:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    1ea4:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    1ea8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eac:	98 17       	cp	r25, r24
    1eae:	28 f4       	brcc	.+10     	; 0x1eba <xTaskCreate+0x232>
    1eb0:	dd d9       	rcall	.-3142   	; 0x126c <vPortYield>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <xTaskCreate+0x238>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <xTaskCreate+0x238>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <xTaskCreate+0x238>
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	7f 90       	pop	r7
    1eda:	6f 90       	pop	r6
    1edc:	5f 90       	pop	r5
    1ede:	4f 90       	pop	r4
    1ee0:	08 95       	ret

00001ee2 <vTaskStartScheduler>:
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	0f 2e       	mov	r0, r31
    1eea:	f3 e3       	ldi	r31, 0x33	; 51
    1eec:	ef 2e       	mov	r14, r31
    1eee:	fd e0       	ldi	r31, 0x0D	; 13
    1ef0:	ff 2e       	mov	r15, r31
    1ef2:	f0 2d       	mov	r31, r0
    1ef4:	00 e0       	ldi	r16, 0x00	; 0
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 ec       	ldi	r20, 0xC0	; 192
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	63 e2       	ldi	r22, 0x23	; 35
    1f00:	73 e0       	ldi	r23, 0x03	; 3
    1f02:	8e e0       	ldi	r24, 0x0E	; 14
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	c0 de       	rcall	.-640    	; 0x1c88 <xTaskCreate>
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	d9 f4       	brne	.+54     	; 0x1f42 <vTaskStartScheduler+0x60>
    1f0c:	26 d6       	rcall	.+3148   	; 0x2b5a <xTimerCreateTimerTask>
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	c1 f4       	brne	.+48     	; 0x1f42 <vTaskStartScheduler+0x60>
    1f12:	f8 94       	cli
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	dc 01       	movw	r26, r24
    1f1a:	80 93 35 0d 	sts	0x0D35, r24	; 0x800d35 <xNextTaskUnblockTime>
    1f1e:	90 93 36 0d 	sts	0x0D36, r25	; 0x800d36 <xNextTaskUnblockTime+0x1>
    1f22:	a0 93 37 0d 	sts	0x0D37, r26	; 0x800d37 <xNextTaskUnblockTime+0x2>
    1f26:	b0 93 38 0d 	sts	0x0D38, r27	; 0x800d38 <xNextTaskUnblockTime+0x3>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	80 93 40 0d 	sts	0x0D40, r24	; 0x800d40 <xSchedulerRunning>
    1f30:	10 92 42 0d 	sts	0x0D42, r1	; 0x800d42 <xTickCount>
    1f34:	10 92 43 0d 	sts	0x0D43, r1	; 0x800d43 <xTickCount+0x1>
    1f38:	10 92 44 0d 	sts	0x0D44, r1	; 0x800d44 <xTickCount+0x2>
    1f3c:	10 92 45 0d 	sts	0x0D45, r1	; 0x800d45 <xTickCount+0x3>
    1f40:	59 d9       	rcall	.-3406   	; 0x11f4 <xPortStartScheduler>
    1f42:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	08 95       	ret

00001f4e <vTaskSuspendAll>:
    1f4e:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	80 93 32 0d 	sts	0x0D32, r24	; 0x800d32 <uxSchedulerSuspended>
    1f58:	08 95       	ret

00001f5a <xTaskGetTickCount>:
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	0f 92       	push	r0
    1f60:	60 91 42 0d 	lds	r22, 0x0D42	; 0x800d42 <xTickCount>
    1f64:	70 91 43 0d 	lds	r23, 0x0D43	; 0x800d43 <xTickCount+0x1>
    1f68:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <xTickCount+0x2>
    1f6c:	90 91 45 0d 	lds	r25, 0x0D45	; 0x800d45 <xTickCount+0x3>
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	08 95       	ret

00001f76 <xTaskIncrementTick>:
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	07 c1       	rjmp	.+526    	; 0x219c <xTaskIncrementTick+0x226>
    1f8e:	c0 90 42 0d 	lds	r12, 0x0D42	; 0x800d42 <xTickCount>
    1f92:	d0 90 43 0d 	lds	r13, 0x0D43	; 0x800d43 <xTickCount+0x1>
    1f96:	e0 90 44 0d 	lds	r14, 0x0D44	; 0x800d44 <xTickCount+0x2>
    1f9a:	f0 90 45 0d 	lds	r15, 0x0D45	; 0x800d45 <xTickCount+0x3>
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	c8 1a       	sub	r12, r24
    1fa2:	d8 0a       	sbc	r13, r24
    1fa4:	e8 0a       	sbc	r14, r24
    1fa6:	f8 0a       	sbc	r15, r24
    1fa8:	c0 92 42 0d 	sts	0x0D42, r12	; 0x800d42 <xTickCount>
    1fac:	d0 92 43 0d 	sts	0x0D43, r13	; 0x800d43 <xTickCount+0x1>
    1fb0:	e0 92 44 0d 	sts	0x0D44, r14	; 0x800d44 <xTickCount+0x2>
    1fb4:	f0 92 45 0d 	sts	0x0D45, r15	; 0x800d45 <xTickCount+0x3>
    1fb8:	c1 14       	cp	r12, r1
    1fba:	d1 04       	cpc	r13, r1
    1fbc:	e1 04       	cpc	r14, r1
    1fbe:	f1 04       	cpc	r15, r1
    1fc0:	b1 f4       	brne	.+44     	; 0x1fee <xTaskIncrementTick+0x78>
    1fc2:	80 91 6b 0d 	lds	r24, 0x0D6B	; 0x800d6b <pxDelayedTaskList>
    1fc6:	90 91 6c 0d 	lds	r25, 0x0D6C	; 0x800d6c <pxDelayedTaskList+0x1>
    1fca:	20 91 69 0d 	lds	r18, 0x0D69	; 0x800d69 <pxOverflowDelayedTaskList>
    1fce:	30 91 6a 0d 	lds	r19, 0x0D6A	; 0x800d6a <pxOverflowDelayedTaskList+0x1>
    1fd2:	30 93 6c 0d 	sts	0x0D6C, r19	; 0x800d6c <pxDelayedTaskList+0x1>
    1fd6:	20 93 6b 0d 	sts	0x0D6B, r18	; 0x800d6b <pxDelayedTaskList>
    1fda:	90 93 6a 0d 	sts	0x0D6A, r25	; 0x800d6a <pxOverflowDelayedTaskList+0x1>
    1fde:	80 93 69 0d 	sts	0x0D69, r24	; 0x800d69 <pxOverflowDelayedTaskList>
    1fe2:	80 91 3a 0d 	lds	r24, 0x0D3A	; 0x800d3a <xNumOfOverflows>
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	80 93 3a 0d 	sts	0x0D3A, r24	; 0x800d3a <xNumOfOverflows>
    1fec:	87 dd       	rcall	.-1266   	; 0x1afc <prvResetNextTaskUnblockTime>
    1fee:	80 91 35 0d 	lds	r24, 0x0D35	; 0x800d35 <xNextTaskUnblockTime>
    1ff2:	90 91 36 0d 	lds	r25, 0x0D36	; 0x800d36 <xNextTaskUnblockTime+0x1>
    1ff6:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <xNextTaskUnblockTime+0x2>
    1ffa:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <xNextTaskUnblockTime+0x3>
    1ffe:	c8 16       	cp	r12, r24
    2000:	d9 06       	cpc	r13, r25
    2002:	ea 06       	cpc	r14, r26
    2004:	fb 06       	cpc	r15, r27
    2006:	10 f4       	brcc	.+4      	; 0x200c <xTaskIncrementTick+0x96>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	b3 c0       	rjmp	.+358    	; 0x2172 <xTaskIncrementTick+0x1fc>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	4b e0       	ldi	r20, 0x0B	; 11
    2010:	51 e0       	ldi	r21, 0x01	; 1
    2012:	e0 91 6b 0d 	lds	r30, 0x0D6B	; 0x800d6b <pxDelayedTaskList>
    2016:	f0 91 6c 0d 	lds	r31, 0x0D6C	; 0x800d6c <pxDelayedTaskList+0x1>
    201a:	90 81       	ld	r25, Z
    201c:	91 11       	cpse	r25, r1
    201e:	0c c0       	rjmp	.+24     	; 0x2038 <xTaskIncrementTick+0xc2>
    2020:	4f ef       	ldi	r20, 0xFF	; 255
    2022:	5f ef       	ldi	r21, 0xFF	; 255
    2024:	ba 01       	movw	r22, r20
    2026:	40 93 35 0d 	sts	0x0D35, r20	; 0x800d35 <xNextTaskUnblockTime>
    202a:	50 93 36 0d 	sts	0x0D36, r21	; 0x800d36 <xNextTaskUnblockTime+0x1>
    202e:	60 93 37 0d 	sts	0x0D37, r22	; 0x800d37 <xNextTaskUnblockTime+0x2>
    2032:	70 93 38 0d 	sts	0x0D38, r23	; 0x800d38 <xNextTaskUnblockTime+0x3>
    2036:	9d c0       	rjmp	.+314    	; 0x2172 <xTaskIncrementTick+0x1fc>
    2038:	e0 91 6b 0d 	lds	r30, 0x0D6B	; 0x800d6b <pxDelayedTaskList>
    203c:	f0 91 6c 0d 	lds	r31, 0x0D6C	; 0x800d6c <pxDelayedTaskList+0x1>
    2040:	07 80       	ldd	r0, Z+7	; 0x07
    2042:	f0 85       	ldd	r31, Z+8	; 0x08
    2044:	e0 2d       	mov	r30, r0
    2046:	00 84       	ldd	r0, Z+8	; 0x08
    2048:	f1 85       	ldd	r31, Z+9	; 0x09
    204a:	e0 2d       	mov	r30, r0
    204c:	02 81       	ldd	r16, Z+2	; 0x02
    204e:	13 81       	ldd	r17, Z+3	; 0x03
    2050:	24 81       	ldd	r18, Z+4	; 0x04
    2052:	35 81       	ldd	r19, Z+5	; 0x05
    2054:	c0 16       	cp	r12, r16
    2056:	d1 06       	cpc	r13, r17
    2058:	e2 06       	cpc	r14, r18
    205a:	f3 06       	cpc	r15, r19
    205c:	48 f4       	brcc	.+18     	; 0x2070 <xTaskIncrementTick+0xfa>
    205e:	00 93 35 0d 	sts	0x0D35, r16	; 0x800d35 <xNextTaskUnblockTime>
    2062:	10 93 36 0d 	sts	0x0D36, r17	; 0x800d36 <xNextTaskUnblockTime+0x1>
    2066:	20 93 37 0d 	sts	0x0D37, r18	; 0x800d37 <xNextTaskUnblockTime+0x2>
    206a:	30 93 38 0d 	sts	0x0D38, r19	; 0x800d38 <xNextTaskUnblockTime+0x3>
    206e:	81 c0       	rjmp	.+258    	; 0x2172 <xTaskIncrementTick+0x1fc>
    2070:	a4 85       	ldd	r26, Z+12	; 0x0c
    2072:	b5 85       	ldd	r27, Z+13	; 0x0d
    2074:	c6 81       	ldd	r28, Z+6	; 0x06
    2076:	d7 81       	ldd	r29, Z+7	; 0x07
    2078:	20 85       	ldd	r18, Z+8	; 0x08
    207a:	31 85       	ldd	r19, Z+9	; 0x09
    207c:	3f 83       	std	Y+7, r19	; 0x07
    207e:	2e 83       	std	Y+6, r18	; 0x06
    2080:	c0 85       	ldd	r28, Z+8	; 0x08
    2082:	d1 85       	ldd	r29, Z+9	; 0x09
    2084:	26 81       	ldd	r18, Z+6	; 0x06
    2086:	37 81       	ldd	r19, Z+7	; 0x07
    2088:	3d 83       	std	Y+5, r19	; 0x05
    208a:	2c 83       	std	Y+4, r18	; 0x04
    208c:	9f 01       	movw	r18, r30
    208e:	2e 5f       	subi	r18, 0xFE	; 254
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	6d 91       	ld	r22, X+
    2096:	7c 91       	ld	r23, X
    2098:	12 97       	sbiw	r26, 0x02	; 2
    209a:	62 17       	cp	r22, r18
    209c:	73 07       	cpc	r23, r19
    209e:	31 f4       	brne	.+12     	; 0x20ac <xTaskIncrementTick+0x136>
    20a0:	60 85       	ldd	r22, Z+8	; 0x08
    20a2:	71 85       	ldd	r23, Z+9	; 0x09
    20a4:	12 96       	adiw	r26, 0x02	; 2
    20a6:	7c 93       	st	X, r23
    20a8:	6e 93       	st	-X, r22
    20aa:	11 97       	sbiw	r26, 0x01	; 1
    20ac:	15 86       	std	Z+13, r1	; 0x0d
    20ae:	14 86       	std	Z+12, r1	; 0x0c
    20b0:	9c 91       	ld	r25, X
    20b2:	91 50       	subi	r25, 0x01	; 1
    20b4:	9c 93       	st	X, r25
    20b6:	a0 8d       	ldd	r26, Z+24	; 0x18
    20b8:	b1 8d       	ldd	r27, Z+25	; 0x19
    20ba:	10 97       	sbiw	r26, 0x00	; 0
    20bc:	09 f1       	breq	.+66     	; 0x2100 <xTaskIncrementTick+0x18a>
    20be:	c2 89       	ldd	r28, Z+18	; 0x12
    20c0:	d3 89       	ldd	r29, Z+19	; 0x13
    20c2:	64 89       	ldd	r22, Z+20	; 0x14
    20c4:	75 89       	ldd	r23, Z+21	; 0x15
    20c6:	7f 83       	std	Y+7, r23	; 0x07
    20c8:	6e 83       	std	Y+6, r22	; 0x06
    20ca:	c4 89       	ldd	r28, Z+20	; 0x14
    20cc:	d5 89       	ldd	r29, Z+21	; 0x15
    20ce:	62 89       	ldd	r22, Z+18	; 0x12
    20d0:	73 89       	ldd	r23, Z+19	; 0x13
    20d2:	7d 83       	std	Y+5, r23	; 0x05
    20d4:	6c 83       	std	Y+4, r22	; 0x04
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	cd 91       	ld	r28, X+
    20da:	dc 91       	ld	r29, X
    20dc:	12 97       	sbiw	r26, 0x02	; 2
    20de:	bf 01       	movw	r22, r30
    20e0:	62 5f       	subi	r22, 0xF2	; 242
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	c6 17       	cp	r28, r22
    20e6:	d7 07       	cpc	r29, r23
    20e8:	31 f4       	brne	.+12     	; 0x20f6 <xTaskIncrementTick+0x180>
    20ea:	64 89       	ldd	r22, Z+20	; 0x14
    20ec:	75 89       	ldd	r23, Z+21	; 0x15
    20ee:	12 96       	adiw	r26, 0x02	; 2
    20f0:	7c 93       	st	X, r23
    20f2:	6e 93       	st	-X, r22
    20f4:	11 97       	sbiw	r26, 0x01	; 1
    20f6:	11 8e       	std	Z+25, r1	; 0x19
    20f8:	10 8e       	std	Z+24, r1	; 0x18
    20fa:	9c 91       	ld	r25, X
    20fc:	91 50       	subi	r25, 0x01	; 1
    20fe:	9c 93       	st	X, r25
    2100:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2102:	90 91 41 0d 	lds	r25, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    2106:	9a 17       	cp	r25, r26
    2108:	10 f4       	brcc	.+4      	; 0x210e <xTaskIncrementTick+0x198>
    210a:	a0 93 41 0d 	sts	0x0D41, r26	; 0x800d41 <uxTopReadyPriority>
    210e:	4a 9f       	mul	r20, r26
    2110:	d0 01       	movw	r26, r0
    2112:	11 24       	eor	r1, r1
    2114:	ad 57       	subi	r26, 0x7D	; 125
    2116:	b2 4f       	sbci	r27, 0xF2	; 242
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	0d 90       	ld	r0, X+
    211c:	bc 91       	ld	r27, X
    211e:	a0 2d       	mov	r26, r0
    2120:	b7 83       	std	Z+7, r27	; 0x07
    2122:	a6 83       	std	Z+6, r26	; 0x06
    2124:	16 96       	adiw	r26, 0x06	; 6
    2126:	6d 91       	ld	r22, X+
    2128:	7c 91       	ld	r23, X
    212a:	17 97       	sbiw	r26, 0x07	; 7
    212c:	71 87       	std	Z+9, r23	; 0x09
    212e:	60 87       	std	Z+8, r22	; 0x08
    2130:	16 96       	adiw	r26, 0x06	; 6
    2132:	cd 91       	ld	r28, X+
    2134:	dc 91       	ld	r29, X
    2136:	17 97       	sbiw	r26, 0x07	; 7
    2138:	3d 83       	std	Y+5, r19	; 0x05
    213a:	2c 83       	std	Y+4, r18	; 0x04
    213c:	17 96       	adiw	r26, 0x07	; 7
    213e:	3c 93       	st	X, r19
    2140:	2e 93       	st	-X, r18
    2142:	16 97       	sbiw	r26, 0x06	; 6
    2144:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2146:	4a 9f       	mul	r20, r26
    2148:	d0 01       	movw	r26, r0
    214a:	11 24       	eor	r1, r1
    214c:	ad 57       	subi	r26, 0x7D	; 125
    214e:	b2 4f       	sbci	r27, 0xF2	; 242
    2150:	b5 87       	std	Z+13, r27	; 0x0d
    2152:	a4 87       	std	Z+12, r26	; 0x0c
    2154:	9c 91       	ld	r25, X
    2156:	9f 5f       	subi	r25, 0xFF	; 255
    2158:	9c 93       	st	X, r25
    215a:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    215e:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2162:	22 8d       	ldd	r18, Z+26	; 0x1a
    2164:	5a 96       	adiw	r26, 0x1a	; 26
    2166:	9c 91       	ld	r25, X
    2168:	29 17       	cp	r18, r25
    216a:	08 f4       	brcc	.+2      	; 0x216e <xTaskIncrementTick+0x1f8>
    216c:	52 cf       	rjmp	.-348    	; 0x2012 <xTaskIncrementTick+0x9c>
    216e:	85 2f       	mov	r24, r21
    2170:	50 cf       	rjmp	.-352    	; 0x2012 <xTaskIncrementTick+0x9c>
    2172:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2176:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    217a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    217c:	9b e0       	ldi	r25, 0x0B	; 11
    217e:	e9 9f       	mul	r30, r25
    2180:	f0 01       	movw	r30, r0
    2182:	11 24       	eor	r1, r1
    2184:	ed 57       	subi	r30, 0x7D	; 125
    2186:	f2 4f       	sbci	r31, 0xF2	; 242
    2188:	90 81       	ld	r25, Z
    218a:	92 30       	cpi	r25, 0x02	; 2
    218c:	08 f0       	brcs	.+2      	; 0x2190 <xTaskIncrementTick+0x21a>
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 91 3b 0d 	lds	r25, 0x0D3B	; 0x800d3b <xYieldPending>
    2194:	99 23       	and	r25, r25
    2196:	b1 f0       	breq	.+44     	; 0x21c4 <xTaskIncrementTick+0x24e>
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <xTaskIncrementTick+0x24e>
    219c:	80 91 3c 0d 	lds	r24, 0x0D3C	; 0x800d3c <xPendedTicks>
    21a0:	90 91 3d 0d 	lds	r25, 0x0D3D	; 0x800d3d <xPendedTicks+0x1>
    21a4:	a0 91 3e 0d 	lds	r26, 0x0D3E	; 0x800d3e <xPendedTicks+0x2>
    21a8:	b0 91 3f 0d 	lds	r27, 0x0D3F	; 0x800d3f <xPendedTicks+0x3>
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	a1 1d       	adc	r26, r1
    21b0:	b1 1d       	adc	r27, r1
    21b2:	80 93 3c 0d 	sts	0x0D3C, r24	; 0x800d3c <xPendedTicks>
    21b6:	90 93 3d 0d 	sts	0x0D3D, r25	; 0x800d3d <xPendedTicks+0x1>
    21ba:	a0 93 3e 0d 	sts	0x0D3E, r26	; 0x800d3e <xPendedTicks+0x2>
    21be:	b0 93 3f 0d 	sts	0x0D3F, r27	; 0x800d3f <xPendedTicks+0x3>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	08 95       	ret

000021d6 <xTaskResumeAll>:
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	0f 92       	push	r0
    21ec:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    21f0:	81 50       	subi	r24, 0x01	; 1
    21f2:	80 93 32 0d 	sts	0x0D32, r24	; 0x800d32 <uxSchedulerSuspended>
    21f6:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    21fa:	81 11       	cpse	r24, r1
    21fc:	c4 c0       	rjmp	.+392    	; 0x2386 <__stack+0x187>
    21fe:	80 91 46 0d 	lds	r24, 0x0D46	; 0x800d46 <uxCurrentNumberOfTasks>
    2202:	81 11       	cpse	r24, r1
    2204:	8b c0       	rjmp	.+278    	; 0x231c <__stack+0x11d>
    2206:	c2 c0       	rjmp	.+388    	; 0x238c <__stack+0x18d>
    2208:	d8 01       	movw	r26, r16
    220a:	17 96       	adiw	r26, 0x07	; 7
    220c:	ed 91       	ld	r30, X+
    220e:	fc 91       	ld	r31, X
    2210:	18 97       	sbiw	r26, 0x08	; 8
    2212:	00 84       	ldd	r0, Z+8	; 0x08
    2214:	f1 85       	ldd	r31, Z+9	; 0x09
    2216:	e0 2d       	mov	r30, r0
    2218:	a0 8d       	ldd	r26, Z+24	; 0x18
    221a:	b1 8d       	ldd	r27, Z+25	; 0x19
    221c:	82 89       	ldd	r24, Z+18	; 0x12
    221e:	93 89       	ldd	r25, Z+19	; 0x13
    2220:	64 89       	ldd	r22, Z+20	; 0x14
    2222:	75 89       	ldd	r23, Z+21	; 0x15
    2224:	ec 01       	movw	r28, r24
    2226:	7f 83       	std	Y+7, r23	; 0x07
    2228:	6e 83       	std	Y+6, r22	; 0x06
    222a:	84 89       	ldd	r24, Z+20	; 0x14
    222c:	95 89       	ldd	r25, Z+21	; 0x15
    222e:	62 89       	ldd	r22, Z+18	; 0x12
    2230:	73 89       	ldd	r23, Z+19	; 0x13
    2232:	ec 01       	movw	r28, r24
    2234:	7d 83       	std	Y+5, r23	; 0x05
    2236:	6c 83       	std	Y+4, r22	; 0x04
    2238:	cf 01       	movw	r24, r30
    223a:	0e 96       	adiw	r24, 0x0e	; 14
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	6d 91       	ld	r22, X+
    2240:	7c 91       	ld	r23, X
    2242:	12 97       	sbiw	r26, 0x02	; 2
    2244:	68 17       	cp	r22, r24
    2246:	79 07       	cpc	r23, r25
    2248:	31 f4       	brne	.+12     	; 0x2256 <__stack+0x57>
    224a:	84 89       	ldd	r24, Z+20	; 0x14
    224c:	95 89       	ldd	r25, Z+21	; 0x15
    224e:	12 96       	adiw	r26, 0x02	; 2
    2250:	9c 93       	st	X, r25
    2252:	8e 93       	st	-X, r24
    2254:	11 97       	sbiw	r26, 0x01	; 1
    2256:	11 8e       	std	Z+25, r1	; 0x19
    2258:	10 8e       	std	Z+24, r1	; 0x18
    225a:	8c 91       	ld	r24, X
    225c:	81 50       	subi	r24, 0x01	; 1
    225e:	8c 93       	st	X, r24
    2260:	a4 85       	ldd	r26, Z+12	; 0x0c
    2262:	b5 85       	ldd	r27, Z+13	; 0x0d
    2264:	86 81       	ldd	r24, Z+6	; 0x06
    2266:	97 81       	ldd	r25, Z+7	; 0x07
    2268:	60 85       	ldd	r22, Z+8	; 0x08
    226a:	71 85       	ldd	r23, Z+9	; 0x09
    226c:	ec 01       	movw	r28, r24
    226e:	7f 83       	std	Y+7, r23	; 0x07
    2270:	6e 83       	std	Y+6, r22	; 0x06
    2272:	80 85       	ldd	r24, Z+8	; 0x08
    2274:	91 85       	ldd	r25, Z+9	; 0x09
    2276:	66 81       	ldd	r22, Z+6	; 0x06
    2278:	77 81       	ldd	r23, Z+7	; 0x07
    227a:	ec 01       	movw	r28, r24
    227c:	7d 83       	std	Y+5, r23	; 0x05
    227e:	6c 83       	std	Y+4, r22	; 0x04
    2280:	cf 01       	movw	r24, r30
    2282:	02 96       	adiw	r24, 0x02	; 2
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	6d 91       	ld	r22, X+
    2288:	7c 91       	ld	r23, X
    228a:	12 97       	sbiw	r26, 0x02	; 2
    228c:	68 17       	cp	r22, r24
    228e:	79 07       	cpc	r23, r25
    2290:	31 f4       	brne	.+12     	; 0x229e <__stack+0x9f>
    2292:	60 85       	ldd	r22, Z+8	; 0x08
    2294:	71 85       	ldd	r23, Z+9	; 0x09
    2296:	12 96       	adiw	r26, 0x02	; 2
    2298:	7c 93       	st	X, r23
    229a:	6e 93       	st	-X, r22
    229c:	11 97       	sbiw	r26, 0x01	; 1
    229e:	15 86       	std	Z+13, r1	; 0x0d
    22a0:	14 86       	std	Z+12, r1	; 0x0c
    22a2:	2c 91       	ld	r18, X
    22a4:	21 50       	subi	r18, 0x01	; 1
    22a6:	2c 93       	st	X, r18
    22a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22aa:	20 91 41 0d 	lds	r18, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    22ae:	2a 17       	cp	r18, r26
    22b0:	10 f4       	brcc	.+4      	; 0x22b6 <__stack+0xb7>
    22b2:	a0 93 41 0d 	sts	0x0D41, r26	; 0x800d41 <uxTopReadyPriority>
    22b6:	3a 9f       	mul	r19, r26
    22b8:	d0 01       	movw	r26, r0
    22ba:	11 24       	eor	r1, r1
    22bc:	ad 57       	subi	r26, 0x7D	; 125
    22be:	b2 4f       	sbci	r27, 0xF2	; 242
    22c0:	11 96       	adiw	r26, 0x01	; 1
    22c2:	0d 90       	ld	r0, X+
    22c4:	bc 91       	ld	r27, X
    22c6:	a0 2d       	mov	r26, r0
    22c8:	b7 83       	std	Z+7, r27	; 0x07
    22ca:	a6 83       	std	Z+6, r26	; 0x06
    22cc:	16 96       	adiw	r26, 0x06	; 6
    22ce:	6d 91       	ld	r22, X+
    22d0:	7c 91       	ld	r23, X
    22d2:	17 97       	sbiw	r26, 0x07	; 7
    22d4:	71 87       	std	Z+9, r23	; 0x09
    22d6:	60 87       	std	Z+8, r22	; 0x08
    22d8:	16 96       	adiw	r26, 0x06	; 6
    22da:	6d 91       	ld	r22, X+
    22dc:	7c 91       	ld	r23, X
    22de:	17 97       	sbiw	r26, 0x07	; 7
    22e0:	eb 01       	movw	r28, r22
    22e2:	9d 83       	std	Y+5, r25	; 0x05
    22e4:	8c 83       	std	Y+4, r24	; 0x04
    22e6:	17 96       	adiw	r26, 0x07	; 7
    22e8:	9c 93       	st	X, r25
    22ea:	8e 93       	st	-X, r24
    22ec:	16 97       	sbiw	r26, 0x06	; 6
    22ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22f0:	3a 9f       	mul	r19, r26
    22f2:	d0 01       	movw	r26, r0
    22f4:	11 24       	eor	r1, r1
    22f6:	ad 57       	subi	r26, 0x7D	; 125
    22f8:	b2 4f       	sbci	r27, 0xF2	; 242
    22fa:	b5 87       	std	Z+13, r27	; 0x0d
    22fc:	a4 87       	std	Z+12, r26	; 0x0c
    22fe:	8c 91       	ld	r24, X
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	8c 93       	st	X, r24
    2304:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2308:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    230c:	92 8d       	ldd	r25, Z+26	; 0x1a
    230e:	5a 96       	adiw	r26, 0x1a	; 26
    2310:	8c 91       	ld	r24, X
    2312:	98 17       	cp	r25, r24
    2314:	48 f0       	brcs	.+18     	; 0x2328 <__stack+0x129>
    2316:	40 93 3b 0d 	sts	0x0D3B, r20	; 0x800d3b <xYieldPending>
    231a:	06 c0       	rjmp	.+12     	; 0x2328 <__stack+0x129>
    231c:	e0 e0       	ldi	r30, 0x00	; 0
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	0e e5       	ldi	r16, 0x5E	; 94
    2322:	1d e0       	ldi	r17, 0x0D	; 13
    2324:	3b e0       	ldi	r19, 0x0B	; 11
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	d8 01       	movw	r26, r16
    232a:	8c 91       	ld	r24, X
    232c:	81 11       	cpse	r24, r1
    232e:	6c cf       	rjmp	.-296    	; 0x2208 <__stack+0x9>
    2330:	ef 2b       	or	r30, r31
    2332:	09 f0       	breq	.+2      	; 0x2336 <__stack+0x137>
    2334:	e3 db       	rcall	.-2106   	; 0x1afc <prvResetNextTaskUnblockTime>
    2336:	c0 90 3c 0d 	lds	r12, 0x0D3C	; 0x800d3c <xPendedTicks>
    233a:	d0 90 3d 0d 	lds	r13, 0x0D3D	; 0x800d3d <xPendedTicks+0x1>
    233e:	e0 90 3e 0d 	lds	r14, 0x0D3E	; 0x800d3e <xPendedTicks+0x2>
    2342:	f0 90 3f 0d 	lds	r15, 0x0D3F	; 0x800d3f <xPendedTicks+0x3>
    2346:	c1 14       	cp	r12, r1
    2348:	d1 04       	cpc	r13, r1
    234a:	e1 04       	cpc	r14, r1
    234c:	f1 04       	cpc	r15, r1
    234e:	99 f0       	breq	.+38     	; 0x2376 <__stack+0x177>
    2350:	c1 e0       	ldi	r28, 0x01	; 1
    2352:	11 de       	rcall	.-990    	; 0x1f76 <xTaskIncrementTick>
    2354:	81 11       	cpse	r24, r1
    2356:	c0 93 3b 0d 	sts	0x0D3B, r28	; 0x800d3b <xYieldPending>
    235a:	b1 e0       	ldi	r27, 0x01	; 1
    235c:	cb 1a       	sub	r12, r27
    235e:	d1 08       	sbc	r13, r1
    2360:	e1 08       	sbc	r14, r1
    2362:	f1 08       	sbc	r15, r1
    2364:	b1 f7       	brne	.-20     	; 0x2352 <__stack+0x153>
    2366:	10 92 3c 0d 	sts	0x0D3C, r1	; 0x800d3c <xPendedTicks>
    236a:	10 92 3d 0d 	sts	0x0D3D, r1	; 0x800d3d <xPendedTicks+0x1>
    236e:	10 92 3e 0d 	sts	0x0D3E, r1	; 0x800d3e <xPendedTicks+0x2>
    2372:	10 92 3f 0d 	sts	0x0D3F, r1	; 0x800d3f <xPendedTicks+0x3>
    2376:	80 91 3b 0d 	lds	r24, 0x0D3B	; 0x800d3b <xYieldPending>
    237a:	88 23       	and	r24, r24
    237c:	31 f0       	breq	.+12     	; 0x238a <__stack+0x18b>
    237e:	0e 94 36 09 	call	0x126c	; 0x126c <vPortYield>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	03 c0       	rjmp	.+6      	; 0x238c <__stack+0x18d>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	01 c0       	rjmp	.+2      	; 0x238c <__stack+0x18d>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0f 90       	pop	r0
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	df 90       	pop	r13
    239e:	cf 90       	pop	r12
    23a0:	08 95       	ret

000023a2 <vTaskDelay>:
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	6b 01       	movw	r12, r22
    23ac:	7c 01       	movw	r14, r24
    23ae:	67 2b       	or	r22, r23
    23b0:	68 2b       	or	r22, r24
    23b2:	69 2b       	or	r22, r25
    23b4:	41 f0       	breq	.+16     	; 0x23c6 <vTaskDelay+0x24>
    23b6:	cb dd       	rcall	.-1130   	; 0x1f4e <vTaskSuspendAll>
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	c7 01       	movw	r24, r14
    23bc:	b6 01       	movw	r22, r12
    23be:	c5 db       	rcall	.-2166   	; 0x1b4a <prvAddCurrentTaskToDelayedList>
    23c0:	0a df       	rcall	.-492    	; 0x21d6 <xTaskResumeAll>
    23c2:	81 11       	cpse	r24, r1
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <vTaskDelay+0x28>
    23c6:	0e 94 36 09 	call	0x126c	; 0x126c <vPortYield>
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	08 95       	ret

000023d4 <vTaskSwitchContext>:
    23d4:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    23d8:	88 23       	and	r24, r24
    23da:	21 f0       	breq	.+8      	; 0x23e4 <vTaskSwitchContext+0x10>
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	80 93 3b 0d 	sts	0x0D3B, r24	; 0x800d3b <xYieldPending>
    23e2:	08 95       	ret
    23e4:	10 92 3b 0d 	sts	0x0D3B, r1	; 0x800d3b <xYieldPending>
    23e8:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    23ec:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    23f0:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    23f4:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    23f8:	2d 91       	ld	r18, X+
    23fa:	3c 91       	ld	r19, X
    23fc:	83 8d       	ldd	r24, Z+27	; 0x1b
    23fe:	94 8d       	ldd	r25, Z+28	; 0x1c
    2400:	82 17       	cp	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	58 f0       	brcs	.+22     	; 0x241c <vTaskSwitchContext+0x48>
    2406:	60 91 f1 0d 	lds	r22, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    240a:	70 91 f2 0d 	lds	r23, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    240e:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2412:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2416:	63 5e       	subi	r22, 0xE3	; 227
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	c5 d4       	rcall	.+2442   	; 0x2da6 <vApplicationStackOverflowHook>
    241c:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	9b e0       	ldi	r25, 0x0B	; 11
    2426:	89 9f       	mul	r24, r25
    2428:	f0 01       	movw	r30, r0
    242a:	11 24       	eor	r1, r1
    242c:	ed 57       	subi	r30, 0x7D	; 125
    242e:	f2 4f       	sbci	r31, 0xF2	; 242
    2430:	90 81       	ld	r25, Z
    2432:	91 11       	cpse	r25, r1
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <vTaskSwitchContext+0x7e>
    2436:	4b e0       	ldi	r20, 0x0B	; 11
    2438:	81 50       	subi	r24, 0x01	; 1
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	42 9f       	mul	r20, r18
    2440:	f0 01       	movw	r30, r0
    2442:	43 9f       	mul	r20, r19
    2444:	f0 0d       	add	r31, r0
    2446:	11 24       	eor	r1, r1
    2448:	ed 57       	subi	r30, 0x7D	; 125
    244a:	f2 4f       	sbci	r31, 0xF2	; 242
    244c:	90 81       	ld	r25, Z
    244e:	99 23       	and	r25, r25
    2450:	99 f3       	breq	.-26     	; 0x2438 <vTaskSwitchContext+0x64>
    2452:	9b e0       	ldi	r25, 0x0B	; 11
    2454:	92 9f       	mul	r25, r18
    2456:	a0 01       	movw	r20, r0
    2458:	93 9f       	mul	r25, r19
    245a:	50 0d       	add	r21, r0
    245c:	11 24       	eor	r1, r1
    245e:	da 01       	movw	r26, r20
    2460:	ad 57       	subi	r26, 0x7D	; 125
    2462:	b2 4f       	sbci	r27, 0xF2	; 242
    2464:	11 96       	adiw	r26, 0x01	; 1
    2466:	ed 91       	ld	r30, X+
    2468:	fc 91       	ld	r31, X
    246a:	12 97       	sbiw	r26, 0x02	; 2
    246c:	04 80       	ldd	r0, Z+4	; 0x04
    246e:	f5 81       	ldd	r31, Z+5	; 0x05
    2470:	e0 2d       	mov	r30, r0
    2472:	12 96       	adiw	r26, 0x02	; 2
    2474:	fc 93       	st	X, r31
    2476:	ee 93       	st	-X, r30
    2478:	11 97       	sbiw	r26, 0x01	; 1
    247a:	4a 57       	subi	r20, 0x7A	; 122
    247c:	52 4f       	sbci	r21, 0xF2	; 242
    247e:	e4 17       	cp	r30, r20
    2480:	f5 07       	cpc	r31, r21
    2482:	29 f4       	brne	.+10     	; 0x248e <vTaskSwitchContext+0xba>
    2484:	44 81       	ldd	r20, Z+4	; 0x04
    2486:	55 81       	ldd	r21, Z+5	; 0x05
    2488:	fd 01       	movw	r30, r26
    248a:	52 83       	std	Z+2, r21	; 0x02
    248c:	41 83       	std	Z+1, r20	; 0x01
    248e:	9b e0       	ldi	r25, 0x0B	; 11
    2490:	92 9f       	mul	r25, r18
    2492:	f0 01       	movw	r30, r0
    2494:	93 9f       	mul	r25, r19
    2496:	f0 0d       	add	r31, r0
    2498:	11 24       	eor	r1, r1
    249a:	ed 57       	subi	r30, 0x7D	; 125
    249c:	f2 4f       	sbci	r31, 0xF2	; 242
    249e:	01 80       	ldd	r0, Z+1	; 0x01
    24a0:	f2 81       	ldd	r31, Z+2	; 0x02
    24a2:	e0 2d       	mov	r30, r0
    24a4:	20 85       	ldd	r18, Z+8	; 0x08
    24a6:	31 85       	ldd	r19, Z+9	; 0x09
    24a8:	30 93 f2 0d 	sts	0x0DF2, r19	; 0x800df2 <pxCurrentTCB+0x1>
    24ac:	20 93 f1 0d 	sts	0x0DF1, r18	; 0x800df1 <pxCurrentTCB>
    24b0:	80 93 41 0d 	sts	0x0D41, r24	; 0x800d41 <uxTopReadyPriority>
    24b4:	08 95       	ret

000024b6 <vTaskPlaceOnEventList>:
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	6a 01       	movw	r12, r20
    24c0:	7b 01       	movw	r14, r22
    24c2:	60 91 f1 0d 	lds	r22, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    24c6:	70 91 f2 0d 	lds	r23, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    24ca:	62 5f       	subi	r22, 0xF2	; 242
    24cc:	7f 4f       	sbci	r23, 0xFF	; 255
    24ce:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vListInsert>
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	c7 01       	movw	r24, r14
    24d6:	b6 01       	movw	r22, r12
    24d8:	38 db       	rcall	.-2448   	; 0x1b4a <prvAddCurrentTaskToDelayedList>
    24da:	ff 90       	pop	r15
    24dc:	ef 90       	pop	r14
    24de:	df 90       	pop	r13
    24e0:	cf 90       	pop	r12
    24e2:	08 95       	ret

000024e4 <vTaskPlaceOnEventListRestricted>:
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	fc 01       	movw	r30, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	ba 01       	movw	r22, r20
    24ee:	a1 81       	ldd	r26, Z+1	; 0x01
    24f0:	b2 81       	ldd	r27, Z+2	; 0x02
    24f2:	c0 91 f1 0d 	lds	r28, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    24f6:	d0 91 f2 0d 	lds	r29, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    24fa:	bb 8b       	std	Y+19, r27	; 0x13
    24fc:	aa 8b       	std	Y+18, r26	; 0x12
    24fe:	c0 91 f1 0d 	lds	r28, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2502:	d0 91 f2 0d 	lds	r29, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2506:	16 96       	adiw	r26, 0x06	; 6
    2508:	4d 91       	ld	r20, X+
    250a:	5c 91       	ld	r21, X
    250c:	17 97       	sbiw	r26, 0x07	; 7
    250e:	5d 8b       	std	Y+21, r21	; 0x15
    2510:	4c 8b       	std	Y+20, r20	; 0x14
    2512:	16 96       	adiw	r26, 0x06	; 6
    2514:	cd 91       	ld	r28, X+
    2516:	dc 91       	ld	r29, X
    2518:	17 97       	sbiw	r26, 0x07	; 7
    251a:	40 91 f1 0d 	lds	r20, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    251e:	50 91 f2 0d 	lds	r21, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2522:	42 5f       	subi	r20, 0xF2	; 242
    2524:	5f 4f       	sbci	r21, 0xFF	; 255
    2526:	5d 83       	std	Y+5, r21	; 0x05
    2528:	4c 83       	std	Y+4, r20	; 0x04
    252a:	40 91 f1 0d 	lds	r20, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    252e:	50 91 f2 0d 	lds	r21, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2532:	42 5f       	subi	r20, 0xF2	; 242
    2534:	5f 4f       	sbci	r21, 0xFF	; 255
    2536:	17 96       	adiw	r26, 0x07	; 7
    2538:	5c 93       	st	X, r21
    253a:	4e 93       	st	-X, r20
    253c:	16 97       	sbiw	r26, 0x06	; 6
    253e:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2542:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2546:	59 96       	adiw	r26, 0x19	; 25
    2548:	fc 93       	st	X, r31
    254a:	ee 93       	st	-X, r30
    254c:	58 97       	sbiw	r26, 0x18	; 24
    254e:	30 81       	ld	r19, Z
    2550:	3f 5f       	subi	r19, 0xFF	; 255
    2552:	30 83       	st	Z, r19
    2554:	22 23       	and	r18, r18
    2556:	19 f0       	breq	.+6      	; 0x255e <vTaskPlaceOnEventListRestricted+0x7a>
    2558:	6f ef       	ldi	r22, 0xFF	; 255
    255a:	7f ef       	ldi	r23, 0xFF	; 255
    255c:	cb 01       	movw	r24, r22
    255e:	42 2f       	mov	r20, r18
    2560:	f4 da       	rcall	.-2584   	; 0x1b4a <prvAddCurrentTaskToDelayedList>
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <xTaskRemoveFromEventList>:
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	dc 01       	movw	r26, r24
    256e:	17 96       	adiw	r26, 0x07	; 7
    2570:	ed 91       	ld	r30, X+
    2572:	fc 91       	ld	r31, X
    2574:	18 97       	sbiw	r26, 0x08	; 8
    2576:	00 84       	ldd	r0, Z+8	; 0x08
    2578:	f1 85       	ldd	r31, Z+9	; 0x09
    257a:	e0 2d       	mov	r30, r0
    257c:	a0 8d       	ldd	r26, Z+24	; 0x18
    257e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2580:	c2 89       	ldd	r28, Z+18	; 0x12
    2582:	d3 89       	ldd	r29, Z+19	; 0x13
    2584:	84 89       	ldd	r24, Z+20	; 0x14
    2586:	95 89       	ldd	r25, Z+21	; 0x15
    2588:	9f 83       	std	Y+7, r25	; 0x07
    258a:	8e 83       	std	Y+6, r24	; 0x06
    258c:	c4 89       	ldd	r28, Z+20	; 0x14
    258e:	d5 89       	ldd	r29, Z+21	; 0x15
    2590:	82 89       	ldd	r24, Z+18	; 0x12
    2592:	93 89       	ldd	r25, Z+19	; 0x13
    2594:	9d 83       	std	Y+5, r25	; 0x05
    2596:	8c 83       	std	Y+4, r24	; 0x04
    2598:	9f 01       	movw	r18, r30
    259a:	22 5f       	subi	r18, 0xF2	; 242
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	8d 91       	ld	r24, X+
    25a2:	9c 91       	ld	r25, X
    25a4:	12 97       	sbiw	r26, 0x02	; 2
    25a6:	82 17       	cp	r24, r18
    25a8:	93 07       	cpc	r25, r19
    25aa:	31 f4       	brne	.+12     	; 0x25b8 <xTaskRemoveFromEventList+0x50>
    25ac:	84 89       	ldd	r24, Z+20	; 0x14
    25ae:	95 89       	ldd	r25, Z+21	; 0x15
    25b0:	12 96       	adiw	r26, 0x02	; 2
    25b2:	9c 93       	st	X, r25
    25b4:	8e 93       	st	-X, r24
    25b6:	11 97       	sbiw	r26, 0x01	; 1
    25b8:	11 8e       	std	Z+25, r1	; 0x19
    25ba:	10 8e       	std	Z+24, r1	; 0x18
    25bc:	8c 91       	ld	r24, X
    25be:	81 50       	subi	r24, 0x01	; 1
    25c0:	8c 93       	st	X, r24
    25c2:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    25c6:	81 11       	cpse	r24, r1
    25c8:	52 c0       	rjmp	.+164    	; 0x266e <xTaskRemoveFromEventList+0x106>
    25ca:	a4 85       	ldd	r26, Z+12	; 0x0c
    25cc:	b5 85       	ldd	r27, Z+13	; 0x0d
    25ce:	c6 81       	ldd	r28, Z+6	; 0x06
    25d0:	d7 81       	ldd	r29, Z+7	; 0x07
    25d2:	80 85       	ldd	r24, Z+8	; 0x08
    25d4:	91 85       	ldd	r25, Z+9	; 0x09
    25d6:	9f 83       	std	Y+7, r25	; 0x07
    25d8:	8e 83       	std	Y+6, r24	; 0x06
    25da:	c0 85       	ldd	r28, Z+8	; 0x08
    25dc:	d1 85       	ldd	r29, Z+9	; 0x09
    25de:	86 81       	ldd	r24, Z+6	; 0x06
    25e0:	97 81       	ldd	r25, Z+7	; 0x07
    25e2:	9d 83       	std	Y+5, r25	; 0x05
    25e4:	8c 83       	std	Y+4, r24	; 0x04
    25e6:	9f 01       	movw	r18, r30
    25e8:	2e 5f       	subi	r18, 0xFE	; 254
    25ea:	3f 4f       	sbci	r19, 0xFF	; 255
    25ec:	11 96       	adiw	r26, 0x01	; 1
    25ee:	8d 91       	ld	r24, X+
    25f0:	9c 91       	ld	r25, X
    25f2:	12 97       	sbiw	r26, 0x02	; 2
    25f4:	82 17       	cp	r24, r18
    25f6:	93 07       	cpc	r25, r19
    25f8:	31 f4       	brne	.+12     	; 0x2606 <xTaskRemoveFromEventList+0x9e>
    25fa:	80 85       	ldd	r24, Z+8	; 0x08
    25fc:	91 85       	ldd	r25, Z+9	; 0x09
    25fe:	12 96       	adiw	r26, 0x02	; 2
    2600:	9c 93       	st	X, r25
    2602:	8e 93       	st	-X, r24
    2604:	11 97       	sbiw	r26, 0x01	; 1
    2606:	15 86       	std	Z+13, r1	; 0x0d
    2608:	14 86       	std	Z+12, r1	; 0x0c
    260a:	8c 91       	ld	r24, X
    260c:	81 50       	subi	r24, 0x01	; 1
    260e:	8c 93       	st	X, r24
    2610:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2612:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    2616:	8a 17       	cp	r24, r26
    2618:	10 f4       	brcc	.+4      	; 0x261e <xTaskRemoveFromEventList+0xb6>
    261a:	a0 93 41 0d 	sts	0x0D41, r26	; 0x800d41 <uxTopReadyPriority>
    261e:	8b e0       	ldi	r24, 0x0B	; 11
    2620:	8a 9f       	mul	r24, r26
    2622:	d0 01       	movw	r26, r0
    2624:	11 24       	eor	r1, r1
    2626:	ad 57       	subi	r26, 0x7D	; 125
    2628:	b2 4f       	sbci	r27, 0xF2	; 242
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	0d 90       	ld	r0, X+
    262e:	bc 91       	ld	r27, X
    2630:	a0 2d       	mov	r26, r0
    2632:	b7 83       	std	Z+7, r27	; 0x07
    2634:	a6 83       	std	Z+6, r26	; 0x06
    2636:	16 96       	adiw	r26, 0x06	; 6
    2638:	4d 91       	ld	r20, X+
    263a:	5c 91       	ld	r21, X
    263c:	17 97       	sbiw	r26, 0x07	; 7
    263e:	51 87       	std	Z+9, r21	; 0x09
    2640:	40 87       	std	Z+8, r20	; 0x08
    2642:	16 96       	adiw	r26, 0x06	; 6
    2644:	cd 91       	ld	r28, X+
    2646:	dc 91       	ld	r29, X
    2648:	17 97       	sbiw	r26, 0x07	; 7
    264a:	3d 83       	std	Y+5, r19	; 0x05
    264c:	2c 83       	std	Y+4, r18	; 0x04
    264e:	17 96       	adiw	r26, 0x07	; 7
    2650:	3c 93       	st	X, r19
    2652:	2e 93       	st	-X, r18
    2654:	16 97       	sbiw	r26, 0x06	; 6
    2656:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2658:	8a 9f       	mul	r24, r26
    265a:	d0 01       	movw	r26, r0
    265c:	11 24       	eor	r1, r1
    265e:	ad 57       	subi	r26, 0x7D	; 125
    2660:	b2 4f       	sbci	r27, 0xF2	; 242
    2662:	b5 87       	std	Z+13, r27	; 0x0d
    2664:	a4 87       	std	Z+12, r26	; 0x0c
    2666:	8c 91       	ld	r24, X
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	8c 93       	st	X, r24
    266c:	1c c0       	rjmp	.+56     	; 0x26a6 <xTaskRemoveFromEventList+0x13e>
    266e:	4e e5       	ldi	r20, 0x5E	; 94
    2670:	5d e0       	ldi	r21, 0x0D	; 13
    2672:	da 01       	movw	r26, r20
    2674:	11 96       	adiw	r26, 0x01	; 1
    2676:	cd 91       	ld	r28, X+
    2678:	dc 91       	ld	r29, X
    267a:	12 97       	sbiw	r26, 0x02	; 2
    267c:	d3 8b       	std	Z+19, r29	; 0x13
    267e:	c2 8b       	std	Z+18, r28	; 0x12
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
    2682:	9f 81       	ldd	r25, Y+7	; 0x07
    2684:	95 8b       	std	Z+21, r25	; 0x15
    2686:	84 8b       	std	Z+20, r24	; 0x14
    2688:	8e 81       	ldd	r24, Y+6	; 0x06
    268a:	9f 81       	ldd	r25, Y+7	; 0x07
    268c:	dc 01       	movw	r26, r24
    268e:	15 96       	adiw	r26, 0x05	; 5
    2690:	3c 93       	st	X, r19
    2692:	2e 93       	st	-X, r18
    2694:	14 97       	sbiw	r26, 0x04	; 4
    2696:	3f 83       	std	Y+7, r19	; 0x07
    2698:	2e 83       	std	Y+6, r18	; 0x06
    269a:	51 8f       	std	Z+25, r21	; 0x19
    269c:	40 8f       	std	Z+24, r20	; 0x18
    269e:	da 01       	movw	r26, r20
    26a0:	8c 91       	ld	r24, X
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	8c 93       	st	X, r24
    26a6:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    26aa:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    26ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    26b0:	5a 96       	adiw	r26, 0x1a	; 26
    26b2:	8c 91       	ld	r24, X
    26b4:	89 17       	cp	r24, r25
    26b6:	20 f4       	brcc	.+8      	; 0x26c0 <xTaskRemoveFromEventList+0x158>
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	80 93 3b 0d 	sts	0x0D3B, r24	; 0x800d3b <xYieldPending>
    26be:	01 c0       	rjmp	.+2      	; 0x26c2 <xTaskRemoveFromEventList+0x15a>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <vTaskInternalSetTimeOutState>:
    26c8:	20 91 3a 0d 	lds	r18, 0x0D3A	; 0x800d3a <xNumOfOverflows>
    26cc:	fc 01       	movw	r30, r24
    26ce:	20 83       	st	Z, r18
    26d0:	40 91 42 0d 	lds	r20, 0x0D42	; 0x800d42 <xTickCount>
    26d4:	50 91 43 0d 	lds	r21, 0x0D43	; 0x800d43 <xTickCount+0x1>
    26d8:	60 91 44 0d 	lds	r22, 0x0D44	; 0x800d44 <xTickCount+0x2>
    26dc:	70 91 45 0d 	lds	r23, 0x0D45	; 0x800d45 <xTickCount+0x3>
    26e0:	41 83       	std	Z+1, r20	; 0x01
    26e2:	52 83       	std	Z+2, r21	; 0x02
    26e4:	63 83       	std	Z+3, r22	; 0x03
    26e6:	74 83       	std	Z+4, r23	; 0x04
    26e8:	08 95       	ret

000026ea <xTaskCheckForTimeOut>:
    26ea:	cf 92       	push	r12
    26ec:	df 92       	push	r13
    26ee:	ef 92       	push	r14
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	fb 01       	movw	r30, r22
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	0f 92       	push	r0
    2702:	40 91 42 0d 	lds	r20, 0x0D42	; 0x800d42 <xTickCount>
    2706:	50 91 43 0d 	lds	r21, 0x0D43	; 0x800d43 <xTickCount+0x1>
    270a:	60 91 44 0d 	lds	r22, 0x0D44	; 0x800d44 <xTickCount+0x2>
    270e:	70 91 45 0d 	lds	r23, 0x0D45	; 0x800d45 <xTickCount+0x3>
    2712:	00 81       	ld	r16, Z
    2714:	11 81       	ldd	r17, Z+1	; 0x01
    2716:	22 81       	ldd	r18, Z+2	; 0x02
    2718:	33 81       	ldd	r19, Z+3	; 0x03
    271a:	0f 3f       	cpi	r16, 0xFF	; 255
    271c:	af ef       	ldi	r26, 0xFF	; 255
    271e:	1a 07       	cpc	r17, r26
    2720:	2a 07       	cpc	r18, r26
    2722:	3a 07       	cpc	r19, r26
    2724:	79 f1       	breq	.+94     	; 0x2784 <xTaskCheckForTimeOut+0x9a>
    2726:	ec 01       	movw	r28, r24
    2728:	c9 80       	ldd	r12, Y+1	; 0x01
    272a:	da 80       	ldd	r13, Y+2	; 0x02
    272c:	eb 80       	ldd	r14, Y+3	; 0x03
    272e:	fc 80       	ldd	r15, Y+4	; 0x04
    2730:	a0 91 3a 0d 	lds	r26, 0x0D3A	; 0x800d3a <xNumOfOverflows>
    2734:	b8 81       	ld	r27, Y
    2736:	ba 17       	cp	r27, r26
    2738:	59 f0       	breq	.+22     	; 0x2750 <xTaskCheckForTimeOut+0x66>
    273a:	4c 15       	cp	r20, r12
    273c:	5d 05       	cpc	r21, r13
    273e:	6e 05       	cpc	r22, r14
    2740:	7f 05       	cpc	r23, r15
    2742:	30 f0       	brcs	.+12     	; 0x2750 <xTaskCheckForTimeOut+0x66>
    2744:	10 82       	st	Z, r1
    2746:	11 82       	std	Z+1, r1	; 0x01
    2748:	12 82       	std	Z+2, r1	; 0x02
    274a:	13 82       	std	Z+3, r1	; 0x03
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	1b c0       	rjmp	.+54     	; 0x2786 <xTaskCheckForTimeOut+0x9c>
    2750:	4c 19       	sub	r20, r12
    2752:	5d 09       	sbc	r21, r13
    2754:	6e 09       	sbc	r22, r14
    2756:	7f 09       	sbc	r23, r15
    2758:	40 17       	cp	r20, r16
    275a:	51 07       	cpc	r21, r17
    275c:	62 07       	cpc	r22, r18
    275e:	73 07       	cpc	r23, r19
    2760:	58 f4       	brcc	.+22     	; 0x2778 <xTaskCheckForTimeOut+0x8e>
    2762:	04 1b       	sub	r16, r20
    2764:	15 0b       	sbc	r17, r21
    2766:	26 0b       	sbc	r18, r22
    2768:	37 0b       	sbc	r19, r23
    276a:	00 83       	st	Z, r16
    276c:	11 83       	std	Z+1, r17	; 0x01
    276e:	22 83       	std	Z+2, r18	; 0x02
    2770:	33 83       	std	Z+3, r19	; 0x03
    2772:	aa df       	rcall	.-172    	; 0x26c8 <vTaskInternalSetTimeOutState>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	07 c0       	rjmp	.+14     	; 0x2786 <xTaskCheckForTimeOut+0x9c>
    2778:	10 82       	st	Z, r1
    277a:	11 82       	std	Z+1, r1	; 0x01
    277c:	12 82       	std	Z+2, r1	; 0x02
    277e:	13 82       	std	Z+3, r1	; 0x03
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <xTaskCheckForTimeOut+0x9c>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	0f 90       	pop	r0
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
    279a:	08 95       	ret

0000279c <vTaskMissedYield>:
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	80 93 3b 0d 	sts	0x0D3B, r24	; 0x800d3b <xYieldPending>
    27a2:	08 95       	ret

000027a4 <xTaskGetSchedulerState>:
    27a4:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <xSchedulerRunning>
    27a8:	88 23       	and	r24, r24
    27aa:	31 f0       	breq	.+12     	; 0x27b8 <xTaskGetSchedulerState+0x14>
    27ac:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <uxSchedulerSuspended>
    27b0:	88 23       	and	r24, r24
    27b2:	21 f0       	breq	.+8      	; 0x27bc <xTaskGetSchedulerState+0x18>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	08 95       	ret
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	08 95       	ret
    27bc:	82 e0       	ldi	r24, 0x02	; 2
    27be:	08 95       	ret

000027c0 <xTaskPriorityInherit>:
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	fc 01       	movw	r30, r24
    27ca:	89 2b       	or	r24, r25
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <xTaskPriorityInherit+0x10>
    27ce:	79 c0       	rjmp	.+242    	; 0x28c2 <xTaskPriorityInherit+0x102>
    27d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    27d2:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    27d6:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    27da:	5a 96       	adiw	r26, 0x1a	; 26
    27dc:	9c 91       	ld	r25, X
    27de:	89 17       	cp	r24, r25
    27e0:	08 f0       	brcs	.+2      	; 0x27e4 <xTaskPriorityInherit+0x24>
    27e2:	63 c0       	rjmp	.+198    	; 0x28aa <xTaskPriorityInherit+0xea>
    27e4:	46 85       	ldd	r20, Z+14	; 0x0e
    27e6:	57 85       	ldd	r21, Z+15	; 0x0f
    27e8:	60 89       	ldd	r22, Z+16	; 0x10
    27ea:	71 89       	ldd	r23, Z+17	; 0x11
    27ec:	77 23       	and	r23, r23
    27ee:	94 f0       	brlt	.+36     	; 0x2814 <xTaskPriorityInherit+0x54>
    27f0:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    27f4:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    27f8:	5a 96       	adiw	r26, 0x1a	; 26
    27fa:	9c 91       	ld	r25, X
    27fc:	4a e0       	ldi	r20, 0x0A	; 10
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	49 1b       	sub	r20, r25
    2806:	51 09       	sbc	r21, r1
    2808:	61 09       	sbc	r22, r1
    280a:	71 09       	sbc	r23, r1
    280c:	46 87       	std	Z+14, r20	; 0x0e
    280e:	57 87       	std	Z+15, r21	; 0x0f
    2810:	60 8b       	std	Z+16, r22	; 0x10
    2812:	71 8b       	std	Z+17, r23	; 0x11
    2814:	2b e0       	ldi	r18, 0x0B	; 11
    2816:	82 9f       	mul	r24, r18
    2818:	c0 01       	movw	r24, r0
    281a:	11 24       	eor	r1, r1
    281c:	8d 57       	subi	r24, 0x7D	; 125
    281e:	92 4f       	sbci	r25, 0xF2	; 242
    2820:	24 85       	ldd	r18, Z+12	; 0x0c
    2822:	35 85       	ldd	r19, Z+13	; 0x0d
    2824:	28 17       	cp	r18, r24
    2826:	39 07       	cpc	r19, r25
    2828:	b9 f5       	brne	.+110    	; 0x2898 <xTaskPriorityInherit+0xd8>
    282a:	ef 01       	movw	r28, r30
    282c:	8f 01       	movw	r16, r30
    282e:	0e 5f       	subi	r16, 0xFE	; 254
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	c8 01       	movw	r24, r16
    2834:	0e 94 bc 08 	call	0x1178	; 0x1178 <uxListRemove>
    2838:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    283c:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2840:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2842:	ea 8f       	std	Y+26, r30	; 0x1a
    2844:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    2848:	8e 17       	cp	r24, r30
    284a:	10 f4       	brcc	.+4      	; 0x2850 <xTaskPriorityInherit+0x90>
    284c:	e0 93 41 0d 	sts	0x0D41, r30	; 0x800d41 <uxTopReadyPriority>
    2850:	8b e0       	ldi	r24, 0x0B	; 11
    2852:	8e 9f       	mul	r24, r30
    2854:	f0 01       	movw	r30, r0
    2856:	11 24       	eor	r1, r1
    2858:	ed 57       	subi	r30, 0x7D	; 125
    285a:	f2 4f       	sbci	r31, 0xF2	; 242
    285c:	01 80       	ldd	r0, Z+1	; 0x01
    285e:	f2 81       	ldd	r31, Z+2	; 0x02
    2860:	e0 2d       	mov	r30, r0
    2862:	ff 83       	std	Y+7, r31	; 0x07
    2864:	ee 83       	std	Y+6, r30	; 0x06
    2866:	26 81       	ldd	r18, Z+6	; 0x06
    2868:	37 81       	ldd	r19, Z+7	; 0x07
    286a:	39 87       	std	Y+9, r19	; 0x09
    286c:	28 87       	std	Y+8, r18	; 0x08
    286e:	a6 81       	ldd	r26, Z+6	; 0x06
    2870:	b7 81       	ldd	r27, Z+7	; 0x07
    2872:	15 96       	adiw	r26, 0x05	; 5
    2874:	1c 93       	st	X, r17
    2876:	0e 93       	st	-X, r16
    2878:	14 97       	sbiw	r26, 0x04	; 4
    287a:	17 83       	std	Z+7, r17	; 0x07
    287c:	06 83       	std	Z+6, r16	; 0x06
    287e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2880:	8e 9f       	mul	r24, r30
    2882:	f0 01       	movw	r30, r0
    2884:	11 24       	eor	r1, r1
    2886:	ed 57       	subi	r30, 0x7D	; 125
    2888:	f2 4f       	sbci	r31, 0xF2	; 242
    288a:	fd 87       	std	Y+13, r31	; 0x0d
    288c:	ec 87       	std	Y+12, r30	; 0x0c
    288e:	80 81       	ld	r24, Z
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	80 83       	st	Z, r24
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	16 c0       	rjmp	.+44     	; 0x28c4 <xTaskPriorityInherit+0x104>
    2898:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    289c:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    28a0:	5a 96       	adiw	r26, 0x1a	; 26
    28a2:	8c 91       	ld	r24, X
    28a4:	82 8f       	std	Z+26, r24	; 0x1a
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	0d c0       	rjmp	.+26     	; 0x28c4 <xTaskPriorityInherit+0x104>
    28aa:	a0 91 f1 0d 	lds	r26, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    28ae:	b0 91 f2 0d 	lds	r27, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	25 a5       	ldd	r18, Z+45	; 0x2d
    28b6:	5a 96       	adiw	r26, 0x1a	; 26
    28b8:	9c 91       	ld	r25, X
    28ba:	29 17       	cp	r18, r25
    28bc:	18 f0       	brcs	.+6      	; 0x28c4 <xTaskPriorityInherit+0x104>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <xTaskPriorityInherit+0x104>
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <xTaskPriorityDisinherit>:
    28ce:	0f 93       	push	r16
    28d0:	1f 93       	push	r17
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
    28d6:	fc 01       	movw	r30, r24
    28d8:	89 2b       	or	r24, r25
    28da:	09 f4       	brne	.+2      	; 0x28de <xTaskPriorityDisinherit+0x10>
    28dc:	49 c0       	rjmp	.+146    	; 0x2970 <xTaskPriorityDisinherit+0xa2>
    28de:	86 a5       	ldd	r24, Z+46	; 0x2e
    28e0:	81 50       	subi	r24, 0x01	; 1
    28e2:	86 a7       	std	Z+46, r24	; 0x2e
    28e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    28e6:	95 a5       	ldd	r25, Z+45	; 0x2d
    28e8:	29 17       	cp	r18, r25
    28ea:	09 f4       	brne	.+2      	; 0x28ee <xTaskPriorityDisinherit+0x20>
    28ec:	43 c0       	rjmp	.+134    	; 0x2974 <xTaskPriorityDisinherit+0xa6>
    28ee:	81 11       	cpse	r24, r1
    28f0:	43 c0       	rjmp	.+134    	; 0x2978 <xTaskPriorityDisinherit+0xaa>
    28f2:	ef 01       	movw	r28, r30
    28f4:	8f 01       	movw	r16, r30
    28f6:	0e 5f       	subi	r16, 0xFE	; 254
    28f8:	1f 4f       	sbci	r17, 0xFF	; 255
    28fa:	c8 01       	movw	r24, r16
    28fc:	0e 94 bc 08 	call	0x1178	; 0x1178 <uxListRemove>
    2900:	ed a5       	ldd	r30, Y+45	; 0x2d
    2902:	ea 8f       	std	Y+26, r30	; 0x1a
    2904:	8a e0       	ldi	r24, 0x0A	; 10
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	8e 1b       	sub	r24, r30
    290e:	91 09       	sbc	r25, r1
    2910:	a1 09       	sbc	r26, r1
    2912:	b1 09       	sbc	r27, r1
    2914:	8e 87       	std	Y+14, r24	; 0x0e
    2916:	9f 87       	std	Y+15, r25	; 0x0f
    2918:	a8 8b       	std	Y+16, r26	; 0x10
    291a:	b9 8b       	std	Y+17, r27	; 0x11
    291c:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    2920:	8e 17       	cp	r24, r30
    2922:	10 f4       	brcc	.+4      	; 0x2928 <xTaskPriorityDisinherit+0x5a>
    2924:	e0 93 41 0d 	sts	0x0D41, r30	; 0x800d41 <uxTopReadyPriority>
    2928:	8b e0       	ldi	r24, 0x0B	; 11
    292a:	8e 9f       	mul	r24, r30
    292c:	f0 01       	movw	r30, r0
    292e:	11 24       	eor	r1, r1
    2930:	ed 57       	subi	r30, 0x7D	; 125
    2932:	f2 4f       	sbci	r31, 0xF2	; 242
    2934:	01 80       	ldd	r0, Z+1	; 0x01
    2936:	f2 81       	ldd	r31, Z+2	; 0x02
    2938:	e0 2d       	mov	r30, r0
    293a:	ff 83       	std	Y+7, r31	; 0x07
    293c:	ee 83       	std	Y+6, r30	; 0x06
    293e:	26 81       	ldd	r18, Z+6	; 0x06
    2940:	37 81       	ldd	r19, Z+7	; 0x07
    2942:	39 87       	std	Y+9, r19	; 0x09
    2944:	28 87       	std	Y+8, r18	; 0x08
    2946:	a6 81       	ldd	r26, Z+6	; 0x06
    2948:	b7 81       	ldd	r27, Z+7	; 0x07
    294a:	15 96       	adiw	r26, 0x05	; 5
    294c:	1c 93       	st	X, r17
    294e:	0e 93       	st	-X, r16
    2950:	14 97       	sbiw	r26, 0x04	; 4
    2952:	17 83       	std	Z+7, r17	; 0x07
    2954:	06 83       	std	Z+6, r16	; 0x06
    2956:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2958:	8e 9f       	mul	r24, r30
    295a:	f0 01       	movw	r30, r0
    295c:	11 24       	eor	r1, r1
    295e:	ed 57       	subi	r30, 0x7D	; 125
    2960:	f2 4f       	sbci	r31, 0xF2	; 242
    2962:	fd 87       	std	Y+13, r31	; 0x0d
    2964:	ec 87       	std	Y+12, r30	; 0x0c
    2966:	80 81       	ld	r24, Z
    2968:	8f 5f       	subi	r24, 0xFF	; 255
    296a:	80 83       	st	Z, r24
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	05 c0       	rjmp	.+10     	; 0x297a <xTaskPriorityDisinherit+0xac>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	03 c0       	rjmp	.+6      	; 0x297a <xTaskPriorityDisinherit+0xac>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	01 c0       	rjmp	.+2      	; 0x297a <xTaskPriorityDisinherit+0xac>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	08 95       	ret

00002984 <vTaskPriorityDisinheritAfterTimeout>:
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	fc 01       	movw	r30, r24
    298e:	89 2b       	or	r24, r25
    2990:	09 f4       	brne	.+2      	; 0x2994 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2992:	5a c0       	rjmp	.+180    	; 0x2a48 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2994:	85 a5       	ldd	r24, Z+45	; 0x2d
    2996:	86 17       	cp	r24, r22
    2998:	08 f4       	brcc	.+2      	; 0x299c <vTaskPriorityDisinheritAfterTimeout+0x18>
    299a:	86 2f       	mov	r24, r22
    299c:	92 8d       	ldd	r25, Z+26	; 0x1a
    299e:	98 17       	cp	r25, r24
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <vTaskPriorityDisinheritAfterTimeout+0x20>
    29a2:	52 c0       	rjmp	.+164    	; 0x2a48 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    29a4:	26 a5       	ldd	r18, Z+46	; 0x2e
    29a6:	21 30       	cpi	r18, 0x01	; 1
    29a8:	09 f0       	breq	.+2      	; 0x29ac <vTaskPriorityDisinheritAfterTimeout+0x28>
    29aa:	4e c0       	rjmp	.+156    	; 0x2a48 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    29ac:	82 8f       	std	Z+26, r24	; 0x1a
    29ae:	46 85       	ldd	r20, Z+14	; 0x0e
    29b0:	57 85       	ldd	r21, Z+15	; 0x0f
    29b2:	60 89       	ldd	r22, Z+16	; 0x10
    29b4:	71 89       	ldd	r23, Z+17	; 0x11
    29b6:	77 23       	and	r23, r23
    29b8:	64 f0       	brlt	.+24     	; 0x29d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    29ba:	4a e0       	ldi	r20, 0x0A	; 10
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	48 1b       	sub	r20, r24
    29c4:	51 09       	sbc	r21, r1
    29c6:	61 09       	sbc	r22, r1
    29c8:	71 09       	sbc	r23, r1
    29ca:	46 87       	std	Z+14, r20	; 0x0e
    29cc:	57 87       	std	Z+15, r21	; 0x0f
    29ce:	60 8b       	std	Z+16, r22	; 0x10
    29d0:	71 8b       	std	Z+17, r23	; 0x11
    29d2:	2b e0       	ldi	r18, 0x0B	; 11
    29d4:	92 9f       	mul	r25, r18
    29d6:	c0 01       	movw	r24, r0
    29d8:	11 24       	eor	r1, r1
    29da:	8d 57       	subi	r24, 0x7D	; 125
    29dc:	92 4f       	sbci	r25, 0xF2	; 242
    29de:	24 85       	ldd	r18, Z+12	; 0x0c
    29e0:	35 85       	ldd	r19, Z+13	; 0x0d
    29e2:	28 17       	cp	r18, r24
    29e4:	39 07       	cpc	r19, r25
    29e6:	81 f5       	brne	.+96     	; 0x2a48 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    29e8:	ef 01       	movw	r28, r30
    29ea:	8f 01       	movw	r16, r30
    29ec:	0e 5f       	subi	r16, 0xFE	; 254
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	c8 01       	movw	r24, r16
    29f2:	0e 94 bc 08 	call	0x1178	; 0x1178 <uxListRemove>
    29f6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    29f8:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <uxTopReadyPriority>
    29fc:	8e 17       	cp	r24, r30
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2a00:	e0 93 41 0d 	sts	0x0D41, r30	; 0x800d41 <uxTopReadyPriority>
    2a04:	8b e0       	ldi	r24, 0x0B	; 11
    2a06:	8e 9f       	mul	r24, r30
    2a08:	f0 01       	movw	r30, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	ed 57       	subi	r30, 0x7D	; 125
    2a0e:	f2 4f       	sbci	r31, 0xF2	; 242
    2a10:	01 80       	ldd	r0, Z+1	; 0x01
    2a12:	f2 81       	ldd	r31, Z+2	; 0x02
    2a14:	e0 2d       	mov	r30, r0
    2a16:	ff 83       	std	Y+7, r31	; 0x07
    2a18:	ee 83       	std	Y+6, r30	; 0x06
    2a1a:	26 81       	ldd	r18, Z+6	; 0x06
    2a1c:	37 81       	ldd	r19, Z+7	; 0x07
    2a1e:	39 87       	std	Y+9, r19	; 0x09
    2a20:	28 87       	std	Y+8, r18	; 0x08
    2a22:	a6 81       	ldd	r26, Z+6	; 0x06
    2a24:	b7 81       	ldd	r27, Z+7	; 0x07
    2a26:	15 96       	adiw	r26, 0x05	; 5
    2a28:	1c 93       	st	X, r17
    2a2a:	0e 93       	st	-X, r16
    2a2c:	14 97       	sbiw	r26, 0x04	; 4
    2a2e:	17 83       	std	Z+7, r17	; 0x07
    2a30:	06 83       	std	Z+6, r16	; 0x06
    2a32:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a34:	8e 9f       	mul	r24, r30
    2a36:	f0 01       	movw	r30, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	ed 57       	subi	r30, 0x7D	; 125
    2a3c:	f2 4f       	sbci	r31, 0xF2	; 242
    2a3e:	fd 87       	std	Y+13, r31	; 0x0d
    2a40:	ec 87       	std	Y+12, r30	; 0x0c
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	08 95       	ret

00002a52 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2a52:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2a56:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2a5a:	89 2b       	or	r24, r25
    2a5c:	39 f0       	breq	.+14     	; 0x2a6c <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2a5e:	e0 91 f1 0d 	lds	r30, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2a62:	f0 91 f2 0d 	lds	r31, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    2a66:	86 a5       	ldd	r24, Z+46	; 0x2e
    2a68:	8f 5f       	subi	r24, 0xFF	; 255
    2a6a:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2a6c:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <pxCurrentTCB>
    2a70:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <pxCurrentTCB+0x1>
    }
    2a74:	08 95       	ret

00002a76 <prvInsertTimerInActiveList>:
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	fc 01       	movw	r30, r24
    2a84:	42 83       	std	Z+2, r20	; 0x02
    2a86:	53 83       	std	Z+3, r21	; 0x03
    2a88:	64 83       	std	Z+4, r22	; 0x04
    2a8a:	75 83       	std	Z+5, r23	; 0x05
    2a8c:	93 87       	std	Z+11, r25	; 0x0b
    2a8e:	82 87       	std	Z+10, r24	; 0x0a
    2a90:	04 17       	cp	r16, r20
    2a92:	15 07       	cpc	r17, r21
    2a94:	26 07       	cpc	r18, r22
    2a96:	37 07       	cpc	r19, r23
    2a98:	c0 f0       	brcs	.+48     	; 0x2aca <prvInsertTimerInActiveList+0x54>
    2a9a:	0c 19       	sub	r16, r12
    2a9c:	1d 09       	sbc	r17, r13
    2a9e:	2e 09       	sbc	r18, r14
    2aa0:	3f 09       	sbc	r19, r15
    2aa2:	86 85       	ldd	r24, Z+14	; 0x0e
    2aa4:	97 85       	ldd	r25, Z+15	; 0x0f
    2aa6:	a0 89       	ldd	r26, Z+16	; 0x10
    2aa8:	b1 89       	ldd	r27, Z+17	; 0x11
    2aaa:	08 17       	cp	r16, r24
    2aac:	19 07       	cpc	r17, r25
    2aae:	2a 07       	cpc	r18, r26
    2ab0:	3b 07       	cpc	r19, r27
    2ab2:	00 f5       	brcc	.+64     	; 0x2af4 <prvInsertTimerInActiveList+0x7e>
    2ab4:	bf 01       	movw	r22, r30
    2ab6:	6e 5f       	subi	r22, 0xFE	; 254
    2ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aba:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <pxOverflowTimerList>
    2abe:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <pxOverflowTimerList+0x1>
    2ac2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vListInsert>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	18 c0       	rjmp	.+48     	; 0x2afa <prvInsertTimerInActiveList+0x84>
    2aca:	0c 15       	cp	r16, r12
    2acc:	1d 05       	cpc	r17, r13
    2ace:	2e 05       	cpc	r18, r14
    2ad0:	3f 05       	cpc	r19, r15
    2ad2:	28 f4       	brcc	.+10     	; 0x2ade <prvInsertTimerInActiveList+0x68>
    2ad4:	4c 15       	cp	r20, r12
    2ad6:	5d 05       	cpc	r21, r13
    2ad8:	6e 05       	cpc	r22, r14
    2ada:	7f 05       	cpc	r23, r15
    2adc:	68 f4       	brcc	.+26     	; 0x2af8 <prvInsertTimerInActiveList+0x82>
    2ade:	bf 01       	movw	r22, r30
    2ae0:	6e 5f       	subi	r22, 0xFE	; 254
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	80 91 fd 0d 	lds	r24, 0x0DFD	; 0x800dfd <pxCurrentTimerList>
    2ae8:	90 91 fe 0d 	lds	r25, 0x0DFE	; 0x800dfe <pxCurrentTimerList+0x1>
    2aec:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vListInsert>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	03 c0       	rjmp	.+6      	; 0x2afa <prvInsertTimerInActiveList+0x84>
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	01 c0       	rjmp	.+2      	; 0x2afa <prvInsertTimerInActiveList+0x84>
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	08 95       	ret

00002b08 <prvCheckForValidListAndQueue>:
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	0f 92       	push	r0
    2b0e:	80 91 f9 0d 	lds	r24, 0x0DF9	; 0x800df9 <xTimerQueue>
    2b12:	90 91 fa 0d 	lds	r25, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
    2b16:	89 2b       	or	r24, r25
    2b18:	e9 f4       	brne	.+58     	; 0x2b54 <prvCheckForValidListAndQueue+0x4c>
    2b1a:	8a e0       	ldi	r24, 0x0A	; 10
    2b1c:	9e e0       	ldi	r25, 0x0E	; 14
    2b1e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <vListInitialise>
    2b22:	8f ef       	ldi	r24, 0xFF	; 255
    2b24:	9d e0       	ldi	r25, 0x0D	; 13
    2b26:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <vListInitialise>
    2b2a:	8a e0       	ldi	r24, 0x0A	; 10
    2b2c:	9e e0       	ldi	r25, 0x0E	; 14
    2b2e:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <pxCurrentTimerList+0x1>
    2b32:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <pxCurrentTimerList>
    2b36:	8f ef       	ldi	r24, 0xFF	; 255
    2b38:	9d e0       	ldi	r25, 0x0D	; 13
    2b3a:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <pxOverflowTimerList+0x1>
    2b3e:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <pxOverflowTimerList>
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	67 e0       	ldi	r22, 0x07	; 7
    2b46:	8a e0       	ldi	r24, 0x0A	; 10
    2b48:	0e 94 0f 0b 	call	0x161e	; 0x161e <xQueueGenericCreate>
    2b4c:	90 93 fa 0d 	sts	0x0DFA, r25	; 0x800dfa <xTimerQueue+0x1>
    2b50:	80 93 f9 0d 	sts	0x0DF9, r24	; 0x800df9 <xTimerQueue>
    2b54:	0f 90       	pop	r0
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	08 95       	ret

00002b5a <xTimerCreateTimerTask>:
    2b5a:	ef 92       	push	r14
    2b5c:	ff 92       	push	r15
    2b5e:	0f 93       	push	r16
    2b60:	d3 df       	rcall	.-90     	; 0x2b08 <prvCheckForValidListAndQueue>
    2b62:	80 91 f9 0d 	lds	r24, 0x0DF9	; 0x800df9 <xTimerQueue>
    2b66:	90 91 fa 0d 	lds	r25, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
    2b6a:	89 2b       	or	r24, r25
    2b6c:	89 f0       	breq	.+34     	; 0x2b90 <xTimerCreateTimerTask+0x36>
    2b6e:	0f 2e       	mov	r0, r31
    2b70:	f7 ef       	ldi	r31, 0xF7	; 247
    2b72:	ef 2e       	mov	r14, r31
    2b74:	fd e0       	ldi	r31, 0x0D	; 13
    2b76:	ff 2e       	mov	r15, r31
    2b78:	f0 2d       	mov	r31, r0
    2b7a:	03 e0       	ldi	r16, 0x03	; 3
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 ec       	ldi	r20, 0xC0	; 192
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	68 e2       	ldi	r22, 0x28	; 40
    2b86:	73 e0       	ldi	r23, 0x03	; 3
    2b88:	84 e4       	ldi	r24, 0x44	; 68
    2b8a:	91 e0       	ldi	r25, 0x01	; 1
    2b8c:	7d d8       	rcall	.-3846   	; 0x1c88 <xTaskCreate>
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <xTimerCreateTimerTask+0x38>
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b9a:	8f 92       	push	r8
    2b9c:	9f 92       	push	r9
    2b9e:	af 92       	push	r10
    2ba0:	bf 92       	push	r11
    2ba2:	cf 92       	push	r12
    2ba4:	df 92       	push	r13
    2ba6:	ef 92       	push	r14
    2ba8:	ff 92       	push	r15
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	27 97       	sbiw	r28, 0x07	; 7
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2bc2:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <xTimerQueue>
    2bc6:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
    2bca:	30 97       	sbiw	r30, 0x00	; 0
    2bcc:	81 f1       	breq	.+96     	; 0x2c2e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2bce:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2bd0:	2a 83       	std	Y+2, r18	; 0x02
    2bd2:	3b 83       	std	Y+3, r19	; 0x03
    2bd4:	4c 83       	std	Y+4, r20	; 0x04
    2bd6:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2bd8:	9f 83       	std	Y+7, r25	; 0x07
    2bda:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2bdc:	66 30       	cpi	r22, 0x06	; 6
    2bde:	f4 f4       	brge	.+60     	; 0x2c1c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2be0:	e1 dd       	rcall	.-1086   	; 0x27a4 <xTaskGetSchedulerState>
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	69 f4       	brne	.+26     	; 0x2c00 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2be6:	00 e0       	ldi	r16, 0x00	; 0
    2be8:	a7 01       	movw	r20, r14
    2bea:	96 01       	movw	r18, r12
    2bec:	be 01       	movw	r22, r28
    2bee:	6f 5f       	subi	r22, 0xFF	; 255
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	80 91 f9 0d 	lds	r24, 0x0DF9	; 0x800df9 <xTimerQueue>
    2bf6:	90 91 fa 0d 	lds	r25, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
    2bfa:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
    2bfe:	18 c0       	rjmp	.+48     	; 0x2c30 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c00:	00 e0       	ldi	r16, 0x00	; 0
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	a9 01       	movw	r20, r18
    2c08:	be 01       	movw	r22, r28
    2c0a:	6f 5f       	subi	r22, 0xFF	; 255
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	80 91 f9 0d 	lds	r24, 0x0DF9	; 0x800df9 <xTimerQueue>
    2c12:	90 91 fa 0d 	lds	r25, 0x0DFA	; 0x800dfa <xTimerQueue+0x1>
    2c16:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
    2c1a:	0a c0       	rjmp	.+20     	; 0x2c30 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	a8 01       	movw	r20, r16
    2c20:	be 01       	movw	r22, r28
    2c22:	6f 5f       	subi	r22, 0xFF	; 255
    2c24:	7f 4f       	sbci	r23, 0xFF	; 255
    2c26:	cf 01       	movw	r24, r30
    2c28:	0e 94 cc 0b 	call	0x1798	; 0x1798 <xQueueGenericSendFromISR>
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2c30:	27 96       	adiw	r28, 0x07	; 7
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	ff 90       	pop	r15
    2c46:	ef 90       	pop	r14
    2c48:	df 90       	pop	r13
    2c4a:	cf 90       	pop	r12
    2c4c:	bf 90       	pop	r11
    2c4e:	af 90       	pop	r10
    2c50:	9f 90       	pop	r9
    2c52:	8f 90       	pop	r8
    2c54:	08 95       	ret

00002c56 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c56:	2f 92       	push	r2
    2c58:	3f 92       	push	r3
    2c5a:	4f 92       	push	r4
    2c5c:	5f 92       	push	r5
    2c5e:	6f 92       	push	r6
    2c60:	7f 92       	push	r7
    2c62:	8f 92       	push	r8
    2c64:	9f 92       	push	r9
    2c66:	af 92       	push	r10
    2c68:	bf 92       	push	r11
    2c6a:	cf 92       	push	r12
    2c6c:	df 92       	push	r13
    2c6e:	ef 92       	push	r14
    2c70:	ff 92       	push	r15
    2c72:	0f 93       	push	r16
    2c74:	1f 93       	push	r17
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c7c:	6e d9       	rcall	.-3364   	; 0x1f5a <xTaskGetTickCount>
    2c7e:	2b 01       	movw	r4, r22
    2c80:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    2c82:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <xLastTime.2436>
    2c86:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <xLastTime.2436+0x1>
    2c8a:	a0 91 f5 0d 	lds	r26, 0x0DF5	; 0x800df5 <xLastTime.2436+0x2>
    2c8e:	b0 91 f6 0d 	lds	r27, 0x0DF6	; 0x800df6 <xLastTime.2436+0x3>
    2c92:	48 16       	cp	r4, r24
    2c94:	59 06       	cpc	r5, r25
    2c96:	6a 06       	cpc	r6, r26
    2c98:	7b 06       	cpc	r7, r27
    2c9a:	08 f0       	brcs	.+2      	; 0x2c9e <prvSampleTimeNow+0x48>
    2c9c:	53 c0       	rjmp	.+166    	; 0x2d44 <prvSampleTimeNow+0xee>
    2c9e:	3b c0       	rjmp	.+118    	; 0x2d16 <prvSampleTimeNow+0xc0>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ca0:	07 80       	ldd	r0, Z+7	; 0x07
    2ca2:	f0 85       	ldd	r31, Z+8	; 0x08
    2ca4:	e0 2d       	mov	r30, r0
    2ca6:	80 80       	ld	r8, Z
    2ca8:	91 80       	ldd	r9, Z+1	; 0x01
    2caa:	a2 80       	ldd	r10, Z+2	; 0x02
    2cac:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2cae:	c0 85       	ldd	r28, Z+8	; 0x08
    2cb0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cb2:	8e 01       	movw	r16, r28
    2cb4:	0e 5f       	subi	r16, 0xFE	; 254
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	c8 01       	movw	r24, r16
    2cba:	0e 94 bc 08 	call	0x1178	; 0x1178 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cbe:	ec 89       	ldd	r30, Y+20	; 0x14
    2cc0:	fd 89       	ldd	r31, Y+21	; 0x15
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2cc6:	8e 89       	ldd	r24, Y+22	; 0x16
    2cc8:	82 ff       	sbrs	r24, 2
    2cca:	25 c0       	rjmp	.+74     	; 0x2d16 <prvSampleTimeNow+0xc0>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cce:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd0:	a8 89       	ldd	r26, Y+16	; 0x10
    2cd2:	b9 89       	ldd	r27, Y+17	; 0x11
    2cd4:	88 0d       	add	r24, r8
    2cd6:	99 1d       	adc	r25, r9
    2cd8:	aa 1d       	adc	r26, r10
    2cda:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2cdc:	88 16       	cp	r8, r24
    2cde:	99 06       	cpc	r9, r25
    2ce0:	aa 06       	cpc	r10, r26
    2ce2:	bb 06       	cpc	r11, r27
    2ce4:	70 f4       	brcc	.+28     	; 0x2d02 <prvSampleTimeNow+0xac>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	9b 83       	std	Y+3, r25	; 0x03
    2cea:	ac 83       	std	Y+4, r26	; 0x04
    2cec:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2cee:	db 87       	std	Y+11, r29	; 0x0b
    2cf0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2cf2:	b8 01       	movw	r22, r16
    2cf4:	80 91 fd 0d 	lds	r24, 0x0DFD	; 0x800dfd <pxCurrentTimerList>
    2cf8:	90 91 fe 0d 	lds	r25, 0x0DFE	; 0x800dfe <pxCurrentTimerList+0x1>
    2cfc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vListInsert>
    2d00:	0a c0       	rjmp	.+20     	; 0x2d16 <prvSampleTimeNow+0xc0>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d02:	c1 2c       	mov	r12, r1
    2d04:	d1 2c       	mov	r13, r1
    2d06:	76 01       	movw	r14, r12
    2d08:	00 e0       	ldi	r16, 0x00	; 0
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	a5 01       	movw	r20, r10
    2d0e:	94 01       	movw	r18, r8
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	ce 01       	movw	r24, r28
    2d14:	42 df       	rcall	.-380    	; 0x2b9a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2d16:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <pxCurrentTimerList>
    2d1a:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <pxCurrentTimerList+0x1>
    2d1e:	80 81       	ld	r24, Z
    2d20:	81 11       	cpse	r24, r1
    2d22:	be cf       	rjmp	.-132    	; 0x2ca0 <prvSampleTimeNow+0x4a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2d24:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <pxOverflowTimerList>
    2d28:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <pxOverflowTimerList+0x1>
    2d2c:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <pxCurrentTimerList+0x1>
    2d30:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2d34:	f0 93 fc 0d 	sts	0x0DFC, r31	; 0x800dfc <pxOverflowTimerList+0x1>
    2d38:	e0 93 fb 0d 	sts	0x0DFB, r30	; 0x800dfb <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	f1 01       	movw	r30, r2
    2d40:	80 83       	st	Z, r24
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <prvSampleTimeNow+0xf2>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2d44:	f1 01       	movw	r30, r2
    2d46:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    2d48:	40 92 f3 0d 	sts	0x0DF3, r4	; 0x800df3 <xLastTime.2436>
    2d4c:	50 92 f4 0d 	sts	0x0DF4, r5	; 0x800df4 <xLastTime.2436+0x1>
    2d50:	60 92 f5 0d 	sts	0x0DF5, r6	; 0x800df5 <xLastTime.2436+0x2>
    2d54:	70 92 f6 0d 	sts	0x0DF6, r7	; 0x800df6 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2d58:	c3 01       	movw	r24, r6
    2d5a:	b2 01       	movw	r22, r4
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	bf 90       	pop	r11
    2d6e:	af 90       	pop	r10
    2d70:	9f 90       	pop	r9
    2d72:	8f 90       	pop	r8
    2d74:	7f 90       	pop	r7
    2d76:	6f 90       	pop	r6
    2d78:	5f 90       	pop	r5
    2d7a:	4f 90       	pop	r4
    2d7c:	3f 90       	pop	r3
    2d7e:	2f 90       	pop	r2
    2d80:	08 95       	ret

00002d82 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2d82:	08 95       	ret

00002d84 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2d84:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2d86:	2f 9a       	sbi	0x05, 7	; 5
    2d88:	08 95       	ret

00002d8a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2d8a:	1f 9a       	sbi	0x03, 7	; 3
    2d8c:	08 95       	ret

00002d8e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2d8e:	fa df       	rcall	.-12     	; 0x2d84 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d90:	2f ef       	ldi	r18, 0xFF	; 255
    2d92:	80 e7       	ldi	r24, 0x70	; 112
    2d94:	92 e0       	ldi	r25, 0x02	; 2
    2d96:	21 50       	subi	r18, 0x01	; 1
    2d98:	80 40       	sbci	r24, 0x00	; 0
    2d9a:	90 40       	sbci	r25, 0x00	; 0
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <vApplicationMallocFailedHook+0x8>
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2da0:	00 00       	nop
    2da2:	f3 df       	rcall	.-26     	; 0x2d8a <prvBlinkMainLed>
    2da4:	f5 cf       	rjmp	.-22     	; 0x2d90 <vApplicationMallocFailedHook+0x2>

00002da6 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2da6:	ee df       	rcall	.-36     	; 0x2d84 <prvSetMainLedOn>
    2da8:	2f ef       	ldi	r18, 0xFF	; 255
    2daa:	87 ea       	ldi	r24, 0xA7	; 167
    2dac:	91 e6       	ldi	r25, 0x61	; 97
    2dae:	21 50       	subi	r18, 0x01	; 1
    2db0:	80 40       	sbci	r24, 0x00	; 0
    2db2:	90 40       	sbci	r25, 0x00	; 0
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <vApplicationStackOverflowHook+0x8>
    2db6:	00 c0       	rjmp	.+0      	; 0x2db8 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2db8:	00 00       	nop
    2dba:	e7 df       	rcall	.-50     	; 0x2d8a <prvBlinkMainLed>
    2dbc:	f5 cf       	rjmp	.-22     	; 0x2da8 <vApplicationStackOverflowHook+0x2>

00002dbe <initialiseSystem>:
	// A3 for LoRaWAN
	// A4 means 7-segment Display is showing carbon dioxide
	// A5 means 7-segment Display is showing humidity
	// A6 means 7-segment Display is showing temperature
	// A7 means 7-segment Display is showing time(hh.mm)
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5) | _BV(DDA6) | _BV(DDA7);
    2dbe:	81 b1       	in	r24, 0x01	; 1
    2dc0:	8f ef       	ldi	r24, 0xFF	; 255
    2dc2:	81 b9       	out	0x01, r24	; 1
	//Turn off all led
	PORTA ^= _BV(PA0);
    2dc4:	92 b1       	in	r25, 0x02	; 2
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	89 27       	eor	r24, r25
    2dca:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA1);
    2dcc:	92 b1       	in	r25, 0x02	; 2
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	89 27       	eor	r24, r25
    2dd2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA2);
    2dd4:	92 b1       	in	r25, 0x02	; 2
    2dd6:	84 e0       	ldi	r24, 0x04	; 4
    2dd8:	89 27       	eor	r24, r25
    2dda:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA3);
    2ddc:	92 b1       	in	r25, 0x02	; 2
    2dde:	88 e0       	ldi	r24, 0x08	; 8
    2de0:	89 27       	eor	r24, r25
    2de2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA4);
    2de4:	92 b1       	in	r25, 0x02	; 2
    2de6:	80 e1       	ldi	r24, 0x10	; 16
    2de8:	89 27       	eor	r24, r25
    2dea:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA5);
    2dec:	92 b1       	in	r25, 0x02	; 2
    2dee:	80 e2       	ldi	r24, 0x20	; 32
    2df0:	89 27       	eor	r24, r25
    2df2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA6);
    2df4:	92 b1       	in	r25, 0x02	; 2
    2df6:	80 e4       	ldi	r24, 0x40	; 64
    2df8:	89 27       	eor	r24, r25
    2dfa:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA7);
    2dfc:	82 b1       	in	r24, 0x02	; 2
    2dfe:	80 58       	subi	r24, 0x80	; 128
    2e00:	82 b9       	out	0x02, r24	; 2
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	5d c7       	rjmp	.+3770   	; 0x3cc0 <stdio_initialise>
    2e06:	08 95       	ret

00002e08 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2e08:	da df       	rcall	.-76     	; 0x2dbe <initialiseSystem>
	printf("Program Started!!!\n");
    2e0a:	80 e3       	ldi	r24, 0x30	; 48
    2e0c:	93 e0       	ldi	r25, 0x03	; 3
    2e0e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <puts>
	sensorModelManager_create();
    2e12:	0e 94 30 06 	call	0xc60	; 0xc60 <sensorModelManager_create>
    2e16:	ff cf       	rjmp	.-2      	; 0x2e16 <main+0xe>

00002e18 <__subsf3>:
    2e18:	50 58       	subi	r21, 0x80	; 128

00002e1a <__addsf3>:
    2e1a:	bb 27       	eor	r27, r27
    2e1c:	aa 27       	eor	r26, r26
    2e1e:	0e d0       	rcall	.+28     	; 0x2e3c <__addsf3x>
    2e20:	4d c1       	rjmp	.+666    	; 0x30bc <__fp_round>
    2e22:	3e d1       	rcall	.+636    	; 0x30a0 <__fp_pscA>
    2e24:	30 f0       	brcs	.+12     	; 0x2e32 <__addsf3+0x18>
    2e26:	43 d1       	rcall	.+646    	; 0x30ae <__fp_pscB>
    2e28:	20 f0       	brcs	.+8      	; 0x2e32 <__addsf3+0x18>
    2e2a:	31 f4       	brne	.+12     	; 0x2e38 <__addsf3+0x1e>
    2e2c:	9f 3f       	cpi	r25, 0xFF	; 255
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <__addsf3+0x1a>
    2e30:	1e f4       	brtc	.+6      	; 0x2e38 <__addsf3+0x1e>
    2e32:	33 c1       	rjmp	.+614    	; 0x309a <__fp_nan>
    2e34:	0e f4       	brtc	.+2      	; 0x2e38 <__addsf3+0x1e>
    2e36:	e0 95       	com	r30
    2e38:	e7 fb       	bst	r30, 7
    2e3a:	29 c1       	rjmp	.+594    	; 0x308e <__fp_inf>

00002e3c <__addsf3x>:
    2e3c:	e9 2f       	mov	r30, r25
    2e3e:	4f d1       	rcall	.+670    	; 0x30de <__fp_split3>
    2e40:	80 f3       	brcs	.-32     	; 0x2e22 <__addsf3+0x8>
    2e42:	ba 17       	cp	r27, r26
    2e44:	62 07       	cpc	r22, r18
    2e46:	73 07       	cpc	r23, r19
    2e48:	84 07       	cpc	r24, r20
    2e4a:	95 07       	cpc	r25, r21
    2e4c:	18 f0       	brcs	.+6      	; 0x2e54 <__addsf3x+0x18>
    2e4e:	71 f4       	brne	.+28     	; 0x2e6c <__addsf3x+0x30>
    2e50:	9e f5       	brtc	.+102    	; 0x2eb8 <__addsf3x+0x7c>
    2e52:	67 c1       	rjmp	.+718    	; 0x3122 <__fp_zero>
    2e54:	0e f4       	brtc	.+2      	; 0x2e58 <__addsf3x+0x1c>
    2e56:	e0 95       	com	r30
    2e58:	0b 2e       	mov	r0, r27
    2e5a:	ba 2f       	mov	r27, r26
    2e5c:	a0 2d       	mov	r26, r0
    2e5e:	0b 01       	movw	r0, r22
    2e60:	b9 01       	movw	r22, r18
    2e62:	90 01       	movw	r18, r0
    2e64:	0c 01       	movw	r0, r24
    2e66:	ca 01       	movw	r24, r20
    2e68:	a0 01       	movw	r20, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	ff 27       	eor	r31, r31
    2e6e:	59 1b       	sub	r21, r25
    2e70:	99 f0       	breq	.+38     	; 0x2e98 <__addsf3x+0x5c>
    2e72:	59 3f       	cpi	r21, 0xF9	; 249
    2e74:	50 f4       	brcc	.+20     	; 0x2e8a <__addsf3x+0x4e>
    2e76:	50 3e       	cpi	r21, 0xE0	; 224
    2e78:	68 f1       	brcs	.+90     	; 0x2ed4 <__addsf3x+0x98>
    2e7a:	1a 16       	cp	r1, r26
    2e7c:	f0 40       	sbci	r31, 0x00	; 0
    2e7e:	a2 2f       	mov	r26, r18
    2e80:	23 2f       	mov	r18, r19
    2e82:	34 2f       	mov	r19, r20
    2e84:	44 27       	eor	r20, r20
    2e86:	58 5f       	subi	r21, 0xF8	; 248
    2e88:	f3 cf       	rjmp	.-26     	; 0x2e70 <__addsf3x+0x34>
    2e8a:	46 95       	lsr	r20
    2e8c:	37 95       	ror	r19
    2e8e:	27 95       	ror	r18
    2e90:	a7 95       	ror	r26
    2e92:	f0 40       	sbci	r31, 0x00	; 0
    2e94:	53 95       	inc	r21
    2e96:	c9 f7       	brne	.-14     	; 0x2e8a <__addsf3x+0x4e>
    2e98:	7e f4       	brtc	.+30     	; 0x2eb8 <__addsf3x+0x7c>
    2e9a:	1f 16       	cp	r1, r31
    2e9c:	ba 0b       	sbc	r27, r26
    2e9e:	62 0b       	sbc	r22, r18
    2ea0:	73 0b       	sbc	r23, r19
    2ea2:	84 0b       	sbc	r24, r20
    2ea4:	ba f0       	brmi	.+46     	; 0x2ed4 <__addsf3x+0x98>
    2ea6:	91 50       	subi	r25, 0x01	; 1
    2ea8:	a1 f0       	breq	.+40     	; 0x2ed2 <__addsf3x+0x96>
    2eaa:	ff 0f       	add	r31, r31
    2eac:	bb 1f       	adc	r27, r27
    2eae:	66 1f       	adc	r22, r22
    2eb0:	77 1f       	adc	r23, r23
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	c2 f7       	brpl	.-16     	; 0x2ea6 <__addsf3x+0x6a>
    2eb6:	0e c0       	rjmp	.+28     	; 0x2ed4 <__addsf3x+0x98>
    2eb8:	ba 0f       	add	r27, r26
    2eba:	62 1f       	adc	r22, r18
    2ebc:	73 1f       	adc	r23, r19
    2ebe:	84 1f       	adc	r24, r20
    2ec0:	48 f4       	brcc	.+18     	; 0x2ed4 <__addsf3x+0x98>
    2ec2:	87 95       	ror	r24
    2ec4:	77 95       	ror	r23
    2ec6:	67 95       	ror	r22
    2ec8:	b7 95       	ror	r27
    2eca:	f7 95       	ror	r31
    2ecc:	9e 3f       	cpi	r25, 0xFE	; 254
    2ece:	08 f0       	brcs	.+2      	; 0x2ed2 <__addsf3x+0x96>
    2ed0:	b3 cf       	rjmp	.-154    	; 0x2e38 <__addsf3+0x1e>
    2ed2:	93 95       	inc	r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	08 f0       	brcs	.+2      	; 0x2eda <__addsf3x+0x9e>
    2ed8:	99 27       	eor	r25, r25
    2eda:	ee 0f       	add	r30, r30
    2edc:	97 95       	ror	r25
    2ede:	87 95       	ror	r24
    2ee0:	08 95       	ret

00002ee2 <__divsf3>:
    2ee2:	0c d0       	rcall	.+24     	; 0x2efc <__divsf3x>
    2ee4:	eb c0       	rjmp	.+470    	; 0x30bc <__fp_round>
    2ee6:	e3 d0       	rcall	.+454    	; 0x30ae <__fp_pscB>
    2ee8:	40 f0       	brcs	.+16     	; 0x2efa <__divsf3+0x18>
    2eea:	da d0       	rcall	.+436    	; 0x30a0 <__fp_pscA>
    2eec:	30 f0       	brcs	.+12     	; 0x2efa <__divsf3+0x18>
    2eee:	21 f4       	brne	.+8      	; 0x2ef8 <__divsf3+0x16>
    2ef0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ef2:	19 f0       	breq	.+6      	; 0x2efa <__divsf3+0x18>
    2ef4:	cc c0       	rjmp	.+408    	; 0x308e <__fp_inf>
    2ef6:	51 11       	cpse	r21, r1
    2ef8:	15 c1       	rjmp	.+554    	; 0x3124 <__fp_szero>
    2efa:	cf c0       	rjmp	.+414    	; 0x309a <__fp_nan>

00002efc <__divsf3x>:
    2efc:	f0 d0       	rcall	.+480    	; 0x30de <__fp_split3>
    2efe:	98 f3       	brcs	.-26     	; 0x2ee6 <__divsf3+0x4>

00002f00 <__divsf3_pse>:
    2f00:	99 23       	and	r25, r25
    2f02:	c9 f3       	breq	.-14     	; 0x2ef6 <__divsf3+0x14>
    2f04:	55 23       	and	r21, r21
    2f06:	b1 f3       	breq	.-20     	; 0x2ef4 <__divsf3+0x12>
    2f08:	95 1b       	sub	r25, r21
    2f0a:	55 0b       	sbc	r21, r21
    2f0c:	bb 27       	eor	r27, r27
    2f0e:	aa 27       	eor	r26, r26
    2f10:	62 17       	cp	r22, r18
    2f12:	73 07       	cpc	r23, r19
    2f14:	84 07       	cpc	r24, r20
    2f16:	38 f0       	brcs	.+14     	; 0x2f26 <__divsf3_pse+0x26>
    2f18:	9f 5f       	subi	r25, 0xFF	; 255
    2f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	44 1f       	adc	r20, r20
    2f22:	aa 1f       	adc	r26, r26
    2f24:	a9 f3       	breq	.-22     	; 0x2f10 <__divsf3_pse+0x10>
    2f26:	33 d0       	rcall	.+102    	; 0x2f8e <__divsf3_pse+0x8e>
    2f28:	0e 2e       	mov	r0, r30
    2f2a:	3a f0       	brmi	.+14     	; 0x2f3a <__divsf3_pse+0x3a>
    2f2c:	e0 e8       	ldi	r30, 0x80	; 128
    2f2e:	30 d0       	rcall	.+96     	; 0x2f90 <__divsf3_pse+0x90>
    2f30:	91 50       	subi	r25, 0x01	; 1
    2f32:	50 40       	sbci	r21, 0x00	; 0
    2f34:	e6 95       	lsr	r30
    2f36:	00 1c       	adc	r0, r0
    2f38:	ca f7       	brpl	.-14     	; 0x2f2c <__divsf3_pse+0x2c>
    2f3a:	29 d0       	rcall	.+82     	; 0x2f8e <__divsf3_pse+0x8e>
    2f3c:	fe 2f       	mov	r31, r30
    2f3e:	27 d0       	rcall	.+78     	; 0x2f8e <__divsf3_pse+0x8e>
    2f40:	66 0f       	add	r22, r22
    2f42:	77 1f       	adc	r23, r23
    2f44:	88 1f       	adc	r24, r24
    2f46:	bb 1f       	adc	r27, r27
    2f48:	26 17       	cp	r18, r22
    2f4a:	37 07       	cpc	r19, r23
    2f4c:	48 07       	cpc	r20, r24
    2f4e:	ab 07       	cpc	r26, r27
    2f50:	b0 e8       	ldi	r27, 0x80	; 128
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <__divsf3_pse+0x56>
    2f54:	bb 0b       	sbc	r27, r27
    2f56:	80 2d       	mov	r24, r0
    2f58:	bf 01       	movw	r22, r30
    2f5a:	ff 27       	eor	r31, r31
    2f5c:	93 58       	subi	r25, 0x83	; 131
    2f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f60:	2a f0       	brmi	.+10     	; 0x2f6c <__divsf3_pse+0x6c>
    2f62:	9e 3f       	cpi	r25, 0xFE	; 254
    2f64:	51 05       	cpc	r21, r1
    2f66:	68 f0       	brcs	.+26     	; 0x2f82 <__divsf3_pse+0x82>
    2f68:	92 c0       	rjmp	.+292    	; 0x308e <__fp_inf>
    2f6a:	dc c0       	rjmp	.+440    	; 0x3124 <__fp_szero>
    2f6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f6e:	ec f3       	brlt	.-6      	; 0x2f6a <__divsf3_pse+0x6a>
    2f70:	98 3e       	cpi	r25, 0xE8	; 232
    2f72:	dc f3       	brlt	.-10     	; 0x2f6a <__divsf3_pse+0x6a>
    2f74:	86 95       	lsr	r24
    2f76:	77 95       	ror	r23
    2f78:	67 95       	ror	r22
    2f7a:	b7 95       	ror	r27
    2f7c:	f7 95       	ror	r31
    2f7e:	9f 5f       	subi	r25, 0xFF	; 255
    2f80:	c9 f7       	brne	.-14     	; 0x2f74 <__divsf3_pse+0x74>
    2f82:	88 0f       	add	r24, r24
    2f84:	91 1d       	adc	r25, r1
    2f86:	96 95       	lsr	r25
    2f88:	87 95       	ror	r24
    2f8a:	97 f9       	bld	r25, 7
    2f8c:	08 95       	ret
    2f8e:	e1 e0       	ldi	r30, 0x01	; 1
    2f90:	66 0f       	add	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	88 1f       	adc	r24, r24
    2f96:	bb 1f       	adc	r27, r27
    2f98:	62 17       	cp	r22, r18
    2f9a:	73 07       	cpc	r23, r19
    2f9c:	84 07       	cpc	r24, r20
    2f9e:	ba 07       	cpc	r27, r26
    2fa0:	20 f0       	brcs	.+8      	; 0x2faa <__divsf3_pse+0xaa>
    2fa2:	62 1b       	sub	r22, r18
    2fa4:	73 0b       	sbc	r23, r19
    2fa6:	84 0b       	sbc	r24, r20
    2fa8:	ba 0b       	sbc	r27, r26
    2faa:	ee 1f       	adc	r30, r30
    2fac:	88 f7       	brcc	.-30     	; 0x2f90 <__divsf3_pse+0x90>
    2fae:	e0 95       	com	r30
    2fb0:	08 95       	ret

00002fb2 <__fixsfsi>:
    2fb2:	04 d0       	rcall	.+8      	; 0x2fbc <__fixunssfsi>
    2fb4:	68 94       	set
    2fb6:	b1 11       	cpse	r27, r1
    2fb8:	b5 c0       	rjmp	.+362    	; 0x3124 <__fp_szero>
    2fba:	08 95       	ret

00002fbc <__fixunssfsi>:
    2fbc:	98 d0       	rcall	.+304    	; 0x30ee <__fp_splitA>
    2fbe:	88 f0       	brcs	.+34     	; 0x2fe2 <__fixunssfsi+0x26>
    2fc0:	9f 57       	subi	r25, 0x7F	; 127
    2fc2:	90 f0       	brcs	.+36     	; 0x2fe8 <__fixunssfsi+0x2c>
    2fc4:	b9 2f       	mov	r27, r25
    2fc6:	99 27       	eor	r25, r25
    2fc8:	b7 51       	subi	r27, 0x17	; 23
    2fca:	a0 f0       	brcs	.+40     	; 0x2ff4 <__fixunssfsi+0x38>
    2fcc:	d1 f0       	breq	.+52     	; 0x3002 <__fixunssfsi+0x46>
    2fce:	66 0f       	add	r22, r22
    2fd0:	77 1f       	adc	r23, r23
    2fd2:	88 1f       	adc	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	1a f0       	brmi	.+6      	; 0x2fde <__fixunssfsi+0x22>
    2fd8:	ba 95       	dec	r27
    2fda:	c9 f7       	brne	.-14     	; 0x2fce <__fixunssfsi+0x12>
    2fdc:	12 c0       	rjmp	.+36     	; 0x3002 <__fixunssfsi+0x46>
    2fde:	b1 30       	cpi	r27, 0x01	; 1
    2fe0:	81 f0       	breq	.+32     	; 0x3002 <__fixunssfsi+0x46>
    2fe2:	9f d0       	rcall	.+318    	; 0x3122 <__fp_zero>
    2fe4:	b1 e0       	ldi	r27, 0x01	; 1
    2fe6:	08 95       	ret
    2fe8:	9c c0       	rjmp	.+312    	; 0x3122 <__fp_zero>
    2fea:	67 2f       	mov	r22, r23
    2fec:	78 2f       	mov	r23, r24
    2fee:	88 27       	eor	r24, r24
    2ff0:	b8 5f       	subi	r27, 0xF8	; 248
    2ff2:	39 f0       	breq	.+14     	; 0x3002 <__fixunssfsi+0x46>
    2ff4:	b9 3f       	cpi	r27, 0xF9	; 249
    2ff6:	cc f3       	brlt	.-14     	; 0x2fea <__fixunssfsi+0x2e>
    2ff8:	86 95       	lsr	r24
    2ffa:	77 95       	ror	r23
    2ffc:	67 95       	ror	r22
    2ffe:	b3 95       	inc	r27
    3000:	d9 f7       	brne	.-10     	; 0x2ff8 <__fixunssfsi+0x3c>
    3002:	3e f4       	brtc	.+14     	; 0x3012 <__fixunssfsi+0x56>
    3004:	90 95       	com	r25
    3006:	80 95       	com	r24
    3008:	70 95       	com	r23
    300a:	61 95       	neg	r22
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	8f 4f       	sbci	r24, 0xFF	; 255
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	08 95       	ret

00003014 <__floatunsisf>:
    3014:	e8 94       	clt
    3016:	09 c0       	rjmp	.+18     	; 0x302a <__floatsisf+0x12>

00003018 <__floatsisf>:
    3018:	97 fb       	bst	r25, 7
    301a:	3e f4       	brtc	.+14     	; 0x302a <__floatsisf+0x12>
    301c:	90 95       	com	r25
    301e:	80 95       	com	r24
    3020:	70 95       	com	r23
    3022:	61 95       	neg	r22
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	8f 4f       	sbci	r24, 0xFF	; 255
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	99 23       	and	r25, r25
    302c:	a9 f0       	breq	.+42     	; 0x3058 <__floatsisf+0x40>
    302e:	f9 2f       	mov	r31, r25
    3030:	96 e9       	ldi	r25, 0x96	; 150
    3032:	bb 27       	eor	r27, r27
    3034:	93 95       	inc	r25
    3036:	f6 95       	lsr	r31
    3038:	87 95       	ror	r24
    303a:	77 95       	ror	r23
    303c:	67 95       	ror	r22
    303e:	b7 95       	ror	r27
    3040:	f1 11       	cpse	r31, r1
    3042:	f8 cf       	rjmp	.-16     	; 0x3034 <__floatsisf+0x1c>
    3044:	fa f4       	brpl	.+62     	; 0x3084 <__floatsisf+0x6c>
    3046:	bb 0f       	add	r27, r27
    3048:	11 f4       	brne	.+4      	; 0x304e <__floatsisf+0x36>
    304a:	60 ff       	sbrs	r22, 0
    304c:	1b c0       	rjmp	.+54     	; 0x3084 <__floatsisf+0x6c>
    304e:	6f 5f       	subi	r22, 0xFF	; 255
    3050:	7f 4f       	sbci	r23, 0xFF	; 255
    3052:	8f 4f       	sbci	r24, 0xFF	; 255
    3054:	9f 4f       	sbci	r25, 0xFF	; 255
    3056:	16 c0       	rjmp	.+44     	; 0x3084 <__floatsisf+0x6c>
    3058:	88 23       	and	r24, r24
    305a:	11 f0       	breq	.+4      	; 0x3060 <__floatsisf+0x48>
    305c:	96 e9       	ldi	r25, 0x96	; 150
    305e:	11 c0       	rjmp	.+34     	; 0x3082 <__floatsisf+0x6a>
    3060:	77 23       	and	r23, r23
    3062:	21 f0       	breq	.+8      	; 0x306c <__floatsisf+0x54>
    3064:	9e e8       	ldi	r25, 0x8E	; 142
    3066:	87 2f       	mov	r24, r23
    3068:	76 2f       	mov	r23, r22
    306a:	05 c0       	rjmp	.+10     	; 0x3076 <__floatsisf+0x5e>
    306c:	66 23       	and	r22, r22
    306e:	71 f0       	breq	.+28     	; 0x308c <__floatsisf+0x74>
    3070:	96 e8       	ldi	r25, 0x86	; 134
    3072:	86 2f       	mov	r24, r22
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	2a f0       	brmi	.+10     	; 0x3084 <__floatsisf+0x6c>
    307a:	9a 95       	dec	r25
    307c:	66 0f       	add	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	88 1f       	adc	r24, r24
    3082:	da f7       	brpl	.-10     	; 0x307a <__floatsisf+0x62>
    3084:	88 0f       	add	r24, r24
    3086:	96 95       	lsr	r25
    3088:	87 95       	ror	r24
    308a:	97 f9       	bld	r25, 7
    308c:	08 95       	ret

0000308e <__fp_inf>:
    308e:	97 f9       	bld	r25, 7
    3090:	9f 67       	ori	r25, 0x7F	; 127
    3092:	80 e8       	ldi	r24, 0x80	; 128
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	08 95       	ret

0000309a <__fp_nan>:
    309a:	9f ef       	ldi	r25, 0xFF	; 255
    309c:	80 ec       	ldi	r24, 0xC0	; 192
    309e:	08 95       	ret

000030a0 <__fp_pscA>:
    30a0:	00 24       	eor	r0, r0
    30a2:	0a 94       	dec	r0
    30a4:	16 16       	cp	r1, r22
    30a6:	17 06       	cpc	r1, r23
    30a8:	18 06       	cpc	r1, r24
    30aa:	09 06       	cpc	r0, r25
    30ac:	08 95       	ret

000030ae <__fp_pscB>:
    30ae:	00 24       	eor	r0, r0
    30b0:	0a 94       	dec	r0
    30b2:	12 16       	cp	r1, r18
    30b4:	13 06       	cpc	r1, r19
    30b6:	14 06       	cpc	r1, r20
    30b8:	05 06       	cpc	r0, r21
    30ba:	08 95       	ret

000030bc <__fp_round>:
    30bc:	09 2e       	mov	r0, r25
    30be:	03 94       	inc	r0
    30c0:	00 0c       	add	r0, r0
    30c2:	11 f4       	brne	.+4      	; 0x30c8 <__fp_round+0xc>
    30c4:	88 23       	and	r24, r24
    30c6:	52 f0       	brmi	.+20     	; 0x30dc <__fp_round+0x20>
    30c8:	bb 0f       	add	r27, r27
    30ca:	40 f4       	brcc	.+16     	; 0x30dc <__fp_round+0x20>
    30cc:	bf 2b       	or	r27, r31
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <__fp_round+0x18>
    30d0:	60 ff       	sbrs	r22, 0
    30d2:	04 c0       	rjmp	.+8      	; 0x30dc <__fp_round+0x20>
    30d4:	6f 5f       	subi	r22, 0xFF	; 255
    30d6:	7f 4f       	sbci	r23, 0xFF	; 255
    30d8:	8f 4f       	sbci	r24, 0xFF	; 255
    30da:	9f 4f       	sbci	r25, 0xFF	; 255
    30dc:	08 95       	ret

000030de <__fp_split3>:
    30de:	57 fd       	sbrc	r21, 7
    30e0:	90 58       	subi	r25, 0x80	; 128
    30e2:	44 0f       	add	r20, r20
    30e4:	55 1f       	adc	r21, r21
    30e6:	59 f0       	breq	.+22     	; 0x30fe <__fp_splitA+0x10>
    30e8:	5f 3f       	cpi	r21, 0xFF	; 255
    30ea:	71 f0       	breq	.+28     	; 0x3108 <__fp_splitA+0x1a>
    30ec:	47 95       	ror	r20

000030ee <__fp_splitA>:
    30ee:	88 0f       	add	r24, r24
    30f0:	97 fb       	bst	r25, 7
    30f2:	99 1f       	adc	r25, r25
    30f4:	61 f0       	breq	.+24     	; 0x310e <__fp_splitA+0x20>
    30f6:	9f 3f       	cpi	r25, 0xFF	; 255
    30f8:	79 f0       	breq	.+30     	; 0x3118 <__fp_splitA+0x2a>
    30fa:	87 95       	ror	r24
    30fc:	08 95       	ret
    30fe:	12 16       	cp	r1, r18
    3100:	13 06       	cpc	r1, r19
    3102:	14 06       	cpc	r1, r20
    3104:	55 1f       	adc	r21, r21
    3106:	f2 cf       	rjmp	.-28     	; 0x30ec <__fp_split3+0xe>
    3108:	46 95       	lsr	r20
    310a:	f1 df       	rcall	.-30     	; 0x30ee <__fp_splitA>
    310c:	08 c0       	rjmp	.+16     	; 0x311e <__fp_splitA+0x30>
    310e:	16 16       	cp	r1, r22
    3110:	17 06       	cpc	r1, r23
    3112:	18 06       	cpc	r1, r24
    3114:	99 1f       	adc	r25, r25
    3116:	f1 cf       	rjmp	.-30     	; 0x30fa <__fp_splitA+0xc>
    3118:	86 95       	lsr	r24
    311a:	71 05       	cpc	r23, r1
    311c:	61 05       	cpc	r22, r1
    311e:	08 94       	sec
    3120:	08 95       	ret

00003122 <__fp_zero>:
    3122:	e8 94       	clt

00003124 <__fp_szero>:
    3124:	bb 27       	eor	r27, r27
    3126:	66 27       	eor	r22, r22
    3128:	77 27       	eor	r23, r23
    312a:	cb 01       	movw	r24, r22
    312c:	97 f9       	bld	r25, 7
    312e:	08 95       	ret

00003130 <__mulsf3>:
    3130:	0b d0       	rcall	.+22     	; 0x3148 <__mulsf3x>
    3132:	c4 cf       	rjmp	.-120    	; 0x30bc <__fp_round>
    3134:	b5 df       	rcall	.-150    	; 0x30a0 <__fp_pscA>
    3136:	28 f0       	brcs	.+10     	; 0x3142 <__mulsf3+0x12>
    3138:	ba df       	rcall	.-140    	; 0x30ae <__fp_pscB>
    313a:	18 f0       	brcs	.+6      	; 0x3142 <__mulsf3+0x12>
    313c:	95 23       	and	r25, r21
    313e:	09 f0       	breq	.+2      	; 0x3142 <__mulsf3+0x12>
    3140:	a6 cf       	rjmp	.-180    	; 0x308e <__fp_inf>
    3142:	ab cf       	rjmp	.-170    	; 0x309a <__fp_nan>
    3144:	11 24       	eor	r1, r1
    3146:	ee cf       	rjmp	.-36     	; 0x3124 <__fp_szero>

00003148 <__mulsf3x>:
    3148:	ca df       	rcall	.-108    	; 0x30de <__fp_split3>
    314a:	a0 f3       	brcs	.-24     	; 0x3134 <__mulsf3+0x4>

0000314c <__mulsf3_pse>:
    314c:	95 9f       	mul	r25, r21
    314e:	d1 f3       	breq	.-12     	; 0x3144 <__mulsf3+0x14>
    3150:	95 0f       	add	r25, r21
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	55 1f       	adc	r21, r21
    3156:	62 9f       	mul	r22, r18
    3158:	f0 01       	movw	r30, r0
    315a:	72 9f       	mul	r23, r18
    315c:	bb 27       	eor	r27, r27
    315e:	f0 0d       	add	r31, r0
    3160:	b1 1d       	adc	r27, r1
    3162:	63 9f       	mul	r22, r19
    3164:	aa 27       	eor	r26, r26
    3166:	f0 0d       	add	r31, r0
    3168:	b1 1d       	adc	r27, r1
    316a:	aa 1f       	adc	r26, r26
    316c:	64 9f       	mul	r22, r20
    316e:	66 27       	eor	r22, r22
    3170:	b0 0d       	add	r27, r0
    3172:	a1 1d       	adc	r26, r1
    3174:	66 1f       	adc	r22, r22
    3176:	82 9f       	mul	r24, r18
    3178:	22 27       	eor	r18, r18
    317a:	b0 0d       	add	r27, r0
    317c:	a1 1d       	adc	r26, r1
    317e:	62 1f       	adc	r22, r18
    3180:	73 9f       	mul	r23, r19
    3182:	b0 0d       	add	r27, r0
    3184:	a1 1d       	adc	r26, r1
    3186:	62 1f       	adc	r22, r18
    3188:	83 9f       	mul	r24, r19
    318a:	a0 0d       	add	r26, r0
    318c:	61 1d       	adc	r22, r1
    318e:	22 1f       	adc	r18, r18
    3190:	74 9f       	mul	r23, r20
    3192:	33 27       	eor	r19, r19
    3194:	a0 0d       	add	r26, r0
    3196:	61 1d       	adc	r22, r1
    3198:	23 1f       	adc	r18, r19
    319a:	84 9f       	mul	r24, r20
    319c:	60 0d       	add	r22, r0
    319e:	21 1d       	adc	r18, r1
    31a0:	82 2f       	mov	r24, r18
    31a2:	76 2f       	mov	r23, r22
    31a4:	6a 2f       	mov	r22, r26
    31a6:	11 24       	eor	r1, r1
    31a8:	9f 57       	subi	r25, 0x7F	; 127
    31aa:	50 40       	sbci	r21, 0x00	; 0
    31ac:	8a f0       	brmi	.+34     	; 0x31d0 <__mulsf3_pse+0x84>
    31ae:	e1 f0       	breq	.+56     	; 0x31e8 <__mulsf3_pse+0x9c>
    31b0:	88 23       	and	r24, r24
    31b2:	4a f0       	brmi	.+18     	; 0x31c6 <__mulsf3_pse+0x7a>
    31b4:	ee 0f       	add	r30, r30
    31b6:	ff 1f       	adc	r31, r31
    31b8:	bb 1f       	adc	r27, r27
    31ba:	66 1f       	adc	r22, r22
    31bc:	77 1f       	adc	r23, r23
    31be:	88 1f       	adc	r24, r24
    31c0:	91 50       	subi	r25, 0x01	; 1
    31c2:	50 40       	sbci	r21, 0x00	; 0
    31c4:	a9 f7       	brne	.-22     	; 0x31b0 <__mulsf3_pse+0x64>
    31c6:	9e 3f       	cpi	r25, 0xFE	; 254
    31c8:	51 05       	cpc	r21, r1
    31ca:	70 f0       	brcs	.+28     	; 0x31e8 <__mulsf3_pse+0x9c>
    31cc:	60 cf       	rjmp	.-320    	; 0x308e <__fp_inf>
    31ce:	aa cf       	rjmp	.-172    	; 0x3124 <__fp_szero>
    31d0:	5f 3f       	cpi	r21, 0xFF	; 255
    31d2:	ec f3       	brlt	.-6      	; 0x31ce <__mulsf3_pse+0x82>
    31d4:	98 3e       	cpi	r25, 0xE8	; 232
    31d6:	dc f3       	brlt	.-10     	; 0x31ce <__mulsf3_pse+0x82>
    31d8:	86 95       	lsr	r24
    31da:	77 95       	ror	r23
    31dc:	67 95       	ror	r22
    31de:	b7 95       	ror	r27
    31e0:	f7 95       	ror	r31
    31e2:	e7 95       	ror	r30
    31e4:	9f 5f       	subi	r25, 0xFF	; 255
    31e6:	c1 f7       	brne	.-16     	; 0x31d8 <__mulsf3_pse+0x8c>
    31e8:	fe 2b       	or	r31, r30
    31ea:	88 0f       	add	r24, r24
    31ec:	91 1d       	adc	r25, r1
    31ee:	96 95       	lsr	r25
    31f0:	87 95       	ror	r24
    31f2:	97 f9       	bld	r25, 7
    31f4:	08 95       	ret

000031f6 <_spiCallBack>:
    31f6:	81 b3       	in	r24, 0x11	; 17
    31f8:	8f 60       	ori	r24, 0x0F	; 15
    31fa:	81 bb       	out	0x11, r24	; 17
    31fc:	28 98       	cbi	0x05, 0	; 5
    31fe:	28 9a       	sbi	0x05, 0	; 5
    3200:	21 b3       	in	r18, 0x11	; 17
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	00 90 45 0e 	lds	r0, 0x0E45	; 0x800e45 <_digitNo>
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <_spiCallBack+0x1a>
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	0a 94       	dec	r0
    3212:	e2 f7       	brpl	.-8      	; 0x320c <_spiCallBack+0x16>
    3214:	80 95       	com	r24
    3216:	82 23       	and	r24, r18
    3218:	81 bb       	out	0x11, r24	; 17
    321a:	e0 91 15 0e 	lds	r30, 0x0E15	; 0x800e15 <_displayDoneCallBack>
    321e:	f0 91 16 0e 	lds	r31, 0x0E16	; 0x800e16 <_displayDoneCallBack+0x1>
    3222:	30 97       	sbiw	r30, 0x00	; 0
    3224:	09 f0       	breq	.+2      	; 0x3228 <_spiCallBack+0x32>
    3226:	19 95       	eicall
    3228:	08 95       	ret

0000322a <display_7seg_displayErr>:
    322a:	9f b7       	in	r25, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	e1 e4       	ldi	r30, 0x41	; 65
    3230:	fe e0       	ldi	r31, 0x0E	; 14
    3232:	10 82       	st	Z, r1
    3234:	8e e9       	ldi	r24, 0x9E	; 158
    3236:	81 83       	std	Z+1, r24	; 0x01
    3238:	8a e0       	ldi	r24, 0x0A	; 10
    323a:	82 83       	std	Z+2, r24	; 0x02
    323c:	83 83       	std	Z+3, r24	; 0x03
    323e:	9f bf       	out	0x3f, r25	; 63
    3240:	08 95       	ret

00003242 <display_7seg_display>:
    3242:	bf 92       	push	r11
    3244:	cf 92       	push	r12
    3246:	df 92       	push	r13
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	6b 01       	movw	r12, r22
    3256:	7c 01       	movw	r14, r24
    3258:	b4 2e       	mov	r11, r20
    325a:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <_maxHexSegmentindex>
    325e:	83 e0       	ldi	r24, 0x03	; 3
    3260:	84 17       	cp	r24, r20
    3262:	78 f1       	brcs	.+94     	; 0x32c2 <display_7seg_display+0x80>
    3264:	64 2f       	mov	r22, r20
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	d3 de       	rcall	.-602    	; 0x3014 <__floatunsisf>
    326e:	9b 01       	movw	r18, r22
    3270:	ac 01       	movw	r20, r24
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	80 e2       	ldi	r24, 0x20	; 32
    3278:	91 e4       	ldi	r25, 0x41	; 65
    327a:	0e 94 b3 22 	call	0x4566	; 0x4566 <pow>
    327e:	a7 01       	movw	r20, r14
    3280:	96 01       	movw	r18, r12
    3282:	56 df       	rcall	.-340    	; 0x3130 <__mulsf3>
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e0       	ldi	r20, 0x00	; 0
    328a:	5f e3       	ldi	r21, 0x3F	; 63
    328c:	c6 dd       	rcall	.-1140   	; 0x2e1a <__addsf3>
    328e:	0e 94 5e 22 	call	0x44bc	; 0x44bc <floor>
    3292:	8f de       	rcall	.-738    	; 0x2fb2 <__fixsfsi>
    3294:	ab 01       	movw	r20, r22
    3296:	77 23       	and	r23, r23
    3298:	64 f4       	brge	.+24     	; 0x32b2 <display_7seg_display+0x70>
    329a:	44 27       	eor	r20, r20
    329c:	55 27       	eor	r21, r21
    329e:	46 1b       	sub	r20, r22
    32a0:	57 0b       	sbc	r21, r23
    32a2:	21 e0       	ldi	r18, 0x01	; 1
    32a4:	48 3e       	cpi	r20, 0xE8	; 232
    32a6:	83 e0       	ldi	r24, 0x03	; 3
    32a8:	58 07       	cpc	r21, r24
    32aa:	0c f4       	brge	.+2      	; 0x32ae <display_7seg_display+0x6c>
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	11 e0       	ldi	r17, 0x01	; 1
    32b0:	0c c0       	rjmp	.+24     	; 0x32ca <display_7seg_display+0x88>
    32b2:	21 e0       	ldi	r18, 0x01	; 1
    32b4:	40 31       	cpi	r20, 0x10	; 16
    32b6:	87 e2       	ldi	r24, 0x27	; 39
    32b8:	58 07       	cpc	r21, r24
    32ba:	0c f4       	brge	.+2      	; 0x32be <display_7seg_display+0x7c>
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	10 e0       	ldi	r17, 0x00	; 0
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <display_7seg_display+0x88>
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	21 e0       	ldi	r18, 0x01	; 1
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	0f b7       	in	r16, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	22 23       	and	r18, r18
    32d0:	11 f0       	breq	.+4      	; 0x32d6 <display_7seg_display+0x94>
    32d2:	ab df       	rcall	.-170    	; 0x322a <display_7seg_displayErr>
    32d4:	51 c0       	rjmp	.+162    	; 0x3378 <display_7seg_display+0x136>
    32d6:	c5 e4       	ldi	r28, 0x45	; 69
    32d8:	de e0       	ldi	r29, 0x0E	; 14
    32da:	0f 2e       	mov	r0, r31
    32dc:	f1 e4       	ldi	r31, 0x41	; 65
    32de:	cf 2e       	mov	r12, r31
    32e0:	fe e0       	ldi	r31, 0x0E	; 14
    32e2:	df 2e       	mov	r13, r31
    32e4:	f0 2d       	mov	r31, r0
    32e6:	0f 2e       	mov	r0, r31
    32e8:	fa e0       	ldi	r31, 0x0A	; 10
    32ea:	ef 2e       	mov	r14, r31
    32ec:	f1 2c       	mov	r15, r1
    32ee:	f0 2d       	mov	r31, r0
    32f0:	ca 01       	movw	r24, r20
    32f2:	b7 01       	movw	r22, r14
    32f4:	0e 94 21 24 	call	0x4842	; 0x4842 <__divmodhi4>
    32f8:	fc 01       	movw	r30, r24
    32fa:	ed 5b       	subi	r30, 0xBD	; 189
    32fc:	fc 4f       	sbci	r31, 0xFC	; 252
    32fe:	80 81       	ld	r24, Z
    3300:	8a 93       	st	-Y, r24
    3302:	46 2f       	mov	r20, r22
    3304:	57 2f       	mov	r21, r23
    3306:	cc 15       	cp	r28, r12
    3308:	dd 05       	cpc	r29, r13
    330a:	91 f7       	brne	.-28     	; 0x32f0 <display_7seg_display+0xae>
    330c:	43 e0       	ldi	r20, 0x03	; 3
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	4b 19       	sub	r20, r11
    3312:	51 09       	sbc	r21, r1
    3314:	14 16       	cp	r1, r20
    3316:	15 06       	cpc	r1, r21
    3318:	f4 f4       	brge	.+60     	; 0x3356 <display_7seg_display+0x114>
    331a:	80 91 41 0e 	lds	r24, 0x0E41	; 0x800e41 <_digitSegments>
    331e:	8c 3f       	cpi	r24, 0xFC	; 252
    3320:	49 f0       	breq	.+18     	; 0x3334 <display_7seg_display+0xf2>
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	19 c0       	rjmp	.+50     	; 0x3358 <display_7seg_display+0x116>
    3326:	fc 01       	movw	r30, r24
    3328:	ef 5b       	subi	r30, 0xBF	; 191
    332a:	f1 4f       	sbci	r31, 0xF1	; 241
    332c:	30 81       	ld	r19, Z
    332e:	3c 3f       	cpi	r19, 0xFC	; 252
    3330:	21 f0       	breq	.+8      	; 0x333a <display_7seg_display+0xf8>
    3332:	12 c0       	rjmp	.+36     	; 0x3358 <display_7seg_display+0x116>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	fc 01       	movw	r30, r24
    333c:	ef 5b       	subi	r30, 0xBF	; 191
    333e:	f1 4f       	sbci	r31, 0xF1	; 241
    3340:	10 82       	st	Z, r1
    3342:	62 2f       	mov	r22, r18
    3344:	2f 5f       	subi	r18, 0xFF	; 255
    3346:	82 2f       	mov	r24, r18
    3348:	02 2e       	mov	r0, r18
    334a:	00 0c       	add	r0, r0
    334c:	99 0b       	sbc	r25, r25
    334e:	84 17       	cp	r24, r20
    3350:	95 07       	cpc	r25, r21
    3352:	4c f3       	brlt	.-46     	; 0x3326 <display_7seg_display+0xe4>
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <display_7seg_display+0x116>
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	11 23       	and	r17, r17
    335a:	31 f0       	breq	.+12     	; 0x3368 <display_7seg_display+0x126>
    335c:	e6 2f       	mov	r30, r22
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	ef 5b       	subi	r30, 0xBF	; 191
    3362:	f1 4f       	sbci	r31, 0xF1	; 241
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	80 83       	st	Z, r24
    3368:	bb 20       	and	r11, r11
    336a:	31 f0       	breq	.+12     	; 0x3378 <display_7seg_display+0x136>
    336c:	fa 01       	movw	r30, r20
    336e:	ef 5b       	subi	r30, 0xBF	; 191
    3370:	f1 4f       	sbci	r31, 0xF1	; 241
    3372:	80 81       	ld	r24, Z
    3374:	81 60       	ori	r24, 0x01	; 1
    3376:	80 83       	st	Z, r24
    3378:	0f bf       	out	0x3f, r16	; 63
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	df 90       	pop	r13
    3388:	cf 90       	pop	r12
    338a:	bf 90       	pop	r11
    338c:	08 95       	ret

0000338e <display_7seg_powerUp>:
    338e:	85 b5       	in	r24, 0x25	; 37
    3390:	85 60       	ori	r24, 0x05	; 5
    3392:	85 bd       	out	0x25, r24	; 37
    3394:	08 95       	ret

00003396 <display_7seg_powerDown>:
    3396:	85 b5       	in	r24, 0x25	; 37
    3398:	88 7f       	andi	r24, 0xF8	; 248
    339a:	85 bd       	out	0x25, r24	; 37
    339c:	81 b3       	in	r24, 0x11	; 17
    339e:	8f 60       	ori	r24, 0x0F	; 15
    33a0:	81 bb       	out	0x11, r24	; 17
    33a2:	08 95       	ret

000033a4 <display_7seg_initialise>:
    33a4:	8f 92       	push	r8
    33a6:	af 92       	push	r10
    33a8:	cf 92       	push	r12
    33aa:	ef 92       	push	r14
    33ac:	0f 93       	push	r16
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	ec 01       	movw	r28, r24
    33b6:	80 b3       	in	r24, 0x10	; 16
    33b8:	8f 60       	ori	r24, 0x0F	; 15
    33ba:	80 bb       	out	0x10, r24	; 16
    33bc:	81 b3       	in	r24, 0x11	; 17
    33be:	8f 60       	ori	r24, 0x0F	; 15
    33c0:	81 bb       	out	0x11, r24	; 17
    33c2:	20 9a       	sbi	0x04, 0	; 4
    33c4:	8b ef       	ldi	r24, 0xFB	; 251
    33c6:	98 e1       	ldi	r25, 0x18	; 24
    33c8:	9f 93       	push	r25
    33ca:	8f 93       	push	r24
    33cc:	81 2c       	mov	r8, r1
    33ce:	a1 2c       	mov	r10, r1
    33d0:	c1 2c       	mov	r12, r1
    33d2:	e1 2c       	mov	r14, r1
    33d4:	00 e0       	ldi	r16, 0x00	; 0
    33d6:	10 e0       	ldi	r17, 0x00	; 0
    33d8:	20 e2       	ldi	r18, 0x20	; 32
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	63 e0       	ldi	r22, 0x03	; 3
    33de:	80 e1       	ldi	r24, 0x10	; 16
    33e0:	d1 d4       	rcall	.+2466   	; 0x3d84 <spi_create>
    33e2:	90 93 47 0e 	sts	0x0E47, r25	; 0x800e47 <_spi+0x1>
    33e6:	80 93 46 0e 	sts	0x0E46, r24	; 0x800e46 <_spi>
    33ea:	89 e1       	ldi	r24, 0x19	; 25
    33ec:	87 bd       	out	0x27, r24	; 39
    33ee:	84 b5       	in	r24, 0x24	; 36
    33f0:	82 60       	ori	r24, 0x02	; 2
    33f2:	84 bd       	out	0x24, r24	; 36
    33f4:	ee e6       	ldi	r30, 0x6E	; 110
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	82 60       	ori	r24, 0x02	; 2
    33fc:	80 83       	st	Z, r24
    33fe:	cb df       	rcall	.-106    	; 0x3396 <display_7seg_powerDown>
    3400:	d0 93 16 0e 	sts	0x0E16, r29	; 0x800e16 <_displayDoneCallBack+0x1>
    3404:	c0 93 15 0e 	sts	0x0E15, r28	; 0x800e15 <_displayDoneCallBack>
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ef 90       	pop	r14
    3416:	cf 90       	pop	r12
    3418:	af 90       	pop	r10
    341a:	8f 90       	pop	r8
    341c:	08 95       	ret

0000341e <__vector_21>:
    341e:	1f 92       	push	r1
    3420:	0f 92       	push	r0
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	0f 92       	push	r0
    3426:	11 24       	eor	r1, r1
    3428:	0b b6       	in	r0, 0x3b	; 59
    342a:	0f 92       	push	r0
    342c:	2f 93       	push	r18
    342e:	3f 93       	push	r19
    3430:	4f 93       	push	r20
    3432:	5f 93       	push	r21
    3434:	6f 93       	push	r22
    3436:	7f 93       	push	r23
    3438:	8f 93       	push	r24
    343a:	9f 93       	push	r25
    343c:	af 93       	push	r26
    343e:	bf 93       	push	r27
    3440:	ef 93       	push	r30
    3442:	ff 93       	push	r31
    3444:	80 91 18 0e 	lds	r24, 0x0E18	; 0x800e18 <_maxHexSegmentindex>
    3448:	88 23       	and	r24, r24
    344a:	69 f1       	breq	.+90     	; 0x34a6 <__vector_21+0x88>
    344c:	20 91 19 0e 	lds	r18, 0x0E19	; 0x800e19 <_intCounter>
    3450:	30 91 1a 0e 	lds	r19, 0x0E1A	; 0x800e1a <_intCounter+0x1>
    3454:	25 3f       	cpi	r18, 0xF5	; 245
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	39 07       	cpc	r19, r25
    345a:	38 f4       	brcc	.+14     	; 0x346a <__vector_21+0x4c>
    345c:	2f 5f       	subi	r18, 0xFF	; 255
    345e:	3f 4f       	sbci	r19, 0xFF	; 255
    3460:	30 93 1a 0e 	sts	0x0E1A, r19	; 0x800e1a <_intCounter+0x1>
    3464:	20 93 19 0e 	sts	0x0E19, r18	; 0x800e19 <_intCounter>
    3468:	1e c0       	rjmp	.+60     	; 0x34a6 <__vector_21+0x88>
    346a:	10 92 1a 0e 	sts	0x0E1A, r1	; 0x800e1a <_intCounter+0x1>
    346e:	10 92 19 0e 	sts	0x0E19, r1	; 0x800e19 <_intCounter>
    3472:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <_scrollIndex>
    3476:	2e 2f       	mov	r18, r30
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	04 97       	sbiw	r24, 0x04	; 4
    347e:	28 17       	cp	r18, r24
    3480:	39 07       	cpc	r19, r25
    3482:	14 f4       	brge	.+4      	; 0x3488 <__vector_21+0x6a>
    3484:	ef 5f       	subi	r30, 0xFF	; 255
    3486:	01 c0       	rjmp	.+2      	; 0x348a <__vector_21+0x6c>
    3488:	e0 e0       	ldi	r30, 0x00	; 0
    348a:	e0 93 17 0e 	sts	0x0E17, r30	; 0x800e17 <_scrollIndex>
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	e5 5e       	subi	r30, 0xE5	; 229
    3492:	f1 4f       	sbci	r31, 0xF1	; 241
    3494:	a1 e4       	ldi	r26, 0x41	; 65
    3496:	be e0       	ldi	r27, 0x0E	; 14
    3498:	25 e4       	ldi	r18, 0x45	; 69
    349a:	3e e0       	ldi	r19, 0x0E	; 14
    349c:	81 91       	ld	r24, Z+
    349e:	8d 93       	st	X+, r24
    34a0:	a2 17       	cp	r26, r18
    34a2:	b3 07       	cpc	r27, r19
    34a4:	d9 f7       	brne	.-10     	; 0x349c <__vector_21+0x7e>
    34a6:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <_digitNo>
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	83 70       	andi	r24, 0x03	; 3
    34b0:	90 78       	andi	r25, 0x80	; 128
    34b2:	99 23       	and	r25, r25
    34b4:	24 f4       	brge	.+8      	; 0x34be <__vector_21+0xa0>
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	8c 6f       	ori	r24, 0xFC	; 252
    34ba:	9f 6f       	ori	r25, 0xFF	; 255
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <_digitNo>
    34c2:	99 27       	eor	r25, r25
    34c4:	fc 01       	movw	r30, r24
    34c6:	ef 5b       	subi	r30, 0xBF	; 191
    34c8:	f1 4f       	sbci	r31, 0xF1	; 241
    34ca:	60 81       	ld	r22, Z
    34cc:	60 95       	com	r22
    34ce:	80 91 46 0e 	lds	r24, 0x0E46	; 0x800e46 <_spi>
    34d2:	90 91 47 0e 	lds	r25, 0x0E47	; 0x800e47 <_spi+0x1>
    34d6:	28 d5       	rcall	.+2640   	; 0x3f28 <spi_sendByte>
    34d8:	ff 91       	pop	r31
    34da:	ef 91       	pop	r30
    34dc:	bf 91       	pop	r27
    34de:	af 91       	pop	r26
    34e0:	9f 91       	pop	r25
    34e2:	8f 91       	pop	r24
    34e4:	7f 91       	pop	r23
    34e6:	6f 91       	pop	r22
    34e8:	5f 91       	pop	r21
    34ea:	4f 91       	pop	r20
    34ec:	3f 91       	pop	r19
    34ee:	2f 91       	pop	r18
    34f0:	0f 90       	pop	r0
    34f2:	0b be       	out	0x3b, r0	; 59
    34f4:	0f 90       	pop	r0
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	0f 90       	pop	r0
    34fa:	1f 90       	pop	r1
    34fc:	18 95       	reti

000034fe <_hihTwiCallback>:
    34fe:	65 30       	cpi	r22, 0x05	; 5
    3500:	f1 f4       	brne	.+60     	; 0x353e <_hihTwiCallback+0x40>
    3502:	fa 01       	movw	r30, r20
    3504:	80 81       	ld	r24, Z
    3506:	8f 73       	andi	r24, 0x3F	; 63
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	98 2f       	mov	r25, r24
    350c:	88 27       	eor	r24, r24
    350e:	21 81       	ldd	r18, Z+1	; 0x01
    3510:	82 2b       	or	r24, r18
    3512:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3516:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	f0 e4       	ldi	r31, 0x40	; 64
    351e:	8f 9f       	mul	r24, r31
    3520:	c0 01       	movw	r24, r0
    3522:	11 24       	eor	r1, r1
    3524:	fa 01       	movw	r30, r20
    3526:	23 81       	ldd	r18, Z+3	; 0x03
    3528:	26 95       	lsr	r18
    352a:	26 95       	lsr	r18
    352c:	82 2b       	or	r24, r18
    352e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3532:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <_measuringIsReady>
    353c:	08 95       	ret
    353e:	64 30       	cpi	r22, 0x04	; 4
    3540:	51 f0       	breq	.+20     	; 0x3556 <_hihTwiCallback+0x58>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e4       	ldi	r25, 0x40	; 64
    3546:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    354a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    354e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3552:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3556:	08 95       	ret

00003558 <hih8120_initialise>:
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	0f e7       	ldi	r16, 0x7F	; 127
    355e:	1a e1       	ldi	r17, 0x1A	; 26
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	34 e2       	ldi	r19, 0x24	; 36
    3564:	44 ef       	ldi	r20, 0xF4	; 244
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	87 e2       	ldi	r24, 0x27	; 39
    356c:	fe d5       	rcall	.+3068   	; 0x416a <twiCreate>
    356e:	90 93 4a 0e 	sts	0x0E4A, r25	; 0x800e4a <_hih8120Handler+0x1>
    3572:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <_hih8120Handler>
    3576:	21 e0       	ldi	r18, 0x01	; 1
    3578:	89 2b       	or	r24, r25
    357a:	09 f0       	breq	.+2      	; 0x357e <hih8120_initialise+0x26>
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	82 2f       	mov	r24, r18
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	08 95       	ret

00003586 <hih8120_wakeup>:
    3586:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <_hih8120Handler>
    358a:	90 91 4a 0e 	lds	r25, 0x0E4A	; 0x800e4a <_hih8120Handler+0x1>
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	51 f0       	breq	.+20     	; 0x35a6 <hih8120_wakeup+0x20>
    3592:	40 e0       	ldi	r20, 0x00	; 0
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	39 d6       	rcall	.+3186   	; 0x420c <twiTransmit>
    359a:	84 30       	cpi	r24, 0x04	; 4
    359c:	31 f4       	brne	.+12     	; 0x35aa <hih8120_wakeup+0x24>
    359e:	10 92 48 0e 	sts	0x0E48, r1	; 0x800e48 <_measuringIsReady>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	08 95       	ret
    35a6:	82 e0       	ldi	r24, 0x02	; 2
    35a8:	08 95       	ret
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	08 95       	ret

000035ae <hih8120_measure>:
    35ae:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <_hih8120Handler>
    35b2:	90 91 4a 0e 	lds	r25, 0x0E4A	; 0x800e4a <_hih8120Handler+0x1>
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	31 f0       	breq	.+12     	; 0x35c6 <hih8120_measure+0x18>
    35ba:	64 e0       	ldi	r22, 0x04	; 4
    35bc:	73 d6       	rcall	.+3302   	; 0x42a4 <twiReceive>
    35be:	85 30       	cpi	r24, 0x05	; 5
    35c0:	21 f0       	breq	.+8      	; 0x35ca <hih8120_measure+0x1c>
    35c2:	83 e0       	ldi	r24, 0x03	; 3
    35c4:	08 95       	ret
    35c6:	82 e0       	ldi	r24, 0x02	; 2
    35c8:	08 95       	ret
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	08 95       	ret

000035ce <hih8120_getTemperature>:
    35ce:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    35d2:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	1c dd       	rcall	.-1480   	; 0x3014 <__floatunsisf>
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	45 e2       	ldi	r20, 0x25	; 37
    35e2:	53 e4       	ldi	r21, 0x43	; 67
    35e4:	a5 dd       	rcall	.-1206   	; 0x3130 <__mulsf3>
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	38 ef       	ldi	r19, 0xF8	; 248
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	56 e4       	ldi	r21, 0x46	; 70
    35ee:	79 dc       	rcall	.-1806   	; 0x2ee2 <__divsf3>
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e2       	ldi	r20, 0x20	; 32
    35f6:	52 e4       	ldi	r21, 0x42	; 66
    35f8:	0f cc       	rjmp	.-2018   	; 0x2e18 <__subsf3>
    35fa:	08 95       	ret

000035fc <serial_create>:
    35fc:	2f 92       	push	r2
    35fe:	3f 92       	push	r3
    3600:	4f 92       	push	r4
    3602:	5f 92       	push	r5
    3604:	6f 92       	push	r6
    3606:	7f 92       	push	r7
    3608:	8f 92       	push	r8
    360a:	9f 92       	push	r9
    360c:	af 92       	push	r10
    360e:	cf 92       	push	r12
    3610:	ef 92       	push	r14
    3612:	ff 92       	push	r15
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	f8 2e       	mov	r15, r24
    3622:	2a 01       	movw	r4, r20
    3624:	3b 01       	movw	r6, r22
    3626:	88 e0       	ldi	r24, 0x08	; 8
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	0e 94 a5 24 	call	0x494a	; 0x494a <malloc>
    362e:	8c 01       	movw	r16, r24
    3630:	8f 2d       	mov	r24, r15
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	fc 01       	movw	r30, r24
    3636:	ee 0f       	add	r30, r30
    3638:	ff 1f       	adc	r31, r31
    363a:	e5 5b       	subi	r30, 0xB5	; 181
    363c:	f1 4f       	sbci	r31, 0xF1	; 241
    363e:	11 83       	std	Z+1, r17	; 0x01
    3640:	00 83       	st	Z, r16
    3642:	01 15       	cp	r16, r1
    3644:	11 05       	cpc	r17, r1
    3646:	09 f4       	brne	.+2      	; 0x364a <serial_create+0x4e>
    3648:	68 c0       	rjmp	.+208    	; 0x371a <serial_create+0x11e>
    364a:	88 0f       	add	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	fc 01       	movw	r30, r24
    3650:	e5 5f       	subi	r30, 0xF5	; 245
    3652:	fd 4f       	sbci	r31, 0xFD	; 253
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	d8 01       	movw	r26, r16
    365a:	8d 93       	st	X+, r24
    365c:	9c 93       	st	X, r25
    365e:	6c 2d       	mov	r22, r12
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	84 e0       	ldi	r24, 0x04	; 4
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
    366a:	1c 01       	movw	r2, r24
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	70 e0       	ldi	r23, 0x00	; 0
    3670:	86 e0       	ldi	r24, 0x06	; 6
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
    3678:	7c 01       	movw	r14, r24
    367a:	4c 2d       	mov	r20, r12
    367c:	b1 01       	movw	r22, r2
    367e:	02 d7       	rcall	.+3588   	; 0x4484 <fifo_init>
    3680:	f8 01       	movw	r30, r16
    3682:	f5 82       	std	Z+5, r15	; 0x05
    3684:	e4 82       	std	Z+4, r14	; 0x04
    3686:	6a 2d       	mov	r22, r10
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	84 e0       	ldi	r24, 0x04	; 4
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
    3692:	1c 01       	movw	r2, r24
    3694:	61 e0       	ldi	r22, 0x01	; 1
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	86 e0       	ldi	r24, 0x06	; 6
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 8b 24 	call	0x4916	; 0x4916 <calloc>
    36a0:	7c 01       	movw	r14, r24
    36a2:	4a 2d       	mov	r20, r10
    36a4:	b1 01       	movw	r22, r2
    36a6:	ee d6       	rcall	.+3548   	; 0x4484 <fifo_init>
    36a8:	d8 01       	movw	r26, r16
    36aa:	13 96       	adiw	r26, 0x03	; 3
    36ac:	fc 92       	st	X, r15
    36ae:	ee 92       	st	-X, r14
    36b0:	12 97       	sbiw	r26, 0x02	; 2
    36b2:	17 96       	adiw	r26, 0x07	; 7
    36b4:	9c 92       	st	X, r9
    36b6:	8e 92       	st	-X, r8
    36b8:	16 97       	sbiw	r26, 0x06	; 6
    36ba:	ff b6       	in	r15, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	ed 91       	ld	r30, X+
    36c0:	fc 91       	ld	r31, X
    36c2:	11 97       	sbiw	r26, 0x01	; 1
    36c4:	36 97       	sbiw	r30, 0x06	; 6
    36c6:	80 81       	ld	r24, Z
    36c8:	82 60       	ori	r24, 0x02	; 2
    36ca:	80 83       	st	Z, r24
    36cc:	8d 90       	ld	r8, X+
    36ce:	9c 90       	ld	r9, X
    36d0:	c3 01       	movw	r24, r6
    36d2:	b2 01       	movw	r22, r4
    36d4:	9f dc       	rcall	.-1730   	; 0x3014 <__floatunsisf>
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	51 e4       	ldi	r21, 0x41	; 65
    36de:	28 dd       	rcall	.-1456   	; 0x3130 <__mulsf3>
    36e0:	9b 01       	movw	r18, r22
    36e2:	ac 01       	movw	r20, r24
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	74 e2       	ldi	r23, 0x24	; 36
    36e8:	84 e7       	ldi	r24, 0x74	; 116
    36ea:	9b e4       	ldi	r25, 0x4B	; 75
    36ec:	fa db       	rcall	.-2060   	; 0x2ee2 <__divsf3>
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	40 e8       	ldi	r20, 0x80	; 128
    36f4:	5f e3       	ldi	r21, 0x3F	; 63
    36f6:	90 db       	rcall	.-2272   	; 0x2e18 <__subsf3>
    36f8:	61 dc       	rcall	.-1854   	; 0x2fbc <__fixunssfsi>
    36fa:	f4 01       	movw	r30, r8
    36fc:	32 97       	sbiw	r30, 0x02	; 2
    36fe:	60 83       	st	Z, r22
    3700:	d8 01       	movw	r26, r16
    3702:	ed 91       	ld	r30, X+
    3704:	fc 91       	ld	r31, X
    3706:	11 97       	sbiw	r26, 0x01	; 1
    3708:	35 97       	sbiw	r30, 0x05	; 5
    370a:	88 e9       	ldi	r24, 0x98	; 152
    370c:	80 83       	st	Z, r24
    370e:	ed 91       	ld	r30, X+
    3710:	fc 91       	ld	r31, X
    3712:	34 97       	sbiw	r30, 0x04	; 4
    3714:	86 e0       	ldi	r24, 0x06	; 6
    3716:	80 83       	st	Z, r24
    3718:	ff be       	out	0x3f, r15	; 63
    371a:	c8 01       	movw	r24, r16
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	cf 90       	pop	r12
    372a:	af 90       	pop	r10
    372c:	9f 90       	pop	r9
    372e:	8f 90       	pop	r8
    3730:	7f 90       	pop	r7
    3732:	6f 90       	pop	r6
    3734:	5f 90       	pop	r5
    3736:	4f 90       	pop	r4
    3738:	3f 90       	pop	r3
    373a:	2f 90       	pop	r2
    373c:	08 95       	ret

0000373e <serial_sendByte>:
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	dc 01       	movw	r26, r24
    3744:	89 2b       	or	r24, r25
    3746:	01 f1       	breq	.+64     	; 0x3788 <serial_sendByte+0x4a>
    3748:	12 96       	adiw	r26, 0x02	; 2
    374a:	ed 91       	ld	r30, X+
    374c:	fc 91       	ld	r31, X
    374e:	13 97       	sbiw	r26, 0x03	; 3
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	82 81       	ldd	r24, Z+2	; 0x02
    3754:	25 81       	ldd	r18, Z+5	; 0x05
    3756:	98 1b       	sub	r25, r24
    3758:	92 23       	and	r25, r18
    375a:	84 81       	ldd	r24, Z+4	; 0x04
    375c:	98 17       	cp	r25, r24
    375e:	b1 f0       	breq	.+44     	; 0x378c <serial_sendByte+0x4e>
    3760:	83 81       	ldd	r24, Z+3	; 0x03
    3762:	26 95       	lsr	r18
    3764:	28 23       	and	r18, r24
    3766:	c0 81       	ld	r28, Z
    3768:	d1 81       	ldd	r29, Z+1	; 0x01
    376a:	c2 0f       	add	r28, r18
    376c:	d1 1d       	adc	r29, r1
    376e:	68 83       	st	Y, r22
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	95 81       	ldd	r25, Z+5	; 0x05
    3774:	89 23       	and	r24, r25
    3776:	83 83       	std	Z+3, r24	; 0x03
    3778:	ed 91       	ld	r30, X+
    377a:	fc 91       	ld	r31, X
    377c:	35 97       	sbiw	r30, 0x05	; 5
    377e:	80 81       	ld	r24, Z
    3780:	80 62       	ori	r24, 0x20	; 32
    3782:	80 83       	st	Z, r24
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	03 c0       	rjmp	.+6      	; 0x378e <serial_sendByte+0x50>
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	01 c0       	rjmp	.+2      	; 0x378e <serial_sendByte+0x50>
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	08 95       	ret

00003794 <serial_getByte>:
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	d1 f0       	breq	.+52     	; 0x37cc <serial_getByte+0x38>
    3798:	dc 01       	movw	r26, r24
    379a:	14 96       	adiw	r26, 0x04	; 4
    379c:	ed 91       	ld	r30, X+
    379e:	fc 91       	ld	r31, X
    37a0:	15 97       	sbiw	r26, 0x05	; 5
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	82 81       	ldd	r24, Z+2	; 0x02
    37a6:	98 17       	cp	r25, r24
    37a8:	99 f0       	breq	.+38     	; 0x37d0 <serial_getByte+0x3c>
    37aa:	92 81       	ldd	r25, Z+2	; 0x02
    37ac:	85 81       	ldd	r24, Z+5	; 0x05
    37ae:	86 95       	lsr	r24
    37b0:	89 23       	and	r24, r25
    37b2:	a0 81       	ld	r26, Z
    37b4:	b1 81       	ldd	r27, Z+1	; 0x01
    37b6:	a8 0f       	add	r26, r24
    37b8:	b1 1d       	adc	r27, r1
    37ba:	8c 91       	ld	r24, X
    37bc:	db 01       	movw	r26, r22
    37be:	8c 93       	st	X, r24
    37c0:	9f 5f       	subi	r25, 0xFF	; 255
    37c2:	85 81       	ldd	r24, Z+5	; 0x05
    37c4:	98 23       	and	r25, r24
    37c6:	92 83       	std	Z+2, r25	; 0x02
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	08 95       	ret
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	08 95       	ret
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	08 95       	ret

000037d4 <__vector_25>:
    37d4:	1f 92       	push	r1
    37d6:	0f 92       	push	r0
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	0f 92       	push	r0
    37dc:	11 24       	eor	r1, r1
    37de:	0b b6       	in	r0, 0x3b	; 59
    37e0:	0f 92       	push	r0
    37e2:	2f 93       	push	r18
    37e4:	3f 93       	push	r19
    37e6:	4f 93       	push	r20
    37e8:	5f 93       	push	r21
    37ea:	6f 93       	push	r22
    37ec:	7f 93       	push	r23
    37ee:	8f 93       	push	r24
    37f0:	9f 93       	push	r25
    37f2:	af 93       	push	r26
    37f4:	bf 93       	push	r27
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	ef 93       	push	r30
    37fc:	ff 93       	push	r31
    37fe:	a0 91 4b 0e 	lds	r26, 0x0E4B	; 0x800e4b <_ser_handle>
    3802:	b0 91 4c 0e 	lds	r27, 0x0E4C	; 0x800e4c <_ser_handle+0x1>
    3806:	10 97       	sbiw	r26, 0x00	; 0
    3808:	11 f1       	breq	.+68     	; 0x384e <__vector_25+0x7a>
    380a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    380e:	14 96       	adiw	r26, 0x04	; 4
    3810:	ed 91       	ld	r30, X+
    3812:	fc 91       	ld	r31, X
    3814:	15 97       	sbiw	r26, 0x05	; 5
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	82 81       	ldd	r24, Z+2	; 0x02
    381a:	25 81       	ldd	r18, Z+5	; 0x05
    381c:	98 1b       	sub	r25, r24
    381e:	92 23       	and	r25, r18
    3820:	84 81       	ldd	r24, Z+4	; 0x04
    3822:	98 17       	cp	r25, r24
    3824:	61 f0       	breq	.+24     	; 0x383e <__vector_25+0x6a>
    3826:	83 81       	ldd	r24, Z+3	; 0x03
    3828:	26 95       	lsr	r18
    382a:	28 23       	and	r18, r24
    382c:	c0 81       	ld	r28, Z
    382e:	d1 81       	ldd	r29, Z+1	; 0x01
    3830:	c2 0f       	add	r28, r18
    3832:	d1 1d       	adc	r29, r1
    3834:	68 83       	st	Y, r22
    3836:	8f 5f       	subi	r24, 0xFF	; 255
    3838:	95 81       	ldd	r25, Z+5	; 0x05
    383a:	89 23       	and	r24, r25
    383c:	83 83       	std	Z+3, r24	; 0x03
    383e:	16 96       	adiw	r26, 0x06	; 6
    3840:	ed 91       	ld	r30, X+
    3842:	fc 91       	ld	r31, X
    3844:	17 97       	sbiw	r26, 0x07	; 7
    3846:	30 97       	sbiw	r30, 0x00	; 0
    3848:	11 f0       	breq	.+4      	; 0x384e <__vector_25+0x7a>
    384a:	cd 01       	movw	r24, r26
    384c:	19 95       	eicall
    384e:	ff 91       	pop	r31
    3850:	ef 91       	pop	r30
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	bf 91       	pop	r27
    3858:	af 91       	pop	r26
    385a:	9f 91       	pop	r25
    385c:	8f 91       	pop	r24
    385e:	7f 91       	pop	r23
    3860:	6f 91       	pop	r22
    3862:	5f 91       	pop	r21
    3864:	4f 91       	pop	r20
    3866:	3f 91       	pop	r19
    3868:	2f 91       	pop	r18
    386a:	0f 90       	pop	r0
    386c:	0b be       	out	0x3b, r0	; 59
    386e:	0f 90       	pop	r0
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	0f 90       	pop	r0
    3874:	1f 90       	pop	r1
    3876:	18 95       	reti

00003878 <__vector_26>:
    3878:	1f 92       	push	r1
    387a:	0f 92       	push	r0
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	0f 92       	push	r0
    3880:	11 24       	eor	r1, r1
    3882:	0b b6       	in	r0, 0x3b	; 59
    3884:	0f 92       	push	r0
    3886:	2f 93       	push	r18
    3888:	8f 93       	push	r24
    388a:	9f 93       	push	r25
    388c:	af 93       	push	r26
    388e:	bf 93       	push	r27
    3890:	ef 93       	push	r30
    3892:	ff 93       	push	r31
    3894:	e0 91 4b 0e 	lds	r30, 0x0E4B	; 0x800e4b <_ser_handle>
    3898:	f0 91 4c 0e 	lds	r31, 0x0E4C	; 0x800e4c <_ser_handle+0x1>
    389c:	30 97       	sbiw	r30, 0x00	; 0
    389e:	b9 f0       	breq	.+46     	; 0x38ce <__vector_26+0x56>
    38a0:	02 80       	ldd	r0, Z+2	; 0x02
    38a2:	f3 81       	ldd	r31, Z+3	; 0x03
    38a4:	e0 2d       	mov	r30, r0
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	98 17       	cp	r25, r24
    38ac:	b1 f0       	breq	.+44     	; 0x38da <__vector_26+0x62>
    38ae:	92 81       	ldd	r25, Z+2	; 0x02
    38b0:	85 81       	ldd	r24, Z+5	; 0x05
    38b2:	28 2f       	mov	r18, r24
    38b4:	26 95       	lsr	r18
    38b6:	29 23       	and	r18, r25
    38b8:	a0 81       	ld	r26, Z
    38ba:	b1 81       	ldd	r27, Z+1	; 0x01
    38bc:	a2 0f       	add	r26, r18
    38be:	b1 1d       	adc	r27, r1
    38c0:	2c 91       	ld	r18, X
    38c2:	9f 5f       	subi	r25, 0xFF	; 255
    38c4:	89 23       	and	r24, r25
    38c6:	82 83       	std	Z+2, r24	; 0x02
    38c8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    38cc:	0b c0       	rjmp	.+22     	; 0x38e4 <__vector_26+0x6c>
    38ce:	e1 ec       	ldi	r30, 0xC1	; 193
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	8f 7d       	andi	r24, 0xDF	; 223
    38d6:	80 83       	st	Z, r24
    38d8:	05 c0       	rjmp	.+10     	; 0x38e4 <__vector_26+0x6c>
    38da:	e1 ec       	ldi	r30, 0xC1	; 193
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	8f 7d       	andi	r24, 0xDF	; 223
    38e2:	80 83       	st	Z, r24
    38e4:	ff 91       	pop	r31
    38e6:	ef 91       	pop	r30
    38e8:	bf 91       	pop	r27
    38ea:	af 91       	pop	r26
    38ec:	9f 91       	pop	r25
    38ee:	8f 91       	pop	r24
    38f0:	2f 91       	pop	r18
    38f2:	0f 90       	pop	r0
    38f4:	0b be       	out	0x3b, r0	; 59
    38f6:	0f 90       	pop	r0
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	0f 90       	pop	r0
    38fc:	1f 90       	pop	r1
    38fe:	18 95       	reti

00003900 <__vector_36>:
    3900:	1f 92       	push	r1
    3902:	0f 92       	push	r0
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	0f 92       	push	r0
    3908:	11 24       	eor	r1, r1
    390a:	0b b6       	in	r0, 0x3b	; 59
    390c:	0f 92       	push	r0
    390e:	2f 93       	push	r18
    3910:	3f 93       	push	r19
    3912:	4f 93       	push	r20
    3914:	5f 93       	push	r21
    3916:	6f 93       	push	r22
    3918:	7f 93       	push	r23
    391a:	8f 93       	push	r24
    391c:	9f 93       	push	r25
    391e:	af 93       	push	r26
    3920:	bf 93       	push	r27
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	ef 93       	push	r30
    3928:	ff 93       	push	r31
    392a:	a0 91 4d 0e 	lds	r26, 0x0E4D	; 0x800e4d <_ser_handle+0x2>
    392e:	b0 91 4e 0e 	lds	r27, 0x0E4E	; 0x800e4e <_ser_handle+0x3>
    3932:	10 97       	sbiw	r26, 0x00	; 0
    3934:	11 f1       	breq	.+68     	; 0x397a <__vector_36+0x7a>
    3936:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    393a:	14 96       	adiw	r26, 0x04	; 4
    393c:	ed 91       	ld	r30, X+
    393e:	fc 91       	ld	r31, X
    3940:	15 97       	sbiw	r26, 0x05	; 5
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	82 81       	ldd	r24, Z+2	; 0x02
    3946:	25 81       	ldd	r18, Z+5	; 0x05
    3948:	98 1b       	sub	r25, r24
    394a:	92 23       	and	r25, r18
    394c:	84 81       	ldd	r24, Z+4	; 0x04
    394e:	98 17       	cp	r25, r24
    3950:	61 f0       	breq	.+24     	; 0x396a <__vector_36+0x6a>
    3952:	83 81       	ldd	r24, Z+3	; 0x03
    3954:	26 95       	lsr	r18
    3956:	28 23       	and	r18, r24
    3958:	c0 81       	ld	r28, Z
    395a:	d1 81       	ldd	r29, Z+1	; 0x01
    395c:	c2 0f       	add	r28, r18
    395e:	d1 1d       	adc	r29, r1
    3960:	68 83       	st	Y, r22
    3962:	8f 5f       	subi	r24, 0xFF	; 255
    3964:	95 81       	ldd	r25, Z+5	; 0x05
    3966:	89 23       	and	r24, r25
    3968:	83 83       	std	Z+3, r24	; 0x03
    396a:	16 96       	adiw	r26, 0x06	; 6
    396c:	ed 91       	ld	r30, X+
    396e:	fc 91       	ld	r31, X
    3970:	17 97       	sbiw	r26, 0x07	; 7
    3972:	30 97       	sbiw	r30, 0x00	; 0
    3974:	11 f0       	breq	.+4      	; 0x397a <__vector_36+0x7a>
    3976:	cd 01       	movw	r24, r26
    3978:	19 95       	eicall
    397a:	ff 91       	pop	r31
    397c:	ef 91       	pop	r30
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	bf 91       	pop	r27
    3984:	af 91       	pop	r26
    3986:	9f 91       	pop	r25
    3988:	8f 91       	pop	r24
    398a:	7f 91       	pop	r23
    398c:	6f 91       	pop	r22
    398e:	5f 91       	pop	r21
    3990:	4f 91       	pop	r20
    3992:	3f 91       	pop	r19
    3994:	2f 91       	pop	r18
    3996:	0f 90       	pop	r0
    3998:	0b be       	out	0x3b, r0	; 59
    399a:	0f 90       	pop	r0
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	0f 90       	pop	r0
    39a0:	1f 90       	pop	r1
    39a2:	18 95       	reti

000039a4 <__vector_37>:
    39a4:	1f 92       	push	r1
    39a6:	0f 92       	push	r0
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	0f 92       	push	r0
    39ac:	11 24       	eor	r1, r1
    39ae:	0b b6       	in	r0, 0x3b	; 59
    39b0:	0f 92       	push	r0
    39b2:	2f 93       	push	r18
    39b4:	8f 93       	push	r24
    39b6:	9f 93       	push	r25
    39b8:	af 93       	push	r26
    39ba:	bf 93       	push	r27
    39bc:	ef 93       	push	r30
    39be:	ff 93       	push	r31
    39c0:	e0 91 4d 0e 	lds	r30, 0x0E4D	; 0x800e4d <_ser_handle+0x2>
    39c4:	f0 91 4e 0e 	lds	r31, 0x0E4E	; 0x800e4e <_ser_handle+0x3>
    39c8:	30 97       	sbiw	r30, 0x00	; 0
    39ca:	b9 f0       	breq	.+46     	; 0x39fa <__vector_37+0x56>
    39cc:	02 80       	ldd	r0, Z+2	; 0x02
    39ce:	f3 81       	ldd	r31, Z+3	; 0x03
    39d0:	e0 2d       	mov	r30, r0
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	98 17       	cp	r25, r24
    39d8:	b1 f0       	breq	.+44     	; 0x3a06 <__vector_37+0x62>
    39da:	92 81       	ldd	r25, Z+2	; 0x02
    39dc:	85 81       	ldd	r24, Z+5	; 0x05
    39de:	28 2f       	mov	r18, r24
    39e0:	26 95       	lsr	r18
    39e2:	29 23       	and	r18, r25
    39e4:	a0 81       	ld	r26, Z
    39e6:	b1 81       	ldd	r27, Z+1	; 0x01
    39e8:	a2 0f       	add	r26, r18
    39ea:	b1 1d       	adc	r27, r1
    39ec:	2c 91       	ld	r18, X
    39ee:	9f 5f       	subi	r25, 0xFF	; 255
    39f0:	89 23       	and	r24, r25
    39f2:	82 83       	std	Z+2, r24	; 0x02
    39f4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    39f8:	0b c0       	rjmp	.+22     	; 0x3a10 <__vector_37+0x6c>
    39fa:	e9 ec       	ldi	r30, 0xC9	; 201
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	8f 7d       	andi	r24, 0xDF	; 223
    3a02:	80 83       	st	Z, r24
    3a04:	05 c0       	rjmp	.+10     	; 0x3a10 <__vector_37+0x6c>
    3a06:	e9 ec       	ldi	r30, 0xC9	; 201
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8f 7d       	andi	r24, 0xDF	; 223
    3a0e:	80 83       	st	Z, r24
    3a10:	ff 91       	pop	r31
    3a12:	ef 91       	pop	r30
    3a14:	bf 91       	pop	r27
    3a16:	af 91       	pop	r26
    3a18:	9f 91       	pop	r25
    3a1a:	8f 91       	pop	r24
    3a1c:	2f 91       	pop	r18
    3a1e:	0f 90       	pop	r0
    3a20:	0b be       	out	0x3b, r0	; 59
    3a22:	0f 90       	pop	r0
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	0f 90       	pop	r0
    3a28:	1f 90       	pop	r1
    3a2a:	18 95       	reti

00003a2c <__vector_51>:
    3a2c:	1f 92       	push	r1
    3a2e:	0f 92       	push	r0
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	0f 92       	push	r0
    3a34:	11 24       	eor	r1, r1
    3a36:	0b b6       	in	r0, 0x3b	; 59
    3a38:	0f 92       	push	r0
    3a3a:	2f 93       	push	r18
    3a3c:	3f 93       	push	r19
    3a3e:	4f 93       	push	r20
    3a40:	5f 93       	push	r21
    3a42:	6f 93       	push	r22
    3a44:	7f 93       	push	r23
    3a46:	8f 93       	push	r24
    3a48:	9f 93       	push	r25
    3a4a:	af 93       	push	r26
    3a4c:	bf 93       	push	r27
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	ef 93       	push	r30
    3a54:	ff 93       	push	r31
    3a56:	a0 91 4f 0e 	lds	r26, 0x0E4F	; 0x800e4f <_ser_handle+0x4>
    3a5a:	b0 91 50 0e 	lds	r27, 0x0E50	; 0x800e50 <_ser_handle+0x5>
    3a5e:	10 97       	sbiw	r26, 0x00	; 0
    3a60:	11 f1       	breq	.+68     	; 0x3aa6 <__vector_51+0x7a>
    3a62:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3a66:	14 96       	adiw	r26, 0x04	; 4
    3a68:	ed 91       	ld	r30, X+
    3a6a:	fc 91       	ld	r31, X
    3a6c:	15 97       	sbiw	r26, 0x05	; 5
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	25 81       	ldd	r18, Z+5	; 0x05
    3a74:	98 1b       	sub	r25, r24
    3a76:	92 23       	and	r25, r18
    3a78:	84 81       	ldd	r24, Z+4	; 0x04
    3a7a:	98 17       	cp	r25, r24
    3a7c:	61 f0       	breq	.+24     	; 0x3a96 <__vector_51+0x6a>
    3a7e:	83 81       	ldd	r24, Z+3	; 0x03
    3a80:	26 95       	lsr	r18
    3a82:	28 23       	and	r18, r24
    3a84:	c0 81       	ld	r28, Z
    3a86:	d1 81       	ldd	r29, Z+1	; 0x01
    3a88:	c2 0f       	add	r28, r18
    3a8a:	d1 1d       	adc	r29, r1
    3a8c:	68 83       	st	Y, r22
    3a8e:	8f 5f       	subi	r24, 0xFF	; 255
    3a90:	95 81       	ldd	r25, Z+5	; 0x05
    3a92:	89 23       	and	r24, r25
    3a94:	83 83       	std	Z+3, r24	; 0x03
    3a96:	16 96       	adiw	r26, 0x06	; 6
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	17 97       	sbiw	r26, 0x07	; 7
    3a9e:	30 97       	sbiw	r30, 0x00	; 0
    3aa0:	11 f0       	breq	.+4      	; 0x3aa6 <__vector_51+0x7a>
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	19 95       	eicall
    3aa6:	ff 91       	pop	r31
    3aa8:	ef 91       	pop	r30
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	bf 91       	pop	r27
    3ab0:	af 91       	pop	r26
    3ab2:	9f 91       	pop	r25
    3ab4:	8f 91       	pop	r24
    3ab6:	7f 91       	pop	r23
    3ab8:	6f 91       	pop	r22
    3aba:	5f 91       	pop	r21
    3abc:	4f 91       	pop	r20
    3abe:	3f 91       	pop	r19
    3ac0:	2f 91       	pop	r18
    3ac2:	0f 90       	pop	r0
    3ac4:	0b be       	out	0x3b, r0	; 59
    3ac6:	0f 90       	pop	r0
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	0f 90       	pop	r0
    3acc:	1f 90       	pop	r1
    3ace:	18 95       	reti

00003ad0 <__vector_52>:
    3ad0:	1f 92       	push	r1
    3ad2:	0f 92       	push	r0
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	0f 92       	push	r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	0b b6       	in	r0, 0x3b	; 59
    3adc:	0f 92       	push	r0
    3ade:	2f 93       	push	r18
    3ae0:	8f 93       	push	r24
    3ae2:	9f 93       	push	r25
    3ae4:	af 93       	push	r26
    3ae6:	bf 93       	push	r27
    3ae8:	ef 93       	push	r30
    3aea:	ff 93       	push	r31
    3aec:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <_ser_handle+0x4>
    3af0:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <_ser_handle+0x5>
    3af4:	30 97       	sbiw	r30, 0x00	; 0
    3af6:	b9 f0       	breq	.+46     	; 0x3b26 <__vector_52+0x56>
    3af8:	02 80       	ldd	r0, Z+2	; 0x02
    3afa:	f3 81       	ldd	r31, Z+3	; 0x03
    3afc:	e0 2d       	mov	r30, r0
    3afe:	93 81       	ldd	r25, Z+3	; 0x03
    3b00:	82 81       	ldd	r24, Z+2	; 0x02
    3b02:	98 17       	cp	r25, r24
    3b04:	b1 f0       	breq	.+44     	; 0x3b32 <__vector_52+0x62>
    3b06:	92 81       	ldd	r25, Z+2	; 0x02
    3b08:	85 81       	ldd	r24, Z+5	; 0x05
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	26 95       	lsr	r18
    3b0e:	29 23       	and	r18, r25
    3b10:	a0 81       	ld	r26, Z
    3b12:	b1 81       	ldd	r27, Z+1	; 0x01
    3b14:	a2 0f       	add	r26, r18
    3b16:	b1 1d       	adc	r27, r1
    3b18:	2c 91       	ld	r18, X
    3b1a:	9f 5f       	subi	r25, 0xFF	; 255
    3b1c:	89 23       	and	r24, r25
    3b1e:	82 83       	std	Z+2, r24	; 0x02
    3b20:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3b24:	0b c0       	rjmp	.+22     	; 0x3b3c <__vector_52+0x6c>
    3b26:	e1 ed       	ldi	r30, 0xD1	; 209
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	8f 7d       	andi	r24, 0xDF	; 223
    3b2e:	80 83       	st	Z, r24
    3b30:	05 c0       	rjmp	.+10     	; 0x3b3c <__vector_52+0x6c>
    3b32:	e1 ed       	ldi	r30, 0xD1	; 209
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	8f 7d       	andi	r24, 0xDF	; 223
    3b3a:	80 83       	st	Z, r24
    3b3c:	ff 91       	pop	r31
    3b3e:	ef 91       	pop	r30
    3b40:	bf 91       	pop	r27
    3b42:	af 91       	pop	r26
    3b44:	9f 91       	pop	r25
    3b46:	8f 91       	pop	r24
    3b48:	2f 91       	pop	r18
    3b4a:	0f 90       	pop	r0
    3b4c:	0b be       	out	0x3b, r0	; 59
    3b4e:	0f 90       	pop	r0
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	0f 90       	pop	r0
    3b54:	1f 90       	pop	r1
    3b56:	18 95       	reti

00003b58 <__vector_54>:
    3b58:	1f 92       	push	r1
    3b5a:	0f 92       	push	r0
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	0f 92       	push	r0
    3b60:	11 24       	eor	r1, r1
    3b62:	0b b6       	in	r0, 0x3b	; 59
    3b64:	0f 92       	push	r0
    3b66:	2f 93       	push	r18
    3b68:	3f 93       	push	r19
    3b6a:	4f 93       	push	r20
    3b6c:	5f 93       	push	r21
    3b6e:	6f 93       	push	r22
    3b70:	7f 93       	push	r23
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
    3b76:	af 93       	push	r26
    3b78:	bf 93       	push	r27
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	ef 93       	push	r30
    3b80:	ff 93       	push	r31
    3b82:	a0 91 51 0e 	lds	r26, 0x0E51	; 0x800e51 <_ser_handle+0x6>
    3b86:	b0 91 52 0e 	lds	r27, 0x0E52	; 0x800e52 <_ser_handle+0x7>
    3b8a:	10 97       	sbiw	r26, 0x00	; 0
    3b8c:	11 f1       	breq	.+68     	; 0x3bd2 <__vector_54+0x7a>
    3b8e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3b92:	14 96       	adiw	r26, 0x04	; 4
    3b94:	ed 91       	ld	r30, X+
    3b96:	fc 91       	ld	r31, X
    3b98:	15 97       	sbiw	r26, 0x05	; 5
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	25 81       	ldd	r18, Z+5	; 0x05
    3ba0:	98 1b       	sub	r25, r24
    3ba2:	92 23       	and	r25, r18
    3ba4:	84 81       	ldd	r24, Z+4	; 0x04
    3ba6:	98 17       	cp	r25, r24
    3ba8:	61 f0       	breq	.+24     	; 0x3bc2 <__vector_54+0x6a>
    3baa:	83 81       	ldd	r24, Z+3	; 0x03
    3bac:	26 95       	lsr	r18
    3bae:	28 23       	and	r18, r24
    3bb0:	c0 81       	ld	r28, Z
    3bb2:	d1 81       	ldd	r29, Z+1	; 0x01
    3bb4:	c2 0f       	add	r28, r18
    3bb6:	d1 1d       	adc	r29, r1
    3bb8:	68 83       	st	Y, r22
    3bba:	8f 5f       	subi	r24, 0xFF	; 255
    3bbc:	95 81       	ldd	r25, Z+5	; 0x05
    3bbe:	89 23       	and	r24, r25
    3bc0:	83 83       	std	Z+3, r24	; 0x03
    3bc2:	16 96       	adiw	r26, 0x06	; 6
    3bc4:	ed 91       	ld	r30, X+
    3bc6:	fc 91       	ld	r31, X
    3bc8:	17 97       	sbiw	r26, 0x07	; 7
    3bca:	30 97       	sbiw	r30, 0x00	; 0
    3bcc:	11 f0       	breq	.+4      	; 0x3bd2 <__vector_54+0x7a>
    3bce:	cd 01       	movw	r24, r26
    3bd0:	19 95       	eicall
    3bd2:	ff 91       	pop	r31
    3bd4:	ef 91       	pop	r30
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	bf 91       	pop	r27
    3bdc:	af 91       	pop	r26
    3bde:	9f 91       	pop	r25
    3be0:	8f 91       	pop	r24
    3be2:	7f 91       	pop	r23
    3be4:	6f 91       	pop	r22
    3be6:	5f 91       	pop	r21
    3be8:	4f 91       	pop	r20
    3bea:	3f 91       	pop	r19
    3bec:	2f 91       	pop	r18
    3bee:	0f 90       	pop	r0
    3bf0:	0b be       	out	0x3b, r0	; 59
    3bf2:	0f 90       	pop	r0
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	0f 90       	pop	r0
    3bf8:	1f 90       	pop	r1
    3bfa:	18 95       	reti

00003bfc <__vector_55>:
    3bfc:	1f 92       	push	r1
    3bfe:	0f 92       	push	r0
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	0f 92       	push	r0
    3c04:	11 24       	eor	r1, r1
    3c06:	0b b6       	in	r0, 0x3b	; 59
    3c08:	0f 92       	push	r0
    3c0a:	2f 93       	push	r18
    3c0c:	8f 93       	push	r24
    3c0e:	9f 93       	push	r25
    3c10:	af 93       	push	r26
    3c12:	bf 93       	push	r27
    3c14:	ef 93       	push	r30
    3c16:	ff 93       	push	r31
    3c18:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <_ser_handle+0x6>
    3c1c:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <_ser_handle+0x7>
    3c20:	30 97       	sbiw	r30, 0x00	; 0
    3c22:	b9 f0       	breq	.+46     	; 0x3c52 <__vector_55+0x56>
    3c24:	02 80       	ldd	r0, Z+2	; 0x02
    3c26:	f3 81       	ldd	r31, Z+3	; 0x03
    3c28:	e0 2d       	mov	r30, r0
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	98 17       	cp	r25, r24
    3c30:	b1 f0       	breq	.+44     	; 0x3c5e <__vector_55+0x62>
    3c32:	92 81       	ldd	r25, Z+2	; 0x02
    3c34:	85 81       	ldd	r24, Z+5	; 0x05
    3c36:	28 2f       	mov	r18, r24
    3c38:	26 95       	lsr	r18
    3c3a:	29 23       	and	r18, r25
    3c3c:	a0 81       	ld	r26, Z
    3c3e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c40:	a2 0f       	add	r26, r18
    3c42:	b1 1d       	adc	r27, r1
    3c44:	2c 91       	ld	r18, X
    3c46:	9f 5f       	subi	r25, 0xFF	; 255
    3c48:	89 23       	and	r24, r25
    3c4a:	82 83       	std	Z+2, r24	; 0x02
    3c4c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3c50:	0b c0       	rjmp	.+22     	; 0x3c68 <__vector_55+0x6c>
    3c52:	e1 e3       	ldi	r30, 0x31	; 49
    3c54:	f1 e0       	ldi	r31, 0x01	; 1
    3c56:	80 81       	ld	r24, Z
    3c58:	8f 7d       	andi	r24, 0xDF	; 223
    3c5a:	80 83       	st	Z, r24
    3c5c:	05 c0       	rjmp	.+10     	; 0x3c68 <__vector_55+0x6c>
    3c5e:	e1 e3       	ldi	r30, 0x31	; 49
    3c60:	f1 e0       	ldi	r31, 0x01	; 1
    3c62:	80 81       	ld	r24, Z
    3c64:	8f 7d       	andi	r24, 0xDF	; 223
    3c66:	80 83       	st	Z, r24
    3c68:	ff 91       	pop	r31
    3c6a:	ef 91       	pop	r30
    3c6c:	bf 91       	pop	r27
    3c6e:	af 91       	pop	r26
    3c70:	9f 91       	pop	r25
    3c72:	8f 91       	pop	r24
    3c74:	2f 91       	pop	r18
    3c76:	0f 90       	pop	r0
    3c78:	0b be       	out	0x3b, r0	; 59
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <usart_getchar>:
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	1f 92       	push	r1
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	be 01       	movw	r22, r28
    3c90:	6f 5f       	subi	r22, 0xFF	; 255
    3c92:	7f 4f       	sbci	r23, 0xFF	; 255
    3c94:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <_com_serial_instance>
    3c98:	90 91 54 0e 	lds	r25, 0x0E54	; 0x800e54 <_com_serial_instance+0x1>
    3c9c:	7b dd       	rcall	.-1290   	; 0x3794 <serial_getByte>
    3c9e:	81 11       	cpse	r24, r1
    3ca0:	f6 cf       	rjmp	.-20     	; 0x3c8e <usart_getchar+0xa>
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0f 90       	pop	r0
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	08 95       	ret

00003cae <usart_putchar>:
    3cae:	68 2f       	mov	r22, r24
    3cb0:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <_com_serial_instance>
    3cb4:	90 91 54 0e 	lds	r25, 0x0E54	; 0x800e54 <_com_serial_instance+0x1>
    3cb8:	42 dd       	rcall	.-1404   	; 0x373e <serial_sendByte>
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	08 95       	ret

00003cc0 <stdio_initialise>:
    3cc0:	8f 92       	push	r8
    3cc2:	9f 92       	push	r9
    3cc4:	af 92       	push	r10
    3cc6:	cf 92       	push	r12
    3cc8:	ef 92       	push	r14
    3cca:	0f 93       	push	r16
    3ccc:	81 2c       	mov	r8, r1
    3cce:	91 2c       	mov	r9, r1
    3cd0:	68 94       	set
    3cd2:	aa 24       	eor	r10, r10
    3cd4:	a7 f8       	bld	r10, 7
    3cd6:	68 94       	set
    3cd8:	cc 24       	eor	r12, r12
    3cda:	c7 f8       	bld	r12, 7
    3cdc:	e1 2c       	mov	r14, r1
    3cde:	00 e0       	ldi	r16, 0x00	; 0
    3ce0:	23 e0       	ldi	r18, 0x03	; 3
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	51 ee       	ldi	r21, 0xE1	; 225
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	88 dc       	rcall	.-1776   	; 0x35fc <serial_create>
    3cec:	90 93 54 0e 	sts	0x0E54, r25	; 0x800e54 <_com_serial_instance+0x1>
    3cf0:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <_com_serial_instance>
    3cf4:	ea e7       	ldi	r30, 0x7A	; 122
    3cf6:	fe e0       	ldi	r31, 0x0E	; 14
    3cf8:	83 e1       	ldi	r24, 0x13	; 19
    3cfa:	92 e0       	ldi	r25, 0x02	; 2
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
    3d00:	93 83       	std	Z+3, r25	; 0x03
    3d02:	82 83       	std	Z+2, r24	; 0x02
    3d04:	0f 91       	pop	r16
    3d06:	ef 90       	pop	r14
    3d08:	cf 90       	pop	r12
    3d0a:	af 90       	pop	r10
    3d0c:	9f 90       	pop	r9
    3d0e:	8f 90       	pop	r8
    3d10:	08 95       	ret

00003d12 <_select_instance>:
    3d12:	e0 91 56 0e 	lds	r30, 0x0E56	; 0x800e56 <_this>
    3d16:	f0 91 57 0e 	lds	r31, 0x0E57	; 0x800e57 <_this+0x1>
    3d1a:	30 97       	sbiw	r30, 0x00	; 0
    3d1c:	f9 f0       	breq	.+62     	; 0x3d5c <_select_instance+0x4a>
    3d1e:	a0 81       	ld	r26, Z
    3d20:	b1 81       	ldd	r27, Z+1	; 0x01
    3d22:	10 97       	sbiw	r26, 0x00	; 0
    3d24:	d9 f0       	breq	.+54     	; 0x3d5c <_select_instance+0x4a>
    3d26:	23 81       	ldd	r18, Z+3	; 0x03
    3d28:	21 30       	cpi	r18, 0x01	; 1
    3d2a:	69 f4       	brne	.+26     	; 0x3d46 <_select_instance+0x34>
    3d2c:	4c 91       	ld	r20, X
    3d2e:	21 e0       	ldi	r18, 0x01	; 1
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	02 80       	ldd	r0, Z+2	; 0x02
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <_select_instance+0x28>
    3d36:	22 0f       	add	r18, r18
    3d38:	33 1f       	adc	r19, r19
    3d3a:	0a 94       	dec	r0
    3d3c:	e2 f7       	brpl	.-8      	; 0x3d36 <_select_instance+0x24>
    3d3e:	20 95       	com	r18
    3d40:	24 23       	and	r18, r20
    3d42:	2c 93       	st	X, r18
    3d44:	0b c0       	rjmp	.+22     	; 0x3d5c <_select_instance+0x4a>
    3d46:	4c 91       	ld	r20, X
    3d48:	21 e0       	ldi	r18, 0x01	; 1
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	02 80       	ldd	r0, Z+2	; 0x02
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <_select_instance+0x42>
    3d50:	22 0f       	add	r18, r18
    3d52:	33 1f       	adc	r19, r19
    3d54:	0a 94       	dec	r0
    3d56:	e2 f7       	brpl	.-8      	; 0x3d50 <_select_instance+0x3e>
    3d58:	24 2b       	or	r18, r20
    3d5a:	2c 93       	st	X, r18
    3d5c:	90 93 57 0e 	sts	0x0E57, r25	; 0x800e57 <_this+0x1>
    3d60:	80 93 56 0e 	sts	0x0E56, r24	; 0x800e56 <_this>
    3d64:	00 97       	sbiw	r24, 0x00	; 0
    3d66:	69 f0       	breq	.+26     	; 0x3d82 <_select_instance+0x70>
    3d68:	10 92 58 0e 	sts	0x0E58, r1	; 0x800e58 <_spi_active>
    3d6c:	2c b5       	in	r18, 0x2c	; 44
    3d6e:	2f 73       	andi	r18, 0x3F	; 63
    3d70:	2c bd       	out	0x2c, r18	; 44
    3d72:	fc 01       	movw	r30, r24
    3d74:	24 81       	ldd	r18, Z+4	; 0x04
    3d76:	2c bd       	out	0x2c, r18	; 44
    3d78:	85 81       	ldd	r24, Z+5	; 0x05
    3d7a:	8d bd       	out	0x2d, r24	; 45
    3d7c:	8c b5       	in	r24, 0x2c	; 44
    3d7e:	80 64       	ori	r24, 0x40	; 64
    3d80:	8c bd       	out	0x2c, r24	; 44
    3d82:	08 95       	ret

00003d84 <spi_create>:
    3d84:	4f 92       	push	r4
    3d86:	5f 92       	push	r5
    3d88:	6f 92       	push	r6
    3d8a:	7f 92       	push	r7
    3d8c:	8f 92       	push	r8
    3d8e:	9f 92       	push	r9
    3d90:	af 92       	push	r10
    3d92:	bf 92       	push	r11
    3d94:	cf 92       	push	r12
    3d96:	df 92       	push	r13
    3d98:	ef 92       	push	r14
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	98 2e       	mov	r9, r24
    3daa:	b6 2e       	mov	r11, r22
    3dac:	d4 2e       	mov	r13, r20
    3dae:	f2 2e       	mov	r15, r18
    3db0:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <_initialised>
    3db4:	81 11       	cpse	r24, r1
    3db6:	06 c0       	rjmp	.+12     	; 0x3dc4 <spi_create+0x40>
    3db8:	84 b1       	in	r24, 0x04	; 4
    3dba:	87 60       	ori	r24, 0x07	; 7
    3dbc:	84 b9       	out	0x04, r24	; 4
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	80 93 55 0e 	sts	0x0E55, r24	; 0x800e55 <_initialised>
    3dc4:	8c e0       	ldi	r24, 0x0C	; 12
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	c0 d5       	rcall	.+2944   	; 0x494a <malloc>
    3dca:	3c 01       	movw	r6, r24
    3dcc:	dc 01       	movw	r26, r24
    3dce:	11 96       	adiw	r26, 0x01	; 1
    3dd0:	1c 93       	st	X, r17
    3dd2:	0e 93       	st	-X, r16
    3dd4:	12 96       	adiw	r26, 0x02	; 2
    3dd6:	ec 92       	st	X, r14
    3dd8:	12 97       	sbiw	r26, 0x02	; 2
    3dda:	13 96       	adiw	r26, 0x03	; 3
    3ddc:	cc 92       	st	X, r12
    3dde:	13 97       	sbiw	r26, 0x03	; 3
    3de0:	8d 2d       	mov	r24, r13
    3de2:	88 0f       	add	r24, r24
    3de4:	88 0f       	add	r24, r24
    3de6:	f8 2a       	or	r15, r24
    3de8:	eb 2d       	mov	r30, r11
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	ed 5a       	subi	r30, 0xAD	; 173
    3dee:	fc 4f       	sbci	r31, 0xFC	; 252
    3df0:	80 81       	ld	r24, Z
    3df2:	98 2a       	or	r9, r24
    3df4:	8f 2d       	mov	r24, r15
    3df6:	89 29       	or	r24, r9
    3df8:	14 96       	adiw	r26, 0x04	; 4
    3dfa:	8c 93       	st	X, r24
    3dfc:	b3 e0       	ldi	r27, 0x03	; 3
    3dfe:	bb 15       	cp	r27, r11
    3e00:	18 f4       	brcc	.+6      	; 0x3e08 <spi_create+0x84>
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	f3 01       	movw	r30, r6
    3e06:	85 83       	std	Z+5, r24	; 0x05
    3e08:	a1 10       	cpse	r10, r1
    3e0a:	06 c0       	rjmp	.+12     	; 0x3e18 <spi_create+0x94>
    3e0c:	d3 01       	movw	r26, r6
    3e0e:	19 96       	adiw	r26, 0x09	; 9
    3e10:	1c 92       	st	X, r1
    3e12:	1e 92       	st	-X, r1
    3e14:	18 97       	sbiw	r26, 0x08	; 8
    3e16:	12 c0       	rjmp	.+36     	; 0x3e3c <spi_create+0xb8>
    3e18:	6a 2d       	mov	r22, r10
    3e1a:	70 e0       	ldi	r23, 0x00	; 0
    3e1c:	84 e0       	ldi	r24, 0x04	; 4
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	7a d5       	rcall	.+2804   	; 0x4916 <calloc>
    3e22:	2c 01       	movw	r4, r24
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	86 e0       	ldi	r24, 0x06	; 6
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	74 d5       	rcall	.+2792   	; 0x4916 <calloc>
    3e2e:	6c 01       	movw	r12, r24
    3e30:	4a 2d       	mov	r20, r10
    3e32:	b2 01       	movw	r22, r4
    3e34:	27 d3       	rcall	.+1614   	; 0x4484 <fifo_init>
    3e36:	f3 01       	movw	r30, r6
    3e38:	d1 86       	std	Z+9, r13	; 0x09
    3e3a:	c0 86       	std	Z+8, r12	; 0x08
    3e3c:	81 10       	cpse	r8, r1
    3e3e:	06 c0       	rjmp	.+12     	; 0x3e4c <spi_create+0xc8>
    3e40:	d3 01       	movw	r26, r6
    3e42:	17 96       	adiw	r26, 0x07	; 7
    3e44:	1c 92       	st	X, r1
    3e46:	1e 92       	st	-X, r1
    3e48:	16 97       	sbiw	r26, 0x06	; 6
    3e4a:	12 c0       	rjmp	.+36     	; 0x3e70 <spi_create+0xec>
    3e4c:	68 2d       	mov	r22, r8
    3e4e:	70 e0       	ldi	r23, 0x00	; 0
    3e50:	84 e0       	ldi	r24, 0x04	; 4
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	60 d5       	rcall	.+2752   	; 0x4916 <calloc>
    3e56:	5c 01       	movw	r10, r24
    3e58:	61 e0       	ldi	r22, 0x01	; 1
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	86 e0       	ldi	r24, 0x06	; 6
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	5a d5       	rcall	.+2740   	; 0x4916 <calloc>
    3e62:	6c 01       	movw	r12, r24
    3e64:	48 2d       	mov	r20, r8
    3e66:	b5 01       	movw	r22, r10
    3e68:	0d d3       	rcall	.+1562   	; 0x4484 <fifo_init>
    3e6a:	f3 01       	movw	r30, r6
    3e6c:	d7 82       	std	Z+7, r13	; 0x07
    3e6e:	c6 82       	std	Z+6, r12	; 0x06
    3e70:	8c 89       	ldd	r24, Y+20	; 0x14
    3e72:	9d 89       	ldd	r25, Y+21	; 0x15
    3e74:	d3 01       	movw	r26, r6
    3e76:	1b 96       	adiw	r26, 0x0b	; 11
    3e78:	9c 93       	st	X, r25
    3e7a:	8e 93       	st	-X, r24
    3e7c:	1a 97       	sbiw	r26, 0x0a	; 10
    3e7e:	01 15       	cp	r16, r1
    3e80:	11 05       	cpc	r17, r1
    3e82:	59 f0       	breq	.+22     	; 0x3e9a <spi_create+0x116>
    3e84:	f8 01       	movw	r30, r16
    3e86:	22 91       	ld	r18, -Z
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <spi_create+0x10e>
    3e8e:	88 0f       	add	r24, r24
    3e90:	99 1f       	adc	r25, r25
    3e92:	ea 94       	dec	r14
    3e94:	e2 f7       	brpl	.-8      	; 0x3e8e <spi_create+0x10a>
    3e96:	82 2b       	or	r24, r18
    3e98:	80 83       	st	Z, r24
    3e9a:	2f b7       	in	r18, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	40 91 56 0e 	lds	r20, 0x0E56	; 0x800e56 <_this>
    3ea2:	50 91 57 0e 	lds	r21, 0x0E57	; 0x800e57 <_this+0x1>
    3ea6:	70 92 57 0e 	sts	0x0E57, r7	; 0x800e57 <_this+0x1>
    3eaa:	60 92 56 0e 	sts	0x0E56, r6	; 0x800e56 <_this>
    3eae:	d3 01       	movw	r26, r6
    3eb0:	ed 91       	ld	r30, X+
    3eb2:	fc 91       	ld	r31, X
    3eb4:	11 97       	sbiw	r26, 0x01	; 1
    3eb6:	30 97       	sbiw	r30, 0x00	; 0
    3eb8:	01 f1       	breq	.+64     	; 0x3efa <spi_create+0x176>
    3eba:	13 96       	adiw	r26, 0x03	; 3
    3ebc:	8c 91       	ld	r24, X
    3ebe:	13 97       	sbiw	r26, 0x03	; 3
    3ec0:	81 30       	cpi	r24, 0x01	; 1
    3ec2:	71 f4       	brne	.+28     	; 0x3ee0 <spi_create+0x15c>
    3ec4:	30 81       	ld	r19, Z
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	12 96       	adiw	r26, 0x02	; 2
    3ecc:	0c 90       	ld	r0, X
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <spi_create+0x150>
    3ed0:	88 0f       	add	r24, r24
    3ed2:	99 1f       	adc	r25, r25
    3ed4:	0a 94       	dec	r0
    3ed6:	e2 f7       	brpl	.-8      	; 0x3ed0 <spi_create+0x14c>
    3ed8:	80 95       	com	r24
    3eda:	83 23       	and	r24, r19
    3edc:	80 83       	st	Z, r24
    3ede:	0d c0       	rjmp	.+26     	; 0x3efa <spi_create+0x176>
    3ee0:	30 81       	ld	r19, Z
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	d3 01       	movw	r26, r6
    3ee8:	12 96       	adiw	r26, 0x02	; 2
    3eea:	0c 90       	ld	r0, X
    3eec:	02 c0       	rjmp	.+4      	; 0x3ef2 <spi_create+0x16e>
    3eee:	88 0f       	add	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	0a 94       	dec	r0
    3ef4:	e2 f7       	brpl	.-8      	; 0x3eee <spi_create+0x16a>
    3ef6:	83 2b       	or	r24, r19
    3ef8:	80 83       	st	Z, r24
    3efa:	50 93 57 0e 	sts	0x0E57, r21	; 0x800e57 <_this+0x1>
    3efe:	40 93 56 0e 	sts	0x0E56, r20	; 0x800e56 <_this>
    3f02:	2f bf       	out	0x3f, r18	; 63
    3f04:	c3 01       	movw	r24, r6
    3f06:	df 91       	pop	r29
    3f08:	cf 91       	pop	r28
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	ff 90       	pop	r15
    3f10:	ef 90       	pop	r14
    3f12:	df 90       	pop	r13
    3f14:	cf 90       	pop	r12
    3f16:	bf 90       	pop	r11
    3f18:	af 90       	pop	r10
    3f1a:	9f 90       	pop	r9
    3f1c:	8f 90       	pop	r8
    3f1e:	7f 90       	pop	r7
    3f20:	6f 90       	pop	r6
    3f22:	5f 90       	pop	r5
    3f24:	4f 90       	pop	r4
    3f26:	08 95       	ret

00003f28 <spi_sendByte>:
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <spi_sendByte+0xc>
    3f32:	6a c0       	rjmp	.+212    	; 0x4008 <spi_sendByte+0xe0>
    3f34:	16 2f       	mov	r17, r22
    3f36:	ec 01       	movw	r28, r24
    3f38:	80 91 56 0e 	lds	r24, 0x0E56	; 0x800e56 <_this>
    3f3c:	90 91 57 0e 	lds	r25, 0x0E57	; 0x800e57 <_this+0x1>
    3f40:	c8 17       	cp	r28, r24
    3f42:	d9 07       	cpc	r29, r25
    3f44:	11 f0       	breq	.+4      	; 0x3f4a <spi_sendByte+0x22>
    3f46:	ce 01       	movw	r24, r28
    3f48:	e4 de       	rcall	.-568    	; 0x3d12 <_select_instance>
    3f4a:	8f b7       	in	r24, 0x3f	; 63
    3f4c:	2f b7       	in	r18, 0x3f	; 63
    3f4e:	f8 94       	cli
    3f50:	80 91 58 0e 	lds	r24, 0x0E58	; 0x800e58 <_spi_active>
    3f54:	81 11       	cpse	r24, r1
    3f56:	31 c0       	rjmp	.+98     	; 0x3fba <spi_sendByte+0x92>
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	80 93 58 0e 	sts	0x0E58, r24	; 0x800e58 <_spi_active>
    3f5e:	a0 91 56 0e 	lds	r26, 0x0E56	; 0x800e56 <_this>
    3f62:	b0 91 57 0e 	lds	r27, 0x0E57	; 0x800e57 <_this+0x1>
    3f66:	ed 91       	ld	r30, X+
    3f68:	fc 91       	ld	r31, X
    3f6a:	11 97       	sbiw	r26, 0x01	; 1
    3f6c:	30 97       	sbiw	r30, 0x00	; 0
    3f6e:	f9 f0       	breq	.+62     	; 0x3fae <spi_sendByte+0x86>
    3f70:	13 96       	adiw	r26, 0x03	; 3
    3f72:	8c 91       	ld	r24, X
    3f74:	13 97       	sbiw	r26, 0x03	; 3
    3f76:	81 30       	cpi	r24, 0x01	; 1
    3f78:	69 f4       	brne	.+26     	; 0x3f94 <spi_sendByte+0x6c>
    3f7a:	30 81       	ld	r19, Z
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	12 96       	adiw	r26, 0x02	; 2
    3f82:	0c 90       	ld	r0, X
    3f84:	02 c0       	rjmp	.+4      	; 0x3f8a <spi_sendByte+0x62>
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	0a 94       	dec	r0
    3f8c:	e2 f7       	brpl	.-8      	; 0x3f86 <spi_sendByte+0x5e>
    3f8e:	83 2b       	or	r24, r19
    3f90:	80 83       	st	Z, r24
    3f92:	0d c0       	rjmp	.+26     	; 0x3fae <spi_sendByte+0x86>
    3f94:	30 81       	ld	r19, Z
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	12 96       	adiw	r26, 0x02	; 2
    3f9c:	0c 90       	ld	r0, X
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <spi_sendByte+0x7c>
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	0a 94       	dec	r0
    3fa6:	e2 f7       	brpl	.-8      	; 0x3fa0 <spi_sendByte+0x78>
    3fa8:	80 95       	com	r24
    3faa:	83 23       	and	r24, r19
    3fac:	80 83       	st	Z, r24
    3fae:	8c b5       	in	r24, 0x2c	; 44
    3fb0:	80 68       	ori	r24, 0x80	; 128
    3fb2:	8c bd       	out	0x2c, r24	; 44
    3fb4:	1e bd       	out	0x2e, r17	; 46
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	25 c0       	rjmp	.+74     	; 0x4004 <spi_sendByte+0xdc>
    3fba:	ee 81       	ldd	r30, Y+6	; 0x06
    3fbc:	ff 81       	ldd	r31, Y+7	; 0x07
    3fbe:	30 97       	sbiw	r30, 0x00	; 0
    3fc0:	e1 f0       	breq	.+56     	; 0x3ffa <spi_sendByte+0xd2>
    3fc2:	34 81       	ldd	r19, Z+4	; 0x04
    3fc4:	83 81       	ldd	r24, Z+3	; 0x03
    3fc6:	42 81       	ldd	r20, Z+2	; 0x02
    3fc8:	95 81       	ldd	r25, Z+5	; 0x05
    3fca:	84 1b       	sub	r24, r20
    3fcc:	89 23       	and	r24, r25
    3fce:	38 17       	cp	r19, r24
    3fd0:	b1 f0       	breq	.+44     	; 0x3ffe <spi_sendByte+0xd6>
    3fd2:	83 81       	ldd	r24, Z+3	; 0x03
    3fd4:	42 81       	ldd	r20, Z+2	; 0x02
    3fd6:	84 1b       	sub	r24, r20
    3fd8:	89 23       	and	r24, r25
    3fda:	38 17       	cp	r19, r24
    3fdc:	91 f0       	breq	.+36     	; 0x4002 <spi_sendByte+0xda>
    3fde:	83 81       	ldd	r24, Z+3	; 0x03
    3fe0:	96 95       	lsr	r25
    3fe2:	98 23       	and	r25, r24
    3fe4:	a0 81       	ld	r26, Z
    3fe6:	b1 81       	ldd	r27, Z+1	; 0x01
    3fe8:	a9 0f       	add	r26, r25
    3fea:	b1 1d       	adc	r27, r1
    3fec:	1c 93       	st	X, r17
    3fee:	8f 5f       	subi	r24, 0xFF	; 255
    3ff0:	95 81       	ldd	r25, Z+5	; 0x05
    3ff2:	89 23       	and	r24, r25
    3ff4:	83 83       	std	Z+3, r24	; 0x03
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	05 c0       	rjmp	.+10     	; 0x4004 <spi_sendByte+0xdc>
    3ffa:	82 e0       	ldi	r24, 0x02	; 2
    3ffc:	03 c0       	rjmp	.+6      	; 0x4004 <spi_sendByte+0xdc>
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	01 c0       	rjmp	.+2      	; 0x4004 <spi_sendByte+0xdc>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	2f bf       	out	0x3f, r18	; 63
    4006:	01 c0       	rjmp	.+2      	; 0x400a <spi_sendByte+0xe2>
    4008:	83 e0       	ldi	r24, 0x03	; 3
    400a:	df 91       	pop	r29
    400c:	cf 91       	pop	r28
    400e:	1f 91       	pop	r17
    4010:	08 95       	ret

00004012 <__vector_24>:
    4012:	1f 92       	push	r1
    4014:	0f 92       	push	r0
    4016:	0f b6       	in	r0, 0x3f	; 63
    4018:	0f 92       	push	r0
    401a:	11 24       	eor	r1, r1
    401c:	0b b6       	in	r0, 0x3b	; 59
    401e:	0f 92       	push	r0
    4020:	2f 93       	push	r18
    4022:	3f 93       	push	r19
    4024:	4f 93       	push	r20
    4026:	5f 93       	push	r21
    4028:	6f 93       	push	r22
    402a:	7f 93       	push	r23
    402c:	8f 93       	push	r24
    402e:	9f 93       	push	r25
    4030:	af 93       	push	r26
    4032:	bf 93       	push	r27
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	ef 93       	push	r30
    403a:	ff 93       	push	r31
    403c:	6e b5       	in	r22, 0x2e	; 46
    403e:	a0 91 56 0e 	lds	r26, 0x0E56	; 0x800e56 <_this>
    4042:	b0 91 57 0e 	lds	r27, 0x0E57	; 0x800e57 <_this+0x1>
    4046:	18 96       	adiw	r26, 0x08	; 8
    4048:	ed 91       	ld	r30, X+
    404a:	fc 91       	ld	r31, X
    404c:	19 97       	sbiw	r26, 0x09	; 9
    404e:	30 97       	sbiw	r30, 0x00	; 0
    4050:	a1 f0       	breq	.+40     	; 0x407a <__vector_24+0x68>
    4052:	83 81       	ldd	r24, Z+3	; 0x03
    4054:	22 81       	ldd	r18, Z+2	; 0x02
    4056:	95 81       	ldd	r25, Z+5	; 0x05
    4058:	82 1b       	sub	r24, r18
    405a:	89 23       	and	r24, r25
    405c:	24 81       	ldd	r18, Z+4	; 0x04
    405e:	82 17       	cp	r24, r18
    4060:	61 f0       	breq	.+24     	; 0x407a <__vector_24+0x68>
    4062:	83 81       	ldd	r24, Z+3	; 0x03
    4064:	96 95       	lsr	r25
    4066:	98 23       	and	r25, r24
    4068:	c0 81       	ld	r28, Z
    406a:	d1 81       	ldd	r29, Z+1	; 0x01
    406c:	c9 0f       	add	r28, r25
    406e:	d1 1d       	adc	r29, r1
    4070:	68 83       	st	Y, r22
    4072:	8f 5f       	subi	r24, 0xFF	; 255
    4074:	95 81       	ldd	r25, Z+5	; 0x05
    4076:	89 23       	and	r24, r25
    4078:	83 83       	std	Z+3, r24	; 0x03
    407a:	16 96       	adiw	r26, 0x06	; 6
    407c:	ed 91       	ld	r30, X+
    407e:	fc 91       	ld	r31, X
    4080:	17 97       	sbiw	r26, 0x07	; 7
    4082:	30 97       	sbiw	r30, 0x00	; 0
    4084:	99 f0       	breq	.+38     	; 0x40ac <__vector_24+0x9a>
    4086:	93 81       	ldd	r25, Z+3	; 0x03
    4088:	82 81       	ldd	r24, Z+2	; 0x02
    408a:	98 17       	cp	r25, r24
    408c:	79 f0       	breq	.+30     	; 0x40ac <__vector_24+0x9a>
    408e:	92 81       	ldd	r25, Z+2	; 0x02
    4090:	85 81       	ldd	r24, Z+5	; 0x05
    4092:	28 2f       	mov	r18, r24
    4094:	26 95       	lsr	r18
    4096:	29 23       	and	r18, r25
    4098:	a0 81       	ld	r26, Z
    409a:	b1 81       	ldd	r27, Z+1	; 0x01
    409c:	a2 0f       	add	r26, r18
    409e:	b1 1d       	adc	r27, r1
    40a0:	2c 91       	ld	r18, X
    40a2:	9f 5f       	subi	r25, 0xFF	; 255
    40a4:	89 23       	and	r24, r25
    40a6:	82 83       	std	Z+2, r24	; 0x02
    40a8:	2e bd       	out	0x2e, r18	; 46
    40aa:	2d c0       	rjmp	.+90     	; 0x4106 <__vector_24+0xf4>
    40ac:	8c b5       	in	r24, 0x2c	; 44
    40ae:	8f 77       	andi	r24, 0x7F	; 127
    40b0:	8c bd       	out	0x2c, r24	; 44
    40b2:	10 92 58 0e 	sts	0x0E58, r1	; 0x800e58 <_spi_active>
    40b6:	a0 91 56 0e 	lds	r26, 0x0E56	; 0x800e56 <_this>
    40ba:	b0 91 57 0e 	lds	r27, 0x0E57	; 0x800e57 <_this+0x1>
    40be:	ed 91       	ld	r30, X+
    40c0:	fc 91       	ld	r31, X
    40c2:	11 97       	sbiw	r26, 0x01	; 1
    40c4:	30 97       	sbiw	r30, 0x00	; 0
    40c6:	f9 f0       	breq	.+62     	; 0x4106 <__vector_24+0xf4>
    40c8:	13 96       	adiw	r26, 0x03	; 3
    40ca:	8c 91       	ld	r24, X
    40cc:	13 97       	sbiw	r26, 0x03	; 3
    40ce:	81 30       	cpi	r24, 0x01	; 1
    40d0:	71 f4       	brne	.+28     	; 0x40ee <__vector_24+0xdc>
    40d2:	20 81       	ld	r18, Z
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	12 96       	adiw	r26, 0x02	; 2
    40da:	0c 90       	ld	r0, X
    40dc:	02 c0       	rjmp	.+4      	; 0x40e2 <__vector_24+0xd0>
    40de:	88 0f       	add	r24, r24
    40e0:	99 1f       	adc	r25, r25
    40e2:	0a 94       	dec	r0
    40e4:	e2 f7       	brpl	.-8      	; 0x40de <__vector_24+0xcc>
    40e6:	80 95       	com	r24
    40e8:	82 23       	and	r24, r18
    40ea:	80 83       	st	Z, r24
    40ec:	0c c0       	rjmp	.+24     	; 0x4106 <__vector_24+0xf4>
    40ee:	20 81       	ld	r18, Z
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	12 96       	adiw	r26, 0x02	; 2
    40f6:	0c 90       	ld	r0, X
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <__vector_24+0xec>
    40fa:	88 0f       	add	r24, r24
    40fc:	99 1f       	adc	r25, r25
    40fe:	0a 94       	dec	r0
    4100:	e2 f7       	brpl	.-8      	; 0x40fa <__vector_24+0xe8>
    4102:	82 2b       	or	r24, r18
    4104:	80 83       	st	Z, r24
    4106:	80 91 56 0e 	lds	r24, 0x0E56	; 0x800e56 <_this>
    410a:	90 91 57 0e 	lds	r25, 0x0E57	; 0x800e57 <_this+0x1>
    410e:	dc 01       	movw	r26, r24
    4110:	1a 96       	adiw	r26, 0x0a	; 10
    4112:	ed 91       	ld	r30, X+
    4114:	fc 91       	ld	r31, X
    4116:	1b 97       	sbiw	r26, 0x0b	; 11
    4118:	30 97       	sbiw	r30, 0x00	; 0
    411a:	09 f0       	breq	.+2      	; 0x411e <__vector_24+0x10c>
    411c:	19 95       	eicall
    411e:	ff 91       	pop	r31
    4120:	ef 91       	pop	r30
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	bf 91       	pop	r27
    4128:	af 91       	pop	r26
    412a:	9f 91       	pop	r25
    412c:	8f 91       	pop	r24
    412e:	7f 91       	pop	r23
    4130:	6f 91       	pop	r22
    4132:	5f 91       	pop	r21
    4134:	4f 91       	pop	r20
    4136:	3f 91       	pop	r19
    4138:	2f 91       	pop	r18
    413a:	0f 90       	pop	r0
    413c:	0b be       	out	0x3b, r0	; 59
    413e:	0f 90       	pop	r0
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	0f 90       	pop	r0
    4144:	1f 90       	pop	r1
    4146:	18 95       	reti

00004148 <_initTwiInterface>:
    4148:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <_twiIsInitiated>
    414c:	81 11       	cpse	r24, r1
    414e:	0c c0       	rjmp	.+24     	; 0x4168 <_initTwiInterface+0x20>
    4150:	8c e0       	ldi	r24, 0x0C	; 12
    4152:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    415c:	84 e0       	ldi	r24, 0x04	; 4
    415e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	80 93 67 0e 	sts	0x0E67, r24	; 0x800e67 <_twiIsInitiated>
    4168:	08 95       	ret

0000416a <twiCreate>:
    416a:	af 92       	push	r10
    416c:	bf 92       	push	r11
    416e:	cf 92       	push	r12
    4170:	df 92       	push	r13
    4172:	ef 92       	push	r14
    4174:	ff 92       	push	r15
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	a8 2e       	mov	r10, r24
    4180:	b6 2e       	mov	r11, r22
    4182:	69 01       	movw	r12, r18
    4184:	7a 01       	movw	r14, r20
    4186:	84 e0       	ldi	r24, 0x04	; 4
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	df d3       	rcall	.+1982   	; 0x494a <malloc>
    418c:	ec 01       	movw	r28, r24
    418e:	89 2b       	or	r24, r25
    4190:	61 f1       	breq	.+88     	; 0x41ea <twiCreate+0x80>
    4192:	a8 82       	st	Y, r10
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	b8 12       	cpse	r11, r24
    4198:	12 c0       	rjmp	.+36     	; 0x41be <twiCreate+0x54>
    419a:	c7 01       	movw	r24, r14
    419c:	b6 01       	movw	r22, r12
    419e:	20 ea       	ldi	r18, 0xA0	; 160
    41a0:	36 e8       	ldi	r19, 0x86	; 134
    41a2:	41 e0       	ldi	r20, 0x01	; 1
    41a4:	50 e0       	ldi	r21, 0x00	; 0
    41a6:	60 d3       	rcall	.+1728   	; 0x4868 <__udivmodsi4>
    41a8:	da 01       	movw	r26, r20
    41aa:	c9 01       	movw	r24, r18
    41ac:	40 97       	sbiw	r24, 0x10	; 16
    41ae:	a1 09       	sbc	r26, r1
    41b0:	b1 09       	sbc	r27, r1
    41b2:	b6 95       	lsr	r27
    41b4:	a7 95       	ror	r26
    41b6:	97 95       	ror	r25
    41b8:	87 95       	ror	r24
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	11 c0       	rjmp	.+34     	; 0x41e0 <twiCreate+0x76>
    41be:	c7 01       	movw	r24, r14
    41c0:	b6 01       	movw	r22, r12
    41c2:	20 e8       	ldi	r18, 0x80	; 128
    41c4:	3a e1       	ldi	r19, 0x1A	; 26
    41c6:	46 e0       	ldi	r20, 0x06	; 6
    41c8:	50 e0       	ldi	r21, 0x00	; 0
    41ca:	4e d3       	rcall	.+1692   	; 0x4868 <__udivmodsi4>
    41cc:	da 01       	movw	r26, r20
    41ce:	c9 01       	movw	r24, r18
    41d0:	40 97       	sbiw	r24, 0x10	; 16
    41d2:	a1 09       	sbc	r26, r1
    41d4:	b1 09       	sbc	r27, r1
    41d6:	b6 95       	lsr	r27
    41d8:	a7 95       	ror	r26
    41da:	97 95       	ror	r25
    41dc:	87 95       	ror	r24
    41de:	89 83       	std	Y+1, r24	; 0x01
    41e0:	1b 83       	std	Y+3, r17	; 0x03
    41e2:	0a 83       	std	Y+2, r16	; 0x02
    41e4:	8c 2f       	mov	r24, r28
    41e6:	9d 2f       	mov	r25, r29
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <twiCreate+0x84>
    41ea:	80 e0       	ldi	r24, 0x00	; 0
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	ff 90       	pop	r15
    41f8:	ef 90       	pop	r14
    41fa:	df 90       	pop	r13
    41fc:	cf 90       	pop	r12
    41fe:	bf 90       	pop	r11
    4200:	af 90       	pop	r10
    4202:	08 95       	ret

00004204 <twiIsBusy>:
    4204:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4208:	81 70       	andi	r24, 0x01	; 1
    420a:	08 95       	ret

0000420c <twiTransmit>:
    420c:	ff 92       	push	r15
    420e:	0f 93       	push	r16
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	d1 f1       	breq	.+116    	; 0x428e <twiTransmit+0x82>
    421a:	4a 30       	cpi	r20, 0x0A	; 10
    421c:	d0 f5       	brcc	.+116    	; 0x4292 <twiTransmit+0x86>
    421e:	f4 2e       	mov	r15, r20
    4220:	8b 01       	movw	r16, r22
    4222:	ec 01       	movw	r28, r24
    4224:	ef df       	rcall	.-34     	; 0x4204 <twiIsBusy>
    4226:	81 11       	cpse	r24, r1
    4228:	36 c0       	rjmp	.+108    	; 0x4296 <twiTransmit+0x8a>
    422a:	80 91 5a 0e 	lds	r24, 0x0E5A	; 0x800e5a <_twiCurrentHandler>
    422e:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <_twiCurrentHandler+0x1>
    4232:	c8 17       	cp	r28, r24
    4234:	d9 07       	cpc	r29, r25
    4236:	41 f0       	breq	.+16     	; 0x4248 <twiTransmit+0x3c>
    4238:	87 df       	rcall	.-242    	; 0x4148 <_initTwiInterface>
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4240:	d0 93 5b 0e 	sts	0x0E5B, r29	; 0x800e5b <_twiCurrentHandler+0x1>
    4244:	c0 93 5a 0e 	sts	0x0E5A, r28	; 0x800e5a <_twiCurrentHandler>
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	8f 0d       	add	r24, r15
    424c:	80 93 5c 0e 	sts	0x0E5C, r24	; 0x800e5c <_twiMessageLen>
    4250:	88 81       	ld	r24, Y
    4252:	88 0f       	add	r24, r24
    4254:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <_twiMessageBuffer>
    4258:	ff 20       	and	r15, r15
    425a:	89 f0       	breq	.+34     	; 0x427e <twiTransmit+0x72>
    425c:	f8 01       	movw	r30, r16
    425e:	ae e5       	ldi	r26, 0x5E	; 94
    4260:	be e0       	ldi	r27, 0x0E	; 14
    4262:	4f ef       	ldi	r20, 0xFF	; 255
    4264:	4f 0d       	add	r20, r15
    4266:	64 2f       	mov	r22, r20
    4268:	70 e0       	ldi	r23, 0x00	; 0
    426a:	cb 01       	movw	r24, r22
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	b8 01       	movw	r22, r16
    4270:	68 0f       	add	r22, r24
    4272:	79 1f       	adc	r23, r25
    4274:	81 91       	ld	r24, Z+
    4276:	8d 93       	st	X+, r24
    4278:	e6 17       	cp	r30, r22
    427a:	f7 07       	cpc	r31, r23
    427c:	d9 f7       	brne	.-10     	; 0x4274 <twiTransmit+0x68>
    427e:	88 ef       	ldi	r24, 0xF8	; 248
    4280:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4284:	85 ea       	ldi	r24, 0xA5	; 165
    4286:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    428a:	84 e0       	ldi	r24, 0x04	; 4
    428c:	05 c0       	rjmp	.+10     	; 0x4298 <twiTransmit+0x8c>
    428e:	86 e0       	ldi	r24, 0x06	; 6
    4290:	03 c0       	rjmp	.+6      	; 0x4298 <twiTransmit+0x8c>
    4292:	87 e0       	ldi	r24, 0x07	; 7
    4294:	01 c0       	rjmp	.+2      	; 0x4298 <twiTransmit+0x8c>
    4296:	82 e0       	ldi	r24, 0x02	; 2
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	08 95       	ret

000042a4 <twiReceive>:
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	29 f1       	breq	.+74     	; 0x42f8 <twiReceive+0x54>
    42ae:	6b 30       	cpi	r22, 0x0B	; 11
    42b0:	28 f5       	brcc	.+74     	; 0x42fc <twiReceive+0x58>
    42b2:	16 2f       	mov	r17, r22
    42b4:	ec 01       	movw	r28, r24
    42b6:	a6 df       	rcall	.-180    	; 0x4204 <twiIsBusy>
    42b8:	81 11       	cpse	r24, r1
    42ba:	22 c0       	rjmp	.+68     	; 0x4300 <twiReceive+0x5c>
    42bc:	80 91 5a 0e 	lds	r24, 0x0E5A	; 0x800e5a <_twiCurrentHandler>
    42c0:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <_twiCurrentHandler+0x1>
    42c4:	c8 17       	cp	r28, r24
    42c6:	d9 07       	cpc	r29, r25
    42c8:	41 f0       	breq	.+16     	; 0x42da <twiReceive+0x36>
    42ca:	3e df       	rcall	.-388    	; 0x4148 <_initTwiInterface>
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    42d2:	d0 93 5b 0e 	sts	0x0E5B, r29	; 0x800e5b <_twiCurrentHandler+0x1>
    42d6:	c0 93 5a 0e 	sts	0x0E5A, r28	; 0x800e5a <_twiCurrentHandler>
    42da:	10 93 5c 0e 	sts	0x0E5C, r17	; 0x800e5c <_twiMessageLen>
    42de:	88 81       	ld	r24, Y
    42e0:	88 0f       	add	r24, r24
    42e2:	81 60       	ori	r24, 0x01	; 1
    42e4:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <_twiMessageBuffer>
    42e8:	88 ef       	ldi	r24, 0xF8	; 248
    42ea:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    42ee:	85 ea       	ldi	r24, 0xA5	; 165
    42f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42f4:	85 e0       	ldi	r24, 0x05	; 5
    42f6:	05 c0       	rjmp	.+10     	; 0x4302 <twiReceive+0x5e>
    42f8:	86 e0       	ldi	r24, 0x06	; 6
    42fa:	03 c0       	rjmp	.+6      	; 0x4302 <twiReceive+0x5e>
    42fc:	87 e0       	ldi	r24, 0x07	; 7
    42fe:	01 c0       	rjmp	.+2      	; 0x4302 <twiReceive+0x5e>
    4300:	82 e0       	ldi	r24, 0x02	; 2
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	1f 91       	pop	r17
    4308:	08 95       	ret

0000430a <__vector_39>:
    430a:	1f 92       	push	r1
    430c:	0f 92       	push	r0
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	0f 92       	push	r0
    4312:	11 24       	eor	r1, r1
    4314:	0b b6       	in	r0, 0x3b	; 59
    4316:	0f 92       	push	r0
    4318:	2f 93       	push	r18
    431a:	3f 93       	push	r19
    431c:	4f 93       	push	r20
    431e:	5f 93       	push	r21
    4320:	6f 93       	push	r22
    4322:	7f 93       	push	r23
    4324:	8f 93       	push	r24
    4326:	9f 93       	push	r25
    4328:	af 93       	push	r26
    432a:	bf 93       	push	r27
    432c:	ef 93       	push	r30
    432e:	ff 93       	push	r31
    4330:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4334:	8e 2f       	mov	r24, r30
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	fc 01       	movw	r30, r24
    433a:	38 97       	sbiw	r30, 0x08	; 8
    433c:	e1 35       	cpi	r30, 0x51	; 81
    433e:	f1 05       	cpc	r31, r1
    4340:	08 f0       	brcs	.+2      	; 0x4344 <__vector_39+0x3a>
    4342:	75 c0       	rjmp	.+234    	; 0x442e <__vector_39+0x124>
    4344:	88 27       	eor	r24, r24
    4346:	e4 58       	subi	r30, 0x84	; 132
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	8f 4f       	sbci	r24, 0xFF	; 255
    434c:	af c2       	rjmp	.+1374   	; 0x48ac <__tablejump2__>
    434e:	10 92 59 0e 	sts	0x0E59, r1	; 0x800e59 <_index.1885>
    4352:	e0 91 59 0e 	lds	r30, 0x0E59	; 0x800e59 <_index.1885>
    4356:	80 91 5c 0e 	lds	r24, 0x0E5C	; 0x800e5c <_twiMessageLen>
    435a:	e8 17       	cp	r30, r24
    435c:	70 f4       	brcc	.+28     	; 0x437a <__vector_39+0x70>
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	8e 0f       	add	r24, r30
    4362:	80 93 59 0e 	sts	0x0E59, r24	; 0x800e59 <_index.1885>
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	e3 5a       	subi	r30, 0xA3	; 163
    436a:	f1 4f       	sbci	r31, 0xF1	; 241
    436c:	80 81       	ld	r24, Z
    436e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4372:	85 e8       	ldi	r24, 0x85	; 133
    4374:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4378:	72 c0       	rjmp	.+228    	; 0x445e <__vector_39+0x154>
    437a:	84 e9       	ldi	r24, 0x94	; 148
    437c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4380:	80 91 5a 0e 	lds	r24, 0x0E5A	; 0x800e5a <_twiCurrentHandler>
    4384:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <_twiCurrentHandler+0x1>
    4388:	dc 01       	movw	r26, r24
    438a:	12 96       	adiw	r26, 0x02	; 2
    438c:	ed 91       	ld	r30, X+
    438e:	fc 91       	ld	r31, X
    4390:	13 97       	sbiw	r26, 0x03	; 3
    4392:	30 97       	sbiw	r30, 0x00	; 0
    4394:	09 f4       	brne	.+2      	; 0x4398 <__vector_39+0x8e>
    4396:	63 c0       	rjmp	.+198    	; 0x445e <__vector_39+0x154>
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	40 e0       	ldi	r20, 0x00	; 0
    439c:	50 e0       	ldi	r21, 0x00	; 0
    439e:	64 e0       	ldi	r22, 0x04	; 4
    43a0:	19 95       	eicall
    43a2:	5d c0       	rjmp	.+186    	; 0x445e <__vector_39+0x154>
    43a4:	e0 91 59 0e 	lds	r30, 0x0E59	; 0x800e59 <_index.1885>
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	8e 0f       	add	r24, r30
    43ac:	80 93 59 0e 	sts	0x0E59, r24	; 0x800e59 <_index.1885>
    43b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    43b4:	f0 e0       	ldi	r31, 0x00	; 0
    43b6:	e3 5a       	subi	r30, 0xA3	; 163
    43b8:	f1 4f       	sbci	r31, 0xF1	; 241
    43ba:	80 83       	st	Z, r24
    43bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    43c0:	80 34       	cpi	r24, 0x40	; 64
    43c2:	11 f4       	brne	.+4      	; 0x43c8 <__vector_39+0xbe>
    43c4:	10 92 59 0e 	sts	0x0E59, r1	; 0x800e59 <_index.1885>
    43c8:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <_index.1885>
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	80 91 5c 0e 	lds	r24, 0x0E5C	; 0x800e5c <_twiMessageLen>
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	28 17       	cp	r18, r24
    43d8:	39 07       	cpc	r19, r25
    43da:	24 f4       	brge	.+8      	; 0x43e4 <__vector_39+0xda>
    43dc:	85 ec       	ldi	r24, 0xC5	; 197
    43de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43e2:	3d c0       	rjmp	.+122    	; 0x445e <__vector_39+0x154>
    43e4:	85 e8       	ldi	r24, 0x85	; 133
    43e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43ea:	39 c0       	rjmp	.+114    	; 0x445e <__vector_39+0x154>
    43ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    43f0:	e0 91 59 0e 	lds	r30, 0x0E59	; 0x800e59 <_index.1885>
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	e3 5a       	subi	r30, 0xA3	; 163
    43f8:	f1 4f       	sbci	r31, 0xF1	; 241
    43fa:	80 83       	st	Z, r24
    43fc:	84 e9       	ldi	r24, 0x94	; 148
    43fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4402:	80 91 5a 0e 	lds	r24, 0x0E5A	; 0x800e5a <_twiCurrentHandler>
    4406:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <_twiCurrentHandler+0x1>
    440a:	dc 01       	movw	r26, r24
    440c:	12 96       	adiw	r26, 0x02	; 2
    440e:	ed 91       	ld	r30, X+
    4410:	fc 91       	ld	r31, X
    4412:	13 97       	sbiw	r26, 0x03	; 3
    4414:	30 97       	sbiw	r30, 0x00	; 0
    4416:	19 f1       	breq	.+70     	; 0x445e <__vector_39+0x154>
    4418:	20 91 5c 0e 	lds	r18, 0x0E5C	; 0x800e5c <_twiMessageLen>
    441c:	4d e5       	ldi	r20, 0x5D	; 93
    441e:	5e e0       	ldi	r21, 0x0E	; 14
    4420:	65 e0       	ldi	r22, 0x05	; 5
    4422:	19 95       	eicall
    4424:	1c c0       	rjmp	.+56     	; 0x445e <__vector_39+0x154>
    4426:	85 ea       	ldi	r24, 0xA5	; 165
    4428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    442c:	18 c0       	rjmp	.+48     	; 0x445e <__vector_39+0x154>
    442e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4432:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4436:	84 e0       	ldi	r24, 0x04	; 4
    4438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    443c:	80 91 5a 0e 	lds	r24, 0x0E5A	; 0x800e5a <_twiCurrentHandler>
    4440:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <_twiCurrentHandler+0x1>
    4444:	dc 01       	movw	r26, r24
    4446:	12 96       	adiw	r26, 0x02	; 2
    4448:	ed 91       	ld	r30, X+
    444a:	fc 91       	ld	r31, X
    444c:	13 97       	sbiw	r26, 0x03	; 3
    444e:	30 97       	sbiw	r30, 0x00	; 0
    4450:	31 f0       	breq	.+12     	; 0x445e <__vector_39+0x154>
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	40 e0       	ldi	r20, 0x00	; 0
    4456:	50 e0       	ldi	r21, 0x00	; 0
    4458:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    445c:	19 95       	eicall
    445e:	ff 91       	pop	r31
    4460:	ef 91       	pop	r30
    4462:	bf 91       	pop	r27
    4464:	af 91       	pop	r26
    4466:	9f 91       	pop	r25
    4468:	8f 91       	pop	r24
    446a:	7f 91       	pop	r23
    446c:	6f 91       	pop	r22
    446e:	5f 91       	pop	r21
    4470:	4f 91       	pop	r20
    4472:	3f 91       	pop	r19
    4474:	2f 91       	pop	r18
    4476:	0f 90       	pop	r0
    4478:	0b be       	out	0x3b, r0	; 59
    447a:	0f 90       	pop	r0
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	0f 90       	pop	r0
    4480:	1f 90       	pop	r1
    4482:	18 95       	reti

00004484 <fifo_init>:
    4484:	fc 01       	movw	r30, r24
    4486:	41 11       	cpse	r20, r1
    4488:	01 c0       	rjmp	.+2      	; 0x448c <fifo_init+0x8>
    448a:	80 d3       	rcall	.+1792   	; 0x4b8c <abort>
    448c:	84 2f       	mov	r24, r20
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	9c 01       	movw	r18, r24
    4492:	21 50       	subi	r18, 0x01	; 1
    4494:	31 09       	sbc	r19, r1
    4496:	82 23       	and	r24, r18
    4498:	93 23       	and	r25, r19
    449a:	89 2b       	or	r24, r25
    449c:	09 f0       	breq	.+2      	; 0x44a0 <fifo_init+0x1c>
    449e:	76 d3       	rcall	.+1772   	; 0x4b8c <abort>
    44a0:	41 38       	cpi	r20, 0x81	; 129
    44a2:	08 f0       	brcs	.+2      	; 0x44a6 <fifo_init+0x22>
    44a4:	73 d3       	rcall	.+1766   	; 0x4b8c <abort>
    44a6:	12 82       	std	Z+2, r1	; 0x02
    44a8:	13 82       	std	Z+3, r1	; 0x03
    44aa:	44 83       	std	Z+4, r20	; 0x04
    44ac:	44 0f       	add	r20, r20
    44ae:	41 50       	subi	r20, 0x01	; 1
    44b0:	45 83       	std	Z+5, r20	; 0x05
    44b2:	71 83       	std	Z+1, r23	; 0x01
    44b4:	60 83       	st	Z, r22
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	08 95       	ret

000044bc <floor>:
    44bc:	3c d0       	rcall	.+120    	; 0x4536 <__fp_trunc>
    44be:	88 f0       	brcs	.+34     	; 0x44e2 <floor+0x26>
    44c0:	9f 37       	cpi	r25, 0x7F	; 127
    44c2:	48 f4       	brcc	.+18     	; 0x44d6 <floor+0x1a>
    44c4:	91 11       	cpse	r25, r1
    44c6:	16 f0       	brts	.+4      	; 0x44cc <floor+0x10>
    44c8:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__fp_szero>
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	80 e8       	ldi	r24, 0x80	; 128
    44d2:	9f eb       	ldi	r25, 0xBF	; 191
    44d4:	08 95       	ret
    44d6:	26 f4       	brtc	.+8      	; 0x44e0 <floor+0x24>
    44d8:	1b 16       	cp	r1, r27
    44da:	61 1d       	adc	r22, r1
    44dc:	71 1d       	adc	r23, r1
    44de:	81 1d       	adc	r24, r1
    44e0:	01 c0       	rjmp	.+2      	; 0x44e4 <__fp_mintl>
    44e2:	1b c0       	rjmp	.+54     	; 0x451a <__fp_mpack>

000044e4 <__fp_mintl>:
    44e4:	88 23       	and	r24, r24
    44e6:	71 f4       	brne	.+28     	; 0x4504 <__fp_mintl+0x20>
    44e8:	77 23       	and	r23, r23
    44ea:	21 f0       	breq	.+8      	; 0x44f4 <__fp_mintl+0x10>
    44ec:	98 50       	subi	r25, 0x08	; 8
    44ee:	87 2b       	or	r24, r23
    44f0:	76 2f       	mov	r23, r22
    44f2:	07 c0       	rjmp	.+14     	; 0x4502 <__fp_mintl+0x1e>
    44f4:	66 23       	and	r22, r22
    44f6:	11 f4       	brne	.+4      	; 0x44fc <__fp_mintl+0x18>
    44f8:	99 27       	eor	r25, r25
    44fa:	0d c0       	rjmp	.+26     	; 0x4516 <__fp_mintl+0x32>
    44fc:	90 51       	subi	r25, 0x10	; 16
    44fe:	86 2b       	or	r24, r22
    4500:	70 e0       	ldi	r23, 0x00	; 0
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	2a f0       	brmi	.+10     	; 0x4510 <__fp_mintl+0x2c>
    4506:	9a 95       	dec	r25
    4508:	66 0f       	add	r22, r22
    450a:	77 1f       	adc	r23, r23
    450c:	88 1f       	adc	r24, r24
    450e:	da f7       	brpl	.-10     	; 0x4506 <__fp_mintl+0x22>
    4510:	88 0f       	add	r24, r24
    4512:	96 95       	lsr	r25
    4514:	87 95       	ror	r24
    4516:	97 f9       	bld	r25, 7
    4518:	08 95       	ret

0000451a <__fp_mpack>:
    451a:	9f 3f       	cpi	r25, 0xFF	; 255
    451c:	31 f0       	breq	.+12     	; 0x452a <__fp_mpack_finite+0xc>

0000451e <__fp_mpack_finite>:
    451e:	91 50       	subi	r25, 0x01	; 1
    4520:	20 f4       	brcc	.+8      	; 0x452a <__fp_mpack_finite+0xc>
    4522:	87 95       	ror	r24
    4524:	77 95       	ror	r23
    4526:	67 95       	ror	r22
    4528:	b7 95       	ror	r27
    452a:	88 0f       	add	r24, r24
    452c:	91 1d       	adc	r25, r1
    452e:	96 95       	lsr	r25
    4530:	87 95       	ror	r24
    4532:	97 f9       	bld	r25, 7
    4534:	08 95       	ret

00004536 <__fp_trunc>:
    4536:	0e 94 77 18 	call	0x30ee	; 0x30ee <__fp_splitA>
    453a:	a0 f0       	brcs	.+40     	; 0x4564 <__fp_trunc+0x2e>
    453c:	be e7       	ldi	r27, 0x7E	; 126
    453e:	b9 17       	cp	r27, r25
    4540:	88 f4       	brcc	.+34     	; 0x4564 <__fp_trunc+0x2e>
    4542:	bb 27       	eor	r27, r27
    4544:	9f 38       	cpi	r25, 0x8F	; 143
    4546:	60 f4       	brcc	.+24     	; 0x4560 <__fp_trunc+0x2a>
    4548:	16 16       	cp	r1, r22
    454a:	b1 1d       	adc	r27, r1
    454c:	67 2f       	mov	r22, r23
    454e:	78 2f       	mov	r23, r24
    4550:	88 27       	eor	r24, r24
    4552:	98 5f       	subi	r25, 0xF8	; 248
    4554:	f7 cf       	rjmp	.-18     	; 0x4544 <__fp_trunc+0xe>
    4556:	86 95       	lsr	r24
    4558:	77 95       	ror	r23
    455a:	67 95       	ror	r22
    455c:	b1 1d       	adc	r27, r1
    455e:	93 95       	inc	r25
    4560:	96 39       	cpi	r25, 0x96	; 150
    4562:	c8 f3       	brcs	.-14     	; 0x4556 <__fp_trunc+0x20>
    4564:	08 95       	ret

00004566 <pow>:
    4566:	fa 01       	movw	r30, r20
    4568:	ee 0f       	add	r30, r30
    456a:	ff 1f       	adc	r31, r31
    456c:	30 96       	adiw	r30, 0x00	; 0
    456e:	21 05       	cpc	r18, r1
    4570:	31 05       	cpc	r19, r1
    4572:	a1 f1       	breq	.+104    	; 0x45dc <pow+0x76>
    4574:	61 15       	cp	r22, r1
    4576:	71 05       	cpc	r23, r1
    4578:	61 f4       	brne	.+24     	; 0x4592 <pow+0x2c>
    457a:	80 38       	cpi	r24, 0x80	; 128
    457c:	bf e3       	ldi	r27, 0x3F	; 63
    457e:	9b 07       	cpc	r25, r27
    4580:	49 f1       	breq	.+82     	; 0x45d4 <pow+0x6e>
    4582:	68 94       	set
    4584:	90 38       	cpi	r25, 0x80	; 128
    4586:	81 05       	cpc	r24, r1
    4588:	61 f0       	breq	.+24     	; 0x45a2 <pow+0x3c>
    458a:	80 38       	cpi	r24, 0x80	; 128
    458c:	bf ef       	ldi	r27, 0xFF	; 255
    458e:	9b 07       	cpc	r25, r27
    4590:	41 f0       	breq	.+16     	; 0x45a2 <pow+0x3c>
    4592:	99 23       	and	r25, r25
    4594:	4a f5       	brpl	.+82     	; 0x45e8 <pow+0x82>
    4596:	ff 3f       	cpi	r31, 0xFF	; 255
    4598:	e1 05       	cpc	r30, r1
    459a:	31 05       	cpc	r19, r1
    459c:	21 05       	cpc	r18, r1
    459e:	19 f1       	breq	.+70     	; 0x45e6 <pow+0x80>
    45a0:	e8 94       	clt
    45a2:	08 94       	sec
    45a4:	e7 95       	ror	r30
    45a6:	d9 01       	movw	r26, r18
    45a8:	aa 23       	and	r26, r26
    45aa:	29 f4       	brne	.+10     	; 0x45b6 <pow+0x50>
    45ac:	ab 2f       	mov	r26, r27
    45ae:	be 2f       	mov	r27, r30
    45b0:	f8 5f       	subi	r31, 0xF8	; 248
    45b2:	d0 f3       	brcs	.-12     	; 0x45a8 <pow+0x42>
    45b4:	10 c0       	rjmp	.+32     	; 0x45d6 <pow+0x70>
    45b6:	ff 5f       	subi	r31, 0xFF	; 255
    45b8:	70 f4       	brcc	.+28     	; 0x45d6 <pow+0x70>
    45ba:	a6 95       	lsr	r26
    45bc:	e0 f7       	brcc	.-8      	; 0x45b6 <pow+0x50>
    45be:	f7 39       	cpi	r31, 0x97	; 151
    45c0:	50 f0       	brcs	.+20     	; 0x45d6 <pow+0x70>
    45c2:	19 f0       	breq	.+6      	; 0x45ca <pow+0x64>
    45c4:	ff 3a       	cpi	r31, 0xAF	; 175
    45c6:	38 f4       	brcc	.+14     	; 0x45d6 <pow+0x70>
    45c8:	9f 77       	andi	r25, 0x7F	; 127
    45ca:	9f 93       	push	r25
    45cc:	0d d0       	rcall	.+26     	; 0x45e8 <pow+0x82>
    45ce:	0f 90       	pop	r0
    45d0:	07 fc       	sbrc	r0, 7
    45d2:	90 58       	subi	r25, 0x80	; 128
    45d4:	08 95       	ret
    45d6:	46 f0       	brts	.+16     	; 0x45e8 <pow+0x82>
    45d8:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__fp_nan>
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	80 e8       	ldi	r24, 0x80	; 128
    45e2:	9f e3       	ldi	r25, 0x3F	; 63
    45e4:	08 95       	ret
    45e6:	4f e7       	ldi	r20, 0x7F	; 127
    45e8:	9f 77       	andi	r25, 0x7F	; 127
    45ea:	5f 93       	push	r21
    45ec:	4f 93       	push	r20
    45ee:	3f 93       	push	r19
    45f0:	2f 93       	push	r18
    45f2:	ac d0       	rcall	.+344    	; 0x474c <log>
    45f4:	2f 91       	pop	r18
    45f6:	3f 91       	pop	r19
    45f8:	4f 91       	pop	r20
    45fa:	5f 91       	pop	r21
    45fc:	0e 94 98 18 	call	0x3130	; 0x3130 <__mulsf3>
    4600:	08 c0       	rjmp	.+16     	; 0x4612 <exp>
    4602:	29 f4       	brne	.+10     	; 0x460e <pow+0xa8>
    4604:	16 f0       	brts	.+4      	; 0x460a <pow+0xa4>
    4606:	0c 94 47 18 	jmp	0x308e	; 0x308e <__fp_inf>
    460a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__fp_zero>
    460e:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__fp_nan>

00004612 <exp>:
    4612:	0e 94 77 18 	call	0x30ee	; 0x30ee <__fp_splitA>
    4616:	a8 f3       	brcs	.-22     	; 0x4602 <pow+0x9c>
    4618:	96 38       	cpi	r25, 0x86	; 134
    461a:	a0 f7       	brcc	.-24     	; 0x4604 <pow+0x9e>
    461c:	07 f8       	bld	r0, 7
    461e:	0f 92       	push	r0
    4620:	e8 94       	clt
    4622:	2b e3       	ldi	r18, 0x3B	; 59
    4624:	3a ea       	ldi	r19, 0xAA	; 170
    4626:	48 eb       	ldi	r20, 0xB8	; 184
    4628:	5f e7       	ldi	r21, 0x7F	; 127
    462a:	0e 94 a6 18 	call	0x314c	; 0x314c <__mulsf3_pse>
    462e:	0f 92       	push	r0
    4630:	0f 92       	push	r0
    4632:	0f 92       	push	r0
    4634:	4d b7       	in	r20, 0x3d	; 61
    4636:	5e b7       	in	r21, 0x3e	; 62
    4638:	0f 92       	push	r0
    463a:	cf d0       	rcall	.+414    	; 0x47da <modf>
    463c:	ea e9       	ldi	r30, 0x9A	; 154
    463e:	f1 e0       	ldi	r31, 0x01	; 1
    4640:	16 d0       	rcall	.+44     	; 0x466e <__fp_powser>
    4642:	4f 91       	pop	r20
    4644:	5f 91       	pop	r21
    4646:	ef 91       	pop	r30
    4648:	ff 91       	pop	r31
    464a:	e5 95       	asr	r30
    464c:	ee 1f       	adc	r30, r30
    464e:	ff 1f       	adc	r31, r31
    4650:	49 f0       	breq	.+18     	; 0x4664 <exp+0x52>
    4652:	fe 57       	subi	r31, 0x7E	; 126
    4654:	e0 68       	ori	r30, 0x80	; 128
    4656:	44 27       	eor	r20, r20
    4658:	ee 0f       	add	r30, r30
    465a:	44 1f       	adc	r20, r20
    465c:	fa 95       	dec	r31
    465e:	e1 f7       	brne	.-8      	; 0x4658 <exp+0x46>
    4660:	41 95       	neg	r20
    4662:	55 0b       	sbc	r21, r21
    4664:	36 d0       	rcall	.+108    	; 0x46d2 <ldexp>
    4666:	0f 90       	pop	r0
    4668:	07 fe       	sbrs	r0, 7
    466a:	28 c0       	rjmp	.+80     	; 0x46bc <inverse>
    466c:	08 95       	ret

0000466e <__fp_powser>:
    466e:	df 93       	push	r29
    4670:	cf 93       	push	r28
    4672:	1f 93       	push	r17
    4674:	0f 93       	push	r16
    4676:	ff 92       	push	r15
    4678:	ef 92       	push	r14
    467a:	df 92       	push	r13
    467c:	7b 01       	movw	r14, r22
    467e:	8c 01       	movw	r16, r24
    4680:	68 94       	set
    4682:	06 c0       	rjmp	.+12     	; 0x4690 <__fp_powser+0x22>
    4684:	da 2e       	mov	r13, r26
    4686:	ef 01       	movw	r28, r30
    4688:	0e 94 a4 18 	call	0x3148	; 0x3148 <__mulsf3x>
    468c:	fe 01       	movw	r30, r28
    468e:	e8 94       	clt
    4690:	a5 91       	lpm	r26, Z+
    4692:	25 91       	lpm	r18, Z+
    4694:	35 91       	lpm	r19, Z+
    4696:	45 91       	lpm	r20, Z+
    4698:	55 91       	lpm	r21, Z+
    469a:	a6 f3       	brts	.-24     	; 0x4684 <__fp_powser+0x16>
    469c:	ef 01       	movw	r28, r30
    469e:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__addsf3x>
    46a2:	fe 01       	movw	r30, r28
    46a4:	97 01       	movw	r18, r14
    46a6:	a8 01       	movw	r20, r16
    46a8:	da 94       	dec	r13
    46aa:	69 f7       	brne	.-38     	; 0x4686 <__fp_powser+0x18>
    46ac:	df 90       	pop	r13
    46ae:	ef 90       	pop	r14
    46b0:	ff 90       	pop	r15
    46b2:	0f 91       	pop	r16
    46b4:	1f 91       	pop	r17
    46b6:	cf 91       	pop	r28
    46b8:	df 91       	pop	r29
    46ba:	08 95       	ret

000046bc <inverse>:
    46bc:	9b 01       	movw	r18, r22
    46be:	ac 01       	movw	r20, r24
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	70 e0       	ldi	r23, 0x00	; 0
    46c4:	80 e8       	ldi	r24, 0x80	; 128
    46c6:	9f e3       	ldi	r25, 0x3F	; 63
    46c8:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__divsf3>
    46cc:	0c 94 47 18 	jmp	0x308e	; 0x308e <__fp_inf>
    46d0:	24 cf       	rjmp	.-440    	; 0x451a <__fp_mpack>

000046d2 <ldexp>:
    46d2:	0e 94 77 18 	call	0x30ee	; 0x30ee <__fp_splitA>
    46d6:	e0 f3       	brcs	.-8      	; 0x46d0 <inverse+0x14>
    46d8:	99 23       	and	r25, r25
    46da:	d1 f3       	breq	.-12     	; 0x46d0 <inverse+0x14>
    46dc:	94 0f       	add	r25, r20
    46de:	51 1d       	adc	r21, r1
    46e0:	ab f3       	brvs	.-22     	; 0x46cc <inverse+0x10>
    46e2:	91 50       	subi	r25, 0x01	; 1
    46e4:	50 40       	sbci	r21, 0x00	; 0
    46e6:	94 f0       	brlt	.+36     	; 0x470c <ldexp+0x3a>
    46e8:	59 f0       	breq	.+22     	; 0x4700 <ldexp+0x2e>
    46ea:	88 23       	and	r24, r24
    46ec:	32 f0       	brmi	.+12     	; 0x46fa <ldexp+0x28>
    46ee:	66 0f       	add	r22, r22
    46f0:	77 1f       	adc	r23, r23
    46f2:	88 1f       	adc	r24, r24
    46f4:	91 50       	subi	r25, 0x01	; 1
    46f6:	50 40       	sbci	r21, 0x00	; 0
    46f8:	c1 f7       	brne	.-16     	; 0x46ea <ldexp+0x18>
    46fa:	9e 3f       	cpi	r25, 0xFE	; 254
    46fc:	51 05       	cpc	r21, r1
    46fe:	34 f7       	brge	.-52     	; 0x46cc <inverse+0x10>
    4700:	88 0f       	add	r24, r24
    4702:	91 1d       	adc	r25, r1
    4704:	96 95       	lsr	r25
    4706:	87 95       	ror	r24
    4708:	97 f9       	bld	r25, 7
    470a:	08 95       	ret
    470c:	5f 3f       	cpi	r21, 0xFF	; 255
    470e:	ac f0       	brlt	.+42     	; 0x473a <ldexp+0x68>
    4710:	98 3e       	cpi	r25, 0xE8	; 232
    4712:	9c f0       	brlt	.+38     	; 0x473a <ldexp+0x68>
    4714:	bb 27       	eor	r27, r27
    4716:	86 95       	lsr	r24
    4718:	77 95       	ror	r23
    471a:	67 95       	ror	r22
    471c:	b7 95       	ror	r27
    471e:	08 f4       	brcc	.+2      	; 0x4722 <ldexp+0x50>
    4720:	b1 60       	ori	r27, 0x01	; 1
    4722:	93 95       	inc	r25
    4724:	c1 f7       	brne	.-16     	; 0x4716 <ldexp+0x44>
    4726:	bb 0f       	add	r27, r27
    4728:	58 f7       	brcc	.-42     	; 0x4700 <ldexp+0x2e>
    472a:	11 f4       	brne	.+4      	; 0x4730 <ldexp+0x5e>
    472c:	60 ff       	sbrs	r22, 0
    472e:	e8 cf       	rjmp	.-48     	; 0x4700 <ldexp+0x2e>
    4730:	6f 5f       	subi	r22, 0xFF	; 255
    4732:	7f 4f       	sbci	r23, 0xFF	; 255
    4734:	8f 4f       	sbci	r24, 0xFF	; 255
    4736:	9f 4f       	sbci	r25, 0xFF	; 255
    4738:	e3 cf       	rjmp	.-58     	; 0x4700 <ldexp+0x2e>
    473a:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__fp_szero>
    473e:	0e f0       	brts	.+2      	; 0x4742 <ldexp+0x70>
    4740:	ec ce       	rjmp	.-552    	; 0x451a <__fp_mpack>
    4742:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__fp_nan>
    4746:	68 94       	set
    4748:	0c 94 47 18 	jmp	0x308e	; 0x308e <__fp_inf>

0000474c <log>:
    474c:	0e 94 77 18 	call	0x30ee	; 0x30ee <__fp_splitA>
    4750:	b0 f3       	brcs	.-20     	; 0x473e <ldexp+0x6c>
    4752:	99 23       	and	r25, r25
    4754:	c1 f3       	breq	.-16     	; 0x4746 <ldexp+0x74>
    4756:	ae f3       	brts	.-22     	; 0x4742 <ldexp+0x70>
    4758:	df 93       	push	r29
    475a:	cf 93       	push	r28
    475c:	1f 93       	push	r17
    475e:	0f 93       	push	r16
    4760:	ff 92       	push	r15
    4762:	c9 2f       	mov	r28, r25
    4764:	dd 27       	eor	r29, r29
    4766:	88 23       	and	r24, r24
    4768:	2a f0       	brmi	.+10     	; 0x4774 <log+0x28>
    476a:	21 97       	sbiw	r28, 0x01	; 1
    476c:	66 0f       	add	r22, r22
    476e:	77 1f       	adc	r23, r23
    4770:	88 1f       	adc	r24, r24
    4772:	da f7       	brpl	.-10     	; 0x476a <log+0x1e>
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e8       	ldi	r20, 0x80	; 128
    477a:	5f eb       	ldi	r21, 0xBF	; 191
    477c:	9f e3       	ldi	r25, 0x3F	; 63
    477e:	88 39       	cpi	r24, 0x98	; 152
    4780:	20 f0       	brcs	.+8      	; 0x478a <log+0x3e>
    4782:	80 3e       	cpi	r24, 0xE0	; 224
    4784:	38 f0       	brcs	.+14     	; 0x4794 <log+0x48>
    4786:	21 96       	adiw	r28, 0x01	; 1
    4788:	8f 77       	andi	r24, 0x7F	; 127
    478a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__addsf3>
    478e:	e2 ec       	ldi	r30, 0xC2	; 194
    4790:	f1 e0       	ldi	r31, 0x01	; 1
    4792:	04 c0       	rjmp	.+8      	; 0x479c <log+0x50>
    4794:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__addsf3>
    4798:	ef ee       	ldi	r30, 0xEF	; 239
    479a:	f1 e0       	ldi	r31, 0x01	; 1
    479c:	68 df       	rcall	.-304    	; 0x466e <__fp_powser>
    479e:	8b 01       	movw	r16, r22
    47a0:	be 01       	movw	r22, r28
    47a2:	ec 01       	movw	r28, r24
    47a4:	fb 2e       	mov	r15, r27
    47a6:	6f 57       	subi	r22, 0x7F	; 127
    47a8:	71 09       	sbc	r23, r1
    47aa:	75 95       	asr	r23
    47ac:	77 1f       	adc	r23, r23
    47ae:	88 0b       	sbc	r24, r24
    47b0:	99 0b       	sbc	r25, r25
    47b2:	0e 94 0c 18 	call	0x3018	; 0x3018 <__floatsisf>
    47b6:	28 e1       	ldi	r18, 0x18	; 24
    47b8:	32 e7       	ldi	r19, 0x72	; 114
    47ba:	41 e3       	ldi	r20, 0x31	; 49
    47bc:	5f e3       	ldi	r21, 0x3F	; 63
    47be:	0e 94 a4 18 	call	0x3148	; 0x3148 <__mulsf3x>
    47c2:	af 2d       	mov	r26, r15
    47c4:	98 01       	movw	r18, r16
    47c6:	ae 01       	movw	r20, r28
    47c8:	ff 90       	pop	r15
    47ca:	0f 91       	pop	r16
    47cc:	1f 91       	pop	r17
    47ce:	cf 91       	pop	r28
    47d0:	df 91       	pop	r29
    47d2:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__addsf3x>
    47d6:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__fp_round>

000047da <modf>:
    47da:	fa 01       	movw	r30, r20
    47dc:	dc 01       	movw	r26, r24
    47de:	aa 0f       	add	r26, r26
    47e0:	bb 1f       	adc	r27, r27
    47e2:	9b 01       	movw	r18, r22
    47e4:	ac 01       	movw	r20, r24
    47e6:	bf 57       	subi	r27, 0x7F	; 127
    47e8:	28 f4       	brcc	.+10     	; 0x47f4 <modf+0x1a>
    47ea:	22 27       	eor	r18, r18
    47ec:	33 27       	eor	r19, r19
    47ee:	44 27       	eor	r20, r20
    47f0:	50 78       	andi	r21, 0x80	; 128
    47f2:	20 c0       	rjmp	.+64     	; 0x4834 <modf+0x5a>
    47f4:	b7 51       	subi	r27, 0x17	; 23
    47f6:	90 f4       	brcc	.+36     	; 0x481c <modf+0x42>
    47f8:	ab 2f       	mov	r26, r27
    47fa:	00 24       	eor	r0, r0
    47fc:	46 95       	lsr	r20
    47fe:	37 95       	ror	r19
    4800:	27 95       	ror	r18
    4802:	01 1c       	adc	r0, r1
    4804:	a3 95       	inc	r26
    4806:	d2 f3       	brmi	.-12     	; 0x47fc <modf+0x22>
    4808:	00 20       	and	r0, r0
    480a:	71 f0       	breq	.+28     	; 0x4828 <modf+0x4e>
    480c:	22 0f       	add	r18, r18
    480e:	33 1f       	adc	r19, r19
    4810:	44 1f       	adc	r20, r20
    4812:	b3 95       	inc	r27
    4814:	da f3       	brmi	.-10     	; 0x480c <modf+0x32>
    4816:	0e d0       	rcall	.+28     	; 0x4834 <modf+0x5a>
    4818:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__subsf3>
    481c:	61 30       	cpi	r22, 0x01	; 1
    481e:	71 05       	cpc	r23, r1
    4820:	a0 e8       	ldi	r26, 0x80	; 128
    4822:	8a 07       	cpc	r24, r26
    4824:	b9 46       	sbci	r27, 0x69	; 105
    4826:	30 f4       	brcc	.+12     	; 0x4834 <modf+0x5a>
    4828:	9b 01       	movw	r18, r22
    482a:	ac 01       	movw	r20, r24
    482c:	66 27       	eor	r22, r22
    482e:	77 27       	eor	r23, r23
    4830:	88 27       	eor	r24, r24
    4832:	90 78       	andi	r25, 0x80	; 128
    4834:	30 96       	adiw	r30, 0x00	; 0
    4836:	21 f0       	breq	.+8      	; 0x4840 <modf+0x66>
    4838:	20 83       	st	Z, r18
    483a:	31 83       	std	Z+1, r19	; 0x01
    483c:	42 83       	std	Z+2, r20	; 0x02
    483e:	53 83       	std	Z+3, r21	; 0x03
    4840:	08 95       	ret

00004842 <__divmodhi4>:
    4842:	97 fb       	bst	r25, 7
    4844:	07 2e       	mov	r0, r23
    4846:	16 f4       	brtc	.+4      	; 0x484c <__divmodhi4+0xa>
    4848:	00 94       	com	r0
    484a:	06 d0       	rcall	.+12     	; 0x4858 <__divmodhi4_neg1>
    484c:	77 fd       	sbrc	r23, 7
    484e:	08 d0       	rcall	.+16     	; 0x4860 <__divmodhi4_neg2>
    4850:	3f d0       	rcall	.+126    	; 0x48d0 <__udivmodhi4>
    4852:	07 fc       	sbrc	r0, 7
    4854:	05 d0       	rcall	.+10     	; 0x4860 <__divmodhi4_neg2>
    4856:	3e f4       	brtc	.+14     	; 0x4866 <__divmodhi4_exit>

00004858 <__divmodhi4_neg1>:
    4858:	90 95       	com	r25
    485a:	81 95       	neg	r24
    485c:	9f 4f       	sbci	r25, 0xFF	; 255
    485e:	08 95       	ret

00004860 <__divmodhi4_neg2>:
    4860:	70 95       	com	r23
    4862:	61 95       	neg	r22
    4864:	7f 4f       	sbci	r23, 0xFF	; 255

00004866 <__divmodhi4_exit>:
    4866:	08 95       	ret

00004868 <__udivmodsi4>:
    4868:	a1 e2       	ldi	r26, 0x21	; 33
    486a:	1a 2e       	mov	r1, r26
    486c:	aa 1b       	sub	r26, r26
    486e:	bb 1b       	sub	r27, r27
    4870:	fd 01       	movw	r30, r26
    4872:	0d c0       	rjmp	.+26     	; 0x488e <__udivmodsi4_ep>

00004874 <__udivmodsi4_loop>:
    4874:	aa 1f       	adc	r26, r26
    4876:	bb 1f       	adc	r27, r27
    4878:	ee 1f       	adc	r30, r30
    487a:	ff 1f       	adc	r31, r31
    487c:	a2 17       	cp	r26, r18
    487e:	b3 07       	cpc	r27, r19
    4880:	e4 07       	cpc	r30, r20
    4882:	f5 07       	cpc	r31, r21
    4884:	20 f0       	brcs	.+8      	; 0x488e <__udivmodsi4_ep>
    4886:	a2 1b       	sub	r26, r18
    4888:	b3 0b       	sbc	r27, r19
    488a:	e4 0b       	sbc	r30, r20
    488c:	f5 0b       	sbc	r31, r21

0000488e <__udivmodsi4_ep>:
    488e:	66 1f       	adc	r22, r22
    4890:	77 1f       	adc	r23, r23
    4892:	88 1f       	adc	r24, r24
    4894:	99 1f       	adc	r25, r25
    4896:	1a 94       	dec	r1
    4898:	69 f7       	brne	.-38     	; 0x4874 <__udivmodsi4_loop>
    489a:	60 95       	com	r22
    489c:	70 95       	com	r23
    489e:	80 95       	com	r24
    48a0:	90 95       	com	r25
    48a2:	9b 01       	movw	r18, r22
    48a4:	ac 01       	movw	r20, r24
    48a6:	bd 01       	movw	r22, r26
    48a8:	cf 01       	movw	r24, r30
    48aa:	08 95       	ret

000048ac <__tablejump2__>:
    48ac:	ee 0f       	add	r30, r30
    48ae:	ff 1f       	adc	r31, r31
    48b0:	88 1f       	adc	r24, r24
    48b2:	8b bf       	out	0x3b, r24	; 59
    48b4:	07 90       	elpm	r0, Z+
    48b6:	f6 91       	elpm	r31, Z
    48b8:	e0 2d       	mov	r30, r0
    48ba:	19 94       	eijmp

000048bc <__muluhisi3>:
    48bc:	1d d0       	rcall	.+58     	; 0x48f8 <__umulhisi3>
    48be:	a5 9f       	mul	r26, r21
    48c0:	90 0d       	add	r25, r0
    48c2:	b4 9f       	mul	r27, r20
    48c4:	90 0d       	add	r25, r0
    48c6:	a4 9f       	mul	r26, r20
    48c8:	80 0d       	add	r24, r0
    48ca:	91 1d       	adc	r25, r1
    48cc:	11 24       	eor	r1, r1
    48ce:	08 95       	ret

000048d0 <__udivmodhi4>:
    48d0:	aa 1b       	sub	r26, r26
    48d2:	bb 1b       	sub	r27, r27
    48d4:	51 e1       	ldi	r21, 0x11	; 17
    48d6:	07 c0       	rjmp	.+14     	; 0x48e6 <__udivmodhi4_ep>

000048d8 <__udivmodhi4_loop>:
    48d8:	aa 1f       	adc	r26, r26
    48da:	bb 1f       	adc	r27, r27
    48dc:	a6 17       	cp	r26, r22
    48de:	b7 07       	cpc	r27, r23
    48e0:	10 f0       	brcs	.+4      	; 0x48e6 <__udivmodhi4_ep>
    48e2:	a6 1b       	sub	r26, r22
    48e4:	b7 0b       	sbc	r27, r23

000048e6 <__udivmodhi4_ep>:
    48e6:	88 1f       	adc	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	5a 95       	dec	r21
    48ec:	a9 f7       	brne	.-22     	; 0x48d8 <__udivmodhi4_loop>
    48ee:	80 95       	com	r24
    48f0:	90 95       	com	r25
    48f2:	bc 01       	movw	r22, r24
    48f4:	cd 01       	movw	r24, r26
    48f6:	08 95       	ret

000048f8 <__umulhisi3>:
    48f8:	a2 9f       	mul	r26, r18
    48fa:	b0 01       	movw	r22, r0
    48fc:	b3 9f       	mul	r27, r19
    48fe:	c0 01       	movw	r24, r0
    4900:	a3 9f       	mul	r26, r19
    4902:	70 0d       	add	r23, r0
    4904:	81 1d       	adc	r24, r1
    4906:	11 24       	eor	r1, r1
    4908:	91 1d       	adc	r25, r1
    490a:	b2 9f       	mul	r27, r18
    490c:	70 0d       	add	r23, r0
    490e:	81 1d       	adc	r24, r1
    4910:	11 24       	eor	r1, r1
    4912:	91 1d       	adc	r25, r1
    4914:	08 95       	ret

00004916 <calloc>:
    4916:	0f 93       	push	r16
    4918:	1f 93       	push	r17
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	86 9f       	mul	r24, r22
    4920:	80 01       	movw	r16, r0
    4922:	87 9f       	mul	r24, r23
    4924:	10 0d       	add	r17, r0
    4926:	96 9f       	mul	r25, r22
    4928:	10 0d       	add	r17, r0
    492a:	11 24       	eor	r1, r1
    492c:	c8 01       	movw	r24, r16
    492e:	0d d0       	rcall	.+26     	; 0x494a <malloc>
    4930:	ec 01       	movw	r28, r24
    4932:	00 97       	sbiw	r24, 0x00	; 0
    4934:	21 f0       	breq	.+8      	; 0x493e <calloc+0x28>
    4936:	a8 01       	movw	r20, r16
    4938:	60 e0       	ldi	r22, 0x00	; 0
    493a:	70 e0       	ldi	r23, 0x00	; 0
    493c:	34 d1       	rcall	.+616    	; 0x4ba6 <memset>
    493e:	ce 01       	movw	r24, r28
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	1f 91       	pop	r17
    4946:	0f 91       	pop	r16
    4948:	08 95       	ret

0000494a <malloc>:
    494a:	0f 93       	push	r16
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	82 30       	cpi	r24, 0x02	; 2
    4954:	91 05       	cpc	r25, r1
    4956:	10 f4       	brcc	.+4      	; 0x495c <malloc+0x12>
    4958:	82 e0       	ldi	r24, 0x02	; 2
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	e0 91 78 0e 	lds	r30, 0x0E78	; 0x800e78 <__flp>
    4960:	f0 91 79 0e 	lds	r31, 0x0E79	; 0x800e79 <__flp+0x1>
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	a0 e0       	ldi	r26, 0x00	; 0
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	30 97       	sbiw	r30, 0x00	; 0
    496e:	19 f1       	breq	.+70     	; 0x49b6 <malloc+0x6c>
    4970:	40 81       	ld	r20, Z
    4972:	51 81       	ldd	r21, Z+1	; 0x01
    4974:	02 81       	ldd	r16, Z+2	; 0x02
    4976:	13 81       	ldd	r17, Z+3	; 0x03
    4978:	48 17       	cp	r20, r24
    497a:	59 07       	cpc	r21, r25
    497c:	c8 f0       	brcs	.+50     	; 0x49b0 <malloc+0x66>
    497e:	84 17       	cp	r24, r20
    4980:	95 07       	cpc	r25, r21
    4982:	69 f4       	brne	.+26     	; 0x499e <malloc+0x54>
    4984:	10 97       	sbiw	r26, 0x00	; 0
    4986:	31 f0       	breq	.+12     	; 0x4994 <malloc+0x4a>
    4988:	12 96       	adiw	r26, 0x02	; 2
    498a:	0c 93       	st	X, r16
    498c:	12 97       	sbiw	r26, 0x02	; 2
    498e:	13 96       	adiw	r26, 0x03	; 3
    4990:	1c 93       	st	X, r17
    4992:	27 c0       	rjmp	.+78     	; 0x49e2 <malloc+0x98>
    4994:	00 93 78 0e 	sts	0x0E78, r16	; 0x800e78 <__flp>
    4998:	10 93 79 0e 	sts	0x0E79, r17	; 0x800e79 <__flp+0x1>
    499c:	22 c0       	rjmp	.+68     	; 0x49e2 <malloc+0x98>
    499e:	21 15       	cp	r18, r1
    49a0:	31 05       	cpc	r19, r1
    49a2:	19 f0       	breq	.+6      	; 0x49aa <malloc+0x60>
    49a4:	42 17       	cp	r20, r18
    49a6:	53 07       	cpc	r21, r19
    49a8:	18 f4       	brcc	.+6      	; 0x49b0 <malloc+0x66>
    49aa:	9a 01       	movw	r18, r20
    49ac:	bd 01       	movw	r22, r26
    49ae:	ef 01       	movw	r28, r30
    49b0:	df 01       	movw	r26, r30
    49b2:	f8 01       	movw	r30, r16
    49b4:	db cf       	rjmp	.-74     	; 0x496c <malloc+0x22>
    49b6:	21 15       	cp	r18, r1
    49b8:	31 05       	cpc	r19, r1
    49ba:	f9 f0       	breq	.+62     	; 0x49fa <malloc+0xb0>
    49bc:	28 1b       	sub	r18, r24
    49be:	39 0b       	sbc	r19, r25
    49c0:	24 30       	cpi	r18, 0x04	; 4
    49c2:	31 05       	cpc	r19, r1
    49c4:	80 f4       	brcc	.+32     	; 0x49e6 <malloc+0x9c>
    49c6:	8a 81       	ldd	r24, Y+2	; 0x02
    49c8:	9b 81       	ldd	r25, Y+3	; 0x03
    49ca:	61 15       	cp	r22, r1
    49cc:	71 05       	cpc	r23, r1
    49ce:	21 f0       	breq	.+8      	; 0x49d8 <malloc+0x8e>
    49d0:	fb 01       	movw	r30, r22
    49d2:	93 83       	std	Z+3, r25	; 0x03
    49d4:	82 83       	std	Z+2, r24	; 0x02
    49d6:	04 c0       	rjmp	.+8      	; 0x49e0 <malloc+0x96>
    49d8:	90 93 79 0e 	sts	0x0E79, r25	; 0x800e79 <__flp+0x1>
    49dc:	80 93 78 0e 	sts	0x0E78, r24	; 0x800e78 <__flp>
    49e0:	fe 01       	movw	r30, r28
    49e2:	32 96       	adiw	r30, 0x02	; 2
    49e4:	44 c0       	rjmp	.+136    	; 0x4a6e <malloc+0x124>
    49e6:	fe 01       	movw	r30, r28
    49e8:	e2 0f       	add	r30, r18
    49ea:	f3 1f       	adc	r31, r19
    49ec:	81 93       	st	Z+, r24
    49ee:	91 93       	st	Z+, r25
    49f0:	22 50       	subi	r18, 0x02	; 2
    49f2:	31 09       	sbc	r19, r1
    49f4:	39 83       	std	Y+1, r19	; 0x01
    49f6:	28 83       	st	Y, r18
    49f8:	3a c0       	rjmp	.+116    	; 0x4a6e <malloc+0x124>
    49fa:	20 91 76 0e 	lds	r18, 0x0E76	; 0x800e76 <__brkval>
    49fe:	30 91 77 0e 	lds	r19, 0x0E77	; 0x800e77 <__brkval+0x1>
    4a02:	23 2b       	or	r18, r19
    4a04:	41 f4       	brne	.+16     	; 0x4a16 <malloc+0xcc>
    4a06:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4a0a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4a0e:	30 93 77 0e 	sts	0x0E77, r19	; 0x800e77 <__brkval+0x1>
    4a12:	20 93 76 0e 	sts	0x0E76, r18	; 0x800e76 <__brkval>
    4a16:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4a1a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4a1e:	21 15       	cp	r18, r1
    4a20:	31 05       	cpc	r19, r1
    4a22:	41 f4       	brne	.+16     	; 0x4a34 <malloc+0xea>
    4a24:	2d b7       	in	r18, 0x3d	; 61
    4a26:	3e b7       	in	r19, 0x3e	; 62
    4a28:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a2c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a30:	24 1b       	sub	r18, r20
    4a32:	35 0b       	sbc	r19, r21
    4a34:	e0 91 76 0e 	lds	r30, 0x0E76	; 0x800e76 <__brkval>
    4a38:	f0 91 77 0e 	lds	r31, 0x0E77	; 0x800e77 <__brkval+0x1>
    4a3c:	e2 17       	cp	r30, r18
    4a3e:	f3 07       	cpc	r31, r19
    4a40:	a0 f4       	brcc	.+40     	; 0x4a6a <malloc+0x120>
    4a42:	2e 1b       	sub	r18, r30
    4a44:	3f 0b       	sbc	r19, r31
    4a46:	28 17       	cp	r18, r24
    4a48:	39 07       	cpc	r19, r25
    4a4a:	78 f0       	brcs	.+30     	; 0x4a6a <malloc+0x120>
    4a4c:	ac 01       	movw	r20, r24
    4a4e:	4e 5f       	subi	r20, 0xFE	; 254
    4a50:	5f 4f       	sbci	r21, 0xFF	; 255
    4a52:	24 17       	cp	r18, r20
    4a54:	35 07       	cpc	r19, r21
    4a56:	48 f0       	brcs	.+18     	; 0x4a6a <malloc+0x120>
    4a58:	4e 0f       	add	r20, r30
    4a5a:	5f 1f       	adc	r21, r31
    4a5c:	50 93 77 0e 	sts	0x0E77, r21	; 0x800e77 <__brkval+0x1>
    4a60:	40 93 76 0e 	sts	0x0E76, r20	; 0x800e76 <__brkval>
    4a64:	81 93       	st	Z+, r24
    4a66:	91 93       	st	Z+, r25
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <malloc+0x124>
    4a6a:	e0 e0       	ldi	r30, 0x00	; 0
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	cf 01       	movw	r24, r30
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	1f 91       	pop	r17
    4a76:	0f 91       	pop	r16
    4a78:	08 95       	ret

00004a7a <free>:
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    4a7e:	00 97       	sbiw	r24, 0x00	; 0
    4a80:	09 f4       	brne	.+2      	; 0x4a84 <free+0xa>
    4a82:	81 c0       	rjmp	.+258    	; 0x4b86 <free+0x10c>
    4a84:	fc 01       	movw	r30, r24
    4a86:	32 97       	sbiw	r30, 0x02	; 2
    4a88:	13 82       	std	Z+3, r1	; 0x03
    4a8a:	12 82       	std	Z+2, r1	; 0x02
    4a8c:	a0 91 78 0e 	lds	r26, 0x0E78	; 0x800e78 <__flp>
    4a90:	b0 91 79 0e 	lds	r27, 0x0E79	; 0x800e79 <__flp+0x1>
    4a94:	10 97       	sbiw	r26, 0x00	; 0
    4a96:	81 f4       	brne	.+32     	; 0x4ab8 <free+0x3e>
    4a98:	20 81       	ld	r18, Z
    4a9a:	31 81       	ldd	r19, Z+1	; 0x01
    4a9c:	82 0f       	add	r24, r18
    4a9e:	93 1f       	adc	r25, r19
    4aa0:	20 91 76 0e 	lds	r18, 0x0E76	; 0x800e76 <__brkval>
    4aa4:	30 91 77 0e 	lds	r19, 0x0E77	; 0x800e77 <__brkval+0x1>
    4aa8:	28 17       	cp	r18, r24
    4aaa:	39 07       	cpc	r19, r25
    4aac:	51 f5       	brne	.+84     	; 0x4b02 <free+0x88>
    4aae:	f0 93 77 0e 	sts	0x0E77, r31	; 0x800e77 <__brkval+0x1>
    4ab2:	e0 93 76 0e 	sts	0x0E76, r30	; 0x800e76 <__brkval>
    4ab6:	67 c0       	rjmp	.+206    	; 0x4b86 <free+0x10c>
    4ab8:	ed 01       	movw	r28, r26
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	ce 17       	cp	r28, r30
    4ac0:	df 07       	cpc	r29, r31
    4ac2:	40 f4       	brcc	.+16     	; 0x4ad4 <free+0x5a>
    4ac4:	4a 81       	ldd	r20, Y+2	; 0x02
    4ac6:	5b 81       	ldd	r21, Y+3	; 0x03
    4ac8:	9e 01       	movw	r18, r28
    4aca:	41 15       	cp	r20, r1
    4acc:	51 05       	cpc	r21, r1
    4ace:	f1 f0       	breq	.+60     	; 0x4b0c <free+0x92>
    4ad0:	ea 01       	movw	r28, r20
    4ad2:	f5 cf       	rjmp	.-22     	; 0x4abe <free+0x44>
    4ad4:	d3 83       	std	Z+3, r29	; 0x03
    4ad6:	c2 83       	std	Z+2, r28	; 0x02
    4ad8:	40 81       	ld	r20, Z
    4ada:	51 81       	ldd	r21, Z+1	; 0x01
    4adc:	84 0f       	add	r24, r20
    4ade:	95 1f       	adc	r25, r21
    4ae0:	c8 17       	cp	r28, r24
    4ae2:	d9 07       	cpc	r29, r25
    4ae4:	59 f4       	brne	.+22     	; 0x4afc <free+0x82>
    4ae6:	88 81       	ld	r24, Y
    4ae8:	99 81       	ldd	r25, Y+1	; 0x01
    4aea:	84 0f       	add	r24, r20
    4aec:	95 1f       	adc	r25, r21
    4aee:	02 96       	adiw	r24, 0x02	; 2
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	80 83       	st	Z, r24
    4af4:	8a 81       	ldd	r24, Y+2	; 0x02
    4af6:	9b 81       	ldd	r25, Y+3	; 0x03
    4af8:	93 83       	std	Z+3, r25	; 0x03
    4afa:	82 83       	std	Z+2, r24	; 0x02
    4afc:	21 15       	cp	r18, r1
    4afe:	31 05       	cpc	r19, r1
    4b00:	29 f4       	brne	.+10     	; 0x4b0c <free+0x92>
    4b02:	f0 93 79 0e 	sts	0x0E79, r31	; 0x800e79 <__flp+0x1>
    4b06:	e0 93 78 0e 	sts	0x0E78, r30	; 0x800e78 <__flp>
    4b0a:	3d c0       	rjmp	.+122    	; 0x4b86 <free+0x10c>
    4b0c:	e9 01       	movw	r28, r18
    4b0e:	fb 83       	std	Y+3, r31	; 0x03
    4b10:	ea 83       	std	Y+2, r30	; 0x02
    4b12:	49 91       	ld	r20, Y+
    4b14:	59 91       	ld	r21, Y+
    4b16:	c4 0f       	add	r28, r20
    4b18:	d5 1f       	adc	r29, r21
    4b1a:	ec 17       	cp	r30, r28
    4b1c:	fd 07       	cpc	r31, r29
    4b1e:	61 f4       	brne	.+24     	; 0x4b38 <free+0xbe>
    4b20:	80 81       	ld	r24, Z
    4b22:	91 81       	ldd	r25, Z+1	; 0x01
    4b24:	84 0f       	add	r24, r20
    4b26:	95 1f       	adc	r25, r21
    4b28:	02 96       	adiw	r24, 0x02	; 2
    4b2a:	e9 01       	movw	r28, r18
    4b2c:	99 83       	std	Y+1, r25	; 0x01
    4b2e:	88 83       	st	Y, r24
    4b30:	82 81       	ldd	r24, Z+2	; 0x02
    4b32:	93 81       	ldd	r25, Z+3	; 0x03
    4b34:	9b 83       	std	Y+3, r25	; 0x03
    4b36:	8a 83       	std	Y+2, r24	; 0x02
    4b38:	e0 e0       	ldi	r30, 0x00	; 0
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	12 96       	adiw	r26, 0x02	; 2
    4b3e:	8d 91       	ld	r24, X+
    4b40:	9c 91       	ld	r25, X
    4b42:	13 97       	sbiw	r26, 0x03	; 3
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	19 f0       	breq	.+6      	; 0x4b4e <free+0xd4>
    4b48:	fd 01       	movw	r30, r26
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	f7 cf       	rjmp	.-18     	; 0x4b3c <free+0xc2>
    4b4e:	8d 91       	ld	r24, X+
    4b50:	9c 91       	ld	r25, X
    4b52:	11 97       	sbiw	r26, 0x01	; 1
    4b54:	9d 01       	movw	r18, r26
    4b56:	2e 5f       	subi	r18, 0xFE	; 254
    4b58:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5a:	82 0f       	add	r24, r18
    4b5c:	93 1f       	adc	r25, r19
    4b5e:	20 91 76 0e 	lds	r18, 0x0E76	; 0x800e76 <__brkval>
    4b62:	30 91 77 0e 	lds	r19, 0x0E77	; 0x800e77 <__brkval+0x1>
    4b66:	28 17       	cp	r18, r24
    4b68:	39 07       	cpc	r19, r25
    4b6a:	69 f4       	brne	.+26     	; 0x4b86 <free+0x10c>
    4b6c:	30 97       	sbiw	r30, 0x00	; 0
    4b6e:	29 f4       	brne	.+10     	; 0x4b7a <free+0x100>
    4b70:	10 92 79 0e 	sts	0x0E79, r1	; 0x800e79 <__flp+0x1>
    4b74:	10 92 78 0e 	sts	0x0E78, r1	; 0x800e78 <__flp>
    4b78:	02 c0       	rjmp	.+4      	; 0x4b7e <free+0x104>
    4b7a:	13 82       	std	Z+3, r1	; 0x03
    4b7c:	12 82       	std	Z+2, r1	; 0x02
    4b7e:	b0 93 77 0e 	sts	0x0E77, r27	; 0x800e77 <__brkval+0x1>
    4b82:	a0 93 76 0e 	sts	0x0E76, r26	; 0x800e76 <__brkval>
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	08 95       	ret

00004b8c <abort>:
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	f8 94       	cli
    4b92:	00 c3       	rjmp	.+1536   	; 0x5194 <_exit>

00004b94 <memcpy>:
    4b94:	fb 01       	movw	r30, r22
    4b96:	dc 01       	movw	r26, r24
    4b98:	02 c0       	rjmp	.+4      	; 0x4b9e <memcpy+0xa>
    4b9a:	01 90       	ld	r0, Z+
    4b9c:	0d 92       	st	X+, r0
    4b9e:	41 50       	subi	r20, 0x01	; 1
    4ba0:	50 40       	sbci	r21, 0x00	; 0
    4ba2:	d8 f7       	brcc	.-10     	; 0x4b9a <memcpy+0x6>
    4ba4:	08 95       	ret

00004ba6 <memset>:
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	01 c0       	rjmp	.+2      	; 0x4bac <memset+0x6>
    4baa:	6d 93       	st	X+, r22
    4bac:	41 50       	subi	r20, 0x01	; 1
    4bae:	50 40       	sbci	r21, 0x00	; 0
    4bb0:	e0 f7       	brcc	.-8      	; 0x4baa <memset+0x4>
    4bb2:	08 95       	ret

00004bb4 <printf>:
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    4bb8:	cd b7       	in	r28, 0x3d	; 61
    4bba:	de b7       	in	r29, 0x3e	; 62
    4bbc:	ae 01       	movw	r20, r28
    4bbe:	4a 5f       	subi	r20, 0xFA	; 250
    4bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc2:	fa 01       	movw	r30, r20
    4bc4:	61 91       	ld	r22, Z+
    4bc6:	71 91       	ld	r23, Z+
    4bc8:	af 01       	movw	r20, r30
    4bca:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <__iob+0x2>
    4bce:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <__iob+0x3>
    4bd2:	33 d0       	rcall	.+102    	; 0x4c3a <vfprintf>
    4bd4:	df 91       	pop	r29
    4bd6:	cf 91       	pop	r28
    4bd8:	08 95       	ret

00004bda <puts>:
    4bda:	0f 93       	push	r16
    4bdc:	1f 93       	push	r17
    4bde:	cf 93       	push	r28
    4be0:	df 93       	push	r29
    4be2:	e0 91 7c 0e 	lds	r30, 0x0E7C	; 0x800e7c <__iob+0x2>
    4be6:	f0 91 7d 0e 	lds	r31, 0x0E7D	; 0x800e7d <__iob+0x3>
    4bea:	23 81       	ldd	r18, Z+3	; 0x03
    4bec:	21 ff       	sbrs	r18, 1
    4bee:	1b c0       	rjmp	.+54     	; 0x4c26 <puts+0x4c>
    4bf0:	8c 01       	movw	r16, r24
    4bf2:	d0 e0       	ldi	r29, 0x00	; 0
    4bf4:	c0 e0       	ldi	r28, 0x00	; 0
    4bf6:	f8 01       	movw	r30, r16
    4bf8:	81 91       	ld	r24, Z+
    4bfa:	8f 01       	movw	r16, r30
    4bfc:	60 91 7c 0e 	lds	r22, 0x0E7C	; 0x800e7c <__iob+0x2>
    4c00:	70 91 7d 0e 	lds	r23, 0x0E7D	; 0x800e7d <__iob+0x3>
    4c04:	db 01       	movw	r26, r22
    4c06:	18 96       	adiw	r26, 0x08	; 8
    4c08:	ed 91       	ld	r30, X+
    4c0a:	fc 91       	ld	r31, X
    4c0c:	19 97       	sbiw	r26, 0x09	; 9
    4c0e:	88 23       	and	r24, r24
    4c10:	31 f0       	breq	.+12     	; 0x4c1e <puts+0x44>
    4c12:	19 95       	eicall
    4c14:	89 2b       	or	r24, r25
    4c16:	79 f3       	breq	.-34     	; 0x4bf6 <puts+0x1c>
    4c18:	df ef       	ldi	r29, 0xFF	; 255
    4c1a:	cf ef       	ldi	r28, 0xFF	; 255
    4c1c:	ec cf       	rjmp	.-40     	; 0x4bf6 <puts+0x1c>
    4c1e:	8a e0       	ldi	r24, 0x0A	; 10
    4c20:	19 95       	eicall
    4c22:	89 2b       	or	r24, r25
    4c24:	19 f0       	breq	.+6      	; 0x4c2c <puts+0x52>
    4c26:	8f ef       	ldi	r24, 0xFF	; 255
    4c28:	9f ef       	ldi	r25, 0xFF	; 255
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <puts+0x56>
    4c2c:	8d 2f       	mov	r24, r29
    4c2e:	9c 2f       	mov	r25, r28
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	0f 91       	pop	r16
    4c38:	08 95       	ret

00004c3a <vfprintf>:
    4c3a:	2f 92       	push	r2
    4c3c:	3f 92       	push	r3
    4c3e:	4f 92       	push	r4
    4c40:	5f 92       	push	r5
    4c42:	6f 92       	push	r6
    4c44:	7f 92       	push	r7
    4c46:	8f 92       	push	r8
    4c48:	9f 92       	push	r9
    4c4a:	af 92       	push	r10
    4c4c:	bf 92       	push	r11
    4c4e:	cf 92       	push	r12
    4c50:	df 92       	push	r13
    4c52:	ef 92       	push	r14
    4c54:	ff 92       	push	r15
    4c56:	0f 93       	push	r16
    4c58:	1f 93       	push	r17
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
    4c62:	2b 97       	sbiw	r28, 0x0b	; 11
    4c64:	0f b6       	in	r0, 0x3f	; 63
    4c66:	f8 94       	cli
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	0f be       	out	0x3f, r0	; 63
    4c6c:	cd bf       	out	0x3d, r28	; 61
    4c6e:	6c 01       	movw	r12, r24
    4c70:	7b 01       	movw	r14, r22
    4c72:	8a 01       	movw	r16, r20
    4c74:	fc 01       	movw	r30, r24
    4c76:	17 82       	std	Z+7, r1	; 0x07
    4c78:	16 82       	std	Z+6, r1	; 0x06
    4c7a:	83 81       	ldd	r24, Z+3	; 0x03
    4c7c:	81 ff       	sbrs	r24, 1
    4c7e:	bf c1       	rjmp	.+894    	; 0x4ffe <vfprintf+0x3c4>
    4c80:	ce 01       	movw	r24, r28
    4c82:	01 96       	adiw	r24, 0x01	; 1
    4c84:	3c 01       	movw	r6, r24
    4c86:	f6 01       	movw	r30, r12
    4c88:	93 81       	ldd	r25, Z+3	; 0x03
    4c8a:	f7 01       	movw	r30, r14
    4c8c:	93 fd       	sbrc	r25, 3
    4c8e:	85 91       	lpm	r24, Z+
    4c90:	93 ff       	sbrs	r25, 3
    4c92:	81 91       	ld	r24, Z+
    4c94:	7f 01       	movw	r14, r30
    4c96:	88 23       	and	r24, r24
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <vfprintf+0x62>
    4c9a:	ad c1       	rjmp	.+858    	; 0x4ff6 <vfprintf+0x3bc>
    4c9c:	85 32       	cpi	r24, 0x25	; 37
    4c9e:	39 f4       	brne	.+14     	; 0x4cae <vfprintf+0x74>
    4ca0:	93 fd       	sbrc	r25, 3
    4ca2:	85 91       	lpm	r24, Z+
    4ca4:	93 ff       	sbrs	r25, 3
    4ca6:	81 91       	ld	r24, Z+
    4ca8:	7f 01       	movw	r14, r30
    4caa:	85 32       	cpi	r24, 0x25	; 37
    4cac:	21 f4       	brne	.+8      	; 0x4cb6 <vfprintf+0x7c>
    4cae:	b6 01       	movw	r22, r12
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	d6 d1       	rcall	.+940    	; 0x5060 <fputc>
    4cb4:	e8 cf       	rjmp	.-48     	; 0x4c86 <vfprintf+0x4c>
    4cb6:	91 2c       	mov	r9, r1
    4cb8:	21 2c       	mov	r2, r1
    4cba:	31 2c       	mov	r3, r1
    4cbc:	ff e1       	ldi	r31, 0x1F	; 31
    4cbe:	f3 15       	cp	r31, r3
    4cc0:	d8 f0       	brcs	.+54     	; 0x4cf8 <vfprintf+0xbe>
    4cc2:	8b 32       	cpi	r24, 0x2B	; 43
    4cc4:	79 f0       	breq	.+30     	; 0x4ce4 <vfprintf+0xaa>
    4cc6:	38 f4       	brcc	.+14     	; 0x4cd6 <vfprintf+0x9c>
    4cc8:	80 32       	cpi	r24, 0x20	; 32
    4cca:	79 f0       	breq	.+30     	; 0x4cea <vfprintf+0xb0>
    4ccc:	83 32       	cpi	r24, 0x23	; 35
    4cce:	a1 f4       	brne	.+40     	; 0x4cf8 <vfprintf+0xbe>
    4cd0:	23 2d       	mov	r18, r3
    4cd2:	20 61       	ori	r18, 0x10	; 16
    4cd4:	1d c0       	rjmp	.+58     	; 0x4d10 <vfprintf+0xd6>
    4cd6:	8d 32       	cpi	r24, 0x2D	; 45
    4cd8:	61 f0       	breq	.+24     	; 0x4cf2 <vfprintf+0xb8>
    4cda:	80 33       	cpi	r24, 0x30	; 48
    4cdc:	69 f4       	brne	.+26     	; 0x4cf8 <vfprintf+0xbe>
    4cde:	23 2d       	mov	r18, r3
    4ce0:	21 60       	ori	r18, 0x01	; 1
    4ce2:	16 c0       	rjmp	.+44     	; 0x4d10 <vfprintf+0xd6>
    4ce4:	83 2d       	mov	r24, r3
    4ce6:	82 60       	ori	r24, 0x02	; 2
    4ce8:	38 2e       	mov	r3, r24
    4cea:	e3 2d       	mov	r30, r3
    4cec:	e4 60       	ori	r30, 0x04	; 4
    4cee:	3e 2e       	mov	r3, r30
    4cf0:	2a c0       	rjmp	.+84     	; 0x4d46 <vfprintf+0x10c>
    4cf2:	f3 2d       	mov	r31, r3
    4cf4:	f8 60       	ori	r31, 0x08	; 8
    4cf6:	1d c0       	rjmp	.+58     	; 0x4d32 <vfprintf+0xf8>
    4cf8:	37 fc       	sbrc	r3, 7
    4cfa:	2d c0       	rjmp	.+90     	; 0x4d56 <vfprintf+0x11c>
    4cfc:	20 ed       	ldi	r18, 0xD0	; 208
    4cfe:	28 0f       	add	r18, r24
    4d00:	2a 30       	cpi	r18, 0x0A	; 10
    4d02:	40 f0       	brcs	.+16     	; 0x4d14 <vfprintf+0xda>
    4d04:	8e 32       	cpi	r24, 0x2E	; 46
    4d06:	b9 f4       	brne	.+46     	; 0x4d36 <vfprintf+0xfc>
    4d08:	36 fc       	sbrc	r3, 6
    4d0a:	75 c1       	rjmp	.+746    	; 0x4ff6 <vfprintf+0x3bc>
    4d0c:	23 2d       	mov	r18, r3
    4d0e:	20 64       	ori	r18, 0x40	; 64
    4d10:	32 2e       	mov	r3, r18
    4d12:	19 c0       	rjmp	.+50     	; 0x4d46 <vfprintf+0x10c>
    4d14:	36 fe       	sbrs	r3, 6
    4d16:	06 c0       	rjmp	.+12     	; 0x4d24 <vfprintf+0xea>
    4d18:	8a e0       	ldi	r24, 0x0A	; 10
    4d1a:	98 9e       	mul	r9, r24
    4d1c:	20 0d       	add	r18, r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	92 2e       	mov	r9, r18
    4d22:	11 c0       	rjmp	.+34     	; 0x4d46 <vfprintf+0x10c>
    4d24:	ea e0       	ldi	r30, 0x0A	; 10
    4d26:	2e 9e       	mul	r2, r30
    4d28:	20 0d       	add	r18, r0
    4d2a:	11 24       	eor	r1, r1
    4d2c:	22 2e       	mov	r2, r18
    4d2e:	f3 2d       	mov	r31, r3
    4d30:	f0 62       	ori	r31, 0x20	; 32
    4d32:	3f 2e       	mov	r3, r31
    4d34:	08 c0       	rjmp	.+16     	; 0x4d46 <vfprintf+0x10c>
    4d36:	8c 36       	cpi	r24, 0x6C	; 108
    4d38:	21 f4       	brne	.+8      	; 0x4d42 <vfprintf+0x108>
    4d3a:	83 2d       	mov	r24, r3
    4d3c:	80 68       	ori	r24, 0x80	; 128
    4d3e:	38 2e       	mov	r3, r24
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <vfprintf+0x10c>
    4d42:	88 36       	cpi	r24, 0x68	; 104
    4d44:	41 f4       	brne	.+16     	; 0x4d56 <vfprintf+0x11c>
    4d46:	f7 01       	movw	r30, r14
    4d48:	93 fd       	sbrc	r25, 3
    4d4a:	85 91       	lpm	r24, Z+
    4d4c:	93 ff       	sbrs	r25, 3
    4d4e:	81 91       	ld	r24, Z+
    4d50:	7f 01       	movw	r14, r30
    4d52:	81 11       	cpse	r24, r1
    4d54:	b3 cf       	rjmp	.-154    	; 0x4cbc <vfprintf+0x82>
    4d56:	98 2f       	mov	r25, r24
    4d58:	9f 7d       	andi	r25, 0xDF	; 223
    4d5a:	95 54       	subi	r25, 0x45	; 69
    4d5c:	93 30       	cpi	r25, 0x03	; 3
    4d5e:	28 f4       	brcc	.+10     	; 0x4d6a <vfprintf+0x130>
    4d60:	0c 5f       	subi	r16, 0xFC	; 252
    4d62:	1f 4f       	sbci	r17, 0xFF	; 255
    4d64:	9f e3       	ldi	r25, 0x3F	; 63
    4d66:	99 83       	std	Y+1, r25	; 0x01
    4d68:	0d c0       	rjmp	.+26     	; 0x4d84 <vfprintf+0x14a>
    4d6a:	83 36       	cpi	r24, 0x63	; 99
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <vfprintf+0x140>
    4d6e:	83 37       	cpi	r24, 0x73	; 115
    4d70:	71 f0       	breq	.+28     	; 0x4d8e <vfprintf+0x154>
    4d72:	83 35       	cpi	r24, 0x53	; 83
    4d74:	09 f0       	breq	.+2      	; 0x4d78 <vfprintf+0x13e>
    4d76:	55 c0       	rjmp	.+170    	; 0x4e22 <vfprintf+0x1e8>
    4d78:	20 c0       	rjmp	.+64     	; 0x4dba <vfprintf+0x180>
    4d7a:	f8 01       	movw	r30, r16
    4d7c:	80 81       	ld	r24, Z
    4d7e:	89 83       	std	Y+1, r24	; 0x01
    4d80:	0e 5f       	subi	r16, 0xFE	; 254
    4d82:	1f 4f       	sbci	r17, 0xFF	; 255
    4d84:	88 24       	eor	r8, r8
    4d86:	83 94       	inc	r8
    4d88:	91 2c       	mov	r9, r1
    4d8a:	53 01       	movw	r10, r6
    4d8c:	12 c0       	rjmp	.+36     	; 0x4db2 <vfprintf+0x178>
    4d8e:	28 01       	movw	r4, r16
    4d90:	f2 e0       	ldi	r31, 0x02	; 2
    4d92:	4f 0e       	add	r4, r31
    4d94:	51 1c       	adc	r5, r1
    4d96:	f8 01       	movw	r30, r16
    4d98:	a0 80       	ld	r10, Z
    4d9a:	b1 80       	ldd	r11, Z+1	; 0x01
    4d9c:	36 fe       	sbrs	r3, 6
    4d9e:	03 c0       	rjmp	.+6      	; 0x4da6 <vfprintf+0x16c>
    4da0:	69 2d       	mov	r22, r9
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	02 c0       	rjmp	.+4      	; 0x4daa <vfprintf+0x170>
    4da6:	6f ef       	ldi	r22, 0xFF	; 255
    4da8:	7f ef       	ldi	r23, 0xFF	; 255
    4daa:	c5 01       	movw	r24, r10
    4dac:	4e d1       	rcall	.+668    	; 0x504a <strnlen>
    4dae:	4c 01       	movw	r8, r24
    4db0:	82 01       	movw	r16, r4
    4db2:	f3 2d       	mov	r31, r3
    4db4:	ff 77       	andi	r31, 0x7F	; 127
    4db6:	3f 2e       	mov	r3, r31
    4db8:	15 c0       	rjmp	.+42     	; 0x4de4 <vfprintf+0x1aa>
    4dba:	28 01       	movw	r4, r16
    4dbc:	22 e0       	ldi	r18, 0x02	; 2
    4dbe:	42 0e       	add	r4, r18
    4dc0:	51 1c       	adc	r5, r1
    4dc2:	f8 01       	movw	r30, r16
    4dc4:	a0 80       	ld	r10, Z
    4dc6:	b1 80       	ldd	r11, Z+1	; 0x01
    4dc8:	36 fe       	sbrs	r3, 6
    4dca:	03 c0       	rjmp	.+6      	; 0x4dd2 <vfprintf+0x198>
    4dcc:	69 2d       	mov	r22, r9
    4dce:	70 e0       	ldi	r23, 0x00	; 0
    4dd0:	02 c0       	rjmp	.+4      	; 0x4dd6 <vfprintf+0x19c>
    4dd2:	6f ef       	ldi	r22, 0xFF	; 255
    4dd4:	7f ef       	ldi	r23, 0xFF	; 255
    4dd6:	c5 01       	movw	r24, r10
    4dd8:	2d d1       	rcall	.+602    	; 0x5034 <strnlen_P>
    4dda:	4c 01       	movw	r8, r24
    4ddc:	f3 2d       	mov	r31, r3
    4dde:	f0 68       	ori	r31, 0x80	; 128
    4de0:	3f 2e       	mov	r3, r31
    4de2:	82 01       	movw	r16, r4
    4de4:	33 fc       	sbrc	r3, 3
    4de6:	19 c0       	rjmp	.+50     	; 0x4e1a <vfprintf+0x1e0>
    4de8:	82 2d       	mov	r24, r2
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	88 16       	cp	r8, r24
    4dee:	99 06       	cpc	r9, r25
    4df0:	a0 f4       	brcc	.+40     	; 0x4e1a <vfprintf+0x1e0>
    4df2:	b6 01       	movw	r22, r12
    4df4:	80 e2       	ldi	r24, 0x20	; 32
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	33 d1       	rcall	.+614    	; 0x5060 <fputc>
    4dfa:	2a 94       	dec	r2
    4dfc:	f5 cf       	rjmp	.-22     	; 0x4de8 <vfprintf+0x1ae>
    4dfe:	f5 01       	movw	r30, r10
    4e00:	37 fc       	sbrc	r3, 7
    4e02:	85 91       	lpm	r24, Z+
    4e04:	37 fe       	sbrs	r3, 7
    4e06:	81 91       	ld	r24, Z+
    4e08:	5f 01       	movw	r10, r30
    4e0a:	b6 01       	movw	r22, r12
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	28 d1       	rcall	.+592    	; 0x5060 <fputc>
    4e10:	21 10       	cpse	r2, r1
    4e12:	2a 94       	dec	r2
    4e14:	21 e0       	ldi	r18, 0x01	; 1
    4e16:	82 1a       	sub	r8, r18
    4e18:	91 08       	sbc	r9, r1
    4e1a:	81 14       	cp	r8, r1
    4e1c:	91 04       	cpc	r9, r1
    4e1e:	79 f7       	brne	.-34     	; 0x4dfe <vfprintf+0x1c4>
    4e20:	e1 c0       	rjmp	.+450    	; 0x4fe4 <vfprintf+0x3aa>
    4e22:	84 36       	cpi	r24, 0x64	; 100
    4e24:	11 f0       	breq	.+4      	; 0x4e2a <vfprintf+0x1f0>
    4e26:	89 36       	cpi	r24, 0x69	; 105
    4e28:	39 f5       	brne	.+78     	; 0x4e78 <vfprintf+0x23e>
    4e2a:	f8 01       	movw	r30, r16
    4e2c:	37 fe       	sbrs	r3, 7
    4e2e:	07 c0       	rjmp	.+14     	; 0x4e3e <vfprintf+0x204>
    4e30:	60 81       	ld	r22, Z
    4e32:	71 81       	ldd	r23, Z+1	; 0x01
    4e34:	82 81       	ldd	r24, Z+2	; 0x02
    4e36:	93 81       	ldd	r25, Z+3	; 0x03
    4e38:	0c 5f       	subi	r16, 0xFC	; 252
    4e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <vfprintf+0x214>
    4e3e:	60 81       	ld	r22, Z
    4e40:	71 81       	ldd	r23, Z+1	; 0x01
    4e42:	07 2e       	mov	r0, r23
    4e44:	00 0c       	add	r0, r0
    4e46:	88 0b       	sbc	r24, r24
    4e48:	99 0b       	sbc	r25, r25
    4e4a:	0e 5f       	subi	r16, 0xFE	; 254
    4e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4e:	f3 2d       	mov	r31, r3
    4e50:	ff 76       	andi	r31, 0x6F	; 111
    4e52:	3f 2e       	mov	r3, r31
    4e54:	97 ff       	sbrs	r25, 7
    4e56:	09 c0       	rjmp	.+18     	; 0x4e6a <vfprintf+0x230>
    4e58:	90 95       	com	r25
    4e5a:	80 95       	com	r24
    4e5c:	70 95       	com	r23
    4e5e:	61 95       	neg	r22
    4e60:	7f 4f       	sbci	r23, 0xFF	; 255
    4e62:	8f 4f       	sbci	r24, 0xFF	; 255
    4e64:	9f 4f       	sbci	r25, 0xFF	; 255
    4e66:	f0 68       	ori	r31, 0x80	; 128
    4e68:	3f 2e       	mov	r3, r31
    4e6a:	2a e0       	ldi	r18, 0x0A	; 10
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	a3 01       	movw	r20, r6
    4e70:	33 d1       	rcall	.+614    	; 0x50d8 <__ultoa_invert>
    4e72:	88 2e       	mov	r8, r24
    4e74:	86 18       	sub	r8, r6
    4e76:	44 c0       	rjmp	.+136    	; 0x4f00 <vfprintf+0x2c6>
    4e78:	85 37       	cpi	r24, 0x75	; 117
    4e7a:	31 f4       	brne	.+12     	; 0x4e88 <vfprintf+0x24e>
    4e7c:	23 2d       	mov	r18, r3
    4e7e:	2f 7e       	andi	r18, 0xEF	; 239
    4e80:	b2 2e       	mov	r11, r18
    4e82:	2a e0       	ldi	r18, 0x0A	; 10
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	25 c0       	rjmp	.+74     	; 0x4ed2 <vfprintf+0x298>
    4e88:	93 2d       	mov	r25, r3
    4e8a:	99 7f       	andi	r25, 0xF9	; 249
    4e8c:	b9 2e       	mov	r11, r25
    4e8e:	8f 36       	cpi	r24, 0x6F	; 111
    4e90:	c1 f0       	breq	.+48     	; 0x4ec2 <vfprintf+0x288>
    4e92:	18 f4       	brcc	.+6      	; 0x4e9a <vfprintf+0x260>
    4e94:	88 35       	cpi	r24, 0x58	; 88
    4e96:	79 f0       	breq	.+30     	; 0x4eb6 <vfprintf+0x27c>
    4e98:	ae c0       	rjmp	.+348    	; 0x4ff6 <vfprintf+0x3bc>
    4e9a:	80 37       	cpi	r24, 0x70	; 112
    4e9c:	19 f0       	breq	.+6      	; 0x4ea4 <vfprintf+0x26a>
    4e9e:	88 37       	cpi	r24, 0x78	; 120
    4ea0:	21 f0       	breq	.+8      	; 0x4eaa <vfprintf+0x270>
    4ea2:	a9 c0       	rjmp	.+338    	; 0x4ff6 <vfprintf+0x3bc>
    4ea4:	e9 2f       	mov	r30, r25
    4ea6:	e0 61       	ori	r30, 0x10	; 16
    4ea8:	be 2e       	mov	r11, r30
    4eaa:	b4 fe       	sbrs	r11, 4
    4eac:	0d c0       	rjmp	.+26     	; 0x4ec8 <vfprintf+0x28e>
    4eae:	fb 2d       	mov	r31, r11
    4eb0:	f4 60       	ori	r31, 0x04	; 4
    4eb2:	bf 2e       	mov	r11, r31
    4eb4:	09 c0       	rjmp	.+18     	; 0x4ec8 <vfprintf+0x28e>
    4eb6:	34 fe       	sbrs	r3, 4
    4eb8:	0a c0       	rjmp	.+20     	; 0x4ece <vfprintf+0x294>
    4eba:	29 2f       	mov	r18, r25
    4ebc:	26 60       	ori	r18, 0x06	; 6
    4ebe:	b2 2e       	mov	r11, r18
    4ec0:	06 c0       	rjmp	.+12     	; 0x4ece <vfprintf+0x294>
    4ec2:	28 e0       	ldi	r18, 0x08	; 8
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	05 c0       	rjmp	.+10     	; 0x4ed2 <vfprintf+0x298>
    4ec8:	20 e1       	ldi	r18, 0x10	; 16
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	02 c0       	rjmp	.+4      	; 0x4ed2 <vfprintf+0x298>
    4ece:	20 e1       	ldi	r18, 0x10	; 16
    4ed0:	32 e0       	ldi	r19, 0x02	; 2
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	b7 fe       	sbrs	r11, 7
    4ed6:	07 c0       	rjmp	.+14     	; 0x4ee6 <vfprintf+0x2ac>
    4ed8:	60 81       	ld	r22, Z
    4eda:	71 81       	ldd	r23, Z+1	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	0c 5f       	subi	r16, 0xFC	; 252
    4ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee4:	06 c0       	rjmp	.+12     	; 0x4ef2 <vfprintf+0x2b8>
    4ee6:	60 81       	ld	r22, Z
    4ee8:	71 81       	ldd	r23, Z+1	; 0x01
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	0e 5f       	subi	r16, 0xFE	; 254
    4ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef2:	a3 01       	movw	r20, r6
    4ef4:	f1 d0       	rcall	.+482    	; 0x50d8 <__ultoa_invert>
    4ef6:	88 2e       	mov	r8, r24
    4ef8:	86 18       	sub	r8, r6
    4efa:	fb 2d       	mov	r31, r11
    4efc:	ff 77       	andi	r31, 0x7F	; 127
    4efe:	3f 2e       	mov	r3, r31
    4f00:	36 fe       	sbrs	r3, 6
    4f02:	0d c0       	rjmp	.+26     	; 0x4f1e <vfprintf+0x2e4>
    4f04:	23 2d       	mov	r18, r3
    4f06:	2e 7f       	andi	r18, 0xFE	; 254
    4f08:	a2 2e       	mov	r10, r18
    4f0a:	89 14       	cp	r8, r9
    4f0c:	58 f4       	brcc	.+22     	; 0x4f24 <vfprintf+0x2ea>
    4f0e:	34 fe       	sbrs	r3, 4
    4f10:	0b c0       	rjmp	.+22     	; 0x4f28 <vfprintf+0x2ee>
    4f12:	32 fc       	sbrc	r3, 2
    4f14:	09 c0       	rjmp	.+18     	; 0x4f28 <vfprintf+0x2ee>
    4f16:	83 2d       	mov	r24, r3
    4f18:	8e 7e       	andi	r24, 0xEE	; 238
    4f1a:	a8 2e       	mov	r10, r24
    4f1c:	05 c0       	rjmp	.+10     	; 0x4f28 <vfprintf+0x2ee>
    4f1e:	b8 2c       	mov	r11, r8
    4f20:	a3 2c       	mov	r10, r3
    4f22:	03 c0       	rjmp	.+6      	; 0x4f2a <vfprintf+0x2f0>
    4f24:	b8 2c       	mov	r11, r8
    4f26:	01 c0       	rjmp	.+2      	; 0x4f2a <vfprintf+0x2f0>
    4f28:	b9 2c       	mov	r11, r9
    4f2a:	a4 fe       	sbrs	r10, 4
    4f2c:	0f c0       	rjmp	.+30     	; 0x4f4c <vfprintf+0x312>
    4f2e:	fe 01       	movw	r30, r28
    4f30:	e8 0d       	add	r30, r8
    4f32:	f1 1d       	adc	r31, r1
    4f34:	80 81       	ld	r24, Z
    4f36:	80 33       	cpi	r24, 0x30	; 48
    4f38:	21 f4       	brne	.+8      	; 0x4f42 <vfprintf+0x308>
    4f3a:	9a 2d       	mov	r25, r10
    4f3c:	99 7e       	andi	r25, 0xE9	; 233
    4f3e:	a9 2e       	mov	r10, r25
    4f40:	09 c0       	rjmp	.+18     	; 0x4f54 <vfprintf+0x31a>
    4f42:	a2 fe       	sbrs	r10, 2
    4f44:	06 c0       	rjmp	.+12     	; 0x4f52 <vfprintf+0x318>
    4f46:	b3 94       	inc	r11
    4f48:	b3 94       	inc	r11
    4f4a:	04 c0       	rjmp	.+8      	; 0x4f54 <vfprintf+0x31a>
    4f4c:	8a 2d       	mov	r24, r10
    4f4e:	86 78       	andi	r24, 0x86	; 134
    4f50:	09 f0       	breq	.+2      	; 0x4f54 <vfprintf+0x31a>
    4f52:	b3 94       	inc	r11
    4f54:	a3 fc       	sbrc	r10, 3
    4f56:	10 c0       	rjmp	.+32     	; 0x4f78 <vfprintf+0x33e>
    4f58:	a0 fe       	sbrs	r10, 0
    4f5a:	06 c0       	rjmp	.+12     	; 0x4f68 <vfprintf+0x32e>
    4f5c:	b2 14       	cp	r11, r2
    4f5e:	80 f4       	brcc	.+32     	; 0x4f80 <vfprintf+0x346>
    4f60:	28 0c       	add	r2, r8
    4f62:	92 2c       	mov	r9, r2
    4f64:	9b 18       	sub	r9, r11
    4f66:	0d c0       	rjmp	.+26     	; 0x4f82 <vfprintf+0x348>
    4f68:	b2 14       	cp	r11, r2
    4f6a:	58 f4       	brcc	.+22     	; 0x4f82 <vfprintf+0x348>
    4f6c:	b6 01       	movw	r22, r12
    4f6e:	80 e2       	ldi	r24, 0x20	; 32
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	76 d0       	rcall	.+236    	; 0x5060 <fputc>
    4f74:	b3 94       	inc	r11
    4f76:	f8 cf       	rjmp	.-16     	; 0x4f68 <vfprintf+0x32e>
    4f78:	b2 14       	cp	r11, r2
    4f7a:	18 f4       	brcc	.+6      	; 0x4f82 <vfprintf+0x348>
    4f7c:	2b 18       	sub	r2, r11
    4f7e:	02 c0       	rjmp	.+4      	; 0x4f84 <vfprintf+0x34a>
    4f80:	98 2c       	mov	r9, r8
    4f82:	21 2c       	mov	r2, r1
    4f84:	a4 fe       	sbrs	r10, 4
    4f86:	0f c0       	rjmp	.+30     	; 0x4fa6 <vfprintf+0x36c>
    4f88:	b6 01       	movw	r22, r12
    4f8a:	80 e3       	ldi	r24, 0x30	; 48
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	68 d0       	rcall	.+208    	; 0x5060 <fputc>
    4f90:	a2 fe       	sbrs	r10, 2
    4f92:	16 c0       	rjmp	.+44     	; 0x4fc0 <vfprintf+0x386>
    4f94:	a1 fc       	sbrc	r10, 1
    4f96:	03 c0       	rjmp	.+6      	; 0x4f9e <vfprintf+0x364>
    4f98:	88 e7       	ldi	r24, 0x78	; 120
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <vfprintf+0x368>
    4f9e:	88 e5       	ldi	r24, 0x58	; 88
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	b6 01       	movw	r22, r12
    4fa4:	0c c0       	rjmp	.+24     	; 0x4fbe <vfprintf+0x384>
    4fa6:	8a 2d       	mov	r24, r10
    4fa8:	86 78       	andi	r24, 0x86	; 134
    4faa:	51 f0       	breq	.+20     	; 0x4fc0 <vfprintf+0x386>
    4fac:	a1 fe       	sbrs	r10, 1
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <vfprintf+0x37a>
    4fb0:	8b e2       	ldi	r24, 0x2B	; 43
    4fb2:	01 c0       	rjmp	.+2      	; 0x4fb6 <vfprintf+0x37c>
    4fb4:	80 e2       	ldi	r24, 0x20	; 32
    4fb6:	a7 fc       	sbrc	r10, 7
    4fb8:	8d e2       	ldi	r24, 0x2D	; 45
    4fba:	b6 01       	movw	r22, r12
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	50 d0       	rcall	.+160    	; 0x5060 <fputc>
    4fc0:	89 14       	cp	r8, r9
    4fc2:	30 f4       	brcc	.+12     	; 0x4fd0 <vfprintf+0x396>
    4fc4:	b6 01       	movw	r22, r12
    4fc6:	80 e3       	ldi	r24, 0x30	; 48
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	4a d0       	rcall	.+148    	; 0x5060 <fputc>
    4fcc:	9a 94       	dec	r9
    4fce:	f8 cf       	rjmp	.-16     	; 0x4fc0 <vfprintf+0x386>
    4fd0:	8a 94       	dec	r8
    4fd2:	f3 01       	movw	r30, r6
    4fd4:	e8 0d       	add	r30, r8
    4fd6:	f1 1d       	adc	r31, r1
    4fd8:	80 81       	ld	r24, Z
    4fda:	b6 01       	movw	r22, r12
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	40 d0       	rcall	.+128    	; 0x5060 <fputc>
    4fe0:	81 10       	cpse	r8, r1
    4fe2:	f6 cf       	rjmp	.-20     	; 0x4fd0 <vfprintf+0x396>
    4fe4:	22 20       	and	r2, r2
    4fe6:	09 f4       	brne	.+2      	; 0x4fea <vfprintf+0x3b0>
    4fe8:	4e ce       	rjmp	.-868    	; 0x4c86 <vfprintf+0x4c>
    4fea:	b6 01       	movw	r22, r12
    4fec:	80 e2       	ldi	r24, 0x20	; 32
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	37 d0       	rcall	.+110    	; 0x5060 <fputc>
    4ff2:	2a 94       	dec	r2
    4ff4:	f7 cf       	rjmp	.-18     	; 0x4fe4 <vfprintf+0x3aa>
    4ff6:	f6 01       	movw	r30, r12
    4ff8:	86 81       	ldd	r24, Z+6	; 0x06
    4ffa:	97 81       	ldd	r25, Z+7	; 0x07
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <vfprintf+0x3c8>
    4ffe:	8f ef       	ldi	r24, 0xFF	; 255
    5000:	9f ef       	ldi	r25, 0xFF	; 255
    5002:	2b 96       	adiw	r28, 0x0b	; 11
    5004:	0f b6       	in	r0, 0x3f	; 63
    5006:	f8 94       	cli
    5008:	de bf       	out	0x3e, r29	; 62
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	df 91       	pop	r29
    5010:	cf 91       	pop	r28
    5012:	1f 91       	pop	r17
    5014:	0f 91       	pop	r16
    5016:	ff 90       	pop	r15
    5018:	ef 90       	pop	r14
    501a:	df 90       	pop	r13
    501c:	cf 90       	pop	r12
    501e:	bf 90       	pop	r11
    5020:	af 90       	pop	r10
    5022:	9f 90       	pop	r9
    5024:	8f 90       	pop	r8
    5026:	7f 90       	pop	r7
    5028:	6f 90       	pop	r6
    502a:	5f 90       	pop	r5
    502c:	4f 90       	pop	r4
    502e:	3f 90       	pop	r3
    5030:	2f 90       	pop	r2
    5032:	08 95       	ret

00005034 <strnlen_P>:
    5034:	fc 01       	movw	r30, r24
    5036:	05 90       	lpm	r0, Z+
    5038:	61 50       	subi	r22, 0x01	; 1
    503a:	70 40       	sbci	r23, 0x00	; 0
    503c:	01 10       	cpse	r0, r1
    503e:	d8 f7       	brcc	.-10     	; 0x5036 <strnlen_P+0x2>
    5040:	80 95       	com	r24
    5042:	90 95       	com	r25
    5044:	8e 0f       	add	r24, r30
    5046:	9f 1f       	adc	r25, r31
    5048:	08 95       	ret

0000504a <strnlen>:
    504a:	fc 01       	movw	r30, r24
    504c:	61 50       	subi	r22, 0x01	; 1
    504e:	70 40       	sbci	r23, 0x00	; 0
    5050:	01 90       	ld	r0, Z+
    5052:	01 10       	cpse	r0, r1
    5054:	d8 f7       	brcc	.-10     	; 0x504c <strnlen+0x2>
    5056:	80 95       	com	r24
    5058:	90 95       	com	r25
    505a:	8e 0f       	add	r24, r30
    505c:	9f 1f       	adc	r25, r31
    505e:	08 95       	ret

00005060 <fputc>:
    5060:	0f 93       	push	r16
    5062:	1f 93       	push	r17
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	fb 01       	movw	r30, r22
    506a:	23 81       	ldd	r18, Z+3	; 0x03
    506c:	21 fd       	sbrc	r18, 1
    506e:	03 c0       	rjmp	.+6      	; 0x5076 <fputc+0x16>
    5070:	8f ef       	ldi	r24, 0xFF	; 255
    5072:	9f ef       	ldi	r25, 0xFF	; 255
    5074:	2c c0       	rjmp	.+88     	; 0x50ce <fputc+0x6e>
    5076:	22 ff       	sbrs	r18, 2
    5078:	16 c0       	rjmp	.+44     	; 0x50a6 <fputc+0x46>
    507a:	46 81       	ldd	r20, Z+6	; 0x06
    507c:	57 81       	ldd	r21, Z+7	; 0x07
    507e:	24 81       	ldd	r18, Z+4	; 0x04
    5080:	35 81       	ldd	r19, Z+5	; 0x05
    5082:	42 17       	cp	r20, r18
    5084:	53 07       	cpc	r21, r19
    5086:	44 f4       	brge	.+16     	; 0x5098 <fputc+0x38>
    5088:	a0 81       	ld	r26, Z
    508a:	b1 81       	ldd	r27, Z+1	; 0x01
    508c:	9d 01       	movw	r18, r26
    508e:	2f 5f       	subi	r18, 0xFF	; 255
    5090:	3f 4f       	sbci	r19, 0xFF	; 255
    5092:	31 83       	std	Z+1, r19	; 0x01
    5094:	20 83       	st	Z, r18
    5096:	8c 93       	st	X, r24
    5098:	26 81       	ldd	r18, Z+6	; 0x06
    509a:	37 81       	ldd	r19, Z+7	; 0x07
    509c:	2f 5f       	subi	r18, 0xFF	; 255
    509e:	3f 4f       	sbci	r19, 0xFF	; 255
    50a0:	37 83       	std	Z+7, r19	; 0x07
    50a2:	26 83       	std	Z+6, r18	; 0x06
    50a4:	14 c0       	rjmp	.+40     	; 0x50ce <fputc+0x6e>
    50a6:	8b 01       	movw	r16, r22
    50a8:	ec 01       	movw	r28, r24
    50aa:	fb 01       	movw	r30, r22
    50ac:	00 84       	ldd	r0, Z+8	; 0x08
    50ae:	f1 85       	ldd	r31, Z+9	; 0x09
    50b0:	e0 2d       	mov	r30, r0
    50b2:	19 95       	eicall
    50b4:	89 2b       	or	r24, r25
    50b6:	e1 f6       	brne	.-72     	; 0x5070 <fputc+0x10>
    50b8:	d8 01       	movw	r26, r16
    50ba:	16 96       	adiw	r26, 0x06	; 6
    50bc:	8d 91       	ld	r24, X+
    50be:	9c 91       	ld	r25, X
    50c0:	17 97       	sbiw	r26, 0x07	; 7
    50c2:	01 96       	adiw	r24, 0x01	; 1
    50c4:	17 96       	adiw	r26, 0x07	; 7
    50c6:	9c 93       	st	X, r25
    50c8:	8e 93       	st	-X, r24
    50ca:	16 97       	sbiw	r26, 0x06	; 6
    50cc:	ce 01       	movw	r24, r28
    50ce:	df 91       	pop	r29
    50d0:	cf 91       	pop	r28
    50d2:	1f 91       	pop	r17
    50d4:	0f 91       	pop	r16
    50d6:	08 95       	ret

000050d8 <__ultoa_invert>:
    50d8:	fa 01       	movw	r30, r20
    50da:	aa 27       	eor	r26, r26
    50dc:	28 30       	cpi	r18, 0x08	; 8
    50de:	51 f1       	breq	.+84     	; 0x5134 <__ultoa_invert+0x5c>
    50e0:	20 31       	cpi	r18, 0x10	; 16
    50e2:	81 f1       	breq	.+96     	; 0x5144 <__ultoa_invert+0x6c>
    50e4:	e8 94       	clt
    50e6:	6f 93       	push	r22
    50e8:	6e 7f       	andi	r22, 0xFE	; 254
    50ea:	6e 5f       	subi	r22, 0xFE	; 254
    50ec:	7f 4f       	sbci	r23, 0xFF	; 255
    50ee:	8f 4f       	sbci	r24, 0xFF	; 255
    50f0:	9f 4f       	sbci	r25, 0xFF	; 255
    50f2:	af 4f       	sbci	r26, 0xFF	; 255
    50f4:	b1 e0       	ldi	r27, 0x01	; 1
    50f6:	3e d0       	rcall	.+124    	; 0x5174 <__ultoa_invert+0x9c>
    50f8:	b4 e0       	ldi	r27, 0x04	; 4
    50fa:	3c d0       	rcall	.+120    	; 0x5174 <__ultoa_invert+0x9c>
    50fc:	67 0f       	add	r22, r23
    50fe:	78 1f       	adc	r23, r24
    5100:	89 1f       	adc	r24, r25
    5102:	9a 1f       	adc	r25, r26
    5104:	a1 1d       	adc	r26, r1
    5106:	68 0f       	add	r22, r24
    5108:	79 1f       	adc	r23, r25
    510a:	8a 1f       	adc	r24, r26
    510c:	91 1d       	adc	r25, r1
    510e:	a1 1d       	adc	r26, r1
    5110:	6a 0f       	add	r22, r26
    5112:	71 1d       	adc	r23, r1
    5114:	81 1d       	adc	r24, r1
    5116:	91 1d       	adc	r25, r1
    5118:	a1 1d       	adc	r26, r1
    511a:	20 d0       	rcall	.+64     	; 0x515c <__ultoa_invert+0x84>
    511c:	09 f4       	brne	.+2      	; 0x5120 <__ultoa_invert+0x48>
    511e:	68 94       	set
    5120:	3f 91       	pop	r19
    5122:	2a e0       	ldi	r18, 0x0A	; 10
    5124:	26 9f       	mul	r18, r22
    5126:	11 24       	eor	r1, r1
    5128:	30 19       	sub	r19, r0
    512a:	30 5d       	subi	r19, 0xD0	; 208
    512c:	31 93       	st	Z+, r19
    512e:	de f6       	brtc	.-74     	; 0x50e6 <__ultoa_invert+0xe>
    5130:	cf 01       	movw	r24, r30
    5132:	08 95       	ret
    5134:	46 2f       	mov	r20, r22
    5136:	47 70       	andi	r20, 0x07	; 7
    5138:	40 5d       	subi	r20, 0xD0	; 208
    513a:	41 93       	st	Z+, r20
    513c:	b3 e0       	ldi	r27, 0x03	; 3
    513e:	0f d0       	rcall	.+30     	; 0x515e <__ultoa_invert+0x86>
    5140:	c9 f7       	brne	.-14     	; 0x5134 <__ultoa_invert+0x5c>
    5142:	f6 cf       	rjmp	.-20     	; 0x5130 <__ultoa_invert+0x58>
    5144:	46 2f       	mov	r20, r22
    5146:	4f 70       	andi	r20, 0x0F	; 15
    5148:	40 5d       	subi	r20, 0xD0	; 208
    514a:	4a 33       	cpi	r20, 0x3A	; 58
    514c:	18 f0       	brcs	.+6      	; 0x5154 <__ultoa_invert+0x7c>
    514e:	49 5d       	subi	r20, 0xD9	; 217
    5150:	31 fd       	sbrc	r19, 1
    5152:	40 52       	subi	r20, 0x20	; 32
    5154:	41 93       	st	Z+, r20
    5156:	02 d0       	rcall	.+4      	; 0x515c <__ultoa_invert+0x84>
    5158:	a9 f7       	brne	.-22     	; 0x5144 <__ultoa_invert+0x6c>
    515a:	ea cf       	rjmp	.-44     	; 0x5130 <__ultoa_invert+0x58>
    515c:	b4 e0       	ldi	r27, 0x04	; 4
    515e:	a6 95       	lsr	r26
    5160:	97 95       	ror	r25
    5162:	87 95       	ror	r24
    5164:	77 95       	ror	r23
    5166:	67 95       	ror	r22
    5168:	ba 95       	dec	r27
    516a:	c9 f7       	brne	.-14     	; 0x515e <__ultoa_invert+0x86>
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	61 05       	cpc	r22, r1
    5170:	71 05       	cpc	r23, r1
    5172:	08 95       	ret
    5174:	9b 01       	movw	r18, r22
    5176:	ac 01       	movw	r20, r24
    5178:	0a 2e       	mov	r0, r26
    517a:	06 94       	lsr	r0
    517c:	57 95       	ror	r21
    517e:	47 95       	ror	r20
    5180:	37 95       	ror	r19
    5182:	27 95       	ror	r18
    5184:	ba 95       	dec	r27
    5186:	c9 f7       	brne	.-14     	; 0x517a <__ultoa_invert+0xa2>
    5188:	62 0f       	add	r22, r18
    518a:	73 1f       	adc	r23, r19
    518c:	84 1f       	adc	r24, r20
    518e:	95 1f       	adc	r25, r21
    5190:	a0 1d       	adc	r26, r0
    5192:	08 95       	ret

00005194 <_exit>:
    5194:	f8 94       	cli

00005196 <__stop_program>:
    5196:	ff cf       	rjmp	.-2      	; 0x5196 <__stop_program>
