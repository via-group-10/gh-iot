
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800200  000057f8  0000588c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b3c  0080040c  0080040c  00005a98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005a98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000918  00000000  00000000  00005b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bc23  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003672  00000000  00000000  0001206f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006136  00000000  00000000  000156e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f94  00000000  00000000  0001b818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003943  00000000  00000000  0001d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a1f1  00000000  00000000  000210ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0002b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c2       	rjmp	.+1312   	; 0x522 <__ctors_end>
       2:	00 00       	nop
       4:	af c2       	rjmp	.+1374   	; 0x564 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c2       	rjmp	.+1370   	; 0x564 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c2       	rjmp	.+1366   	; 0x564 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c2       	rjmp	.+1362   	; 0x564 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c2       	rjmp	.+1358   	; 0x564 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c2       	rjmp	.+1354   	; 0x564 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c2       	rjmp	.+1350   	; 0x564 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c2       	rjmp	.+1346   	; 0x564 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c2       	rjmp	.+1342   	; 0x564 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c2       	rjmp	.+1338   	; 0x564 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c2       	rjmp	.+1334   	; 0x564 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_12>
      34:	97 c2       	rjmp	.+1326   	; 0x564 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c2       	rjmp	.+1322   	; 0x564 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c2       	rjmp	.+1318   	; 0x564 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c2       	rjmp	.+1314   	; 0x564 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c2       	rjmp	.+1310   	; 0x564 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c2       	rjmp	.+1306   	; 0x564 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c2       	rjmp	.+1302   	; 0x564 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c2       	rjmp	.+1298   	; 0x564 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__vector_21>
      58:	85 c2       	rjmp	.+1290   	; 0x564 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c2       	rjmp	.+1286   	; 0x564 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 39 23 	jmp	0x4672	; 0x4672 <__vector_24>
      64:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <__vector_25>
      68:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__vector_26>
      6c:	7b c2       	rjmp	.+1270   	; 0x564 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c2       	rjmp	.+1266   	; 0x564 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c2       	rjmp	.+1262   	; 0x564 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c2       	rjmp	.+1258   	; 0x564 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c2       	rjmp	.+1254   	; 0x564 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c2       	rjmp	.+1250   	; 0x564 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c2       	rjmp	.+1246   	; 0x564 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c2       	rjmp	.+1242   	; 0x564 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c2       	rjmp	.+1238   	; 0x564 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__vector_36>
      94:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__vector_37>
      98:	65 c2       	rjmp	.+1226   	; 0x564 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__vector_39>
      a0:	61 c2       	rjmp	.+1218   	; 0x564 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c2       	rjmp	.+1214   	; 0x564 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c2       	rjmp	.+1210   	; 0x564 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c2       	rjmp	.+1206   	; 0x564 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c2       	rjmp	.+1202   	; 0x564 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c2       	rjmp	.+1198   	; 0x564 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c2       	rjmp	.+1194   	; 0x564 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c2       	rjmp	.+1190   	; 0x564 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c2       	rjmp	.+1186   	; 0x564 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c2       	rjmp	.+1182   	; 0x564 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c2       	rjmp	.+1178   	; 0x564 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 46 20 	jmp	0x408c	; 0x408c <__vector_51>
      d0:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__vector_52>
      d4:	47 c2       	rjmp	.+1166   	; 0x564 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__vector_54>
      dc:	0c 94 2e 21 	jmp	0x425c	; 0x425c <__vector_55>
      e0:	41 c2       	rjmp	.+1154   	; 0x564 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 02       	muls	r16, r23
      e6:	07 02       	muls	r16, r23
      e8:	07 02       	muls	r16, r23
      ea:	41 02       	muls	r20, r17
      ec:	49 02       	muls	r20, r25
      ee:	5f 02       	muls	r21, r31
      f0:	07 02       	muls	r16, r23
      f2:	07 02       	muls	r16, r23
      f4:	41 02       	muls	r20, r17
      f6:	49 02       	muls	r20, r25
      f8:	d7 24       	eor	r13, r7
      fa:	47 25       	eor	r20, r7
      fc:	47 25       	eor	r20, r7
      fe:	47 25       	eor	r20, r7
     100:	47 25       	eor	r20, r7
     102:	47 25       	eor	r20, r7
     104:	47 25       	eor	r20, r7
     106:	47 25       	eor	r20, r7
     108:	d7 24       	eor	r13, r7
     10a:	47 25       	eor	r20, r7
     10c:	47 25       	eor	r20, r7
     10e:	47 25       	eor	r20, r7
     110:	47 25       	eor	r20, r7
     112:	47 25       	eor	r20, r7
     114:	47 25       	eor	r20, r7
     116:	47 25       	eor	r20, r7
     118:	d9 24       	eor	r13, r9
     11a:	47 25       	eor	r20, r7
     11c:	47 25       	eor	r20, r7
     11e:	47 25       	eor	r20, r7
     120:	47 25       	eor	r20, r7
     122:	47 25       	eor	r20, r7
     124:	47 25       	eor	r20, r7
     126:	47 25       	eor	r20, r7
     128:	47 25       	eor	r20, r7
     12a:	47 25       	eor	r20, r7
     12c:	47 25       	eor	r20, r7
     12e:	47 25       	eor	r20, r7
     130:	47 25       	eor	r20, r7
     132:	47 25       	eor	r20, r7
     134:	47 25       	eor	r20, r7
     136:	47 25       	eor	r20, r7
     138:	d9 24       	eor	r13, r9
     13a:	47 25       	eor	r20, r7
     13c:	47 25       	eor	r20, r7
     13e:	47 25       	eor	r20, r7
     140:	47 25       	eor	r20, r7
     142:	47 25       	eor	r20, r7
     144:	47 25       	eor	r20, r7
     146:	47 25       	eor	r20, r7
     148:	47 25       	eor	r20, r7
     14a:	47 25       	eor	r20, r7
     14c:	47 25       	eor	r20, r7
     14e:	47 25       	eor	r20, r7
     150:	47 25       	eor	r20, r7
     152:	47 25       	eor	r20, r7
     154:	47 25       	eor	r20, r7
     156:	47 25       	eor	r20, r7
     158:	43 25       	eor	r20, r3
     15a:	47 25       	eor	r20, r7
     15c:	47 25       	eor	r20, r7
     15e:	47 25       	eor	r20, r7
     160:	47 25       	eor	r20, r7
     162:	47 25       	eor	r20, r7
     164:	47 25       	eor	r20, r7
     166:	47 25       	eor	r20, r7
     168:	0e 25       	eor	r16, r14
     16a:	47 25       	eor	r20, r7
     16c:	47 25       	eor	r20, r7
     16e:	47 25       	eor	r20, r7
     170:	47 25       	eor	r20, r7
     172:	47 25       	eor	r20, r7
     174:	47 25       	eor	r20, r7
     176:	47 25       	eor	r20, r7
     178:	47 25       	eor	r20, r7
     17a:	47 25       	eor	r20, r7
     17c:	47 25       	eor	r20, r7
     17e:	47 25       	eor	r20, r7
     180:	47 25       	eor	r20, r7
     182:	47 25       	eor	r20, r7
     184:	47 25       	eor	r20, r7
     186:	47 25       	eor	r20, r7
     188:	02 25       	eor	r16, r2
     18a:	47 25       	eor	r20, r7
     18c:	47 25       	eor	r20, r7
     18e:	47 25       	eor	r20, r7
     190:	47 25       	eor	r20, r7
     192:	47 25       	eor	r20, r7
     194:	47 25       	eor	r20, r7
     196:	47 25       	eor	r20, r7
     198:	26 25       	eor	r18, r6
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <sevenSegmentDisplayController_create+0x28>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     21c:	09 e0       	ldi	r16, 0x09	; 9
     21e:	1e e0       	ldi	r17, 0x0E	; 14
     220:	0f 2e       	mov	r0, r31
     222:	f9 e3       	ldi	r31, 0x39	; 57
     224:	ef 2e       	mov	r14, r31
     226:	fe e0       	ldi	r31, 0x0E	; 14
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <uxDeletedTasksWaitingCleanUp>
     230:	88 23       	and	r24, r24
     232:	29 f1       	breq	.+74     	; 0x27e <prvIdleTask+0x62>
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	0f 92       	push	r0
     23a:	d8 01       	movw	r26, r16
     23c:	17 96       	adiw	r26, 0x07	; 7
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	c0 85       	ldd	r28, Z+8	; 0x08
     246:	d1 85       	ldd	r29, Z+9	; 0x09
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
     250:	80 91 fc 0d 	lds	r24, 0x0DFC	; 0x800dfc <uxCurrentNumberOfTasks>
     254:	81 50       	subi	r24, 0x01	; 1
     256:	80 93 fc 0d 	sts	0x0DFC, r24	; 0x800dfc <uxCurrentNumberOfTasks>
     25a:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <uxDeletedTasksWaitingCleanUp>
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <uxDeletedTasksWaitingCleanUp>
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	8b 8d       	ldd	r24, Y+27	; 0x1b
     26a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     26c:	0e 94 35 0a 	call	0x146a	; 0x146a <vPortFree>
     270:	ce 01       	movw	r24, r28
     272:	0e 94 35 0a 	call	0x146a	; 0x146a <vPortFree>
     276:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <uxDeletedTasksWaitingCleanUp>
     27a:	81 11       	cpse	r24, r1
     27c:	db cf       	rjmp	.-74     	; 0x234 <prvIdleTask+0x18>
     27e:	f7 01       	movw	r30, r14
     280:	80 81       	ld	r24, Z
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	10 f0       	brcs	.+4      	; 0x28a <prvIdleTask+0x6e>
     286:	0e 94 3a 0b 	call	0x1674	; 0x1674 <vPortYield>
     28a:	0e 94 c5 18 	call	0x318a	; 0x318a <vApplicationIdleHook>
     28e:	ce cf       	rjmp	.-100    	; 0x22c <prvIdleTask+0x10>

00000290 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	60 97       	sbiw	r28, 0x10	; 16
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	9a 87       	std	Y+10, r25	; 0x0a
     2aa:	89 87       	std	Y+9, r24	; 0x09
     2ac:	81 2c       	mov	r8, r1
     2ae:	91 2c       	mov	r9, r1
     2b0:	a1 2c       	mov	r10, r1
     2b2:	b1 2c       	mov	r11, r1
     2b4:	69 84       	ldd	r6, Y+9	; 0x09
     2b6:	7a 84       	ldd	r7, Y+10	; 0x0a
     2b8:	e0 91 b3 0e 	lds	r30, 0x0EB3	; 0x800eb3 <pxCurrentTimerList>
     2bc:	f0 91 b4 0e 	lds	r31, 0x0EB4	; 0x800eb4 <pxCurrentTimerList+0x1>
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <prvTimerTask+0x38>
     2c6:	13 c1       	rjmp	.+550    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     2c8:	07 80       	ldd	r0, Z+7	; 0x07
     2ca:	f0 85       	ldd	r31, Z+8	; 0x08
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 80       	ld	r2, Z
     2d0:	31 80       	ldd	r3, Z+1	; 0x01
     2d2:	42 80       	ldd	r4, Z+2	; 0x02
     2d4:	53 80       	ldd	r5, Z+3	; 0x03
     2d6:	0e 94 ab 11 	call	0x2356	; 0x2356 <vTaskSuspendAll>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 2f 18 	call	0x305e	; 0x305e <prvSampleTimeNow>
     2e2:	6b 87       	std	Y+11, r22	; 0x0b
     2e4:	7c 87       	std	Y+12, r23	; 0x0c
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
     2e8:	9e 87       	std	Y+14, r25	; 0x0e
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	81 11       	cpse	r24, r1
     2ee:	67 c0       	rjmp	.+206    	; 0x3be <prvTimerTask+0x12e>
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2f6:	be 85       	ldd	r27, Y+14	; 0x0e
     2f8:	82 15       	cp	r24, r2
     2fa:	93 05       	cpc	r25, r3
     2fc:	a4 05       	cpc	r26, r4
     2fe:	b5 05       	cpc	r27, r5
     300:	08 f4       	brcc	.+2      	; 0x304 <prvTimerTask+0x74>
     302:	45 c0       	rjmp	.+138    	; 0x38e <prvTimerTask+0xfe>
     304:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>
     308:	e0 91 b3 0e 	lds	r30, 0x0EB3	; 0x800eb3 <pxCurrentTimerList>
     30c:	f0 91 b4 0e 	lds	r31, 0x0EB4	; 0x800eb4 <pxCurrentTimerList+0x1>
     310:	07 80       	ldd	r0, Z+7	; 0x07
     312:	f0 85       	ldd	r31, Z+8	; 0x08
     314:	e0 2d       	mov	r30, r0
     316:	a0 85       	ldd	r26, Z+8	; 0x08
     318:	b1 85       	ldd	r27, Z+9	; 0x09
     31a:	b8 8b       	std	Y+16, r27	; 0x10
     31c:	af 87       	std	Y+15, r26	; 0x0f
     31e:	cd 01       	movw	r24, r26
     320:	02 96       	adiw	r24, 0x02	; 2
     322:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
     326:	ef 85       	ldd	r30, Y+15	; 0x0f
     328:	f8 89       	ldd	r31, Y+16	; 0x10
     32a:	86 89       	ldd	r24, Z+22	; 0x16
     32c:	82 ff       	sbrs	r24, 2
     32e:	21 c0       	rjmp	.+66     	; 0x372 <prvTimerTask+0xe2>
     330:	46 85       	ldd	r20, Z+14	; 0x0e
     332:	57 85       	ldd	r21, Z+15	; 0x0f
     334:	60 89       	ldd	r22, Z+16	; 0x10
     336:	71 89       	ldd	r23, Z+17	; 0x11
     338:	42 0d       	add	r20, r2
     33a:	53 1d       	adc	r21, r3
     33c:	64 1d       	adc	r22, r4
     33e:	75 1d       	adc	r23, r5
     340:	72 01       	movw	r14, r4
     342:	61 01       	movw	r12, r2
     344:	0b 85       	ldd	r16, Y+11	; 0x0b
     346:	1c 85       	ldd	r17, Y+12	; 0x0c
     348:	2d 85       	ldd	r18, Y+13	; 0x0d
     34a:	3e 85       	ldd	r19, Y+14	; 0x0e
     34c:	cf 01       	movw	r24, r30
     34e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	99 f0       	breq	.+38     	; 0x37c <prvTimerTask+0xec>
     356:	c8 2c       	mov	r12, r8
     358:	d9 2c       	mov	r13, r9
     35a:	ea 2c       	mov	r14, r10
     35c:	fb 2c       	mov	r15, r11
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a2 01       	movw	r20, r4
     364:	91 01       	movw	r18, r2
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	8f 85       	ldd	r24, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTimerGenericCommand>
     370:	05 c0       	rjmp	.+10     	; 0x37c <prvTimerTask+0xec>
     372:	8e 7f       	andi	r24, 0xFE	; 254
     374:	af 85       	ldd	r26, Y+15	; 0x0f
     376:	b8 89       	ldd	r27, Y+16	; 0x10
     378:	56 96       	adiw	r26, 0x16	; 22
     37a:	8c 93       	st	X, r24
     37c:	af 85       	ldd	r26, Y+15	; 0x0f
     37e:	b8 89       	ldd	r27, Y+16	; 0x10
     380:	54 96       	adiw	r26, 0x14	; 20
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	55 97       	sbiw	r26, 0x15	; 21
     388:	cd 01       	movw	r24, r26
     38a:	19 95       	eicall
     38c:	a1 c0       	rjmp	.+322    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	b2 01       	movw	r22, r4
     392:	a1 01       	movw	r20, r2
     394:	8b 85       	ldd	r24, Y+11	; 0x0b
     396:	9c 85       	ldd	r25, Y+12	; 0x0c
     398:	ad 85       	ldd	r26, Y+13	; 0x0d
     39a:	be 85       	ldd	r27, Y+14	; 0x0e
     39c:	48 1b       	sub	r20, r24
     39e:	59 0b       	sbc	r21, r25
     3a0:	6a 0b       	sbc	r22, r26
     3a2:	7b 0b       	sbc	r23, r27
     3a4:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <xTimerQueue>
     3a8:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
     3ac:	0e 94 67 0f 	call	0x1ece	; 0x1ece <vQueueWaitForMessageRestricted>
     3b0:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>
     3b4:	81 11       	cpse	r24, r1
     3b6:	8c c0       	rjmp	.+280    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3b8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <vPortYield>
     3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3be:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>
     3c2:	86 c0       	rjmp	.+268    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <prvTimerTask+0x13c>
     3ca:	82 c0       	rjmp	.+260    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3cc:	4e 80       	ldd	r4, Y+6	; 0x06
     3ce:	5f 80       	ldd	r5, Y+7	; 0x07
     3d0:	d2 01       	movw	r26, r4
     3d2:	1c 96       	adiw	r26, 0x0c	; 12
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	1d 97       	sbiw	r26, 0x0d	; 13
     3da:	89 2b       	or	r24, r25
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <prvTimerTask+0x156>
     3de:	c2 01       	movw	r24, r4
     3e0:	02 96       	adiw	r24, 0x02	; 2
     3e2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
     3e6:	ce 01       	movw	r24, r28
     3e8:	08 96       	adiw	r24, 0x08	; 8
     3ea:	0e 94 2f 18 	call	0x305e	; 0x305e <prvSampleTimeNow>
     3ee:	8b 01       	movw	r16, r22
     3f0:	9c 01       	movw	r18, r24
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	0e 2e       	mov	r0, r30
     3f6:	00 0c       	add	r0, r0
     3f8:	ff 0b       	sbc	r31, r31
     3fa:	ea 30       	cpi	r30, 0x0A	; 10
     3fc:	f1 05       	cpc	r31, r1
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	67 c0       	rjmp	.+206    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     402:	88 27       	eor	r24, r24
     404:	ee 58       	subi	r30, 0x8E	; 142
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	8f 4f       	sbci	r24, 0xFF	; 255
     40a:	0c 94 86 27 	jmp	0x4f0c	; 0x4f0c <__tablejump2__>
     40e:	f2 01       	movw	r30, r4
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	81 60       	ori	r24, 0x01	; 1
     414:	86 8b       	std	Z+22, r24	; 0x16
     416:	ca 80       	ldd	r12, Y+2	; 0x02
     418:	db 80       	ldd	r13, Y+3	; 0x03
     41a:	ec 80       	ldd	r14, Y+4	; 0x04
     41c:	fd 80       	ldd	r15, Y+5	; 0x05
     41e:	46 85       	ldd	r20, Z+14	; 0x0e
     420:	57 85       	ldd	r21, Z+15	; 0x0f
     422:	60 89       	ldd	r22, Z+16	; 0x10
     424:	71 89       	ldd	r23, Z+17	; 0x11
     426:	4c 0d       	add	r20, r12
     428:	5d 1d       	adc	r21, r13
     42a:	6e 1d       	adc	r22, r14
     42c:	7f 1d       	adc	r23, r15
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	4b c0       	rjmp	.+150    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43a:	d2 01       	movw	r26, r4
     43c:	54 96       	adiw	r26, 0x14	; 20
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	55 97       	sbiw	r26, 0x15	; 21
     444:	c2 01       	movw	r24, r4
     446:	19 95       	eicall
     448:	f2 01       	movw	r30, r4
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	82 ff       	sbrs	r24, 2
     44e:	40 c0       	rjmp	.+128    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     450:	4a 81       	ldd	r20, Y+2	; 0x02
     452:	5b 81       	ldd	r21, Y+3	; 0x03
     454:	6c 81       	ldd	r22, Y+4	; 0x04
     456:	7d 81       	ldd	r23, Y+5	; 0x05
     458:	86 85       	ldd	r24, Z+14	; 0x0e
     45a:	97 85       	ldd	r25, Z+15	; 0x0f
     45c:	a0 89       	ldd	r26, Z+16	; 0x10
     45e:	b1 89       	ldd	r27, Z+17	; 0x11
     460:	9a 01       	movw	r18, r20
     462:	ab 01       	movw	r20, r22
     464:	28 0f       	add	r18, r24
     466:	39 1f       	adc	r19, r25
     468:	4a 1f       	adc	r20, r26
     46a:	5b 1f       	adc	r21, r27
     46c:	c8 2c       	mov	r12, r8
     46e:	d9 2c       	mov	r13, r9
     470:	ea 2c       	mov	r14, r10
     472:	fb 2c       	mov	r15, r11
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	c2 01       	movw	r24, r4
     47c:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTimerGenericCommand>
     480:	27 c0       	rjmp	.+78     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     482:	d2 01       	movw	r26, r4
     484:	56 96       	adiw	r26, 0x16	; 22
     486:	8c 91       	ld	r24, X
     488:	56 97       	sbiw	r26, 0x16	; 22
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	8c 93       	st	X, r24
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     492:	f2 01       	movw	r30, r4
     494:	86 89       	ldd	r24, Z+22	; 0x16
     496:	81 60       	ori	r24, 0x01	; 1
     498:	86 8b       	std	Z+22, r24	; 0x16
     49a:	4a 81       	ldd	r20, Y+2	; 0x02
     49c:	5b 81       	ldd	r21, Y+3	; 0x03
     49e:	6c 81       	ldd	r22, Y+4	; 0x04
     4a0:	7d 81       	ldd	r23, Y+5	; 0x05
     4a2:	46 87       	std	Z+14, r20	; 0x0e
     4a4:	57 87       	std	Z+15, r21	; 0x0f
     4a6:	60 8b       	std	Z+16, r22	; 0x10
     4a8:	71 8b       	std	Z+17, r23	; 0x11
     4aa:	40 0f       	add	r20, r16
     4ac:	51 1f       	adc	r21, r17
     4ae:	62 1f       	adc	r22, r18
     4b0:	73 1f       	adc	r23, r19
     4b2:	68 01       	movw	r12, r16
     4b4:	79 01       	movw	r14, r18
     4b6:	c2 01       	movw	r24, r4
     4b8:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4be:	f2 01       	movw	r30, r4
     4c0:	86 89       	ldd	r24, Z+22	; 0x16
     4c2:	81 fd       	sbrc	r24, 1
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c6:	c2 01       	movw	r24, r4
     4c8:	d0 d7       	rcall	.+4000   	; 0x146a <vPortFree>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	86 8b       	std	Z+22, r24	; 0x16
     4d0:	28 2d       	mov	r18, r8
     4d2:	39 2d       	mov	r19, r9
     4d4:	4a 2d       	mov	r20, r10
     4d6:	5b 2d       	mov	r21, r11
     4d8:	66 2d       	mov	r22, r6
     4da:	77 2d       	mov	r23, r7
     4dc:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <xTimerQueue>
     4e0:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
     4e4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <xQueueReceive>
     4e8:	81 11       	cpse	r24, r1
     4ea:	6c cf       	rjmp	.-296    	; 0x3c4 <prvTimerTask+0x134>
     4ec:	e5 ce       	rjmp	.-566    	; 0x2b8 <prvTimerTask+0x28>
     4ee:	0e 94 ab 11 	call	0x2356	; 0x2356 <vTaskSuspendAll>
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 2f 18 	call	0x305e	; 0x305e <prvSampleTimeNow>
     4fa:	6b 87       	std	Y+11, r22	; 0x0b
     4fc:	7c 87       	std	Y+12, r23	; 0x0c
     4fe:	8d 87       	std	Y+13, r24	; 0x0d
     500:	9e 87       	std	Y+14, r25	; 0x0e
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	81 11       	cpse	r24, r1
     506:	5b cf       	rjmp	.-330    	; 0x3be <prvTimerTask+0x12e>
     508:	e0 91 b1 0e 	lds	r30, 0x0EB1	; 0x800eb1 <pxOverflowTimerList>
     50c:	f0 91 b2 0e 	lds	r31, 0x0EB2	; 0x800eb2 <pxOverflowTimerList+0x1>
     510:	80 81       	ld	r24, Z
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	81 11       	cpse	r24, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	28 2c       	mov	r2, r8
     51a:	39 2c       	mov	r3, r9
     51c:	4a 2c       	mov	r4, r10
     51e:	5b 2c       	mov	r5, r11
     520:	37 cf       	rjmp	.-402    	; 0x390 <prvTimerTask+0x100>

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d1 e2       	ldi	r29, 0x21	; 33
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	0c bf       	out	0x3c, r16	; 60

00000532 <__do_copy_data>:
     532:	14 e0       	ldi	r17, 0x04	; 4
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b2 e0       	ldi	r27, 0x02	; 2
     538:	e8 ef       	ldi	r30, 0xF8	; 248
     53a:	f7 e5       	ldi	r31, 0x57	; 87
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	0b bf       	out	0x3b, r16	; 59
     540:	02 c0       	rjmp	.+4      	; 0x546 <__do_copy_data+0x14>
     542:	07 90       	elpm	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	ac 30       	cpi	r26, 0x0C	; 12
     548:	b1 07       	cpc	r27, r17
     54a:	d9 f7       	brne	.-10     	; 0x542 <__do_copy_data+0x10>

0000054c <__do_clear_bss>:
     54c:	2f e0       	ldi	r18, 0x0F	; 15
     54e:	ac e0       	ldi	r26, 0x0C	; 12
     550:	b4 e0       	ldi	r27, 0x04	; 4
     552:	01 c0       	rjmp	.+2      	; 0x556 <.do_clear_bss_start>

00000554 <.do_clear_bss_loop>:
     554:	1d 92       	st	X+, r1

00000556 <.do_clear_bss_start>:
     556:	a8 34       	cpi	r26, 0x48	; 72
     558:	b2 07       	cpc	r27, r18
     55a:	e1 f7       	brne	.-8      	; 0x554 <.do_clear_bss_loop>
     55c:	0e 94 0d 19 	call	0x321a	; 0x321a <main>
     560:	0c 94 fa 2b 	jmp	0x57f4	; 0x57f4 <_exit>

00000564 <__bad_interrupt>:
     564:	4d cd       	rjmp	.-1382   	; 0x0 <__vectors>

00000566 <carbonDioxideController_task>:
		printf("CO2 sensor does not OK\n");
	}
	rc = mh_z19_takeMeassuring();	
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*1000));
	//
	PORTA ^= _BV(PA2);
     566:	68 94       	set
     568:	99 24       	eor	r9, r9
     56a:	92 f8       	bld	r9, 2
	mh_z19_getCo2Ppm(&appm);
	float u = appm;
	int a = u;
	int b = u*10000-a*10000;
	printf("Carbon:%d.%d\n",a,b);
     56c:	0f 2e       	mov	r0, r31
     56e:	f0 e1       	ldi	r31, 0x10	; 16
     570:	af 2e       	mov	r10, r31
     572:	f7 e2       	ldi	r31, 0x27	; 39
     574:	bf 2e       	mov	r11, r31
     576:	f0 2d       	mov	r31, r0
     578:	06 e6       	ldi	r16, 0x66	; 102
     57a:	12 e0       	ldi	r17, 0x02	; 2
	//mh_z19_setAutoCalibration(false);
	//mh_z19_injectCallBack(myCo2CallBack(appm));
	for(;;)
	{
	
	if (rc != MHZ19_OK)
     57c:	80 91 29 0f 	lds	r24, 0x0F29	; 0x800f29 <rc>
     580:	88 23       	and	r24, r24
     582:	21 f0       	breq	.+8      	; 0x58c <carbonDioxideController_task+0x26>
	{
		printf("CO2 sensor does not OK\n");
     584:	8f e4       	ldi	r24, 0x4F	; 79
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
	}
	rc = mh_z19_takeMeassuring();	
     58c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <mh_z19_takeMeassuring>
     590:	80 93 29 0f 	sts	0x0F29, r24	; 0x800f29 <rc>
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*1000));
     594:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <carbon>
     598:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <carbon+0x1>
     59c:	83 d3       	rcall	.+1798   	; 0xca4 <carbonDioxideSensor_getReportInterval>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	4a e7       	ldi	r20, 0x7A	; 122
     5a4:	54 e4       	ldi	r21, 0x44	; 68
     5a6:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     5aa:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     5ae:	9b 01       	movw	r18, r22
     5b0:	ac 01       	movw	r20, r24
     5b2:	ae e3       	ldi	r26, 0x3E	; 62
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     5ba:	28 ee       	ldi	r18, 0xE8	; 232
     5bc:	33 e0       	ldi	r19, 0x03	; 3
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     5c6:	ca 01       	movw	r24, r20
     5c8:	b9 01       	movw	r22, r18
     5ca:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
	//
	PORTA ^= _BV(PA2);
     5ce:	82 b1       	in	r24, 0x02	; 2
     5d0:	89 25       	eor	r24, r9
     5d2:	82 b9       	out	0x02, r24	; 2
	mh_z19_getCo2Ppm(&appm);
     5d4:	8a e2       	ldi	r24, 0x2A	; 42
     5d6:	9f e0       	ldi	r25, 0x0F	; 15
     5d8:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <mh_z19_getCo2Ppm>
	float u = appm;
     5dc:	c0 91 2a 0f 	lds	r28, 0x0F2A	; 0x800f2a <appm>
     5e0:	d0 91 2b 0f 	lds	r29, 0x0F2B	; 0x800f2b <appm+0x1>
     5e4:	be 01       	movw	r22, r28
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 13 1a 	call	0x3426	; 0x3426 <__floatunsisf>
     5ee:	6b 01       	movw	r12, r22
     5f0:	7c 01       	movw	r14, r24
	int a = u;
	int b = u*10000-a*10000;
	printf("Carbon:%d.%d\n",a,b);
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e4       	ldi	r19, 0x40	; 64
     5f6:	4c e1       	ldi	r20, 0x1C	; 28
     5f8:	56 e4       	ldi	r21, 0x46	; 70
     5fa:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     5fe:	2b 01       	movw	r4, r22
     600:	3c 01       	movw	r6, r24
     602:	ca 9d       	mul	r28, r10
     604:	b0 01       	movw	r22, r0
     606:	cb 9d       	mul	r28, r11
     608:	70 0d       	add	r23, r0
     60a:	da 9d       	mul	r29, r10
     60c:	70 0d       	add	r23, r0
     60e:	11 24       	eor	r1, r1
     610:	07 2e       	mov	r0, r23
     612:	00 0c       	add	r0, r0
     614:	88 0b       	sbc	r24, r24
     616:	99 0b       	sbc	r25, r25
     618:	0e 94 15 1a 	call	0x342a	; 0x342a <__floatsisf>
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
     620:	c3 01       	movw	r24, r6
     622:	b2 01       	movw	r22, r4
     624:	0e 94 15 19 	call	0x322a	; 0x322a <__subsf3>
     628:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixsfsi>
     62c:	7f 93       	push	r23
     62e:	6f 93       	push	r22
     630:	df 93       	push	r29
     632:	cf 93       	push	r28
     634:	1f 93       	push	r17
     636:	0f 93       	push	r16
     638:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
	carbonDioxideSensor_setValue(carbon,u);
     63c:	b7 01       	movw	r22, r14
     63e:	a6 01       	movw	r20, r12
     640:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <carbon>
     644:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <carbon+0x1>
     648:	04 d3       	rcall	.+1544   	; 0xc52 <carbonDioxideSensor_setValue>
	myTime_t time = carbonDioxideSensor_getUpdateTime(carbon);
     64a:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <carbon>
     64e:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <carbon+0x1>
     652:	74 d3       	rcall	.+1768   	; 0xd3c <carbonDioxideSensor_getUpdateTime>
	}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	8d cf       	rjmp	.-230    	; 0x57c <carbonDioxideController_task+0x16>

00000662 <CO2SensorController_create>:
}

void CO2SensorController_create(carbonDioxideSensor_t co2)
{
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
		carbon = co2;
     668:	90 93 2d 0f 	sts	0x0F2D, r25	; 0x800f2d <carbon+0x1>
     66c:	80 93 2c 0f 	sts	0x0F2C, r24	; 0x800f2c <carbon>
		printf("CO2 sensor started!!!\n");
     670:	84 e7       	ldi	r24, 0x74	; 116
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
		xTaskCreate(carbonDioxideController_task,"COXTask",configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     678:	e1 2c       	mov	r14, r1
     67a:	f1 2c       	mov	r15, r1
     67c:	01 e0       	ldi	r16, 0x01	; 1
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 ec       	ldi	r20, 0xC0	; 192
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	6a e8       	ldi	r22, 0x8A	; 138
     688:	72 e0       	ldi	r23, 0x02	; 2
     68a:	83 eb       	ldi	r24, 0xB3	; 179
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
		//vTaskStartScheduler();
}
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <HumSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     69a:	0f 2e       	mov	r0, r31
     69c:	f2 e9       	ldi	r31, 0x92	; 146
     69e:	8f 2e       	mov	r8, r31
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	9f 2e       	mov	r9, r31
     6a4:	f0 2d       	mov	r31, r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
		PORTA ^= _BV(PA1);
     6a6:	12 e0       	ldi	r17, 0x02	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Humility sensor didn't measure!!!");
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f6 eb       	ldi	r31, 0xB6	; 182
     6ac:	2f 2e       	mov	r2, r31
     6ae:	f2 e0       	ldi	r31, 0x02	; 2
     6b0:	3f 2e       	mov	r3, r31
     6b2:	f0 2d       	mov	r31, r0
		humiditySensor_setValue(humSensor,humility);
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
		printf("Hum%d.%d",a,b);
     6b4:	0f 2e       	mov	r0, r31
     6b6:	f0 e1       	ldi	r31, 0x10	; 16
     6b8:	af 2e       	mov	r10, r31
     6ba:	f7 e2       	ldi	r31, 0x27	; 39
     6bc:	bf 2e       	mov	r11, r31
     6be:	f0 2d       	mov	r31, r0
     6c0:	c8 ed       	ldi	r28, 0xD8	; 216
     6c2:	d2 e0       	ldi	r29, 0x02	; 2

void HumSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     6c4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <hih8120_wakeup>
     6c8:	88 23       	and	r24, r24
     6ca:	31 f0       	breq	.+12     	; 0x6d8 <HumSensorController_task+0x3e>
		{
			printf("Temperature sensor didn't wakeup!!!");
     6cc:	9f 92       	push	r9
     6ce:	8f 92       	push	r8
     6d0:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     6d8:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <humSensor>
     6dc:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <humSensor+0x1>
     6e0:	a6 d3       	rcall	.+1868   	; 0xe2e <humiditySensor_getReportInterval>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	4a ef       	ldi	r20, 0xFA	; 250
     6e8:	53 e4       	ldi	r21, 0x43	; 67
     6ea:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     6ee:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	ae e3       	ldi	r26, 0x3E	; 62
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     6fe:	28 ee       	ldi	r18, 0xE8	; 232
     700:	33 e0       	ldi	r19, 0x03	; 3
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     70a:	ca 01       	movw	r24, r20
     70c:	b9 01       	movw	r22, r18
     70e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
		PORTA ^= _BV(PA1);
     712:	82 b1       	in	r24, 0x02	; 2
     714:	81 27       	eor	r24, r17
     716:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     718:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <hih8120_measure>
     71c:	88 23       	and	r24, r24
     71e:	31 f0       	breq	.+12     	; 0x72c <HumSensorController_task+0x92>
		{
			printf("Humility sensor didn't measure!!!");
     720:	3f 92       	push	r3
     722:	2f 92       	push	r2
     724:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     72c:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <humSensor>
     730:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <humSensor+0x1>
     734:	7c d3       	rcall	.+1784   	; 0xe2e <humiditySensor_getReportInterval>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4a ef       	ldi	r20, 0xFA	; 250
     73c:	53 e4       	ldi	r21, 0x43	; 67
     73e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     742:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     746:	9b 01       	movw	r18, r22
     748:	ac 01       	movw	r20, r24
     74a:	ae e3       	ldi	r26, 0x3E	; 62
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     752:	28 ee       	ldi	r18, 0xE8	; 232
     754:	33 e0       	ldi	r19, 0x03	; 3
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     75e:	ca 01       	movw	r24, r20
     760:	b9 01       	movw	r22, r18
     762:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
		PORTA ^= _BV(PA1);
     766:	82 b1       	in	r24, 0x02	; 2
     768:	81 27       	eor	r24, r17
     76a:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		humility = hih8120_getHumidity();
     76c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <hih8120_getHumidity>
     770:	ab 01       	movw	r20, r22
     772:	bc 01       	movw	r22, r24
     774:	40 93 0c 04 	sts	0x040C, r20	; 0x80040c <__data_end>
     778:	50 93 0d 04 	sts	0x040D, r21	; 0x80040d <__data_end+0x1>
     77c:	60 93 0e 04 	sts	0x040E, r22	; 0x80040e <__data_end+0x2>
     780:	70 93 0f 04 	sts	0x040F, r23	; 0x80040f <__data_end+0x3>
		humiditySensor_setValue(humSensor,humility);
     784:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <humSensor>
     788:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <humSensor+0x1>
     78c:	28 d3       	rcall	.+1616   	; 0xdde <humiditySensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
     78e:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <humSensor>
     792:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <humSensor+0x1>
     796:	70 d3       	rcall	.+1760   	; 0xe78 <humiditySensor_getValue>
     798:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixsfsi>
     79c:	6b 01       	movw	r12, r22
     79e:	7c 01       	movw	r14, r24
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
     7a0:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <humSensor>
     7a4:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <humSensor+0x1>
     7a8:	67 d3       	rcall	.+1742   	; 0xe78 <humiditySensor_getValue>
     7aa:	2b 01       	movw	r4, r22
     7ac:	3c 01       	movw	r6, r24
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
     7ae:	80 91 2e 0f 	lds	r24, 0x0F2E	; 0x800f2e <humSensor>
     7b2:	90 91 2f 0f 	lds	r25, 0x0F2F	; 0x800f2f <humSensor+0x1>
     7b6:	85 d3       	rcall	.+1802   	; 0xec2 <humiditySensor_getUpdateTime>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
		printf("Hum%d.%d",a,b);
     7ba:	30 e4       	ldi	r19, 0x40	; 64
     7bc:	4c e1       	ldi	r20, 0x1C	; 28
     7be:	56 e4       	ldi	r21, 0x46	; 70
     7c0:	c3 01       	movw	r24, r6
     7c2:	b2 01       	movw	r22, r4
     7c4:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     7c8:	2b 01       	movw	r4, r22
     7ca:	3c 01       	movw	r6, r24
     7cc:	ac 9c       	mul	r10, r12
     7ce:	b0 01       	movw	r22, r0
     7d0:	ad 9c       	mul	r10, r13
     7d2:	70 0d       	add	r23, r0
     7d4:	bc 9c       	mul	r11, r12
     7d6:	70 0d       	add	r23, r0
     7d8:	11 24       	eor	r1, r1
     7da:	07 2e       	mov	r0, r23
     7dc:	00 0c       	add	r0, r0
     7de:	88 0b       	sbc	r24, r24
     7e0:	99 0b       	sbc	r25, r25
     7e2:	0e 94 15 1a 	call	0x342a	; 0x342a <__floatsisf>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	c3 01       	movw	r24, r6
     7ec:	b2 01       	movw	r22, r4
     7ee:	0e 94 15 19 	call	0x322a	; 0x322a <__subsf3>
     7f2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixsfsi>
     7f6:	7f 93       	push	r23
     7f8:	6f 93       	push	r22
     7fa:	df 92       	push	r13
     7fc:	cf 92       	push	r12
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
     806:	0f 90       	pop	r0
	}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	58 cf       	rjmp	.-336    	; 0x6c4 <HumSensorController_task+0x2a>

00000814 <HumSensorController_create>:
     814:	ef 92       	push	r14
}

void HumSensorController_create(humiditySensor_t sensor)
{
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
	humSensor = sensor;
     81a:	90 93 2f 0f 	sts	0x0F2F, r25	; 0x800f2f <humSensor+0x1>
     81e:	80 93 2e 0f 	sts	0x0F2E, r24	; 0x800f2e <humSensor>
		printf("Humility sensor started!!!\n");
     822:	81 ee       	ldi	r24, 0xE1	; 225
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
		xTaskCreate(HumSensorController_task, "HumSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     82a:	e1 2c       	mov	r14, r1
     82c:	f1 2c       	mov	r15, r1
     82e:	01 e0       	ldi	r16, 0x01	; 1
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 ec       	ldi	r20, 0xC0	; 192
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	6c ef       	ldi	r22, 0xFC	; 252
     83a:	72 e0       	ldi	r23, 0x02	; 2
     83c:	8d e4       	ldi	r24, 0x4D	; 77
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
		//vTaskStartScheduler();
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	08 95       	ret

0000084c <sevenSegmentDisplayController_task>:
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
		myTime_t nowTime = myTime_getNowTime();
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
		display_7seg_display(time/100,2);
     84c:	0f 2e       	mov	r0, r31
     84e:	f4 e6       	ldi	r31, 0x64	; 100
     850:	8f 2e       	mov	r8, r31
     852:	f0 2d       	mov	r31, r0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     854:	0f 2e       	mov	r0, r31
     856:	f8 ee       	ldi	r31, 0xE8	; 232
     858:	cf 2e       	mov	r12, r31
     85a:	f3 e0       	ldi	r31, 0x03	; 3
     85c:	df 2e       	mov	r13, r31
     85e:	e1 2c       	mov	r14, r1
     860:	f1 2c       	mov	r15, r1
     862:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA7);
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     864:	68 94       	set
     866:	99 24       	eor	r9, r9
     868:	96 f8       	bld	r9, 6
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA6);
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     86a:	68 94       	set
     86c:	aa 24       	eor	r10, r10
     86e:	a5 f8       	bld	r10, 5
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA5);
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     870:	68 94       	set
     872:	bb 24       	eor	r11, r11
     874:	b4 f8       	bld	r11, 4
void sevenSegmentDisplayController_task(void *pvParameters)
{
	while(1)
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
     876:	82 b1       	in	r24, 0x02	; 2
     878:	80 58       	subi	r24, 0x80	; 128
     87a:	82 b9       	out	0x02, r24	; 2
		myTime_t nowTime = myTime_getNowTime();
     87c:	d3 d4       	rcall	.+2470   	; 0x1224 <myTime_getNowTime>
     87e:	ec 01       	movw	r28, r24
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
     880:	d7 d4       	rcall	.+2478   	; 0x1230 <myTime_getHour>
     882:	8c 01       	movw	r16, r24
     884:	ce 01       	movw	r24, r28
     886:	d8 d4       	rcall	.+2480   	; 0x1238 <myTime_getMin>
     888:	80 9e       	mul	r8, r16
		display_7seg_display(time/100,2);
     88a:	b0 01       	movw	r22, r0
     88c:	81 9e       	mul	r8, r17
     88e:	70 0d       	add	r23, r0
     890:	11 24       	eor	r1, r1
     892:	86 0f       	add	r24, r22
     894:	97 1f       	adc	r25, r23
     896:	bc 01       	movw	r22, r24
     898:	99 0f       	add	r25, r25
     89a:	88 0b       	sbc	r24, r24
     89c:	99 0b       	sbc	r25, r25
     89e:	0e 94 15 1a 	call	0x342a	; 0x342a <__floatsisf>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	48 ec       	ldi	r20, 0xC8	; 200
     8a8:	52 e4       	ldi	r21, 0x42	; 66
     8aa:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__divsf3>
     8ae:	42 e0       	ldi	r20, 0x02	; 2
     8b0:	0e 94 2a 1b 	call	0x3654	; 0x3654 <display_7seg_display>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	4a e7       	ldi	r20, 0x7A	; 122
     8ba:	54 e4       	ldi	r21, 0x44	; 68
     8bc:	60 91 30 0f 	lds	r22, 0x0F30	; 0x800f30 <updateTime>
     8c0:	70 91 31 0f 	lds	r23, 0x0F31	; 0x800f31 <updateTime+0x1>
     8c4:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <updateTime+0x2>
     8c8:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <updateTime+0x3>
     8cc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     8d0:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	ae e3       	ldi	r26, 0x3E	; 62
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     8e0:	a7 01       	movw	r20, r14
     8e2:	96 01       	movw	r18, r12
     8e4:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     8e8:	ca 01       	movw	r24, r20
     8ea:	b9 01       	movw	r22, r18
     8ec:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
     8f0:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
     8f2:	80 58       	subi	r24, 0x80	; 128
     8f4:	82 b9       	out	0x02, r24	; 2
     8f6:	82 b1       	in	r24, 0x02	; 2
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     8f8:	89 25       	eor	r24, r9
		temperatureSensor_t temperatureSensor = sensorModelManager_getTemperatureSensor();
     8fa:	82 b9       	out	0x02, r24	; 2
     8fc:	e9 d3       	rcall	.+2002   	; 0x10d0 <sensorModelManager_getTemperatureSensor>
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
     8fe:	7f d3       	rcall	.+1790   	; 0xffe <temperatureSensor_getValue>
     900:	42 e0       	ldi	r20, 0x02	; 2
     902:	0e 94 2a 1b 	call	0x3654	; 0x3654 <display_7seg_display>
     906:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	4a e7       	ldi	r20, 0x7A	; 122
     90c:	54 e4       	ldi	r21, 0x44	; 68
     90e:	60 91 30 0f 	lds	r22, 0x0F30	; 0x800f30 <updateTime>
     912:	70 91 31 0f 	lds	r23, 0x0F31	; 0x800f31 <updateTime+0x1>
     916:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <updateTime+0x2>
     91a:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <updateTime+0x3>
     91e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     922:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	ae e3       	ldi	r26, 0x3E	; 62
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     932:	a7 01       	movw	r20, r14
     934:	96 01       	movw	r18, r12
     936:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     93a:	ca 01       	movw	r24, r20
     93c:	b9 01       	movw	r22, r18
     93e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
     942:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA6);
     944:	89 25       	eor	r24, r9
     946:	82 b9       	out	0x02, r24	; 2
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     948:	82 b1       	in	r24, 0x02	; 2
     94a:	8a 25       	eor	r24, r10
     94c:	82 b9       	out	0x02, r24	; 2
		humiditySensor_t humiditySensor = sensorModelManager_getHumiditySensor();
     94e:	c5 d3       	rcall	.+1930   	; 0x10da <sensorModelManager_getHumiditySensor>
     950:	93 d2       	rcall	.+1318   	; 0xe78 <humiditySensor_getValue>
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
     952:	42 e0       	ldi	r20, 0x02	; 2
     954:	0e 94 2a 1b 	call	0x3654	; 0x3654 <display_7seg_display>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     95c:	4a e7       	ldi	r20, 0x7A	; 122
     95e:	54 e4       	ldi	r21, 0x44	; 68
     960:	60 91 30 0f 	lds	r22, 0x0F30	; 0x800f30 <updateTime>
     964:	70 91 31 0f 	lds	r23, 0x0F31	; 0x800f31 <updateTime+0x1>
     968:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <updateTime+0x2>
     96c:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <updateTime+0x3>
     970:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     974:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	ae e3       	ldi	r26, 0x3E	; 62
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     984:	a7 01       	movw	r20, r14
     986:	96 01       	movw	r18, r12
     988:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     98c:	ca 01       	movw	r24, r20
     98e:	b9 01       	movw	r22, r18
     990:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
     994:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA5);
     996:	8a 25       	eor	r24, r10
     998:	82 b9       	out	0x02, r24	; 2
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     99a:	82 b1       	in	r24, 0x02	; 2
     99c:	8b 25       	eor	r24, r11
     99e:	82 b9       	out	0x02, r24	; 2
		carbonDioxideSensor_t carbonDioxideSensor = sensorModelManager_getCarbonDioxideSensor();
     9a0:	a1 d3       	rcall	.+1858   	; 0x10e4 <sensorModelManager_getCarbonDioxideSensor>
     9a2:	a6 d1       	rcall	.+844    	; 0xcf0 <carbonDioxideSensor_getValue>
		display_7seg_display(carbonDioxideSensor_getValue(carbonDioxideSensor),2);
     9a4:	42 e0       	ldi	r20, 0x02	; 2
     9a6:	0e 94 2a 1b 	call	0x3654	; 0x3654 <display_7seg_display>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     9ae:	4a e7       	ldi	r20, 0x7A	; 122
     9b0:	54 e4       	ldi	r21, 0x44	; 68
     9b2:	60 91 30 0f 	lds	r22, 0x0F30	; 0x800f30 <updateTime>
     9b6:	70 91 31 0f 	lds	r23, 0x0F31	; 0x800f31 <updateTime+0x1>
     9ba:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <updateTime+0x2>
     9be:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <updateTime+0x3>
     9c2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     9c6:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	ae e3       	ldi	r26, 0x3E	; 62
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     9d6:	a7 01       	movw	r20, r14
     9d8:	96 01       	movw	r18, r12
     9da:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     9de:	ca 01       	movw	r24, r20
     9e0:	b9 01       	movw	r22, r18
     9e2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
     9e6:	82 b1       	in	r24, 0x02	; 2
     9e8:	8b 25       	eor	r24, r11
		PORTA ^= _BV(PA4);
     9ea:	82 b9       	out	0x02, r24	; 2
     9ec:	44 cf       	rjmp	.-376    	; 0x876 <sevenSegmentDisplayController_task+0x2a>

000009ee <sevenSegmentDisplayController_create>:
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
	}
}

void sevenSegmentDisplayController_create(float displayUpdateTime)
{
     9f2:	0f 93       	push	r16
	updateTime = displayUpdateTime;
     9f4:	60 93 30 0f 	sts	0x0F30, r22	; 0x800f30 <updateTime>
     9f8:	70 93 31 0f 	sts	0x0F31, r23	; 0x800f31 <updateTime+0x1>
     9fc:	80 93 32 0f 	sts	0x0F32, r24	; 0x800f32 <updateTime+0x2>
     a00:	90 93 33 0f 	sts	0x0F33, r25	; 0x800f33 <updateTime+0x3>
	//Init 7-segment Display
	display_7seg_initialise(NULL);
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <display_7seg_initialise>
	display_7seg_powerUp();
     a0c:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <display_7seg_powerUp>
	
	printf("7-segment Display started!!!\n");
     a10:	8a e0       	ldi	r24, 0x0A	; 10
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
	xTaskCreate(sevenSegmentDisplayController_task, "7-segment Display Task", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     a18:	e1 2c       	mov	r14, r1
     a1a:	f1 2c       	mov	r15, r1
     a1c:	01 e0       	ldi	r16, 0x01	; 1
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 ec       	ldi	r20, 0xC0	; 192
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	67 e2       	ldi	r22, 0x27	; 39
     a28:	73 e0       	ldi	r23, 0x03	; 3
     a2a:	86 e2       	ldi	r24, 0x26	; 38
     a2c:	94 e0       	ldi	r25, 0x04	; 4
     a2e:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	08 95       	ret

00000a3a <temperatureSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     a3a:	0f 2e       	mov	r0, r31
     a3c:	f2 e9       	ldi	r31, 0x92	; 146
     a3e:	8f 2e       	mov	r8, r31
     a40:	f2 e0       	ldi	r31, 0x02	; 2
     a42:	9f 2e       	mov	r9, r31
     a44:	f0 2d       	mov	r31, r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
		PORTA ^= _BV(PA0);
     a46:	11 e0       	ldi	r17, 0x01	; 1
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Temperature sensor didn't measure!!!");
     a48:	0f 2e       	mov	r0, r31
     a4a:	fe e3       	ldi	r31, 0x3E	; 62
     a4c:	2f 2e       	mov	r2, r31
     a4e:	f3 e0       	ldi	r31, 0x03	; 3
     a50:	3f 2e       	mov	r3, r31
     a52:	f0 2d       	mov	r31, r0
		temperatureSensor_setValue(temSensor,temperature);
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
		printf("temperature:%d.%d",a,b);
     a54:	0f 2e       	mov	r0, r31
     a56:	f0 e1       	ldi	r31, 0x10	; 16
     a58:	af 2e       	mov	r10, r31
     a5a:	f7 e2       	ldi	r31, 0x27	; 39
     a5c:	bf 2e       	mov	r11, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	c3 e6       	ldi	r28, 0x63	; 99
     a62:	d3 e0       	ldi	r29, 0x03	; 3

void temperatureSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     a64:	0e 94 cc 1c 	call	0x3998	; 0x3998 <hih8120_wakeup>
     a68:	88 23       	and	r24, r24
     a6a:	31 f0       	breq	.+12     	; 0xa78 <temperatureSensorController_task+0x3e>
		{
			printf("Temperature sensor didn't wakeup!!!");
     a6c:	9f 92       	push	r9
     a6e:	8f 92       	push	r8
     a70:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     a78:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temSensor>
     a7c:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temSensor+0x1>
     a80:	99 d2       	rcall	.+1330   	; 0xfb4 <temperatureSensor_getReportInterval>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	4a ef       	ldi	r20, 0xFA	; 250
     a88:	53 e4       	ldi	r21, 0x43	; 67
     a8a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     a8e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	ae e3       	ldi	r26, 0x3E	; 62
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     a9e:	28 ee       	ldi	r18, 0xE8	; 232
     aa0:	33 e0       	ldi	r19, 0x03	; 3
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     aaa:	ca 01       	movw	r24, r20
     aac:	b9 01       	movw	r22, r18
     aae:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
		PORTA ^= _BV(PA0);
     ab2:	82 b1       	in	r24, 0x02	; 2
     ab4:	81 27       	eor	r24, r17
     ab6:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     ab8:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <hih8120_measure>
     abc:	88 23       	and	r24, r24
     abe:	31 f0       	breq	.+12     	; 0xacc <temperatureSensorController_task+0x92>
		{
			printf("Temperature sensor didn't measure!!!");
     ac0:	3f 92       	push	r3
     ac2:	2f 92       	push	r2
     ac4:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     acc:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temSensor>
     ad0:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temSensor+0x1>
     ad4:	6f d2       	rcall	.+1246   	; 0xfb4 <temperatureSensor_getReportInterval>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	4a ef       	ldi	r20, 0xFA	; 250
     adc:	53 e4       	ldi	r21, 0x43	; 67
     ade:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     ae2:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fixunssfsi>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	ae e3       	ldi	r26, 0x3E	; 62
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__muluhisi3>
     af2:	28 ee       	ldi	r18, 0xE8	; 232
     af4:	33 e0       	ldi	r19, 0x03	; 3
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__udivmodsi4>
     afe:	ca 01       	movw	r24, r20
     b00:	b9 01       	movw	r22, r18
     b02:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
		PORTA ^= _BV(PA0);
     b06:	82 b1       	in	r24, 0x02	; 2
     b08:	81 27       	eor	r24, r17
     b0a:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     b0c:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <hih8120_getTemperature>
     b10:	ab 01       	movw	r20, r22
     b12:	bc 01       	movw	r22, r24
     b14:	40 93 10 04 	sts	0x0410, r20	; 0x800410 <temperature>
     b18:	50 93 11 04 	sts	0x0411, r21	; 0x800411 <temperature+0x1>
     b1c:	60 93 12 04 	sts	0x0412, r22	; 0x800412 <temperature+0x2>
     b20:	70 93 13 04 	sts	0x0413, r23	; 0x800413 <temperature+0x3>
		temperatureSensor_setValue(temSensor,temperature);
     b24:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temSensor>
     b28:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temSensor+0x1>
     b2c:	1b d2       	rcall	.+1078   	; 0xf64 <temperatureSensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
     b2e:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temSensor>
     b32:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temSensor+0x1>
     b36:	63 d2       	rcall	.+1222   	; 0xffe <temperatureSensor_getValue>
     b38:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixsfsi>
     b3c:	6b 01       	movw	r12, r22
     b3e:	7c 01       	movw	r14, r24
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
     b40:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temSensor>
     b44:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temSensor+0x1>
     b48:	5a d2       	rcall	.+1204   	; 0xffe <temperatureSensor_getValue>
     b4a:	2b 01       	movw	r4, r22
     b4c:	3c 01       	movw	r6, r24
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
     b4e:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <temSensor>
     b52:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <temSensor+0x1>
     b56:	78 d2       	rcall	.+1264   	; 0x1048 <temperatureSensor_getUpdateTime>
     b58:	20 e0       	ldi	r18, 0x00	; 0
		printf("temperature:%d.%d",a,b);
     b5a:	30 e4       	ldi	r19, 0x40	; 64
     b5c:	4c e1       	ldi	r20, 0x1C	; 28
     b5e:	56 e4       	ldi	r21, 0x46	; 70
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
     b68:	2b 01       	movw	r4, r22
     b6a:	3c 01       	movw	r6, r24
     b6c:	ac 9c       	mul	r10, r12
     b6e:	b0 01       	movw	r22, r0
     b70:	ad 9c       	mul	r10, r13
     b72:	70 0d       	add	r23, r0
     b74:	bc 9c       	mul	r11, r12
     b76:	70 0d       	add	r23, r0
     b78:	11 24       	eor	r1, r1
     b7a:	07 2e       	mov	r0, r23
     b7c:	00 0c       	add	r0, r0
     b7e:	88 0b       	sbc	r24, r24
     b80:	99 0b       	sbc	r25, r25
     b82:	0e 94 15 1a 	call	0x342a	; 0x342a <__floatsisf>
     b86:	9b 01       	movw	r18, r22
     b88:	ac 01       	movw	r20, r24
     b8a:	c3 01       	movw	r24, r6
     b8c:	b2 01       	movw	r22, r4
     b8e:	0e 94 15 19 	call	0x322a	; 0x322a <__subsf3>
     b92:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixsfsi>
     b96:	7f 93       	push	r23
     b98:	6f 93       	push	r22
     b9a:	df 92       	push	r13
     b9c:	cf 92       	push	r12
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	0e 94 0a 29 	call	0x5214	; 0x5214 <printf>
     ba6:	0f 90       	pop	r0
	}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	58 cf       	rjmp	.-336    	; 0xa64 <temperatureSensorController_task+0x2a>

00000bb4 <temperatureSensorController_create>:
     bb4:	ef 92       	push	r14
}

void temperatureSensorController_create(temperatureSensor_t sensor)
{
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
	temSensor = sensor;
     bba:	90 93 35 0f 	sts	0x0F35, r25	; 0x800f35 <temSensor+0x1>
     bbe:	80 93 34 0f 	sts	0x0F34, r24	; 0x800f34 <temSensor>
	printf("Temperature sensor started!!!\n");
     bc2:	85 e7       	ldi	r24, 0x75	; 117
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
	xTaskCreate(temperatureSensorController_task, "TemperatureSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
     bce:	01 e0       	ldi	r16, 0x01	; 1
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 ec       	ldi	r20, 0xC0	; 192
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	63 e9       	ldi	r22, 0x93	; 147
     bda:	73 e0       	ldi	r23, 0x03	; 3
     bdc:	8d e1       	ldi	r24, 0x1D	; 29
     bde:	95 e0       	ldi	r25, 0x05	; 5
     be0:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCreate>
	//vTaskStartScheduler();
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	08 95       	ret

00000bec <carbonDioxideSensor_create>:
void carbonDioxideSensor_setReportInterval(carbonDioxideSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
     c0a:	ec 01       	movw	r28, r24
     c0c:	89 2b       	or	r24, r25
     c0e:	c1 f0       	breq	.+48     	; 0xc40 <carbonDioxideSensor_create+0x54>
     c10:	c8 82       	st	Y, r12
     c12:	d9 82       	std	Y+1, r13	; 0x01
     c14:	ea 82       	std	Y+2, r14	; 0x02
     c16:	fb 82       	std	Y+3, r15	; 0x03
     c18:	1c 82       	std	Y+4, r1	; 0x04
     c1a:	1d 82       	std	Y+5, r1	; 0x05
     c1c:	1e 82       	std	Y+6, r1	; 0x06
     c1e:	1f 82       	std	Y+7, r1	; 0x07
     c20:	c2 d2       	rcall	.+1412   	; 0x11a6 <myTime_create>
     c22:	9b 87       	std	Y+11, r25	; 0x0b
     c24:	8a 87       	std	Y+10, r24	; 0x0a
     c26:	43 e0       	ldi	r20, 0x03	; 3
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	fc d6       	rcall	.+3576   	; 0x1a26 <xQueueGenericCreate>
     c2e:	99 87       	std	Y+9, r25	; 0x09
     c30:	88 87       	std	Y+8, r24	; 0x08
     c32:	00 e0       	ldi	r16, 0x00	; 0
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	a9 01       	movw	r20, r18
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	14 d7       	rcall	.+3624   	; 0x1a68 <xQueueGenericSend>
     c40:	ce 01       	movw	r24, r28
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	08 95       	ret

00000c52 <carbonDioxideSensor_setValue>:

void carbonDioxideSensor_setValue(carbonDioxideSensor_t self,float value)
{
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	6a 01       	movw	r12, r20
     c64:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     c66:	4f ef       	ldi	r20, 0xFF	; 255
     c68:	5f ef       	ldi	r21, 0xFF	; 255
     c6a:	ba 01       	movw	r22, r20
     c6c:	88 85       	ldd	r24, Y+8	; 0x08
     c6e:	99 85       	ldd	r25, Y+9	; 0x09
     c70:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <xQueueSemaphoreTake>
	self->value = value;
     c74:	cc 82       	std	Y+4, r12	; 0x04
     c76:	dd 82       	std	Y+5, r13	; 0x05
     c78:	ee 82       	std	Y+6, r14	; 0x06
     c7a:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c80:	aa d2       	rcall	.+1364   	; 0x11d6 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	a9 01       	movw	r20, r18
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	88 85       	ldd	r24, Y+8	; 0x08
     c90:	99 85       	ldd	r25, Y+9	; 0x09
     c92:	ea d6       	rcall	.+3540   	; 0x1a68 <xQueueGenericSend>
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	08 95       	ret

00000ca4 <carbonDioxideSensor_getReportInterval>:

float carbonDioxideSensor_getReportInterval(carbonDioxideSensor_t self)
{
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     cb4:	4f ef       	ldi	r20, 0xFF	; 255
     cb6:	5f ef       	ldi	r21, 0xFF	; 255
     cb8:	ba 01       	movw	r22, r20
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	99 85       	ldd	r25, Y+9	; 0x09
     cbe:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <xQueueSemaphoreTake>
	float result = self->reportInterval;
     cc2:	c8 80       	ld	r12, Y
     cc4:	d9 80       	ldd	r13, Y+1	; 0x01
     cc6:	ea 80       	ldd	r14, Y+2	; 0x02
     cc8:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     cca:	00 e0       	ldi	r16, 0x00	; 0
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	a9 01       	movw	r20, r18
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	88 85       	ldd	r24, Y+8	; 0x08
     cd8:	99 85       	ldd	r25, Y+9	; 0x09
     cda:	c6 d6       	rcall	.+3468   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	08 95       	ret

00000cf0 <carbonDioxideSensor_getValue>:

float carbonDioxideSensor_getValue(carbonDioxideSensor_t self)
{
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d00:	4f ef       	ldi	r20, 0xFF	; 255
     d02:	5f ef       	ldi	r21, 0xFF	; 255
     d04:	ba 01       	movw	r22, r20
     d06:	88 85       	ldd	r24, Y+8	; 0x08
     d08:	99 85       	ldd	r25, Y+9	; 0x09
     d0a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <xQueueSemaphoreTake>
	float result = self->value;
     d0e:	cc 80       	ldd	r12, Y+4	; 0x04
     d10:	dd 80       	ldd	r13, Y+5	; 0x05
     d12:	ee 80       	ldd	r14, Y+6	; 0x06
     d14:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     d16:	00 e0       	ldi	r16, 0x00	; 0
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	a9 01       	movw	r20, r18
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	88 85       	ldd	r24, Y+8	; 0x08
     d24:	99 85       	ldd	r25, Y+9	; 0x09
     d26:	a0 d6       	rcall	.+3392   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     d28:	c7 01       	movw	r24, r14
     d2a:	b6 01       	movw	r22, r12
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <carbonDioxideSensor_getUpdateTime>:

myTime_t carbonDioxideSensor_getUpdateTime(carbonDioxideSensor_t self)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d48:	4f ef       	ldi	r20, 0xFF	; 255
     d4a:	5f ef       	ldi	r21, 0xFF	; 255
     d4c:	ba 01       	movw	r22, r20
     d4e:	88 85       	ldd	r24, Y+8	; 0x08
     d50:	99 85       	ldd	r25, Y+9	; 0x09
     d52:	f5 d7       	rcall	.+4074   	; 0x1d3e <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     d54:	ea 84       	ldd	r14, Y+10	; 0x0a
     d56:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	88 85       	ldd	r24, Y+8	; 0x08
     d66:	99 85       	ldd	r25, Y+9	; 0x09
     d68:	7f d6       	rcall	.+3326   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     d6a:	c7 01       	movw	r24, r14
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	08 95       	ret

00000d78 <humiditySensor_create>:
void humiditySensor_setReportInterval(humiditySensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	8c e0       	ldi	r24, 0x0C	; 12
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
     d96:	ec 01       	movw	r28, r24
     d98:	89 2b       	or	r24, r25
     d9a:	c1 f0       	breq	.+48     	; 0xdcc <humiditySensor_create+0x54>
     d9c:	c8 82       	st	Y, r12
     d9e:	d9 82       	std	Y+1, r13	; 0x01
     da0:	ea 82       	std	Y+2, r14	; 0x02
     da2:	fb 82       	std	Y+3, r15	; 0x03
     da4:	1c 82       	std	Y+4, r1	; 0x04
     da6:	1d 82       	std	Y+5, r1	; 0x05
     da8:	1e 82       	std	Y+6, r1	; 0x06
     daa:	1f 82       	std	Y+7, r1	; 0x07
     dac:	fc d1       	rcall	.+1016   	; 0x11a6 <myTime_create>
     dae:	9b 87       	std	Y+11, r25	; 0x0b
     db0:	8a 87       	std	Y+10, r24	; 0x0a
     db2:	43 e0       	ldi	r20, 0x03	; 3
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	36 d6       	rcall	.+3180   	; 0x1a26 <xQueueGenericCreate>
     dba:	99 87       	std	Y+9, r25	; 0x09
     dbc:	88 87       	std	Y+8, r24	; 0x08
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	a9 01       	movw	r20, r18
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	4e d6       	rcall	.+3228   	; 0x1a68 <xQueueGenericSend>
     dcc:	ce 01       	movw	r24, r28
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <humiditySensor_setValue>:

void humiditySensor_setValue(humiditySensor_t self,float value)
{
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
     dee:	6a 01       	movw	r12, r20
     df0:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     df2:	4f ef       	ldi	r20, 0xFF	; 255
     df4:	5f ef       	ldi	r21, 0xFF	; 255
     df6:	ba 01       	movw	r22, r20
     df8:	88 85       	ldd	r24, Y+8	; 0x08
     dfa:	99 85       	ldd	r25, Y+9	; 0x09
     dfc:	a0 d7       	rcall	.+3904   	; 0x1d3e <xQueueSemaphoreTake>
	self->value = value;
     dfe:	cc 82       	std	Y+4, r12	; 0x04
     e00:	dd 82       	std	Y+5, r13	; 0x05
     e02:	ee 82       	std	Y+6, r14	; 0x06
     e04:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     e06:	8a 85       	ldd	r24, Y+10	; 0x0a
     e08:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0a:	e5 d1       	rcall	.+970    	; 0x11d6 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     e0c:	00 e0       	ldi	r16, 0x00	; 0
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	a9 01       	movw	r20, r18
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	88 85       	ldd	r24, Y+8	; 0x08
     e1a:	99 85       	ldd	r25, Y+9	; 0x09
     e1c:	25 d6       	rcall	.+3146   	; 0x1a68 <xQueueGenericSend>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	08 95       	ret

00000e2e <humiditySensor_getReportInterval>:

float humiditySensor_getReportInterval(humiditySensor_t self)
{
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e3e:	4f ef       	ldi	r20, 0xFF	; 255
     e40:	5f ef       	ldi	r21, 0xFF	; 255
     e42:	ba 01       	movw	r22, r20
     e44:	88 85       	ldd	r24, Y+8	; 0x08
     e46:	99 85       	ldd	r25, Y+9	; 0x09
     e48:	7a d7       	rcall	.+3828   	; 0x1d3e <xQueueSemaphoreTake>
	float result = self->reportInterval;
     e4a:	c8 80       	ld	r12, Y
     e4c:	d9 80       	ldd	r13, Y+1	; 0x01
     e4e:	ea 80       	ldd	r14, Y+2	; 0x02
     e50:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a9 01       	movw	r20, r18
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	88 85       	ldd	r24, Y+8	; 0x08
     e60:	99 85       	ldd	r25, Y+9	; 0x09
     e62:	02 d6       	rcall	.+3076   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	08 95       	ret

00000e78 <humiditySensor_getValue>:

float humiditySensor_getValue(humiditySensor_t self)
{
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e88:	4f ef       	ldi	r20, 0xFF	; 255
     e8a:	5f ef       	ldi	r21, 0xFF	; 255
     e8c:	ba 01       	movw	r22, r20
     e8e:	88 85       	ldd	r24, Y+8	; 0x08
     e90:	99 85       	ldd	r25, Y+9	; 0x09
     e92:	55 d7       	rcall	.+3754   	; 0x1d3e <xQueueSemaphoreTake>
	float result = self->value;
     e94:	cc 80       	ldd	r12, Y+4	; 0x04
     e96:	dd 80       	ldd	r13, Y+5	; 0x05
     e98:	ee 80       	ldd	r14, Y+6	; 0x06
     e9a:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	a9 01       	movw	r20, r18
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	88 85       	ldd	r24, Y+8	; 0x08
     eaa:	99 85       	ldd	r25, Y+9	; 0x09
     eac:	dd d5       	rcall	.+3002   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     eae:	c7 01       	movw	r24, r14
     eb0:	b6 01       	movw	r22, r12
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	08 95       	ret

00000ec2 <humiditySensor_getUpdateTime>:

myTime_t humiditySensor_getUpdateTime(humiditySensor_t self)
{
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     ece:	4f ef       	ldi	r20, 0xFF	; 255
     ed0:	5f ef       	ldi	r21, 0xFF	; 255
     ed2:	ba 01       	movw	r22, r20
     ed4:	88 85       	ldd	r24, Y+8	; 0x08
     ed6:	99 85       	ldd	r25, Y+9	; 0x09
     ed8:	32 d7       	rcall	.+3684   	; 0x1d3e <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     eda:	ea 84       	ldd	r14, Y+10	; 0x0a
     edc:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	99 85       	ldd	r25, Y+9	; 0x09
     eee:	bc d5       	rcall	.+2936   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     ef0:	c7 01       	movw	r24, r14
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	08 95       	ret

00000efe <temperatureSensor_create>:
void temperatureSensor_setReportInterval(temperatureSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	6b 01       	movw	r12, r22
     f0e:	7c 01       	movw	r14, r24
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	8c e0       	ldi	r24, 0x0C	; 12
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
     f1c:	ec 01       	movw	r28, r24
     f1e:	89 2b       	or	r24, r25
     f20:	c1 f0       	breq	.+48     	; 0xf52 <temperatureSensor_create+0x54>
     f22:	c8 82       	st	Y, r12
     f24:	d9 82       	std	Y+1, r13	; 0x01
     f26:	ea 82       	std	Y+2, r14	; 0x02
     f28:	fb 82       	std	Y+3, r15	; 0x03
     f2a:	1c 82       	std	Y+4, r1	; 0x04
     f2c:	1d 82       	std	Y+5, r1	; 0x05
     f2e:	1e 82       	std	Y+6, r1	; 0x06
     f30:	1f 82       	std	Y+7, r1	; 0x07
     f32:	39 d1       	rcall	.+626    	; 0x11a6 <myTime_create>
     f34:	9b 87       	std	Y+11, r25	; 0x0b
     f36:	8a 87       	std	Y+10, r24	; 0x0a
     f38:	43 e0       	ldi	r20, 0x03	; 3
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	73 d5       	rcall	.+2790   	; 0x1a26 <xQueueGenericCreate>
     f40:	99 87       	std	Y+9, r25	; 0x09
     f42:	88 87       	std	Y+8, r24	; 0x08
     f44:	00 e0       	ldi	r16, 0x00	; 0
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	a9 01       	movw	r20, r18
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	8b d5       	rcall	.+2838   	; 0x1a68 <xQueueGenericSend>
     f52:	ce 01       	movw	r24, r28
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	08 95       	ret

00000f64 <temperatureSensor_setValue>:

void temperatureSensor_setValue(temperatureSensor_t self,float value)
{
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
     f74:	6a 01       	movw	r12, r20
     f76:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f78:	4f ef       	ldi	r20, 0xFF	; 255
     f7a:	5f ef       	ldi	r21, 0xFF	; 255
     f7c:	ba 01       	movw	r22, r20
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	99 85       	ldd	r25, Y+9	; 0x09
     f82:	dd d6       	rcall	.+3514   	; 0x1d3e <xQueueSemaphoreTake>
	self->value = value;
     f84:	cc 82       	std	Y+4, r12	; 0x04
     f86:	dd 82       	std	Y+5, r13	; 0x05
     f88:	ee 82       	std	Y+6, r14	; 0x06
     f8a:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f90:	22 d1       	rcall	.+580    	; 0x11d6 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	99 85       	ldd	r25, Y+9	; 0x09
     fa2:	62 d5       	rcall	.+2756   	; 0x1a68 <xQueueGenericSend>
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	08 95       	ret

00000fb4 <temperatureSensor_getReportInterval>:

float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     fc4:	4f ef       	ldi	r20, 0xFF	; 255
     fc6:	5f ef       	ldi	r21, 0xFF	; 255
     fc8:	ba 01       	movw	r22, r20
     fca:	88 85       	ldd	r24, Y+8	; 0x08
     fcc:	99 85       	ldd	r25, Y+9	; 0x09
     fce:	b7 d6       	rcall	.+3438   	; 0x1d3e <xQueueSemaphoreTake>
	float result = self->reportInterval;
     fd0:	c8 80       	ld	r12, Y
     fd2:	d9 80       	ldd	r13, Y+1	; 0x01
     fd4:	ea 80       	ldd	r14, Y+2	; 0x02
     fd6:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     fd8:	00 e0       	ldi	r16, 0x00	; 0
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	a9 01       	movw	r20, r18
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	88 85       	ldd	r24, Y+8	; 0x08
     fe6:	99 85       	ldd	r25, Y+9	; 0x09
     fe8:	3f d5       	rcall	.+2686   	; 0x1a68 <xQueueGenericSend>
	return result;
}
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	08 95       	ret

00000ffe <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
    100e:	4f ef       	ldi	r20, 0xFF	; 255
    1010:	5f ef       	ldi	r21, 0xFF	; 255
    1012:	ba 01       	movw	r22, r20
    1014:	88 85       	ldd	r24, Y+8	; 0x08
    1016:	99 85       	ldd	r25, Y+9	; 0x09
    1018:	92 d6       	rcall	.+3364   	; 0x1d3e <xQueueSemaphoreTake>
	float result = self->value;
    101a:	cc 80       	ldd	r12, Y+4	; 0x04
    101c:	dd 80       	ldd	r13, Y+5	; 0x05
    101e:	ee 80       	ldd	r14, Y+6	; 0x06
    1020:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
    1022:	00 e0       	ldi	r16, 0x00	; 0
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	a9 01       	movw	r20, r18
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	88 85       	ldd	r24, Y+8	; 0x08
    1030:	99 85       	ldd	r25, Y+9	; 0x09
    1032:	1a d5       	rcall	.+2612   	; 0x1a68 <xQueueGenericSend>
	return result;
}
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	08 95       	ret

00001048 <temperatureSensor_getUpdateTime>:

myTime_t temperatureSensor_getUpdateTime(temperatureSensor_t self)
{
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
    1054:	4f ef       	ldi	r20, 0xFF	; 255
    1056:	5f ef       	ldi	r21, 0xFF	; 255
    1058:	ba 01       	movw	r22, r20
    105a:	88 85       	ldd	r24, Y+8	; 0x08
    105c:	99 85       	ldd	r25, Y+9	; 0x09
    105e:	6f d6       	rcall	.+3294   	; 0x1d3e <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
    1060:	ea 84       	ldd	r14, Y+10	; 0x0a
    1062:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	88 85       	ldd	r24, Y+8	; 0x08
    1072:	99 85       	ldd	r25, Y+9	; 0x09
    1074:	f9 d4       	rcall	.+2546   	; 0x1a68 <xQueueGenericSend>
	return result;
}
    1076:	c7 01       	movw	r24, r14
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	08 95       	ret

00001084 <sensorModelManager_create>:
void sensorModelManager_setReportInterval(float reportInterval)
{
	temperatureSensor_setReportInterval(temperatureSensor,reportInterval);
	humiditySensor_setReportInterval(humiditySensor,reportInterval);
	carbonDioxideSensor_setReportInterval(carbonDioxideSensor,reportInterval);
}
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	9f e3       	ldi	r25, 0x3F	; 63
    108c:	b0 dc       	rcall	.-1696   	; 0x9ee <sevenSegmentDisplayController_create>
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e8       	ldi	r24, 0x80	; 128
    1094:	9f e3       	ldi	r25, 0x3F	; 63
    1096:	33 df       	rcall	.-410    	; 0xefe <temperatureSensor_create>
    1098:	90 93 39 0f 	sts	0x0F39, r25	; 0x800f39 <temperatureSensor+0x1>
    109c:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <temperatureSensor>
    10a0:	89 dd       	rcall	.-1262   	; 0xbb4 <temperatureSensorController_create>
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	9f e3       	ldi	r25, 0x3F	; 63
    10aa:	66 de       	rcall	.-820    	; 0xd78 <humiditySensor_create>
    10ac:	90 93 3b 0f 	sts	0x0F3B, r25	; 0x800f3b <humiditySensor+0x1>
    10b0:	80 93 3a 0f 	sts	0x0F3A, r24	; 0x800f3a <humiditySensor>
    10b4:	af db       	rcall	.-2210   	; 0x814 <HumSensorController_create>
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	9f e3       	ldi	r25, 0x3F	; 63
    10be:	96 dd       	rcall	.-1236   	; 0xbec <carbonDioxideSensor_create>
    10c0:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <carbonDioxideSensor+0x1>
    10c4:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <carbonDioxideSensor>
    10c8:	cc da       	rcall	.-2664   	; 0x662 <CO2SensorController_create>
    10ca:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <vTaskStartScheduler>
    10ce:	08 95       	ret

000010d0 <sensorModelManager_getTemperatureSensor>:

temperatureSensor_t sensorModelManager_getTemperatureSensor()
{
	return temperatureSensor;
}
    10d0:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <temperatureSensor>
    10d4:	90 91 39 0f 	lds	r25, 0x0F39	; 0x800f39 <temperatureSensor+0x1>
    10d8:	08 95       	ret

000010da <sensorModelManager_getHumiditySensor>:

humiditySensor_t sensorModelManager_getHumiditySensor()
{
	return humiditySensor;
}
    10da:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <humiditySensor>
    10de:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <humiditySensor+0x1>
    10e2:	08 95       	ret

000010e4 <sensorModelManager_getCarbonDioxideSensor>:

carbonDioxideSensor_t sensorModelManager_getCarbonDioxideSensor()
{
	return carbonDioxideSensor;
}
    10e4:	80 91 36 0f 	lds	r24, 0x0F36	; 0x800f36 <carbonDioxideSensor>
    10e8:	90 91 37 0f 	lds	r25, 0x0F37	; 0x800f37 <carbonDioxideSensor+0x1>
    10ec:	08 95       	ret

000010ee <nowTimeClockTask>:
}

int myTime_getDay(myTime_t self)
{
	return self->day;
}
    10ee:	6e e3       	ldi	r22, 0x3E	; 62
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vTaskDelay>
    10fa:	e0 91 3c 0f 	lds	r30, 0x0F3C	; 0x800f3c <nowTime>
    10fe:	f0 91 3d 0f 	lds	r31, 0x0F3D	; 0x800f3d <nowTime+0x1>
    1102:	82 85       	ldd	r24, Z+10	; 0x0a
    1104:	93 85       	ldd	r25, Z+11	; 0x0b
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	93 87       	std	Z+11, r25	; 0x0b
    110a:	82 87       	std	Z+10, r24	; 0x0a
    110c:	cc 97       	sbiw	r24, 0x3c	; 60
    110e:	7c f3       	brlt	.-34     	; 0x10ee <nowTimeClockTask>
    1110:	80 85       	ldd	r24, Z+8	; 0x08
    1112:	91 85       	ldd	r25, Z+9	; 0x09
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	91 87       	std	Z+9, r25	; 0x09
    1118:	80 87       	std	Z+8, r24	; 0x08
    111a:	13 86       	std	Z+11, r1	; 0x0b
    111c:	12 86       	std	Z+10, r1	; 0x0a
    111e:	cc 97       	sbiw	r24, 0x3c	; 60
    1120:	34 f3       	brlt	.-52     	; 0x10ee <nowTimeClockTask>
    1122:	86 81       	ldd	r24, Z+6	; 0x06
    1124:	97 81       	ldd	r25, Z+7	; 0x07
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	97 83       	std	Z+7, r25	; 0x07
    112a:	86 83       	std	Z+6, r24	; 0x06
    112c:	11 86       	std	Z+9, r1	; 0x09
    112e:	10 86       	std	Z+8, r1	; 0x08
    1130:	48 97       	sbiw	r24, 0x18	; 24
    1132:	ec f2       	brlt	.-70     	; 0x10ee <nowTimeClockTask>
    1134:	17 82       	std	Z+7, r1	; 0x07
    1136:	16 82       	std	Z+6, r1	; 0x06
    1138:	da cf       	rjmp	.-76     	; 0x10ee <nowTimeClockTask>

0000113a <mytime_tryCreateNowTime>:
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	80 91 3c 0f 	lds	r24, 0x0F3C	; 0x800f3c <nowTime>
    1144:	90 91 3d 0f 	lds	r25, 0x0F3D	; 0x800f3d <nowTime+0x1>
    1148:	89 2b       	or	r24, r25
    114a:	49 f5       	brne	.+82     	; 0x119e <mytime_tryCreateNowTime+0x64>
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	8c e0       	ldi	r24, 0x0C	; 12
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
    1158:	fc 01       	movw	r30, r24
    115a:	90 93 3d 0f 	sts	0x0F3D, r25	; 0x800f3d <nowTime+0x1>
    115e:	80 93 3c 0f 	sts	0x0F3C, r24	; 0x800f3c <nowTime>
    1162:	89 2b       	or	r24, r25
    1164:	e1 f0       	breq	.+56     	; 0x119e <mytime_tryCreateNowTime+0x64>
    1166:	11 82       	std	Z+1, r1	; 0x01
    1168:	10 82       	st	Z, r1
    116a:	13 82       	std	Z+3, r1	; 0x03
    116c:	12 82       	std	Z+2, r1	; 0x02
    116e:	15 82       	std	Z+5, r1	; 0x05
    1170:	14 82       	std	Z+4, r1	; 0x04
    1172:	17 82       	std	Z+7, r1	; 0x07
    1174:	16 82       	std	Z+6, r1	; 0x06
    1176:	11 86       	std	Z+9, r1	; 0x09
    1178:	10 86       	std	Z+8, r1	; 0x08
    117a:	13 86       	std	Z+11, r1	; 0x0b
    117c:	12 86       	std	Z+10, r1	; 0x0a
    117e:	89 ea       	ldi	r24, 0xA9	; 169
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
    1186:	e1 2c       	mov	r14, r1
    1188:	f1 2c       	mov	r15, r1
    118a:	01 e0       	ldi	r16, 0x01	; 1
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 ec       	ldi	r20, 0xC0	; 192
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	63 ec       	ldi	r22, 0xC3	; 195
    1196:	73 e0       	ldi	r23, 0x03	; 3
    1198:	87 e7       	ldi	r24, 0x77	; 119
    119a:	98 e0       	ldi	r25, 0x08	; 8
    119c:	79 d7       	rcall	.+3826   	; 0x2090 <xTaskCreate>
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	08 95       	ret

000011a6 <myTime_create>:
    11a6:	c9 df       	rcall	.-110    	; 0x113a <mytime_tryCreateNowTime>
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	8c e0       	ldi	r24, 0x0C	; 12
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
    11b4:	fc 01       	movw	r30, r24
    11b6:	89 2b       	or	r24, r25
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <myTime_create+0x2c>
    11ba:	11 82       	std	Z+1, r1	; 0x01
    11bc:	10 82       	st	Z, r1
    11be:	13 82       	std	Z+3, r1	; 0x03
    11c0:	12 82       	std	Z+2, r1	; 0x02
    11c2:	15 82       	std	Z+5, r1	; 0x05
    11c4:	14 82       	std	Z+4, r1	; 0x04
    11c6:	17 82       	std	Z+7, r1	; 0x07
    11c8:	16 82       	std	Z+6, r1	; 0x06
    11ca:	11 86       	std	Z+9, r1	; 0x09
    11cc:	10 86       	std	Z+8, r1	; 0x08
    11ce:	13 86       	std	Z+11, r1	; 0x0b
    11d0:	12 86       	std	Z+10, r1	; 0x0a
    11d2:	cf 01       	movw	r24, r30
    11d4:	08 95       	ret

000011d6 <myTime_updateToNowTime>:
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
    11dc:	ae df       	rcall	.-164    	; 0x113a <mytime_tryCreateNowTime>
    11de:	e0 91 3c 0f 	lds	r30, 0x0F3C	; 0x800f3c <nowTime>
    11e2:	f0 91 3d 0f 	lds	r31, 0x0F3D	; 0x800f3d <nowTime+0x1>
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	99 83       	std	Y+1, r25	; 0x01
    11ec:	88 83       	st	Y, r24
    11ee:	e0 91 3c 0f 	lds	r30, 0x0F3C	; 0x800f3c <nowTime>
    11f2:	f0 91 3d 0f 	lds	r31, 0x0F3D	; 0x800f3d <nowTime+0x1>
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	9b 83       	std	Y+3, r25	; 0x03
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	84 81       	ldd	r24, Z+4	; 0x04
    1200:	95 81       	ldd	r25, Z+5	; 0x05
    1202:	9d 83       	std	Y+5, r25	; 0x05
    1204:	8c 83       	std	Y+4, r24	; 0x04
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	97 81       	ldd	r25, Z+7	; 0x07
    120a:	9f 83       	std	Y+7, r25	; 0x07
    120c:	8e 83       	std	Y+6, r24	; 0x06
    120e:	80 85       	ldd	r24, Z+8	; 0x08
    1210:	91 85       	ldd	r25, Z+9	; 0x09
    1212:	99 87       	std	Y+9, r25	; 0x09
    1214:	88 87       	std	Y+8, r24	; 0x08
    1216:	82 85       	ldd	r24, Z+10	; 0x0a
    1218:	93 85       	ldd	r25, Z+11	; 0x0b
    121a:	9b 87       	std	Y+11, r25	; 0x0b
    121c:	8a 87       	std	Y+10, r24	; 0x0a
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <myTime_getNowTime>:
    1224:	8a df       	rcall	.-236    	; 0x113a <mytime_tryCreateNowTime>
    1226:	80 91 3c 0f 	lds	r24, 0x0F3C	; 0x800f3c <nowTime>
    122a:	90 91 3d 0f 	lds	r25, 0x0F3D	; 0x800f3d <nowTime+0x1>
    122e:	08 95       	ret

00001230 <myTime_getHour>:

int myTime_getHour(myTime_t self)
{
	return self->hour;
}
    1230:	fc 01       	movw	r30, r24
    1232:	86 81       	ldd	r24, Z+6	; 0x06
    1234:	97 81       	ldd	r25, Z+7	; 0x07
    1236:	08 95       	ret

00001238 <myTime_getMin>:

int myTime_getMin(myTime_t self)
{
	return self->min;
}
    1238:	fc 01       	movw	r30, r24
    123a:	80 85       	ldd	r24, Z+8	; 0x08
    123c:	91 85       	ldd	r25, Z+9	; 0x09
    123e:	08 95       	ret

00001240 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1246:	e0 e2       	ldi	r30, 0x20	; 32
    1248:	f4 e0       	ldi	r31, 0x04	; 4
    124a:	01 c0       	rjmp	.+2      	; 0x124e <prvInsertBlockIntoFreeList+0xe>
    124c:	f9 01       	movw	r30, r18
    124e:	20 81       	ld	r18, Z
    1250:	31 81       	ldd	r19, Z+1	; 0x01
    1252:	2a 17       	cp	r18, r26
    1254:	3b 07       	cpc	r19, r27
    1256:	d0 f3       	brcs	.-12     	; 0x124c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	af 01       	movw	r20, r30
    125e:	48 0f       	add	r20, r24
    1260:	59 1f       	adc	r21, r25
    1262:	a4 17       	cp	r26, r20
    1264:	b5 07       	cpc	r27, r21
    1266:	49 f4       	brne	.+18     	; 0x127a <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1268:	12 96       	adiw	r26, 0x02	; 2
    126a:	4d 91       	ld	r20, X+
    126c:	5c 91       	ld	r21, X
    126e:	13 97       	sbiw	r26, 0x03	; 3
    1270:	84 0f       	add	r24, r20
    1272:	95 1f       	adc	r25, r21
    1274:	93 83       	std	Z+3, r25	; 0x03
    1276:	82 83       	std	Z+2, r24	; 0x02
    1278:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	8d 91       	ld	r24, X+
    127e:	9c 91       	ld	r25, X
    1280:	13 97       	sbiw	r26, 0x03	; 3
    1282:	ed 01       	movw	r28, r26
    1284:	c8 0f       	add	r28, r24
    1286:	d9 1f       	adc	r29, r25
    1288:	2c 17       	cp	r18, r28
    128a:	3d 07       	cpc	r19, r29
    128c:	d9 f4       	brne	.+54     	; 0x12c4 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    128e:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <pxEnd>
    1292:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <pxEnd+0x1>
    1296:	c2 17       	cp	r28, r18
    1298:	d3 07       	cpc	r29, r19
    129a:	81 f0       	breq	.+32     	; 0x12bc <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    129c:	2a 81       	ldd	r18, Y+2	; 0x02
    129e:	3b 81       	ldd	r19, Y+3	; 0x03
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	13 96       	adiw	r26, 0x03	; 3
    12a6:	9c 93       	st	X, r25
    12a8:	8e 93       	st	-X, r24
    12aa:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    12ac:	c0 81       	ld	r28, Z
    12ae:	d1 81       	ldd	r29, Z+1	; 0x01
    12b0:	88 81       	ld	r24, Y
    12b2:	99 81       	ldd	r25, Y+1	; 0x01
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	9c 93       	st	X, r25
    12b8:	8e 93       	st	-X, r24
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	dc 93       	st	X, r29
    12c0:	ce 93       	st	-X, r28
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    12c4:	11 96       	adiw	r26, 0x01	; 1
    12c6:	3c 93       	st	X, r19
    12c8:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    12ca:	ae 17       	cp	r26, r30
    12cc:	bf 07       	cpc	r27, r31
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    12d0:	b1 83       	std	Z+1, r27	; 0x01
    12d2:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    12ec:	0e 94 ab 11 	call	0x2356	; 0x2356 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    12f0:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <pxEnd>
    12f4:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <pxEnd+0x1>
    12f8:	89 2b       	or	r24, r25
    12fa:	41 f5       	brne	.+80     	; 0x134c <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    12fc:	e0 e2       	ldi	r30, 0x20	; 32
    12fe:	f4 e0       	ldi	r31, 0x04	; 4
    1300:	a4 e2       	ldi	r26, 0x24	; 36
    1302:	b4 e0       	ldi	r27, 0x04	; 4
    1304:	b1 83       	std	Z+1, r27	; 0x01
    1306:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1308:	13 82       	std	Z+3, r1	; 0x03
    130a:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    130c:	e4 ee       	ldi	r30, 0xE4	; 228
    130e:	fd e0       	ldi	r31, 0x0D	; 13
    1310:	f0 93 1f 04 	sts	0x041F, r31	; 0x80041f <pxEnd+0x1>
    1314:	e0 93 1e 04 	sts	0x041E, r30	; 0x80041e <pxEnd>
    pxEnd->xBlockSize = 0;
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    131c:	11 82       	std	Z+1, r1	; 0x01
    131e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1320:	80 ec       	ldi	r24, 0xC0	; 192
    1322:	99 e0       	ldi	r25, 0x09	; 9
    1324:	13 96       	adiw	r26, 0x03	; 3
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
    132a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    132c:	ed 93       	st	X+, r30
    132e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1330:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <xMinimumEverFreeBytesRemaining+0x1>
    1334:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1338:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <xFreeBytesRemaining+0x1>
    133c:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e8       	ldi	r25, 0x80	; 128
    1344:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <xBlockAllocatedBit+0x1>
    1348:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    134c:	e0 90 14 04 	lds	r14, 0x0414	; 0x800414 <xBlockAllocatedBit>
    1350:	f0 90 15 04 	lds	r15, 0x0415	; 0x800415 <xBlockAllocatedBit+0x1>
    1354:	c7 01       	movw	r24, r14
    1356:	8c 23       	and	r24, r28
    1358:	9d 23       	and	r25, r29
    135a:	89 2b       	or	r24, r25
    135c:	09 f0       	breq	.+2      	; 0x1360 <pvPortMalloc+0x86>
    135e:	75 c0       	rjmp	.+234    	; 0x144a <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1360:	20 97       	sbiw	r28, 0x00	; 0
    1362:	09 f4       	brne	.+2      	; 0x1366 <pvPortMalloc+0x8c>
    1364:	75 c0       	rjmp	.+234    	; 0x1450 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1366:	9e 01       	movw	r18, r28
    1368:	2c 5f       	subi	r18, 0xFC	; 252
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    136c:	c2 17       	cp	r28, r18
    136e:	d3 07       	cpc	r29, r19
    1370:	08 f0       	brcs	.+2      	; 0x1374 <pvPortMalloc+0x9a>
    1372:	6e c0       	rjmp	.+220    	; 0x1450 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1374:	21 15       	cp	r18, r1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <pvPortMalloc+0xa2>
    137a:	67 c0       	rjmp	.+206    	; 0x144a <pvPortMalloc+0x170>
    137c:	00 91 1c 04 	lds	r16, 0x041C	; 0x80041c <xFreeBytesRemaining>
    1380:	10 91 1d 04 	lds	r17, 0x041D	; 0x80041d <xFreeBytesRemaining+0x1>
    1384:	02 17       	cp	r16, r18
    1386:	13 07       	cpc	r17, r19
    1388:	08 f4       	brcc	.+2      	; 0x138c <pvPortMalloc+0xb2>
    138a:	5f c0       	rjmp	.+190    	; 0x144a <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    138c:	c0 91 20 04 	lds	r28, 0x0420	; 0x800420 <xStart>
    1390:	d0 91 21 04 	lds	r29, 0x0421	; 0x800421 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1394:	e0 e2       	ldi	r30, 0x20	; 32
    1396:	f4 e0       	ldi	r31, 0x04	; 4
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1398:	02 c0       	rjmp	.+4      	; 0x139e <pvPortMalloc+0xc4>
    139a:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
    139c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	82 17       	cp	r24, r18
    13a4:	93 07       	cpc	r25, r19
    13a6:	20 f4       	brcc	.+8      	; 0x13b0 <pvPortMalloc+0xd6>
    13a8:	88 81       	ld	r24, Y
    13aa:	99 81       	ldd	r25, Y+1	; 0x01
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	a9 f7       	brne	.-22     	; 0x139a <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    13b0:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <pxEnd>
    13b4:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <pxEnd+0x1>
    13b8:	c8 17       	cp	r28, r24
    13ba:	d9 07       	cpc	r29, r25
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <pvPortMalloc+0xe6>
    13be:	45 c0       	rjmp	.+138    	; 0x144a <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    13c0:	c0 80       	ld	r12, Z
    13c2:	d1 80       	ldd	r13, Z+1	; 0x01
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	c8 0e       	add	r12, r24
    13c8:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    13ca:	88 81       	ld	r24, Y
    13cc:	99 81       	ldd	r25, Y+1	; 0x01
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    13d2:	4a 81       	ldd	r20, Y+2	; 0x02
    13d4:	5b 81       	ldd	r21, Y+3	; 0x03
    13d6:	42 1b       	sub	r20, r18
    13d8:	53 0b       	sbc	r21, r19
    13da:	49 30       	cpi	r20, 0x09	; 9
    13dc:	51 05       	cpc	r21, r1
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    13e0:	ce 01       	movw	r24, r28
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    13e6:	fc 01       	movw	r30, r24
    13e8:	53 83       	std	Z+3, r21	; 0x03
    13ea:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    13ec:	3b 83       	std	Y+3, r19	; 0x03
    13ee:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    13f0:	27 df       	rcall	.-434    	; 0x1240 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	08 1b       	sub	r16, r24
    13f8:	19 0b       	sbc	r17, r25
    13fa:	10 93 1d 04 	sts	0x041D, r17	; 0x80041d <xFreeBytesRemaining+0x1>
    13fe:	00 93 1c 04 	sts	0x041C, r16	; 0x80041c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1402:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <xMinimumEverFreeBytesRemaining>
    1406:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <xMinimumEverFreeBytesRemaining+0x1>
    140a:	02 17       	cp	r16, r18
    140c:	13 07       	cpc	r17, r19
    140e:	20 f4       	brcc	.+8      	; 0x1418 <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1410:	10 93 1b 04 	sts	0x041B, r17	; 0x80041b <xMinimumEverFreeBytesRemaining+0x1>
    1414:	00 93 1a 04 	sts	0x041A, r16	; 0x80041a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1418:	e8 2a       	or	r14, r24
    141a:	f9 2a       	or	r15, r25
    141c:	fb 82       	std	Y+3, r15	; 0x03
    141e:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1420:	19 82       	std	Y+1, r1	; 0x01
    1422:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    1424:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <xNumberOfSuccessfulAllocations>
    1428:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <xNumberOfSuccessfulAllocations+0x1>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <xNumberOfSuccessfulAllocations+0x1>
    1432:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1436:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    143a:	c1 14       	cp	r12, r1
    143c:	d1 04       	cpc	r13, r1
    143e:	59 f4       	brne	.+22     	; 0x1456 <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    1440:	0e 94 cb 18 	call	0x3196	; 0x3196 <vApplicationMallocFailedHook>
    1444:	c1 2c       	mov	r12, r1
    1446:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
    1448:	06 c0       	rjmp	.+12     	; 0x1456 <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    144a:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>
    144e:	f8 cf       	rjmp	.-16     	; 0x1440 <pvPortMalloc+0x166>
    1450:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>
    1454:	f5 cf       	rjmp	.-22     	; 0x1440 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    1456:	c6 01       	movw	r24, r12
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	08 95       	ret

0000146a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	91 f1       	breq	.+100    	; 0x14d6 <vPortFree+0x6c>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1472:	fc 01       	movw	r30, r24
    1474:	34 97       	sbiw	r30, 0x04	; 4
    1476:	22 81       	ldd	r18, Z+2	; 0x02
    1478:	33 81       	ldd	r19, Z+3	; 0x03
    147a:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <xBlockAllocatedBit>
    147e:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <xBlockAllocatedBit+0x1>
    1482:	b9 01       	movw	r22, r18
    1484:	64 23       	and	r22, r20
    1486:	75 23       	and	r23, r21
    1488:	67 2b       	or	r22, r23
    148a:	29 f1       	breq	.+74     	; 0x14d6 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	67 2b       	or	r22, r23
    1492:	09 f5       	brne	.+66     	; 0x14d6 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1494:	ef 01       	movw	r28, r30
    1496:	40 95       	com	r20
    1498:	50 95       	com	r21
    149a:	24 23       	and	r18, r20
    149c:	35 23       	and	r19, r21
    149e:	33 83       	std	Z+3, r19	; 0x03
    14a0:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
    14a2:	59 d7       	rcall	.+3762   	; 0x2356 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    14a4:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <xFreeBytesRemaining>
    14a8:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <xFreeBytesRemaining+0x1>
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	82 0f       	add	r24, r18
    14b2:	93 1f       	adc	r25, r19
    14b4:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <xFreeBytesRemaining+0x1>
    14b8:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    14bc:	ce 01       	movw	r24, r28
    14be:	c0 de       	rcall	.-640    	; 0x1240 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    14c0:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <xNumberOfSuccessfulFrees>
    14c4:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <xNumberOfSuccessfulFrees+0x1>
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <xNumberOfSuccessfulFrees+0x1>
    14ce:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    14d2:	0e 94 ef 12 	call	0x25de	; 0x25de <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    14dc:	fc 01       	movw	r30, r24
    14de:	03 96       	adiw	r24, 0x03	; 3
    14e0:	92 83       	std	Z+2, r25	; 0x02
    14e2:	81 83       	std	Z+1, r24	; 0x01
    14e4:	4f ef       	ldi	r20, 0xFF	; 255
    14e6:	5f ef       	ldi	r21, 0xFF	; 255
    14e8:	ba 01       	movw	r22, r20
    14ea:	43 83       	std	Z+3, r20	; 0x03
    14ec:	54 83       	std	Z+4, r21	; 0x04
    14ee:	65 83       	std	Z+5, r22	; 0x05
    14f0:	76 83       	std	Z+6, r23	; 0x06
    14f2:	90 87       	std	Z+8, r25	; 0x08
    14f4:	87 83       	std	Z+7, r24	; 0x07
    14f6:	92 87       	std	Z+10, r25	; 0x0a
    14f8:	81 87       	std	Z+9, r24	; 0x09
    14fa:	10 82       	st	Z, r1
    14fc:	08 95       	ret

000014fe <vListInitialiseItem>:
    14fe:	fc 01       	movw	r30, r24
    1500:	13 86       	std	Z+11, r1	; 0x0b
    1502:	12 86       	std	Z+10, r1	; 0x0a
    1504:	08 95       	ret

00001506 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1510:	08 81       	ld	r16, Y
    1512:	19 81       	ldd	r17, Y+1	; 0x01
    1514:	2a 81       	ldd	r18, Y+2	; 0x02
    1516:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1518:	0f 3f       	cpi	r16, 0xFF	; 255
    151a:	4f ef       	ldi	r20, 0xFF	; 255
    151c:	14 07       	cpc	r17, r20
    151e:	24 07       	cpc	r18, r20
    1520:	34 07       	cpc	r19, r20
    1522:	21 f4       	brne	.+8      	; 0x152c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1524:	fc 01       	movw	r30, r24
    1526:	a1 85       	ldd	r26, Z+9	; 0x09
    1528:	b2 85       	ldd	r27, Z+10	; 0x0a
    152a:	11 c0       	rjmp	.+34     	; 0x154e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    152c:	dc 01       	movw	r26, r24
    152e:	13 96       	adiw	r26, 0x03	; 3
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <vListInsert+0x2e>
    1532:	df 01       	movw	r26, r30
    1534:	14 96       	adiw	r26, 0x04	; 4
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	15 97       	sbiw	r26, 0x05	; 5
    153c:	40 81       	ld	r20, Z
    153e:	51 81       	ldd	r21, Z+1	; 0x01
    1540:	62 81       	ldd	r22, Z+2	; 0x02
    1542:	73 81       	ldd	r23, Z+3	; 0x03
    1544:	04 17       	cp	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	26 07       	cpc	r18, r22
    154a:	37 07       	cpc	r19, r23
    154c:	90 f7       	brcc	.-28     	; 0x1532 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    154e:	14 96       	adiw	r26, 0x04	; 4
    1550:	ed 91       	ld	r30, X+
    1552:	fc 91       	ld	r31, X
    1554:	15 97       	sbiw	r26, 0x05	; 5
    1556:	fd 83       	std	Y+5, r31	; 0x05
    1558:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    155a:	d7 83       	std	Z+7, r29	; 0x07
    155c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    155e:	bf 83       	std	Y+7, r27	; 0x07
    1560:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1562:	15 96       	adiw	r26, 0x05	; 5
    1564:	dc 93       	st	X, r29
    1566:	ce 93       	st	-X, r28
    1568:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    156a:	9b 87       	std	Y+11, r25	; 0x0b
    156c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    156e:	fc 01       	movw	r30, r24
    1570:	20 81       	ld	r18, Z
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	20 83       	st	Z, r18
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1586:	a2 85       	ldd	r26, Z+10	; 0x0a
    1588:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    158a:	c4 81       	ldd	r28, Z+4	; 0x04
    158c:	d5 81       	ldd	r29, Z+5	; 0x05
    158e:	86 81       	ldd	r24, Z+6	; 0x06
    1590:	97 81       	ldd	r25, Z+7	; 0x07
    1592:	9f 83       	std	Y+7, r25	; 0x07
    1594:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1596:	c6 81       	ldd	r28, Z+6	; 0x06
    1598:	d7 81       	ldd	r29, Z+7	; 0x07
    159a:	84 81       	ldd	r24, Z+4	; 0x04
    159c:	95 81       	ldd	r25, Z+5	; 0x05
    159e:	9d 83       	std	Y+5, r25	; 0x05
    15a0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    15a2:	11 96       	adiw	r26, 0x01	; 1
    15a4:	8d 91       	ld	r24, X+
    15a6:	9c 91       	ld	r25, X
    15a8:	12 97       	sbiw	r26, 0x02	; 2
    15aa:	e8 17       	cp	r30, r24
    15ac:	f9 07       	cpc	r31, r25
    15ae:	31 f4       	brne	.+12     	; 0x15bc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    15b0:	86 81       	ldd	r24, Z+6	; 0x06
    15b2:	97 81       	ldd	r25, Z+7	; 0x07
    15b4:	12 96       	adiw	r26, 0x02	; 2
    15b6:	9c 93       	st	X, r25
    15b8:	8e 93       	st	-X, r24
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    15bc:	13 86       	std	Z+11, r1	; 0x0b
    15be:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    15c0:	8c 91       	ld	r24, X
    15c2:	81 50       	subi	r24, 0x01	; 1
    15c4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    15c6:	8c 91       	ld	r24, X
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    15ce:	fc 01       	movw	r30, r24
    15d0:	60 83       	st	Z, r22
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	70 83       	st	Z, r23
    15d6:	31 97       	sbiw	r30, 0x01	; 1
    15d8:	10 82       	st	Z, r1
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	10 82       	st	Z, r1
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	20 e8       	ldi	r18, 0x80	; 128
    15e2:	20 83       	st	Z, r18
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	10 82       	st	Z, r1
    15e8:	31 97       	sbiw	r30, 0x01	; 1
    15ea:	10 82       	st	Z, r1
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	10 82       	st	Z, r1
    15f0:	77 97       	sbiw	r30, 0x17	; 23
    15f2:	40 83       	st	Z, r20
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	50 83       	st	Z, r21
    15f8:	86 97       	sbiw	r24, 0x26	; 38
    15fa:	08 95       	ret

000015fc <xPortStartScheduler>:
    15fc:	a8 95       	wdr
    15fe:	90 ec       	ldi	r25, 0xC0	; 192
    1600:	88 e1       	ldi	r24, 0x18	; 24
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	a8 95       	wdr
    1608:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1612:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1616:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    161a:	cd 91       	ld	r28, X+
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	dd 91       	ld	r29, X+
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	bf 91       	pop	r27
    162c:	af 91       	pop	r26
    162e:	9f 91       	pop	r25
    1630:	8f 91       	pop	r24
    1632:	7f 91       	pop	r23
    1634:	6f 91       	pop	r22
    1636:	5f 91       	pop	r21
    1638:	4f 91       	pop	r20
    163a:	3f 91       	pop	r19
    163c:	2f 91       	pop	r18
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	3f 90       	pop	r3
    165c:	2f 90       	pop	r2
    165e:	1f 90       	pop	r1
    1660:	0f 90       	pop	r0
    1662:	0c be       	out	0x3c, r0	; 60
    1664:	0f 90       	pop	r0
    1666:	0b be       	out	0x3b, r0	; 59
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	08 95       	ret
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	08 95       	ret

00001674 <vPortYield>:
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	0f 92       	push	r0
    167c:	0b b6       	in	r0, 0x3b	; 59
    167e:	0f 92       	push	r0
    1680:	0c b6       	in	r0, 0x3c	; 60
    1682:	0f 92       	push	r0
    1684:	1f 92       	push	r1
    1686:	11 24       	eor	r1, r1
    1688:	2f 92       	push	r2
    168a:	3f 92       	push	r3
    168c:	4f 92       	push	r4
    168e:	5f 92       	push	r5
    1690:	6f 92       	push	r6
    1692:	7f 92       	push	r7
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	2f 93       	push	r18
    16aa:	3f 93       	push	r19
    16ac:	4f 93       	push	r20
    16ae:	5f 93       	push	r21
    16b0:	6f 93       	push	r22
    16b2:	7f 93       	push	r23
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	af 93       	push	r26
    16ba:	bf 93       	push	r27
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
    16c4:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    16c8:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    16cc:	0d b6       	in	r0, 0x3d	; 61
    16ce:	0d 92       	st	X+, r0
    16d0:	0e b6       	in	r0, 0x3e	; 62
    16d2:	0d 92       	st	X+, r0
    16d4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <vTaskSwitchContext>
    16d8:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    16dc:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    16e0:	cd 91       	ld	r28, X+
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	dd 91       	ld	r29, X+
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	8f 90       	pop	r8
    1718:	7f 90       	pop	r7
    171a:	6f 90       	pop	r6
    171c:	5f 90       	pop	r5
    171e:	4f 90       	pop	r4
    1720:	3f 90       	pop	r3
    1722:	2f 90       	pop	r2
    1724:	1f 90       	pop	r1
    1726:	0f 90       	pop	r0
    1728:	0c be       	out	0x3c, r0	; 60
    172a:	0f 90       	pop	r0
    172c:	0b be       	out	0x3b, r0	; 59
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	08 95       	ret

00001736 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	0f 92       	push	r0
    173e:	0b b6       	in	r0, 0x3b	; 59
    1740:	0f 92       	push	r0
    1742:	0c b6       	in	r0, 0x3c	; 60
    1744:	0f 92       	push	r0
    1746:	1f 92       	push	r1
    1748:	11 24       	eor	r1, r1
    174a:	2f 92       	push	r2
    174c:	3f 92       	push	r3
    174e:	4f 92       	push	r4
    1750:	5f 92       	push	r5
    1752:	6f 92       	push	r6
    1754:	7f 92       	push	r7
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	2f 93       	push	r18
    176c:	3f 93       	push	r19
    176e:	4f 93       	push	r20
    1770:	5f 93       	push	r21
    1772:	6f 93       	push	r22
    1774:	7f 93       	push	r23
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	af 93       	push	r26
    177c:	bf 93       	push	r27
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
    1786:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    178a:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    178e:	0d b6       	in	r0, 0x3d	; 61
    1790:	0d 92       	st	X+, r0
    1792:	0e b6       	in	r0, 0x3e	; 62
    1794:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1796:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1798:	f2 d5       	rcall	.+3044   	; 0x237e <xTaskIncrementTick>
    179a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    179c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    17a0:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    17a4:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    17a8:	cd 91       	ld	r28, X+
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	dd 91       	ld	r29, X+
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
    17e8:	3f 90       	pop	r3
    17ea:	2f 90       	pop	r2
    17ec:	1f 90       	pop	r1
    17ee:	0f 90       	pop	r0
    17f0:	0c be       	out	0x3c, r0	; 60
    17f2:	0f 90       	pop	r0
    17f4:	0b be       	out	0x3b, r0	; 59
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    17fc:	08 95       	ret

000017fe <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    17fe:	9b df       	rcall	.-202    	; 0x1736 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1800:	18 95       	reti

00001802 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	0f 92       	push	r0
    1808:	fc 01       	movw	r30, r24
    180a:	96 8d       	ldd	r25, Z+30	; 0x1e
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	91 11       	cpse	r25, r1
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret

00001818 <prvCopyDataToQueue>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	04 2f       	mov	r16, r20
    1824:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1826:	48 a1       	ldd	r20, Y+32	; 0x20
    1828:	41 11       	cpse	r20, r1
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <prvCopyDataToQueue+0x2c>
    182c:	88 81       	ld	r24, Y
    182e:	99 81       	ldd	r25, Y+1	; 0x01
    1830:	89 2b       	or	r24, r25
    1832:	09 f0       	breq	.+2      	; 0x1836 <prvCopyDataToQueue+0x1e>
    1834:	42 c0       	rjmp	.+132    	; 0x18ba <prvCopyDataToQueue+0xa2>
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <xTaskPriorityDisinherit>
    183e:	1d 82       	std	Y+5, r1	; 0x05
    1840:	1c 82       	std	Y+4, r1	; 0x04
    1842:	42 c0       	rjmp	.+132    	; 0x18c8 <prvCopyDataToQueue+0xb0>
    1844:	01 11       	cpse	r16, r1
    1846:	17 c0       	rjmp	.+46     	; 0x1876 <prvCopyDataToQueue+0x5e>
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <memcpy>
    1852:	28 a1       	ldd	r18, Y+32	; 0x20
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	9b 81       	ldd	r25, Y+3	; 0x03
    1858:	82 0f       	add	r24, r18
    185a:	91 1d       	adc	r25, r1
    185c:	9b 83       	std	Y+3, r25	; 0x03
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	82 17       	cp	r24, r18
    1866:	93 07       	cpc	r25, r19
    1868:	50 f1       	brcs	.+84     	; 0x18be <prvCopyDataToQueue+0xa6>
    186a:	88 81       	ld	r24, Y
    186c:	99 81       	ldd	r25, Y+1	; 0x01
    186e:	9b 83       	std	Y+3, r25	; 0x03
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	29 c0       	rjmp	.+82     	; 0x18c8 <prvCopyDataToQueue+0xb0>
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	9f 81       	ldd	r25, Y+7	; 0x07
    187c:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <memcpy>
    1880:	88 a1       	ldd	r24, Y+32	; 0x20
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	91 95       	neg	r25
    1886:	81 95       	neg	r24
    1888:	91 09       	sbc	r25, r1
    188a:	2e 81       	ldd	r18, Y+6	; 0x06
    188c:	3f 81       	ldd	r19, Y+7	; 0x07
    188e:	28 0f       	add	r18, r24
    1890:	39 1f       	adc	r19, r25
    1892:	3f 83       	std	Y+7, r19	; 0x07
    1894:	2e 83       	std	Y+6, r18	; 0x06
    1896:	48 81       	ld	r20, Y
    1898:	59 81       	ldd	r21, Y+1	; 0x01
    189a:	24 17       	cp	r18, r20
    189c:	35 07       	cpc	r19, r21
    189e:	30 f4       	brcc	.+12     	; 0x18ac <prvCopyDataToQueue+0x94>
    18a0:	2c 81       	ldd	r18, Y+4	; 0x04
    18a2:	3d 81       	ldd	r19, Y+5	; 0x05
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	9f 83       	std	Y+7, r25	; 0x07
    18aa:	8e 83       	std	Y+6, r24	; 0x06
    18ac:	02 30       	cpi	r16, 0x02	; 2
    18ae:	49 f4       	brne	.+18     	; 0x18c2 <prvCopyDataToQueue+0xaa>
    18b0:	11 23       	and	r17, r17
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <prvCopyDataToQueue+0xae>
    18b4:	11 50       	subi	r17, 0x01	; 1
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <prvCopyDataToQueue+0xb0>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	1f 5f       	subi	r17, 0xFF	; 255
    18ca:	1e 8f       	std	Y+30, r17	; 0x1e
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <prvCopyDataFromQueue>:
    18d6:	fc 01       	movw	r30, r24
    18d8:	40 a1       	ldd	r20, Z+32	; 0x20
    18da:	44 23       	and	r20, r20
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <prvCopyDataFromQueue+0x32>
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	26 81       	ldd	r18, Z+6	; 0x06
    18e2:	37 81       	ldd	r19, Z+7	; 0x07
    18e4:	24 0f       	add	r18, r20
    18e6:	35 1f       	adc	r19, r21
    18e8:	37 83       	std	Z+7, r19	; 0x07
    18ea:	26 83       	std	Z+6, r18	; 0x06
    18ec:	84 81       	ldd	r24, Z+4	; 0x04
    18ee:	95 81       	ldd	r25, Z+5	; 0x05
    18f0:	28 17       	cp	r18, r24
    18f2:	39 07       	cpc	r19, r25
    18f4:	20 f0       	brcs	.+8      	; 0x18fe <prvCopyDataFromQueue+0x28>
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	97 83       	std	Z+7, r25	; 0x07
    18fc:	86 83       	std	Z+6, r24	; 0x06
    18fe:	cb 01       	movw	r24, r22
    1900:	66 81       	ldd	r22, Z+6	; 0x06
    1902:	77 81       	ldd	r23, Z+7	; 0x07
    1904:	0c 94 fa 28 	jmp	0x51f4	; 0x51f4 <memcpy>
    1908:	08 95       	ret

0000190a <prvUnlockQueue>:
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	8c 01       	movw	r16, r24
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	0f 92       	push	r0
    191c:	fc 01       	movw	r30, r24
    191e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1920:	1c 16       	cp	r1, r28
    1922:	ac f4       	brge	.+42     	; 0x194e <prvUnlockQueue+0x44>
    1924:	83 89       	ldd	r24, Z+19	; 0x13
    1926:	81 11       	cpse	r24, r1
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <prvUnlockQueue+0x2c>
    192a:	11 c0       	rjmp	.+34     	; 0x194e <prvUnlockQueue+0x44>
    192c:	f8 01       	movw	r30, r16
    192e:	83 89       	ldd	r24, Z+19	; 0x13
    1930:	81 11       	cpse	r24, r1
    1932:	05 c0       	rjmp	.+10     	; 0x193e <prvUnlockQueue+0x34>
    1934:	0c c0       	rjmp	.+24     	; 0x194e <prvUnlockQueue+0x44>
    1936:	78 01       	movw	r14, r16
    1938:	f3 e1       	ldi	r31, 0x13	; 19
    193a:	ef 0e       	add	r14, r31
    193c:	f1 1c       	adc	r15, r1
    193e:	c7 01       	movw	r24, r14
    1940:	0e 94 b8 14 	call	0x2970	; 0x2970 <xTaskRemoveFromEventList>
    1944:	81 11       	cpse	r24, r1
    1946:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vTaskMissedYield>
    194a:	c1 50       	subi	r28, 0x01	; 1
    194c:	79 f7       	brne	.-34     	; 0x192c <prvUnlockQueue+0x22>
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	f8 01       	movw	r30, r16
    1952:	82 a3       	std	Z+34, r24	; 0x22
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	0f 92       	push	r0
    195e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1960:	1c 16       	cp	r1, r28
    1962:	a4 f4       	brge	.+40     	; 0x198c <prvUnlockQueue+0x82>
    1964:	80 85       	ldd	r24, Z+8	; 0x08
    1966:	81 11       	cpse	r24, r1
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <prvUnlockQueue+0x6c>
    196a:	10 c0       	rjmp	.+32     	; 0x198c <prvUnlockQueue+0x82>
    196c:	f8 01       	movw	r30, r16
    196e:	80 85       	ldd	r24, Z+8	; 0x08
    1970:	81 11       	cpse	r24, r1
    1972:	05 c0       	rjmp	.+10     	; 0x197e <prvUnlockQueue+0x74>
    1974:	0b c0       	rjmp	.+22     	; 0x198c <prvUnlockQueue+0x82>
    1976:	78 01       	movw	r14, r16
    1978:	f8 e0       	ldi	r31, 0x08	; 8
    197a:	ef 0e       	add	r14, r31
    197c:	f1 1c       	adc	r15, r1
    197e:	c7 01       	movw	r24, r14
    1980:	f7 d7       	rcall	.+4078   	; 0x2970 <xTaskRemoveFromEventList>
    1982:	81 11       	cpse	r24, r1
    1984:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vTaskMissedYield>
    1988:	c1 50       	subi	r28, 0x01	; 1
    198a:	81 f7       	brne	.-32     	; 0x196c <prvUnlockQueue+0x62>
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	f8 01       	movw	r30, r16
    1990:	81 a3       	std	Z+33, r24	; 0x21
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	08 95       	ret

000019a2 <xQueueGenericReset>:
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	ec 01       	movw	r28, r24
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	0f 92       	push	r0
    19ae:	e8 81       	ld	r30, Y
    19b0:	f9 81       	ldd	r31, Y+1	; 0x01
    19b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b4:	28 a1       	ldd	r18, Y+32	; 0x20
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	82 9f       	mul	r24, r18
    19bc:	a0 01       	movw	r20, r0
    19be:	83 9f       	mul	r24, r19
    19c0:	50 0d       	add	r21, r0
    19c2:	92 9f       	mul	r25, r18
    19c4:	50 0d       	add	r21, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	4e 0f       	add	r20, r30
    19ca:	5f 1f       	adc	r21, r31
    19cc:	5d 83       	std	Y+5, r21	; 0x05
    19ce:	4c 83       	std	Y+4, r20	; 0x04
    19d0:	1e 8e       	std	Y+30, r1	; 0x1e
    19d2:	fb 83       	std	Y+3, r31	; 0x03
    19d4:	ea 83       	std	Y+2, r30	; 0x02
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	82 9f       	mul	r24, r18
    19da:	a0 01       	movw	r20, r0
    19dc:	83 9f       	mul	r24, r19
    19de:	50 0d       	add	r21, r0
    19e0:	92 9f       	mul	r25, r18
    19e2:	50 0d       	add	r21, r0
    19e4:	11 24       	eor	r1, r1
    19e6:	cf 01       	movw	r24, r30
    19e8:	84 0f       	add	r24, r20
    19ea:	95 1f       	adc	r25, r21
    19ec:	9f 83       	std	Y+7, r25	; 0x07
    19ee:	8e 83       	std	Y+6, r24	; 0x06
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	89 a3       	std	Y+33, r24	; 0x21
    19f4:	8a a3       	std	Y+34, r24	; 0x22
    19f6:	61 11       	cpse	r22, r1
    19f8:	0a c0       	rjmp	.+20     	; 0x1a0e <xQueueGenericReset+0x6c>
    19fa:	88 85       	ldd	r24, Y+8	; 0x08
    19fc:	88 23       	and	r24, r24
    19fe:	69 f0       	breq	.+26     	; 0x1a1a <xQueueGenericReset+0x78>
    1a00:	ce 01       	movw	r24, r28
    1a02:	08 96       	adiw	r24, 0x08	; 8
    1a04:	b5 d7       	rcall	.+3946   	; 0x2970 <xTaskRemoveFromEventList>
    1a06:	88 23       	and	r24, r24
    1a08:	41 f0       	breq	.+16     	; 0x1a1a <xQueueGenericReset+0x78>
    1a0a:	34 de       	rcall	.-920    	; 0x1674 <vPortYield>
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <xQueueGenericReset+0x78>
    1a0e:	ce 01       	movw	r24, r28
    1a10:	08 96       	adiw	r24, 0x08	; 8
    1a12:	64 dd       	rcall	.-1336   	; 0x14dc <vListInitialise>
    1a14:	ce 01       	movw	r24, r28
    1a16:	43 96       	adiw	r24, 0x13	; 19
    1a18:	61 dd       	rcall	.-1342   	; 0x14dc <vListInitialise>
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <xQueueGenericCreate>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	08 2f       	mov	r16, r24
    1a30:	16 2f       	mov	r17, r22
    1a32:	86 9f       	mul	r24, r22
    1a34:	c0 01       	movw	r24, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	83 96       	adiw	r24, 0x23	; 35
    1a3a:	4f dc       	rcall	.-1890   	; 0x12da <pvPortMalloc>
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f0       	breq	.+26     	; 0x1a5c <xQueueGenericCreate+0x36>
    1a42:	11 11       	cpse	r17, r1
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <xQueueGenericCreate+0x26>
    1a46:	99 83       	std	Y+1, r25	; 0x01
    1a48:	88 83       	st	Y, r24
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <xQueueGenericCreate+0x2c>
    1a4c:	83 96       	adiw	r24, 0x23	; 35
    1a4e:	99 83       	std	Y+1, r25	; 0x01
    1a50:	88 83       	st	Y, r24
    1a52:	0f 8f       	std	Y+31, r16	; 0x1f
    1a54:	18 a3       	std	Y+32, r17	; 0x20
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	ce 01       	movw	r24, r28
    1a5a:	a3 df       	rcall	.-186    	; 0x19a2 <xQueueGenericReset>
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <xQueueGenericSend>:
    1a68:	9f 92       	push	r9
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	29 97       	sbiw	r28, 0x09	; 9
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	7c 01       	movw	r14, r24
    1a90:	5b 01       	movw	r10, r22
    1a92:	2e 83       	std	Y+6, r18	; 0x06
    1a94:	3f 83       	std	Y+7, r19	; 0x07
    1a96:	48 87       	std	Y+8, r20	; 0x08
    1a98:	59 87       	std	Y+9, r21	; 0x09
    1a9a:	10 e0       	ldi	r17, 0x00	; 0
    1a9c:	99 24       	eor	r9, r9
    1a9e:	93 94       	inc	r9
    1aa0:	6c 01       	movw	r12, r24
    1aa2:	88 e0       	ldi	r24, 0x08	; 8
    1aa4:	c8 0e       	add	r12, r24
    1aa6:	d1 1c       	adc	r13, r1
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	0f 92       	push	r0
    1aae:	f7 01       	movw	r30, r14
    1ab0:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ab2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ab4:	98 17       	cp	r25, r24
    1ab6:	10 f0       	brcs	.+4      	; 0x1abc <xQueueGenericSend+0x54>
    1ab8:	02 30       	cpi	r16, 0x02	; 2
    1aba:	a9 f4       	brne	.+42     	; 0x1ae6 <xQueueGenericSend+0x7e>
    1abc:	40 2f       	mov	r20, r16
    1abe:	b5 01       	movw	r22, r10
    1ac0:	c7 01       	movw	r24, r14
    1ac2:	aa de       	rcall	.-684    	; 0x1818 <prvCopyDataToQueue>
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	93 89       	ldd	r25, Z+19	; 0x13
    1ac8:	99 23       	and	r25, r25
    1aca:	39 f0       	breq	.+14     	; 0x1ada <xQueueGenericSend+0x72>
    1acc:	c7 01       	movw	r24, r14
    1ace:	43 96       	adiw	r24, 0x13	; 19
    1ad0:	4f d7       	rcall	.+3742   	; 0x2970 <xTaskRemoveFromEventList>
    1ad2:	88 23       	and	r24, r24
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <xQueueGenericSend+0x76>
    1ad6:	ce dd       	rcall	.-1124   	; 0x1674 <vPortYield>
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <xQueueGenericSend+0x76>
    1ada:	81 11       	cpse	r24, r1
    1adc:	cb dd       	rcall	.-1130   	; 0x1674 <vPortYield>
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	4b c0       	rjmp	.+150    	; 0x1b7c <xQueueGenericSend+0x114>
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aea:	a8 85       	ldd	r26, Y+8	; 0x08
    1aec:	b9 85       	ldd	r27, Y+9	; 0x09
    1aee:	89 2b       	or	r24, r25
    1af0:	8a 2b       	or	r24, r26
    1af2:	8b 2b       	or	r24, r27
    1af4:	21 f4       	brne	.+8      	; 0x1afe <xQueueGenericSend+0x96>
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	3f c0       	rjmp	.+126    	; 0x1b7c <xQueueGenericSend+0x114>
    1afe:	11 11       	cpse	r17, r1
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <xQueueGenericSend+0xa2>
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	e4 d7       	rcall	.+4040   	; 0x2ad0 <vTaskInternalSetTimeOutState>
    1b08:	19 2d       	mov	r17, r9
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	23 d4       	rcall	.+2118   	; 0x2356 <vTaskSuspendAll>
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	0f 92       	push	r0
    1b16:	f7 01       	movw	r30, r14
    1b18:	81 a1       	ldd	r24, Z+33	; 0x21
    1b1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <xQueueGenericSend+0xb8>
    1b1e:	11 a2       	std	Z+33, r1	; 0x21
    1b20:	f7 01       	movw	r30, r14
    1b22:	82 a1       	ldd	r24, Z+34	; 0x22
    1b24:	8f 3f       	cpi	r24, 0xFF	; 255
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <xQueueGenericSend+0xc2>
    1b28:	12 a2       	std	Z+34, r1	; 0x22
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	be 01       	movw	r22, r28
    1b30:	6a 5f       	subi	r22, 0xFA	; 250
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	dc d7       	rcall	.+4024   	; 0x2af2 <xTaskCheckForTimeOut>
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	1b c0       	rjmp	.+54     	; 0x1b74 <xQueueGenericSend+0x10c>
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	0f 92       	push	r0
    1b44:	f7 01       	movw	r30, r14
    1b46:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b48:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	98 13       	cpse	r25, r24
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <xQueueGenericSend+0x104>
    1b52:	4e 81       	ldd	r20, Y+6	; 0x06
    1b54:	5f 81       	ldd	r21, Y+7	; 0x07
    1b56:	68 85       	ldd	r22, Y+8	; 0x08
    1b58:	79 85       	ldd	r23, Y+9	; 0x09
    1b5a:	c6 01       	movw	r24, r12
    1b5c:	b0 d6       	rcall	.+3424   	; 0x28be <vTaskPlaceOnEventList>
    1b5e:	c7 01       	movw	r24, r14
    1b60:	d4 de       	rcall	.-600    	; 0x190a <prvUnlockQueue>
    1b62:	3d d5       	rcall	.+2682   	; 0x25de <xTaskResumeAll>
    1b64:	81 11       	cpse	r24, r1
    1b66:	a0 cf       	rjmp	.-192    	; 0x1aa8 <xQueueGenericSend+0x40>
    1b68:	85 dd       	rcall	.-1270   	; 0x1674 <vPortYield>
    1b6a:	9e cf       	rjmp	.-196    	; 0x1aa8 <xQueueGenericSend+0x40>
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	cd de       	rcall	.-614    	; 0x190a <prvUnlockQueue>
    1b70:	36 d5       	rcall	.+2668   	; 0x25de <xTaskResumeAll>
    1b72:	9a cf       	rjmp	.-204    	; 0x1aa8 <xQueueGenericSend+0x40>
    1b74:	c7 01       	movw	r24, r14
    1b76:	c9 de       	rcall	.-622    	; 0x190a <prvUnlockQueue>
    1b78:	32 d5       	rcall	.+2660   	; 0x25de <xTaskResumeAll>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	29 96       	adiw	r28, 0x09	; 9
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	cf 90       	pop	r12
    1b98:	bf 90       	pop	r11
    1b9a:	af 90       	pop	r10
    1b9c:	9f 90       	pop	r9
    1b9e:	08 95       	ret

00001ba0 <xQueueGenericSendFromISR>:
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	8a 01       	movw	r16, r20
    1bae:	fc 01       	movw	r30, r24
    1bb0:	56 8d       	ldd	r21, Z+30	; 0x1e
    1bb2:	37 8d       	ldd	r19, Z+31	; 0x1f
    1bb4:	53 17       	cp	r21, r19
    1bb6:	10 f0       	brcs	.+4      	; 0x1bbc <xQueueGenericSendFromISR+0x1c>
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	f1 f4       	brne	.+60     	; 0x1bf8 <xQueueGenericSendFromISR+0x58>
    1bbc:	42 2f       	mov	r20, r18
    1bbe:	78 01       	movw	r14, r16
    1bc0:	ec 01       	movw	r28, r24
    1bc2:	1a a1       	ldd	r17, Y+34	; 0x22
    1bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	27 de       	rcall	.-946    	; 0x1818 <prvCopyDataToQueue>
    1bca:	1f 3f       	cpi	r17, 0xFF	; 255
    1bcc:	79 f4       	brne	.+30     	; 0x1bec <xQueueGenericSendFromISR+0x4c>
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	88 23       	and	r24, r24
    1bd2:	a1 f0       	breq	.+40     	; 0x1bfc <xQueueGenericSendFromISR+0x5c>
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	43 96       	adiw	r24, 0x13	; 19
    1bd8:	cb d6       	rcall	.+3478   	; 0x2970 <xTaskRemoveFromEventList>
    1bda:	88 23       	and	r24, r24
    1bdc:	89 f0       	breq	.+34     	; 0x1c00 <xQueueGenericSendFromISR+0x60>
    1bde:	e1 14       	cp	r14, r1
    1be0:	f1 04       	cpc	r15, r1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <xQueueGenericSendFromISR+0x64>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	f7 01       	movw	r30, r14
    1be8:	80 83       	st	Z, r24
    1bea:	0d c0       	rjmp	.+26     	; 0x1c06 <xQueueGenericSendFromISR+0x66>
    1bec:	ff 24       	eor	r15, r15
    1bee:	f3 94       	inc	r15
    1bf0:	f1 0e       	add	r15, r17
    1bf2:	fa a2       	std	Y+34, r15	; 0x22
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	07 c0       	rjmp	.+14     	; 0x1c06 <xQueueGenericSendFromISR+0x66>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <xQueueGenericSendFromISR+0x66>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <xQueueGenericSendFromISR+0x66>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <xQueueGenericSendFromISR+0x66>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	08 95       	ret

00001c14 <xQueueReceive>:
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	29 97       	sbiw	r28, 0x09	; 9
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	8c 01       	movw	r16, r24
    1c3c:	5b 01       	movw	r10, r22
    1c3e:	2e 83       	std	Y+6, r18	; 0x06
    1c40:	3f 83       	std	Y+7, r19	; 0x07
    1c42:	48 87       	std	Y+8, r20	; 0x08
    1c44:	59 87       	std	Y+9, r21	; 0x09
    1c46:	e1 2c       	mov	r14, r1
    1c48:	99 24       	eor	r9, r9
    1c4a:	93 94       	inc	r9
    1c4c:	6c 01       	movw	r12, r24
    1c4e:	83 e1       	ldi	r24, 0x13	; 19
    1c50:	c8 0e       	add	r12, r24
    1c52:	d1 1c       	adc	r13, r1
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	0f 92       	push	r0
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1c5e:	ff 20       	and	r15, r15
    1c60:	91 f0       	breq	.+36     	; 0x1c86 <xQueueReceive+0x72>
    1c62:	b5 01       	movw	r22, r10
    1c64:	c8 01       	movw	r24, r16
    1c66:	37 de       	rcall	.-914    	; 0x18d6 <prvCopyDataFromQueue>
    1c68:	fa 94       	dec	r15
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	f6 8e       	std	Z+30, r15	; 0x1e
    1c6e:	80 85       	ldd	r24, Z+8	; 0x08
    1c70:	88 23       	and	r24, r24
    1c72:	29 f0       	breq	.+10     	; 0x1c7e <xQueueReceive+0x6a>
    1c74:	c8 01       	movw	r24, r16
    1c76:	08 96       	adiw	r24, 0x08	; 8
    1c78:	7b d6       	rcall	.+3318   	; 0x2970 <xTaskRemoveFromEventList>
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	fb dc       	rcall	.-1546   	; 0x1674 <vPortYield>
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	4a c0       	rjmp	.+148    	; 0x1d1a <xQueueReceive+0x106>
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8a:	a8 85       	ldd	r26, Y+8	; 0x08
    1c8c:	b9 85       	ldd	r27, Y+9	; 0x09
    1c8e:	89 2b       	or	r24, r25
    1c90:	8a 2b       	or	r24, r26
    1c92:	8b 2b       	or	r24, r27
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <xQueueReceive+0x8a>
    1c96:	0f 90       	pop	r0
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	3e c0       	rjmp	.+124    	; 0x1d1a <xQueueReceive+0x106>
    1c9e:	e1 10       	cpse	r14, r1
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <xQueueReceive+0x96>
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	14 d7       	rcall	.+3624   	; 0x2ad0 <vTaskInternalSetTimeOutState>
    1ca8:	e9 2c       	mov	r14, r9
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	53 d3       	rcall	.+1702   	; 0x2356 <vTaskSuspendAll>
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	0f 92       	push	r0
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	81 a1       	ldd	r24, Z+33	; 0x21
    1cba:	8f 3f       	cpi	r24, 0xFF	; 255
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <xQueueReceive+0xac>
    1cbe:	11 a2       	std	Z+33, r1	; 0x21
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	82 a1       	ldd	r24, Z+34	; 0x22
    1cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <xQueueReceive+0xb6>
    1cc8:	12 a2       	std	Z+34, r1	; 0x22
    1cca:	0f 90       	pop	r0
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	be 01       	movw	r22, r28
    1cd0:	6a 5f       	subi	r22, 0xFA	; 250
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	0c d7       	rcall	.+3608   	; 0x2af2 <xTaskCheckForTimeOut>
    1cda:	81 11       	cpse	r24, r1
    1cdc:	15 c0       	rjmp	.+42     	; 0x1d08 <xQueueReceive+0xf4>
    1cde:	c8 01       	movw	r24, r16
    1ce0:	90 dd       	rcall	.-1248   	; 0x1802 <prvIsQueueEmpty>
    1ce2:	88 23       	and	r24, r24
    1ce4:	69 f0       	breq	.+26     	; 0x1d00 <xQueueReceive+0xec>
    1ce6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ce8:	5f 81       	ldd	r21, Y+7	; 0x07
    1cea:	68 85       	ldd	r22, Y+8	; 0x08
    1cec:	79 85       	ldd	r23, Y+9	; 0x09
    1cee:	c6 01       	movw	r24, r12
    1cf0:	e6 d5       	rcall	.+3020   	; 0x28be <vTaskPlaceOnEventList>
    1cf2:	c8 01       	movw	r24, r16
    1cf4:	0a de       	rcall	.-1004   	; 0x190a <prvUnlockQueue>
    1cf6:	73 d4       	rcall	.+2278   	; 0x25de <xTaskResumeAll>
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	ac cf       	rjmp	.-168    	; 0x1c54 <xQueueReceive+0x40>
    1cfc:	bb dc       	rcall	.-1674   	; 0x1674 <vPortYield>
    1cfe:	aa cf       	rjmp	.-172    	; 0x1c54 <xQueueReceive+0x40>
    1d00:	c8 01       	movw	r24, r16
    1d02:	03 de       	rcall	.-1018   	; 0x190a <prvUnlockQueue>
    1d04:	6c d4       	rcall	.+2264   	; 0x25de <xTaskResumeAll>
    1d06:	a6 cf       	rjmp	.-180    	; 0x1c54 <xQueueReceive+0x40>
    1d08:	c8 01       	movw	r24, r16
    1d0a:	ff dd       	rcall	.-1026   	; 0x190a <prvUnlockQueue>
    1d0c:	68 d4       	rcall	.+2256   	; 0x25de <xTaskResumeAll>
    1d0e:	c8 01       	movw	r24, r16
    1d10:	78 dd       	rcall	.-1296   	; 0x1802 <prvIsQueueEmpty>
    1d12:	88 23       	and	r24, r24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <xQueueReceive+0x104>
    1d16:	9e cf       	rjmp	.-196    	; 0x1c54 <xQueueReceive+0x40>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	29 96       	adiw	r28, 0x09	; 9
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	bf 90       	pop	r11
    1d38:	af 90       	pop	r10
    1d3a:	9f 90       	pop	r9
    1d3c:	08 95       	ret

00001d3e <xQueueSemaphoreTake>:
    1d3e:	bf 92       	push	r11
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	29 97       	sbiw	r28, 0x09	; 9
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	8c 01       	movw	r16, r24
    1d62:	4e 83       	std	Y+6, r20	; 0x06
    1d64:	5f 83       	std	Y+7, r21	; 0x07
    1d66:	68 87       	std	Y+8, r22	; 0x08
    1d68:	79 87       	std	Y+9, r23	; 0x09
    1d6a:	b1 2c       	mov	r11, r1
    1d6c:	d1 2c       	mov	r13, r1
    1d6e:	cc 24       	eor	r12, r12
    1d70:	c3 94       	inc	r12
    1d72:	7c 01       	movw	r14, r24
    1d74:	83 e1       	ldi	r24, 0x13	; 19
    1d76:	e8 0e       	add	r14, r24
    1d78:	f1 1c       	adc	r15, r1
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	0f 92       	push	r0
    1d80:	d8 01       	movw	r26, r16
    1d82:	5e 96       	adiw	r26, 0x1e	; 30
    1d84:	8c 91       	ld	r24, X
    1d86:	5e 97       	sbiw	r26, 0x1e	; 30
    1d88:	88 23       	and	r24, r24
    1d8a:	d9 f0       	breq	.+54     	; 0x1dc2 <xQueueSemaphoreTake+0x84>
    1d8c:	81 50       	subi	r24, 0x01	; 1
    1d8e:	5e 96       	adiw	r26, 0x1e	; 30
    1d90:	8c 93       	st	X, r24
    1d92:	5e 97       	sbiw	r26, 0x1e	; 30
    1d94:	8d 91       	ld	r24, X+
    1d96:	9c 91       	ld	r25, X
    1d98:	89 2b       	or	r24, r25
    1d9a:	29 f4       	brne	.+10     	; 0x1da6 <xQueueSemaphoreTake+0x68>
    1d9c:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <pvTaskIncrementMutexHeldCount>
    1da0:	f8 01       	movw	r30, r16
    1da2:	95 83       	std	Z+5, r25	; 0x05
    1da4:	84 83       	std	Z+4, r24	; 0x04
    1da6:	d8 01       	movw	r26, r16
    1da8:	18 96       	adiw	r26, 0x08	; 8
    1daa:	8c 91       	ld	r24, X
    1dac:	88 23       	and	r24, r24
    1dae:	29 f0       	breq	.+10     	; 0x1dba <xQueueSemaphoreTake+0x7c>
    1db0:	c8 01       	movw	r24, r16
    1db2:	08 96       	adiw	r24, 0x08	; 8
    1db4:	dd d5       	rcall	.+3002   	; 0x2970 <xTaskRemoveFromEventList>
    1db6:	81 11       	cpse	r24, r1
    1db8:	5d dc       	rcall	.-1862   	; 0x1674 <vPortYield>
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	76 c0       	rjmp	.+236    	; 0x1eae <xQueueSemaphoreTake+0x170>
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	a8 85       	ldd	r26, Y+8	; 0x08
    1dc8:	b9 85       	ldd	r27, Y+9	; 0x09
    1dca:	89 2b       	or	r24, r25
    1dcc:	8a 2b       	or	r24, r26
    1dce:	8b 2b       	or	r24, r27
    1dd0:	21 f4       	brne	.+8      	; 0x1dda <xQueueSemaphoreTake+0x9c>
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	6a c0       	rjmp	.+212    	; 0x1eae <xQueueSemaphoreTake+0x170>
    1dda:	d1 10       	cpse	r13, r1
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <xQueueSemaphoreTake+0xa8>
    1dde:	ce 01       	movw	r24, r28
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	76 d6       	rcall	.+3308   	; 0x2ad0 <vTaskInternalSetTimeOutState>
    1de4:	dc 2c       	mov	r13, r12
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	b5 d2       	rcall	.+1386   	; 0x2356 <vTaskSuspendAll>
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	0f 92       	push	r0
    1df2:	f8 01       	movw	r30, r16
    1df4:	81 a1       	ldd	r24, Z+33	; 0x21
    1df6:	8f 3f       	cpi	r24, 0xFF	; 255
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <xQueueSemaphoreTake+0xbe>
    1dfa:	11 a2       	std	Z+33, r1	; 0x21
    1dfc:	d8 01       	movw	r26, r16
    1dfe:	92 96       	adiw	r26, 0x22	; 34
    1e00:	8c 91       	ld	r24, X
    1e02:	92 97       	sbiw	r26, 0x22	; 34
    1e04:	8f 3f       	cpi	r24, 0xFF	; 255
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <xQueueSemaphoreTake+0xce>
    1e08:	92 96       	adiw	r26, 0x22	; 34
    1e0a:	1c 92       	st	X, r1
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	be 01       	movw	r22, r28
    1e12:	6a 5f       	subi	r22, 0xFA	; 250
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	6b d6       	rcall	.+3286   	; 0x2af2 <xTaskCheckForTimeOut>
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	23 c0       	rjmp	.+70     	; 0x1e66 <xQueueSemaphoreTake+0x128>
    1e20:	c8 01       	movw	r24, r16
    1e22:	ef dc       	rcall	.-1570   	; 0x1802 <prvIsQueueEmpty>
    1e24:	88 23       	and	r24, r24
    1e26:	d9 f0       	breq	.+54     	; 0x1e5e <xQueueSemaphoreTake+0x120>
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	89 2b       	or	r24, r25
    1e30:	49 f4       	brne	.+18     	; 0x1e44 <xQueueSemaphoreTake+0x106>
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	0f 92       	push	r0
    1e38:	84 81       	ldd	r24, Z+4	; 0x04
    1e3a:	95 81       	ldd	r25, Z+5	; 0x05
    1e3c:	c5 d6       	rcall	.+3466   	; 0x2bc8 <xTaskPriorityInherit>
    1e3e:	b8 2e       	mov	r11, r24
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	4e 81       	ldd	r20, Y+6	; 0x06
    1e46:	5f 81       	ldd	r21, Y+7	; 0x07
    1e48:	68 85       	ldd	r22, Y+8	; 0x08
    1e4a:	79 85       	ldd	r23, Y+9	; 0x09
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	37 d5       	rcall	.+2670   	; 0x28be <vTaskPlaceOnEventList>
    1e50:	c8 01       	movw	r24, r16
    1e52:	5b dd       	rcall	.-1354   	; 0x190a <prvUnlockQueue>
    1e54:	c4 d3       	rcall	.+1928   	; 0x25de <xTaskResumeAll>
    1e56:	81 11       	cpse	r24, r1
    1e58:	90 cf       	rjmp	.-224    	; 0x1d7a <xQueueSemaphoreTake+0x3c>
    1e5a:	0c dc       	rcall	.-2024   	; 0x1674 <vPortYield>
    1e5c:	8e cf       	rjmp	.-228    	; 0x1d7a <xQueueSemaphoreTake+0x3c>
    1e5e:	c8 01       	movw	r24, r16
    1e60:	54 dd       	rcall	.-1368   	; 0x190a <prvUnlockQueue>
    1e62:	bd d3       	rcall	.+1914   	; 0x25de <xTaskResumeAll>
    1e64:	8a cf       	rjmp	.-236    	; 0x1d7a <xQueueSemaphoreTake+0x3c>
    1e66:	c8 01       	movw	r24, r16
    1e68:	50 dd       	rcall	.-1376   	; 0x190a <prvUnlockQueue>
    1e6a:	b9 d3       	rcall	.+1906   	; 0x25de <xTaskResumeAll>
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	c9 dc       	rcall	.-1646   	; 0x1802 <prvIsQueueEmpty>
    1e70:	88 23       	and	r24, r24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <xQueueSemaphoreTake+0x138>
    1e74:	82 cf       	rjmp	.-252    	; 0x1d7a <xQueueSemaphoreTake+0x3c>
    1e76:	bb 20       	and	r11, r11
    1e78:	c9 f0       	breq	.+50     	; 0x1eac <xQueueSemaphoreTake+0x16e>
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	0f 92       	push	r0
    1e80:	f8 01       	movw	r30, r16
    1e82:	83 89       	ldd	r24, Z+19	; 0x13
    1e84:	88 23       	and	r24, r24
    1e86:	39 f0       	breq	.+14     	; 0x1e96 <xQueueSemaphoreTake+0x158>
    1e88:	02 8c       	ldd	r0, Z+26	; 0x1a
    1e8a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1e8c:	e0 2d       	mov	r30, r0
    1e8e:	80 81       	ld	r24, Z
    1e90:	6a e0       	ldi	r22, 0x0A	; 10
    1e92:	68 1b       	sub	r22, r24
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <xQueueSemaphoreTake+0x15a>
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	d8 01       	movw	r26, r16
    1e9a:	14 96       	adiw	r26, 0x04	; 4
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    1ea0:	15 97       	sbiw	r26, 0x05	; 5
    1ea2:	74 d7       	rcall	.+3816   	; 0x2d8c <vTaskPriorityDisinheritAfterTimeout>
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <xQueueSemaphoreTake+0x170>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	29 96       	adiw	r28, 0x09	; 9
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	df 90       	pop	r13
    1ec8:	cf 90       	pop	r12
    1eca:	bf 90       	pop	r11
    1ecc:	08 95       	ret

00001ece <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	0f 92       	push	r0
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <vQueueWaitForMessageRestricted+0x14>
    1ee0:	19 a2       	std	Y+33, r1	; 0x21
    1ee2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ee4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <vQueueWaitForMessageRestricted+0x1c>
    1ee8:	1a a2       	std	Y+34, r1	; 0x22
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1eee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	43 96       	adiw	r24, 0x13	; 19
    1ef8:	f9 d4       	rcall	.+2546   	; 0x28ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1efa:	ce 01       	movw	r24, r28
    1efc:	06 dd       	rcall	.-1524   	; 0x190a <prvUnlockQueue>
    }
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <prvResetNextTaskUnblockTime>:
    1f04:	e0 91 21 0e 	lds	r30, 0x0E21	; 0x800e21 <pxDelayedTaskList>
    1f08:	f0 91 22 0e 	lds	r31, 0x0E22	; 0x800e22 <pxDelayedTaskList+0x1>
    1f0c:	80 81       	ld	r24, Z
    1f0e:	81 11       	cpse	r24, r1
    1f10:	0c c0       	rjmp	.+24     	; 0x1f2a <prvResetNextTaskUnblockTime+0x26>
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	dc 01       	movw	r26, r24
    1f18:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <xNextTaskUnblockTime>
    1f1c:	90 93 ec 0d 	sts	0x0DEC, r25	; 0x800dec <xNextTaskUnblockTime+0x1>
    1f20:	a0 93 ed 0d 	sts	0x0DED, r26	; 0x800ded <xNextTaskUnblockTime+0x2>
    1f24:	b0 93 ee 0d 	sts	0x0DEE, r27	; 0x800dee <xNextTaskUnblockTime+0x3>
    1f28:	08 95       	ret
    1f2a:	e0 91 21 0e 	lds	r30, 0x0E21	; 0x800e21 <pxDelayedTaskList>
    1f2e:	f0 91 22 0e 	lds	r31, 0x0E22	; 0x800e22 <pxDelayedTaskList+0x1>
    1f32:	07 80       	ldd	r0, Z+7	; 0x07
    1f34:	f0 85       	ldd	r31, Z+8	; 0x08
    1f36:	e0 2d       	mov	r30, r0
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f40:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <xNextTaskUnblockTime>
    1f44:	90 93 ec 0d 	sts	0x0DEC, r25	; 0x800dec <xNextTaskUnblockTime+0x1>
    1f48:	a0 93 ed 0d 	sts	0x0DED, r26	; 0x800ded <xNextTaskUnblockTime+0x2>
    1f4c:	b0 93 ee 0d 	sts	0x0DEE, r27	; 0x800dee <xNextTaskUnblockTime+0x3>
    1f50:	08 95       	ret

00001f52 <prvAddCurrentTaskToDelayedList>:
    1f52:	8f 92       	push	r8
    1f54:	9f 92       	push	r9
    1f56:	af 92       	push	r10
    1f58:	bf 92       	push	r11
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	6b 01       	movw	r12, r22
    1f68:	7c 01       	movw	r14, r24
    1f6a:	c4 2f       	mov	r28, r20
    1f6c:	80 90 f8 0d 	lds	r8, 0x0DF8	; 0x800df8 <xTickCount>
    1f70:	90 90 f9 0d 	lds	r9, 0x0DF9	; 0x800df9 <xTickCount+0x1>
    1f74:	a0 90 fa 0d 	lds	r10, 0x0DFA	; 0x800dfa <xTickCount+0x2>
    1f78:	b0 90 fb 0d 	lds	r11, 0x0DFB	; 0x800dfb <xTickCount+0x3>
    1f7c:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1f80:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    1f84:	02 96       	adiw	r24, 0x02	; 2
    1f86:	fc da       	rcall	.-2568   	; 0x1580 <uxListRemove>
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	c8 16       	cp	r12, r24
    1f8c:	d8 06       	cpc	r13, r24
    1f8e:	e8 06       	cpc	r14, r24
    1f90:	f8 06       	cpc	r15, r24
    1f92:	b1 f5       	brne	.+108    	; 0x2000 <prvAddCurrentTaskToDelayedList+0xae>
    1f94:	cc 23       	and	r28, r28
    1f96:	a1 f1       	breq	.+104    	; 0x2000 <prvAddCurrentTaskToDelayedList+0xae>
    1f98:	ed ef       	ldi	r30, 0xFD	; 253
    1f9a:	fd e0       	ldi	r31, 0x0D	; 13
    1f9c:	a1 81       	ldd	r26, Z+1	; 0x01
    1f9e:	b2 81       	ldd	r27, Z+2	; 0x02
    1fa0:	c0 91 a7 0e 	lds	r28, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1fa4:	d0 91 a8 0e 	lds	r29, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    1fa8:	bf 83       	std	Y+7, r27	; 0x07
    1faa:	ae 83       	std	Y+6, r26	; 0x06
    1fac:	c0 91 a7 0e 	lds	r28, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1fb0:	d0 91 a8 0e 	lds	r29, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    1fb4:	16 96       	adiw	r26, 0x06	; 6
    1fb6:	8d 91       	ld	r24, X+
    1fb8:	9c 91       	ld	r25, X
    1fba:	17 97       	sbiw	r26, 0x07	; 7
    1fbc:	99 87       	std	Y+9, r25	; 0x09
    1fbe:	88 87       	std	Y+8, r24	; 0x08
    1fc0:	16 96       	adiw	r26, 0x06	; 6
    1fc2:	cd 91       	ld	r28, X+
    1fc4:	dc 91       	ld	r29, X
    1fc6:	17 97       	sbiw	r26, 0x07	; 7
    1fc8:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1fcc:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    1fd0:	02 96       	adiw	r24, 0x02	; 2
    1fd2:	9d 83       	std	Y+5, r25	; 0x05
    1fd4:	8c 83       	std	Y+4, r24	; 0x04
    1fd6:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1fda:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    1fde:	02 96       	adiw	r24, 0x02	; 2
    1fe0:	17 96       	adiw	r26, 0x07	; 7
    1fe2:	9c 93       	st	X, r25
    1fe4:	8e 93       	st	-X, r24
    1fe6:	16 97       	sbiw	r26, 0x06	; 6
    1fe8:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    1fec:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    1ff0:	1d 96       	adiw	r26, 0x0d	; 13
    1ff2:	fc 93       	st	X, r31
    1ff4:	ee 93       	st	-X, r30
    1ff6:	1c 97       	sbiw	r26, 0x0c	; 12
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	80 83       	st	Z, r24
    1ffe:	3d c0       	rjmp	.+122    	; 0x207a <prvAddCurrentTaskToDelayedList+0x128>
    2000:	c8 0c       	add	r12, r8
    2002:	d9 1c       	adc	r13, r9
    2004:	ea 1c       	adc	r14, r10
    2006:	fb 1c       	adc	r15, r11
    2008:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    200c:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2010:	c2 82       	std	Z+2, r12	; 0x02
    2012:	d3 82       	std	Z+3, r13	; 0x03
    2014:	e4 82       	std	Z+4, r14	; 0x04
    2016:	f5 82       	std	Z+5, r15	; 0x05
    2018:	c8 14       	cp	r12, r8
    201a:	d9 04       	cpc	r13, r9
    201c:	ea 04       	cpc	r14, r10
    201e:	fb 04       	cpc	r15, r11
    2020:	60 f4       	brcc	.+24     	; 0x203a <prvAddCurrentTaskToDelayedList+0xe8>
    2022:	60 91 a7 0e 	lds	r22, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2026:	70 91 a8 0e 	lds	r23, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    202a:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <pxOverflowDelayedTaskList>
    202e:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <pxOverflowDelayedTaskList+0x1>
    2032:	6e 5f       	subi	r22, 0xFE	; 254
    2034:	7f 4f       	sbci	r23, 0xFF	; 255
    2036:	67 da       	rcall	.-2866   	; 0x1506 <vListInsert>
    2038:	20 c0       	rjmp	.+64     	; 0x207a <prvAddCurrentTaskToDelayedList+0x128>
    203a:	60 91 a7 0e 	lds	r22, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    203e:	70 91 a8 0e 	lds	r23, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2042:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <pxDelayedTaskList>
    2046:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <pxDelayedTaskList+0x1>
    204a:	6e 5f       	subi	r22, 0xFE	; 254
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	5b da       	rcall	.-2890   	; 0x1506 <vListInsert>
    2050:	80 91 eb 0d 	lds	r24, 0x0DEB	; 0x800deb <xNextTaskUnblockTime>
    2054:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <xNextTaskUnblockTime+0x1>
    2058:	a0 91 ed 0d 	lds	r26, 0x0DED	; 0x800ded <xNextTaskUnblockTime+0x2>
    205c:	b0 91 ee 0d 	lds	r27, 0x0DEE	; 0x800dee <xNextTaskUnblockTime+0x3>
    2060:	c8 16       	cp	r12, r24
    2062:	d9 06       	cpc	r13, r25
    2064:	ea 06       	cpc	r14, r26
    2066:	fb 06       	cpc	r15, r27
    2068:	40 f4       	brcc	.+16     	; 0x207a <prvAddCurrentTaskToDelayedList+0x128>
    206a:	c0 92 eb 0d 	sts	0x0DEB, r12	; 0x800deb <xNextTaskUnblockTime>
    206e:	d0 92 ec 0d 	sts	0x0DEC, r13	; 0x800dec <xNextTaskUnblockTime+0x1>
    2072:	e0 92 ed 0d 	sts	0x0DED, r14	; 0x800ded <xNextTaskUnblockTime+0x2>
    2076:	f0 92 ee 0d 	sts	0x0DEE, r15	; 0x800dee <xNextTaskUnblockTime+0x3>
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	9f 90       	pop	r9
    208c:	8f 90       	pop	r8
    208e:	08 95       	ret

00002090 <xTaskCreate>:
    2090:	4f 92       	push	r4
    2092:	5f 92       	push	r5
    2094:	6f 92       	push	r6
    2096:	7f 92       	push	r7
    2098:	8f 92       	push	r8
    209a:	9f 92       	push	r9
    209c:	af 92       	push	r10
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	4c 01       	movw	r8, r24
    20b2:	6b 01       	movw	r12, r22
    20b4:	5a 01       	movw	r10, r20
    20b6:	29 01       	movw	r4, r18
    20b8:	ca 01       	movw	r24, r20
    20ba:	0f d9       	rcall	.-3554   	; 0x12da <pvPortMalloc>
    20bc:	3c 01       	movw	r6, r24
    20be:	89 2b       	or	r24, r25
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <xTaskCreate+0x34>
    20c2:	01 c1       	rjmp	.+514    	; 0x22c6 <__stack+0xc7>
    20c4:	84 e3       	ldi	r24, 0x34	; 52
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	08 d9       	rcall	.-3568   	; 0x12da <pvPortMalloc>
    20ca:	ec 01       	movw	r28, r24
    20cc:	89 2b       	or	r24, r25
    20ce:	99 f0       	breq	.+38     	; 0x20f6 <xTaskCreate+0x66>
    20d0:	7c 8e       	std	Y+28, r7	; 0x1c
    20d2:	6b 8e       	std	Y+27, r6	; 0x1b
    20d4:	a5 01       	movw	r20, r10
    20d6:	65 ea       	ldi	r22, 0xA5	; 165
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	c3 01       	movw	r24, r6
    20dc:	0e 94 03 29 	call	0x5206	; 0x5206 <memset>
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	a8 1a       	sub	r10, r24
    20e4:	b1 08       	sbc	r11, r1
    20e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ea:	a8 0e       	add	r10, r24
    20ec:	b9 1e       	adc	r11, r25
    20ee:	c1 14       	cp	r12, r1
    20f0:	d1 04       	cpc	r13, r1
    20f2:	21 f4       	brne	.+8      	; 0x20fc <xTaskCreate+0x6c>
    20f4:	1f c0       	rjmp	.+62     	; 0x2134 <xTaskCreate+0xa4>
    20f6:	c3 01       	movw	r24, r6
    20f8:	b8 d9       	rcall	.-3216   	; 0x146a <vPortFree>
    20fa:	e5 c0       	rjmp	.+458    	; 0x22c6 <__stack+0xc7>
    20fc:	d6 01       	movw	r26, r12
    20fe:	8c 91       	ld	r24, X
    2100:	8d 8f       	std	Y+29, r24	; 0x1d
    2102:	8c 91       	ld	r24, X
    2104:	88 23       	and	r24, r24
    2106:	a1 f0       	breq	.+40     	; 0x2130 <xTaskCreate+0xa0>
    2108:	ae 01       	movw	r20, r28
    210a:	42 5e       	subi	r20, 0xE2	; 226
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	f6 01       	movw	r30, r12
    2110:	31 96       	adiw	r30, 0x01	; 1
    2112:	b0 e1       	ldi	r27, 0x10	; 16
    2114:	cb 0e       	add	r12, r27
    2116:	d1 1c       	adc	r13, r1
    2118:	cf 01       	movw	r24, r30
    211a:	21 91       	ld	r18, Z+
    211c:	da 01       	movw	r26, r20
    211e:	2d 93       	st	X+, r18
    2120:	ad 01       	movw	r20, r26
    2122:	dc 01       	movw	r26, r24
    2124:	8c 91       	ld	r24, X
    2126:	88 23       	and	r24, r24
    2128:	19 f0       	breq	.+6      	; 0x2130 <xTaskCreate+0xa0>
    212a:	ce 16       	cp	r12, r30
    212c:	df 06       	cpc	r13, r31
    212e:	a1 f7       	brne	.-24     	; 0x2118 <xTaskCreate+0x88>
    2130:	1c a6       	std	Y+44, r1	; 0x2c
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <xTaskCreate+0xa6>
    2134:	1d 8e       	std	Y+29, r1	; 0x1d
    2136:	0a 30       	cpi	r16, 0x0A	; 10
    2138:	08 f0       	brcs	.+2      	; 0x213c <xTaskCreate+0xac>
    213a:	09 e0       	ldi	r16, 0x09	; 9
    213c:	0a 8f       	std	Y+26, r16	; 0x1a
    213e:	0d a7       	std	Y+45, r16	; 0x2d
    2140:	1e a6       	std	Y+46, r1	; 0x2e
    2142:	6e 01       	movw	r12, r28
    2144:	b2 e0       	ldi	r27, 0x02	; 2
    2146:	cb 0e       	add	r12, r27
    2148:	d1 1c       	adc	r13, r1
    214a:	c6 01       	movw	r24, r12
    214c:	d8 d9       	rcall	.-3152   	; 0x14fe <vListInitialiseItem>
    214e:	ce 01       	movw	r24, r28
    2150:	0e 96       	adiw	r24, 0x0e	; 14
    2152:	d5 d9       	rcall	.-3158   	; 0x14fe <vListInitialiseItem>
    2154:	db 87       	std	Y+11, r29	; 0x0b
    2156:	ca 87       	std	Y+10, r28	; 0x0a
    2158:	8a e0       	ldi	r24, 0x0A	; 10
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	80 1b       	sub	r24, r16
    2162:	91 09       	sbc	r25, r1
    2164:	a1 09       	sbc	r26, r1
    2166:	b1 09       	sbc	r27, r1
    2168:	8e 87       	std	Y+14, r24	; 0x0e
    216a:	9f 87       	std	Y+15, r25	; 0x0f
    216c:	a8 8b       	std	Y+16, r26	; 0x10
    216e:	b9 8b       	std	Y+17, r27	; 0x11
    2170:	df 8b       	std	Y+23, r29	; 0x17
    2172:	ce 8b       	std	Y+22, r28	; 0x16
    2174:	84 e0       	ldi	r24, 0x04	; 4
    2176:	fe 01       	movw	r30, r28
    2178:	bf 96       	adiw	r30, 0x2f	; 47
    217a:	df 01       	movw	r26, r30
    217c:	1d 92       	st	X+, r1
    217e:	8a 95       	dec	r24
    2180:	e9 f7       	brne	.-6      	; 0x217c <xTaskCreate+0xec>
    2182:	1b aa       	std	Y+51, r1	; 0x33
    2184:	a2 01       	movw	r20, r4
    2186:	b4 01       	movw	r22, r8
    2188:	c5 01       	movw	r24, r10
    218a:	21 da       	rcall	.-3006   	; 0x15ce <pxPortInitialiseStack>
    218c:	99 83       	std	Y+1, r25	; 0x01
    218e:	88 83       	st	Y, r24
    2190:	e1 14       	cp	r14, r1
    2192:	f1 04       	cpc	r15, r1
    2194:	19 f0       	breq	.+6      	; 0x219c <xTaskCreate+0x10c>
    2196:	f7 01       	movw	r30, r14
    2198:	d1 83       	std	Z+1, r29	; 0x01
    219a:	c0 83       	st	Z, r28
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	0f 92       	push	r0
    21a2:	80 91 fc 0d 	lds	r24, 0x0DFC	; 0x800dfc <uxCurrentNumberOfTasks>
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	80 93 fc 0d 	sts	0x0DFC, r24	; 0x800dfc <uxCurrentNumberOfTasks>
    21ac:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    21b0:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    21b4:	89 2b       	or	r24, r25
    21b6:	a1 f5       	brne	.+104    	; 0x2220 <__stack+0x21>
    21b8:	d0 93 a8 0e 	sts	0x0EA8, r29	; 0x800ea8 <pxCurrentTCB+0x1>
    21bc:	c0 93 a7 0e 	sts	0x0EA7, r28	; 0x800ea7 <pxCurrentTCB>
    21c0:	80 91 fc 0d 	lds	r24, 0x0DFC	; 0x800dfc <uxCurrentNumberOfTasks>
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	09 f0       	breq	.+2      	; 0x21ca <xTaskCreate+0x13a>
    21c8:	3b c0       	rjmp	.+118    	; 0x2240 <__stack+0x41>
    21ca:	09 e3       	ldi	r16, 0x39	; 57
    21cc:	1e e0       	ldi	r17, 0x0E	; 14
    21ce:	0f 2e       	mov	r0, r31
    21d0:	f7 ea       	ldi	r31, 0xA7	; 167
    21d2:	ef 2e       	mov	r14, r31
    21d4:	fe e0       	ldi	r31, 0x0E	; 14
    21d6:	ff 2e       	mov	r15, r31
    21d8:	f0 2d       	mov	r31, r0
    21da:	c8 01       	movw	r24, r16
    21dc:	7f d9       	rcall	.-3330   	; 0x14dc <vListInitialise>
    21de:	05 5f       	subi	r16, 0xF5	; 245
    21e0:	1f 4f       	sbci	r17, 0xFF	; 255
    21e2:	0e 15       	cp	r16, r14
    21e4:	1f 05       	cpc	r17, r15
    21e6:	c9 f7       	brne	.-14     	; 0x21da <xTaskCreate+0x14a>
    21e8:	8e e2       	ldi	r24, 0x2E	; 46
    21ea:	9e e0       	ldi	r25, 0x0E	; 14
    21ec:	77 d9       	rcall	.-3346   	; 0x14dc <vListInitialise>
    21ee:	83 e2       	ldi	r24, 0x23	; 35
    21f0:	9e e0       	ldi	r25, 0x0E	; 14
    21f2:	74 d9       	rcall	.-3352   	; 0x14dc <vListInitialise>
    21f4:	84 e1       	ldi	r24, 0x14	; 20
    21f6:	9e e0       	ldi	r25, 0x0E	; 14
    21f8:	71 d9       	rcall	.-3358   	; 0x14dc <vListInitialise>
    21fa:	89 e0       	ldi	r24, 0x09	; 9
    21fc:	9e e0       	ldi	r25, 0x0E	; 14
    21fe:	6e d9       	rcall	.-3364   	; 0x14dc <vListInitialise>
    2200:	8d ef       	ldi	r24, 0xFD	; 253
    2202:	9d e0       	ldi	r25, 0x0D	; 13
    2204:	6b d9       	rcall	.-3370   	; 0x14dc <vListInitialise>
    2206:	8e e2       	ldi	r24, 0x2E	; 46
    2208:	9e e0       	ldi	r25, 0x0E	; 14
    220a:	90 93 22 0e 	sts	0x0E22, r25	; 0x800e22 <pxDelayedTaskList+0x1>
    220e:	80 93 21 0e 	sts	0x0E21, r24	; 0x800e21 <pxDelayedTaskList>
    2212:	83 e2       	ldi	r24, 0x23	; 35
    2214:	9e e0       	ldi	r25, 0x0E	; 14
    2216:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <pxOverflowDelayedTaskList+0x1>
    221a:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <pxOverflowDelayedTaskList>
    221e:	10 c0       	rjmp	.+32     	; 0x2240 <__stack+0x41>
    2220:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <xSchedulerRunning>
    2224:	81 11       	cpse	r24, r1
    2226:	0c c0       	rjmp	.+24     	; 0x2240 <__stack+0x41>
    2228:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    222c:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2230:	92 8d       	ldd	r25, Z+26	; 0x1a
    2232:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2234:	89 17       	cp	r24, r25
    2236:	20 f0       	brcs	.+8      	; 0x2240 <__stack+0x41>
    2238:	d0 93 a8 0e 	sts	0x0EA8, r29	; 0x800ea8 <pxCurrentTCB+0x1>
    223c:	c0 93 a7 0e 	sts	0x0EA7, r28	; 0x800ea7 <pxCurrentTCB>
    2240:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <uxTaskNumber>
    2244:	8f 5f       	subi	r24, 0xFF	; 255
    2246:	80 93 ef 0d 	sts	0x0DEF, r24	; 0x800def <uxTaskNumber>
    224a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    224c:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    2250:	8e 17       	cp	r24, r30
    2252:	10 f4       	brcc	.+4      	; 0x2258 <__stack+0x59>
    2254:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <uxTopReadyPriority>
    2258:	8b e0       	ldi	r24, 0x0B	; 11
    225a:	8e 9f       	mul	r24, r30
    225c:	f0 01       	movw	r30, r0
    225e:	11 24       	eor	r1, r1
    2260:	e7 5c       	subi	r30, 0xC7	; 199
    2262:	f1 4f       	sbci	r31, 0xF1	; 241
    2264:	01 80       	ldd	r0, Z+1	; 0x01
    2266:	f2 81       	ldd	r31, Z+2	; 0x02
    2268:	e0 2d       	mov	r30, r0
    226a:	ff 83       	std	Y+7, r31	; 0x07
    226c:	ee 83       	std	Y+6, r30	; 0x06
    226e:	26 81       	ldd	r18, Z+6	; 0x06
    2270:	37 81       	ldd	r19, Z+7	; 0x07
    2272:	39 87       	std	Y+9, r19	; 0x09
    2274:	28 87       	std	Y+8, r18	; 0x08
    2276:	a6 81       	ldd	r26, Z+6	; 0x06
    2278:	b7 81       	ldd	r27, Z+7	; 0x07
    227a:	15 96       	adiw	r26, 0x05	; 5
    227c:	dc 92       	st	X, r13
    227e:	ce 92       	st	-X, r12
    2280:	14 97       	sbiw	r26, 0x04	; 4
    2282:	d7 82       	std	Z+7, r13	; 0x07
    2284:	c6 82       	std	Z+6, r12	; 0x06
    2286:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2288:	8e 9f       	mul	r24, r30
    228a:	f0 01       	movw	r30, r0
    228c:	11 24       	eor	r1, r1
    228e:	e7 5c       	subi	r30, 0xC7	; 199
    2290:	f1 4f       	sbci	r31, 0xF1	; 241
    2292:	fd 87       	std	Y+13, r31	; 0x0d
    2294:	ec 87       	std	Y+12, r30	; 0x0c
    2296:	80 81       	ld	r24, Z
    2298:	8f 5f       	subi	r24, 0xFF	; 255
    229a:	80 83       	st	Z, r24
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <xSchedulerRunning>
    22a4:	88 23       	and	r24, r24
    22a6:	59 f0       	breq	.+22     	; 0x22be <__stack+0xbf>
    22a8:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    22ac:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    22b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    22b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22b4:	98 17       	cp	r25, r24
    22b6:	28 f4       	brcc	.+10     	; 0x22c2 <__stack+0xc3>
    22b8:	dd d9       	rcall	.-3142   	; 0x1674 <vPortYield>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <__stack+0xc9>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <__stack+0xc9>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <__stack+0xc9>
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	9f 90       	pop	r9
    22de:	8f 90       	pop	r8
    22e0:	7f 90       	pop	r7
    22e2:	6f 90       	pop	r6
    22e4:	5f 90       	pop	r5
    22e6:	4f 90       	pop	r4
    22e8:	08 95       	ret

000022ea <vTaskStartScheduler>:
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	0f 2e       	mov	r0, r31
    22f2:	f9 ee       	ldi	r31, 0xE9	; 233
    22f4:	ef 2e       	mov	r14, r31
    22f6:	fd e0       	ldi	r31, 0x0D	; 13
    22f8:	ff 2e       	mov	r15, r31
    22fa:	f0 2d       	mov	r31, r0
    22fc:	00 e0       	ldi	r16, 0x00	; 0
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 ec       	ldi	r20, 0xC0	; 192
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	64 ed       	ldi	r22, 0xD4	; 212
    2308:	73 e0       	ldi	r23, 0x03	; 3
    230a:	8e e0       	ldi	r24, 0x0E	; 14
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	c0 de       	rcall	.-640    	; 0x2090 <xTaskCreate>
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	d9 f4       	brne	.+54     	; 0x234a <vTaskStartScheduler+0x60>
    2314:	26 d6       	rcall	.+3148   	; 0x2f62 <xTimerCreateTimerTask>
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	c1 f4       	brne	.+48     	; 0x234a <vTaskStartScheduler+0x60>
    231a:	f8 94       	cli
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	9f ef       	ldi	r25, 0xFF	; 255
    2320:	dc 01       	movw	r26, r24
    2322:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <xNextTaskUnblockTime>
    2326:	90 93 ec 0d 	sts	0x0DEC, r25	; 0x800dec <xNextTaskUnblockTime+0x1>
    232a:	a0 93 ed 0d 	sts	0x0DED, r26	; 0x800ded <xNextTaskUnblockTime+0x2>
    232e:	b0 93 ee 0d 	sts	0x0DEE, r27	; 0x800dee <xNextTaskUnblockTime+0x3>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 f6 0d 	sts	0x0DF6, r24	; 0x800df6 <xSchedulerRunning>
    2338:	10 92 f8 0d 	sts	0x0DF8, r1	; 0x800df8 <xTickCount>
    233c:	10 92 f9 0d 	sts	0x0DF9, r1	; 0x800df9 <xTickCount+0x1>
    2340:	10 92 fa 0d 	sts	0x0DFA, r1	; 0x800dfa <xTickCount+0x2>
    2344:	10 92 fb 0d 	sts	0x0DFB, r1	; 0x800dfb <xTickCount+0x3>
    2348:	59 d9       	rcall	.-3406   	; 0x15fc <xPortStartScheduler>
    234a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	08 95       	ret

00002356 <vTaskSuspendAll>:
    2356:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    235a:	8f 5f       	subi	r24, 0xFF	; 255
    235c:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <uxSchedulerSuspended>
    2360:	08 95       	ret

00002362 <xTaskGetTickCount>:
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	0f 92       	push	r0
    2368:	60 91 f8 0d 	lds	r22, 0x0DF8	; 0x800df8 <xTickCount>
    236c:	70 91 f9 0d 	lds	r23, 0x0DF9	; 0x800df9 <xTickCount+0x1>
    2370:	80 91 fa 0d 	lds	r24, 0x0DFA	; 0x800dfa <xTickCount+0x2>
    2374:	90 91 fb 0d 	lds	r25, 0x0DFB	; 0x800dfb <xTickCount+0x3>
    2378:	0f 90       	pop	r0
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	08 95       	ret

0000237e <xTaskIncrementTick>:
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    2392:	81 11       	cpse	r24, r1
    2394:	07 c1       	rjmp	.+526    	; 0x25a4 <xTaskIncrementTick+0x226>
    2396:	c0 90 f8 0d 	lds	r12, 0x0DF8	; 0x800df8 <xTickCount>
    239a:	d0 90 f9 0d 	lds	r13, 0x0DF9	; 0x800df9 <xTickCount+0x1>
    239e:	e0 90 fa 0d 	lds	r14, 0x0DFA	; 0x800dfa <xTickCount+0x2>
    23a2:	f0 90 fb 0d 	lds	r15, 0x0DFB	; 0x800dfb <xTickCount+0x3>
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	c8 1a       	sub	r12, r24
    23aa:	d8 0a       	sbc	r13, r24
    23ac:	e8 0a       	sbc	r14, r24
    23ae:	f8 0a       	sbc	r15, r24
    23b0:	c0 92 f8 0d 	sts	0x0DF8, r12	; 0x800df8 <xTickCount>
    23b4:	d0 92 f9 0d 	sts	0x0DF9, r13	; 0x800df9 <xTickCount+0x1>
    23b8:	e0 92 fa 0d 	sts	0x0DFA, r14	; 0x800dfa <xTickCount+0x2>
    23bc:	f0 92 fb 0d 	sts	0x0DFB, r15	; 0x800dfb <xTickCount+0x3>
    23c0:	c1 14       	cp	r12, r1
    23c2:	d1 04       	cpc	r13, r1
    23c4:	e1 04       	cpc	r14, r1
    23c6:	f1 04       	cpc	r15, r1
    23c8:	b1 f4       	brne	.+44     	; 0x23f6 <xTaskIncrementTick+0x78>
    23ca:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <pxDelayedTaskList>
    23ce:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <pxDelayedTaskList+0x1>
    23d2:	20 91 1f 0e 	lds	r18, 0x0E1F	; 0x800e1f <pxOverflowDelayedTaskList>
    23d6:	30 91 20 0e 	lds	r19, 0x0E20	; 0x800e20 <pxOverflowDelayedTaskList+0x1>
    23da:	30 93 22 0e 	sts	0x0E22, r19	; 0x800e22 <pxDelayedTaskList+0x1>
    23de:	20 93 21 0e 	sts	0x0E21, r18	; 0x800e21 <pxDelayedTaskList>
    23e2:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <pxOverflowDelayedTaskList+0x1>
    23e6:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <pxOverflowDelayedTaskList>
    23ea:	80 91 f0 0d 	lds	r24, 0x0DF0	; 0x800df0 <xNumOfOverflows>
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	80 93 f0 0d 	sts	0x0DF0, r24	; 0x800df0 <xNumOfOverflows>
    23f4:	87 dd       	rcall	.-1266   	; 0x1f04 <prvResetNextTaskUnblockTime>
    23f6:	80 91 eb 0d 	lds	r24, 0x0DEB	; 0x800deb <xNextTaskUnblockTime>
    23fa:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <xNextTaskUnblockTime+0x1>
    23fe:	a0 91 ed 0d 	lds	r26, 0x0DED	; 0x800ded <xNextTaskUnblockTime+0x2>
    2402:	b0 91 ee 0d 	lds	r27, 0x0DEE	; 0x800dee <xNextTaskUnblockTime+0x3>
    2406:	c8 16       	cp	r12, r24
    2408:	d9 06       	cpc	r13, r25
    240a:	ea 06       	cpc	r14, r26
    240c:	fb 06       	cpc	r15, r27
    240e:	10 f4       	brcc	.+4      	; 0x2414 <xTaskIncrementTick+0x96>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	b3 c0       	rjmp	.+358    	; 0x257a <xTaskIncrementTick+0x1fc>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	4b e0       	ldi	r20, 0x0B	; 11
    2418:	51 e0       	ldi	r21, 0x01	; 1
    241a:	e0 91 21 0e 	lds	r30, 0x0E21	; 0x800e21 <pxDelayedTaskList>
    241e:	f0 91 22 0e 	lds	r31, 0x0E22	; 0x800e22 <pxDelayedTaskList+0x1>
    2422:	90 81       	ld	r25, Z
    2424:	91 11       	cpse	r25, r1
    2426:	0c c0       	rjmp	.+24     	; 0x2440 <xTaskIncrementTick+0xc2>
    2428:	4f ef       	ldi	r20, 0xFF	; 255
    242a:	5f ef       	ldi	r21, 0xFF	; 255
    242c:	ba 01       	movw	r22, r20
    242e:	40 93 eb 0d 	sts	0x0DEB, r20	; 0x800deb <xNextTaskUnblockTime>
    2432:	50 93 ec 0d 	sts	0x0DEC, r21	; 0x800dec <xNextTaskUnblockTime+0x1>
    2436:	60 93 ed 0d 	sts	0x0DED, r22	; 0x800ded <xNextTaskUnblockTime+0x2>
    243a:	70 93 ee 0d 	sts	0x0DEE, r23	; 0x800dee <xNextTaskUnblockTime+0x3>
    243e:	9d c0       	rjmp	.+314    	; 0x257a <xTaskIncrementTick+0x1fc>
    2440:	e0 91 21 0e 	lds	r30, 0x0E21	; 0x800e21 <pxDelayedTaskList>
    2444:	f0 91 22 0e 	lds	r31, 0x0E22	; 0x800e22 <pxDelayedTaskList+0x1>
    2448:	07 80       	ldd	r0, Z+7	; 0x07
    244a:	f0 85       	ldd	r31, Z+8	; 0x08
    244c:	e0 2d       	mov	r30, r0
    244e:	00 84       	ldd	r0, Z+8	; 0x08
    2450:	f1 85       	ldd	r31, Z+9	; 0x09
    2452:	e0 2d       	mov	r30, r0
    2454:	02 81       	ldd	r16, Z+2	; 0x02
    2456:	13 81       	ldd	r17, Z+3	; 0x03
    2458:	24 81       	ldd	r18, Z+4	; 0x04
    245a:	35 81       	ldd	r19, Z+5	; 0x05
    245c:	c0 16       	cp	r12, r16
    245e:	d1 06       	cpc	r13, r17
    2460:	e2 06       	cpc	r14, r18
    2462:	f3 06       	cpc	r15, r19
    2464:	48 f4       	brcc	.+18     	; 0x2478 <xTaskIncrementTick+0xfa>
    2466:	00 93 eb 0d 	sts	0x0DEB, r16	; 0x800deb <xNextTaskUnblockTime>
    246a:	10 93 ec 0d 	sts	0x0DEC, r17	; 0x800dec <xNextTaskUnblockTime+0x1>
    246e:	20 93 ed 0d 	sts	0x0DED, r18	; 0x800ded <xNextTaskUnblockTime+0x2>
    2472:	30 93 ee 0d 	sts	0x0DEE, r19	; 0x800dee <xNextTaskUnblockTime+0x3>
    2476:	81 c0       	rjmp	.+258    	; 0x257a <xTaskIncrementTick+0x1fc>
    2478:	a4 85       	ldd	r26, Z+12	; 0x0c
    247a:	b5 85       	ldd	r27, Z+13	; 0x0d
    247c:	c6 81       	ldd	r28, Z+6	; 0x06
    247e:	d7 81       	ldd	r29, Z+7	; 0x07
    2480:	20 85       	ldd	r18, Z+8	; 0x08
    2482:	31 85       	ldd	r19, Z+9	; 0x09
    2484:	3f 83       	std	Y+7, r19	; 0x07
    2486:	2e 83       	std	Y+6, r18	; 0x06
    2488:	c0 85       	ldd	r28, Z+8	; 0x08
    248a:	d1 85       	ldd	r29, Z+9	; 0x09
    248c:	26 81       	ldd	r18, Z+6	; 0x06
    248e:	37 81       	ldd	r19, Z+7	; 0x07
    2490:	3d 83       	std	Y+5, r19	; 0x05
    2492:	2c 83       	std	Y+4, r18	; 0x04
    2494:	9f 01       	movw	r18, r30
    2496:	2e 5f       	subi	r18, 0xFE	; 254
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	11 96       	adiw	r26, 0x01	; 1
    249c:	6d 91       	ld	r22, X+
    249e:	7c 91       	ld	r23, X
    24a0:	12 97       	sbiw	r26, 0x02	; 2
    24a2:	62 17       	cp	r22, r18
    24a4:	73 07       	cpc	r23, r19
    24a6:	31 f4       	brne	.+12     	; 0x24b4 <xTaskIncrementTick+0x136>
    24a8:	60 85       	ldd	r22, Z+8	; 0x08
    24aa:	71 85       	ldd	r23, Z+9	; 0x09
    24ac:	12 96       	adiw	r26, 0x02	; 2
    24ae:	7c 93       	st	X, r23
    24b0:	6e 93       	st	-X, r22
    24b2:	11 97       	sbiw	r26, 0x01	; 1
    24b4:	15 86       	std	Z+13, r1	; 0x0d
    24b6:	14 86       	std	Z+12, r1	; 0x0c
    24b8:	9c 91       	ld	r25, X
    24ba:	91 50       	subi	r25, 0x01	; 1
    24bc:	9c 93       	st	X, r25
    24be:	a0 8d       	ldd	r26, Z+24	; 0x18
    24c0:	b1 8d       	ldd	r27, Z+25	; 0x19
    24c2:	10 97       	sbiw	r26, 0x00	; 0
    24c4:	09 f1       	breq	.+66     	; 0x2508 <xTaskIncrementTick+0x18a>
    24c6:	c2 89       	ldd	r28, Z+18	; 0x12
    24c8:	d3 89       	ldd	r29, Z+19	; 0x13
    24ca:	64 89       	ldd	r22, Z+20	; 0x14
    24cc:	75 89       	ldd	r23, Z+21	; 0x15
    24ce:	7f 83       	std	Y+7, r23	; 0x07
    24d0:	6e 83       	std	Y+6, r22	; 0x06
    24d2:	c4 89       	ldd	r28, Z+20	; 0x14
    24d4:	d5 89       	ldd	r29, Z+21	; 0x15
    24d6:	62 89       	ldd	r22, Z+18	; 0x12
    24d8:	73 89       	ldd	r23, Z+19	; 0x13
    24da:	7d 83       	std	Y+5, r23	; 0x05
    24dc:	6c 83       	std	Y+4, r22	; 0x04
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	cd 91       	ld	r28, X+
    24e2:	dc 91       	ld	r29, X
    24e4:	12 97       	sbiw	r26, 0x02	; 2
    24e6:	bf 01       	movw	r22, r30
    24e8:	62 5f       	subi	r22, 0xF2	; 242
    24ea:	7f 4f       	sbci	r23, 0xFF	; 255
    24ec:	c6 17       	cp	r28, r22
    24ee:	d7 07       	cpc	r29, r23
    24f0:	31 f4       	brne	.+12     	; 0x24fe <xTaskIncrementTick+0x180>
    24f2:	64 89       	ldd	r22, Z+20	; 0x14
    24f4:	75 89       	ldd	r23, Z+21	; 0x15
    24f6:	12 96       	adiw	r26, 0x02	; 2
    24f8:	7c 93       	st	X, r23
    24fa:	6e 93       	st	-X, r22
    24fc:	11 97       	sbiw	r26, 0x01	; 1
    24fe:	11 8e       	std	Z+25, r1	; 0x19
    2500:	10 8e       	std	Z+24, r1	; 0x18
    2502:	9c 91       	ld	r25, X
    2504:	91 50       	subi	r25, 0x01	; 1
    2506:	9c 93       	st	X, r25
    2508:	a2 8d       	ldd	r26, Z+26	; 0x1a
    250a:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    250e:	9a 17       	cp	r25, r26
    2510:	10 f4       	brcc	.+4      	; 0x2516 <xTaskIncrementTick+0x198>
    2512:	a0 93 f7 0d 	sts	0x0DF7, r26	; 0x800df7 <uxTopReadyPriority>
    2516:	4a 9f       	mul	r20, r26
    2518:	d0 01       	movw	r26, r0
    251a:	11 24       	eor	r1, r1
    251c:	a7 5c       	subi	r26, 0xC7	; 199
    251e:	b1 4f       	sbci	r27, 0xF1	; 241
    2520:	11 96       	adiw	r26, 0x01	; 1
    2522:	0d 90       	ld	r0, X+
    2524:	bc 91       	ld	r27, X
    2526:	a0 2d       	mov	r26, r0
    2528:	b7 83       	std	Z+7, r27	; 0x07
    252a:	a6 83       	std	Z+6, r26	; 0x06
    252c:	16 96       	adiw	r26, 0x06	; 6
    252e:	6d 91       	ld	r22, X+
    2530:	7c 91       	ld	r23, X
    2532:	17 97       	sbiw	r26, 0x07	; 7
    2534:	71 87       	std	Z+9, r23	; 0x09
    2536:	60 87       	std	Z+8, r22	; 0x08
    2538:	16 96       	adiw	r26, 0x06	; 6
    253a:	cd 91       	ld	r28, X+
    253c:	dc 91       	ld	r29, X
    253e:	17 97       	sbiw	r26, 0x07	; 7
    2540:	3d 83       	std	Y+5, r19	; 0x05
    2542:	2c 83       	std	Y+4, r18	; 0x04
    2544:	17 96       	adiw	r26, 0x07	; 7
    2546:	3c 93       	st	X, r19
    2548:	2e 93       	st	-X, r18
    254a:	16 97       	sbiw	r26, 0x06	; 6
    254c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    254e:	4a 9f       	mul	r20, r26
    2550:	d0 01       	movw	r26, r0
    2552:	11 24       	eor	r1, r1
    2554:	a7 5c       	subi	r26, 0xC7	; 199
    2556:	b1 4f       	sbci	r27, 0xF1	; 241
    2558:	b5 87       	std	Z+13, r27	; 0x0d
    255a:	a4 87       	std	Z+12, r26	; 0x0c
    255c:	9c 91       	ld	r25, X
    255e:	9f 5f       	subi	r25, 0xFF	; 255
    2560:	9c 93       	st	X, r25
    2562:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2566:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    256a:	22 8d       	ldd	r18, Z+26	; 0x1a
    256c:	5a 96       	adiw	r26, 0x1a	; 26
    256e:	9c 91       	ld	r25, X
    2570:	29 17       	cp	r18, r25
    2572:	08 f4       	brcc	.+2      	; 0x2576 <xTaskIncrementTick+0x1f8>
    2574:	52 cf       	rjmp	.-348    	; 0x241a <xTaskIncrementTick+0x9c>
    2576:	85 2f       	mov	r24, r21
    2578:	50 cf       	rjmp	.-352    	; 0x241a <xTaskIncrementTick+0x9c>
    257a:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    257e:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2582:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2584:	9b e0       	ldi	r25, 0x0B	; 11
    2586:	e9 9f       	mul	r30, r25
    2588:	f0 01       	movw	r30, r0
    258a:	11 24       	eor	r1, r1
    258c:	e7 5c       	subi	r30, 0xC7	; 199
    258e:	f1 4f       	sbci	r31, 0xF1	; 241
    2590:	90 81       	ld	r25, Z
    2592:	92 30       	cpi	r25, 0x02	; 2
    2594:	08 f0       	brcs	.+2      	; 0x2598 <xTaskIncrementTick+0x21a>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <xYieldPending>
    259c:	99 23       	and	r25, r25
    259e:	b1 f0       	breq	.+44     	; 0x25cc <xTaskIncrementTick+0x24e>
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <xTaskIncrementTick+0x24e>
    25a4:	80 91 f2 0d 	lds	r24, 0x0DF2	; 0x800df2 <xPendedTicks>
    25a8:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <xPendedTicks+0x1>
    25ac:	a0 91 f4 0d 	lds	r26, 0x0DF4	; 0x800df4 <xPendedTicks+0x2>
    25b0:	b0 91 f5 0d 	lds	r27, 0x0DF5	; 0x800df5 <xPendedTicks+0x3>
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	a1 1d       	adc	r26, r1
    25b8:	b1 1d       	adc	r27, r1
    25ba:	80 93 f2 0d 	sts	0x0DF2, r24	; 0x800df2 <xPendedTicks>
    25be:	90 93 f3 0d 	sts	0x0DF3, r25	; 0x800df3 <xPendedTicks+0x1>
    25c2:	a0 93 f4 0d 	sts	0x0DF4, r26	; 0x800df4 <xPendedTicks+0x2>
    25c6:	b0 93 f5 0d 	sts	0x0DF5, r27	; 0x800df5 <xPendedTicks+0x3>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	df 90       	pop	r13
    25da:	cf 90       	pop	r12
    25dc:	08 95       	ret

000025de <xTaskResumeAll>:
    25de:	cf 92       	push	r12
    25e0:	df 92       	push	r13
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	0f 92       	push	r0
    25f4:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    25f8:	81 50       	subi	r24, 0x01	; 1
    25fa:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <uxSchedulerSuspended>
    25fe:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    2602:	81 11       	cpse	r24, r1
    2604:	c4 c0       	rjmp	.+392    	; 0x278e <xTaskResumeAll+0x1b0>
    2606:	80 91 fc 0d 	lds	r24, 0x0DFC	; 0x800dfc <uxCurrentNumberOfTasks>
    260a:	81 11       	cpse	r24, r1
    260c:	8b c0       	rjmp	.+278    	; 0x2724 <xTaskResumeAll+0x146>
    260e:	c2 c0       	rjmp	.+388    	; 0x2794 <xTaskResumeAll+0x1b6>
    2610:	d8 01       	movw	r26, r16
    2612:	17 96       	adiw	r26, 0x07	; 7
    2614:	ed 91       	ld	r30, X+
    2616:	fc 91       	ld	r31, X
    2618:	18 97       	sbiw	r26, 0x08	; 8
    261a:	00 84       	ldd	r0, Z+8	; 0x08
    261c:	f1 85       	ldd	r31, Z+9	; 0x09
    261e:	e0 2d       	mov	r30, r0
    2620:	a0 8d       	ldd	r26, Z+24	; 0x18
    2622:	b1 8d       	ldd	r27, Z+25	; 0x19
    2624:	82 89       	ldd	r24, Z+18	; 0x12
    2626:	93 89       	ldd	r25, Z+19	; 0x13
    2628:	64 89       	ldd	r22, Z+20	; 0x14
    262a:	75 89       	ldd	r23, Z+21	; 0x15
    262c:	ec 01       	movw	r28, r24
    262e:	7f 83       	std	Y+7, r23	; 0x07
    2630:	6e 83       	std	Y+6, r22	; 0x06
    2632:	84 89       	ldd	r24, Z+20	; 0x14
    2634:	95 89       	ldd	r25, Z+21	; 0x15
    2636:	62 89       	ldd	r22, Z+18	; 0x12
    2638:	73 89       	ldd	r23, Z+19	; 0x13
    263a:	ec 01       	movw	r28, r24
    263c:	7d 83       	std	Y+5, r23	; 0x05
    263e:	6c 83       	std	Y+4, r22	; 0x04
    2640:	cf 01       	movw	r24, r30
    2642:	0e 96       	adiw	r24, 0x0e	; 14
    2644:	11 96       	adiw	r26, 0x01	; 1
    2646:	6d 91       	ld	r22, X+
    2648:	7c 91       	ld	r23, X
    264a:	12 97       	sbiw	r26, 0x02	; 2
    264c:	68 17       	cp	r22, r24
    264e:	79 07       	cpc	r23, r25
    2650:	31 f4       	brne	.+12     	; 0x265e <xTaskResumeAll+0x80>
    2652:	84 89       	ldd	r24, Z+20	; 0x14
    2654:	95 89       	ldd	r25, Z+21	; 0x15
    2656:	12 96       	adiw	r26, 0x02	; 2
    2658:	9c 93       	st	X, r25
    265a:	8e 93       	st	-X, r24
    265c:	11 97       	sbiw	r26, 0x01	; 1
    265e:	11 8e       	std	Z+25, r1	; 0x19
    2660:	10 8e       	std	Z+24, r1	; 0x18
    2662:	8c 91       	ld	r24, X
    2664:	81 50       	subi	r24, 0x01	; 1
    2666:	8c 93       	st	X, r24
    2668:	a4 85       	ldd	r26, Z+12	; 0x0c
    266a:	b5 85       	ldd	r27, Z+13	; 0x0d
    266c:	86 81       	ldd	r24, Z+6	; 0x06
    266e:	97 81       	ldd	r25, Z+7	; 0x07
    2670:	60 85       	ldd	r22, Z+8	; 0x08
    2672:	71 85       	ldd	r23, Z+9	; 0x09
    2674:	ec 01       	movw	r28, r24
    2676:	7f 83       	std	Y+7, r23	; 0x07
    2678:	6e 83       	std	Y+6, r22	; 0x06
    267a:	80 85       	ldd	r24, Z+8	; 0x08
    267c:	91 85       	ldd	r25, Z+9	; 0x09
    267e:	66 81       	ldd	r22, Z+6	; 0x06
    2680:	77 81       	ldd	r23, Z+7	; 0x07
    2682:	ec 01       	movw	r28, r24
    2684:	7d 83       	std	Y+5, r23	; 0x05
    2686:	6c 83       	std	Y+4, r22	; 0x04
    2688:	cf 01       	movw	r24, r30
    268a:	02 96       	adiw	r24, 0x02	; 2
    268c:	11 96       	adiw	r26, 0x01	; 1
    268e:	6d 91       	ld	r22, X+
    2690:	7c 91       	ld	r23, X
    2692:	12 97       	sbiw	r26, 0x02	; 2
    2694:	68 17       	cp	r22, r24
    2696:	79 07       	cpc	r23, r25
    2698:	31 f4       	brne	.+12     	; 0x26a6 <xTaskResumeAll+0xc8>
    269a:	60 85       	ldd	r22, Z+8	; 0x08
    269c:	71 85       	ldd	r23, Z+9	; 0x09
    269e:	12 96       	adiw	r26, 0x02	; 2
    26a0:	7c 93       	st	X, r23
    26a2:	6e 93       	st	-X, r22
    26a4:	11 97       	sbiw	r26, 0x01	; 1
    26a6:	15 86       	std	Z+13, r1	; 0x0d
    26a8:	14 86       	std	Z+12, r1	; 0x0c
    26aa:	2c 91       	ld	r18, X
    26ac:	21 50       	subi	r18, 0x01	; 1
    26ae:	2c 93       	st	X, r18
    26b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26b2:	20 91 f7 0d 	lds	r18, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    26b6:	2a 17       	cp	r18, r26
    26b8:	10 f4       	brcc	.+4      	; 0x26be <xTaskResumeAll+0xe0>
    26ba:	a0 93 f7 0d 	sts	0x0DF7, r26	; 0x800df7 <uxTopReadyPriority>
    26be:	3a 9f       	mul	r19, r26
    26c0:	d0 01       	movw	r26, r0
    26c2:	11 24       	eor	r1, r1
    26c4:	a7 5c       	subi	r26, 0xC7	; 199
    26c6:	b1 4f       	sbci	r27, 0xF1	; 241
    26c8:	11 96       	adiw	r26, 0x01	; 1
    26ca:	0d 90       	ld	r0, X+
    26cc:	bc 91       	ld	r27, X
    26ce:	a0 2d       	mov	r26, r0
    26d0:	b7 83       	std	Z+7, r27	; 0x07
    26d2:	a6 83       	std	Z+6, r26	; 0x06
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	6d 91       	ld	r22, X+
    26d8:	7c 91       	ld	r23, X
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	71 87       	std	Z+9, r23	; 0x09
    26de:	60 87       	std	Z+8, r22	; 0x08
    26e0:	16 96       	adiw	r26, 0x06	; 6
    26e2:	6d 91       	ld	r22, X+
    26e4:	7c 91       	ld	r23, X
    26e6:	17 97       	sbiw	r26, 0x07	; 7
    26e8:	eb 01       	movw	r28, r22
    26ea:	9d 83       	std	Y+5, r25	; 0x05
    26ec:	8c 83       	std	Y+4, r24	; 0x04
    26ee:	17 96       	adiw	r26, 0x07	; 7
    26f0:	9c 93       	st	X, r25
    26f2:	8e 93       	st	-X, r24
    26f4:	16 97       	sbiw	r26, 0x06	; 6
    26f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26f8:	3a 9f       	mul	r19, r26
    26fa:	d0 01       	movw	r26, r0
    26fc:	11 24       	eor	r1, r1
    26fe:	a7 5c       	subi	r26, 0xC7	; 199
    2700:	b1 4f       	sbci	r27, 0xF1	; 241
    2702:	b5 87       	std	Z+13, r27	; 0x0d
    2704:	a4 87       	std	Z+12, r26	; 0x0c
    2706:	8c 91       	ld	r24, X
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	8c 93       	st	X, r24
    270c:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2710:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2714:	92 8d       	ldd	r25, Z+26	; 0x1a
    2716:	5a 96       	adiw	r26, 0x1a	; 26
    2718:	8c 91       	ld	r24, X
    271a:	98 17       	cp	r25, r24
    271c:	48 f0       	brcs	.+18     	; 0x2730 <xTaskResumeAll+0x152>
    271e:	40 93 f1 0d 	sts	0x0DF1, r20	; 0x800df1 <xYieldPending>
    2722:	06 c0       	rjmp	.+12     	; 0x2730 <xTaskResumeAll+0x152>
    2724:	e0 e0       	ldi	r30, 0x00	; 0
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	04 e1       	ldi	r16, 0x14	; 20
    272a:	1e e0       	ldi	r17, 0x0E	; 14
    272c:	3b e0       	ldi	r19, 0x0B	; 11
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	d8 01       	movw	r26, r16
    2732:	8c 91       	ld	r24, X
    2734:	81 11       	cpse	r24, r1
    2736:	6c cf       	rjmp	.-296    	; 0x2610 <xTaskResumeAll+0x32>
    2738:	ef 2b       	or	r30, r31
    273a:	09 f0       	breq	.+2      	; 0x273e <xTaskResumeAll+0x160>
    273c:	e3 db       	rcall	.-2106   	; 0x1f04 <prvResetNextTaskUnblockTime>
    273e:	c0 90 f2 0d 	lds	r12, 0x0DF2	; 0x800df2 <xPendedTicks>
    2742:	d0 90 f3 0d 	lds	r13, 0x0DF3	; 0x800df3 <xPendedTicks+0x1>
    2746:	e0 90 f4 0d 	lds	r14, 0x0DF4	; 0x800df4 <xPendedTicks+0x2>
    274a:	f0 90 f5 0d 	lds	r15, 0x0DF5	; 0x800df5 <xPendedTicks+0x3>
    274e:	c1 14       	cp	r12, r1
    2750:	d1 04       	cpc	r13, r1
    2752:	e1 04       	cpc	r14, r1
    2754:	f1 04       	cpc	r15, r1
    2756:	99 f0       	breq	.+38     	; 0x277e <xTaskResumeAll+0x1a0>
    2758:	c1 e0       	ldi	r28, 0x01	; 1
    275a:	11 de       	rcall	.-990    	; 0x237e <xTaskIncrementTick>
    275c:	81 11       	cpse	r24, r1
    275e:	c0 93 f1 0d 	sts	0x0DF1, r28	; 0x800df1 <xYieldPending>
    2762:	b1 e0       	ldi	r27, 0x01	; 1
    2764:	cb 1a       	sub	r12, r27
    2766:	d1 08       	sbc	r13, r1
    2768:	e1 08       	sbc	r14, r1
    276a:	f1 08       	sbc	r15, r1
    276c:	b1 f7       	brne	.-20     	; 0x275a <xTaskResumeAll+0x17c>
    276e:	10 92 f2 0d 	sts	0x0DF2, r1	; 0x800df2 <xPendedTicks>
    2772:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <xPendedTicks+0x1>
    2776:	10 92 f4 0d 	sts	0x0DF4, r1	; 0x800df4 <xPendedTicks+0x2>
    277a:	10 92 f5 0d 	sts	0x0DF5, r1	; 0x800df5 <xPendedTicks+0x3>
    277e:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <xYieldPending>
    2782:	88 23       	and	r24, r24
    2784:	31 f0       	breq	.+12     	; 0x2792 <xTaskResumeAll+0x1b4>
    2786:	0e 94 3a 0b 	call	0x1674	; 0x1674 <vPortYield>
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <xTaskResumeAll+0x1b6>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <xTaskResumeAll+0x1b6>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	0f 90       	pop	r0
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	df 90       	pop	r13
    27a6:	cf 90       	pop	r12
    27a8:	08 95       	ret

000027aa <vTaskDelay>:
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	6b 01       	movw	r12, r22
    27b4:	7c 01       	movw	r14, r24
    27b6:	67 2b       	or	r22, r23
    27b8:	68 2b       	or	r22, r24
    27ba:	69 2b       	or	r22, r25
    27bc:	41 f0       	breq	.+16     	; 0x27ce <vTaskDelay+0x24>
    27be:	cb dd       	rcall	.-1130   	; 0x2356 <vTaskSuspendAll>
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	c7 01       	movw	r24, r14
    27c4:	b6 01       	movw	r22, r12
    27c6:	c5 db       	rcall	.-2166   	; 0x1f52 <prvAddCurrentTaskToDelayedList>
    27c8:	0a df       	rcall	.-492    	; 0x25de <xTaskResumeAll>
    27ca:	81 11       	cpse	r24, r1
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <vTaskDelay+0x28>
    27ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <vPortYield>
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	df 90       	pop	r13
    27d8:	cf 90       	pop	r12
    27da:	08 95       	ret

000027dc <vTaskSwitchContext>:
    27dc:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    27e0:	88 23       	and	r24, r24
    27e2:	21 f0       	breq	.+8      	; 0x27ec <vTaskSwitchContext+0x10>
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <xYieldPending>
    27ea:	08 95       	ret
    27ec:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <xYieldPending>
    27f0:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    27f4:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    27f8:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    27fc:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2800:	2d 91       	ld	r18, X+
    2802:	3c 91       	ld	r19, X
    2804:	83 8d       	ldd	r24, Z+27	; 0x1b
    2806:	94 8d       	ldd	r25, Z+28	; 0x1c
    2808:	82 17       	cp	r24, r18
    280a:	93 07       	cpc	r25, r19
    280c:	58 f0       	brcs	.+22     	; 0x2824 <vTaskSwitchContext+0x48>
    280e:	60 91 a7 0e 	lds	r22, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2812:	70 91 a8 0e 	lds	r23, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2816:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    281a:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    281e:	63 5e       	subi	r22, 0xE3	; 227
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	c5 d4       	rcall	.+2442   	; 0x31ae <vApplicationStackOverflowHook>
    2824:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	9b e0       	ldi	r25, 0x0B	; 11
    282e:	89 9f       	mul	r24, r25
    2830:	f0 01       	movw	r30, r0
    2832:	11 24       	eor	r1, r1
    2834:	e7 5c       	subi	r30, 0xC7	; 199
    2836:	f1 4f       	sbci	r31, 0xF1	; 241
    2838:	90 81       	ld	r25, Z
    283a:	91 11       	cpse	r25, r1
    283c:	0e c0       	rjmp	.+28     	; 0x285a <vTaskSwitchContext+0x7e>
    283e:	4b e0       	ldi	r20, 0x0B	; 11
    2840:	81 50       	subi	r24, 0x01	; 1
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	42 9f       	mul	r20, r18
    2848:	f0 01       	movw	r30, r0
    284a:	43 9f       	mul	r20, r19
    284c:	f0 0d       	add	r31, r0
    284e:	11 24       	eor	r1, r1
    2850:	e7 5c       	subi	r30, 0xC7	; 199
    2852:	f1 4f       	sbci	r31, 0xF1	; 241
    2854:	90 81       	ld	r25, Z
    2856:	99 23       	and	r25, r25
    2858:	99 f3       	breq	.-26     	; 0x2840 <vTaskSwitchContext+0x64>
    285a:	9b e0       	ldi	r25, 0x0B	; 11
    285c:	92 9f       	mul	r25, r18
    285e:	a0 01       	movw	r20, r0
    2860:	93 9f       	mul	r25, r19
    2862:	50 0d       	add	r21, r0
    2864:	11 24       	eor	r1, r1
    2866:	da 01       	movw	r26, r20
    2868:	a7 5c       	subi	r26, 0xC7	; 199
    286a:	b1 4f       	sbci	r27, 0xF1	; 241
    286c:	11 96       	adiw	r26, 0x01	; 1
    286e:	ed 91       	ld	r30, X+
    2870:	fc 91       	ld	r31, X
    2872:	12 97       	sbiw	r26, 0x02	; 2
    2874:	04 80       	ldd	r0, Z+4	; 0x04
    2876:	f5 81       	ldd	r31, Z+5	; 0x05
    2878:	e0 2d       	mov	r30, r0
    287a:	12 96       	adiw	r26, 0x02	; 2
    287c:	fc 93       	st	X, r31
    287e:	ee 93       	st	-X, r30
    2880:	11 97       	sbiw	r26, 0x01	; 1
    2882:	44 5c       	subi	r20, 0xC4	; 196
    2884:	51 4f       	sbci	r21, 0xF1	; 241
    2886:	e4 17       	cp	r30, r20
    2888:	f5 07       	cpc	r31, r21
    288a:	29 f4       	brne	.+10     	; 0x2896 <vTaskSwitchContext+0xba>
    288c:	44 81       	ldd	r20, Z+4	; 0x04
    288e:	55 81       	ldd	r21, Z+5	; 0x05
    2890:	fd 01       	movw	r30, r26
    2892:	52 83       	std	Z+2, r21	; 0x02
    2894:	41 83       	std	Z+1, r20	; 0x01
    2896:	9b e0       	ldi	r25, 0x0B	; 11
    2898:	92 9f       	mul	r25, r18
    289a:	f0 01       	movw	r30, r0
    289c:	93 9f       	mul	r25, r19
    289e:	f0 0d       	add	r31, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	e7 5c       	subi	r30, 0xC7	; 199
    28a4:	f1 4f       	sbci	r31, 0xF1	; 241
    28a6:	01 80       	ldd	r0, Z+1	; 0x01
    28a8:	f2 81       	ldd	r31, Z+2	; 0x02
    28aa:	e0 2d       	mov	r30, r0
    28ac:	20 85       	ldd	r18, Z+8	; 0x08
    28ae:	31 85       	ldd	r19, Z+9	; 0x09
    28b0:	30 93 a8 0e 	sts	0x0EA8, r19	; 0x800ea8 <pxCurrentTCB+0x1>
    28b4:	20 93 a7 0e 	sts	0x0EA7, r18	; 0x800ea7 <pxCurrentTCB>
    28b8:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <uxTopReadyPriority>
    28bc:	08 95       	ret

000028be <vTaskPlaceOnEventList>:
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	6a 01       	movw	r12, r20
    28c8:	7b 01       	movw	r14, r22
    28ca:	60 91 a7 0e 	lds	r22, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    28ce:	70 91 a8 0e 	lds	r23, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    28d2:	62 5f       	subi	r22, 0xF2	; 242
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255
    28d6:	0e 94 83 0a 	call	0x1506	; 0x1506 <vListInsert>
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	c7 01       	movw	r24, r14
    28de:	b6 01       	movw	r22, r12
    28e0:	38 db       	rcall	.-2448   	; 0x1f52 <prvAddCurrentTaskToDelayedList>
    28e2:	ff 90       	pop	r15
    28e4:	ef 90       	pop	r14
    28e6:	df 90       	pop	r13
    28e8:	cf 90       	pop	r12
    28ea:	08 95       	ret

000028ec <vTaskPlaceOnEventListRestricted>:
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	fc 01       	movw	r30, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	ba 01       	movw	r22, r20
    28f6:	a1 81       	ldd	r26, Z+1	; 0x01
    28f8:	b2 81       	ldd	r27, Z+2	; 0x02
    28fa:	c0 91 a7 0e 	lds	r28, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    28fe:	d0 91 a8 0e 	lds	r29, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2902:	bb 8b       	std	Y+19, r27	; 0x13
    2904:	aa 8b       	std	Y+18, r26	; 0x12
    2906:	c0 91 a7 0e 	lds	r28, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    290a:	d0 91 a8 0e 	lds	r29, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    290e:	16 96       	adiw	r26, 0x06	; 6
    2910:	4d 91       	ld	r20, X+
    2912:	5c 91       	ld	r21, X
    2914:	17 97       	sbiw	r26, 0x07	; 7
    2916:	5d 8b       	std	Y+21, r21	; 0x15
    2918:	4c 8b       	std	Y+20, r20	; 0x14
    291a:	16 96       	adiw	r26, 0x06	; 6
    291c:	cd 91       	ld	r28, X+
    291e:	dc 91       	ld	r29, X
    2920:	17 97       	sbiw	r26, 0x07	; 7
    2922:	40 91 a7 0e 	lds	r20, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2926:	50 91 a8 0e 	lds	r21, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    292a:	42 5f       	subi	r20, 0xF2	; 242
    292c:	5f 4f       	sbci	r21, 0xFF	; 255
    292e:	5d 83       	std	Y+5, r21	; 0x05
    2930:	4c 83       	std	Y+4, r20	; 0x04
    2932:	40 91 a7 0e 	lds	r20, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2936:	50 91 a8 0e 	lds	r21, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    293a:	42 5f       	subi	r20, 0xF2	; 242
    293c:	5f 4f       	sbci	r21, 0xFF	; 255
    293e:	17 96       	adiw	r26, 0x07	; 7
    2940:	5c 93       	st	X, r21
    2942:	4e 93       	st	-X, r20
    2944:	16 97       	sbiw	r26, 0x06	; 6
    2946:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    294a:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    294e:	59 96       	adiw	r26, 0x19	; 25
    2950:	fc 93       	st	X, r31
    2952:	ee 93       	st	-X, r30
    2954:	58 97       	sbiw	r26, 0x18	; 24
    2956:	30 81       	ld	r19, Z
    2958:	3f 5f       	subi	r19, 0xFF	; 255
    295a:	30 83       	st	Z, r19
    295c:	22 23       	and	r18, r18
    295e:	19 f0       	breq	.+6      	; 0x2966 <vTaskPlaceOnEventListRestricted+0x7a>
    2960:	6f ef       	ldi	r22, 0xFF	; 255
    2962:	7f ef       	ldi	r23, 0xFF	; 255
    2964:	cb 01       	movw	r24, r22
    2966:	42 2f       	mov	r20, r18
    2968:	f4 da       	rcall	.-2584   	; 0x1f52 <prvAddCurrentTaskToDelayedList>
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <xTaskRemoveFromEventList>:
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	dc 01       	movw	r26, r24
    2976:	17 96       	adiw	r26, 0x07	; 7
    2978:	ed 91       	ld	r30, X+
    297a:	fc 91       	ld	r31, X
    297c:	18 97       	sbiw	r26, 0x08	; 8
    297e:	00 84       	ldd	r0, Z+8	; 0x08
    2980:	f1 85       	ldd	r31, Z+9	; 0x09
    2982:	e0 2d       	mov	r30, r0
    2984:	a0 8d       	ldd	r26, Z+24	; 0x18
    2986:	b1 8d       	ldd	r27, Z+25	; 0x19
    2988:	c2 89       	ldd	r28, Z+18	; 0x12
    298a:	d3 89       	ldd	r29, Z+19	; 0x13
    298c:	84 89       	ldd	r24, Z+20	; 0x14
    298e:	95 89       	ldd	r25, Z+21	; 0x15
    2990:	9f 83       	std	Y+7, r25	; 0x07
    2992:	8e 83       	std	Y+6, r24	; 0x06
    2994:	c4 89       	ldd	r28, Z+20	; 0x14
    2996:	d5 89       	ldd	r29, Z+21	; 0x15
    2998:	82 89       	ldd	r24, Z+18	; 0x12
    299a:	93 89       	ldd	r25, Z+19	; 0x13
    299c:	9d 83       	std	Y+5, r25	; 0x05
    299e:	8c 83       	std	Y+4, r24	; 0x04
    29a0:	9f 01       	movw	r18, r30
    29a2:	22 5f       	subi	r18, 0xF2	; 242
    29a4:	3f 4f       	sbci	r19, 0xFF	; 255
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	8d 91       	ld	r24, X+
    29aa:	9c 91       	ld	r25, X
    29ac:	12 97       	sbiw	r26, 0x02	; 2
    29ae:	82 17       	cp	r24, r18
    29b0:	93 07       	cpc	r25, r19
    29b2:	31 f4       	brne	.+12     	; 0x29c0 <xTaskRemoveFromEventList+0x50>
    29b4:	84 89       	ldd	r24, Z+20	; 0x14
    29b6:	95 89       	ldd	r25, Z+21	; 0x15
    29b8:	12 96       	adiw	r26, 0x02	; 2
    29ba:	9c 93       	st	X, r25
    29bc:	8e 93       	st	-X, r24
    29be:	11 97       	sbiw	r26, 0x01	; 1
    29c0:	11 8e       	std	Z+25, r1	; 0x19
    29c2:	10 8e       	std	Z+24, r1	; 0x18
    29c4:	8c 91       	ld	r24, X
    29c6:	81 50       	subi	r24, 0x01	; 1
    29c8:	8c 93       	st	X, r24
    29ca:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    29ce:	81 11       	cpse	r24, r1
    29d0:	52 c0       	rjmp	.+164    	; 0x2a76 <xTaskRemoveFromEventList+0x106>
    29d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    29d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    29d6:	c6 81       	ldd	r28, Z+6	; 0x06
    29d8:	d7 81       	ldd	r29, Z+7	; 0x07
    29da:	80 85       	ldd	r24, Z+8	; 0x08
    29dc:	91 85       	ldd	r25, Z+9	; 0x09
    29de:	9f 83       	std	Y+7, r25	; 0x07
    29e0:	8e 83       	std	Y+6, r24	; 0x06
    29e2:	c0 85       	ldd	r28, Z+8	; 0x08
    29e4:	d1 85       	ldd	r29, Z+9	; 0x09
    29e6:	86 81       	ldd	r24, Z+6	; 0x06
    29e8:	97 81       	ldd	r25, Z+7	; 0x07
    29ea:	9d 83       	std	Y+5, r25	; 0x05
    29ec:	8c 83       	std	Y+4, r24	; 0x04
    29ee:	9f 01       	movw	r18, r30
    29f0:	2e 5f       	subi	r18, 0xFE	; 254
    29f2:	3f 4f       	sbci	r19, 0xFF	; 255
    29f4:	11 96       	adiw	r26, 0x01	; 1
    29f6:	8d 91       	ld	r24, X+
    29f8:	9c 91       	ld	r25, X
    29fa:	12 97       	sbiw	r26, 0x02	; 2
    29fc:	82 17       	cp	r24, r18
    29fe:	93 07       	cpc	r25, r19
    2a00:	31 f4       	brne	.+12     	; 0x2a0e <xTaskRemoveFromEventList+0x9e>
    2a02:	80 85       	ldd	r24, Z+8	; 0x08
    2a04:	91 85       	ldd	r25, Z+9	; 0x09
    2a06:	12 96       	adiw	r26, 0x02	; 2
    2a08:	9c 93       	st	X, r25
    2a0a:	8e 93       	st	-X, r24
    2a0c:	11 97       	sbiw	r26, 0x01	; 1
    2a0e:	15 86       	std	Z+13, r1	; 0x0d
    2a10:	14 86       	std	Z+12, r1	; 0x0c
    2a12:	8c 91       	ld	r24, X
    2a14:	81 50       	subi	r24, 0x01	; 1
    2a16:	8c 93       	st	X, r24
    2a18:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a1a:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    2a1e:	8a 17       	cp	r24, r26
    2a20:	10 f4       	brcc	.+4      	; 0x2a26 <xTaskRemoveFromEventList+0xb6>
    2a22:	a0 93 f7 0d 	sts	0x0DF7, r26	; 0x800df7 <uxTopReadyPriority>
    2a26:	8b e0       	ldi	r24, 0x0B	; 11
    2a28:	8a 9f       	mul	r24, r26
    2a2a:	d0 01       	movw	r26, r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	a7 5c       	subi	r26, 0xC7	; 199
    2a30:	b1 4f       	sbci	r27, 0xF1	; 241
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	0d 90       	ld	r0, X+
    2a36:	bc 91       	ld	r27, X
    2a38:	a0 2d       	mov	r26, r0
    2a3a:	b7 83       	std	Z+7, r27	; 0x07
    2a3c:	a6 83       	std	Z+6, r26	; 0x06
    2a3e:	16 96       	adiw	r26, 0x06	; 6
    2a40:	4d 91       	ld	r20, X+
    2a42:	5c 91       	ld	r21, X
    2a44:	17 97       	sbiw	r26, 0x07	; 7
    2a46:	51 87       	std	Z+9, r21	; 0x09
    2a48:	40 87       	std	Z+8, r20	; 0x08
    2a4a:	16 96       	adiw	r26, 0x06	; 6
    2a4c:	cd 91       	ld	r28, X+
    2a4e:	dc 91       	ld	r29, X
    2a50:	17 97       	sbiw	r26, 0x07	; 7
    2a52:	3d 83       	std	Y+5, r19	; 0x05
    2a54:	2c 83       	std	Y+4, r18	; 0x04
    2a56:	17 96       	adiw	r26, 0x07	; 7
    2a58:	3c 93       	st	X, r19
    2a5a:	2e 93       	st	-X, r18
    2a5c:	16 97       	sbiw	r26, 0x06	; 6
    2a5e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a60:	8a 9f       	mul	r24, r26
    2a62:	d0 01       	movw	r26, r0
    2a64:	11 24       	eor	r1, r1
    2a66:	a7 5c       	subi	r26, 0xC7	; 199
    2a68:	b1 4f       	sbci	r27, 0xF1	; 241
    2a6a:	b5 87       	std	Z+13, r27	; 0x0d
    2a6c:	a4 87       	std	Z+12, r26	; 0x0c
    2a6e:	8c 91       	ld	r24, X
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	8c 93       	st	X, r24
    2a74:	1c c0       	rjmp	.+56     	; 0x2aae <xTaskRemoveFromEventList+0x13e>
    2a76:	44 e1       	ldi	r20, 0x14	; 20
    2a78:	5e e0       	ldi	r21, 0x0E	; 14
    2a7a:	da 01       	movw	r26, r20
    2a7c:	11 96       	adiw	r26, 0x01	; 1
    2a7e:	cd 91       	ld	r28, X+
    2a80:	dc 91       	ld	r29, X
    2a82:	12 97       	sbiw	r26, 0x02	; 2
    2a84:	d3 8b       	std	Z+19, r29	; 0x13
    2a86:	c2 8b       	std	Z+18, r28	; 0x12
    2a88:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a8c:	95 8b       	std	Z+21, r25	; 0x15
    2a8e:	84 8b       	std	Z+20, r24	; 0x14
    2a90:	8e 81       	ldd	r24, Y+6	; 0x06
    2a92:	9f 81       	ldd	r25, Y+7	; 0x07
    2a94:	dc 01       	movw	r26, r24
    2a96:	15 96       	adiw	r26, 0x05	; 5
    2a98:	3c 93       	st	X, r19
    2a9a:	2e 93       	st	-X, r18
    2a9c:	14 97       	sbiw	r26, 0x04	; 4
    2a9e:	3f 83       	std	Y+7, r19	; 0x07
    2aa0:	2e 83       	std	Y+6, r18	; 0x06
    2aa2:	51 8f       	std	Z+25, r21	; 0x19
    2aa4:	40 8f       	std	Z+24, r20	; 0x18
    2aa6:	da 01       	movw	r26, r20
    2aa8:	8c 91       	ld	r24, X
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	8c 93       	st	X, r24
    2aae:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2ab2:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2ab6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ab8:	5a 96       	adiw	r26, 0x1a	; 26
    2aba:	8c 91       	ld	r24, X
    2abc:	89 17       	cp	r24, r25
    2abe:	20 f4       	brcc	.+8      	; 0x2ac8 <xTaskRemoveFromEventList+0x158>
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <xYieldPending>
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <xTaskRemoveFromEventList+0x15a>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <vTaskInternalSetTimeOutState>:
    2ad0:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <xNumOfOverflows>
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	20 83       	st	Z, r18
    2ad8:	40 91 f8 0d 	lds	r20, 0x0DF8	; 0x800df8 <xTickCount>
    2adc:	50 91 f9 0d 	lds	r21, 0x0DF9	; 0x800df9 <xTickCount+0x1>
    2ae0:	60 91 fa 0d 	lds	r22, 0x0DFA	; 0x800dfa <xTickCount+0x2>
    2ae4:	70 91 fb 0d 	lds	r23, 0x0DFB	; 0x800dfb <xTickCount+0x3>
    2ae8:	41 83       	std	Z+1, r20	; 0x01
    2aea:	52 83       	std	Z+2, r21	; 0x02
    2aec:	63 83       	std	Z+3, r22	; 0x03
    2aee:	74 83       	std	Z+4, r23	; 0x04
    2af0:	08 95       	ret

00002af2 <xTaskCheckForTimeOut>:
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	fb 01       	movw	r30, r22
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	0f 92       	push	r0
    2b0a:	40 91 f8 0d 	lds	r20, 0x0DF8	; 0x800df8 <xTickCount>
    2b0e:	50 91 f9 0d 	lds	r21, 0x0DF9	; 0x800df9 <xTickCount+0x1>
    2b12:	60 91 fa 0d 	lds	r22, 0x0DFA	; 0x800dfa <xTickCount+0x2>
    2b16:	70 91 fb 0d 	lds	r23, 0x0DFB	; 0x800dfb <xTickCount+0x3>
    2b1a:	00 81       	ld	r16, Z
    2b1c:	11 81       	ldd	r17, Z+1	; 0x01
    2b1e:	22 81       	ldd	r18, Z+2	; 0x02
    2b20:	33 81       	ldd	r19, Z+3	; 0x03
    2b22:	0f 3f       	cpi	r16, 0xFF	; 255
    2b24:	af ef       	ldi	r26, 0xFF	; 255
    2b26:	1a 07       	cpc	r17, r26
    2b28:	2a 07       	cpc	r18, r26
    2b2a:	3a 07       	cpc	r19, r26
    2b2c:	79 f1       	breq	.+94     	; 0x2b8c <xTaskCheckForTimeOut+0x9a>
    2b2e:	ec 01       	movw	r28, r24
    2b30:	c9 80       	ldd	r12, Y+1	; 0x01
    2b32:	da 80       	ldd	r13, Y+2	; 0x02
    2b34:	eb 80       	ldd	r14, Y+3	; 0x03
    2b36:	fc 80       	ldd	r15, Y+4	; 0x04
    2b38:	a0 91 f0 0d 	lds	r26, 0x0DF0	; 0x800df0 <xNumOfOverflows>
    2b3c:	b8 81       	ld	r27, Y
    2b3e:	ba 17       	cp	r27, r26
    2b40:	59 f0       	breq	.+22     	; 0x2b58 <xTaskCheckForTimeOut+0x66>
    2b42:	4c 15       	cp	r20, r12
    2b44:	5d 05       	cpc	r21, r13
    2b46:	6e 05       	cpc	r22, r14
    2b48:	7f 05       	cpc	r23, r15
    2b4a:	30 f0       	brcs	.+12     	; 0x2b58 <xTaskCheckForTimeOut+0x66>
    2b4c:	10 82       	st	Z, r1
    2b4e:	11 82       	std	Z+1, r1	; 0x01
    2b50:	12 82       	std	Z+2, r1	; 0x02
    2b52:	13 82       	std	Z+3, r1	; 0x03
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	1b c0       	rjmp	.+54     	; 0x2b8e <xTaskCheckForTimeOut+0x9c>
    2b58:	4c 19       	sub	r20, r12
    2b5a:	5d 09       	sbc	r21, r13
    2b5c:	6e 09       	sbc	r22, r14
    2b5e:	7f 09       	sbc	r23, r15
    2b60:	40 17       	cp	r20, r16
    2b62:	51 07       	cpc	r21, r17
    2b64:	62 07       	cpc	r22, r18
    2b66:	73 07       	cpc	r23, r19
    2b68:	58 f4       	brcc	.+22     	; 0x2b80 <xTaskCheckForTimeOut+0x8e>
    2b6a:	04 1b       	sub	r16, r20
    2b6c:	15 0b       	sbc	r17, r21
    2b6e:	26 0b       	sbc	r18, r22
    2b70:	37 0b       	sbc	r19, r23
    2b72:	00 83       	st	Z, r16
    2b74:	11 83       	std	Z+1, r17	; 0x01
    2b76:	22 83       	std	Z+2, r18	; 0x02
    2b78:	33 83       	std	Z+3, r19	; 0x03
    2b7a:	aa df       	rcall	.-172    	; 0x2ad0 <vTaskInternalSetTimeOutState>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	07 c0       	rjmp	.+14     	; 0x2b8e <xTaskCheckForTimeOut+0x9c>
    2b80:	10 82       	st	Z, r1
    2b82:	11 82       	std	Z+1, r1	; 0x01
    2b84:	12 82       	std	Z+2, r1	; 0x02
    2b86:	13 82       	std	Z+3, r1	; 0x03
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <xTaskCheckForTimeOut+0x9c>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	0f 90       	pop	r0
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	ff 90       	pop	r15
    2b9c:	ef 90       	pop	r14
    2b9e:	df 90       	pop	r13
    2ba0:	cf 90       	pop	r12
    2ba2:	08 95       	ret

00002ba4 <vTaskMissedYield>:
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <xYieldPending>
    2baa:	08 95       	ret

00002bac <xTaskGetSchedulerState>:
    2bac:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <xSchedulerRunning>
    2bb0:	88 23       	and	r24, r24
    2bb2:	31 f0       	breq	.+12     	; 0x2bc0 <xTaskGetSchedulerState+0x14>
    2bb4:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <uxSchedulerSuspended>
    2bb8:	88 23       	and	r24, r24
    2bba:	21 f0       	breq	.+8      	; 0x2bc4 <xTaskGetSchedulerState+0x18>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	08 95       	ret
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	08 95       	ret
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	08 95       	ret

00002bc8 <xTaskPriorityInherit>:
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	89 2b       	or	r24, r25
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <xTaskPriorityInherit+0x10>
    2bd6:	79 c0       	rjmp	.+242    	; 0x2cca <xTaskPriorityInherit+0x102>
    2bd8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bda:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2bde:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2be2:	5a 96       	adiw	r26, 0x1a	; 26
    2be4:	9c 91       	ld	r25, X
    2be6:	89 17       	cp	r24, r25
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <xTaskPriorityInherit+0x24>
    2bea:	63 c0       	rjmp	.+198    	; 0x2cb2 <xTaskPriorityInherit+0xea>
    2bec:	46 85       	ldd	r20, Z+14	; 0x0e
    2bee:	57 85       	ldd	r21, Z+15	; 0x0f
    2bf0:	60 89       	ldd	r22, Z+16	; 0x10
    2bf2:	71 89       	ldd	r23, Z+17	; 0x11
    2bf4:	77 23       	and	r23, r23
    2bf6:	94 f0       	brlt	.+36     	; 0x2c1c <xTaskPriorityInherit+0x54>
    2bf8:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2bfc:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2c00:	5a 96       	adiw	r26, 0x1a	; 26
    2c02:	9c 91       	ld	r25, X
    2c04:	4a e0       	ldi	r20, 0x0A	; 10
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	49 1b       	sub	r20, r25
    2c0e:	51 09       	sbc	r21, r1
    2c10:	61 09       	sbc	r22, r1
    2c12:	71 09       	sbc	r23, r1
    2c14:	46 87       	std	Z+14, r20	; 0x0e
    2c16:	57 87       	std	Z+15, r21	; 0x0f
    2c18:	60 8b       	std	Z+16, r22	; 0x10
    2c1a:	71 8b       	std	Z+17, r23	; 0x11
    2c1c:	2b e0       	ldi	r18, 0x0B	; 11
    2c1e:	82 9f       	mul	r24, r18
    2c20:	c0 01       	movw	r24, r0
    2c22:	11 24       	eor	r1, r1
    2c24:	87 5c       	subi	r24, 0xC7	; 199
    2c26:	91 4f       	sbci	r25, 0xF1	; 241
    2c28:	24 85       	ldd	r18, Z+12	; 0x0c
    2c2a:	35 85       	ldd	r19, Z+13	; 0x0d
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	b9 f5       	brne	.+110    	; 0x2ca0 <xTaskPriorityInherit+0xd8>
    2c32:	ef 01       	movw	r28, r30
    2c34:	8f 01       	movw	r16, r30
    2c36:	0e 5f       	subi	r16, 0xFE	; 254
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3a:	c8 01       	movw	r24, r16
    2c3c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
    2c40:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2c44:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2c48:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c4a:	ea 8f       	std	Y+26, r30	; 0x1a
    2c4c:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    2c50:	8e 17       	cp	r24, r30
    2c52:	10 f4       	brcc	.+4      	; 0x2c58 <xTaskPriorityInherit+0x90>
    2c54:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <uxTopReadyPriority>
    2c58:	8b e0       	ldi	r24, 0x0B	; 11
    2c5a:	8e 9f       	mul	r24, r30
    2c5c:	f0 01       	movw	r30, r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	e7 5c       	subi	r30, 0xC7	; 199
    2c62:	f1 4f       	sbci	r31, 0xF1	; 241
    2c64:	01 80       	ldd	r0, Z+1	; 0x01
    2c66:	f2 81       	ldd	r31, Z+2	; 0x02
    2c68:	e0 2d       	mov	r30, r0
    2c6a:	ff 83       	std	Y+7, r31	; 0x07
    2c6c:	ee 83       	std	Y+6, r30	; 0x06
    2c6e:	26 81       	ldd	r18, Z+6	; 0x06
    2c70:	37 81       	ldd	r19, Z+7	; 0x07
    2c72:	39 87       	std	Y+9, r19	; 0x09
    2c74:	28 87       	std	Y+8, r18	; 0x08
    2c76:	a6 81       	ldd	r26, Z+6	; 0x06
    2c78:	b7 81       	ldd	r27, Z+7	; 0x07
    2c7a:	15 96       	adiw	r26, 0x05	; 5
    2c7c:	1c 93       	st	X, r17
    2c7e:	0e 93       	st	-X, r16
    2c80:	14 97       	sbiw	r26, 0x04	; 4
    2c82:	17 83       	std	Z+7, r17	; 0x07
    2c84:	06 83       	std	Z+6, r16	; 0x06
    2c86:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c88:	8e 9f       	mul	r24, r30
    2c8a:	f0 01       	movw	r30, r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	e7 5c       	subi	r30, 0xC7	; 199
    2c90:	f1 4f       	sbci	r31, 0xF1	; 241
    2c92:	fd 87       	std	Y+13, r31	; 0x0d
    2c94:	ec 87       	std	Y+12, r30	; 0x0c
    2c96:	80 81       	ld	r24, Z
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	80 83       	st	Z, r24
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	16 c0       	rjmp	.+44     	; 0x2ccc <xTaskPriorityInherit+0x104>
    2ca0:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2ca4:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2ca8:	5a 96       	adiw	r26, 0x1a	; 26
    2caa:	8c 91       	ld	r24, X
    2cac:	82 8f       	std	Z+26, r24	; 0x1a
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	0d c0       	rjmp	.+26     	; 0x2ccc <xTaskPriorityInherit+0x104>
    2cb2:	a0 91 a7 0e 	lds	r26, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2cb6:	b0 91 a8 0e 	lds	r27, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	25 a5       	ldd	r18, Z+45	; 0x2d
    2cbe:	5a 96       	adiw	r26, 0x1a	; 26
    2cc0:	9c 91       	ld	r25, X
    2cc2:	29 17       	cp	r18, r25
    2cc4:	18 f0       	brcs	.+6      	; 0x2ccc <xTaskPriorityInherit+0x104>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <xTaskPriorityInherit+0x104>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	08 95       	ret

00002cd6 <xTaskPriorityDisinherit>:
    2cd6:	0f 93       	push	r16
    2cd8:	1f 93       	push	r17
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	fc 01       	movw	r30, r24
    2ce0:	89 2b       	or	r24, r25
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <xTaskPriorityDisinherit+0x10>
    2ce4:	49 c0       	rjmp	.+146    	; 0x2d78 <xTaskPriorityDisinherit+0xa2>
    2ce6:	86 a5       	ldd	r24, Z+46	; 0x2e
    2ce8:	81 50       	subi	r24, 0x01	; 1
    2cea:	86 a7       	std	Z+46, r24	; 0x2e
    2cec:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cee:	95 a5       	ldd	r25, Z+45	; 0x2d
    2cf0:	29 17       	cp	r18, r25
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <xTaskPriorityDisinherit+0x20>
    2cf4:	43 c0       	rjmp	.+134    	; 0x2d7c <xTaskPriorityDisinherit+0xa6>
    2cf6:	81 11       	cpse	r24, r1
    2cf8:	43 c0       	rjmp	.+134    	; 0x2d80 <xTaskPriorityDisinherit+0xaa>
    2cfa:	ef 01       	movw	r28, r30
    2cfc:	8f 01       	movw	r16, r30
    2cfe:	0e 5f       	subi	r16, 0xFE	; 254
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	c8 01       	movw	r24, r16
    2d04:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
    2d08:	ed a5       	ldd	r30, Y+45	; 0x2d
    2d0a:	ea 8f       	std	Y+26, r30	; 0x1a
    2d0c:	8a e0       	ldi	r24, 0x0A	; 10
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	8e 1b       	sub	r24, r30
    2d16:	91 09       	sbc	r25, r1
    2d18:	a1 09       	sbc	r26, r1
    2d1a:	b1 09       	sbc	r27, r1
    2d1c:	8e 87       	std	Y+14, r24	; 0x0e
    2d1e:	9f 87       	std	Y+15, r25	; 0x0f
    2d20:	a8 8b       	std	Y+16, r26	; 0x10
    2d22:	b9 8b       	std	Y+17, r27	; 0x11
    2d24:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    2d28:	8e 17       	cp	r24, r30
    2d2a:	10 f4       	brcc	.+4      	; 0x2d30 <xTaskPriorityDisinherit+0x5a>
    2d2c:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <uxTopReadyPriority>
    2d30:	8b e0       	ldi	r24, 0x0B	; 11
    2d32:	8e 9f       	mul	r24, r30
    2d34:	f0 01       	movw	r30, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	e7 5c       	subi	r30, 0xC7	; 199
    2d3a:	f1 4f       	sbci	r31, 0xF1	; 241
    2d3c:	01 80       	ldd	r0, Z+1	; 0x01
    2d3e:	f2 81       	ldd	r31, Z+2	; 0x02
    2d40:	e0 2d       	mov	r30, r0
    2d42:	ff 83       	std	Y+7, r31	; 0x07
    2d44:	ee 83       	std	Y+6, r30	; 0x06
    2d46:	26 81       	ldd	r18, Z+6	; 0x06
    2d48:	37 81       	ldd	r19, Z+7	; 0x07
    2d4a:	39 87       	std	Y+9, r19	; 0x09
    2d4c:	28 87       	std	Y+8, r18	; 0x08
    2d4e:	a6 81       	ldd	r26, Z+6	; 0x06
    2d50:	b7 81       	ldd	r27, Z+7	; 0x07
    2d52:	15 96       	adiw	r26, 0x05	; 5
    2d54:	1c 93       	st	X, r17
    2d56:	0e 93       	st	-X, r16
    2d58:	14 97       	sbiw	r26, 0x04	; 4
    2d5a:	17 83       	std	Z+7, r17	; 0x07
    2d5c:	06 83       	std	Z+6, r16	; 0x06
    2d5e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d60:	8e 9f       	mul	r24, r30
    2d62:	f0 01       	movw	r30, r0
    2d64:	11 24       	eor	r1, r1
    2d66:	e7 5c       	subi	r30, 0xC7	; 199
    2d68:	f1 4f       	sbci	r31, 0xF1	; 241
    2d6a:	fd 87       	std	Y+13, r31	; 0x0d
    2d6c:	ec 87       	std	Y+12, r30	; 0x0c
    2d6e:	80 81       	ld	r24, Z
    2d70:	8f 5f       	subi	r24, 0xFF	; 255
    2d72:	80 83       	st	Z, r24
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	05 c0       	rjmp	.+10     	; 0x2d82 <xTaskPriorityDisinherit+0xac>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <xTaskPriorityDisinherit+0xac>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <xTaskPriorityDisinherit+0xac>
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	08 95       	ret

00002d8c <vTaskPriorityDisinheritAfterTimeout>:
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	fc 01       	movw	r30, r24
    2d96:	89 2b       	or	r24, r25
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <vTaskPriorityDisinheritAfterTimeout+0x10>
    2d9a:	5a c0       	rjmp	.+180    	; 0x2e50 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2d9c:	85 a5       	ldd	r24, Z+45	; 0x2d
    2d9e:	86 17       	cp	r24, r22
    2da0:	08 f4       	brcc	.+2      	; 0x2da4 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2da2:	86 2f       	mov	r24, r22
    2da4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2da6:	98 17       	cp	r25, r24
    2da8:	09 f4       	brne	.+2      	; 0x2dac <vTaskPriorityDisinheritAfterTimeout+0x20>
    2daa:	52 c0       	rjmp	.+164    	; 0x2e50 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2dac:	26 a5       	ldd	r18, Z+46	; 0x2e
    2dae:	21 30       	cpi	r18, 0x01	; 1
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2db2:	4e c0       	rjmp	.+156    	; 0x2e50 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2db4:	82 8f       	std	Z+26, r24	; 0x1a
    2db6:	46 85       	ldd	r20, Z+14	; 0x0e
    2db8:	57 85       	ldd	r21, Z+15	; 0x0f
    2dba:	60 89       	ldd	r22, Z+16	; 0x10
    2dbc:	71 89       	ldd	r23, Z+17	; 0x11
    2dbe:	77 23       	and	r23, r23
    2dc0:	64 f0       	brlt	.+24     	; 0x2dda <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2dc2:	4a e0       	ldi	r20, 0x0A	; 10
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	48 1b       	sub	r20, r24
    2dcc:	51 09       	sbc	r21, r1
    2dce:	61 09       	sbc	r22, r1
    2dd0:	71 09       	sbc	r23, r1
    2dd2:	46 87       	std	Z+14, r20	; 0x0e
    2dd4:	57 87       	std	Z+15, r21	; 0x0f
    2dd6:	60 8b       	std	Z+16, r22	; 0x10
    2dd8:	71 8b       	std	Z+17, r23	; 0x11
    2dda:	2b e0       	ldi	r18, 0x0B	; 11
    2ddc:	92 9f       	mul	r25, r18
    2dde:	c0 01       	movw	r24, r0
    2de0:	11 24       	eor	r1, r1
    2de2:	87 5c       	subi	r24, 0xC7	; 199
    2de4:	91 4f       	sbci	r25, 0xF1	; 241
    2de6:	24 85       	ldd	r18, Z+12	; 0x0c
    2de8:	35 85       	ldd	r19, Z+13	; 0x0d
    2dea:	28 17       	cp	r18, r24
    2dec:	39 07       	cpc	r19, r25
    2dee:	81 f5       	brne	.+96     	; 0x2e50 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2df0:	ef 01       	movw	r28, r30
    2df2:	8f 01       	movw	r16, r30
    2df4:	0e 5f       	subi	r16, 0xFE	; 254
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	c8 01       	movw	r24, r16
    2dfa:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
    2dfe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e00:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <uxTopReadyPriority>
    2e04:	8e 17       	cp	r24, r30
    2e06:	10 f4       	brcc	.+4      	; 0x2e0c <vTaskPriorityDisinheritAfterTimeout+0x80>
    2e08:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <uxTopReadyPriority>
    2e0c:	8b e0       	ldi	r24, 0x0B	; 11
    2e0e:	8e 9f       	mul	r24, r30
    2e10:	f0 01       	movw	r30, r0
    2e12:	11 24       	eor	r1, r1
    2e14:	e7 5c       	subi	r30, 0xC7	; 199
    2e16:	f1 4f       	sbci	r31, 0xF1	; 241
    2e18:	01 80       	ldd	r0, Z+1	; 0x01
    2e1a:	f2 81       	ldd	r31, Z+2	; 0x02
    2e1c:	e0 2d       	mov	r30, r0
    2e1e:	ff 83       	std	Y+7, r31	; 0x07
    2e20:	ee 83       	std	Y+6, r30	; 0x06
    2e22:	26 81       	ldd	r18, Z+6	; 0x06
    2e24:	37 81       	ldd	r19, Z+7	; 0x07
    2e26:	39 87       	std	Y+9, r19	; 0x09
    2e28:	28 87       	std	Y+8, r18	; 0x08
    2e2a:	a6 81       	ldd	r26, Z+6	; 0x06
    2e2c:	b7 81       	ldd	r27, Z+7	; 0x07
    2e2e:	15 96       	adiw	r26, 0x05	; 5
    2e30:	1c 93       	st	X, r17
    2e32:	0e 93       	st	-X, r16
    2e34:	14 97       	sbiw	r26, 0x04	; 4
    2e36:	17 83       	std	Z+7, r17	; 0x07
    2e38:	06 83       	std	Z+6, r16	; 0x06
    2e3a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e3c:	8e 9f       	mul	r24, r30
    2e3e:	f0 01       	movw	r30, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	e7 5c       	subi	r30, 0xC7	; 199
    2e44:	f1 4f       	sbci	r31, 0xF1	; 241
    2e46:	fd 87       	std	Y+13, r31	; 0x0d
    2e48:	ec 87       	std	Y+12, r30	; 0x0c
    2e4a:	80 81       	ld	r24, Z
    2e4c:	8f 5f       	subi	r24, 0xFF	; 255
    2e4e:	80 83       	st	Z, r24
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	08 95       	ret

00002e5a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2e5a:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2e5e:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2e62:	89 2b       	or	r24, r25
    2e64:	39 f0       	breq	.+14     	; 0x2e74 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2e66:	e0 91 a7 0e 	lds	r30, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2e6a:	f0 91 a8 0e 	lds	r31, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    2e6e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2e74:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <pxCurrentTCB>
    2e78:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <pxCurrentTCB+0x1>
    }
    2e7c:	08 95       	ret

00002e7e <prvInsertTimerInActiveList>:
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	42 83       	std	Z+2, r20	; 0x02
    2e8e:	53 83       	std	Z+3, r21	; 0x03
    2e90:	64 83       	std	Z+4, r22	; 0x04
    2e92:	75 83       	std	Z+5, r23	; 0x05
    2e94:	93 87       	std	Z+11, r25	; 0x0b
    2e96:	82 87       	std	Z+10, r24	; 0x0a
    2e98:	04 17       	cp	r16, r20
    2e9a:	15 07       	cpc	r17, r21
    2e9c:	26 07       	cpc	r18, r22
    2e9e:	37 07       	cpc	r19, r23
    2ea0:	c0 f0       	brcs	.+48     	; 0x2ed2 <prvInsertTimerInActiveList+0x54>
    2ea2:	0c 19       	sub	r16, r12
    2ea4:	1d 09       	sbc	r17, r13
    2ea6:	2e 09       	sbc	r18, r14
    2ea8:	3f 09       	sbc	r19, r15
    2eaa:	86 85       	ldd	r24, Z+14	; 0x0e
    2eac:	97 85       	ldd	r25, Z+15	; 0x0f
    2eae:	a0 89       	ldd	r26, Z+16	; 0x10
    2eb0:	b1 89       	ldd	r27, Z+17	; 0x11
    2eb2:	08 17       	cp	r16, r24
    2eb4:	19 07       	cpc	r17, r25
    2eb6:	2a 07       	cpc	r18, r26
    2eb8:	3b 07       	cpc	r19, r27
    2eba:	00 f5       	brcc	.+64     	; 0x2efc <prvInsertTimerInActiveList+0x7e>
    2ebc:	bf 01       	movw	r22, r30
    2ebe:	6e 5f       	subi	r22, 0xFE	; 254
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	80 91 b1 0e 	lds	r24, 0x0EB1	; 0x800eb1 <pxOverflowTimerList>
    2ec6:	90 91 b2 0e 	lds	r25, 0x0EB2	; 0x800eb2 <pxOverflowTimerList+0x1>
    2eca:	0e 94 83 0a 	call	0x1506	; 0x1506 <vListInsert>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	18 c0       	rjmp	.+48     	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2ed2:	0c 15       	cp	r16, r12
    2ed4:	1d 05       	cpc	r17, r13
    2ed6:	2e 05       	cpc	r18, r14
    2ed8:	3f 05       	cpc	r19, r15
    2eda:	28 f4       	brcc	.+10     	; 0x2ee6 <prvInsertTimerInActiveList+0x68>
    2edc:	4c 15       	cp	r20, r12
    2ede:	5d 05       	cpc	r21, r13
    2ee0:	6e 05       	cpc	r22, r14
    2ee2:	7f 05       	cpc	r23, r15
    2ee4:	68 f4       	brcc	.+26     	; 0x2f00 <prvInsertTimerInActiveList+0x82>
    2ee6:	bf 01       	movw	r22, r30
    2ee8:	6e 5f       	subi	r22, 0xFE	; 254
    2eea:	7f 4f       	sbci	r23, 0xFF	; 255
    2eec:	80 91 b3 0e 	lds	r24, 0x0EB3	; 0x800eb3 <pxCurrentTimerList>
    2ef0:	90 91 b4 0e 	lds	r25, 0x0EB4	; 0x800eb4 <pxCurrentTimerList+0x1>
    2ef4:	0e 94 83 0a 	call	0x1506	; 0x1506 <vListInsert>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	ff 90       	pop	r15
    2f08:	ef 90       	pop	r14
    2f0a:	df 90       	pop	r13
    2f0c:	cf 90       	pop	r12
    2f0e:	08 95       	ret

00002f10 <prvCheckForValidListAndQueue>:
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	0f 92       	push	r0
    2f16:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <xTimerQueue>
    2f1a:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
    2f1e:	89 2b       	or	r24, r25
    2f20:	e9 f4       	brne	.+58     	; 0x2f5c <prvCheckForValidListAndQueue+0x4c>
    2f22:	80 ec       	ldi	r24, 0xC0	; 192
    2f24:	9e e0       	ldi	r25, 0x0E	; 14
    2f26:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <vListInitialise>
    2f2a:	85 eb       	ldi	r24, 0xB5	; 181
    2f2c:	9e e0       	ldi	r25, 0x0E	; 14
    2f2e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <vListInitialise>
    2f32:	80 ec       	ldi	r24, 0xC0	; 192
    2f34:	9e e0       	ldi	r25, 0x0E	; 14
    2f36:	90 93 b4 0e 	sts	0x0EB4, r25	; 0x800eb4 <pxCurrentTimerList+0x1>
    2f3a:	80 93 b3 0e 	sts	0x0EB3, r24	; 0x800eb3 <pxCurrentTimerList>
    2f3e:	85 eb       	ldi	r24, 0xB5	; 181
    2f40:	9e e0       	ldi	r25, 0x0E	; 14
    2f42:	90 93 b2 0e 	sts	0x0EB2, r25	; 0x800eb2 <pxOverflowTimerList+0x1>
    2f46:	80 93 b1 0e 	sts	0x0EB1, r24	; 0x800eb1 <pxOverflowTimerList>
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	67 e0       	ldi	r22, 0x07	; 7
    2f4e:	8a e0       	ldi	r24, 0x0A	; 10
    2f50:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xQueueGenericCreate>
    2f54:	90 93 b0 0e 	sts	0x0EB0, r25	; 0x800eb0 <xTimerQueue+0x1>
    2f58:	80 93 af 0e 	sts	0x0EAF, r24	; 0x800eaf <xTimerQueue>
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	08 95       	ret

00002f62 <xTimerCreateTimerTask>:
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	d3 df       	rcall	.-90     	; 0x2f10 <prvCheckForValidListAndQueue>
    2f6a:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <xTimerQueue>
    2f6e:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
    2f72:	89 2b       	or	r24, r25
    2f74:	89 f0       	breq	.+34     	; 0x2f98 <xTimerCreateTimerTask+0x36>
    2f76:	0f 2e       	mov	r0, r31
    2f78:	fd ea       	ldi	r31, 0xAD	; 173
    2f7a:	ef 2e       	mov	r14, r31
    2f7c:	fe e0       	ldi	r31, 0x0E	; 14
    2f7e:	ff 2e       	mov	r15, r31
    2f80:	f0 2d       	mov	r31, r0
    2f82:	03 e0       	ldi	r16, 0x03	; 3
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 ec       	ldi	r20, 0xC0	; 192
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	69 ed       	ldi	r22, 0xD9	; 217
    2f8e:	73 e0       	ldi	r23, 0x03	; 3
    2f90:	88 e4       	ldi	r24, 0x48	; 72
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	7d d8       	rcall	.-3846   	; 0x2090 <xTaskCreate>
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <xTimerCreateTimerTask+0x38>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	08 95       	ret

00002fa2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2fa2:	8f 92       	push	r8
    2fa4:	9f 92       	push	r9
    2fa6:	af 92       	push	r10
    2fa8:	bf 92       	push	r11
    2faa:	cf 92       	push	r12
    2fac:	df 92       	push	r13
    2fae:	ef 92       	push	r14
    2fb0:	ff 92       	push	r15
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	27 97       	sbiw	r28, 0x07	; 7
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2fca:	e0 91 af 0e 	lds	r30, 0x0EAF	; 0x800eaf <xTimerQueue>
    2fce:	f0 91 b0 0e 	lds	r31, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
    2fd2:	30 97       	sbiw	r30, 0x00	; 0
    2fd4:	81 f1       	breq	.+96     	; 0x3036 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2fd6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2fd8:	2a 83       	std	Y+2, r18	; 0x02
    2fda:	3b 83       	std	Y+3, r19	; 0x03
    2fdc:	4c 83       	std	Y+4, r20	; 0x04
    2fde:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2fe0:	9f 83       	std	Y+7, r25	; 0x07
    2fe2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2fe4:	66 30       	cpi	r22, 0x06	; 6
    2fe6:	f4 f4       	brge	.+60     	; 0x3024 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2fe8:	e1 dd       	rcall	.-1086   	; 0x2bac <xTaskGetSchedulerState>
    2fea:	82 30       	cpi	r24, 0x02	; 2
    2fec:	69 f4       	brne	.+26     	; 0x3008 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2fee:	00 e0       	ldi	r16, 0x00	; 0
    2ff0:	a7 01       	movw	r20, r14
    2ff2:	96 01       	movw	r18, r12
    2ff4:	be 01       	movw	r22, r28
    2ff6:	6f 5f       	subi	r22, 0xFF	; 255
    2ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffa:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <xTimerQueue>
    2ffe:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
    3002:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xQueueGenericSend>
    3006:	18 c0       	rjmp	.+48     	; 0x3038 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3008:	00 e0       	ldi	r16, 0x00	; 0
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	a9 01       	movw	r20, r18
    3010:	be 01       	movw	r22, r28
    3012:	6f 5f       	subi	r22, 0xFF	; 255
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <xTimerQueue>
    301a:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <xTimerQueue+0x1>
    301e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xQueueGenericSend>
    3022:	0a c0       	rjmp	.+20     	; 0x3038 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	a8 01       	movw	r20, r16
    3028:	be 01       	movw	r22, r28
    302a:	6f 5f       	subi	r22, 0xFF	; 255
    302c:	7f 4f       	sbci	r23, 0xFF	; 255
    302e:	cf 01       	movw	r24, r30
    3030:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xQueueGenericSendFromISR>
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3036:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3038:	27 96       	adiw	r28, 0x07	; 7
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	ff 90       	pop	r15
    304e:	ef 90       	pop	r14
    3050:	df 90       	pop	r13
    3052:	cf 90       	pop	r12
    3054:	bf 90       	pop	r11
    3056:	af 90       	pop	r10
    3058:	9f 90       	pop	r9
    305a:	8f 90       	pop	r8
    305c:	08 95       	ret

0000305e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    305e:	2f 92       	push	r2
    3060:	3f 92       	push	r3
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3084:	6e d9       	rcall	.-3364   	; 0x2362 <xTaskGetTickCount>
    3086:	2b 01       	movw	r4, r22
    3088:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    308a:	80 91 a9 0e 	lds	r24, 0x0EA9	; 0x800ea9 <xLastTime.2436>
    308e:	90 91 aa 0e 	lds	r25, 0x0EAA	; 0x800eaa <xLastTime.2436+0x1>
    3092:	a0 91 ab 0e 	lds	r26, 0x0EAB	; 0x800eab <xLastTime.2436+0x2>
    3096:	b0 91 ac 0e 	lds	r27, 0x0EAC	; 0x800eac <xLastTime.2436+0x3>
    309a:	48 16       	cp	r4, r24
    309c:	59 06       	cpc	r5, r25
    309e:	6a 06       	cpc	r6, r26
    30a0:	7b 06       	cpc	r7, r27
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <prvSampleTimeNow+0x48>
    30a4:	53 c0       	rjmp	.+166    	; 0x314c <prvSampleTimeNow+0xee>
    30a6:	3b c0       	rjmp	.+118    	; 0x311e <prvSampleTimeNow+0xc0>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30a8:	07 80       	ldd	r0, Z+7	; 0x07
    30aa:	f0 85       	ldd	r31, Z+8	; 0x08
    30ac:	e0 2d       	mov	r30, r0
    30ae:	80 80       	ld	r8, Z
    30b0:	91 80       	ldd	r9, Z+1	; 0x01
    30b2:	a2 80       	ldd	r10, Z+2	; 0x02
    30b4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30b6:	c0 85       	ldd	r28, Z+8	; 0x08
    30b8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30ba:	8e 01       	movw	r16, r28
    30bc:	0e 5f       	subi	r16, 0xFE	; 254
    30be:	1f 4f       	sbci	r17, 0xFF	; 255
    30c0:	c8 01       	movw	r24, r16
    30c2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    30c6:	ec 89       	ldd	r30, Y+20	; 0x14
    30c8:	fd 89       	ldd	r31, Y+21	; 0x15
    30ca:	ce 01       	movw	r24, r28
    30cc:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30ce:	8e 89       	ldd	r24, Y+22	; 0x16
    30d0:	82 ff       	sbrs	r24, 2
    30d2:	25 c0       	rjmp	.+74     	; 0x311e <prvSampleTimeNow+0xc0>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    30d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    30d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    30d8:	a8 89       	ldd	r26, Y+16	; 0x10
    30da:	b9 89       	ldd	r27, Y+17	; 0x11
    30dc:	88 0d       	add	r24, r8
    30de:	99 1d       	adc	r25, r9
    30e0:	aa 1d       	adc	r26, r10
    30e2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    30e4:	88 16       	cp	r8, r24
    30e6:	99 06       	cpc	r9, r25
    30e8:	aa 06       	cpc	r10, r26
    30ea:	bb 06       	cpc	r11, r27
    30ec:	70 f4       	brcc	.+28     	; 0x310a <prvSampleTimeNow+0xac>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    30ee:	8a 83       	std	Y+2, r24	; 0x02
    30f0:	9b 83       	std	Y+3, r25	; 0x03
    30f2:	ac 83       	std	Y+4, r26	; 0x04
    30f4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30f6:	db 87       	std	Y+11, r29	; 0x0b
    30f8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    30fa:	b8 01       	movw	r22, r16
    30fc:	80 91 b3 0e 	lds	r24, 0x0EB3	; 0x800eb3 <pxCurrentTimerList>
    3100:	90 91 b4 0e 	lds	r25, 0x0EB4	; 0x800eb4 <pxCurrentTimerList+0x1>
    3104:	0e 94 83 0a 	call	0x1506	; 0x1506 <vListInsert>
    3108:	0a c0       	rjmp	.+20     	; 0x311e <prvSampleTimeNow+0xc0>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    310a:	c1 2c       	mov	r12, r1
    310c:	d1 2c       	mov	r13, r1
    310e:	76 01       	movw	r14, r12
    3110:	00 e0       	ldi	r16, 0x00	; 0
    3112:	10 e0       	ldi	r17, 0x00	; 0
    3114:	a5 01       	movw	r20, r10
    3116:	94 01       	movw	r18, r8
    3118:	60 e0       	ldi	r22, 0x00	; 0
    311a:	ce 01       	movw	r24, r28
    311c:	42 df       	rcall	.-380    	; 0x2fa2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    311e:	e0 91 b3 0e 	lds	r30, 0x0EB3	; 0x800eb3 <pxCurrentTimerList>
    3122:	f0 91 b4 0e 	lds	r31, 0x0EB4	; 0x800eb4 <pxCurrentTimerList+0x1>
    3126:	80 81       	ld	r24, Z
    3128:	81 11       	cpse	r24, r1
    312a:	be cf       	rjmp	.-132    	; 0x30a8 <prvSampleTimeNow+0x4a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    312c:	80 91 b1 0e 	lds	r24, 0x0EB1	; 0x800eb1 <pxOverflowTimerList>
    3130:	90 91 b2 0e 	lds	r25, 0x0EB2	; 0x800eb2 <pxOverflowTimerList+0x1>
    3134:	90 93 b4 0e 	sts	0x0EB4, r25	; 0x800eb4 <pxCurrentTimerList+0x1>
    3138:	80 93 b3 0e 	sts	0x0EB3, r24	; 0x800eb3 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    313c:	f0 93 b2 0e 	sts	0x0EB2, r31	; 0x800eb2 <pxOverflowTimerList+0x1>
    3140:	e0 93 b1 0e 	sts	0x0EB1, r30	; 0x800eb1 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	f1 01       	movw	r30, r2
    3148:	80 83       	st	Z, r24
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <prvSampleTimeNow+0xf2>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    314c:	f1 01       	movw	r30, r2
    314e:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3150:	40 92 a9 0e 	sts	0x0EA9, r4	; 0x800ea9 <xLastTime.2436>
    3154:	50 92 aa 0e 	sts	0x0EAA, r5	; 0x800eaa <xLastTime.2436+0x1>
    3158:	60 92 ab 0e 	sts	0x0EAB, r6	; 0x800eab <xLastTime.2436+0x2>
    315c:	70 92 ac 0e 	sts	0x0EAC, r7	; 0x800eac <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3160:	c3 01       	movw	r24, r6
    3162:	b2 01       	movw	r22, r4
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	bf 90       	pop	r11
    3176:	af 90       	pop	r10
    3178:	9f 90       	pop	r9
    317a:	8f 90       	pop	r8
    317c:	7f 90       	pop	r7
    317e:	6f 90       	pop	r6
    3180:	5f 90       	pop	r5
    3182:	4f 90       	pop	r4
    3184:	3f 90       	pop	r3
    3186:	2f 90       	pop	r2
    3188:	08 95       	ret

0000318a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    318a:	08 95       	ret

0000318c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    318c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    318e:	2f 9a       	sbi	0x05, 7	; 5
    3190:	08 95       	ret

00003192 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3192:	1f 9a       	sbi	0x03, 7	; 3
    3194:	08 95       	ret

00003196 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3196:	fa df       	rcall	.-12     	; 0x318c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3198:	2f ef       	ldi	r18, 0xFF	; 255
    319a:	80 e7       	ldi	r24, 0x70	; 112
    319c:	92 e0       	ldi	r25, 0x02	; 2
    319e:	21 50       	subi	r18, 0x01	; 1
    31a0:	80 40       	sbci	r24, 0x00	; 0
    31a2:	90 40       	sbci	r25, 0x00	; 0
    31a4:	e1 f7       	brne	.-8      	; 0x319e <vApplicationMallocFailedHook+0x8>
    31a6:	00 c0       	rjmp	.+0      	; 0x31a8 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    31a8:	00 00       	nop
    31aa:	f3 df       	rcall	.-26     	; 0x3192 <prvBlinkMainLed>
    31ac:	f5 cf       	rjmp	.-22     	; 0x3198 <vApplicationMallocFailedHook+0x2>

000031ae <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    31ae:	ee df       	rcall	.-36     	; 0x318c <prvSetMainLedOn>
    31b0:	2f ef       	ldi	r18, 0xFF	; 255
    31b2:	87 ea       	ldi	r24, 0xA7	; 167
    31b4:	91 e6       	ldi	r25, 0x61	; 97
    31b6:	21 50       	subi	r18, 0x01	; 1
    31b8:	80 40       	sbci	r24, 0x00	; 0
    31ba:	90 40       	sbci	r25, 0x00	; 0
    31bc:	e1 f7       	brne	.-8      	; 0x31b6 <vApplicationStackOverflowHook+0x8>
    31be:	00 c0       	rjmp	.+0      	; 0x31c0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    31c0:	00 00       	nop
    31c2:	e7 df       	rcall	.-50     	; 0x3192 <prvBlinkMainLed>
    31c4:	f5 cf       	rjmp	.-22     	; 0x31b0 <vApplicationStackOverflowHook+0x2>

000031c6 <initialiseSystem>:
	// A3 for LoRaWAN
	// A4 means 7-segment Display is showing carbon dioxide
	// A5 means 7-segment Display is showing humidity
	// A6 means 7-segment Display is showing temperature
	// A7 means 7-segment Display is showing time(hh.mm)
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5) | _BV(DDA6) | _BV(DDA7);
    31c6:	81 b1       	in	r24, 0x01	; 1
    31c8:	8f ef       	ldi	r24, 0xFF	; 255
    31ca:	81 b9       	out	0x01, r24	; 1
	//Turn off all led
	PORTA ^= _BV(PA0);
    31cc:	92 b1       	in	r25, 0x02	; 2
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	89 27       	eor	r24, r25
    31d2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA1);
    31d4:	92 b1       	in	r25, 0x02	; 2
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	89 27       	eor	r24, r25
    31da:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA2);
    31dc:	92 b1       	in	r25, 0x02	; 2
    31de:	84 e0       	ldi	r24, 0x04	; 4
    31e0:	89 27       	eor	r24, r25
    31e2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA3);
    31e4:	92 b1       	in	r25, 0x02	; 2
    31e6:	88 e0       	ldi	r24, 0x08	; 8
    31e8:	89 27       	eor	r24, r25
    31ea:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA4);
    31ec:	92 b1       	in	r25, 0x02	; 2
    31ee:	80 e1       	ldi	r24, 0x10	; 16
    31f0:	89 27       	eor	r24, r25
    31f2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA5);
    31f4:	92 b1       	in	r25, 0x02	; 2
    31f6:	80 e2       	ldi	r24, 0x20	; 32
    31f8:	89 27       	eor	r24, r25
    31fa:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA6);
    31fc:	92 b1       	in	r25, 0x02	; 2
    31fe:	80 e4       	ldi	r24, 0x40	; 64
    3200:	89 27       	eor	r24, r25
    3202:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA7);
    3204:	82 b1       	in	r24, 0x02	; 2
    3206:	80 58       	subi	r24, 0x80	; 128
    3208:	82 b9       	out	0x02, r24	; 2
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	0e 94 90 21 	call	0x4320	; 0x4320 <stdio_initialise>
    mh_z19_initialise(ser_USART3);
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	69 d4       	rcall	.+2258   	; 0x3ae8 <mh_z19_initialise>
	if ( HIH8120_OK == hih8120_initialise() )
    3216:	a9 c3       	rjmp	.+1874   	; 0x396a <hih8120_initialise>
    3218:	08 95       	ret

0000321a <main>:
    321a:	d5 df       	rcall	.-86     	; 0x31c6 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!!\n");
    321c:	81 ee       	ldi	r24, 0xE1	; 225
    321e:	93 e0       	ldi	r25, 0x03	; 3
    3220:	0e 94 1d 29 	call	0x523a	; 0x523a <puts>
	sensorModelManager_create();
    3224:	0e 94 42 08 	call	0x1084	; 0x1084 <sensorModelManager_create>
    3228:	ff cf       	rjmp	.-2      	; 0x3228 <main+0xe>

0000322a <__subsf3>:
    322a:	50 58       	subi	r21, 0x80	; 128

0000322c <__addsf3>:
    322c:	bb 27       	eor	r27, r27
    322e:	aa 27       	eor	r26, r26
    3230:	0e d0       	rcall	.+28     	; 0x324e <__addsf3x>
    3232:	4d c1       	rjmp	.+666    	; 0x34ce <__fp_round>
    3234:	3e d1       	rcall	.+636    	; 0x34b2 <__fp_pscA>
    3236:	30 f0       	brcs	.+12     	; 0x3244 <__addsf3+0x18>
    3238:	43 d1       	rcall	.+646    	; 0x34c0 <__fp_pscB>
    323a:	20 f0       	brcs	.+8      	; 0x3244 <__addsf3+0x18>
    323c:	31 f4       	brne	.+12     	; 0x324a <__addsf3+0x1e>
    323e:	9f 3f       	cpi	r25, 0xFF	; 255
    3240:	11 f4       	brne	.+4      	; 0x3246 <__addsf3+0x1a>
    3242:	1e f4       	brtc	.+6      	; 0x324a <__addsf3+0x1e>
    3244:	33 c1       	rjmp	.+614    	; 0x34ac <__fp_nan>
    3246:	0e f4       	brtc	.+2      	; 0x324a <__addsf3+0x1e>
    3248:	e0 95       	com	r30
    324a:	e7 fb       	bst	r30, 7
    324c:	29 c1       	rjmp	.+594    	; 0x34a0 <__fp_inf>

0000324e <__addsf3x>:
    324e:	e9 2f       	mov	r30, r25
    3250:	4f d1       	rcall	.+670    	; 0x34f0 <__fp_split3>
    3252:	80 f3       	brcs	.-32     	; 0x3234 <__addsf3+0x8>
    3254:	ba 17       	cp	r27, r26
    3256:	62 07       	cpc	r22, r18
    3258:	73 07       	cpc	r23, r19
    325a:	84 07       	cpc	r24, r20
    325c:	95 07       	cpc	r25, r21
    325e:	18 f0       	brcs	.+6      	; 0x3266 <__addsf3x+0x18>
    3260:	71 f4       	brne	.+28     	; 0x327e <__addsf3x+0x30>
    3262:	9e f5       	brtc	.+102    	; 0x32ca <__addsf3x+0x7c>
    3264:	67 c1       	rjmp	.+718    	; 0x3534 <__fp_zero>
    3266:	0e f4       	brtc	.+2      	; 0x326a <__addsf3x+0x1c>
    3268:	e0 95       	com	r30
    326a:	0b 2e       	mov	r0, r27
    326c:	ba 2f       	mov	r27, r26
    326e:	a0 2d       	mov	r26, r0
    3270:	0b 01       	movw	r0, r22
    3272:	b9 01       	movw	r22, r18
    3274:	90 01       	movw	r18, r0
    3276:	0c 01       	movw	r0, r24
    3278:	ca 01       	movw	r24, r20
    327a:	a0 01       	movw	r20, r0
    327c:	11 24       	eor	r1, r1
    327e:	ff 27       	eor	r31, r31
    3280:	59 1b       	sub	r21, r25
    3282:	99 f0       	breq	.+38     	; 0x32aa <__addsf3x+0x5c>
    3284:	59 3f       	cpi	r21, 0xF9	; 249
    3286:	50 f4       	brcc	.+20     	; 0x329c <__addsf3x+0x4e>
    3288:	50 3e       	cpi	r21, 0xE0	; 224
    328a:	68 f1       	brcs	.+90     	; 0x32e6 <__addsf3x+0x98>
    328c:	1a 16       	cp	r1, r26
    328e:	f0 40       	sbci	r31, 0x00	; 0
    3290:	a2 2f       	mov	r26, r18
    3292:	23 2f       	mov	r18, r19
    3294:	34 2f       	mov	r19, r20
    3296:	44 27       	eor	r20, r20
    3298:	58 5f       	subi	r21, 0xF8	; 248
    329a:	f3 cf       	rjmp	.-26     	; 0x3282 <__addsf3x+0x34>
    329c:	46 95       	lsr	r20
    329e:	37 95       	ror	r19
    32a0:	27 95       	ror	r18
    32a2:	a7 95       	ror	r26
    32a4:	f0 40       	sbci	r31, 0x00	; 0
    32a6:	53 95       	inc	r21
    32a8:	c9 f7       	brne	.-14     	; 0x329c <__addsf3x+0x4e>
    32aa:	7e f4       	brtc	.+30     	; 0x32ca <__addsf3x+0x7c>
    32ac:	1f 16       	cp	r1, r31
    32ae:	ba 0b       	sbc	r27, r26
    32b0:	62 0b       	sbc	r22, r18
    32b2:	73 0b       	sbc	r23, r19
    32b4:	84 0b       	sbc	r24, r20
    32b6:	ba f0       	brmi	.+46     	; 0x32e6 <__addsf3x+0x98>
    32b8:	91 50       	subi	r25, 0x01	; 1
    32ba:	a1 f0       	breq	.+40     	; 0x32e4 <__addsf3x+0x96>
    32bc:	ff 0f       	add	r31, r31
    32be:	bb 1f       	adc	r27, r27
    32c0:	66 1f       	adc	r22, r22
    32c2:	77 1f       	adc	r23, r23
    32c4:	88 1f       	adc	r24, r24
    32c6:	c2 f7       	brpl	.-16     	; 0x32b8 <__addsf3x+0x6a>
    32c8:	0e c0       	rjmp	.+28     	; 0x32e6 <__addsf3x+0x98>
    32ca:	ba 0f       	add	r27, r26
    32cc:	62 1f       	adc	r22, r18
    32ce:	73 1f       	adc	r23, r19
    32d0:	84 1f       	adc	r24, r20
    32d2:	48 f4       	brcc	.+18     	; 0x32e6 <__addsf3x+0x98>
    32d4:	87 95       	ror	r24
    32d6:	77 95       	ror	r23
    32d8:	67 95       	ror	r22
    32da:	b7 95       	ror	r27
    32dc:	f7 95       	ror	r31
    32de:	9e 3f       	cpi	r25, 0xFE	; 254
    32e0:	08 f0       	brcs	.+2      	; 0x32e4 <__addsf3x+0x96>
    32e2:	b3 cf       	rjmp	.-154    	; 0x324a <__addsf3+0x1e>
    32e4:	93 95       	inc	r25
    32e6:	88 0f       	add	r24, r24
    32e8:	08 f0       	brcs	.+2      	; 0x32ec <__addsf3x+0x9e>
    32ea:	99 27       	eor	r25, r25
    32ec:	ee 0f       	add	r30, r30
    32ee:	97 95       	ror	r25
    32f0:	87 95       	ror	r24
    32f2:	08 95       	ret

000032f4 <__divsf3>:
    32f4:	0c d0       	rcall	.+24     	; 0x330e <__divsf3x>
    32f6:	eb c0       	rjmp	.+470    	; 0x34ce <__fp_round>
    32f8:	e3 d0       	rcall	.+454    	; 0x34c0 <__fp_pscB>
    32fa:	40 f0       	brcs	.+16     	; 0x330c <__divsf3+0x18>
    32fc:	da d0       	rcall	.+436    	; 0x34b2 <__fp_pscA>
    32fe:	30 f0       	brcs	.+12     	; 0x330c <__divsf3+0x18>
    3300:	21 f4       	brne	.+8      	; 0x330a <__divsf3+0x16>
    3302:	5f 3f       	cpi	r21, 0xFF	; 255
    3304:	19 f0       	breq	.+6      	; 0x330c <__divsf3+0x18>
    3306:	cc c0       	rjmp	.+408    	; 0x34a0 <__fp_inf>
    3308:	51 11       	cpse	r21, r1
    330a:	15 c1       	rjmp	.+554    	; 0x3536 <__fp_szero>
    330c:	cf c0       	rjmp	.+414    	; 0x34ac <__fp_nan>

0000330e <__divsf3x>:
    330e:	f0 d0       	rcall	.+480    	; 0x34f0 <__fp_split3>
    3310:	98 f3       	brcs	.-26     	; 0x32f8 <__divsf3+0x4>

00003312 <__divsf3_pse>:
    3312:	99 23       	and	r25, r25
    3314:	c9 f3       	breq	.-14     	; 0x3308 <__divsf3+0x14>
    3316:	55 23       	and	r21, r21
    3318:	b1 f3       	breq	.-20     	; 0x3306 <__divsf3+0x12>
    331a:	95 1b       	sub	r25, r21
    331c:	55 0b       	sbc	r21, r21
    331e:	bb 27       	eor	r27, r27
    3320:	aa 27       	eor	r26, r26
    3322:	62 17       	cp	r22, r18
    3324:	73 07       	cpc	r23, r19
    3326:	84 07       	cpc	r24, r20
    3328:	38 f0       	brcs	.+14     	; 0x3338 <__divsf3_pse+0x26>
    332a:	9f 5f       	subi	r25, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	22 0f       	add	r18, r18
    3330:	33 1f       	adc	r19, r19
    3332:	44 1f       	adc	r20, r20
    3334:	aa 1f       	adc	r26, r26
    3336:	a9 f3       	breq	.-22     	; 0x3322 <__divsf3_pse+0x10>
    3338:	33 d0       	rcall	.+102    	; 0x33a0 <__divsf3_pse+0x8e>
    333a:	0e 2e       	mov	r0, r30
    333c:	3a f0       	brmi	.+14     	; 0x334c <__divsf3_pse+0x3a>
    333e:	e0 e8       	ldi	r30, 0x80	; 128
    3340:	30 d0       	rcall	.+96     	; 0x33a2 <__divsf3_pse+0x90>
    3342:	91 50       	subi	r25, 0x01	; 1
    3344:	50 40       	sbci	r21, 0x00	; 0
    3346:	e6 95       	lsr	r30
    3348:	00 1c       	adc	r0, r0
    334a:	ca f7       	brpl	.-14     	; 0x333e <__divsf3_pse+0x2c>
    334c:	29 d0       	rcall	.+82     	; 0x33a0 <__divsf3_pse+0x8e>
    334e:	fe 2f       	mov	r31, r30
    3350:	27 d0       	rcall	.+78     	; 0x33a0 <__divsf3_pse+0x8e>
    3352:	66 0f       	add	r22, r22
    3354:	77 1f       	adc	r23, r23
    3356:	88 1f       	adc	r24, r24
    3358:	bb 1f       	adc	r27, r27
    335a:	26 17       	cp	r18, r22
    335c:	37 07       	cpc	r19, r23
    335e:	48 07       	cpc	r20, r24
    3360:	ab 07       	cpc	r26, r27
    3362:	b0 e8       	ldi	r27, 0x80	; 128
    3364:	09 f0       	breq	.+2      	; 0x3368 <__divsf3_pse+0x56>
    3366:	bb 0b       	sbc	r27, r27
    3368:	80 2d       	mov	r24, r0
    336a:	bf 01       	movw	r22, r30
    336c:	ff 27       	eor	r31, r31
    336e:	93 58       	subi	r25, 0x83	; 131
    3370:	5f 4f       	sbci	r21, 0xFF	; 255
    3372:	2a f0       	brmi	.+10     	; 0x337e <__divsf3_pse+0x6c>
    3374:	9e 3f       	cpi	r25, 0xFE	; 254
    3376:	51 05       	cpc	r21, r1
    3378:	68 f0       	brcs	.+26     	; 0x3394 <__divsf3_pse+0x82>
    337a:	92 c0       	rjmp	.+292    	; 0x34a0 <__fp_inf>
    337c:	dc c0       	rjmp	.+440    	; 0x3536 <__fp_szero>
    337e:	5f 3f       	cpi	r21, 0xFF	; 255
    3380:	ec f3       	brlt	.-6      	; 0x337c <__divsf3_pse+0x6a>
    3382:	98 3e       	cpi	r25, 0xE8	; 232
    3384:	dc f3       	brlt	.-10     	; 0x337c <__divsf3_pse+0x6a>
    3386:	86 95       	lsr	r24
    3388:	77 95       	ror	r23
    338a:	67 95       	ror	r22
    338c:	b7 95       	ror	r27
    338e:	f7 95       	ror	r31
    3390:	9f 5f       	subi	r25, 0xFF	; 255
    3392:	c9 f7       	brne	.-14     	; 0x3386 <__divsf3_pse+0x74>
    3394:	88 0f       	add	r24, r24
    3396:	91 1d       	adc	r25, r1
    3398:	96 95       	lsr	r25
    339a:	87 95       	ror	r24
    339c:	97 f9       	bld	r25, 7
    339e:	08 95       	ret
    33a0:	e1 e0       	ldi	r30, 0x01	; 1
    33a2:	66 0f       	add	r22, r22
    33a4:	77 1f       	adc	r23, r23
    33a6:	88 1f       	adc	r24, r24
    33a8:	bb 1f       	adc	r27, r27
    33aa:	62 17       	cp	r22, r18
    33ac:	73 07       	cpc	r23, r19
    33ae:	84 07       	cpc	r24, r20
    33b0:	ba 07       	cpc	r27, r26
    33b2:	20 f0       	brcs	.+8      	; 0x33bc <__divsf3_pse+0xaa>
    33b4:	62 1b       	sub	r22, r18
    33b6:	73 0b       	sbc	r23, r19
    33b8:	84 0b       	sbc	r24, r20
    33ba:	ba 0b       	sbc	r27, r26
    33bc:	ee 1f       	adc	r30, r30
    33be:	88 f7       	brcc	.-30     	; 0x33a2 <__divsf3_pse+0x90>
    33c0:	e0 95       	com	r30
    33c2:	08 95       	ret

000033c4 <__fixsfsi>:
    33c4:	04 d0       	rcall	.+8      	; 0x33ce <__fixunssfsi>
    33c6:	68 94       	set
    33c8:	b1 11       	cpse	r27, r1
    33ca:	b5 c0       	rjmp	.+362    	; 0x3536 <__fp_szero>
    33cc:	08 95       	ret

000033ce <__fixunssfsi>:
    33ce:	98 d0       	rcall	.+304    	; 0x3500 <__fp_splitA>
    33d0:	88 f0       	brcs	.+34     	; 0x33f4 <__fixunssfsi+0x26>
    33d2:	9f 57       	subi	r25, 0x7F	; 127
    33d4:	90 f0       	brcs	.+36     	; 0x33fa <__fixunssfsi+0x2c>
    33d6:	b9 2f       	mov	r27, r25
    33d8:	99 27       	eor	r25, r25
    33da:	b7 51       	subi	r27, 0x17	; 23
    33dc:	a0 f0       	brcs	.+40     	; 0x3406 <__fixunssfsi+0x38>
    33de:	d1 f0       	breq	.+52     	; 0x3414 <__fixunssfsi+0x46>
    33e0:	66 0f       	add	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	88 1f       	adc	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	1a f0       	brmi	.+6      	; 0x33f0 <__fixunssfsi+0x22>
    33ea:	ba 95       	dec	r27
    33ec:	c9 f7       	brne	.-14     	; 0x33e0 <__fixunssfsi+0x12>
    33ee:	12 c0       	rjmp	.+36     	; 0x3414 <__fixunssfsi+0x46>
    33f0:	b1 30       	cpi	r27, 0x01	; 1
    33f2:	81 f0       	breq	.+32     	; 0x3414 <__fixunssfsi+0x46>
    33f4:	9f d0       	rcall	.+318    	; 0x3534 <__fp_zero>
    33f6:	b1 e0       	ldi	r27, 0x01	; 1
    33f8:	08 95       	ret
    33fa:	9c c0       	rjmp	.+312    	; 0x3534 <__fp_zero>
    33fc:	67 2f       	mov	r22, r23
    33fe:	78 2f       	mov	r23, r24
    3400:	88 27       	eor	r24, r24
    3402:	b8 5f       	subi	r27, 0xF8	; 248
    3404:	39 f0       	breq	.+14     	; 0x3414 <__fixunssfsi+0x46>
    3406:	b9 3f       	cpi	r27, 0xF9	; 249
    3408:	cc f3       	brlt	.-14     	; 0x33fc <__fixunssfsi+0x2e>
    340a:	86 95       	lsr	r24
    340c:	77 95       	ror	r23
    340e:	67 95       	ror	r22
    3410:	b3 95       	inc	r27
    3412:	d9 f7       	brne	.-10     	; 0x340a <__fixunssfsi+0x3c>
    3414:	3e f4       	brtc	.+14     	; 0x3424 <__fixunssfsi+0x56>
    3416:	90 95       	com	r25
    3418:	80 95       	com	r24
    341a:	70 95       	com	r23
    341c:	61 95       	neg	r22
    341e:	7f 4f       	sbci	r23, 0xFF	; 255
    3420:	8f 4f       	sbci	r24, 0xFF	; 255
    3422:	9f 4f       	sbci	r25, 0xFF	; 255
    3424:	08 95       	ret

00003426 <__floatunsisf>:
    3426:	e8 94       	clt
    3428:	09 c0       	rjmp	.+18     	; 0x343c <__floatsisf+0x12>

0000342a <__floatsisf>:
    342a:	97 fb       	bst	r25, 7
    342c:	3e f4       	brtc	.+14     	; 0x343c <__floatsisf+0x12>
    342e:	90 95       	com	r25
    3430:	80 95       	com	r24
    3432:	70 95       	com	r23
    3434:	61 95       	neg	r22
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	8f 4f       	sbci	r24, 0xFF	; 255
    343a:	9f 4f       	sbci	r25, 0xFF	; 255
    343c:	99 23       	and	r25, r25
    343e:	a9 f0       	breq	.+42     	; 0x346a <__floatsisf+0x40>
    3440:	f9 2f       	mov	r31, r25
    3442:	96 e9       	ldi	r25, 0x96	; 150
    3444:	bb 27       	eor	r27, r27
    3446:	93 95       	inc	r25
    3448:	f6 95       	lsr	r31
    344a:	87 95       	ror	r24
    344c:	77 95       	ror	r23
    344e:	67 95       	ror	r22
    3450:	b7 95       	ror	r27
    3452:	f1 11       	cpse	r31, r1
    3454:	f8 cf       	rjmp	.-16     	; 0x3446 <__floatsisf+0x1c>
    3456:	fa f4       	brpl	.+62     	; 0x3496 <__floatsisf+0x6c>
    3458:	bb 0f       	add	r27, r27
    345a:	11 f4       	brne	.+4      	; 0x3460 <__floatsisf+0x36>
    345c:	60 ff       	sbrs	r22, 0
    345e:	1b c0       	rjmp	.+54     	; 0x3496 <__floatsisf+0x6c>
    3460:	6f 5f       	subi	r22, 0xFF	; 255
    3462:	7f 4f       	sbci	r23, 0xFF	; 255
    3464:	8f 4f       	sbci	r24, 0xFF	; 255
    3466:	9f 4f       	sbci	r25, 0xFF	; 255
    3468:	16 c0       	rjmp	.+44     	; 0x3496 <__floatsisf+0x6c>
    346a:	88 23       	and	r24, r24
    346c:	11 f0       	breq	.+4      	; 0x3472 <__floatsisf+0x48>
    346e:	96 e9       	ldi	r25, 0x96	; 150
    3470:	11 c0       	rjmp	.+34     	; 0x3494 <__floatsisf+0x6a>
    3472:	77 23       	and	r23, r23
    3474:	21 f0       	breq	.+8      	; 0x347e <__floatsisf+0x54>
    3476:	9e e8       	ldi	r25, 0x8E	; 142
    3478:	87 2f       	mov	r24, r23
    347a:	76 2f       	mov	r23, r22
    347c:	05 c0       	rjmp	.+10     	; 0x3488 <__floatsisf+0x5e>
    347e:	66 23       	and	r22, r22
    3480:	71 f0       	breq	.+28     	; 0x349e <__floatsisf+0x74>
    3482:	96 e8       	ldi	r25, 0x86	; 134
    3484:	86 2f       	mov	r24, r22
    3486:	70 e0       	ldi	r23, 0x00	; 0
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	2a f0       	brmi	.+10     	; 0x3496 <__floatsisf+0x6c>
    348c:	9a 95       	dec	r25
    348e:	66 0f       	add	r22, r22
    3490:	77 1f       	adc	r23, r23
    3492:	88 1f       	adc	r24, r24
    3494:	da f7       	brpl	.-10     	; 0x348c <__floatsisf+0x62>
    3496:	88 0f       	add	r24, r24
    3498:	96 95       	lsr	r25
    349a:	87 95       	ror	r24
    349c:	97 f9       	bld	r25, 7
    349e:	08 95       	ret

000034a0 <__fp_inf>:
    34a0:	97 f9       	bld	r25, 7
    34a2:	9f 67       	ori	r25, 0x7F	; 127
    34a4:	80 e8       	ldi	r24, 0x80	; 128
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	08 95       	ret

000034ac <__fp_nan>:
    34ac:	9f ef       	ldi	r25, 0xFF	; 255
    34ae:	80 ec       	ldi	r24, 0xC0	; 192
    34b0:	08 95       	ret

000034b2 <__fp_pscA>:
    34b2:	00 24       	eor	r0, r0
    34b4:	0a 94       	dec	r0
    34b6:	16 16       	cp	r1, r22
    34b8:	17 06       	cpc	r1, r23
    34ba:	18 06       	cpc	r1, r24
    34bc:	09 06       	cpc	r0, r25
    34be:	08 95       	ret

000034c0 <__fp_pscB>:
    34c0:	00 24       	eor	r0, r0
    34c2:	0a 94       	dec	r0
    34c4:	12 16       	cp	r1, r18
    34c6:	13 06       	cpc	r1, r19
    34c8:	14 06       	cpc	r1, r20
    34ca:	05 06       	cpc	r0, r21
    34cc:	08 95       	ret

000034ce <__fp_round>:
    34ce:	09 2e       	mov	r0, r25
    34d0:	03 94       	inc	r0
    34d2:	00 0c       	add	r0, r0
    34d4:	11 f4       	brne	.+4      	; 0x34da <__fp_round+0xc>
    34d6:	88 23       	and	r24, r24
    34d8:	52 f0       	brmi	.+20     	; 0x34ee <__fp_round+0x20>
    34da:	bb 0f       	add	r27, r27
    34dc:	40 f4       	brcc	.+16     	; 0x34ee <__fp_round+0x20>
    34de:	bf 2b       	or	r27, r31
    34e0:	11 f4       	brne	.+4      	; 0x34e6 <__fp_round+0x18>
    34e2:	60 ff       	sbrs	r22, 0
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <__fp_round+0x20>
    34e6:	6f 5f       	subi	r22, 0xFF	; 255
    34e8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ea:	8f 4f       	sbci	r24, 0xFF	; 255
    34ec:	9f 4f       	sbci	r25, 0xFF	; 255
    34ee:	08 95       	ret

000034f0 <__fp_split3>:
    34f0:	57 fd       	sbrc	r21, 7
    34f2:	90 58       	subi	r25, 0x80	; 128
    34f4:	44 0f       	add	r20, r20
    34f6:	55 1f       	adc	r21, r21
    34f8:	59 f0       	breq	.+22     	; 0x3510 <__fp_splitA+0x10>
    34fa:	5f 3f       	cpi	r21, 0xFF	; 255
    34fc:	71 f0       	breq	.+28     	; 0x351a <__fp_splitA+0x1a>
    34fe:	47 95       	ror	r20

00003500 <__fp_splitA>:
    3500:	88 0f       	add	r24, r24
    3502:	97 fb       	bst	r25, 7
    3504:	99 1f       	adc	r25, r25
    3506:	61 f0       	breq	.+24     	; 0x3520 <__fp_splitA+0x20>
    3508:	9f 3f       	cpi	r25, 0xFF	; 255
    350a:	79 f0       	breq	.+30     	; 0x352a <__fp_splitA+0x2a>
    350c:	87 95       	ror	r24
    350e:	08 95       	ret
    3510:	12 16       	cp	r1, r18
    3512:	13 06       	cpc	r1, r19
    3514:	14 06       	cpc	r1, r20
    3516:	55 1f       	adc	r21, r21
    3518:	f2 cf       	rjmp	.-28     	; 0x34fe <__fp_split3+0xe>
    351a:	46 95       	lsr	r20
    351c:	f1 df       	rcall	.-30     	; 0x3500 <__fp_splitA>
    351e:	08 c0       	rjmp	.+16     	; 0x3530 <__fp_splitA+0x30>
    3520:	16 16       	cp	r1, r22
    3522:	17 06       	cpc	r1, r23
    3524:	18 06       	cpc	r1, r24
    3526:	99 1f       	adc	r25, r25
    3528:	f1 cf       	rjmp	.-30     	; 0x350c <__fp_splitA+0xc>
    352a:	86 95       	lsr	r24
    352c:	71 05       	cpc	r23, r1
    352e:	61 05       	cpc	r22, r1
    3530:	08 94       	sec
    3532:	08 95       	ret

00003534 <__fp_zero>:
    3534:	e8 94       	clt

00003536 <__fp_szero>:
    3536:	bb 27       	eor	r27, r27
    3538:	66 27       	eor	r22, r22
    353a:	77 27       	eor	r23, r23
    353c:	cb 01       	movw	r24, r22
    353e:	97 f9       	bld	r25, 7
    3540:	08 95       	ret

00003542 <__mulsf3>:
    3542:	0b d0       	rcall	.+22     	; 0x355a <__mulsf3x>
    3544:	c4 cf       	rjmp	.-120    	; 0x34ce <__fp_round>
    3546:	b5 df       	rcall	.-150    	; 0x34b2 <__fp_pscA>
    3548:	28 f0       	brcs	.+10     	; 0x3554 <__mulsf3+0x12>
    354a:	ba df       	rcall	.-140    	; 0x34c0 <__fp_pscB>
    354c:	18 f0       	brcs	.+6      	; 0x3554 <__mulsf3+0x12>
    354e:	95 23       	and	r25, r21
    3550:	09 f0       	breq	.+2      	; 0x3554 <__mulsf3+0x12>
    3552:	a6 cf       	rjmp	.-180    	; 0x34a0 <__fp_inf>
    3554:	ab cf       	rjmp	.-170    	; 0x34ac <__fp_nan>
    3556:	11 24       	eor	r1, r1
    3558:	ee cf       	rjmp	.-36     	; 0x3536 <__fp_szero>

0000355a <__mulsf3x>:
    355a:	ca df       	rcall	.-108    	; 0x34f0 <__fp_split3>
    355c:	a0 f3       	brcs	.-24     	; 0x3546 <__mulsf3+0x4>

0000355e <__mulsf3_pse>:
    355e:	95 9f       	mul	r25, r21
    3560:	d1 f3       	breq	.-12     	; 0x3556 <__mulsf3+0x14>
    3562:	95 0f       	add	r25, r21
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	55 1f       	adc	r21, r21
    3568:	62 9f       	mul	r22, r18
    356a:	f0 01       	movw	r30, r0
    356c:	72 9f       	mul	r23, r18
    356e:	bb 27       	eor	r27, r27
    3570:	f0 0d       	add	r31, r0
    3572:	b1 1d       	adc	r27, r1
    3574:	63 9f       	mul	r22, r19
    3576:	aa 27       	eor	r26, r26
    3578:	f0 0d       	add	r31, r0
    357a:	b1 1d       	adc	r27, r1
    357c:	aa 1f       	adc	r26, r26
    357e:	64 9f       	mul	r22, r20
    3580:	66 27       	eor	r22, r22
    3582:	b0 0d       	add	r27, r0
    3584:	a1 1d       	adc	r26, r1
    3586:	66 1f       	adc	r22, r22
    3588:	82 9f       	mul	r24, r18
    358a:	22 27       	eor	r18, r18
    358c:	b0 0d       	add	r27, r0
    358e:	a1 1d       	adc	r26, r1
    3590:	62 1f       	adc	r22, r18
    3592:	73 9f       	mul	r23, r19
    3594:	b0 0d       	add	r27, r0
    3596:	a1 1d       	adc	r26, r1
    3598:	62 1f       	adc	r22, r18
    359a:	83 9f       	mul	r24, r19
    359c:	a0 0d       	add	r26, r0
    359e:	61 1d       	adc	r22, r1
    35a0:	22 1f       	adc	r18, r18
    35a2:	74 9f       	mul	r23, r20
    35a4:	33 27       	eor	r19, r19
    35a6:	a0 0d       	add	r26, r0
    35a8:	61 1d       	adc	r22, r1
    35aa:	23 1f       	adc	r18, r19
    35ac:	84 9f       	mul	r24, r20
    35ae:	60 0d       	add	r22, r0
    35b0:	21 1d       	adc	r18, r1
    35b2:	82 2f       	mov	r24, r18
    35b4:	76 2f       	mov	r23, r22
    35b6:	6a 2f       	mov	r22, r26
    35b8:	11 24       	eor	r1, r1
    35ba:	9f 57       	subi	r25, 0x7F	; 127
    35bc:	50 40       	sbci	r21, 0x00	; 0
    35be:	8a f0       	brmi	.+34     	; 0x35e2 <__mulsf3_pse+0x84>
    35c0:	e1 f0       	breq	.+56     	; 0x35fa <__mulsf3_pse+0x9c>
    35c2:	88 23       	and	r24, r24
    35c4:	4a f0       	brmi	.+18     	; 0x35d8 <__mulsf3_pse+0x7a>
    35c6:	ee 0f       	add	r30, r30
    35c8:	ff 1f       	adc	r31, r31
    35ca:	bb 1f       	adc	r27, r27
    35cc:	66 1f       	adc	r22, r22
    35ce:	77 1f       	adc	r23, r23
    35d0:	88 1f       	adc	r24, r24
    35d2:	91 50       	subi	r25, 0x01	; 1
    35d4:	50 40       	sbci	r21, 0x00	; 0
    35d6:	a9 f7       	brne	.-22     	; 0x35c2 <__mulsf3_pse+0x64>
    35d8:	9e 3f       	cpi	r25, 0xFE	; 254
    35da:	51 05       	cpc	r21, r1
    35dc:	70 f0       	brcs	.+28     	; 0x35fa <__mulsf3_pse+0x9c>
    35de:	60 cf       	rjmp	.-320    	; 0x34a0 <__fp_inf>
    35e0:	aa cf       	rjmp	.-172    	; 0x3536 <__fp_szero>
    35e2:	5f 3f       	cpi	r21, 0xFF	; 255
    35e4:	ec f3       	brlt	.-6      	; 0x35e0 <__mulsf3_pse+0x82>
    35e6:	98 3e       	cpi	r25, 0xE8	; 232
    35e8:	dc f3       	brlt	.-10     	; 0x35e0 <__mulsf3_pse+0x82>
    35ea:	86 95       	lsr	r24
    35ec:	77 95       	ror	r23
    35ee:	67 95       	ror	r22
    35f0:	b7 95       	ror	r27
    35f2:	f7 95       	ror	r31
    35f4:	e7 95       	ror	r30
    35f6:	9f 5f       	subi	r25, 0xFF	; 255
    35f8:	c1 f7       	brne	.-16     	; 0x35ea <__mulsf3_pse+0x8c>
    35fa:	fe 2b       	or	r31, r30
    35fc:	88 0f       	add	r24, r24
    35fe:	91 1d       	adc	r25, r1
    3600:	96 95       	lsr	r25
    3602:	87 95       	ror	r24
    3604:	97 f9       	bld	r25, 7
    3606:	08 95       	ret

00003608 <_spiCallBack>:
    3608:	81 b3       	in	r24, 0x11	; 17
    360a:	8f 60       	ori	r24, 0x0F	; 15
    360c:	81 bb       	out	0x11, r24	; 17
    360e:	28 98       	cbi	0x05, 0	; 5
    3610:	28 9a       	sbi	0x05, 0	; 5
    3612:	21 b3       	in	r18, 0x11	; 17
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	00 90 fb 0e 	lds	r0, 0x0EFB	; 0x800efb <_digitNo>
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <_spiCallBack+0x1a>
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	0a 94       	dec	r0
    3624:	e2 f7       	brpl	.-8      	; 0x361e <_spiCallBack+0x16>
    3626:	80 95       	com	r24
    3628:	82 23       	and	r24, r18
    362a:	81 bb       	out	0x11, r24	; 17
    362c:	e0 91 cb 0e 	lds	r30, 0x0ECB	; 0x800ecb <_displayDoneCallBack>
    3630:	f0 91 cc 0e 	lds	r31, 0x0ECC	; 0x800ecc <_displayDoneCallBack+0x1>
    3634:	30 97       	sbiw	r30, 0x00	; 0
    3636:	09 f0       	breq	.+2      	; 0x363a <_spiCallBack+0x32>
    3638:	19 95       	eicall
    363a:	08 95       	ret

0000363c <display_7seg_displayErr>:
    363c:	9f b7       	in	r25, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	e7 ef       	ldi	r30, 0xF7	; 247
    3642:	fe e0       	ldi	r31, 0x0E	; 14
    3644:	10 82       	st	Z, r1
    3646:	8e e9       	ldi	r24, 0x9E	; 158
    3648:	81 83       	std	Z+1, r24	; 0x01
    364a:	8a e0       	ldi	r24, 0x0A	; 10
    364c:	82 83       	std	Z+2, r24	; 0x02
    364e:	83 83       	std	Z+3, r24	; 0x03
    3650:	9f bf       	out	0x3f, r25	; 63
    3652:	08 95       	ret

00003654 <display_7seg_display>:
    3654:	bf 92       	push	r11
    3656:	cf 92       	push	r12
    3658:	df 92       	push	r13
    365a:	ef 92       	push	r14
    365c:	ff 92       	push	r15
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	6b 01       	movw	r12, r22
    3668:	7c 01       	movw	r14, r24
    366a:	b4 2e       	mov	r11, r20
    366c:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <_maxHexSegmentindex>
    3670:	83 e0       	ldi	r24, 0x03	; 3
    3672:	84 17       	cp	r24, r20
    3674:	78 f1       	brcs	.+94     	; 0x36d4 <display_7seg_display+0x80>
    3676:	64 2f       	mov	r22, r20
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	d3 de       	rcall	.-602    	; 0x3426 <__floatunsisf>
    3680:	9b 01       	movw	r18, r22
    3682:	ac 01       	movw	r20, r24
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	80 e2       	ldi	r24, 0x20	; 32
    368a:	91 e4       	ldi	r25, 0x41	; 65
    368c:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <pow>
    3690:	a7 01       	movw	r20, r14
    3692:	96 01       	movw	r18, r12
    3694:	56 df       	rcall	.-340    	; 0x3542 <__mulsf3>
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	5f e3       	ldi	r21, 0x3F	; 63
    369e:	c6 dd       	rcall	.-1140   	; 0x322c <__addsf3>
    36a0:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <floor>
    36a4:	8f de       	rcall	.-738    	; 0x33c4 <__fixsfsi>
    36a6:	ab 01       	movw	r20, r22
    36a8:	77 23       	and	r23, r23
    36aa:	64 f4       	brge	.+24     	; 0x36c4 <display_7seg_display+0x70>
    36ac:	44 27       	eor	r20, r20
    36ae:	55 27       	eor	r21, r21
    36b0:	46 1b       	sub	r20, r22
    36b2:	57 0b       	sbc	r21, r23
    36b4:	21 e0       	ldi	r18, 0x01	; 1
    36b6:	48 3e       	cpi	r20, 0xE8	; 232
    36b8:	83 e0       	ldi	r24, 0x03	; 3
    36ba:	58 07       	cpc	r21, r24
    36bc:	0c f4       	brge	.+2      	; 0x36c0 <display_7seg_display+0x6c>
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	11 e0       	ldi	r17, 0x01	; 1
    36c2:	0c c0       	rjmp	.+24     	; 0x36dc <display_7seg_display+0x88>
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    36c6:	40 31       	cpi	r20, 0x10	; 16
    36c8:	87 e2       	ldi	r24, 0x27	; 39
    36ca:	58 07       	cpc	r21, r24
    36cc:	0c f4       	brge	.+2      	; 0x36d0 <display_7seg_display+0x7c>
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	10 e0       	ldi	r17, 0x00	; 0
    36d2:	04 c0       	rjmp	.+8      	; 0x36dc <display_7seg_display+0x88>
    36d4:	40 e0       	ldi	r20, 0x00	; 0
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	21 e0       	ldi	r18, 0x01	; 1
    36da:	10 e0       	ldi	r17, 0x00	; 0
    36dc:	0f b7       	in	r16, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	22 23       	and	r18, r18
    36e2:	11 f0       	breq	.+4      	; 0x36e8 <display_7seg_display+0x94>
    36e4:	ab df       	rcall	.-170    	; 0x363c <display_7seg_displayErr>
    36e6:	51 c0       	rjmp	.+162    	; 0x378a <display_7seg_display+0x136>
    36e8:	cb ef       	ldi	r28, 0xFB	; 251
    36ea:	de e0       	ldi	r29, 0x0E	; 14
    36ec:	0f 2e       	mov	r0, r31
    36ee:	f7 ef       	ldi	r31, 0xF7	; 247
    36f0:	cf 2e       	mov	r12, r31
    36f2:	fe e0       	ldi	r31, 0x0E	; 14
    36f4:	df 2e       	mov	r13, r31
    36f6:	f0 2d       	mov	r31, r0
    36f8:	0f 2e       	mov	r0, r31
    36fa:	fa e0       	ldi	r31, 0x0A	; 10
    36fc:	ef 2e       	mov	r14, r31
    36fe:	f1 2c       	mov	r15, r1
    3700:	f0 2d       	mov	r31, r0
    3702:	ca 01       	movw	r24, r20
    3704:	b7 01       	movw	r22, r14
    3706:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__divmodhi4>
    370a:	fc 01       	movw	r30, r24
    370c:	ec 50       	subi	r30, 0x0C	; 12
    370e:	fc 4f       	sbci	r31, 0xFC	; 252
    3710:	80 81       	ld	r24, Z
    3712:	8a 93       	st	-Y, r24
    3714:	46 2f       	mov	r20, r22
    3716:	57 2f       	mov	r21, r23
    3718:	cc 15       	cp	r28, r12
    371a:	dd 05       	cpc	r29, r13
    371c:	91 f7       	brne	.-28     	; 0x3702 <display_7seg_display+0xae>
    371e:	43 e0       	ldi	r20, 0x03	; 3
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	4b 19       	sub	r20, r11
    3724:	51 09       	sbc	r21, r1
    3726:	14 16       	cp	r1, r20
    3728:	15 06       	cpc	r1, r21
    372a:	f4 f4       	brge	.+60     	; 0x3768 <display_7seg_display+0x114>
    372c:	80 91 f7 0e 	lds	r24, 0x0EF7	; 0x800ef7 <_digitSegments>
    3730:	8c 3f       	cpi	r24, 0xFC	; 252
    3732:	49 f0       	breq	.+18     	; 0x3746 <display_7seg_display+0xf2>
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	19 c0       	rjmp	.+50     	; 0x376a <display_7seg_display+0x116>
    3738:	fc 01       	movw	r30, r24
    373a:	e9 50       	subi	r30, 0x09	; 9
    373c:	f1 4f       	sbci	r31, 0xF1	; 241
    373e:	30 81       	ld	r19, Z
    3740:	3c 3f       	cpi	r19, 0xFC	; 252
    3742:	21 f0       	breq	.+8      	; 0x374c <display_7seg_display+0xf8>
    3744:	12 c0       	rjmp	.+36     	; 0x376a <display_7seg_display+0x116>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	fc 01       	movw	r30, r24
    374e:	e9 50       	subi	r30, 0x09	; 9
    3750:	f1 4f       	sbci	r31, 0xF1	; 241
    3752:	10 82       	st	Z, r1
    3754:	62 2f       	mov	r22, r18
    3756:	2f 5f       	subi	r18, 0xFF	; 255
    3758:	82 2f       	mov	r24, r18
    375a:	02 2e       	mov	r0, r18
    375c:	00 0c       	add	r0, r0
    375e:	99 0b       	sbc	r25, r25
    3760:	84 17       	cp	r24, r20
    3762:	95 07       	cpc	r25, r21
    3764:	4c f3       	brlt	.-46     	; 0x3738 <display_7seg_display+0xe4>
    3766:	01 c0       	rjmp	.+2      	; 0x376a <display_7seg_display+0x116>
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	11 23       	and	r17, r17
    376c:	31 f0       	breq	.+12     	; 0x377a <display_7seg_display+0x126>
    376e:	e6 2f       	mov	r30, r22
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	e9 50       	subi	r30, 0x09	; 9
    3774:	f1 4f       	sbci	r31, 0xF1	; 241
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	80 83       	st	Z, r24
    377a:	bb 20       	and	r11, r11
    377c:	31 f0       	breq	.+12     	; 0x378a <display_7seg_display+0x136>
    377e:	fa 01       	movw	r30, r20
    3780:	e9 50       	subi	r30, 0x09	; 9
    3782:	f1 4f       	sbci	r31, 0xF1	; 241
    3784:	80 81       	ld	r24, Z
    3786:	81 60       	ori	r24, 0x01	; 1
    3788:	80 83       	st	Z, r24
    378a:	0f bf       	out	0x3f, r16	; 63
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	ef 90       	pop	r14
    3798:	df 90       	pop	r13
    379a:	cf 90       	pop	r12
    379c:	bf 90       	pop	r11
    379e:	08 95       	ret

000037a0 <display_7seg_powerUp>:
    37a0:	85 b5       	in	r24, 0x25	; 37
    37a2:	85 60       	ori	r24, 0x05	; 5
    37a4:	85 bd       	out	0x25, r24	; 37
    37a6:	08 95       	ret

000037a8 <display_7seg_powerDown>:
    37a8:	85 b5       	in	r24, 0x25	; 37
    37aa:	88 7f       	andi	r24, 0xF8	; 248
    37ac:	85 bd       	out	0x25, r24	; 37
    37ae:	81 b3       	in	r24, 0x11	; 17
    37b0:	8f 60       	ori	r24, 0x0F	; 15
    37b2:	81 bb       	out	0x11, r24	; 17
    37b4:	08 95       	ret

000037b6 <display_7seg_initialise>:
    37b6:	8f 92       	push	r8
    37b8:	af 92       	push	r10
    37ba:	cf 92       	push	r12
    37bc:	ef 92       	push	r14
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	ec 01       	movw	r28, r24
    37c8:	80 b3       	in	r24, 0x10	; 16
    37ca:	8f 60       	ori	r24, 0x0F	; 15
    37cc:	80 bb       	out	0x10, r24	; 16
    37ce:	81 b3       	in	r24, 0x11	; 17
    37d0:	8f 60       	ori	r24, 0x0F	; 15
    37d2:	81 bb       	out	0x11, r24	; 17
    37d4:	20 9a       	sbi	0x04, 0	; 4
    37d6:	84 e0       	ldi	r24, 0x04	; 4
    37d8:	9b e1       	ldi	r25, 0x1B	; 27
    37da:	9f 93       	push	r25
    37dc:	8f 93       	push	r24
    37de:	81 2c       	mov	r8, r1
    37e0:	a1 2c       	mov	r10, r1
    37e2:	c1 2c       	mov	r12, r1
    37e4:	e1 2c       	mov	r14, r1
    37e6:	00 e0       	ldi	r16, 0x00	; 0
    37e8:	10 e0       	ldi	r17, 0x00	; 0
    37ea:	20 e2       	ldi	r18, 0x20	; 32
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	63 e0       	ldi	r22, 0x03	; 3
    37f0:	80 e1       	ldi	r24, 0x10	; 16
    37f2:	f8 d5       	rcall	.+3056   	; 0x43e4 <spi_create>
    37f4:	90 93 fd 0e 	sts	0x0EFD, r25	; 0x800efd <_spi+0x1>
    37f8:	80 93 fc 0e 	sts	0x0EFC, r24	; 0x800efc <_spi>
    37fc:	89 e1       	ldi	r24, 0x19	; 25
    37fe:	87 bd       	out	0x27, r24	; 39
    3800:	84 b5       	in	r24, 0x24	; 36
    3802:	82 60       	ori	r24, 0x02	; 2
    3804:	84 bd       	out	0x24, r24	; 36
    3806:	ee e6       	ldi	r30, 0x6E	; 110
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	82 60       	ori	r24, 0x02	; 2
    380e:	80 83       	st	Z, r24
    3810:	cb df       	rcall	.-106    	; 0x37a8 <display_7seg_powerDown>
    3812:	d0 93 cc 0e 	sts	0x0ECC, r29	; 0x800ecc <_displayDoneCallBack+0x1>
    3816:	c0 93 cb 0e 	sts	0x0ECB, r28	; 0x800ecb <_displayDoneCallBack>
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	ef 90       	pop	r14
    3828:	cf 90       	pop	r12
    382a:	af 90       	pop	r10
    382c:	8f 90       	pop	r8
    382e:	08 95       	ret

00003830 <__vector_21>:
    3830:	1f 92       	push	r1
    3832:	0f 92       	push	r0
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	0f 92       	push	r0
    3838:	11 24       	eor	r1, r1
    383a:	0b b6       	in	r0, 0x3b	; 59
    383c:	0f 92       	push	r0
    383e:	2f 93       	push	r18
    3840:	3f 93       	push	r19
    3842:	4f 93       	push	r20
    3844:	5f 93       	push	r21
    3846:	6f 93       	push	r22
    3848:	7f 93       	push	r23
    384a:	8f 93       	push	r24
    384c:	9f 93       	push	r25
    384e:	af 93       	push	r26
    3850:	bf 93       	push	r27
    3852:	ef 93       	push	r30
    3854:	ff 93       	push	r31
    3856:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <_maxHexSegmentindex>
    385a:	88 23       	and	r24, r24
    385c:	69 f1       	breq	.+90     	; 0x38b8 <__vector_21+0x88>
    385e:	20 91 cf 0e 	lds	r18, 0x0ECF	; 0x800ecf <_intCounter>
    3862:	30 91 d0 0e 	lds	r19, 0x0ED0	; 0x800ed0 <_intCounter+0x1>
    3866:	25 3f       	cpi	r18, 0xF5	; 245
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	39 07       	cpc	r19, r25
    386c:	38 f4       	brcc	.+14     	; 0x387c <__vector_21+0x4c>
    386e:	2f 5f       	subi	r18, 0xFF	; 255
    3870:	3f 4f       	sbci	r19, 0xFF	; 255
    3872:	30 93 d0 0e 	sts	0x0ED0, r19	; 0x800ed0 <_intCounter+0x1>
    3876:	20 93 cf 0e 	sts	0x0ECF, r18	; 0x800ecf <_intCounter>
    387a:	1e c0       	rjmp	.+60     	; 0x38b8 <__vector_21+0x88>
    387c:	10 92 d0 0e 	sts	0x0ED0, r1	; 0x800ed0 <_intCounter+0x1>
    3880:	10 92 cf 0e 	sts	0x0ECF, r1	; 0x800ecf <_intCounter>
    3884:	e0 91 cd 0e 	lds	r30, 0x0ECD	; 0x800ecd <_scrollIndex>
    3888:	2e 2f       	mov	r18, r30
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	04 97       	sbiw	r24, 0x04	; 4
    3890:	28 17       	cp	r18, r24
    3892:	39 07       	cpc	r19, r25
    3894:	14 f4       	brge	.+4      	; 0x389a <__vector_21+0x6a>
    3896:	ef 5f       	subi	r30, 0xFF	; 255
    3898:	01 c0       	rjmp	.+2      	; 0x389c <__vector_21+0x6c>
    389a:	e0 e0       	ldi	r30, 0x00	; 0
    389c:	e0 93 cd 0e 	sts	0x0ECD, r30	; 0x800ecd <_scrollIndex>
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	ef 52       	subi	r30, 0x2F	; 47
    38a4:	f1 4f       	sbci	r31, 0xF1	; 241
    38a6:	a7 ef       	ldi	r26, 0xF7	; 247
    38a8:	be e0       	ldi	r27, 0x0E	; 14
    38aa:	2b ef       	ldi	r18, 0xFB	; 251
    38ac:	3e e0       	ldi	r19, 0x0E	; 14
    38ae:	81 91       	ld	r24, Z+
    38b0:	8d 93       	st	X+, r24
    38b2:	a2 17       	cp	r26, r18
    38b4:	b3 07       	cpc	r27, r19
    38b6:	d9 f7       	brne	.-10     	; 0x38ae <__vector_21+0x7e>
    38b8:	80 91 fb 0e 	lds	r24, 0x0EFB	; 0x800efb <_digitNo>
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	01 96       	adiw	r24, 0x01	; 1
    38c0:	83 70       	andi	r24, 0x03	; 3
    38c2:	90 78       	andi	r25, 0x80	; 128
    38c4:	99 23       	and	r25, r25
    38c6:	24 f4       	brge	.+8      	; 0x38d0 <__vector_21+0xa0>
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	8c 6f       	ori	r24, 0xFC	; 252
    38cc:	9f 6f       	ori	r25, 0xFF	; 255
    38ce:	01 96       	adiw	r24, 0x01	; 1
    38d0:	80 93 fb 0e 	sts	0x0EFB, r24	; 0x800efb <_digitNo>
    38d4:	99 27       	eor	r25, r25
    38d6:	fc 01       	movw	r30, r24
    38d8:	e9 50       	subi	r30, 0x09	; 9
    38da:	f1 4f       	sbci	r31, 0xF1	; 241
    38dc:	60 81       	ld	r22, Z
    38de:	60 95       	com	r22
    38e0:	80 91 fc 0e 	lds	r24, 0x0EFC	; 0x800efc <_spi>
    38e4:	90 91 fd 0e 	lds	r25, 0x0EFD	; 0x800efd <_spi+0x1>
    38e8:	4f d6       	rcall	.+3230   	; 0x4588 <spi_sendByte>
    38ea:	ff 91       	pop	r31
    38ec:	ef 91       	pop	r30
    38ee:	bf 91       	pop	r27
    38f0:	af 91       	pop	r26
    38f2:	9f 91       	pop	r25
    38f4:	8f 91       	pop	r24
    38f6:	7f 91       	pop	r23
    38f8:	6f 91       	pop	r22
    38fa:	5f 91       	pop	r21
    38fc:	4f 91       	pop	r20
    38fe:	3f 91       	pop	r19
    3900:	2f 91       	pop	r18
    3902:	0f 90       	pop	r0
    3904:	0b be       	out	0x3b, r0	; 59
    3906:	0f 90       	pop	r0
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	0f 90       	pop	r0
    390c:	1f 90       	pop	r1
    390e:	18 95       	reti

00003910 <_hihTwiCallback>:
    3910:	65 30       	cpi	r22, 0x05	; 5
    3912:	f1 f4       	brne	.+60     	; 0x3950 <_hihTwiCallback+0x40>
    3914:	fa 01       	movw	r30, r20
    3916:	80 81       	ld	r24, Z
    3918:	8f 73       	andi	r24, 0x3F	; 63
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	98 2f       	mov	r25, r24
    391e:	88 27       	eor	r24, r24
    3920:	21 81       	ldd	r18, Z+1	; 0x01
    3922:	82 2b       	or	r24, r18
    3924:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3928:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    392c:	82 81       	ldd	r24, Z+2	; 0x02
    392e:	f0 e4       	ldi	r31, 0x40	; 64
    3930:	8f 9f       	mul	r24, r31
    3932:	c0 01       	movw	r24, r0
    3934:	11 24       	eor	r1, r1
    3936:	fa 01       	movw	r30, r20
    3938:	23 81       	ldd	r18, Z+3	; 0x03
    393a:	26 95       	lsr	r18
    393c:	26 95       	lsr	r18
    393e:	82 2b       	or	r24, r18
    3940:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3944:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	80 93 fe 0e 	sts	0x0EFE, r24	; 0x800efe <_measuringIsReady>
    394e:	08 95       	ret
    3950:	64 30       	cpi	r22, 0x04	; 4
    3952:	51 f0       	breq	.+20     	; 0x3968 <_hihTwiCallback+0x58>
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	90 e4       	ldi	r25, 0x40	; 64
    3958:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    395c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3960:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3964:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3968:	08 95       	ret

0000396a <hih8120_initialise>:
    396a:	0f 93       	push	r16
    396c:	1f 93       	push	r17
    396e:	08 e8       	ldi	r16, 0x88	; 136
    3970:	1c e1       	ldi	r17, 0x1C	; 28
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	34 e2       	ldi	r19, 0x24	; 36
    3976:	44 ef       	ldi	r20, 0xF4	; 244
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	87 e2       	ldi	r24, 0x27	; 39
    397e:	25 d7       	rcall	.+3658   	; 0x47ca <twiCreate>
    3980:	90 93 00 0f 	sts	0x0F00, r25	; 0x800f00 <_hih8120Handler+0x1>
    3984:	80 93 ff 0e 	sts	0x0EFF, r24	; 0x800eff <_hih8120Handler>
    3988:	21 e0       	ldi	r18, 0x01	; 1
    398a:	89 2b       	or	r24, r25
    398c:	09 f0       	breq	.+2      	; 0x3990 <hih8120_initialise+0x26>
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	82 2f       	mov	r24, r18
    3992:	1f 91       	pop	r17
    3994:	0f 91       	pop	r16
    3996:	08 95       	ret

00003998 <hih8120_wakeup>:
    3998:	80 91 ff 0e 	lds	r24, 0x0EFF	; 0x800eff <_hih8120Handler>
    399c:	90 91 00 0f 	lds	r25, 0x0F00	; 0x800f00 <_hih8120Handler+0x1>
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	51 f0       	breq	.+20     	; 0x39b8 <hih8120_wakeup+0x20>
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	60 d7       	rcall	.+3776   	; 0x486c <twiTransmit>
    39ac:	84 30       	cpi	r24, 0x04	; 4
    39ae:	31 f4       	brne	.+12     	; 0x39bc <hih8120_wakeup+0x24>
    39b0:	10 92 fe 0e 	sts	0x0EFE, r1	; 0x800efe <_measuringIsReady>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	08 95       	ret
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	08 95       	ret
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	08 95       	ret

000039c0 <hih8120_measure>:
    39c0:	80 91 ff 0e 	lds	r24, 0x0EFF	; 0x800eff <_hih8120Handler>
    39c4:	90 91 00 0f 	lds	r25, 0x0F00	; 0x800f00 <_hih8120Handler+0x1>
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	31 f0       	breq	.+12     	; 0x39d8 <hih8120_measure+0x18>
    39cc:	64 e0       	ldi	r22, 0x04	; 4
    39ce:	9a d7       	rcall	.+3892   	; 0x4904 <twiReceive>
    39d0:	85 30       	cpi	r24, 0x05	; 5
    39d2:	21 f0       	breq	.+8      	; 0x39dc <hih8120_measure+0x1c>
    39d4:	83 e0       	ldi	r24, 0x03	; 3
    39d6:	08 95       	ret
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	08 95       	ret
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	08 95       	ret

000039e0 <hih8120_getHumidity>:
    39e0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    39e4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	1c dd       	rcall	.-1480   	; 0x3426 <__floatunsisf>
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	48 ec       	ldi	r20, 0xC8	; 200
    39f4:	52 e4       	ldi	r21, 0x42	; 66
    39f6:	a5 dd       	rcall	.-1206   	; 0x3542 <__mulsf3>
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	38 ef       	ldi	r19, 0xF8	; 248
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	56 e4       	ldi	r21, 0x46	; 70
    3a00:	79 cc       	rjmp	.-1806   	; 0x32f4 <__divsf3>
    3a02:	08 95       	ret

00003a04 <hih8120_getTemperature>:
    3a04:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a08:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	0a dd       	rcall	.-1516   	; 0x3426 <__floatunsisf>
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	45 e2       	ldi	r20, 0x25	; 37
    3a18:	53 e4       	ldi	r21, 0x43	; 67
    3a1a:	93 dd       	rcall	.-1242   	; 0x3542 <__mulsf3>
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	38 ef       	ldi	r19, 0xF8	; 248
    3a20:	4f e7       	ldi	r20, 0x7F	; 127
    3a22:	56 e4       	ldi	r21, 0x46	; 70
    3a24:	67 dc       	rcall	.-1842   	; 0x32f4 <__divsf3>
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e2       	ldi	r20, 0x20	; 32
    3a2c:	52 e4       	ldi	r21, 0x42	; 66
    3a2e:	fd cb       	rjmp	.-2054   	; 0x322a <__subsf3>
    3a30:	08 95       	ret

00003a32 <_serialCallBack>:
    3a32:	80 91 04 0f 	lds	r24, 0x0F04	; 0x800f04 <crc_sum.1945>
    3a36:	86 0f       	add	r24, r22
    3a38:	80 93 04 0f 	sts	0x0F04, r24	; 0x800f04 <crc_sum.1945>
    3a3c:	90 91 07 0f 	lds	r25, 0x0F07	; 0x800f07 <_mh_state>
    3a40:	91 30       	cpi	r25, 0x01	; 1
    3a42:	79 f0       	breq	.+30     	; 0x3a62 <_serialCallBack+0x30>
    3a44:	28 f0       	brcs	.+10     	; 0x3a50 <_serialCallBack+0x1e>
    3a46:	92 30       	cpi	r25, 0x02	; 2
    3a48:	a9 f0       	breq	.+42     	; 0x3a74 <_serialCallBack+0x42>
    3a4a:	93 30       	cpi	r25, 0x03	; 3
    3a4c:	19 f1       	breq	.+70     	; 0x3a94 <_serialCallBack+0x62>
    3a4e:	08 95       	ret
    3a50:	6f 3f       	cpi	r22, 0xFF	; 255
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <_serialCallBack+0x24>
    3a54:	48 c0       	rjmp	.+144    	; 0x3ae6 <_serialCallBack+0xb4>
    3a56:	10 92 04 0f 	sts	0x0F04, r1	; 0x800f04 <crc_sum.1945>
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	80 93 07 0f 	sts	0x0F07, r24	; 0x800f07 <_mh_state>
    3a60:	08 95       	ret
    3a62:	66 38       	cpi	r22, 0x86	; 134
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <_serialCallBack+0x36>
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <_serialCallBack+0xb4>
    3a68:	10 92 03 0f 	sts	0x0F03, r1	; 0x800f03 <inDex.1943>
    3a6c:	82 e0       	ldi	r24, 0x02	; 2
    3a6e:	80 93 07 0f 	sts	0x0F07, r24	; 0x800f07 <_mh_state>
    3a72:	08 95       	ret
    3a74:	e0 91 03 0f 	lds	r30, 0x0F03	; 0x800f03 <inDex.1943>
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	8e 0f       	add	r24, r30
    3a7c:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <inDex.1943>
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	ef 5f       	subi	r30, 0xFF	; 255
    3a84:	f0 4f       	sbci	r31, 0xF0	; 240
    3a86:	60 83       	st	Z, r22
    3a88:	82 30       	cpi	r24, 0x02	; 2
    3a8a:	69 f5       	brne	.+90     	; 0x3ae6 <_serialCallBack+0xb4>
    3a8c:	83 e0       	ldi	r24, 0x03	; 3
    3a8e:	80 93 07 0f 	sts	0x0F07, r24	; 0x800f07 <_mh_state>
    3a92:	08 95       	ret
    3a94:	90 91 03 0f 	lds	r25, 0x0F03	; 0x800f03 <inDex.1943>
    3a98:	21 e0       	ldi	r18, 0x01	; 1
    3a9a:	29 0f       	add	r18, r25
    3a9c:	20 93 03 0f 	sts	0x0F03, r18	; 0x800f03 <inDex.1943>
    3aa0:	96 30       	cpi	r25, 0x06	; 6
    3aa2:	09 f5       	brne	.+66     	; 0x3ae6 <_serialCallBack+0xb4>
    3aa4:	81 11       	cpse	r24, r1
    3aa6:	0e c0       	rjmp	.+28     	; 0x3ac4 <_serialCallBack+0x92>
    3aa8:	e1 e0       	ldi	r30, 0x01	; 1
    3aaa:	ff e0       	ldi	r31, 0x0F	; 15
    3aac:	80 81       	ld	r24, Z
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	98 2f       	mov	r25, r24
    3ab2:	88 27       	eor	r24, r24
    3ab4:	21 81       	ldd	r18, Z+1	; 0x01
    3ab6:	82 0f       	add	r24, r18
    3ab8:	91 1d       	adc	r25, r1
    3aba:	90 93 09 0f 	sts	0x0F09, r25	; 0x800f09 <_ppm+0x1>
    3abe:	80 93 08 0f 	sts	0x0F08, r24	; 0x800f08 <_ppm>
    3ac2:	04 c0       	rjmp	.+8      	; 0x3acc <_serialCallBack+0x9a>
    3ac4:	10 92 09 0f 	sts	0x0F09, r1	; 0x800f09 <_ppm+0x1>
    3ac8:	10 92 08 0f 	sts	0x0F08, r1	; 0x800f08 <_ppm>
    3acc:	10 92 07 0f 	sts	0x0F07, r1	; 0x800f07 <_mh_state>
    3ad0:	e0 91 05 0f 	lds	r30, 0x0F05	; 0x800f05 <_appCallBack>
    3ad4:	f0 91 06 0f 	lds	r31, 0x0F06	; 0x800f06 <_appCallBack+0x1>
    3ad8:	30 97       	sbiw	r30, 0x00	; 0
    3ada:	29 f0       	breq	.+10     	; 0x3ae6 <_serialCallBack+0xb4>
    3adc:	80 91 08 0f 	lds	r24, 0x0F08	; 0x800f08 <_ppm>
    3ae0:	90 91 09 0f 	lds	r25, 0x0F09	; 0x800f09 <_ppm+0x1>
    3ae4:	19 95       	eicall
    3ae6:	08 95       	ret

00003ae8 <mh_z19_initialise>:
    3ae8:	8f 92       	push	r8
    3aea:	9f 92       	push	r9
    3aec:	af 92       	push	r10
    3aee:	cf 92       	push	r12
    3af0:	ef 92       	push	r14
    3af2:	0f 93       	push	r16
    3af4:	0f 2e       	mov	r0, r31
    3af6:	f9 e1       	ldi	r31, 0x19	; 25
    3af8:	8f 2e       	mov	r8, r31
    3afa:	fd e1       	ldi	r31, 0x1D	; 29
    3afc:	9f 2e       	mov	r9, r31
    3afe:	f0 2d       	mov	r31, r0
    3b00:	68 94       	set
    3b02:	aa 24       	eor	r10, r10
    3b04:	a4 f8       	bld	r10, 4
    3b06:	68 94       	set
    3b08:	cc 24       	eor	r12, r12
    3b0a:	c4 f8       	bld	r12, 4
    3b0c:	e1 2c       	mov	r14, r1
    3b0e:	00 e0       	ldi	r16, 0x00	; 0
    3b10:	23 e0       	ldi	r18, 0x03	; 3
    3b12:	40 e8       	ldi	r20, 0x80	; 128
    3b14:	55 e2       	ldi	r21, 0x25	; 37
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	70 e0       	ldi	r23, 0x00	; 0
    3b1a:	4b d0       	rcall	.+150    	; 0x3bb2 <serial_create>
    3b1c:	90 93 0b 0f 	sts	0x0F0B, r25	; 0x800f0b <_serial+0x1>
    3b20:	80 93 0a 0f 	sts	0x0F0A, r24	; 0x800f0a <_serial>
    3b24:	0f 91       	pop	r16
    3b26:	ef 90       	pop	r14
    3b28:	cf 90       	pop	r12
    3b2a:	af 90       	pop	r10
    3b2c:	9f 90       	pop	r9
    3b2e:	8f 90       	pop	r8
    3b30:	08 95       	ret

00003b32 <mh_z19_takeMeassuring>:
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    3b3a:	29 97       	sbiw	r28, 0x09	; 9
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	de bf       	out	0x3e, r29	; 62
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	cd bf       	out	0x3d, r28	; 61
    3b46:	89 e0       	ldi	r24, 0x09	; 9
    3b48:	e2 e2       	ldi	r30, 0x22	; 34
    3b4a:	f2 e0       	ldi	r31, 0x02	; 2
    3b4c:	9e 01       	movw	r18, r28
    3b4e:	2f 5f       	subi	r18, 0xFF	; 255
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	d9 01       	movw	r26, r18
    3b54:	01 90       	ld	r0, Z+
    3b56:	0d 92       	st	X+, r0
    3b58:	8a 95       	dec	r24
    3b5a:	e1 f7       	brne	.-8      	; 0x3b54 <mh_z19_takeMeassuring+0x22>
    3b5c:	10 92 09 0f 	sts	0x0F09, r1	; 0x800f09 <_ppm+0x1>
    3b60:	10 92 08 0f 	sts	0x0F08, r1	; 0x800f08 <_ppm>
    3b64:	80 91 0a 0f 	lds	r24, 0x0F0A	; 0x800f0a <_serial>
    3b68:	90 91 0b 0f 	lds	r25, 0x0F0B	; 0x800f0b <_serial+0x1>
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	31 f0       	breq	.+12     	; 0x3b7c <mh_z19_takeMeassuring+0x4a>
    3b70:	42 2f       	mov	r20, r18
    3b72:	53 2f       	mov	r21, r19
    3b74:	69 e0       	ldi	r22, 0x09	; 9
    3b76:	e9 d0       	rcall	.+466    	; 0x3d4a <serial_sendBytes>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	01 c0       	rjmp	.+2      	; 0x3b7e <mh_z19_takeMeassuring+0x4c>
    3b7c:	82 e0       	ldi	r24, 0x02	; 2
    3b7e:	29 96       	adiw	r28, 0x09	; 9
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	08 95       	ret

00003b90 <mh_z19_getCo2Ppm>:
    3b90:	20 91 08 0f 	lds	r18, 0x0F08	; 0x800f08 <_ppm>
    3b94:	30 91 09 0f 	lds	r19, 0x0F09	; 0x800f09 <_ppm+0x1>
    3b98:	21 15       	cp	r18, r1
    3b9a:	31 05       	cpc	r19, r1
    3b9c:	29 f4       	brne	.+10     	; 0x3ba8 <mh_z19_getCo2Ppm+0x18>
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	11 82       	std	Z+1, r1	; 0x01
    3ba2:	10 82       	st	Z, r1
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	08 95       	ret
    3ba8:	fc 01       	movw	r30, r24
    3baa:	31 83       	std	Z+1, r19	; 0x01
    3bac:	20 83       	st	Z, r18
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	08 95       	ret

00003bb2 <serial_create>:
    3bb2:	2f 92       	push	r2
    3bb4:	3f 92       	push	r3
    3bb6:	4f 92       	push	r4
    3bb8:	5f 92       	push	r5
    3bba:	6f 92       	push	r6
    3bbc:	7f 92       	push	r7
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	cf 92       	push	r12
    3bc6:	ef 92       	push	r14
    3bc8:	ff 92       	push	r15
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	f8 2e       	mov	r15, r24
    3bd8:	2a 01       	movw	r4, r20
    3bda:	3b 01       	movw	r6, r22
    3bdc:	88 e0       	ldi	r24, 0x08	; 8
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 d5 27 	call	0x4faa	; 0x4faa <malloc>
    3be4:	8c 01       	movw	r16, r24
    3be6:	8f 2d       	mov	r24, r15
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	fc 01       	movw	r30, r24
    3bec:	ee 0f       	add	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	e4 5f       	subi	r30, 0xF4	; 244
    3bf2:	f0 4f       	sbci	r31, 0xF0	; 240
    3bf4:	11 83       	std	Z+1, r17	; 0x01
    3bf6:	00 83       	st	Z, r16
    3bf8:	01 15       	cp	r16, r1
    3bfa:	11 05       	cpc	r17, r1
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <serial_create+0x4e>
    3bfe:	68 c0       	rjmp	.+208    	; 0x3cd0 <serial_create+0x11e>
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	fc 01       	movw	r30, r24
    3c06:	e5 5f       	subi	r30, 0xF5	; 245
    3c08:	fd 4f       	sbci	r31, 0xFD	; 253
    3c0a:	80 81       	ld	r24, Z
    3c0c:	91 81       	ldd	r25, Z+1	; 0x01
    3c0e:	d8 01       	movw	r26, r16
    3c10:	8d 93       	st	X+, r24
    3c12:	9c 93       	st	X, r25
    3c14:	6c 2d       	mov	r22, r12
    3c16:	70 e0       	ldi	r23, 0x00	; 0
    3c18:	84 e0       	ldi	r24, 0x04	; 4
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
    3c20:	1c 01       	movw	r2, r24
    3c22:	61 e0       	ldi	r22, 0x01	; 1
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	86 e0       	ldi	r24, 0x06	; 6
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
    3c2e:	7c 01       	movw	r14, r24
    3c30:	4c 2d       	mov	r20, r12
    3c32:	b1 01       	movw	r22, r2
    3c34:	57 d7       	rcall	.+3758   	; 0x4ae4 <fifo_init>
    3c36:	f8 01       	movw	r30, r16
    3c38:	f5 82       	std	Z+5, r15	; 0x05
    3c3a:	e4 82       	std	Z+4, r14	; 0x04
    3c3c:	6a 2d       	mov	r22, r10
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	84 e0       	ldi	r24, 0x04	; 4
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
    3c48:	1c 01       	movw	r2, r24
    3c4a:	61 e0       	ldi	r22, 0x01	; 1
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	86 e0       	ldi	r24, 0x06	; 6
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <calloc>
    3c56:	7c 01       	movw	r14, r24
    3c58:	4a 2d       	mov	r20, r10
    3c5a:	b1 01       	movw	r22, r2
    3c5c:	43 d7       	rcall	.+3718   	; 0x4ae4 <fifo_init>
    3c5e:	d8 01       	movw	r26, r16
    3c60:	13 96       	adiw	r26, 0x03	; 3
    3c62:	fc 92       	st	X, r15
    3c64:	ee 92       	st	-X, r14
    3c66:	12 97       	sbiw	r26, 0x02	; 2
    3c68:	17 96       	adiw	r26, 0x07	; 7
    3c6a:	9c 92       	st	X, r9
    3c6c:	8e 92       	st	-X, r8
    3c6e:	16 97       	sbiw	r26, 0x06	; 6
    3c70:	ff b6       	in	r15, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	ed 91       	ld	r30, X+
    3c76:	fc 91       	ld	r31, X
    3c78:	11 97       	sbiw	r26, 0x01	; 1
    3c7a:	36 97       	sbiw	r30, 0x06	; 6
    3c7c:	80 81       	ld	r24, Z
    3c7e:	82 60       	ori	r24, 0x02	; 2
    3c80:	80 83       	st	Z, r24
    3c82:	8d 90       	ld	r8, X+
    3c84:	9c 90       	ld	r9, X
    3c86:	c3 01       	movw	r24, r6
    3c88:	b2 01       	movw	r22, r4
    3c8a:	cd db       	rcall	.-2150   	; 0x3426 <__floatunsisf>
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	51 e4       	ldi	r21, 0x41	; 65
    3c94:	56 dc       	rcall	.-1876   	; 0x3542 <__mulsf3>
    3c96:	9b 01       	movw	r18, r22
    3c98:	ac 01       	movw	r20, r24
    3c9a:	60 e0       	ldi	r22, 0x00	; 0
    3c9c:	74 e2       	ldi	r23, 0x24	; 36
    3c9e:	84 e7       	ldi	r24, 0x74	; 116
    3ca0:	9b e4       	ldi	r25, 0x4B	; 75
    3ca2:	28 db       	rcall	.-2480   	; 0x32f4 <__divsf3>
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e8       	ldi	r20, 0x80	; 128
    3caa:	5f e3       	ldi	r21, 0x3F	; 63
    3cac:	be da       	rcall	.-2692   	; 0x322a <__subsf3>
    3cae:	8f db       	rcall	.-2274   	; 0x33ce <__fixunssfsi>
    3cb0:	f4 01       	movw	r30, r8
    3cb2:	32 97       	sbiw	r30, 0x02	; 2
    3cb4:	60 83       	st	Z, r22
    3cb6:	d8 01       	movw	r26, r16
    3cb8:	ed 91       	ld	r30, X+
    3cba:	fc 91       	ld	r31, X
    3cbc:	11 97       	sbiw	r26, 0x01	; 1
    3cbe:	35 97       	sbiw	r30, 0x05	; 5
    3cc0:	88 e9       	ldi	r24, 0x98	; 152
    3cc2:	80 83       	st	Z, r24
    3cc4:	ed 91       	ld	r30, X+
    3cc6:	fc 91       	ld	r31, X
    3cc8:	34 97       	sbiw	r30, 0x04	; 4
    3cca:	86 e0       	ldi	r24, 0x06	; 6
    3ccc:	80 83       	st	Z, r24
    3cce:	ff be       	out	0x3f, r15	; 63
    3cd0:	c8 01       	movw	r24, r16
    3cd2:	df 91       	pop	r29
    3cd4:	cf 91       	pop	r28
    3cd6:	1f 91       	pop	r17
    3cd8:	0f 91       	pop	r16
    3cda:	ff 90       	pop	r15
    3cdc:	ef 90       	pop	r14
    3cde:	cf 90       	pop	r12
    3ce0:	af 90       	pop	r10
    3ce2:	9f 90       	pop	r9
    3ce4:	8f 90       	pop	r8
    3ce6:	7f 90       	pop	r7
    3ce8:	6f 90       	pop	r6
    3cea:	5f 90       	pop	r5
    3cec:	4f 90       	pop	r4
    3cee:	3f 90       	pop	r3
    3cf0:	2f 90       	pop	r2
    3cf2:	08 95       	ret

00003cf4 <serial_sendByte>:
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	89 2b       	or	r24, r25
    3cfc:	01 f1       	breq	.+64     	; 0x3d3e <serial_sendByte+0x4a>
    3cfe:	12 96       	adiw	r26, 0x02	; 2
    3d00:	ed 91       	ld	r30, X+
    3d02:	fc 91       	ld	r31, X
    3d04:	13 97       	sbiw	r26, 0x03	; 3
    3d06:	93 81       	ldd	r25, Z+3	; 0x03
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	25 81       	ldd	r18, Z+5	; 0x05
    3d0c:	98 1b       	sub	r25, r24
    3d0e:	92 23       	and	r25, r18
    3d10:	84 81       	ldd	r24, Z+4	; 0x04
    3d12:	98 17       	cp	r25, r24
    3d14:	b1 f0       	breq	.+44     	; 0x3d42 <serial_sendByte+0x4e>
    3d16:	83 81       	ldd	r24, Z+3	; 0x03
    3d18:	26 95       	lsr	r18
    3d1a:	28 23       	and	r18, r24
    3d1c:	c0 81       	ld	r28, Z
    3d1e:	d1 81       	ldd	r29, Z+1	; 0x01
    3d20:	c2 0f       	add	r28, r18
    3d22:	d1 1d       	adc	r29, r1
    3d24:	68 83       	st	Y, r22
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	95 81       	ldd	r25, Z+5	; 0x05
    3d2a:	89 23       	and	r24, r25
    3d2c:	83 83       	std	Z+3, r24	; 0x03
    3d2e:	ed 91       	ld	r30, X+
    3d30:	fc 91       	ld	r31, X
    3d32:	35 97       	sbiw	r30, 0x05	; 5
    3d34:	80 81       	ld	r24, Z
    3d36:	80 62       	ori	r24, 0x20	; 32
    3d38:	80 83       	st	Z, r24
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	03 c0       	rjmp	.+6      	; 0x3d44 <serial_sendByte+0x50>
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	01 c0       	rjmp	.+2      	; 0x3d44 <serial_sendByte+0x50>
    3d42:	82 e0       	ldi	r24, 0x02	; 2
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	08 95       	ret

00003d4a <serial_sendBytes>:
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	7c 01       	movw	r14, r24
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <serial_sendBytes+0x14>
    3d5c:	41 c0       	rjmp	.+130    	; 0x3de0 <serial_sendBytes+0x96>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	12 96       	adiw	r26, 0x02	; 2
    3d62:	ed 91       	ld	r30, X+
    3d64:	fc 91       	ld	r31, X
    3d66:	13 97       	sbiw	r26, 0x03	; 3
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	82 81       	ldd	r24, Z+2	; 0x02
    3d6c:	98 1b       	sub	r25, r24
    3d6e:	85 81       	ldd	r24, Z+5	; 0x05
    3d70:	98 23       	and	r25, r24
    3d72:	84 81       	ldd	r24, Z+4	; 0x04
    3d74:	89 1b       	sub	r24, r25
    3d76:	86 17       	cp	r24, r22
    3d78:	a8 f1       	brcs	.+106    	; 0x3de4 <serial_sendBytes+0x9a>
    3d7a:	66 23       	and	r22, r22
    3d7c:	41 f1       	breq	.+80     	; 0x3dce <serial_sendBytes+0x84>
    3d7e:	84 2f       	mov	r24, r20
    3d80:	95 2f       	mov	r25, r21
    3d82:	dc 01       	movw	r26, r24
    3d84:	61 50       	subi	r22, 0x01	; 1
    3d86:	46 2f       	mov	r20, r22
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	4f 5f       	subi	r20, 0xFF	; 255
    3d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d8e:	48 0f       	add	r20, r24
    3d90:	59 1f       	adc	r21, r25
    3d92:	e7 01       	movw	r28, r14
    3d94:	ea 81       	ldd	r30, Y+2	; 0x02
    3d96:	fb 81       	ldd	r31, Y+3	; 0x03
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	25 81       	ldd	r18, Z+5	; 0x05
    3d9e:	98 1b       	sub	r25, r24
    3da0:	92 23       	and	r25, r18
    3da2:	84 81       	ldd	r24, Z+4	; 0x04
    3da4:	98 17       	cp	r25, r24
    3da6:	79 f0       	breq	.+30     	; 0x3dc6 <serial_sendBytes+0x7c>
    3da8:	8c 91       	ld	r24, X
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	26 95       	lsr	r18
    3dae:	29 23       	and	r18, r25
    3db0:	60 81       	ld	r22, Z
    3db2:	71 81       	ldd	r23, Z+1	; 0x01
    3db4:	8b 01       	movw	r16, r22
    3db6:	02 0f       	add	r16, r18
    3db8:	11 1d       	adc	r17, r1
    3dba:	e8 01       	movw	r28, r16
    3dbc:	88 83       	st	Y, r24
    3dbe:	9f 5f       	subi	r25, 0xFF	; 255
    3dc0:	85 81       	ldd	r24, Z+5	; 0x05
    3dc2:	98 23       	and	r25, r24
    3dc4:	93 83       	std	Z+3, r25	; 0x03
    3dc6:	11 96       	adiw	r26, 0x01	; 1
    3dc8:	a4 17       	cp	r26, r20
    3dca:	b5 07       	cpc	r27, r21
    3dcc:	11 f7       	brne	.-60     	; 0x3d92 <serial_sendBytes+0x48>
    3dce:	d7 01       	movw	r26, r14
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	35 97       	sbiw	r30, 0x05	; 5
    3dd6:	80 81       	ld	r24, Z
    3dd8:	80 62       	ori	r24, 0x20	; 32
    3dda:	80 83       	st	Z, r24
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	03 c0       	rjmp	.+6      	; 0x3de6 <serial_sendBytes+0x9c>
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	01 c0       	rjmp	.+2      	; 0x3de6 <serial_sendBytes+0x9c>
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	df 91       	pop	r29
    3de8:	cf 91       	pop	r28
    3dea:	1f 91       	pop	r17
    3dec:	0f 91       	pop	r16
    3dee:	ff 90       	pop	r15
    3df0:	ef 90       	pop	r14
    3df2:	08 95       	ret

00003df4 <serial_getByte>:
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	d1 f0       	breq	.+52     	; 0x3e2c <serial_getByte+0x38>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	14 96       	adiw	r26, 0x04	; 4
    3dfc:	ed 91       	ld	r30, X+
    3dfe:	fc 91       	ld	r31, X
    3e00:	15 97       	sbiw	r26, 0x05	; 5
    3e02:	93 81       	ldd	r25, Z+3	; 0x03
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	98 17       	cp	r25, r24
    3e08:	99 f0       	breq	.+38     	; 0x3e30 <serial_getByte+0x3c>
    3e0a:	92 81       	ldd	r25, Z+2	; 0x02
    3e0c:	85 81       	ldd	r24, Z+5	; 0x05
    3e0e:	86 95       	lsr	r24
    3e10:	89 23       	and	r24, r25
    3e12:	a0 81       	ld	r26, Z
    3e14:	b1 81       	ldd	r27, Z+1	; 0x01
    3e16:	a8 0f       	add	r26, r24
    3e18:	b1 1d       	adc	r27, r1
    3e1a:	8c 91       	ld	r24, X
    3e1c:	db 01       	movw	r26, r22
    3e1e:	8c 93       	st	X, r24
    3e20:	9f 5f       	subi	r25, 0xFF	; 255
    3e22:	85 81       	ldd	r24, Z+5	; 0x05
    3e24:	98 23       	and	r25, r24
    3e26:	92 83       	std	Z+2, r25	; 0x02
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	08 95       	ret
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	08 95       	ret
    3e30:	83 e0       	ldi	r24, 0x03	; 3
    3e32:	08 95       	ret

00003e34 <__vector_25>:
    3e34:	1f 92       	push	r1
    3e36:	0f 92       	push	r0
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	0f 92       	push	r0
    3e3c:	11 24       	eor	r1, r1
    3e3e:	0b b6       	in	r0, 0x3b	; 59
    3e40:	0f 92       	push	r0
    3e42:	2f 93       	push	r18
    3e44:	3f 93       	push	r19
    3e46:	4f 93       	push	r20
    3e48:	5f 93       	push	r21
    3e4a:	6f 93       	push	r22
    3e4c:	7f 93       	push	r23
    3e4e:	8f 93       	push	r24
    3e50:	9f 93       	push	r25
    3e52:	af 93       	push	r26
    3e54:	bf 93       	push	r27
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	ef 93       	push	r30
    3e5c:	ff 93       	push	r31
    3e5e:	a0 91 0c 0f 	lds	r26, 0x0F0C	; 0x800f0c <_ser_handle>
    3e62:	b0 91 0d 0f 	lds	r27, 0x0F0D	; 0x800f0d <_ser_handle+0x1>
    3e66:	10 97       	sbiw	r26, 0x00	; 0
    3e68:	11 f1       	breq	.+68     	; 0x3eae <__vector_25+0x7a>
    3e6a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3e6e:	14 96       	adiw	r26, 0x04	; 4
    3e70:	ed 91       	ld	r30, X+
    3e72:	fc 91       	ld	r31, X
    3e74:	15 97       	sbiw	r26, 0x05	; 5
    3e76:	93 81       	ldd	r25, Z+3	; 0x03
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	25 81       	ldd	r18, Z+5	; 0x05
    3e7c:	98 1b       	sub	r25, r24
    3e7e:	92 23       	and	r25, r18
    3e80:	84 81       	ldd	r24, Z+4	; 0x04
    3e82:	98 17       	cp	r25, r24
    3e84:	61 f0       	breq	.+24     	; 0x3e9e <__vector_25+0x6a>
    3e86:	83 81       	ldd	r24, Z+3	; 0x03
    3e88:	26 95       	lsr	r18
    3e8a:	28 23       	and	r18, r24
    3e8c:	c0 81       	ld	r28, Z
    3e8e:	d1 81       	ldd	r29, Z+1	; 0x01
    3e90:	c2 0f       	add	r28, r18
    3e92:	d1 1d       	adc	r29, r1
    3e94:	68 83       	st	Y, r22
    3e96:	8f 5f       	subi	r24, 0xFF	; 255
    3e98:	95 81       	ldd	r25, Z+5	; 0x05
    3e9a:	89 23       	and	r24, r25
    3e9c:	83 83       	std	Z+3, r24	; 0x03
    3e9e:	16 96       	adiw	r26, 0x06	; 6
    3ea0:	ed 91       	ld	r30, X+
    3ea2:	fc 91       	ld	r31, X
    3ea4:	17 97       	sbiw	r26, 0x07	; 7
    3ea6:	30 97       	sbiw	r30, 0x00	; 0
    3ea8:	11 f0       	breq	.+4      	; 0x3eae <__vector_25+0x7a>
    3eaa:	cd 01       	movw	r24, r26
    3eac:	19 95       	eicall
    3eae:	ff 91       	pop	r31
    3eb0:	ef 91       	pop	r30
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	bf 91       	pop	r27
    3eb8:	af 91       	pop	r26
    3eba:	9f 91       	pop	r25
    3ebc:	8f 91       	pop	r24
    3ebe:	7f 91       	pop	r23
    3ec0:	6f 91       	pop	r22
    3ec2:	5f 91       	pop	r21
    3ec4:	4f 91       	pop	r20
    3ec6:	3f 91       	pop	r19
    3ec8:	2f 91       	pop	r18
    3eca:	0f 90       	pop	r0
    3ecc:	0b be       	out	0x3b, r0	; 59
    3ece:	0f 90       	pop	r0
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	0f 90       	pop	r0
    3ed4:	1f 90       	pop	r1
    3ed6:	18 95       	reti

00003ed8 <__vector_26>:
    3ed8:	1f 92       	push	r1
    3eda:	0f 92       	push	r0
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	0f 92       	push	r0
    3ee0:	11 24       	eor	r1, r1
    3ee2:	0b b6       	in	r0, 0x3b	; 59
    3ee4:	0f 92       	push	r0
    3ee6:	2f 93       	push	r18
    3ee8:	8f 93       	push	r24
    3eea:	9f 93       	push	r25
    3eec:	af 93       	push	r26
    3eee:	bf 93       	push	r27
    3ef0:	ef 93       	push	r30
    3ef2:	ff 93       	push	r31
    3ef4:	e0 91 0c 0f 	lds	r30, 0x0F0C	; 0x800f0c <_ser_handle>
    3ef8:	f0 91 0d 0f 	lds	r31, 0x0F0D	; 0x800f0d <_ser_handle+0x1>
    3efc:	30 97       	sbiw	r30, 0x00	; 0
    3efe:	b9 f0       	breq	.+46     	; 0x3f2e <__vector_26+0x56>
    3f00:	02 80       	ldd	r0, Z+2	; 0x02
    3f02:	f3 81       	ldd	r31, Z+3	; 0x03
    3f04:	e0 2d       	mov	r30, r0
    3f06:	93 81       	ldd	r25, Z+3	; 0x03
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	98 17       	cp	r25, r24
    3f0c:	b1 f0       	breq	.+44     	; 0x3f3a <__vector_26+0x62>
    3f0e:	92 81       	ldd	r25, Z+2	; 0x02
    3f10:	85 81       	ldd	r24, Z+5	; 0x05
    3f12:	28 2f       	mov	r18, r24
    3f14:	26 95       	lsr	r18
    3f16:	29 23       	and	r18, r25
    3f18:	a0 81       	ld	r26, Z
    3f1a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f1c:	a2 0f       	add	r26, r18
    3f1e:	b1 1d       	adc	r27, r1
    3f20:	2c 91       	ld	r18, X
    3f22:	9f 5f       	subi	r25, 0xFF	; 255
    3f24:	89 23       	and	r24, r25
    3f26:	82 83       	std	Z+2, r24	; 0x02
    3f28:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3f2c:	0b c0       	rjmp	.+22     	; 0x3f44 <__vector_26+0x6c>
    3f2e:	e1 ec       	ldi	r30, 0xC1	; 193
    3f30:	f0 e0       	ldi	r31, 0x00	; 0
    3f32:	80 81       	ld	r24, Z
    3f34:	8f 7d       	andi	r24, 0xDF	; 223
    3f36:	80 83       	st	Z, r24
    3f38:	05 c0       	rjmp	.+10     	; 0x3f44 <__vector_26+0x6c>
    3f3a:	e1 ec       	ldi	r30, 0xC1	; 193
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	80 81       	ld	r24, Z
    3f40:	8f 7d       	andi	r24, 0xDF	; 223
    3f42:	80 83       	st	Z, r24
    3f44:	ff 91       	pop	r31
    3f46:	ef 91       	pop	r30
    3f48:	bf 91       	pop	r27
    3f4a:	af 91       	pop	r26
    3f4c:	9f 91       	pop	r25
    3f4e:	8f 91       	pop	r24
    3f50:	2f 91       	pop	r18
    3f52:	0f 90       	pop	r0
    3f54:	0b be       	out	0x3b, r0	; 59
    3f56:	0f 90       	pop	r0
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	0f 90       	pop	r0
    3f5c:	1f 90       	pop	r1
    3f5e:	18 95       	reti

00003f60 <__vector_36>:
    3f60:	1f 92       	push	r1
    3f62:	0f 92       	push	r0
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	0f 92       	push	r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	0b b6       	in	r0, 0x3b	; 59
    3f6c:	0f 92       	push	r0
    3f6e:	2f 93       	push	r18
    3f70:	3f 93       	push	r19
    3f72:	4f 93       	push	r20
    3f74:	5f 93       	push	r21
    3f76:	6f 93       	push	r22
    3f78:	7f 93       	push	r23
    3f7a:	8f 93       	push	r24
    3f7c:	9f 93       	push	r25
    3f7e:	af 93       	push	r26
    3f80:	bf 93       	push	r27
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	ef 93       	push	r30
    3f88:	ff 93       	push	r31
    3f8a:	a0 91 0e 0f 	lds	r26, 0x0F0E	; 0x800f0e <_ser_handle+0x2>
    3f8e:	b0 91 0f 0f 	lds	r27, 0x0F0F	; 0x800f0f <_ser_handle+0x3>
    3f92:	10 97       	sbiw	r26, 0x00	; 0
    3f94:	11 f1       	breq	.+68     	; 0x3fda <__vector_36+0x7a>
    3f96:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3f9a:	14 96       	adiw	r26, 0x04	; 4
    3f9c:	ed 91       	ld	r30, X+
    3f9e:	fc 91       	ld	r31, X
    3fa0:	15 97       	sbiw	r26, 0x05	; 5
    3fa2:	93 81       	ldd	r25, Z+3	; 0x03
    3fa4:	82 81       	ldd	r24, Z+2	; 0x02
    3fa6:	25 81       	ldd	r18, Z+5	; 0x05
    3fa8:	98 1b       	sub	r25, r24
    3faa:	92 23       	and	r25, r18
    3fac:	84 81       	ldd	r24, Z+4	; 0x04
    3fae:	98 17       	cp	r25, r24
    3fb0:	61 f0       	breq	.+24     	; 0x3fca <__vector_36+0x6a>
    3fb2:	83 81       	ldd	r24, Z+3	; 0x03
    3fb4:	26 95       	lsr	r18
    3fb6:	28 23       	and	r18, r24
    3fb8:	c0 81       	ld	r28, Z
    3fba:	d1 81       	ldd	r29, Z+1	; 0x01
    3fbc:	c2 0f       	add	r28, r18
    3fbe:	d1 1d       	adc	r29, r1
    3fc0:	68 83       	st	Y, r22
    3fc2:	8f 5f       	subi	r24, 0xFF	; 255
    3fc4:	95 81       	ldd	r25, Z+5	; 0x05
    3fc6:	89 23       	and	r24, r25
    3fc8:	83 83       	std	Z+3, r24	; 0x03
    3fca:	16 96       	adiw	r26, 0x06	; 6
    3fcc:	ed 91       	ld	r30, X+
    3fce:	fc 91       	ld	r31, X
    3fd0:	17 97       	sbiw	r26, 0x07	; 7
    3fd2:	30 97       	sbiw	r30, 0x00	; 0
    3fd4:	11 f0       	breq	.+4      	; 0x3fda <__vector_36+0x7a>
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	19 95       	eicall
    3fda:	ff 91       	pop	r31
    3fdc:	ef 91       	pop	r30
    3fde:	df 91       	pop	r29
    3fe0:	cf 91       	pop	r28
    3fe2:	bf 91       	pop	r27
    3fe4:	af 91       	pop	r26
    3fe6:	9f 91       	pop	r25
    3fe8:	8f 91       	pop	r24
    3fea:	7f 91       	pop	r23
    3fec:	6f 91       	pop	r22
    3fee:	5f 91       	pop	r21
    3ff0:	4f 91       	pop	r20
    3ff2:	3f 91       	pop	r19
    3ff4:	2f 91       	pop	r18
    3ff6:	0f 90       	pop	r0
    3ff8:	0b be       	out	0x3b, r0	; 59
    3ffa:	0f 90       	pop	r0
    3ffc:	0f be       	out	0x3f, r0	; 63
    3ffe:	0f 90       	pop	r0
    4000:	1f 90       	pop	r1
    4002:	18 95       	reti

00004004 <__vector_37>:
    4004:	1f 92       	push	r1
    4006:	0f 92       	push	r0
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	0f 92       	push	r0
    400c:	11 24       	eor	r1, r1
    400e:	0b b6       	in	r0, 0x3b	; 59
    4010:	0f 92       	push	r0
    4012:	2f 93       	push	r18
    4014:	8f 93       	push	r24
    4016:	9f 93       	push	r25
    4018:	af 93       	push	r26
    401a:	bf 93       	push	r27
    401c:	ef 93       	push	r30
    401e:	ff 93       	push	r31
    4020:	e0 91 0e 0f 	lds	r30, 0x0F0E	; 0x800f0e <_ser_handle+0x2>
    4024:	f0 91 0f 0f 	lds	r31, 0x0F0F	; 0x800f0f <_ser_handle+0x3>
    4028:	30 97       	sbiw	r30, 0x00	; 0
    402a:	b9 f0       	breq	.+46     	; 0x405a <__vector_37+0x56>
    402c:	02 80       	ldd	r0, Z+2	; 0x02
    402e:	f3 81       	ldd	r31, Z+3	; 0x03
    4030:	e0 2d       	mov	r30, r0
    4032:	93 81       	ldd	r25, Z+3	; 0x03
    4034:	82 81       	ldd	r24, Z+2	; 0x02
    4036:	98 17       	cp	r25, r24
    4038:	b1 f0       	breq	.+44     	; 0x4066 <__vector_37+0x62>
    403a:	92 81       	ldd	r25, Z+2	; 0x02
    403c:	85 81       	ldd	r24, Z+5	; 0x05
    403e:	28 2f       	mov	r18, r24
    4040:	26 95       	lsr	r18
    4042:	29 23       	and	r18, r25
    4044:	a0 81       	ld	r26, Z
    4046:	b1 81       	ldd	r27, Z+1	; 0x01
    4048:	a2 0f       	add	r26, r18
    404a:	b1 1d       	adc	r27, r1
    404c:	2c 91       	ld	r18, X
    404e:	9f 5f       	subi	r25, 0xFF	; 255
    4050:	89 23       	and	r24, r25
    4052:	82 83       	std	Z+2, r24	; 0x02
    4054:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4058:	0b c0       	rjmp	.+22     	; 0x4070 <__vector_37+0x6c>
    405a:	e9 ec       	ldi	r30, 0xC9	; 201
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	80 81       	ld	r24, Z
    4060:	8f 7d       	andi	r24, 0xDF	; 223
    4062:	80 83       	st	Z, r24
    4064:	05 c0       	rjmp	.+10     	; 0x4070 <__vector_37+0x6c>
    4066:	e9 ec       	ldi	r30, 0xC9	; 201
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	80 81       	ld	r24, Z
    406c:	8f 7d       	andi	r24, 0xDF	; 223
    406e:	80 83       	st	Z, r24
    4070:	ff 91       	pop	r31
    4072:	ef 91       	pop	r30
    4074:	bf 91       	pop	r27
    4076:	af 91       	pop	r26
    4078:	9f 91       	pop	r25
    407a:	8f 91       	pop	r24
    407c:	2f 91       	pop	r18
    407e:	0f 90       	pop	r0
    4080:	0b be       	out	0x3b, r0	; 59
    4082:	0f 90       	pop	r0
    4084:	0f be       	out	0x3f, r0	; 63
    4086:	0f 90       	pop	r0
    4088:	1f 90       	pop	r1
    408a:	18 95       	reti

0000408c <__vector_51>:
    408c:	1f 92       	push	r1
    408e:	0f 92       	push	r0
    4090:	0f b6       	in	r0, 0x3f	; 63
    4092:	0f 92       	push	r0
    4094:	11 24       	eor	r1, r1
    4096:	0b b6       	in	r0, 0x3b	; 59
    4098:	0f 92       	push	r0
    409a:	2f 93       	push	r18
    409c:	3f 93       	push	r19
    409e:	4f 93       	push	r20
    40a0:	5f 93       	push	r21
    40a2:	6f 93       	push	r22
    40a4:	7f 93       	push	r23
    40a6:	8f 93       	push	r24
    40a8:	9f 93       	push	r25
    40aa:	af 93       	push	r26
    40ac:	bf 93       	push	r27
    40ae:	cf 93       	push	r28
    40b0:	df 93       	push	r29
    40b2:	ef 93       	push	r30
    40b4:	ff 93       	push	r31
    40b6:	a0 91 10 0f 	lds	r26, 0x0F10	; 0x800f10 <_ser_handle+0x4>
    40ba:	b0 91 11 0f 	lds	r27, 0x0F11	; 0x800f11 <_ser_handle+0x5>
    40be:	10 97       	sbiw	r26, 0x00	; 0
    40c0:	11 f1       	breq	.+68     	; 0x4106 <__vector_51+0x7a>
    40c2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    40c6:	14 96       	adiw	r26, 0x04	; 4
    40c8:	ed 91       	ld	r30, X+
    40ca:	fc 91       	ld	r31, X
    40cc:	15 97       	sbiw	r26, 0x05	; 5
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	25 81       	ldd	r18, Z+5	; 0x05
    40d4:	98 1b       	sub	r25, r24
    40d6:	92 23       	and	r25, r18
    40d8:	84 81       	ldd	r24, Z+4	; 0x04
    40da:	98 17       	cp	r25, r24
    40dc:	61 f0       	breq	.+24     	; 0x40f6 <__vector_51+0x6a>
    40de:	83 81       	ldd	r24, Z+3	; 0x03
    40e0:	26 95       	lsr	r18
    40e2:	28 23       	and	r18, r24
    40e4:	c0 81       	ld	r28, Z
    40e6:	d1 81       	ldd	r29, Z+1	; 0x01
    40e8:	c2 0f       	add	r28, r18
    40ea:	d1 1d       	adc	r29, r1
    40ec:	68 83       	st	Y, r22
    40ee:	8f 5f       	subi	r24, 0xFF	; 255
    40f0:	95 81       	ldd	r25, Z+5	; 0x05
    40f2:	89 23       	and	r24, r25
    40f4:	83 83       	std	Z+3, r24	; 0x03
    40f6:	16 96       	adiw	r26, 0x06	; 6
    40f8:	ed 91       	ld	r30, X+
    40fa:	fc 91       	ld	r31, X
    40fc:	17 97       	sbiw	r26, 0x07	; 7
    40fe:	30 97       	sbiw	r30, 0x00	; 0
    4100:	11 f0       	breq	.+4      	; 0x4106 <__vector_51+0x7a>
    4102:	cd 01       	movw	r24, r26
    4104:	19 95       	eicall
    4106:	ff 91       	pop	r31
    4108:	ef 91       	pop	r30
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	bf 91       	pop	r27
    4110:	af 91       	pop	r26
    4112:	9f 91       	pop	r25
    4114:	8f 91       	pop	r24
    4116:	7f 91       	pop	r23
    4118:	6f 91       	pop	r22
    411a:	5f 91       	pop	r21
    411c:	4f 91       	pop	r20
    411e:	3f 91       	pop	r19
    4120:	2f 91       	pop	r18
    4122:	0f 90       	pop	r0
    4124:	0b be       	out	0x3b, r0	; 59
    4126:	0f 90       	pop	r0
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	0f 90       	pop	r0
    412c:	1f 90       	pop	r1
    412e:	18 95       	reti

00004130 <__vector_52>:
    4130:	1f 92       	push	r1
    4132:	0f 92       	push	r0
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	0f 92       	push	r0
    4138:	11 24       	eor	r1, r1
    413a:	0b b6       	in	r0, 0x3b	; 59
    413c:	0f 92       	push	r0
    413e:	2f 93       	push	r18
    4140:	8f 93       	push	r24
    4142:	9f 93       	push	r25
    4144:	af 93       	push	r26
    4146:	bf 93       	push	r27
    4148:	ef 93       	push	r30
    414a:	ff 93       	push	r31
    414c:	e0 91 10 0f 	lds	r30, 0x0F10	; 0x800f10 <_ser_handle+0x4>
    4150:	f0 91 11 0f 	lds	r31, 0x0F11	; 0x800f11 <_ser_handle+0x5>
    4154:	30 97       	sbiw	r30, 0x00	; 0
    4156:	b9 f0       	breq	.+46     	; 0x4186 <__vector_52+0x56>
    4158:	02 80       	ldd	r0, Z+2	; 0x02
    415a:	f3 81       	ldd	r31, Z+3	; 0x03
    415c:	e0 2d       	mov	r30, r0
    415e:	93 81       	ldd	r25, Z+3	; 0x03
    4160:	82 81       	ldd	r24, Z+2	; 0x02
    4162:	98 17       	cp	r25, r24
    4164:	b1 f0       	breq	.+44     	; 0x4192 <__vector_52+0x62>
    4166:	92 81       	ldd	r25, Z+2	; 0x02
    4168:	85 81       	ldd	r24, Z+5	; 0x05
    416a:	28 2f       	mov	r18, r24
    416c:	26 95       	lsr	r18
    416e:	29 23       	and	r18, r25
    4170:	a0 81       	ld	r26, Z
    4172:	b1 81       	ldd	r27, Z+1	; 0x01
    4174:	a2 0f       	add	r26, r18
    4176:	b1 1d       	adc	r27, r1
    4178:	2c 91       	ld	r18, X
    417a:	9f 5f       	subi	r25, 0xFF	; 255
    417c:	89 23       	and	r24, r25
    417e:	82 83       	std	Z+2, r24	; 0x02
    4180:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4184:	0b c0       	rjmp	.+22     	; 0x419c <__vector_52+0x6c>
    4186:	e1 ed       	ldi	r30, 0xD1	; 209
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	80 81       	ld	r24, Z
    418c:	8f 7d       	andi	r24, 0xDF	; 223
    418e:	80 83       	st	Z, r24
    4190:	05 c0       	rjmp	.+10     	; 0x419c <__vector_52+0x6c>
    4192:	e1 ed       	ldi	r30, 0xD1	; 209
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	8f 7d       	andi	r24, 0xDF	; 223
    419a:	80 83       	st	Z, r24
    419c:	ff 91       	pop	r31
    419e:	ef 91       	pop	r30
    41a0:	bf 91       	pop	r27
    41a2:	af 91       	pop	r26
    41a4:	9f 91       	pop	r25
    41a6:	8f 91       	pop	r24
    41a8:	2f 91       	pop	r18
    41aa:	0f 90       	pop	r0
    41ac:	0b be       	out	0x3b, r0	; 59
    41ae:	0f 90       	pop	r0
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	0f 90       	pop	r0
    41b4:	1f 90       	pop	r1
    41b6:	18 95       	reti

000041b8 <__vector_54>:
    41b8:	1f 92       	push	r1
    41ba:	0f 92       	push	r0
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	0f 92       	push	r0
    41c0:	11 24       	eor	r1, r1
    41c2:	0b b6       	in	r0, 0x3b	; 59
    41c4:	0f 92       	push	r0
    41c6:	2f 93       	push	r18
    41c8:	3f 93       	push	r19
    41ca:	4f 93       	push	r20
    41cc:	5f 93       	push	r21
    41ce:	6f 93       	push	r22
    41d0:	7f 93       	push	r23
    41d2:	8f 93       	push	r24
    41d4:	9f 93       	push	r25
    41d6:	af 93       	push	r26
    41d8:	bf 93       	push	r27
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	ef 93       	push	r30
    41e0:	ff 93       	push	r31
    41e2:	a0 91 12 0f 	lds	r26, 0x0F12	; 0x800f12 <_ser_handle+0x6>
    41e6:	b0 91 13 0f 	lds	r27, 0x0F13	; 0x800f13 <_ser_handle+0x7>
    41ea:	10 97       	sbiw	r26, 0x00	; 0
    41ec:	11 f1       	breq	.+68     	; 0x4232 <__vector_54+0x7a>
    41ee:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    41f2:	14 96       	adiw	r26, 0x04	; 4
    41f4:	ed 91       	ld	r30, X+
    41f6:	fc 91       	ld	r31, X
    41f8:	15 97       	sbiw	r26, 0x05	; 5
    41fa:	93 81       	ldd	r25, Z+3	; 0x03
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	25 81       	ldd	r18, Z+5	; 0x05
    4200:	98 1b       	sub	r25, r24
    4202:	92 23       	and	r25, r18
    4204:	84 81       	ldd	r24, Z+4	; 0x04
    4206:	98 17       	cp	r25, r24
    4208:	61 f0       	breq	.+24     	; 0x4222 <__vector_54+0x6a>
    420a:	83 81       	ldd	r24, Z+3	; 0x03
    420c:	26 95       	lsr	r18
    420e:	28 23       	and	r18, r24
    4210:	c0 81       	ld	r28, Z
    4212:	d1 81       	ldd	r29, Z+1	; 0x01
    4214:	c2 0f       	add	r28, r18
    4216:	d1 1d       	adc	r29, r1
    4218:	68 83       	st	Y, r22
    421a:	8f 5f       	subi	r24, 0xFF	; 255
    421c:	95 81       	ldd	r25, Z+5	; 0x05
    421e:	89 23       	and	r24, r25
    4220:	83 83       	std	Z+3, r24	; 0x03
    4222:	16 96       	adiw	r26, 0x06	; 6
    4224:	ed 91       	ld	r30, X+
    4226:	fc 91       	ld	r31, X
    4228:	17 97       	sbiw	r26, 0x07	; 7
    422a:	30 97       	sbiw	r30, 0x00	; 0
    422c:	11 f0       	breq	.+4      	; 0x4232 <__vector_54+0x7a>
    422e:	cd 01       	movw	r24, r26
    4230:	19 95       	eicall
    4232:	ff 91       	pop	r31
    4234:	ef 91       	pop	r30
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	bf 91       	pop	r27
    423c:	af 91       	pop	r26
    423e:	9f 91       	pop	r25
    4240:	8f 91       	pop	r24
    4242:	7f 91       	pop	r23
    4244:	6f 91       	pop	r22
    4246:	5f 91       	pop	r21
    4248:	4f 91       	pop	r20
    424a:	3f 91       	pop	r19
    424c:	2f 91       	pop	r18
    424e:	0f 90       	pop	r0
    4250:	0b be       	out	0x3b, r0	; 59
    4252:	0f 90       	pop	r0
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	0f 90       	pop	r0
    4258:	1f 90       	pop	r1
    425a:	18 95       	reti

0000425c <__vector_55>:
    425c:	1f 92       	push	r1
    425e:	0f 92       	push	r0
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	0f 92       	push	r0
    4264:	11 24       	eor	r1, r1
    4266:	0b b6       	in	r0, 0x3b	; 59
    4268:	0f 92       	push	r0
    426a:	2f 93       	push	r18
    426c:	8f 93       	push	r24
    426e:	9f 93       	push	r25
    4270:	af 93       	push	r26
    4272:	bf 93       	push	r27
    4274:	ef 93       	push	r30
    4276:	ff 93       	push	r31
    4278:	e0 91 12 0f 	lds	r30, 0x0F12	; 0x800f12 <_ser_handle+0x6>
    427c:	f0 91 13 0f 	lds	r31, 0x0F13	; 0x800f13 <_ser_handle+0x7>
    4280:	30 97       	sbiw	r30, 0x00	; 0
    4282:	b9 f0       	breq	.+46     	; 0x42b2 <__vector_55+0x56>
    4284:	02 80       	ldd	r0, Z+2	; 0x02
    4286:	f3 81       	ldd	r31, Z+3	; 0x03
    4288:	e0 2d       	mov	r30, r0
    428a:	93 81       	ldd	r25, Z+3	; 0x03
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	98 17       	cp	r25, r24
    4290:	b1 f0       	breq	.+44     	; 0x42be <__vector_55+0x62>
    4292:	92 81       	ldd	r25, Z+2	; 0x02
    4294:	85 81       	ldd	r24, Z+5	; 0x05
    4296:	28 2f       	mov	r18, r24
    4298:	26 95       	lsr	r18
    429a:	29 23       	and	r18, r25
    429c:	a0 81       	ld	r26, Z
    429e:	b1 81       	ldd	r27, Z+1	; 0x01
    42a0:	a2 0f       	add	r26, r18
    42a2:	b1 1d       	adc	r27, r1
    42a4:	2c 91       	ld	r18, X
    42a6:	9f 5f       	subi	r25, 0xFF	; 255
    42a8:	89 23       	and	r24, r25
    42aa:	82 83       	std	Z+2, r24	; 0x02
    42ac:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    42b0:	0b c0       	rjmp	.+22     	; 0x42c8 <__vector_55+0x6c>
    42b2:	e1 e3       	ldi	r30, 0x31	; 49
    42b4:	f1 e0       	ldi	r31, 0x01	; 1
    42b6:	80 81       	ld	r24, Z
    42b8:	8f 7d       	andi	r24, 0xDF	; 223
    42ba:	80 83       	st	Z, r24
    42bc:	05 c0       	rjmp	.+10     	; 0x42c8 <__vector_55+0x6c>
    42be:	e1 e3       	ldi	r30, 0x31	; 49
    42c0:	f1 e0       	ldi	r31, 0x01	; 1
    42c2:	80 81       	ld	r24, Z
    42c4:	8f 7d       	andi	r24, 0xDF	; 223
    42c6:	80 83       	st	Z, r24
    42c8:	ff 91       	pop	r31
    42ca:	ef 91       	pop	r30
    42cc:	bf 91       	pop	r27
    42ce:	af 91       	pop	r26
    42d0:	9f 91       	pop	r25
    42d2:	8f 91       	pop	r24
    42d4:	2f 91       	pop	r18
    42d6:	0f 90       	pop	r0
    42d8:	0b be       	out	0x3b, r0	; 59
    42da:	0f 90       	pop	r0
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	0f 90       	pop	r0
    42e0:	1f 90       	pop	r1
    42e2:	18 95       	reti

000042e4 <usart_getchar>:
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	1f 92       	push	r1
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	be 01       	movw	r22, r28
    42f0:	6f 5f       	subi	r22, 0xFF	; 255
    42f2:	7f 4f       	sbci	r23, 0xFF	; 255
    42f4:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <_com_serial_instance>
    42f8:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <_com_serial_instance+0x1>
    42fc:	7b dd       	rcall	.-1290   	; 0x3df4 <serial_getByte>
    42fe:	81 11       	cpse	r24, r1
    4300:	f6 cf       	rjmp	.-20     	; 0x42ee <usart_getchar+0xa>
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0f 90       	pop	r0
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	08 95       	ret

0000430e <usart_putchar>:
    430e:	68 2f       	mov	r22, r24
    4310:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <_com_serial_instance>
    4314:	90 91 15 0f 	lds	r25, 0x0F15	; 0x800f15 <_com_serial_instance+0x1>
    4318:	ed dc       	rcall	.-1574   	; 0x3cf4 <serial_sendByte>
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	08 95       	ret

00004320 <stdio_initialise>:
    4320:	8f 92       	push	r8
    4322:	9f 92       	push	r9
    4324:	af 92       	push	r10
    4326:	cf 92       	push	r12
    4328:	ef 92       	push	r14
    432a:	0f 93       	push	r16
    432c:	81 2c       	mov	r8, r1
    432e:	91 2c       	mov	r9, r1
    4330:	68 94       	set
    4332:	aa 24       	eor	r10, r10
    4334:	a7 f8       	bld	r10, 7
    4336:	68 94       	set
    4338:	cc 24       	eor	r12, r12
    433a:	c7 f8       	bld	r12, 7
    433c:	e1 2c       	mov	r14, r1
    433e:	00 e0       	ldi	r16, 0x00	; 0
    4340:	23 e0       	ldi	r18, 0x03	; 3
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	51 ee       	ldi	r21, 0xE1	; 225
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	33 dc       	rcall	.-1946   	; 0x3bb2 <serial_create>
    434c:	90 93 15 0f 	sts	0x0F15, r25	; 0x800f15 <_com_serial_instance+0x1>
    4350:	80 93 14 0f 	sts	0x0F14, r24	; 0x800f14 <_com_serial_instance>
    4354:	e2 e4       	ldi	r30, 0x42	; 66
    4356:	ff e0       	ldi	r31, 0x0F	; 15
    4358:	83 e1       	ldi	r24, 0x13	; 19
    435a:	92 e0       	ldi	r25, 0x02	; 2
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	80 83       	st	Z, r24
    4360:	93 83       	std	Z+3, r25	; 0x03
    4362:	82 83       	std	Z+2, r24	; 0x02
    4364:	0f 91       	pop	r16
    4366:	ef 90       	pop	r14
    4368:	cf 90       	pop	r12
    436a:	af 90       	pop	r10
    436c:	9f 90       	pop	r9
    436e:	8f 90       	pop	r8
    4370:	08 95       	ret

00004372 <_select_instance>:
    4372:	e0 91 17 0f 	lds	r30, 0x0F17	; 0x800f17 <_this>
    4376:	f0 91 18 0f 	lds	r31, 0x0F18	; 0x800f18 <_this+0x1>
    437a:	30 97       	sbiw	r30, 0x00	; 0
    437c:	f9 f0       	breq	.+62     	; 0x43bc <_select_instance+0x4a>
    437e:	a0 81       	ld	r26, Z
    4380:	b1 81       	ldd	r27, Z+1	; 0x01
    4382:	10 97       	sbiw	r26, 0x00	; 0
    4384:	d9 f0       	breq	.+54     	; 0x43bc <_select_instance+0x4a>
    4386:	23 81       	ldd	r18, Z+3	; 0x03
    4388:	21 30       	cpi	r18, 0x01	; 1
    438a:	69 f4       	brne	.+26     	; 0x43a6 <_select_instance+0x34>
    438c:	4c 91       	ld	r20, X
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	02 80       	ldd	r0, Z+2	; 0x02
    4394:	02 c0       	rjmp	.+4      	; 0x439a <_select_instance+0x28>
    4396:	22 0f       	add	r18, r18
    4398:	33 1f       	adc	r19, r19
    439a:	0a 94       	dec	r0
    439c:	e2 f7       	brpl	.-8      	; 0x4396 <_select_instance+0x24>
    439e:	20 95       	com	r18
    43a0:	24 23       	and	r18, r20
    43a2:	2c 93       	st	X, r18
    43a4:	0b c0       	rjmp	.+22     	; 0x43bc <_select_instance+0x4a>
    43a6:	4c 91       	ld	r20, X
    43a8:	21 e0       	ldi	r18, 0x01	; 1
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	02 80       	ldd	r0, Z+2	; 0x02
    43ae:	02 c0       	rjmp	.+4      	; 0x43b4 <_select_instance+0x42>
    43b0:	22 0f       	add	r18, r18
    43b2:	33 1f       	adc	r19, r19
    43b4:	0a 94       	dec	r0
    43b6:	e2 f7       	brpl	.-8      	; 0x43b0 <_select_instance+0x3e>
    43b8:	24 2b       	or	r18, r20
    43ba:	2c 93       	st	X, r18
    43bc:	90 93 18 0f 	sts	0x0F18, r25	; 0x800f18 <_this+0x1>
    43c0:	80 93 17 0f 	sts	0x0F17, r24	; 0x800f17 <_this>
    43c4:	00 97       	sbiw	r24, 0x00	; 0
    43c6:	69 f0       	breq	.+26     	; 0x43e2 <_select_instance+0x70>
    43c8:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <_spi_active>
    43cc:	2c b5       	in	r18, 0x2c	; 44
    43ce:	2f 73       	andi	r18, 0x3F	; 63
    43d0:	2c bd       	out	0x2c, r18	; 44
    43d2:	fc 01       	movw	r30, r24
    43d4:	24 81       	ldd	r18, Z+4	; 0x04
    43d6:	2c bd       	out	0x2c, r18	; 44
    43d8:	85 81       	ldd	r24, Z+5	; 0x05
    43da:	8d bd       	out	0x2d, r24	; 45
    43dc:	8c b5       	in	r24, 0x2c	; 44
    43de:	80 64       	ori	r24, 0x40	; 64
    43e0:	8c bd       	out	0x2c, r24	; 44
    43e2:	08 95       	ret

000043e4 <spi_create>:
    43e4:	4f 92       	push	r4
    43e6:	5f 92       	push	r5
    43e8:	6f 92       	push	r6
    43ea:	7f 92       	push	r7
    43ec:	8f 92       	push	r8
    43ee:	9f 92       	push	r9
    43f0:	af 92       	push	r10
    43f2:	bf 92       	push	r11
    43f4:	cf 92       	push	r12
    43f6:	df 92       	push	r13
    43f8:	ef 92       	push	r14
    43fa:	ff 92       	push	r15
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	cd b7       	in	r28, 0x3d	; 61
    4406:	de b7       	in	r29, 0x3e	; 62
    4408:	98 2e       	mov	r9, r24
    440a:	b6 2e       	mov	r11, r22
    440c:	d4 2e       	mov	r13, r20
    440e:	f2 2e       	mov	r15, r18
    4410:	80 91 16 0f 	lds	r24, 0x0F16	; 0x800f16 <_initialised>
    4414:	81 11       	cpse	r24, r1
    4416:	06 c0       	rjmp	.+12     	; 0x4424 <spi_create+0x40>
    4418:	84 b1       	in	r24, 0x04	; 4
    441a:	87 60       	ori	r24, 0x07	; 7
    441c:	84 b9       	out	0x04, r24	; 4
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	80 93 16 0f 	sts	0x0F16, r24	; 0x800f16 <_initialised>
    4424:	8c e0       	ldi	r24, 0x0C	; 12
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	c0 d5       	rcall	.+2944   	; 0x4faa <malloc>
    442a:	3c 01       	movw	r6, r24
    442c:	dc 01       	movw	r26, r24
    442e:	11 96       	adiw	r26, 0x01	; 1
    4430:	1c 93       	st	X, r17
    4432:	0e 93       	st	-X, r16
    4434:	12 96       	adiw	r26, 0x02	; 2
    4436:	ec 92       	st	X, r14
    4438:	12 97       	sbiw	r26, 0x02	; 2
    443a:	13 96       	adiw	r26, 0x03	; 3
    443c:	cc 92       	st	X, r12
    443e:	13 97       	sbiw	r26, 0x03	; 3
    4440:	8d 2d       	mov	r24, r13
    4442:	88 0f       	add	r24, r24
    4444:	88 0f       	add	r24, r24
    4446:	f8 2a       	or	r15, r24
    4448:	eb 2d       	mov	r30, r11
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	ec 5f       	subi	r30, 0xFC	; 252
    444e:	fb 4f       	sbci	r31, 0xFB	; 251
    4450:	80 81       	ld	r24, Z
    4452:	98 2a       	or	r9, r24
    4454:	8f 2d       	mov	r24, r15
    4456:	89 29       	or	r24, r9
    4458:	14 96       	adiw	r26, 0x04	; 4
    445a:	8c 93       	st	X, r24
    445c:	b3 e0       	ldi	r27, 0x03	; 3
    445e:	bb 15       	cp	r27, r11
    4460:	18 f4       	brcc	.+6      	; 0x4468 <spi_create+0x84>
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	f3 01       	movw	r30, r6
    4466:	85 83       	std	Z+5, r24	; 0x05
    4468:	a1 10       	cpse	r10, r1
    446a:	06 c0       	rjmp	.+12     	; 0x4478 <spi_create+0x94>
    446c:	d3 01       	movw	r26, r6
    446e:	19 96       	adiw	r26, 0x09	; 9
    4470:	1c 92       	st	X, r1
    4472:	1e 92       	st	-X, r1
    4474:	18 97       	sbiw	r26, 0x08	; 8
    4476:	12 c0       	rjmp	.+36     	; 0x449c <spi_create+0xb8>
    4478:	6a 2d       	mov	r22, r10
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	84 e0       	ldi	r24, 0x04	; 4
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	7a d5       	rcall	.+2804   	; 0x4f76 <calloc>
    4482:	2c 01       	movw	r4, r24
    4484:	61 e0       	ldi	r22, 0x01	; 1
    4486:	70 e0       	ldi	r23, 0x00	; 0
    4488:	86 e0       	ldi	r24, 0x06	; 6
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	74 d5       	rcall	.+2792   	; 0x4f76 <calloc>
    448e:	6c 01       	movw	r12, r24
    4490:	4a 2d       	mov	r20, r10
    4492:	b2 01       	movw	r22, r4
    4494:	27 d3       	rcall	.+1614   	; 0x4ae4 <fifo_init>
    4496:	f3 01       	movw	r30, r6
    4498:	d1 86       	std	Z+9, r13	; 0x09
    449a:	c0 86       	std	Z+8, r12	; 0x08
    449c:	81 10       	cpse	r8, r1
    449e:	06 c0       	rjmp	.+12     	; 0x44ac <spi_create+0xc8>
    44a0:	d3 01       	movw	r26, r6
    44a2:	17 96       	adiw	r26, 0x07	; 7
    44a4:	1c 92       	st	X, r1
    44a6:	1e 92       	st	-X, r1
    44a8:	16 97       	sbiw	r26, 0x06	; 6
    44aa:	12 c0       	rjmp	.+36     	; 0x44d0 <spi_create+0xec>
    44ac:	68 2d       	mov	r22, r8
    44ae:	70 e0       	ldi	r23, 0x00	; 0
    44b0:	84 e0       	ldi	r24, 0x04	; 4
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	60 d5       	rcall	.+2752   	; 0x4f76 <calloc>
    44b6:	5c 01       	movw	r10, r24
    44b8:	61 e0       	ldi	r22, 0x01	; 1
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	86 e0       	ldi	r24, 0x06	; 6
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	5a d5       	rcall	.+2740   	; 0x4f76 <calloc>
    44c2:	6c 01       	movw	r12, r24
    44c4:	48 2d       	mov	r20, r8
    44c6:	b5 01       	movw	r22, r10
    44c8:	0d d3       	rcall	.+1562   	; 0x4ae4 <fifo_init>
    44ca:	f3 01       	movw	r30, r6
    44cc:	d7 82       	std	Z+7, r13	; 0x07
    44ce:	c6 82       	std	Z+6, r12	; 0x06
    44d0:	8c 89       	ldd	r24, Y+20	; 0x14
    44d2:	9d 89       	ldd	r25, Y+21	; 0x15
    44d4:	d3 01       	movw	r26, r6
    44d6:	1b 96       	adiw	r26, 0x0b	; 11
    44d8:	9c 93       	st	X, r25
    44da:	8e 93       	st	-X, r24
    44dc:	1a 97       	sbiw	r26, 0x0a	; 10
    44de:	01 15       	cp	r16, r1
    44e0:	11 05       	cpc	r17, r1
    44e2:	59 f0       	breq	.+22     	; 0x44fa <spi_create+0x116>
    44e4:	f8 01       	movw	r30, r16
    44e6:	22 91       	ld	r18, -Z
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	02 c0       	rjmp	.+4      	; 0x44f2 <spi_create+0x10e>
    44ee:	88 0f       	add	r24, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	ea 94       	dec	r14
    44f4:	e2 f7       	brpl	.-8      	; 0x44ee <spi_create+0x10a>
    44f6:	82 2b       	or	r24, r18
    44f8:	80 83       	st	Z, r24
    44fa:	2f b7       	in	r18, 0x3f	; 63
    44fc:	f8 94       	cli
    44fe:	40 91 17 0f 	lds	r20, 0x0F17	; 0x800f17 <_this>
    4502:	50 91 18 0f 	lds	r21, 0x0F18	; 0x800f18 <_this+0x1>
    4506:	70 92 18 0f 	sts	0x0F18, r7	; 0x800f18 <_this+0x1>
    450a:	60 92 17 0f 	sts	0x0F17, r6	; 0x800f17 <_this>
    450e:	d3 01       	movw	r26, r6
    4510:	ed 91       	ld	r30, X+
    4512:	fc 91       	ld	r31, X
    4514:	11 97       	sbiw	r26, 0x01	; 1
    4516:	30 97       	sbiw	r30, 0x00	; 0
    4518:	01 f1       	breq	.+64     	; 0x455a <spi_create+0x176>
    451a:	13 96       	adiw	r26, 0x03	; 3
    451c:	8c 91       	ld	r24, X
    451e:	13 97       	sbiw	r26, 0x03	; 3
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	71 f4       	brne	.+28     	; 0x4540 <spi_create+0x15c>
    4524:	30 81       	ld	r19, Z
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	12 96       	adiw	r26, 0x02	; 2
    452c:	0c 90       	ld	r0, X
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <spi_create+0x150>
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	0a 94       	dec	r0
    4536:	e2 f7       	brpl	.-8      	; 0x4530 <spi_create+0x14c>
    4538:	80 95       	com	r24
    453a:	83 23       	and	r24, r19
    453c:	80 83       	st	Z, r24
    453e:	0d c0       	rjmp	.+26     	; 0x455a <spi_create+0x176>
    4540:	30 81       	ld	r19, Z
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	d3 01       	movw	r26, r6
    4548:	12 96       	adiw	r26, 0x02	; 2
    454a:	0c 90       	ld	r0, X
    454c:	02 c0       	rjmp	.+4      	; 0x4552 <spi_create+0x16e>
    454e:	88 0f       	add	r24, r24
    4550:	99 1f       	adc	r25, r25
    4552:	0a 94       	dec	r0
    4554:	e2 f7       	brpl	.-8      	; 0x454e <spi_create+0x16a>
    4556:	83 2b       	or	r24, r19
    4558:	80 83       	st	Z, r24
    455a:	50 93 18 0f 	sts	0x0F18, r21	; 0x800f18 <_this+0x1>
    455e:	40 93 17 0f 	sts	0x0F17, r20	; 0x800f17 <_this>
    4562:	2f bf       	out	0x3f, r18	; 63
    4564:	c3 01       	movw	r24, r6
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	ff 90       	pop	r15
    4570:	ef 90       	pop	r14
    4572:	df 90       	pop	r13
    4574:	cf 90       	pop	r12
    4576:	bf 90       	pop	r11
    4578:	af 90       	pop	r10
    457a:	9f 90       	pop	r9
    457c:	8f 90       	pop	r8
    457e:	7f 90       	pop	r7
    4580:	6f 90       	pop	r6
    4582:	5f 90       	pop	r5
    4584:	4f 90       	pop	r4
    4586:	08 95       	ret

00004588 <spi_sendByte>:
    4588:	1f 93       	push	r17
    458a:	cf 93       	push	r28
    458c:	df 93       	push	r29
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	09 f4       	brne	.+2      	; 0x4594 <spi_sendByte+0xc>
    4592:	6a c0       	rjmp	.+212    	; 0x4668 <spi_sendByte+0xe0>
    4594:	16 2f       	mov	r17, r22
    4596:	ec 01       	movw	r28, r24
    4598:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_this>
    459c:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_this+0x1>
    45a0:	c8 17       	cp	r28, r24
    45a2:	d9 07       	cpc	r29, r25
    45a4:	11 f0       	breq	.+4      	; 0x45aa <spi_sendByte+0x22>
    45a6:	ce 01       	movw	r24, r28
    45a8:	e4 de       	rcall	.-568    	; 0x4372 <_select_instance>
    45aa:	8f b7       	in	r24, 0x3f	; 63
    45ac:	2f b7       	in	r18, 0x3f	; 63
    45ae:	f8 94       	cli
    45b0:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_spi_active>
    45b4:	81 11       	cpse	r24, r1
    45b6:	31 c0       	rjmp	.+98     	; 0x461a <spi_sendByte+0x92>
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	80 93 19 0f 	sts	0x0F19, r24	; 0x800f19 <_spi_active>
    45be:	a0 91 17 0f 	lds	r26, 0x0F17	; 0x800f17 <_this>
    45c2:	b0 91 18 0f 	lds	r27, 0x0F18	; 0x800f18 <_this+0x1>
    45c6:	ed 91       	ld	r30, X+
    45c8:	fc 91       	ld	r31, X
    45ca:	11 97       	sbiw	r26, 0x01	; 1
    45cc:	30 97       	sbiw	r30, 0x00	; 0
    45ce:	f9 f0       	breq	.+62     	; 0x460e <spi_sendByte+0x86>
    45d0:	13 96       	adiw	r26, 0x03	; 3
    45d2:	8c 91       	ld	r24, X
    45d4:	13 97       	sbiw	r26, 0x03	; 3
    45d6:	81 30       	cpi	r24, 0x01	; 1
    45d8:	69 f4       	brne	.+26     	; 0x45f4 <spi_sendByte+0x6c>
    45da:	30 81       	ld	r19, Z
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	12 96       	adiw	r26, 0x02	; 2
    45e2:	0c 90       	ld	r0, X
    45e4:	02 c0       	rjmp	.+4      	; 0x45ea <spi_sendByte+0x62>
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	0a 94       	dec	r0
    45ec:	e2 f7       	brpl	.-8      	; 0x45e6 <spi_sendByte+0x5e>
    45ee:	83 2b       	or	r24, r19
    45f0:	80 83       	st	Z, r24
    45f2:	0d c0       	rjmp	.+26     	; 0x460e <spi_sendByte+0x86>
    45f4:	30 81       	ld	r19, Z
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	12 96       	adiw	r26, 0x02	; 2
    45fc:	0c 90       	ld	r0, X
    45fe:	02 c0       	rjmp	.+4      	; 0x4604 <spi_sendByte+0x7c>
    4600:	88 0f       	add	r24, r24
    4602:	99 1f       	adc	r25, r25
    4604:	0a 94       	dec	r0
    4606:	e2 f7       	brpl	.-8      	; 0x4600 <spi_sendByte+0x78>
    4608:	80 95       	com	r24
    460a:	83 23       	and	r24, r19
    460c:	80 83       	st	Z, r24
    460e:	8c b5       	in	r24, 0x2c	; 44
    4610:	80 68       	ori	r24, 0x80	; 128
    4612:	8c bd       	out	0x2c, r24	; 44
    4614:	1e bd       	out	0x2e, r17	; 46
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	25 c0       	rjmp	.+74     	; 0x4664 <spi_sendByte+0xdc>
    461a:	ee 81       	ldd	r30, Y+6	; 0x06
    461c:	ff 81       	ldd	r31, Y+7	; 0x07
    461e:	30 97       	sbiw	r30, 0x00	; 0
    4620:	e1 f0       	breq	.+56     	; 0x465a <spi_sendByte+0xd2>
    4622:	34 81       	ldd	r19, Z+4	; 0x04
    4624:	83 81       	ldd	r24, Z+3	; 0x03
    4626:	42 81       	ldd	r20, Z+2	; 0x02
    4628:	95 81       	ldd	r25, Z+5	; 0x05
    462a:	84 1b       	sub	r24, r20
    462c:	89 23       	and	r24, r25
    462e:	38 17       	cp	r19, r24
    4630:	b1 f0       	breq	.+44     	; 0x465e <spi_sendByte+0xd6>
    4632:	83 81       	ldd	r24, Z+3	; 0x03
    4634:	42 81       	ldd	r20, Z+2	; 0x02
    4636:	84 1b       	sub	r24, r20
    4638:	89 23       	and	r24, r25
    463a:	38 17       	cp	r19, r24
    463c:	91 f0       	breq	.+36     	; 0x4662 <spi_sendByte+0xda>
    463e:	83 81       	ldd	r24, Z+3	; 0x03
    4640:	96 95       	lsr	r25
    4642:	98 23       	and	r25, r24
    4644:	a0 81       	ld	r26, Z
    4646:	b1 81       	ldd	r27, Z+1	; 0x01
    4648:	a9 0f       	add	r26, r25
    464a:	b1 1d       	adc	r27, r1
    464c:	1c 93       	st	X, r17
    464e:	8f 5f       	subi	r24, 0xFF	; 255
    4650:	95 81       	ldd	r25, Z+5	; 0x05
    4652:	89 23       	and	r24, r25
    4654:	83 83       	std	Z+3, r24	; 0x03
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	05 c0       	rjmp	.+10     	; 0x4664 <spi_sendByte+0xdc>
    465a:	82 e0       	ldi	r24, 0x02	; 2
    465c:	03 c0       	rjmp	.+6      	; 0x4664 <spi_sendByte+0xdc>
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <spi_sendByte+0xdc>
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	2f bf       	out	0x3f, r18	; 63
    4666:	01 c0       	rjmp	.+2      	; 0x466a <spi_sendByte+0xe2>
    4668:	83 e0       	ldi	r24, 0x03	; 3
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	08 95       	ret

00004672 <__vector_24>:
    4672:	1f 92       	push	r1
    4674:	0f 92       	push	r0
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	0f 92       	push	r0
    467a:	11 24       	eor	r1, r1
    467c:	0b b6       	in	r0, 0x3b	; 59
    467e:	0f 92       	push	r0
    4680:	2f 93       	push	r18
    4682:	3f 93       	push	r19
    4684:	4f 93       	push	r20
    4686:	5f 93       	push	r21
    4688:	6f 93       	push	r22
    468a:	7f 93       	push	r23
    468c:	8f 93       	push	r24
    468e:	9f 93       	push	r25
    4690:	af 93       	push	r26
    4692:	bf 93       	push	r27
    4694:	cf 93       	push	r28
    4696:	df 93       	push	r29
    4698:	ef 93       	push	r30
    469a:	ff 93       	push	r31
    469c:	6e b5       	in	r22, 0x2e	; 46
    469e:	a0 91 17 0f 	lds	r26, 0x0F17	; 0x800f17 <_this>
    46a2:	b0 91 18 0f 	lds	r27, 0x0F18	; 0x800f18 <_this+0x1>
    46a6:	18 96       	adiw	r26, 0x08	; 8
    46a8:	ed 91       	ld	r30, X+
    46aa:	fc 91       	ld	r31, X
    46ac:	19 97       	sbiw	r26, 0x09	; 9
    46ae:	30 97       	sbiw	r30, 0x00	; 0
    46b0:	a1 f0       	breq	.+40     	; 0x46da <__vector_24+0x68>
    46b2:	83 81       	ldd	r24, Z+3	; 0x03
    46b4:	22 81       	ldd	r18, Z+2	; 0x02
    46b6:	95 81       	ldd	r25, Z+5	; 0x05
    46b8:	82 1b       	sub	r24, r18
    46ba:	89 23       	and	r24, r25
    46bc:	24 81       	ldd	r18, Z+4	; 0x04
    46be:	82 17       	cp	r24, r18
    46c0:	61 f0       	breq	.+24     	; 0x46da <__vector_24+0x68>
    46c2:	83 81       	ldd	r24, Z+3	; 0x03
    46c4:	96 95       	lsr	r25
    46c6:	98 23       	and	r25, r24
    46c8:	c0 81       	ld	r28, Z
    46ca:	d1 81       	ldd	r29, Z+1	; 0x01
    46cc:	c9 0f       	add	r28, r25
    46ce:	d1 1d       	adc	r29, r1
    46d0:	68 83       	st	Y, r22
    46d2:	8f 5f       	subi	r24, 0xFF	; 255
    46d4:	95 81       	ldd	r25, Z+5	; 0x05
    46d6:	89 23       	and	r24, r25
    46d8:	83 83       	std	Z+3, r24	; 0x03
    46da:	16 96       	adiw	r26, 0x06	; 6
    46dc:	ed 91       	ld	r30, X+
    46de:	fc 91       	ld	r31, X
    46e0:	17 97       	sbiw	r26, 0x07	; 7
    46e2:	30 97       	sbiw	r30, 0x00	; 0
    46e4:	99 f0       	breq	.+38     	; 0x470c <__vector_24+0x9a>
    46e6:	93 81       	ldd	r25, Z+3	; 0x03
    46e8:	82 81       	ldd	r24, Z+2	; 0x02
    46ea:	98 17       	cp	r25, r24
    46ec:	79 f0       	breq	.+30     	; 0x470c <__vector_24+0x9a>
    46ee:	92 81       	ldd	r25, Z+2	; 0x02
    46f0:	85 81       	ldd	r24, Z+5	; 0x05
    46f2:	28 2f       	mov	r18, r24
    46f4:	26 95       	lsr	r18
    46f6:	29 23       	and	r18, r25
    46f8:	a0 81       	ld	r26, Z
    46fa:	b1 81       	ldd	r27, Z+1	; 0x01
    46fc:	a2 0f       	add	r26, r18
    46fe:	b1 1d       	adc	r27, r1
    4700:	2c 91       	ld	r18, X
    4702:	9f 5f       	subi	r25, 0xFF	; 255
    4704:	89 23       	and	r24, r25
    4706:	82 83       	std	Z+2, r24	; 0x02
    4708:	2e bd       	out	0x2e, r18	; 46
    470a:	2d c0       	rjmp	.+90     	; 0x4766 <__vector_24+0xf4>
    470c:	8c b5       	in	r24, 0x2c	; 44
    470e:	8f 77       	andi	r24, 0x7F	; 127
    4710:	8c bd       	out	0x2c, r24	; 44
    4712:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <_spi_active>
    4716:	a0 91 17 0f 	lds	r26, 0x0F17	; 0x800f17 <_this>
    471a:	b0 91 18 0f 	lds	r27, 0x0F18	; 0x800f18 <_this+0x1>
    471e:	ed 91       	ld	r30, X+
    4720:	fc 91       	ld	r31, X
    4722:	11 97       	sbiw	r26, 0x01	; 1
    4724:	30 97       	sbiw	r30, 0x00	; 0
    4726:	f9 f0       	breq	.+62     	; 0x4766 <__vector_24+0xf4>
    4728:	13 96       	adiw	r26, 0x03	; 3
    472a:	8c 91       	ld	r24, X
    472c:	13 97       	sbiw	r26, 0x03	; 3
    472e:	81 30       	cpi	r24, 0x01	; 1
    4730:	71 f4       	brne	.+28     	; 0x474e <__vector_24+0xdc>
    4732:	20 81       	ld	r18, Z
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	12 96       	adiw	r26, 0x02	; 2
    473a:	0c 90       	ld	r0, X
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <__vector_24+0xd0>
    473e:	88 0f       	add	r24, r24
    4740:	99 1f       	adc	r25, r25
    4742:	0a 94       	dec	r0
    4744:	e2 f7       	brpl	.-8      	; 0x473e <__vector_24+0xcc>
    4746:	80 95       	com	r24
    4748:	82 23       	and	r24, r18
    474a:	80 83       	st	Z, r24
    474c:	0c c0       	rjmp	.+24     	; 0x4766 <__vector_24+0xf4>
    474e:	20 81       	ld	r18, Z
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	12 96       	adiw	r26, 0x02	; 2
    4756:	0c 90       	ld	r0, X
    4758:	02 c0       	rjmp	.+4      	; 0x475e <__vector_24+0xec>
    475a:	88 0f       	add	r24, r24
    475c:	99 1f       	adc	r25, r25
    475e:	0a 94       	dec	r0
    4760:	e2 f7       	brpl	.-8      	; 0x475a <__vector_24+0xe8>
    4762:	82 2b       	or	r24, r18
    4764:	80 83       	st	Z, r24
    4766:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_this>
    476a:	90 91 18 0f 	lds	r25, 0x0F18	; 0x800f18 <_this+0x1>
    476e:	dc 01       	movw	r26, r24
    4770:	1a 96       	adiw	r26, 0x0a	; 10
    4772:	ed 91       	ld	r30, X+
    4774:	fc 91       	ld	r31, X
    4776:	1b 97       	sbiw	r26, 0x0b	; 11
    4778:	30 97       	sbiw	r30, 0x00	; 0
    477a:	09 f0       	breq	.+2      	; 0x477e <__vector_24+0x10c>
    477c:	19 95       	eicall
    477e:	ff 91       	pop	r31
    4780:	ef 91       	pop	r30
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	bf 91       	pop	r27
    4788:	af 91       	pop	r26
    478a:	9f 91       	pop	r25
    478c:	8f 91       	pop	r24
    478e:	7f 91       	pop	r23
    4790:	6f 91       	pop	r22
    4792:	5f 91       	pop	r21
    4794:	4f 91       	pop	r20
    4796:	3f 91       	pop	r19
    4798:	2f 91       	pop	r18
    479a:	0f 90       	pop	r0
    479c:	0b be       	out	0x3b, r0	; 59
    479e:	0f 90       	pop	r0
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	0f 90       	pop	r0
    47a4:	1f 90       	pop	r1
    47a6:	18 95       	reti

000047a8 <_initTwiInterface>:
    47a8:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <_twiIsInitiated>
    47ac:	81 11       	cpse	r24, r1
    47ae:	0c c0       	rjmp	.+24     	; 0x47c8 <_initTwiInterface+0x20>
    47b0:	8c e0       	ldi	r24, 0x0C	; 12
    47b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    47b6:	8f ef       	ldi	r24, 0xFF	; 255
    47b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    47bc:	84 e0       	ldi	r24, 0x04	; 4
    47be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	80 93 28 0f 	sts	0x0F28, r24	; 0x800f28 <_twiIsInitiated>
    47c8:	08 95       	ret

000047ca <twiCreate>:
    47ca:	af 92       	push	r10
    47cc:	bf 92       	push	r11
    47ce:	cf 92       	push	r12
    47d0:	df 92       	push	r13
    47d2:	ef 92       	push	r14
    47d4:	ff 92       	push	r15
    47d6:	0f 93       	push	r16
    47d8:	1f 93       	push	r17
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	a8 2e       	mov	r10, r24
    47e0:	b6 2e       	mov	r11, r22
    47e2:	69 01       	movw	r12, r18
    47e4:	7a 01       	movw	r14, r20
    47e6:	84 e0       	ldi	r24, 0x04	; 4
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	df d3       	rcall	.+1982   	; 0x4faa <malloc>
    47ec:	ec 01       	movw	r28, r24
    47ee:	89 2b       	or	r24, r25
    47f0:	61 f1       	breq	.+88     	; 0x484a <twiCreate+0x80>
    47f2:	a8 82       	st	Y, r10
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	b8 12       	cpse	r11, r24
    47f8:	12 c0       	rjmp	.+36     	; 0x481e <twiCreate+0x54>
    47fa:	c7 01       	movw	r24, r14
    47fc:	b6 01       	movw	r22, r12
    47fe:	20 ea       	ldi	r18, 0xA0	; 160
    4800:	36 e8       	ldi	r19, 0x86	; 134
    4802:	41 e0       	ldi	r20, 0x01	; 1
    4804:	50 e0       	ldi	r21, 0x00	; 0
    4806:	60 d3       	rcall	.+1728   	; 0x4ec8 <__udivmodsi4>
    4808:	da 01       	movw	r26, r20
    480a:	c9 01       	movw	r24, r18
    480c:	40 97       	sbiw	r24, 0x10	; 16
    480e:	a1 09       	sbc	r26, r1
    4810:	b1 09       	sbc	r27, r1
    4812:	b6 95       	lsr	r27
    4814:	a7 95       	ror	r26
    4816:	97 95       	ror	r25
    4818:	87 95       	ror	r24
    481a:	89 83       	std	Y+1, r24	; 0x01
    481c:	11 c0       	rjmp	.+34     	; 0x4840 <twiCreate+0x76>
    481e:	c7 01       	movw	r24, r14
    4820:	b6 01       	movw	r22, r12
    4822:	20 e8       	ldi	r18, 0x80	; 128
    4824:	3a e1       	ldi	r19, 0x1A	; 26
    4826:	46 e0       	ldi	r20, 0x06	; 6
    4828:	50 e0       	ldi	r21, 0x00	; 0
    482a:	4e d3       	rcall	.+1692   	; 0x4ec8 <__udivmodsi4>
    482c:	da 01       	movw	r26, r20
    482e:	c9 01       	movw	r24, r18
    4830:	40 97       	sbiw	r24, 0x10	; 16
    4832:	a1 09       	sbc	r26, r1
    4834:	b1 09       	sbc	r27, r1
    4836:	b6 95       	lsr	r27
    4838:	a7 95       	ror	r26
    483a:	97 95       	ror	r25
    483c:	87 95       	ror	r24
    483e:	89 83       	std	Y+1, r24	; 0x01
    4840:	1b 83       	std	Y+3, r17	; 0x03
    4842:	0a 83       	std	Y+2, r16	; 0x02
    4844:	8c 2f       	mov	r24, r28
    4846:	9d 2f       	mov	r25, r29
    4848:	02 c0       	rjmp	.+4      	; 0x484e <twiCreate+0x84>
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	1f 91       	pop	r17
    4854:	0f 91       	pop	r16
    4856:	ff 90       	pop	r15
    4858:	ef 90       	pop	r14
    485a:	df 90       	pop	r13
    485c:	cf 90       	pop	r12
    485e:	bf 90       	pop	r11
    4860:	af 90       	pop	r10
    4862:	08 95       	ret

00004864 <twiIsBusy>:
    4864:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4868:	81 70       	andi	r24, 0x01	; 1
    486a:	08 95       	ret

0000486c <twiTransmit>:
    486c:	ff 92       	push	r15
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	d1 f1       	breq	.+116    	; 0x48ee <twiTransmit+0x82>
    487a:	4a 30       	cpi	r20, 0x0A	; 10
    487c:	d0 f5       	brcc	.+116    	; 0x48f2 <twiTransmit+0x86>
    487e:	f4 2e       	mov	r15, r20
    4880:	8b 01       	movw	r16, r22
    4882:	ec 01       	movw	r28, r24
    4884:	ef df       	rcall	.-34     	; 0x4864 <twiIsBusy>
    4886:	81 11       	cpse	r24, r1
    4888:	36 c0       	rjmp	.+108    	; 0x48f6 <twiTransmit+0x8a>
    488a:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiCurrentHandler>
    488e:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <_twiCurrentHandler+0x1>
    4892:	c8 17       	cp	r28, r24
    4894:	d9 07       	cpc	r29, r25
    4896:	41 f0       	breq	.+16     	; 0x48a8 <twiTransmit+0x3c>
    4898:	87 df       	rcall	.-242    	; 0x47a8 <_initTwiInterface>
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    48a0:	d0 93 1c 0f 	sts	0x0F1C, r29	; 0x800f1c <_twiCurrentHandler+0x1>
    48a4:	c0 93 1b 0f 	sts	0x0F1B, r28	; 0x800f1b <_twiCurrentHandler>
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	8f 0d       	add	r24, r15
    48ac:	80 93 1d 0f 	sts	0x0F1D, r24	; 0x800f1d <_twiMessageLen>
    48b0:	88 81       	ld	r24, Y
    48b2:	88 0f       	add	r24, r24
    48b4:	80 93 1e 0f 	sts	0x0F1E, r24	; 0x800f1e <_twiMessageBuffer>
    48b8:	ff 20       	and	r15, r15
    48ba:	89 f0       	breq	.+34     	; 0x48de <twiTransmit+0x72>
    48bc:	f8 01       	movw	r30, r16
    48be:	af e1       	ldi	r26, 0x1F	; 31
    48c0:	bf e0       	ldi	r27, 0x0F	; 15
    48c2:	4f ef       	ldi	r20, 0xFF	; 255
    48c4:	4f 0d       	add	r20, r15
    48c6:	64 2f       	mov	r22, r20
    48c8:	70 e0       	ldi	r23, 0x00	; 0
    48ca:	cb 01       	movw	r24, r22
    48cc:	01 96       	adiw	r24, 0x01	; 1
    48ce:	b8 01       	movw	r22, r16
    48d0:	68 0f       	add	r22, r24
    48d2:	79 1f       	adc	r23, r25
    48d4:	81 91       	ld	r24, Z+
    48d6:	8d 93       	st	X+, r24
    48d8:	e6 17       	cp	r30, r22
    48da:	f7 07       	cpc	r31, r23
    48dc:	d9 f7       	brne	.-10     	; 0x48d4 <twiTransmit+0x68>
    48de:	88 ef       	ldi	r24, 0xF8	; 248
    48e0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    48e4:	85 ea       	ldi	r24, 0xA5	; 165
    48e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48ea:	84 e0       	ldi	r24, 0x04	; 4
    48ec:	05 c0       	rjmp	.+10     	; 0x48f8 <twiTransmit+0x8c>
    48ee:	86 e0       	ldi	r24, 0x06	; 6
    48f0:	03 c0       	rjmp	.+6      	; 0x48f8 <twiTransmit+0x8c>
    48f2:	87 e0       	ldi	r24, 0x07	; 7
    48f4:	01 c0       	rjmp	.+2      	; 0x48f8 <twiTransmit+0x8c>
    48f6:	82 e0       	ldi	r24, 0x02	; 2
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	ff 90       	pop	r15
    4902:	08 95       	ret

00004904 <twiReceive>:
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	00 97       	sbiw	r24, 0x00	; 0
    490c:	29 f1       	breq	.+74     	; 0x4958 <twiReceive+0x54>
    490e:	6b 30       	cpi	r22, 0x0B	; 11
    4910:	28 f5       	brcc	.+74     	; 0x495c <twiReceive+0x58>
    4912:	16 2f       	mov	r17, r22
    4914:	ec 01       	movw	r28, r24
    4916:	a6 df       	rcall	.-180    	; 0x4864 <twiIsBusy>
    4918:	81 11       	cpse	r24, r1
    491a:	22 c0       	rjmp	.+68     	; 0x4960 <twiReceive+0x5c>
    491c:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiCurrentHandler>
    4920:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <_twiCurrentHandler+0x1>
    4924:	c8 17       	cp	r28, r24
    4926:	d9 07       	cpc	r29, r25
    4928:	41 f0       	breq	.+16     	; 0x493a <twiReceive+0x36>
    492a:	3e df       	rcall	.-388    	; 0x47a8 <_initTwiInterface>
    492c:	89 81       	ldd	r24, Y+1	; 0x01
    492e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4932:	d0 93 1c 0f 	sts	0x0F1C, r29	; 0x800f1c <_twiCurrentHandler+0x1>
    4936:	c0 93 1b 0f 	sts	0x0F1B, r28	; 0x800f1b <_twiCurrentHandler>
    493a:	10 93 1d 0f 	sts	0x0F1D, r17	; 0x800f1d <_twiMessageLen>
    493e:	88 81       	ld	r24, Y
    4940:	88 0f       	add	r24, r24
    4942:	81 60       	ori	r24, 0x01	; 1
    4944:	80 93 1e 0f 	sts	0x0F1E, r24	; 0x800f1e <_twiMessageBuffer>
    4948:	88 ef       	ldi	r24, 0xF8	; 248
    494a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    494e:	85 ea       	ldi	r24, 0xA5	; 165
    4950:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4954:	85 e0       	ldi	r24, 0x05	; 5
    4956:	05 c0       	rjmp	.+10     	; 0x4962 <twiReceive+0x5e>
    4958:	86 e0       	ldi	r24, 0x06	; 6
    495a:	03 c0       	rjmp	.+6      	; 0x4962 <twiReceive+0x5e>
    495c:	87 e0       	ldi	r24, 0x07	; 7
    495e:	01 c0       	rjmp	.+2      	; 0x4962 <twiReceive+0x5e>
    4960:	82 e0       	ldi	r24, 0x02	; 2
    4962:	df 91       	pop	r29
    4964:	cf 91       	pop	r28
    4966:	1f 91       	pop	r17
    4968:	08 95       	ret

0000496a <__vector_39>:
    496a:	1f 92       	push	r1
    496c:	0f 92       	push	r0
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	0f 92       	push	r0
    4972:	11 24       	eor	r1, r1
    4974:	0b b6       	in	r0, 0x3b	; 59
    4976:	0f 92       	push	r0
    4978:	2f 93       	push	r18
    497a:	3f 93       	push	r19
    497c:	4f 93       	push	r20
    497e:	5f 93       	push	r21
    4980:	6f 93       	push	r22
    4982:	7f 93       	push	r23
    4984:	8f 93       	push	r24
    4986:	9f 93       	push	r25
    4988:	af 93       	push	r26
    498a:	bf 93       	push	r27
    498c:	ef 93       	push	r30
    498e:	ff 93       	push	r31
    4990:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4994:	8e 2f       	mov	r24, r30
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	fc 01       	movw	r30, r24
    499a:	38 97       	sbiw	r30, 0x08	; 8
    499c:	e1 35       	cpi	r30, 0x51	; 81
    499e:	f1 05       	cpc	r31, r1
    49a0:	08 f0       	brcs	.+2      	; 0x49a4 <__vector_39+0x3a>
    49a2:	75 c0       	rjmp	.+234    	; 0x4a8e <__vector_39+0x124>
    49a4:	88 27       	eor	r24, r24
    49a6:	e4 58       	subi	r30, 0x84	; 132
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	8f 4f       	sbci	r24, 0xFF	; 255
    49ac:	af c2       	rjmp	.+1374   	; 0x4f0c <__tablejump2__>
    49ae:	10 92 1a 0f 	sts	0x0F1A, r1	; 0x800f1a <_index.1885>
    49b2:	e0 91 1a 0f 	lds	r30, 0x0F1A	; 0x800f1a <_index.1885>
    49b6:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <_twiMessageLen>
    49ba:	e8 17       	cp	r30, r24
    49bc:	70 f4       	brcc	.+28     	; 0x49da <__vector_39+0x70>
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	8e 0f       	add	r24, r30
    49c2:	80 93 1a 0f 	sts	0x0F1A, r24	; 0x800f1a <_index.1885>
    49c6:	f0 e0       	ldi	r31, 0x00	; 0
    49c8:	e2 5e       	subi	r30, 0xE2	; 226
    49ca:	f0 4f       	sbci	r31, 0xF0	; 240
    49cc:	80 81       	ld	r24, Z
    49ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49d2:	85 e8       	ldi	r24, 0x85	; 133
    49d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49d8:	72 c0       	rjmp	.+228    	; 0x4abe <__vector_39+0x154>
    49da:	84 e9       	ldi	r24, 0x94	; 148
    49dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49e0:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiCurrentHandler>
    49e4:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <_twiCurrentHandler+0x1>
    49e8:	dc 01       	movw	r26, r24
    49ea:	12 96       	adiw	r26, 0x02	; 2
    49ec:	ed 91       	ld	r30, X+
    49ee:	fc 91       	ld	r31, X
    49f0:	13 97       	sbiw	r26, 0x03	; 3
    49f2:	30 97       	sbiw	r30, 0x00	; 0
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <__vector_39+0x8e>
    49f6:	63 c0       	rjmp	.+198    	; 0x4abe <__vector_39+0x154>
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	40 e0       	ldi	r20, 0x00	; 0
    49fc:	50 e0       	ldi	r21, 0x00	; 0
    49fe:	64 e0       	ldi	r22, 0x04	; 4
    4a00:	19 95       	eicall
    4a02:	5d c0       	rjmp	.+186    	; 0x4abe <__vector_39+0x154>
    4a04:	e0 91 1a 0f 	lds	r30, 0x0F1A	; 0x800f1a <_index.1885>
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	8e 0f       	add	r24, r30
    4a0c:	80 93 1a 0f 	sts	0x0F1A, r24	; 0x800f1a <_index.1885>
    4a10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	e2 5e       	subi	r30, 0xE2	; 226
    4a18:	f0 4f       	sbci	r31, 0xF0	; 240
    4a1a:	80 83       	st	Z, r24
    4a1c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4a20:	80 34       	cpi	r24, 0x40	; 64
    4a22:	11 f4       	brne	.+4      	; 0x4a28 <__vector_39+0xbe>
    4a24:	10 92 1a 0f 	sts	0x0F1A, r1	; 0x800f1a <_index.1885>
    4a28:	20 91 1a 0f 	lds	r18, 0x0F1A	; 0x800f1a <_index.1885>
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <_twiMessageLen>
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	28 17       	cp	r18, r24
    4a38:	39 07       	cpc	r19, r25
    4a3a:	24 f4       	brge	.+8      	; 0x4a44 <__vector_39+0xda>
    4a3c:	85 ec       	ldi	r24, 0xC5	; 197
    4a3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a42:	3d c0       	rjmp	.+122    	; 0x4abe <__vector_39+0x154>
    4a44:	85 e8       	ldi	r24, 0x85	; 133
    4a46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a4a:	39 c0       	rjmp	.+114    	; 0x4abe <__vector_39+0x154>
    4a4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4a50:	e0 91 1a 0f 	lds	r30, 0x0F1A	; 0x800f1a <_index.1885>
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	e2 5e       	subi	r30, 0xE2	; 226
    4a58:	f0 4f       	sbci	r31, 0xF0	; 240
    4a5a:	80 83       	st	Z, r24
    4a5c:	84 e9       	ldi	r24, 0x94	; 148
    4a5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a62:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiCurrentHandler>
    4a66:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <_twiCurrentHandler+0x1>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	12 96       	adiw	r26, 0x02	; 2
    4a6e:	ed 91       	ld	r30, X+
    4a70:	fc 91       	ld	r31, X
    4a72:	13 97       	sbiw	r26, 0x03	; 3
    4a74:	30 97       	sbiw	r30, 0x00	; 0
    4a76:	19 f1       	breq	.+70     	; 0x4abe <__vector_39+0x154>
    4a78:	20 91 1d 0f 	lds	r18, 0x0F1D	; 0x800f1d <_twiMessageLen>
    4a7c:	4e e1       	ldi	r20, 0x1E	; 30
    4a7e:	5f e0       	ldi	r21, 0x0F	; 15
    4a80:	65 e0       	ldi	r22, 0x05	; 5
    4a82:	19 95       	eicall
    4a84:	1c c0       	rjmp	.+56     	; 0x4abe <__vector_39+0x154>
    4a86:	85 ea       	ldi	r24, 0xA5	; 165
    4a88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a8c:	18 c0       	rjmp	.+48     	; 0x4abe <__vector_39+0x154>
    4a8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4a92:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4a96:	84 e0       	ldi	r24, 0x04	; 4
    4a98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a9c:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiCurrentHandler>
    4aa0:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <_twiCurrentHandler+0x1>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	12 96       	adiw	r26, 0x02	; 2
    4aa8:	ed 91       	ld	r30, X+
    4aaa:	fc 91       	ld	r31, X
    4aac:	13 97       	sbiw	r26, 0x03	; 3
    4aae:	30 97       	sbiw	r30, 0x00	; 0
    4ab0:	31 f0       	breq	.+12     	; 0x4abe <__vector_39+0x154>
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	40 e0       	ldi	r20, 0x00	; 0
    4ab6:	50 e0       	ldi	r21, 0x00	; 0
    4ab8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4abc:	19 95       	eicall
    4abe:	ff 91       	pop	r31
    4ac0:	ef 91       	pop	r30
    4ac2:	bf 91       	pop	r27
    4ac4:	af 91       	pop	r26
    4ac6:	9f 91       	pop	r25
    4ac8:	8f 91       	pop	r24
    4aca:	7f 91       	pop	r23
    4acc:	6f 91       	pop	r22
    4ace:	5f 91       	pop	r21
    4ad0:	4f 91       	pop	r20
    4ad2:	3f 91       	pop	r19
    4ad4:	2f 91       	pop	r18
    4ad6:	0f 90       	pop	r0
    4ad8:	0b be       	out	0x3b, r0	; 59
    4ada:	0f 90       	pop	r0
    4adc:	0f be       	out	0x3f, r0	; 63
    4ade:	0f 90       	pop	r0
    4ae0:	1f 90       	pop	r1
    4ae2:	18 95       	reti

00004ae4 <fifo_init>:
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	41 11       	cpse	r20, r1
    4ae8:	01 c0       	rjmp	.+2      	; 0x4aec <fifo_init+0x8>
    4aea:	80 d3       	rcall	.+1792   	; 0x51ec <abort>
    4aec:	84 2f       	mov	r24, r20
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	9c 01       	movw	r18, r24
    4af2:	21 50       	subi	r18, 0x01	; 1
    4af4:	31 09       	sbc	r19, r1
    4af6:	82 23       	and	r24, r18
    4af8:	93 23       	and	r25, r19
    4afa:	89 2b       	or	r24, r25
    4afc:	09 f0       	breq	.+2      	; 0x4b00 <fifo_init+0x1c>
    4afe:	76 d3       	rcall	.+1772   	; 0x51ec <abort>
    4b00:	41 38       	cpi	r20, 0x81	; 129
    4b02:	08 f0       	brcs	.+2      	; 0x4b06 <fifo_init+0x22>
    4b04:	73 d3       	rcall	.+1766   	; 0x51ec <abort>
    4b06:	12 82       	std	Z+2, r1	; 0x02
    4b08:	13 82       	std	Z+3, r1	; 0x03
    4b0a:	44 83       	std	Z+4, r20	; 0x04
    4b0c:	44 0f       	add	r20, r20
    4b0e:	41 50       	subi	r20, 0x01	; 1
    4b10:	45 83       	std	Z+5, r20	; 0x05
    4b12:	71 83       	std	Z+1, r23	; 0x01
    4b14:	60 83       	st	Z, r22
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	08 95       	ret

00004b1c <floor>:
    4b1c:	3c d0       	rcall	.+120    	; 0x4b96 <__fp_trunc>
    4b1e:	88 f0       	brcs	.+34     	; 0x4b42 <floor+0x26>
    4b20:	9f 37       	cpi	r25, 0x7F	; 127
    4b22:	48 f4       	brcc	.+18     	; 0x4b36 <floor+0x1a>
    4b24:	91 11       	cpse	r25, r1
    4b26:	16 f0       	brts	.+4      	; 0x4b2c <floor+0x10>
    4b28:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_szero>
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	70 e0       	ldi	r23, 0x00	; 0
    4b30:	80 e8       	ldi	r24, 0x80	; 128
    4b32:	9f eb       	ldi	r25, 0xBF	; 191
    4b34:	08 95       	ret
    4b36:	26 f4       	brtc	.+8      	; 0x4b40 <floor+0x24>
    4b38:	1b 16       	cp	r1, r27
    4b3a:	61 1d       	adc	r22, r1
    4b3c:	71 1d       	adc	r23, r1
    4b3e:	81 1d       	adc	r24, r1
    4b40:	01 c0       	rjmp	.+2      	; 0x4b44 <__fp_mintl>
    4b42:	1b c0       	rjmp	.+54     	; 0x4b7a <__fp_mpack>

00004b44 <__fp_mintl>:
    4b44:	88 23       	and	r24, r24
    4b46:	71 f4       	brne	.+28     	; 0x4b64 <__fp_mintl+0x20>
    4b48:	77 23       	and	r23, r23
    4b4a:	21 f0       	breq	.+8      	; 0x4b54 <__fp_mintl+0x10>
    4b4c:	98 50       	subi	r25, 0x08	; 8
    4b4e:	87 2b       	or	r24, r23
    4b50:	76 2f       	mov	r23, r22
    4b52:	07 c0       	rjmp	.+14     	; 0x4b62 <__fp_mintl+0x1e>
    4b54:	66 23       	and	r22, r22
    4b56:	11 f4       	brne	.+4      	; 0x4b5c <__fp_mintl+0x18>
    4b58:	99 27       	eor	r25, r25
    4b5a:	0d c0       	rjmp	.+26     	; 0x4b76 <__fp_mintl+0x32>
    4b5c:	90 51       	subi	r25, 0x10	; 16
    4b5e:	86 2b       	or	r24, r22
    4b60:	70 e0       	ldi	r23, 0x00	; 0
    4b62:	60 e0       	ldi	r22, 0x00	; 0
    4b64:	2a f0       	brmi	.+10     	; 0x4b70 <__fp_mintl+0x2c>
    4b66:	9a 95       	dec	r25
    4b68:	66 0f       	add	r22, r22
    4b6a:	77 1f       	adc	r23, r23
    4b6c:	88 1f       	adc	r24, r24
    4b6e:	da f7       	brpl	.-10     	; 0x4b66 <__fp_mintl+0x22>
    4b70:	88 0f       	add	r24, r24
    4b72:	96 95       	lsr	r25
    4b74:	87 95       	ror	r24
    4b76:	97 f9       	bld	r25, 7
    4b78:	08 95       	ret

00004b7a <__fp_mpack>:
    4b7a:	9f 3f       	cpi	r25, 0xFF	; 255
    4b7c:	31 f0       	breq	.+12     	; 0x4b8a <__fp_mpack_finite+0xc>

00004b7e <__fp_mpack_finite>:
    4b7e:	91 50       	subi	r25, 0x01	; 1
    4b80:	20 f4       	brcc	.+8      	; 0x4b8a <__fp_mpack_finite+0xc>
    4b82:	87 95       	ror	r24
    4b84:	77 95       	ror	r23
    4b86:	67 95       	ror	r22
    4b88:	b7 95       	ror	r27
    4b8a:	88 0f       	add	r24, r24
    4b8c:	91 1d       	adc	r25, r1
    4b8e:	96 95       	lsr	r25
    4b90:	87 95       	ror	r24
    4b92:	97 f9       	bld	r25, 7
    4b94:	08 95       	ret

00004b96 <__fp_trunc>:
    4b96:	0e 94 80 1a 	call	0x3500	; 0x3500 <__fp_splitA>
    4b9a:	a0 f0       	brcs	.+40     	; 0x4bc4 <__fp_trunc+0x2e>
    4b9c:	be e7       	ldi	r27, 0x7E	; 126
    4b9e:	b9 17       	cp	r27, r25
    4ba0:	88 f4       	brcc	.+34     	; 0x4bc4 <__fp_trunc+0x2e>
    4ba2:	bb 27       	eor	r27, r27
    4ba4:	9f 38       	cpi	r25, 0x8F	; 143
    4ba6:	60 f4       	brcc	.+24     	; 0x4bc0 <__fp_trunc+0x2a>
    4ba8:	16 16       	cp	r1, r22
    4baa:	b1 1d       	adc	r27, r1
    4bac:	67 2f       	mov	r22, r23
    4bae:	78 2f       	mov	r23, r24
    4bb0:	88 27       	eor	r24, r24
    4bb2:	98 5f       	subi	r25, 0xF8	; 248
    4bb4:	f7 cf       	rjmp	.-18     	; 0x4ba4 <__fp_trunc+0xe>
    4bb6:	86 95       	lsr	r24
    4bb8:	77 95       	ror	r23
    4bba:	67 95       	ror	r22
    4bbc:	b1 1d       	adc	r27, r1
    4bbe:	93 95       	inc	r25
    4bc0:	96 39       	cpi	r25, 0x96	; 150
    4bc2:	c8 f3       	brcs	.-14     	; 0x4bb6 <__fp_trunc+0x20>
    4bc4:	08 95       	ret

00004bc6 <pow>:
    4bc6:	fa 01       	movw	r30, r20
    4bc8:	ee 0f       	add	r30, r30
    4bca:	ff 1f       	adc	r31, r31
    4bcc:	30 96       	adiw	r30, 0x00	; 0
    4bce:	21 05       	cpc	r18, r1
    4bd0:	31 05       	cpc	r19, r1
    4bd2:	a1 f1       	breq	.+104    	; 0x4c3c <pow+0x76>
    4bd4:	61 15       	cp	r22, r1
    4bd6:	71 05       	cpc	r23, r1
    4bd8:	61 f4       	brne	.+24     	; 0x4bf2 <pow+0x2c>
    4bda:	80 38       	cpi	r24, 0x80	; 128
    4bdc:	bf e3       	ldi	r27, 0x3F	; 63
    4bde:	9b 07       	cpc	r25, r27
    4be0:	49 f1       	breq	.+82     	; 0x4c34 <pow+0x6e>
    4be2:	68 94       	set
    4be4:	90 38       	cpi	r25, 0x80	; 128
    4be6:	81 05       	cpc	r24, r1
    4be8:	61 f0       	breq	.+24     	; 0x4c02 <pow+0x3c>
    4bea:	80 38       	cpi	r24, 0x80	; 128
    4bec:	bf ef       	ldi	r27, 0xFF	; 255
    4bee:	9b 07       	cpc	r25, r27
    4bf0:	41 f0       	breq	.+16     	; 0x4c02 <pow+0x3c>
    4bf2:	99 23       	and	r25, r25
    4bf4:	4a f5       	brpl	.+82     	; 0x4c48 <pow+0x82>
    4bf6:	ff 3f       	cpi	r31, 0xFF	; 255
    4bf8:	e1 05       	cpc	r30, r1
    4bfa:	31 05       	cpc	r19, r1
    4bfc:	21 05       	cpc	r18, r1
    4bfe:	19 f1       	breq	.+70     	; 0x4c46 <pow+0x80>
    4c00:	e8 94       	clt
    4c02:	08 94       	sec
    4c04:	e7 95       	ror	r30
    4c06:	d9 01       	movw	r26, r18
    4c08:	aa 23       	and	r26, r26
    4c0a:	29 f4       	brne	.+10     	; 0x4c16 <pow+0x50>
    4c0c:	ab 2f       	mov	r26, r27
    4c0e:	be 2f       	mov	r27, r30
    4c10:	f8 5f       	subi	r31, 0xF8	; 248
    4c12:	d0 f3       	brcs	.-12     	; 0x4c08 <pow+0x42>
    4c14:	10 c0       	rjmp	.+32     	; 0x4c36 <pow+0x70>
    4c16:	ff 5f       	subi	r31, 0xFF	; 255
    4c18:	70 f4       	brcc	.+28     	; 0x4c36 <pow+0x70>
    4c1a:	a6 95       	lsr	r26
    4c1c:	e0 f7       	brcc	.-8      	; 0x4c16 <pow+0x50>
    4c1e:	f7 39       	cpi	r31, 0x97	; 151
    4c20:	50 f0       	brcs	.+20     	; 0x4c36 <pow+0x70>
    4c22:	19 f0       	breq	.+6      	; 0x4c2a <pow+0x64>
    4c24:	ff 3a       	cpi	r31, 0xAF	; 175
    4c26:	38 f4       	brcc	.+14     	; 0x4c36 <pow+0x70>
    4c28:	9f 77       	andi	r25, 0x7F	; 127
    4c2a:	9f 93       	push	r25
    4c2c:	0d d0       	rcall	.+26     	; 0x4c48 <pow+0x82>
    4c2e:	0f 90       	pop	r0
    4c30:	07 fc       	sbrc	r0, 7
    4c32:	90 58       	subi	r25, 0x80	; 128
    4c34:	08 95       	ret
    4c36:	46 f0       	brts	.+16     	; 0x4c48 <pow+0x82>
    4c38:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_nan>
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	80 e8       	ldi	r24, 0x80	; 128
    4c42:	9f e3       	ldi	r25, 0x3F	; 63
    4c44:	08 95       	ret
    4c46:	4f e7       	ldi	r20, 0x7F	; 127
    4c48:	9f 77       	andi	r25, 0x7F	; 127
    4c4a:	5f 93       	push	r21
    4c4c:	4f 93       	push	r20
    4c4e:	3f 93       	push	r19
    4c50:	2f 93       	push	r18
    4c52:	ac d0       	rcall	.+344    	; 0x4dac <log>
    4c54:	2f 91       	pop	r18
    4c56:	3f 91       	pop	r19
    4c58:	4f 91       	pop	r20
    4c5a:	5f 91       	pop	r21
    4c5c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__mulsf3>
    4c60:	08 c0       	rjmp	.+16     	; 0x4c72 <exp>
    4c62:	29 f4       	brne	.+10     	; 0x4c6e <pow+0xa8>
    4c64:	16 f0       	brts	.+4      	; 0x4c6a <pow+0xa4>
    4c66:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_inf>
    4c6a:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__fp_zero>
    4c6e:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_nan>

00004c72 <exp>:
    4c72:	0e 94 80 1a 	call	0x3500	; 0x3500 <__fp_splitA>
    4c76:	a8 f3       	brcs	.-22     	; 0x4c62 <pow+0x9c>
    4c78:	96 38       	cpi	r25, 0x86	; 134
    4c7a:	a0 f7       	brcc	.-24     	; 0x4c64 <pow+0x9e>
    4c7c:	07 f8       	bld	r0, 7
    4c7e:	0f 92       	push	r0
    4c80:	e8 94       	clt
    4c82:	2b e3       	ldi	r18, 0x3B	; 59
    4c84:	3a ea       	ldi	r19, 0xAA	; 170
    4c86:	48 eb       	ldi	r20, 0xB8	; 184
    4c88:	5f e7       	ldi	r21, 0x7F	; 127
    4c8a:	0e 94 af 1a 	call	0x355e	; 0x355e <__mulsf3_pse>
    4c8e:	0f 92       	push	r0
    4c90:	0f 92       	push	r0
    4c92:	0f 92       	push	r0
    4c94:	4d b7       	in	r20, 0x3d	; 61
    4c96:	5e b7       	in	r21, 0x3e	; 62
    4c98:	0f 92       	push	r0
    4c9a:	cf d0       	rcall	.+414    	; 0x4e3a <modf>
    4c9c:	ea e9       	ldi	r30, 0x9A	; 154
    4c9e:	f1 e0       	ldi	r31, 0x01	; 1
    4ca0:	16 d0       	rcall	.+44     	; 0x4cce <__fp_powser>
    4ca2:	4f 91       	pop	r20
    4ca4:	5f 91       	pop	r21
    4ca6:	ef 91       	pop	r30
    4ca8:	ff 91       	pop	r31
    4caa:	e5 95       	asr	r30
    4cac:	ee 1f       	adc	r30, r30
    4cae:	ff 1f       	adc	r31, r31
    4cb0:	49 f0       	breq	.+18     	; 0x4cc4 <exp+0x52>
    4cb2:	fe 57       	subi	r31, 0x7E	; 126
    4cb4:	e0 68       	ori	r30, 0x80	; 128
    4cb6:	44 27       	eor	r20, r20
    4cb8:	ee 0f       	add	r30, r30
    4cba:	44 1f       	adc	r20, r20
    4cbc:	fa 95       	dec	r31
    4cbe:	e1 f7       	brne	.-8      	; 0x4cb8 <exp+0x46>
    4cc0:	41 95       	neg	r20
    4cc2:	55 0b       	sbc	r21, r21
    4cc4:	36 d0       	rcall	.+108    	; 0x4d32 <ldexp>
    4cc6:	0f 90       	pop	r0
    4cc8:	07 fe       	sbrs	r0, 7
    4cca:	28 c0       	rjmp	.+80     	; 0x4d1c <inverse>
    4ccc:	08 95       	ret

00004cce <__fp_powser>:
    4cce:	df 93       	push	r29
    4cd0:	cf 93       	push	r28
    4cd2:	1f 93       	push	r17
    4cd4:	0f 93       	push	r16
    4cd6:	ff 92       	push	r15
    4cd8:	ef 92       	push	r14
    4cda:	df 92       	push	r13
    4cdc:	7b 01       	movw	r14, r22
    4cde:	8c 01       	movw	r16, r24
    4ce0:	68 94       	set
    4ce2:	06 c0       	rjmp	.+12     	; 0x4cf0 <__fp_powser+0x22>
    4ce4:	da 2e       	mov	r13, r26
    4ce6:	ef 01       	movw	r28, r30
    4ce8:	0e 94 ad 1a 	call	0x355a	; 0x355a <__mulsf3x>
    4cec:	fe 01       	movw	r30, r28
    4cee:	e8 94       	clt
    4cf0:	a5 91       	lpm	r26, Z+
    4cf2:	25 91       	lpm	r18, Z+
    4cf4:	35 91       	lpm	r19, Z+
    4cf6:	45 91       	lpm	r20, Z+
    4cf8:	55 91       	lpm	r21, Z+
    4cfa:	a6 f3       	brts	.-24     	; 0x4ce4 <__fp_powser+0x16>
    4cfc:	ef 01       	movw	r28, r30
    4cfe:	0e 94 27 19 	call	0x324e	; 0x324e <__addsf3x>
    4d02:	fe 01       	movw	r30, r28
    4d04:	97 01       	movw	r18, r14
    4d06:	a8 01       	movw	r20, r16
    4d08:	da 94       	dec	r13
    4d0a:	69 f7       	brne	.-38     	; 0x4ce6 <__fp_powser+0x18>
    4d0c:	df 90       	pop	r13
    4d0e:	ef 90       	pop	r14
    4d10:	ff 90       	pop	r15
    4d12:	0f 91       	pop	r16
    4d14:	1f 91       	pop	r17
    4d16:	cf 91       	pop	r28
    4d18:	df 91       	pop	r29
    4d1a:	08 95       	ret

00004d1c <inverse>:
    4d1c:	9b 01       	movw	r18, r22
    4d1e:	ac 01       	movw	r20, r24
    4d20:	60 e0       	ldi	r22, 0x00	; 0
    4d22:	70 e0       	ldi	r23, 0x00	; 0
    4d24:	80 e8       	ldi	r24, 0x80	; 128
    4d26:	9f e3       	ldi	r25, 0x3F	; 63
    4d28:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__divsf3>
    4d2c:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_inf>
    4d30:	24 cf       	rjmp	.-440    	; 0x4b7a <__fp_mpack>

00004d32 <ldexp>:
    4d32:	0e 94 80 1a 	call	0x3500	; 0x3500 <__fp_splitA>
    4d36:	e0 f3       	brcs	.-8      	; 0x4d30 <inverse+0x14>
    4d38:	99 23       	and	r25, r25
    4d3a:	d1 f3       	breq	.-12     	; 0x4d30 <inverse+0x14>
    4d3c:	94 0f       	add	r25, r20
    4d3e:	51 1d       	adc	r21, r1
    4d40:	ab f3       	brvs	.-22     	; 0x4d2c <inverse+0x10>
    4d42:	91 50       	subi	r25, 0x01	; 1
    4d44:	50 40       	sbci	r21, 0x00	; 0
    4d46:	94 f0       	brlt	.+36     	; 0x4d6c <ldexp+0x3a>
    4d48:	59 f0       	breq	.+22     	; 0x4d60 <ldexp+0x2e>
    4d4a:	88 23       	and	r24, r24
    4d4c:	32 f0       	brmi	.+12     	; 0x4d5a <ldexp+0x28>
    4d4e:	66 0f       	add	r22, r22
    4d50:	77 1f       	adc	r23, r23
    4d52:	88 1f       	adc	r24, r24
    4d54:	91 50       	subi	r25, 0x01	; 1
    4d56:	50 40       	sbci	r21, 0x00	; 0
    4d58:	c1 f7       	brne	.-16     	; 0x4d4a <ldexp+0x18>
    4d5a:	9e 3f       	cpi	r25, 0xFE	; 254
    4d5c:	51 05       	cpc	r21, r1
    4d5e:	34 f7       	brge	.-52     	; 0x4d2c <inverse+0x10>
    4d60:	88 0f       	add	r24, r24
    4d62:	91 1d       	adc	r25, r1
    4d64:	96 95       	lsr	r25
    4d66:	87 95       	ror	r24
    4d68:	97 f9       	bld	r25, 7
    4d6a:	08 95       	ret
    4d6c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d6e:	ac f0       	brlt	.+42     	; 0x4d9a <ldexp+0x68>
    4d70:	98 3e       	cpi	r25, 0xE8	; 232
    4d72:	9c f0       	brlt	.+38     	; 0x4d9a <ldexp+0x68>
    4d74:	bb 27       	eor	r27, r27
    4d76:	86 95       	lsr	r24
    4d78:	77 95       	ror	r23
    4d7a:	67 95       	ror	r22
    4d7c:	b7 95       	ror	r27
    4d7e:	08 f4       	brcc	.+2      	; 0x4d82 <ldexp+0x50>
    4d80:	b1 60       	ori	r27, 0x01	; 1
    4d82:	93 95       	inc	r25
    4d84:	c1 f7       	brne	.-16     	; 0x4d76 <ldexp+0x44>
    4d86:	bb 0f       	add	r27, r27
    4d88:	58 f7       	brcc	.-42     	; 0x4d60 <ldexp+0x2e>
    4d8a:	11 f4       	brne	.+4      	; 0x4d90 <ldexp+0x5e>
    4d8c:	60 ff       	sbrs	r22, 0
    4d8e:	e8 cf       	rjmp	.-48     	; 0x4d60 <ldexp+0x2e>
    4d90:	6f 5f       	subi	r22, 0xFF	; 255
    4d92:	7f 4f       	sbci	r23, 0xFF	; 255
    4d94:	8f 4f       	sbci	r24, 0xFF	; 255
    4d96:	9f 4f       	sbci	r25, 0xFF	; 255
    4d98:	e3 cf       	rjmp	.-58     	; 0x4d60 <ldexp+0x2e>
    4d9a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_szero>
    4d9e:	0e f0       	brts	.+2      	; 0x4da2 <ldexp+0x70>
    4da0:	ec ce       	rjmp	.-552    	; 0x4b7a <__fp_mpack>
    4da2:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_nan>
    4da6:	68 94       	set
    4da8:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_inf>

00004dac <log>:
    4dac:	0e 94 80 1a 	call	0x3500	; 0x3500 <__fp_splitA>
    4db0:	b0 f3       	brcs	.-20     	; 0x4d9e <ldexp+0x6c>
    4db2:	99 23       	and	r25, r25
    4db4:	c1 f3       	breq	.-16     	; 0x4da6 <ldexp+0x74>
    4db6:	ae f3       	brts	.-22     	; 0x4da2 <ldexp+0x70>
    4db8:	df 93       	push	r29
    4dba:	cf 93       	push	r28
    4dbc:	1f 93       	push	r17
    4dbe:	0f 93       	push	r16
    4dc0:	ff 92       	push	r15
    4dc2:	c9 2f       	mov	r28, r25
    4dc4:	dd 27       	eor	r29, r29
    4dc6:	88 23       	and	r24, r24
    4dc8:	2a f0       	brmi	.+10     	; 0x4dd4 <log+0x28>
    4dca:	21 97       	sbiw	r28, 0x01	; 1
    4dcc:	66 0f       	add	r22, r22
    4dce:	77 1f       	adc	r23, r23
    4dd0:	88 1f       	adc	r24, r24
    4dd2:	da f7       	brpl	.-10     	; 0x4dca <log+0x1e>
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	40 e8       	ldi	r20, 0x80	; 128
    4dda:	5f eb       	ldi	r21, 0xBF	; 191
    4ddc:	9f e3       	ldi	r25, 0x3F	; 63
    4dde:	88 39       	cpi	r24, 0x98	; 152
    4de0:	20 f0       	brcs	.+8      	; 0x4dea <log+0x3e>
    4de2:	80 3e       	cpi	r24, 0xE0	; 224
    4de4:	38 f0       	brcs	.+14     	; 0x4df4 <log+0x48>
    4de6:	21 96       	adiw	r28, 0x01	; 1
    4de8:	8f 77       	andi	r24, 0x7F	; 127
    4dea:	0e 94 16 19 	call	0x322c	; 0x322c <__addsf3>
    4dee:	e2 ec       	ldi	r30, 0xC2	; 194
    4df0:	f1 e0       	ldi	r31, 0x01	; 1
    4df2:	04 c0       	rjmp	.+8      	; 0x4dfc <log+0x50>
    4df4:	0e 94 16 19 	call	0x322c	; 0x322c <__addsf3>
    4df8:	ef ee       	ldi	r30, 0xEF	; 239
    4dfa:	f1 e0       	ldi	r31, 0x01	; 1
    4dfc:	68 df       	rcall	.-304    	; 0x4cce <__fp_powser>
    4dfe:	8b 01       	movw	r16, r22
    4e00:	be 01       	movw	r22, r28
    4e02:	ec 01       	movw	r28, r24
    4e04:	fb 2e       	mov	r15, r27
    4e06:	6f 57       	subi	r22, 0x7F	; 127
    4e08:	71 09       	sbc	r23, r1
    4e0a:	75 95       	asr	r23
    4e0c:	77 1f       	adc	r23, r23
    4e0e:	88 0b       	sbc	r24, r24
    4e10:	99 0b       	sbc	r25, r25
    4e12:	0e 94 15 1a 	call	0x342a	; 0x342a <__floatsisf>
    4e16:	28 e1       	ldi	r18, 0x18	; 24
    4e18:	32 e7       	ldi	r19, 0x72	; 114
    4e1a:	41 e3       	ldi	r20, 0x31	; 49
    4e1c:	5f e3       	ldi	r21, 0x3F	; 63
    4e1e:	0e 94 ad 1a 	call	0x355a	; 0x355a <__mulsf3x>
    4e22:	af 2d       	mov	r26, r15
    4e24:	98 01       	movw	r18, r16
    4e26:	ae 01       	movw	r20, r28
    4e28:	ff 90       	pop	r15
    4e2a:	0f 91       	pop	r16
    4e2c:	1f 91       	pop	r17
    4e2e:	cf 91       	pop	r28
    4e30:	df 91       	pop	r29
    4e32:	0e 94 27 19 	call	0x324e	; 0x324e <__addsf3x>
    4e36:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__fp_round>

00004e3a <modf>:
    4e3a:	fa 01       	movw	r30, r20
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	aa 0f       	add	r26, r26
    4e40:	bb 1f       	adc	r27, r27
    4e42:	9b 01       	movw	r18, r22
    4e44:	ac 01       	movw	r20, r24
    4e46:	bf 57       	subi	r27, 0x7F	; 127
    4e48:	28 f4       	brcc	.+10     	; 0x4e54 <modf+0x1a>
    4e4a:	22 27       	eor	r18, r18
    4e4c:	33 27       	eor	r19, r19
    4e4e:	44 27       	eor	r20, r20
    4e50:	50 78       	andi	r21, 0x80	; 128
    4e52:	20 c0       	rjmp	.+64     	; 0x4e94 <modf+0x5a>
    4e54:	b7 51       	subi	r27, 0x17	; 23
    4e56:	90 f4       	brcc	.+36     	; 0x4e7c <modf+0x42>
    4e58:	ab 2f       	mov	r26, r27
    4e5a:	00 24       	eor	r0, r0
    4e5c:	46 95       	lsr	r20
    4e5e:	37 95       	ror	r19
    4e60:	27 95       	ror	r18
    4e62:	01 1c       	adc	r0, r1
    4e64:	a3 95       	inc	r26
    4e66:	d2 f3       	brmi	.-12     	; 0x4e5c <modf+0x22>
    4e68:	00 20       	and	r0, r0
    4e6a:	71 f0       	breq	.+28     	; 0x4e88 <modf+0x4e>
    4e6c:	22 0f       	add	r18, r18
    4e6e:	33 1f       	adc	r19, r19
    4e70:	44 1f       	adc	r20, r20
    4e72:	b3 95       	inc	r27
    4e74:	da f3       	brmi	.-10     	; 0x4e6c <modf+0x32>
    4e76:	0e d0       	rcall	.+28     	; 0x4e94 <modf+0x5a>
    4e78:	0c 94 15 19 	jmp	0x322a	; 0x322a <__subsf3>
    4e7c:	61 30       	cpi	r22, 0x01	; 1
    4e7e:	71 05       	cpc	r23, r1
    4e80:	a0 e8       	ldi	r26, 0x80	; 128
    4e82:	8a 07       	cpc	r24, r26
    4e84:	b9 46       	sbci	r27, 0x69	; 105
    4e86:	30 f4       	brcc	.+12     	; 0x4e94 <modf+0x5a>
    4e88:	9b 01       	movw	r18, r22
    4e8a:	ac 01       	movw	r20, r24
    4e8c:	66 27       	eor	r22, r22
    4e8e:	77 27       	eor	r23, r23
    4e90:	88 27       	eor	r24, r24
    4e92:	90 78       	andi	r25, 0x80	; 128
    4e94:	30 96       	adiw	r30, 0x00	; 0
    4e96:	21 f0       	breq	.+8      	; 0x4ea0 <modf+0x66>
    4e98:	20 83       	st	Z, r18
    4e9a:	31 83       	std	Z+1, r19	; 0x01
    4e9c:	42 83       	std	Z+2, r20	; 0x02
    4e9e:	53 83       	std	Z+3, r21	; 0x03
    4ea0:	08 95       	ret

00004ea2 <__divmodhi4>:
    4ea2:	97 fb       	bst	r25, 7
    4ea4:	07 2e       	mov	r0, r23
    4ea6:	16 f4       	brtc	.+4      	; 0x4eac <__divmodhi4+0xa>
    4ea8:	00 94       	com	r0
    4eaa:	06 d0       	rcall	.+12     	; 0x4eb8 <__divmodhi4_neg1>
    4eac:	77 fd       	sbrc	r23, 7
    4eae:	08 d0       	rcall	.+16     	; 0x4ec0 <__divmodhi4_neg2>
    4eb0:	3f d0       	rcall	.+126    	; 0x4f30 <__udivmodhi4>
    4eb2:	07 fc       	sbrc	r0, 7
    4eb4:	05 d0       	rcall	.+10     	; 0x4ec0 <__divmodhi4_neg2>
    4eb6:	3e f4       	brtc	.+14     	; 0x4ec6 <__divmodhi4_exit>

00004eb8 <__divmodhi4_neg1>:
    4eb8:	90 95       	com	r25
    4eba:	81 95       	neg	r24
    4ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ebe:	08 95       	ret

00004ec0 <__divmodhi4_neg2>:
    4ec0:	70 95       	com	r23
    4ec2:	61 95       	neg	r22
    4ec4:	7f 4f       	sbci	r23, 0xFF	; 255

00004ec6 <__divmodhi4_exit>:
    4ec6:	08 95       	ret

00004ec8 <__udivmodsi4>:
    4ec8:	a1 e2       	ldi	r26, 0x21	; 33
    4eca:	1a 2e       	mov	r1, r26
    4ecc:	aa 1b       	sub	r26, r26
    4ece:	bb 1b       	sub	r27, r27
    4ed0:	fd 01       	movw	r30, r26
    4ed2:	0d c0       	rjmp	.+26     	; 0x4eee <__udivmodsi4_ep>

00004ed4 <__udivmodsi4_loop>:
    4ed4:	aa 1f       	adc	r26, r26
    4ed6:	bb 1f       	adc	r27, r27
    4ed8:	ee 1f       	adc	r30, r30
    4eda:	ff 1f       	adc	r31, r31
    4edc:	a2 17       	cp	r26, r18
    4ede:	b3 07       	cpc	r27, r19
    4ee0:	e4 07       	cpc	r30, r20
    4ee2:	f5 07       	cpc	r31, r21
    4ee4:	20 f0       	brcs	.+8      	; 0x4eee <__udivmodsi4_ep>
    4ee6:	a2 1b       	sub	r26, r18
    4ee8:	b3 0b       	sbc	r27, r19
    4eea:	e4 0b       	sbc	r30, r20
    4eec:	f5 0b       	sbc	r31, r21

00004eee <__udivmodsi4_ep>:
    4eee:	66 1f       	adc	r22, r22
    4ef0:	77 1f       	adc	r23, r23
    4ef2:	88 1f       	adc	r24, r24
    4ef4:	99 1f       	adc	r25, r25
    4ef6:	1a 94       	dec	r1
    4ef8:	69 f7       	brne	.-38     	; 0x4ed4 <__udivmodsi4_loop>
    4efa:	60 95       	com	r22
    4efc:	70 95       	com	r23
    4efe:	80 95       	com	r24
    4f00:	90 95       	com	r25
    4f02:	9b 01       	movw	r18, r22
    4f04:	ac 01       	movw	r20, r24
    4f06:	bd 01       	movw	r22, r26
    4f08:	cf 01       	movw	r24, r30
    4f0a:	08 95       	ret

00004f0c <__tablejump2__>:
    4f0c:	ee 0f       	add	r30, r30
    4f0e:	ff 1f       	adc	r31, r31
    4f10:	88 1f       	adc	r24, r24
    4f12:	8b bf       	out	0x3b, r24	; 59
    4f14:	07 90       	elpm	r0, Z+
    4f16:	f6 91       	elpm	r31, Z
    4f18:	e0 2d       	mov	r30, r0
    4f1a:	19 94       	eijmp

00004f1c <__muluhisi3>:
    4f1c:	1d d0       	rcall	.+58     	; 0x4f58 <__umulhisi3>
    4f1e:	a5 9f       	mul	r26, r21
    4f20:	90 0d       	add	r25, r0
    4f22:	b4 9f       	mul	r27, r20
    4f24:	90 0d       	add	r25, r0
    4f26:	a4 9f       	mul	r26, r20
    4f28:	80 0d       	add	r24, r0
    4f2a:	91 1d       	adc	r25, r1
    4f2c:	11 24       	eor	r1, r1
    4f2e:	08 95       	ret

00004f30 <__udivmodhi4>:
    4f30:	aa 1b       	sub	r26, r26
    4f32:	bb 1b       	sub	r27, r27
    4f34:	51 e1       	ldi	r21, 0x11	; 17
    4f36:	07 c0       	rjmp	.+14     	; 0x4f46 <__udivmodhi4_ep>

00004f38 <__udivmodhi4_loop>:
    4f38:	aa 1f       	adc	r26, r26
    4f3a:	bb 1f       	adc	r27, r27
    4f3c:	a6 17       	cp	r26, r22
    4f3e:	b7 07       	cpc	r27, r23
    4f40:	10 f0       	brcs	.+4      	; 0x4f46 <__udivmodhi4_ep>
    4f42:	a6 1b       	sub	r26, r22
    4f44:	b7 0b       	sbc	r27, r23

00004f46 <__udivmodhi4_ep>:
    4f46:	88 1f       	adc	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	5a 95       	dec	r21
    4f4c:	a9 f7       	brne	.-22     	; 0x4f38 <__udivmodhi4_loop>
    4f4e:	80 95       	com	r24
    4f50:	90 95       	com	r25
    4f52:	bc 01       	movw	r22, r24
    4f54:	cd 01       	movw	r24, r26
    4f56:	08 95       	ret

00004f58 <__umulhisi3>:
    4f58:	a2 9f       	mul	r26, r18
    4f5a:	b0 01       	movw	r22, r0
    4f5c:	b3 9f       	mul	r27, r19
    4f5e:	c0 01       	movw	r24, r0
    4f60:	a3 9f       	mul	r26, r19
    4f62:	70 0d       	add	r23, r0
    4f64:	81 1d       	adc	r24, r1
    4f66:	11 24       	eor	r1, r1
    4f68:	91 1d       	adc	r25, r1
    4f6a:	b2 9f       	mul	r27, r18
    4f6c:	70 0d       	add	r23, r0
    4f6e:	81 1d       	adc	r24, r1
    4f70:	11 24       	eor	r1, r1
    4f72:	91 1d       	adc	r25, r1
    4f74:	08 95       	ret

00004f76 <calloc>:
    4f76:	0f 93       	push	r16
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	86 9f       	mul	r24, r22
    4f80:	80 01       	movw	r16, r0
    4f82:	87 9f       	mul	r24, r23
    4f84:	10 0d       	add	r17, r0
    4f86:	96 9f       	mul	r25, r22
    4f88:	10 0d       	add	r17, r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	c8 01       	movw	r24, r16
    4f8e:	0d d0       	rcall	.+26     	; 0x4faa <malloc>
    4f90:	ec 01       	movw	r28, r24
    4f92:	00 97       	sbiw	r24, 0x00	; 0
    4f94:	21 f0       	breq	.+8      	; 0x4f9e <calloc+0x28>
    4f96:	a8 01       	movw	r20, r16
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	70 e0       	ldi	r23, 0x00	; 0
    4f9c:	34 d1       	rcall	.+616    	; 0x5206 <memset>
    4f9e:	ce 01       	movw	r24, r28
    4fa0:	df 91       	pop	r29
    4fa2:	cf 91       	pop	r28
    4fa4:	1f 91       	pop	r17
    4fa6:	0f 91       	pop	r16
    4fa8:	08 95       	ret

00004faa <malloc>:
    4faa:	0f 93       	push	r16
    4fac:	1f 93       	push	r17
    4fae:	cf 93       	push	r28
    4fb0:	df 93       	push	r29
    4fb2:	82 30       	cpi	r24, 0x02	; 2
    4fb4:	91 05       	cpc	r25, r1
    4fb6:	10 f4       	brcc	.+4      	; 0x4fbc <malloc+0x12>
    4fb8:	82 e0       	ldi	r24, 0x02	; 2
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	e0 91 40 0f 	lds	r30, 0x0F40	; 0x800f40 <__flp>
    4fc0:	f0 91 41 0f 	lds	r31, 0x0F41	; 0x800f41 <__flp+0x1>
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	a0 e0       	ldi	r26, 0x00	; 0
    4fca:	b0 e0       	ldi	r27, 0x00	; 0
    4fcc:	30 97       	sbiw	r30, 0x00	; 0
    4fce:	19 f1       	breq	.+70     	; 0x5016 <malloc+0x6c>
    4fd0:	40 81       	ld	r20, Z
    4fd2:	51 81       	ldd	r21, Z+1	; 0x01
    4fd4:	02 81       	ldd	r16, Z+2	; 0x02
    4fd6:	13 81       	ldd	r17, Z+3	; 0x03
    4fd8:	48 17       	cp	r20, r24
    4fda:	59 07       	cpc	r21, r25
    4fdc:	c8 f0       	brcs	.+50     	; 0x5010 <malloc+0x66>
    4fde:	84 17       	cp	r24, r20
    4fe0:	95 07       	cpc	r25, r21
    4fe2:	69 f4       	brne	.+26     	; 0x4ffe <malloc+0x54>
    4fe4:	10 97       	sbiw	r26, 0x00	; 0
    4fe6:	31 f0       	breq	.+12     	; 0x4ff4 <malloc+0x4a>
    4fe8:	12 96       	adiw	r26, 0x02	; 2
    4fea:	0c 93       	st	X, r16
    4fec:	12 97       	sbiw	r26, 0x02	; 2
    4fee:	13 96       	adiw	r26, 0x03	; 3
    4ff0:	1c 93       	st	X, r17
    4ff2:	27 c0       	rjmp	.+78     	; 0x5042 <malloc+0x98>
    4ff4:	00 93 40 0f 	sts	0x0F40, r16	; 0x800f40 <__flp>
    4ff8:	10 93 41 0f 	sts	0x0F41, r17	; 0x800f41 <__flp+0x1>
    4ffc:	22 c0       	rjmp	.+68     	; 0x5042 <malloc+0x98>
    4ffe:	21 15       	cp	r18, r1
    5000:	31 05       	cpc	r19, r1
    5002:	19 f0       	breq	.+6      	; 0x500a <malloc+0x60>
    5004:	42 17       	cp	r20, r18
    5006:	53 07       	cpc	r21, r19
    5008:	18 f4       	brcc	.+6      	; 0x5010 <malloc+0x66>
    500a:	9a 01       	movw	r18, r20
    500c:	bd 01       	movw	r22, r26
    500e:	ef 01       	movw	r28, r30
    5010:	df 01       	movw	r26, r30
    5012:	f8 01       	movw	r30, r16
    5014:	db cf       	rjmp	.-74     	; 0x4fcc <malloc+0x22>
    5016:	21 15       	cp	r18, r1
    5018:	31 05       	cpc	r19, r1
    501a:	f9 f0       	breq	.+62     	; 0x505a <malloc+0xb0>
    501c:	28 1b       	sub	r18, r24
    501e:	39 0b       	sbc	r19, r25
    5020:	24 30       	cpi	r18, 0x04	; 4
    5022:	31 05       	cpc	r19, r1
    5024:	80 f4       	brcc	.+32     	; 0x5046 <malloc+0x9c>
    5026:	8a 81       	ldd	r24, Y+2	; 0x02
    5028:	9b 81       	ldd	r25, Y+3	; 0x03
    502a:	61 15       	cp	r22, r1
    502c:	71 05       	cpc	r23, r1
    502e:	21 f0       	breq	.+8      	; 0x5038 <malloc+0x8e>
    5030:	fb 01       	movw	r30, r22
    5032:	93 83       	std	Z+3, r25	; 0x03
    5034:	82 83       	std	Z+2, r24	; 0x02
    5036:	04 c0       	rjmp	.+8      	; 0x5040 <malloc+0x96>
    5038:	90 93 41 0f 	sts	0x0F41, r25	; 0x800f41 <__flp+0x1>
    503c:	80 93 40 0f 	sts	0x0F40, r24	; 0x800f40 <__flp>
    5040:	fe 01       	movw	r30, r28
    5042:	32 96       	adiw	r30, 0x02	; 2
    5044:	44 c0       	rjmp	.+136    	; 0x50ce <malloc+0x124>
    5046:	fe 01       	movw	r30, r28
    5048:	e2 0f       	add	r30, r18
    504a:	f3 1f       	adc	r31, r19
    504c:	81 93       	st	Z+, r24
    504e:	91 93       	st	Z+, r25
    5050:	22 50       	subi	r18, 0x02	; 2
    5052:	31 09       	sbc	r19, r1
    5054:	39 83       	std	Y+1, r19	; 0x01
    5056:	28 83       	st	Y, r18
    5058:	3a c0       	rjmp	.+116    	; 0x50ce <malloc+0x124>
    505a:	20 91 3e 0f 	lds	r18, 0x0F3E	; 0x800f3e <__brkval>
    505e:	30 91 3f 0f 	lds	r19, 0x0F3F	; 0x800f3f <__brkval+0x1>
    5062:	23 2b       	or	r18, r19
    5064:	41 f4       	brne	.+16     	; 0x5076 <malloc+0xcc>
    5066:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    506a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    506e:	30 93 3f 0f 	sts	0x0F3F, r19	; 0x800f3f <__brkval+0x1>
    5072:	20 93 3e 0f 	sts	0x0F3E, r18	; 0x800f3e <__brkval>
    5076:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    507a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    507e:	21 15       	cp	r18, r1
    5080:	31 05       	cpc	r19, r1
    5082:	41 f4       	brne	.+16     	; 0x5094 <malloc+0xea>
    5084:	2d b7       	in	r18, 0x3d	; 61
    5086:	3e b7       	in	r19, 0x3e	; 62
    5088:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    508c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5090:	24 1b       	sub	r18, r20
    5092:	35 0b       	sbc	r19, r21
    5094:	e0 91 3e 0f 	lds	r30, 0x0F3E	; 0x800f3e <__brkval>
    5098:	f0 91 3f 0f 	lds	r31, 0x0F3F	; 0x800f3f <__brkval+0x1>
    509c:	e2 17       	cp	r30, r18
    509e:	f3 07       	cpc	r31, r19
    50a0:	a0 f4       	brcc	.+40     	; 0x50ca <malloc+0x120>
    50a2:	2e 1b       	sub	r18, r30
    50a4:	3f 0b       	sbc	r19, r31
    50a6:	28 17       	cp	r18, r24
    50a8:	39 07       	cpc	r19, r25
    50aa:	78 f0       	brcs	.+30     	; 0x50ca <malloc+0x120>
    50ac:	ac 01       	movw	r20, r24
    50ae:	4e 5f       	subi	r20, 0xFE	; 254
    50b0:	5f 4f       	sbci	r21, 0xFF	; 255
    50b2:	24 17       	cp	r18, r20
    50b4:	35 07       	cpc	r19, r21
    50b6:	48 f0       	brcs	.+18     	; 0x50ca <malloc+0x120>
    50b8:	4e 0f       	add	r20, r30
    50ba:	5f 1f       	adc	r21, r31
    50bc:	50 93 3f 0f 	sts	0x0F3F, r21	; 0x800f3f <__brkval+0x1>
    50c0:	40 93 3e 0f 	sts	0x0F3E, r20	; 0x800f3e <__brkval>
    50c4:	81 93       	st	Z+, r24
    50c6:	91 93       	st	Z+, r25
    50c8:	02 c0       	rjmp	.+4      	; 0x50ce <malloc+0x124>
    50ca:	e0 e0       	ldi	r30, 0x00	; 0
    50cc:	f0 e0       	ldi	r31, 0x00	; 0
    50ce:	cf 01       	movw	r24, r30
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	0f 91       	pop	r16
    50d8:	08 95       	ret

000050da <free>:
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	00 97       	sbiw	r24, 0x00	; 0
    50e0:	09 f4       	brne	.+2      	; 0x50e4 <free+0xa>
    50e2:	81 c0       	rjmp	.+258    	; 0x51e6 <free+0x10c>
    50e4:	fc 01       	movw	r30, r24
    50e6:	32 97       	sbiw	r30, 0x02	; 2
    50e8:	13 82       	std	Z+3, r1	; 0x03
    50ea:	12 82       	std	Z+2, r1	; 0x02
    50ec:	a0 91 40 0f 	lds	r26, 0x0F40	; 0x800f40 <__flp>
    50f0:	b0 91 41 0f 	lds	r27, 0x0F41	; 0x800f41 <__flp+0x1>
    50f4:	10 97       	sbiw	r26, 0x00	; 0
    50f6:	81 f4       	brne	.+32     	; 0x5118 <free+0x3e>
    50f8:	20 81       	ld	r18, Z
    50fa:	31 81       	ldd	r19, Z+1	; 0x01
    50fc:	82 0f       	add	r24, r18
    50fe:	93 1f       	adc	r25, r19
    5100:	20 91 3e 0f 	lds	r18, 0x0F3E	; 0x800f3e <__brkval>
    5104:	30 91 3f 0f 	lds	r19, 0x0F3F	; 0x800f3f <__brkval+0x1>
    5108:	28 17       	cp	r18, r24
    510a:	39 07       	cpc	r19, r25
    510c:	51 f5       	brne	.+84     	; 0x5162 <free+0x88>
    510e:	f0 93 3f 0f 	sts	0x0F3F, r31	; 0x800f3f <__brkval+0x1>
    5112:	e0 93 3e 0f 	sts	0x0F3E, r30	; 0x800f3e <__brkval>
    5116:	67 c0       	rjmp	.+206    	; 0x51e6 <free+0x10c>
    5118:	ed 01       	movw	r28, r26
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	ce 17       	cp	r28, r30
    5120:	df 07       	cpc	r29, r31
    5122:	40 f4       	brcc	.+16     	; 0x5134 <free+0x5a>
    5124:	4a 81       	ldd	r20, Y+2	; 0x02
    5126:	5b 81       	ldd	r21, Y+3	; 0x03
    5128:	9e 01       	movw	r18, r28
    512a:	41 15       	cp	r20, r1
    512c:	51 05       	cpc	r21, r1
    512e:	f1 f0       	breq	.+60     	; 0x516c <free+0x92>
    5130:	ea 01       	movw	r28, r20
    5132:	f5 cf       	rjmp	.-22     	; 0x511e <free+0x44>
    5134:	d3 83       	std	Z+3, r29	; 0x03
    5136:	c2 83       	std	Z+2, r28	; 0x02
    5138:	40 81       	ld	r20, Z
    513a:	51 81       	ldd	r21, Z+1	; 0x01
    513c:	84 0f       	add	r24, r20
    513e:	95 1f       	adc	r25, r21
    5140:	c8 17       	cp	r28, r24
    5142:	d9 07       	cpc	r29, r25
    5144:	59 f4       	brne	.+22     	; 0x515c <free+0x82>
    5146:	88 81       	ld	r24, Y
    5148:	99 81       	ldd	r25, Y+1	; 0x01
    514a:	84 0f       	add	r24, r20
    514c:	95 1f       	adc	r25, r21
    514e:	02 96       	adiw	r24, 0x02	; 2
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	80 83       	st	Z, r24
    5154:	8a 81       	ldd	r24, Y+2	; 0x02
    5156:	9b 81       	ldd	r25, Y+3	; 0x03
    5158:	93 83       	std	Z+3, r25	; 0x03
    515a:	82 83       	std	Z+2, r24	; 0x02
    515c:	21 15       	cp	r18, r1
    515e:	31 05       	cpc	r19, r1
    5160:	29 f4       	brne	.+10     	; 0x516c <free+0x92>
    5162:	f0 93 41 0f 	sts	0x0F41, r31	; 0x800f41 <__flp+0x1>
    5166:	e0 93 40 0f 	sts	0x0F40, r30	; 0x800f40 <__flp>
    516a:	3d c0       	rjmp	.+122    	; 0x51e6 <free+0x10c>
    516c:	e9 01       	movw	r28, r18
    516e:	fb 83       	std	Y+3, r31	; 0x03
    5170:	ea 83       	std	Y+2, r30	; 0x02
    5172:	49 91       	ld	r20, Y+
    5174:	59 91       	ld	r21, Y+
    5176:	c4 0f       	add	r28, r20
    5178:	d5 1f       	adc	r29, r21
    517a:	ec 17       	cp	r30, r28
    517c:	fd 07       	cpc	r31, r29
    517e:	61 f4       	brne	.+24     	; 0x5198 <free+0xbe>
    5180:	80 81       	ld	r24, Z
    5182:	91 81       	ldd	r25, Z+1	; 0x01
    5184:	84 0f       	add	r24, r20
    5186:	95 1f       	adc	r25, r21
    5188:	02 96       	adiw	r24, 0x02	; 2
    518a:	e9 01       	movw	r28, r18
    518c:	99 83       	std	Y+1, r25	; 0x01
    518e:	88 83       	st	Y, r24
    5190:	82 81       	ldd	r24, Z+2	; 0x02
    5192:	93 81       	ldd	r25, Z+3	; 0x03
    5194:	9b 83       	std	Y+3, r25	; 0x03
    5196:	8a 83       	std	Y+2, r24	; 0x02
    5198:	e0 e0       	ldi	r30, 0x00	; 0
    519a:	f0 e0       	ldi	r31, 0x00	; 0
    519c:	12 96       	adiw	r26, 0x02	; 2
    519e:	8d 91       	ld	r24, X+
    51a0:	9c 91       	ld	r25, X
    51a2:	13 97       	sbiw	r26, 0x03	; 3
    51a4:	00 97       	sbiw	r24, 0x00	; 0
    51a6:	19 f0       	breq	.+6      	; 0x51ae <free+0xd4>
    51a8:	fd 01       	movw	r30, r26
    51aa:	dc 01       	movw	r26, r24
    51ac:	f7 cf       	rjmp	.-18     	; 0x519c <free+0xc2>
    51ae:	8d 91       	ld	r24, X+
    51b0:	9c 91       	ld	r25, X
    51b2:	11 97       	sbiw	r26, 0x01	; 1
    51b4:	9d 01       	movw	r18, r26
    51b6:	2e 5f       	subi	r18, 0xFE	; 254
    51b8:	3f 4f       	sbci	r19, 0xFF	; 255
    51ba:	82 0f       	add	r24, r18
    51bc:	93 1f       	adc	r25, r19
    51be:	20 91 3e 0f 	lds	r18, 0x0F3E	; 0x800f3e <__brkval>
    51c2:	30 91 3f 0f 	lds	r19, 0x0F3F	; 0x800f3f <__brkval+0x1>
    51c6:	28 17       	cp	r18, r24
    51c8:	39 07       	cpc	r19, r25
    51ca:	69 f4       	brne	.+26     	; 0x51e6 <free+0x10c>
    51cc:	30 97       	sbiw	r30, 0x00	; 0
    51ce:	29 f4       	brne	.+10     	; 0x51da <free+0x100>
    51d0:	10 92 41 0f 	sts	0x0F41, r1	; 0x800f41 <__flp+0x1>
    51d4:	10 92 40 0f 	sts	0x0F40, r1	; 0x800f40 <__flp>
    51d8:	02 c0       	rjmp	.+4      	; 0x51de <free+0x104>
    51da:	13 82       	std	Z+3, r1	; 0x03
    51dc:	12 82       	std	Z+2, r1	; 0x02
    51de:	b0 93 3f 0f 	sts	0x0F3F, r27	; 0x800f3f <__brkval+0x1>
    51e2:	a0 93 3e 0f 	sts	0x0F3E, r26	; 0x800f3e <__brkval>
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	08 95       	ret

000051ec <abort>:
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	f8 94       	cli
    51f2:	00 c3       	rjmp	.+1536   	; 0x57f4 <_exit>

000051f4 <memcpy>:
    51f4:	fb 01       	movw	r30, r22
    51f6:	dc 01       	movw	r26, r24
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <memcpy+0xa>
    51fa:	01 90       	ld	r0, Z+
    51fc:	0d 92       	st	X+, r0
    51fe:	41 50       	subi	r20, 0x01	; 1
    5200:	50 40       	sbci	r21, 0x00	; 0
    5202:	d8 f7       	brcc	.-10     	; 0x51fa <memcpy+0x6>
    5204:	08 95       	ret

00005206 <memset>:
    5206:	dc 01       	movw	r26, r24
    5208:	01 c0       	rjmp	.+2      	; 0x520c <memset+0x6>
    520a:	6d 93       	st	X+, r22
    520c:	41 50       	subi	r20, 0x01	; 1
    520e:	50 40       	sbci	r21, 0x00	; 0
    5210:	e0 f7       	brcc	.-8      	; 0x520a <memset+0x4>
    5212:	08 95       	ret

00005214 <printf>:
    5214:	cf 93       	push	r28
    5216:	df 93       	push	r29
    5218:	cd b7       	in	r28, 0x3d	; 61
    521a:	de b7       	in	r29, 0x3e	; 62
    521c:	ae 01       	movw	r20, r28
    521e:	4a 5f       	subi	r20, 0xFA	; 250
    5220:	5f 4f       	sbci	r21, 0xFF	; 255
    5222:	fa 01       	movw	r30, r20
    5224:	61 91       	ld	r22, Z+
    5226:	71 91       	ld	r23, Z+
    5228:	af 01       	movw	r20, r30
    522a:	80 91 44 0f 	lds	r24, 0x0F44	; 0x800f44 <__iob+0x2>
    522e:	90 91 45 0f 	lds	r25, 0x0F45	; 0x800f45 <__iob+0x3>
    5232:	33 d0       	rcall	.+102    	; 0x529a <vfprintf>
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	08 95       	ret

0000523a <puts>:
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
    523e:	cf 93       	push	r28
    5240:	df 93       	push	r29
    5242:	e0 91 44 0f 	lds	r30, 0x0F44	; 0x800f44 <__iob+0x2>
    5246:	f0 91 45 0f 	lds	r31, 0x0F45	; 0x800f45 <__iob+0x3>
    524a:	23 81       	ldd	r18, Z+3	; 0x03
    524c:	21 ff       	sbrs	r18, 1
    524e:	1b c0       	rjmp	.+54     	; 0x5286 <puts+0x4c>
    5250:	8c 01       	movw	r16, r24
    5252:	d0 e0       	ldi	r29, 0x00	; 0
    5254:	c0 e0       	ldi	r28, 0x00	; 0
    5256:	f8 01       	movw	r30, r16
    5258:	81 91       	ld	r24, Z+
    525a:	8f 01       	movw	r16, r30
    525c:	60 91 44 0f 	lds	r22, 0x0F44	; 0x800f44 <__iob+0x2>
    5260:	70 91 45 0f 	lds	r23, 0x0F45	; 0x800f45 <__iob+0x3>
    5264:	db 01       	movw	r26, r22
    5266:	18 96       	adiw	r26, 0x08	; 8
    5268:	ed 91       	ld	r30, X+
    526a:	fc 91       	ld	r31, X
    526c:	19 97       	sbiw	r26, 0x09	; 9
    526e:	88 23       	and	r24, r24
    5270:	31 f0       	breq	.+12     	; 0x527e <puts+0x44>
    5272:	19 95       	eicall
    5274:	89 2b       	or	r24, r25
    5276:	79 f3       	breq	.-34     	; 0x5256 <puts+0x1c>
    5278:	df ef       	ldi	r29, 0xFF	; 255
    527a:	cf ef       	ldi	r28, 0xFF	; 255
    527c:	ec cf       	rjmp	.-40     	; 0x5256 <puts+0x1c>
    527e:	8a e0       	ldi	r24, 0x0A	; 10
    5280:	19 95       	eicall
    5282:	89 2b       	or	r24, r25
    5284:	19 f0       	breq	.+6      	; 0x528c <puts+0x52>
    5286:	8f ef       	ldi	r24, 0xFF	; 255
    5288:	9f ef       	ldi	r25, 0xFF	; 255
    528a:	02 c0       	rjmp	.+4      	; 0x5290 <puts+0x56>
    528c:	8d 2f       	mov	r24, r29
    528e:	9c 2f       	mov	r25, r28
    5290:	df 91       	pop	r29
    5292:	cf 91       	pop	r28
    5294:	1f 91       	pop	r17
    5296:	0f 91       	pop	r16
    5298:	08 95       	ret

0000529a <vfprintf>:
    529a:	2f 92       	push	r2
    529c:	3f 92       	push	r3
    529e:	4f 92       	push	r4
    52a0:	5f 92       	push	r5
    52a2:	6f 92       	push	r6
    52a4:	7f 92       	push	r7
    52a6:	8f 92       	push	r8
    52a8:	9f 92       	push	r9
    52aa:	af 92       	push	r10
    52ac:	bf 92       	push	r11
    52ae:	cf 92       	push	r12
    52b0:	df 92       	push	r13
    52b2:	ef 92       	push	r14
    52b4:	ff 92       	push	r15
    52b6:	0f 93       	push	r16
    52b8:	1f 93       	push	r17
    52ba:	cf 93       	push	r28
    52bc:	df 93       	push	r29
    52be:	cd b7       	in	r28, 0x3d	; 61
    52c0:	de b7       	in	r29, 0x3e	; 62
    52c2:	2b 97       	sbiw	r28, 0x0b	; 11
    52c4:	0f b6       	in	r0, 0x3f	; 63
    52c6:	f8 94       	cli
    52c8:	de bf       	out	0x3e, r29	; 62
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	cd bf       	out	0x3d, r28	; 61
    52ce:	6c 01       	movw	r12, r24
    52d0:	7b 01       	movw	r14, r22
    52d2:	8a 01       	movw	r16, r20
    52d4:	fc 01       	movw	r30, r24
    52d6:	17 82       	std	Z+7, r1	; 0x07
    52d8:	16 82       	std	Z+6, r1	; 0x06
    52da:	83 81       	ldd	r24, Z+3	; 0x03
    52dc:	81 ff       	sbrs	r24, 1
    52de:	bf c1       	rjmp	.+894    	; 0x565e <vfprintf+0x3c4>
    52e0:	ce 01       	movw	r24, r28
    52e2:	01 96       	adiw	r24, 0x01	; 1
    52e4:	3c 01       	movw	r6, r24
    52e6:	f6 01       	movw	r30, r12
    52e8:	93 81       	ldd	r25, Z+3	; 0x03
    52ea:	f7 01       	movw	r30, r14
    52ec:	93 fd       	sbrc	r25, 3
    52ee:	85 91       	lpm	r24, Z+
    52f0:	93 ff       	sbrs	r25, 3
    52f2:	81 91       	ld	r24, Z+
    52f4:	7f 01       	movw	r14, r30
    52f6:	88 23       	and	r24, r24
    52f8:	09 f4       	brne	.+2      	; 0x52fc <vfprintf+0x62>
    52fa:	ad c1       	rjmp	.+858    	; 0x5656 <vfprintf+0x3bc>
    52fc:	85 32       	cpi	r24, 0x25	; 37
    52fe:	39 f4       	brne	.+14     	; 0x530e <vfprintf+0x74>
    5300:	93 fd       	sbrc	r25, 3
    5302:	85 91       	lpm	r24, Z+
    5304:	93 ff       	sbrs	r25, 3
    5306:	81 91       	ld	r24, Z+
    5308:	7f 01       	movw	r14, r30
    530a:	85 32       	cpi	r24, 0x25	; 37
    530c:	21 f4       	brne	.+8      	; 0x5316 <vfprintf+0x7c>
    530e:	b6 01       	movw	r22, r12
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	d6 d1       	rcall	.+940    	; 0x56c0 <fputc>
    5314:	e8 cf       	rjmp	.-48     	; 0x52e6 <vfprintf+0x4c>
    5316:	91 2c       	mov	r9, r1
    5318:	21 2c       	mov	r2, r1
    531a:	31 2c       	mov	r3, r1
    531c:	ff e1       	ldi	r31, 0x1F	; 31
    531e:	f3 15       	cp	r31, r3
    5320:	d8 f0       	brcs	.+54     	; 0x5358 <vfprintf+0xbe>
    5322:	8b 32       	cpi	r24, 0x2B	; 43
    5324:	79 f0       	breq	.+30     	; 0x5344 <vfprintf+0xaa>
    5326:	38 f4       	brcc	.+14     	; 0x5336 <vfprintf+0x9c>
    5328:	80 32       	cpi	r24, 0x20	; 32
    532a:	79 f0       	breq	.+30     	; 0x534a <vfprintf+0xb0>
    532c:	83 32       	cpi	r24, 0x23	; 35
    532e:	a1 f4       	brne	.+40     	; 0x5358 <vfprintf+0xbe>
    5330:	23 2d       	mov	r18, r3
    5332:	20 61       	ori	r18, 0x10	; 16
    5334:	1d c0       	rjmp	.+58     	; 0x5370 <vfprintf+0xd6>
    5336:	8d 32       	cpi	r24, 0x2D	; 45
    5338:	61 f0       	breq	.+24     	; 0x5352 <vfprintf+0xb8>
    533a:	80 33       	cpi	r24, 0x30	; 48
    533c:	69 f4       	brne	.+26     	; 0x5358 <vfprintf+0xbe>
    533e:	23 2d       	mov	r18, r3
    5340:	21 60       	ori	r18, 0x01	; 1
    5342:	16 c0       	rjmp	.+44     	; 0x5370 <vfprintf+0xd6>
    5344:	83 2d       	mov	r24, r3
    5346:	82 60       	ori	r24, 0x02	; 2
    5348:	38 2e       	mov	r3, r24
    534a:	e3 2d       	mov	r30, r3
    534c:	e4 60       	ori	r30, 0x04	; 4
    534e:	3e 2e       	mov	r3, r30
    5350:	2a c0       	rjmp	.+84     	; 0x53a6 <vfprintf+0x10c>
    5352:	f3 2d       	mov	r31, r3
    5354:	f8 60       	ori	r31, 0x08	; 8
    5356:	1d c0       	rjmp	.+58     	; 0x5392 <vfprintf+0xf8>
    5358:	37 fc       	sbrc	r3, 7
    535a:	2d c0       	rjmp	.+90     	; 0x53b6 <vfprintf+0x11c>
    535c:	20 ed       	ldi	r18, 0xD0	; 208
    535e:	28 0f       	add	r18, r24
    5360:	2a 30       	cpi	r18, 0x0A	; 10
    5362:	40 f0       	brcs	.+16     	; 0x5374 <vfprintf+0xda>
    5364:	8e 32       	cpi	r24, 0x2E	; 46
    5366:	b9 f4       	brne	.+46     	; 0x5396 <vfprintf+0xfc>
    5368:	36 fc       	sbrc	r3, 6
    536a:	75 c1       	rjmp	.+746    	; 0x5656 <vfprintf+0x3bc>
    536c:	23 2d       	mov	r18, r3
    536e:	20 64       	ori	r18, 0x40	; 64
    5370:	32 2e       	mov	r3, r18
    5372:	19 c0       	rjmp	.+50     	; 0x53a6 <vfprintf+0x10c>
    5374:	36 fe       	sbrs	r3, 6
    5376:	06 c0       	rjmp	.+12     	; 0x5384 <vfprintf+0xea>
    5378:	8a e0       	ldi	r24, 0x0A	; 10
    537a:	98 9e       	mul	r9, r24
    537c:	20 0d       	add	r18, r0
    537e:	11 24       	eor	r1, r1
    5380:	92 2e       	mov	r9, r18
    5382:	11 c0       	rjmp	.+34     	; 0x53a6 <vfprintf+0x10c>
    5384:	ea e0       	ldi	r30, 0x0A	; 10
    5386:	2e 9e       	mul	r2, r30
    5388:	20 0d       	add	r18, r0
    538a:	11 24       	eor	r1, r1
    538c:	22 2e       	mov	r2, r18
    538e:	f3 2d       	mov	r31, r3
    5390:	f0 62       	ori	r31, 0x20	; 32
    5392:	3f 2e       	mov	r3, r31
    5394:	08 c0       	rjmp	.+16     	; 0x53a6 <vfprintf+0x10c>
    5396:	8c 36       	cpi	r24, 0x6C	; 108
    5398:	21 f4       	brne	.+8      	; 0x53a2 <vfprintf+0x108>
    539a:	83 2d       	mov	r24, r3
    539c:	80 68       	ori	r24, 0x80	; 128
    539e:	38 2e       	mov	r3, r24
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <vfprintf+0x10c>
    53a2:	88 36       	cpi	r24, 0x68	; 104
    53a4:	41 f4       	brne	.+16     	; 0x53b6 <vfprintf+0x11c>
    53a6:	f7 01       	movw	r30, r14
    53a8:	93 fd       	sbrc	r25, 3
    53aa:	85 91       	lpm	r24, Z+
    53ac:	93 ff       	sbrs	r25, 3
    53ae:	81 91       	ld	r24, Z+
    53b0:	7f 01       	movw	r14, r30
    53b2:	81 11       	cpse	r24, r1
    53b4:	b3 cf       	rjmp	.-154    	; 0x531c <vfprintf+0x82>
    53b6:	98 2f       	mov	r25, r24
    53b8:	9f 7d       	andi	r25, 0xDF	; 223
    53ba:	95 54       	subi	r25, 0x45	; 69
    53bc:	93 30       	cpi	r25, 0x03	; 3
    53be:	28 f4       	brcc	.+10     	; 0x53ca <vfprintf+0x130>
    53c0:	0c 5f       	subi	r16, 0xFC	; 252
    53c2:	1f 4f       	sbci	r17, 0xFF	; 255
    53c4:	9f e3       	ldi	r25, 0x3F	; 63
    53c6:	99 83       	std	Y+1, r25	; 0x01
    53c8:	0d c0       	rjmp	.+26     	; 0x53e4 <vfprintf+0x14a>
    53ca:	83 36       	cpi	r24, 0x63	; 99
    53cc:	31 f0       	breq	.+12     	; 0x53da <vfprintf+0x140>
    53ce:	83 37       	cpi	r24, 0x73	; 115
    53d0:	71 f0       	breq	.+28     	; 0x53ee <vfprintf+0x154>
    53d2:	83 35       	cpi	r24, 0x53	; 83
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <vfprintf+0x13e>
    53d6:	55 c0       	rjmp	.+170    	; 0x5482 <vfprintf+0x1e8>
    53d8:	20 c0       	rjmp	.+64     	; 0x541a <vfprintf+0x180>
    53da:	f8 01       	movw	r30, r16
    53dc:	80 81       	ld	r24, Z
    53de:	89 83       	std	Y+1, r24	; 0x01
    53e0:	0e 5f       	subi	r16, 0xFE	; 254
    53e2:	1f 4f       	sbci	r17, 0xFF	; 255
    53e4:	88 24       	eor	r8, r8
    53e6:	83 94       	inc	r8
    53e8:	91 2c       	mov	r9, r1
    53ea:	53 01       	movw	r10, r6
    53ec:	12 c0       	rjmp	.+36     	; 0x5412 <vfprintf+0x178>
    53ee:	28 01       	movw	r4, r16
    53f0:	f2 e0       	ldi	r31, 0x02	; 2
    53f2:	4f 0e       	add	r4, r31
    53f4:	51 1c       	adc	r5, r1
    53f6:	f8 01       	movw	r30, r16
    53f8:	a0 80       	ld	r10, Z
    53fa:	b1 80       	ldd	r11, Z+1	; 0x01
    53fc:	36 fe       	sbrs	r3, 6
    53fe:	03 c0       	rjmp	.+6      	; 0x5406 <vfprintf+0x16c>
    5400:	69 2d       	mov	r22, r9
    5402:	70 e0       	ldi	r23, 0x00	; 0
    5404:	02 c0       	rjmp	.+4      	; 0x540a <vfprintf+0x170>
    5406:	6f ef       	ldi	r22, 0xFF	; 255
    5408:	7f ef       	ldi	r23, 0xFF	; 255
    540a:	c5 01       	movw	r24, r10
    540c:	4e d1       	rcall	.+668    	; 0x56aa <strnlen>
    540e:	4c 01       	movw	r8, r24
    5410:	82 01       	movw	r16, r4
    5412:	f3 2d       	mov	r31, r3
    5414:	ff 77       	andi	r31, 0x7F	; 127
    5416:	3f 2e       	mov	r3, r31
    5418:	15 c0       	rjmp	.+42     	; 0x5444 <vfprintf+0x1aa>
    541a:	28 01       	movw	r4, r16
    541c:	22 e0       	ldi	r18, 0x02	; 2
    541e:	42 0e       	add	r4, r18
    5420:	51 1c       	adc	r5, r1
    5422:	f8 01       	movw	r30, r16
    5424:	a0 80       	ld	r10, Z
    5426:	b1 80       	ldd	r11, Z+1	; 0x01
    5428:	36 fe       	sbrs	r3, 6
    542a:	03 c0       	rjmp	.+6      	; 0x5432 <vfprintf+0x198>
    542c:	69 2d       	mov	r22, r9
    542e:	70 e0       	ldi	r23, 0x00	; 0
    5430:	02 c0       	rjmp	.+4      	; 0x5436 <vfprintf+0x19c>
    5432:	6f ef       	ldi	r22, 0xFF	; 255
    5434:	7f ef       	ldi	r23, 0xFF	; 255
    5436:	c5 01       	movw	r24, r10
    5438:	2d d1       	rcall	.+602    	; 0x5694 <strnlen_P>
    543a:	4c 01       	movw	r8, r24
    543c:	f3 2d       	mov	r31, r3
    543e:	f0 68       	ori	r31, 0x80	; 128
    5440:	3f 2e       	mov	r3, r31
    5442:	82 01       	movw	r16, r4
    5444:	33 fc       	sbrc	r3, 3
    5446:	19 c0       	rjmp	.+50     	; 0x547a <vfprintf+0x1e0>
    5448:	82 2d       	mov	r24, r2
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	88 16       	cp	r8, r24
    544e:	99 06       	cpc	r9, r25
    5450:	a0 f4       	brcc	.+40     	; 0x547a <vfprintf+0x1e0>
    5452:	b6 01       	movw	r22, r12
    5454:	80 e2       	ldi	r24, 0x20	; 32
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	33 d1       	rcall	.+614    	; 0x56c0 <fputc>
    545a:	2a 94       	dec	r2
    545c:	f5 cf       	rjmp	.-22     	; 0x5448 <vfprintf+0x1ae>
    545e:	f5 01       	movw	r30, r10
    5460:	37 fc       	sbrc	r3, 7
    5462:	85 91       	lpm	r24, Z+
    5464:	37 fe       	sbrs	r3, 7
    5466:	81 91       	ld	r24, Z+
    5468:	5f 01       	movw	r10, r30
    546a:	b6 01       	movw	r22, r12
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	28 d1       	rcall	.+592    	; 0x56c0 <fputc>
    5470:	21 10       	cpse	r2, r1
    5472:	2a 94       	dec	r2
    5474:	21 e0       	ldi	r18, 0x01	; 1
    5476:	82 1a       	sub	r8, r18
    5478:	91 08       	sbc	r9, r1
    547a:	81 14       	cp	r8, r1
    547c:	91 04       	cpc	r9, r1
    547e:	79 f7       	brne	.-34     	; 0x545e <vfprintf+0x1c4>
    5480:	e1 c0       	rjmp	.+450    	; 0x5644 <vfprintf+0x3aa>
    5482:	84 36       	cpi	r24, 0x64	; 100
    5484:	11 f0       	breq	.+4      	; 0x548a <vfprintf+0x1f0>
    5486:	89 36       	cpi	r24, 0x69	; 105
    5488:	39 f5       	brne	.+78     	; 0x54d8 <vfprintf+0x23e>
    548a:	f8 01       	movw	r30, r16
    548c:	37 fe       	sbrs	r3, 7
    548e:	07 c0       	rjmp	.+14     	; 0x549e <vfprintf+0x204>
    5490:	60 81       	ld	r22, Z
    5492:	71 81       	ldd	r23, Z+1	; 0x01
    5494:	82 81       	ldd	r24, Z+2	; 0x02
    5496:	93 81       	ldd	r25, Z+3	; 0x03
    5498:	0c 5f       	subi	r16, 0xFC	; 252
    549a:	1f 4f       	sbci	r17, 0xFF	; 255
    549c:	08 c0       	rjmp	.+16     	; 0x54ae <vfprintf+0x214>
    549e:	60 81       	ld	r22, Z
    54a0:	71 81       	ldd	r23, Z+1	; 0x01
    54a2:	07 2e       	mov	r0, r23
    54a4:	00 0c       	add	r0, r0
    54a6:	88 0b       	sbc	r24, r24
    54a8:	99 0b       	sbc	r25, r25
    54aa:	0e 5f       	subi	r16, 0xFE	; 254
    54ac:	1f 4f       	sbci	r17, 0xFF	; 255
    54ae:	f3 2d       	mov	r31, r3
    54b0:	ff 76       	andi	r31, 0x6F	; 111
    54b2:	3f 2e       	mov	r3, r31
    54b4:	97 ff       	sbrs	r25, 7
    54b6:	09 c0       	rjmp	.+18     	; 0x54ca <vfprintf+0x230>
    54b8:	90 95       	com	r25
    54ba:	80 95       	com	r24
    54bc:	70 95       	com	r23
    54be:	61 95       	neg	r22
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	8f 4f       	sbci	r24, 0xFF	; 255
    54c4:	9f 4f       	sbci	r25, 0xFF	; 255
    54c6:	f0 68       	ori	r31, 0x80	; 128
    54c8:	3f 2e       	mov	r3, r31
    54ca:	2a e0       	ldi	r18, 0x0A	; 10
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	a3 01       	movw	r20, r6
    54d0:	33 d1       	rcall	.+614    	; 0x5738 <__ultoa_invert>
    54d2:	88 2e       	mov	r8, r24
    54d4:	86 18       	sub	r8, r6
    54d6:	44 c0       	rjmp	.+136    	; 0x5560 <vfprintf+0x2c6>
    54d8:	85 37       	cpi	r24, 0x75	; 117
    54da:	31 f4       	brne	.+12     	; 0x54e8 <vfprintf+0x24e>
    54dc:	23 2d       	mov	r18, r3
    54de:	2f 7e       	andi	r18, 0xEF	; 239
    54e0:	b2 2e       	mov	r11, r18
    54e2:	2a e0       	ldi	r18, 0x0A	; 10
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	25 c0       	rjmp	.+74     	; 0x5532 <vfprintf+0x298>
    54e8:	93 2d       	mov	r25, r3
    54ea:	99 7f       	andi	r25, 0xF9	; 249
    54ec:	b9 2e       	mov	r11, r25
    54ee:	8f 36       	cpi	r24, 0x6F	; 111
    54f0:	c1 f0       	breq	.+48     	; 0x5522 <vfprintf+0x288>
    54f2:	18 f4       	brcc	.+6      	; 0x54fa <vfprintf+0x260>
    54f4:	88 35       	cpi	r24, 0x58	; 88
    54f6:	79 f0       	breq	.+30     	; 0x5516 <vfprintf+0x27c>
    54f8:	ae c0       	rjmp	.+348    	; 0x5656 <vfprintf+0x3bc>
    54fa:	80 37       	cpi	r24, 0x70	; 112
    54fc:	19 f0       	breq	.+6      	; 0x5504 <vfprintf+0x26a>
    54fe:	88 37       	cpi	r24, 0x78	; 120
    5500:	21 f0       	breq	.+8      	; 0x550a <vfprintf+0x270>
    5502:	a9 c0       	rjmp	.+338    	; 0x5656 <vfprintf+0x3bc>
    5504:	e9 2f       	mov	r30, r25
    5506:	e0 61       	ori	r30, 0x10	; 16
    5508:	be 2e       	mov	r11, r30
    550a:	b4 fe       	sbrs	r11, 4
    550c:	0d c0       	rjmp	.+26     	; 0x5528 <vfprintf+0x28e>
    550e:	fb 2d       	mov	r31, r11
    5510:	f4 60       	ori	r31, 0x04	; 4
    5512:	bf 2e       	mov	r11, r31
    5514:	09 c0       	rjmp	.+18     	; 0x5528 <vfprintf+0x28e>
    5516:	34 fe       	sbrs	r3, 4
    5518:	0a c0       	rjmp	.+20     	; 0x552e <vfprintf+0x294>
    551a:	29 2f       	mov	r18, r25
    551c:	26 60       	ori	r18, 0x06	; 6
    551e:	b2 2e       	mov	r11, r18
    5520:	06 c0       	rjmp	.+12     	; 0x552e <vfprintf+0x294>
    5522:	28 e0       	ldi	r18, 0x08	; 8
    5524:	30 e0       	ldi	r19, 0x00	; 0
    5526:	05 c0       	rjmp	.+10     	; 0x5532 <vfprintf+0x298>
    5528:	20 e1       	ldi	r18, 0x10	; 16
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	02 c0       	rjmp	.+4      	; 0x5532 <vfprintf+0x298>
    552e:	20 e1       	ldi	r18, 0x10	; 16
    5530:	32 e0       	ldi	r19, 0x02	; 2
    5532:	f8 01       	movw	r30, r16
    5534:	b7 fe       	sbrs	r11, 7
    5536:	07 c0       	rjmp	.+14     	; 0x5546 <vfprintf+0x2ac>
    5538:	60 81       	ld	r22, Z
    553a:	71 81       	ldd	r23, Z+1	; 0x01
    553c:	82 81       	ldd	r24, Z+2	; 0x02
    553e:	93 81       	ldd	r25, Z+3	; 0x03
    5540:	0c 5f       	subi	r16, 0xFC	; 252
    5542:	1f 4f       	sbci	r17, 0xFF	; 255
    5544:	06 c0       	rjmp	.+12     	; 0x5552 <vfprintf+0x2b8>
    5546:	60 81       	ld	r22, Z
    5548:	71 81       	ldd	r23, Z+1	; 0x01
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	0e 5f       	subi	r16, 0xFE	; 254
    5550:	1f 4f       	sbci	r17, 0xFF	; 255
    5552:	a3 01       	movw	r20, r6
    5554:	f1 d0       	rcall	.+482    	; 0x5738 <__ultoa_invert>
    5556:	88 2e       	mov	r8, r24
    5558:	86 18       	sub	r8, r6
    555a:	fb 2d       	mov	r31, r11
    555c:	ff 77       	andi	r31, 0x7F	; 127
    555e:	3f 2e       	mov	r3, r31
    5560:	36 fe       	sbrs	r3, 6
    5562:	0d c0       	rjmp	.+26     	; 0x557e <vfprintf+0x2e4>
    5564:	23 2d       	mov	r18, r3
    5566:	2e 7f       	andi	r18, 0xFE	; 254
    5568:	a2 2e       	mov	r10, r18
    556a:	89 14       	cp	r8, r9
    556c:	58 f4       	brcc	.+22     	; 0x5584 <vfprintf+0x2ea>
    556e:	34 fe       	sbrs	r3, 4
    5570:	0b c0       	rjmp	.+22     	; 0x5588 <vfprintf+0x2ee>
    5572:	32 fc       	sbrc	r3, 2
    5574:	09 c0       	rjmp	.+18     	; 0x5588 <vfprintf+0x2ee>
    5576:	83 2d       	mov	r24, r3
    5578:	8e 7e       	andi	r24, 0xEE	; 238
    557a:	a8 2e       	mov	r10, r24
    557c:	05 c0       	rjmp	.+10     	; 0x5588 <vfprintf+0x2ee>
    557e:	b8 2c       	mov	r11, r8
    5580:	a3 2c       	mov	r10, r3
    5582:	03 c0       	rjmp	.+6      	; 0x558a <vfprintf+0x2f0>
    5584:	b8 2c       	mov	r11, r8
    5586:	01 c0       	rjmp	.+2      	; 0x558a <vfprintf+0x2f0>
    5588:	b9 2c       	mov	r11, r9
    558a:	a4 fe       	sbrs	r10, 4
    558c:	0f c0       	rjmp	.+30     	; 0x55ac <vfprintf+0x312>
    558e:	fe 01       	movw	r30, r28
    5590:	e8 0d       	add	r30, r8
    5592:	f1 1d       	adc	r31, r1
    5594:	80 81       	ld	r24, Z
    5596:	80 33       	cpi	r24, 0x30	; 48
    5598:	21 f4       	brne	.+8      	; 0x55a2 <vfprintf+0x308>
    559a:	9a 2d       	mov	r25, r10
    559c:	99 7e       	andi	r25, 0xE9	; 233
    559e:	a9 2e       	mov	r10, r25
    55a0:	09 c0       	rjmp	.+18     	; 0x55b4 <vfprintf+0x31a>
    55a2:	a2 fe       	sbrs	r10, 2
    55a4:	06 c0       	rjmp	.+12     	; 0x55b2 <vfprintf+0x318>
    55a6:	b3 94       	inc	r11
    55a8:	b3 94       	inc	r11
    55aa:	04 c0       	rjmp	.+8      	; 0x55b4 <vfprintf+0x31a>
    55ac:	8a 2d       	mov	r24, r10
    55ae:	86 78       	andi	r24, 0x86	; 134
    55b0:	09 f0       	breq	.+2      	; 0x55b4 <vfprintf+0x31a>
    55b2:	b3 94       	inc	r11
    55b4:	a3 fc       	sbrc	r10, 3
    55b6:	10 c0       	rjmp	.+32     	; 0x55d8 <vfprintf+0x33e>
    55b8:	a0 fe       	sbrs	r10, 0
    55ba:	06 c0       	rjmp	.+12     	; 0x55c8 <vfprintf+0x32e>
    55bc:	b2 14       	cp	r11, r2
    55be:	80 f4       	brcc	.+32     	; 0x55e0 <vfprintf+0x346>
    55c0:	28 0c       	add	r2, r8
    55c2:	92 2c       	mov	r9, r2
    55c4:	9b 18       	sub	r9, r11
    55c6:	0d c0       	rjmp	.+26     	; 0x55e2 <vfprintf+0x348>
    55c8:	b2 14       	cp	r11, r2
    55ca:	58 f4       	brcc	.+22     	; 0x55e2 <vfprintf+0x348>
    55cc:	b6 01       	movw	r22, r12
    55ce:	80 e2       	ldi	r24, 0x20	; 32
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	76 d0       	rcall	.+236    	; 0x56c0 <fputc>
    55d4:	b3 94       	inc	r11
    55d6:	f8 cf       	rjmp	.-16     	; 0x55c8 <vfprintf+0x32e>
    55d8:	b2 14       	cp	r11, r2
    55da:	18 f4       	brcc	.+6      	; 0x55e2 <vfprintf+0x348>
    55dc:	2b 18       	sub	r2, r11
    55de:	02 c0       	rjmp	.+4      	; 0x55e4 <vfprintf+0x34a>
    55e0:	98 2c       	mov	r9, r8
    55e2:	21 2c       	mov	r2, r1
    55e4:	a4 fe       	sbrs	r10, 4
    55e6:	0f c0       	rjmp	.+30     	; 0x5606 <vfprintf+0x36c>
    55e8:	b6 01       	movw	r22, r12
    55ea:	80 e3       	ldi	r24, 0x30	; 48
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	68 d0       	rcall	.+208    	; 0x56c0 <fputc>
    55f0:	a2 fe       	sbrs	r10, 2
    55f2:	16 c0       	rjmp	.+44     	; 0x5620 <vfprintf+0x386>
    55f4:	a1 fc       	sbrc	r10, 1
    55f6:	03 c0       	rjmp	.+6      	; 0x55fe <vfprintf+0x364>
    55f8:	88 e7       	ldi	r24, 0x78	; 120
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	02 c0       	rjmp	.+4      	; 0x5602 <vfprintf+0x368>
    55fe:	88 e5       	ldi	r24, 0x58	; 88
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	b6 01       	movw	r22, r12
    5604:	0c c0       	rjmp	.+24     	; 0x561e <vfprintf+0x384>
    5606:	8a 2d       	mov	r24, r10
    5608:	86 78       	andi	r24, 0x86	; 134
    560a:	51 f0       	breq	.+20     	; 0x5620 <vfprintf+0x386>
    560c:	a1 fe       	sbrs	r10, 1
    560e:	02 c0       	rjmp	.+4      	; 0x5614 <vfprintf+0x37a>
    5610:	8b e2       	ldi	r24, 0x2B	; 43
    5612:	01 c0       	rjmp	.+2      	; 0x5616 <vfprintf+0x37c>
    5614:	80 e2       	ldi	r24, 0x20	; 32
    5616:	a7 fc       	sbrc	r10, 7
    5618:	8d e2       	ldi	r24, 0x2D	; 45
    561a:	b6 01       	movw	r22, r12
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	50 d0       	rcall	.+160    	; 0x56c0 <fputc>
    5620:	89 14       	cp	r8, r9
    5622:	30 f4       	brcc	.+12     	; 0x5630 <vfprintf+0x396>
    5624:	b6 01       	movw	r22, r12
    5626:	80 e3       	ldi	r24, 0x30	; 48
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	4a d0       	rcall	.+148    	; 0x56c0 <fputc>
    562c:	9a 94       	dec	r9
    562e:	f8 cf       	rjmp	.-16     	; 0x5620 <vfprintf+0x386>
    5630:	8a 94       	dec	r8
    5632:	f3 01       	movw	r30, r6
    5634:	e8 0d       	add	r30, r8
    5636:	f1 1d       	adc	r31, r1
    5638:	80 81       	ld	r24, Z
    563a:	b6 01       	movw	r22, r12
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	40 d0       	rcall	.+128    	; 0x56c0 <fputc>
    5640:	81 10       	cpse	r8, r1
    5642:	f6 cf       	rjmp	.-20     	; 0x5630 <vfprintf+0x396>
    5644:	22 20       	and	r2, r2
    5646:	09 f4       	brne	.+2      	; 0x564a <vfprintf+0x3b0>
    5648:	4e ce       	rjmp	.-868    	; 0x52e6 <vfprintf+0x4c>
    564a:	b6 01       	movw	r22, r12
    564c:	80 e2       	ldi	r24, 0x20	; 32
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	37 d0       	rcall	.+110    	; 0x56c0 <fputc>
    5652:	2a 94       	dec	r2
    5654:	f7 cf       	rjmp	.-18     	; 0x5644 <vfprintf+0x3aa>
    5656:	f6 01       	movw	r30, r12
    5658:	86 81       	ldd	r24, Z+6	; 0x06
    565a:	97 81       	ldd	r25, Z+7	; 0x07
    565c:	02 c0       	rjmp	.+4      	; 0x5662 <vfprintf+0x3c8>
    565e:	8f ef       	ldi	r24, 0xFF	; 255
    5660:	9f ef       	ldi	r25, 0xFF	; 255
    5662:	2b 96       	adiw	r28, 0x0b	; 11
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	f8 94       	cli
    5668:	de bf       	out	0x3e, r29	; 62
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	cd bf       	out	0x3d, r28	; 61
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	1f 91       	pop	r17
    5674:	0f 91       	pop	r16
    5676:	ff 90       	pop	r15
    5678:	ef 90       	pop	r14
    567a:	df 90       	pop	r13
    567c:	cf 90       	pop	r12
    567e:	bf 90       	pop	r11
    5680:	af 90       	pop	r10
    5682:	9f 90       	pop	r9
    5684:	8f 90       	pop	r8
    5686:	7f 90       	pop	r7
    5688:	6f 90       	pop	r6
    568a:	5f 90       	pop	r5
    568c:	4f 90       	pop	r4
    568e:	3f 90       	pop	r3
    5690:	2f 90       	pop	r2
    5692:	08 95       	ret

00005694 <strnlen_P>:
    5694:	fc 01       	movw	r30, r24
    5696:	05 90       	lpm	r0, Z+
    5698:	61 50       	subi	r22, 0x01	; 1
    569a:	70 40       	sbci	r23, 0x00	; 0
    569c:	01 10       	cpse	r0, r1
    569e:	d8 f7       	brcc	.-10     	; 0x5696 <strnlen_P+0x2>
    56a0:	80 95       	com	r24
    56a2:	90 95       	com	r25
    56a4:	8e 0f       	add	r24, r30
    56a6:	9f 1f       	adc	r25, r31
    56a8:	08 95       	ret

000056aa <strnlen>:
    56aa:	fc 01       	movw	r30, r24
    56ac:	61 50       	subi	r22, 0x01	; 1
    56ae:	70 40       	sbci	r23, 0x00	; 0
    56b0:	01 90       	ld	r0, Z+
    56b2:	01 10       	cpse	r0, r1
    56b4:	d8 f7       	brcc	.-10     	; 0x56ac <strnlen+0x2>
    56b6:	80 95       	com	r24
    56b8:	90 95       	com	r25
    56ba:	8e 0f       	add	r24, r30
    56bc:	9f 1f       	adc	r25, r31
    56be:	08 95       	ret

000056c0 <fputc>:
    56c0:	0f 93       	push	r16
    56c2:	1f 93       	push	r17
    56c4:	cf 93       	push	r28
    56c6:	df 93       	push	r29
    56c8:	fb 01       	movw	r30, r22
    56ca:	23 81       	ldd	r18, Z+3	; 0x03
    56cc:	21 fd       	sbrc	r18, 1
    56ce:	03 c0       	rjmp	.+6      	; 0x56d6 <fputc+0x16>
    56d0:	8f ef       	ldi	r24, 0xFF	; 255
    56d2:	9f ef       	ldi	r25, 0xFF	; 255
    56d4:	2c c0       	rjmp	.+88     	; 0x572e <fputc+0x6e>
    56d6:	22 ff       	sbrs	r18, 2
    56d8:	16 c0       	rjmp	.+44     	; 0x5706 <fputc+0x46>
    56da:	46 81       	ldd	r20, Z+6	; 0x06
    56dc:	57 81       	ldd	r21, Z+7	; 0x07
    56de:	24 81       	ldd	r18, Z+4	; 0x04
    56e0:	35 81       	ldd	r19, Z+5	; 0x05
    56e2:	42 17       	cp	r20, r18
    56e4:	53 07       	cpc	r21, r19
    56e6:	44 f4       	brge	.+16     	; 0x56f8 <fputc+0x38>
    56e8:	a0 81       	ld	r26, Z
    56ea:	b1 81       	ldd	r27, Z+1	; 0x01
    56ec:	9d 01       	movw	r18, r26
    56ee:	2f 5f       	subi	r18, 0xFF	; 255
    56f0:	3f 4f       	sbci	r19, 0xFF	; 255
    56f2:	31 83       	std	Z+1, r19	; 0x01
    56f4:	20 83       	st	Z, r18
    56f6:	8c 93       	st	X, r24
    56f8:	26 81       	ldd	r18, Z+6	; 0x06
    56fa:	37 81       	ldd	r19, Z+7	; 0x07
    56fc:	2f 5f       	subi	r18, 0xFF	; 255
    56fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5700:	37 83       	std	Z+7, r19	; 0x07
    5702:	26 83       	std	Z+6, r18	; 0x06
    5704:	14 c0       	rjmp	.+40     	; 0x572e <fputc+0x6e>
    5706:	8b 01       	movw	r16, r22
    5708:	ec 01       	movw	r28, r24
    570a:	fb 01       	movw	r30, r22
    570c:	00 84       	ldd	r0, Z+8	; 0x08
    570e:	f1 85       	ldd	r31, Z+9	; 0x09
    5710:	e0 2d       	mov	r30, r0
    5712:	19 95       	eicall
    5714:	89 2b       	or	r24, r25
    5716:	e1 f6       	brne	.-72     	; 0x56d0 <fputc+0x10>
    5718:	d8 01       	movw	r26, r16
    571a:	16 96       	adiw	r26, 0x06	; 6
    571c:	8d 91       	ld	r24, X+
    571e:	9c 91       	ld	r25, X
    5720:	17 97       	sbiw	r26, 0x07	; 7
    5722:	01 96       	adiw	r24, 0x01	; 1
    5724:	17 96       	adiw	r26, 0x07	; 7
    5726:	9c 93       	st	X, r25
    5728:	8e 93       	st	-X, r24
    572a:	16 97       	sbiw	r26, 0x06	; 6
    572c:	ce 01       	movw	r24, r28
    572e:	df 91       	pop	r29
    5730:	cf 91       	pop	r28
    5732:	1f 91       	pop	r17
    5734:	0f 91       	pop	r16
    5736:	08 95       	ret

00005738 <__ultoa_invert>:
    5738:	fa 01       	movw	r30, r20
    573a:	aa 27       	eor	r26, r26
    573c:	28 30       	cpi	r18, 0x08	; 8
    573e:	51 f1       	breq	.+84     	; 0x5794 <__ultoa_invert+0x5c>
    5740:	20 31       	cpi	r18, 0x10	; 16
    5742:	81 f1       	breq	.+96     	; 0x57a4 <__ultoa_invert+0x6c>
    5744:	e8 94       	clt
    5746:	6f 93       	push	r22
    5748:	6e 7f       	andi	r22, 0xFE	; 254
    574a:	6e 5f       	subi	r22, 0xFE	; 254
    574c:	7f 4f       	sbci	r23, 0xFF	; 255
    574e:	8f 4f       	sbci	r24, 0xFF	; 255
    5750:	9f 4f       	sbci	r25, 0xFF	; 255
    5752:	af 4f       	sbci	r26, 0xFF	; 255
    5754:	b1 e0       	ldi	r27, 0x01	; 1
    5756:	3e d0       	rcall	.+124    	; 0x57d4 <__ultoa_invert+0x9c>
    5758:	b4 e0       	ldi	r27, 0x04	; 4
    575a:	3c d0       	rcall	.+120    	; 0x57d4 <__ultoa_invert+0x9c>
    575c:	67 0f       	add	r22, r23
    575e:	78 1f       	adc	r23, r24
    5760:	89 1f       	adc	r24, r25
    5762:	9a 1f       	adc	r25, r26
    5764:	a1 1d       	adc	r26, r1
    5766:	68 0f       	add	r22, r24
    5768:	79 1f       	adc	r23, r25
    576a:	8a 1f       	adc	r24, r26
    576c:	91 1d       	adc	r25, r1
    576e:	a1 1d       	adc	r26, r1
    5770:	6a 0f       	add	r22, r26
    5772:	71 1d       	adc	r23, r1
    5774:	81 1d       	adc	r24, r1
    5776:	91 1d       	adc	r25, r1
    5778:	a1 1d       	adc	r26, r1
    577a:	20 d0       	rcall	.+64     	; 0x57bc <__ultoa_invert+0x84>
    577c:	09 f4       	brne	.+2      	; 0x5780 <__ultoa_invert+0x48>
    577e:	68 94       	set
    5780:	3f 91       	pop	r19
    5782:	2a e0       	ldi	r18, 0x0A	; 10
    5784:	26 9f       	mul	r18, r22
    5786:	11 24       	eor	r1, r1
    5788:	30 19       	sub	r19, r0
    578a:	30 5d       	subi	r19, 0xD0	; 208
    578c:	31 93       	st	Z+, r19
    578e:	de f6       	brtc	.-74     	; 0x5746 <__ultoa_invert+0xe>
    5790:	cf 01       	movw	r24, r30
    5792:	08 95       	ret
    5794:	46 2f       	mov	r20, r22
    5796:	47 70       	andi	r20, 0x07	; 7
    5798:	40 5d       	subi	r20, 0xD0	; 208
    579a:	41 93       	st	Z+, r20
    579c:	b3 e0       	ldi	r27, 0x03	; 3
    579e:	0f d0       	rcall	.+30     	; 0x57be <__ultoa_invert+0x86>
    57a0:	c9 f7       	brne	.-14     	; 0x5794 <__ultoa_invert+0x5c>
    57a2:	f6 cf       	rjmp	.-20     	; 0x5790 <__ultoa_invert+0x58>
    57a4:	46 2f       	mov	r20, r22
    57a6:	4f 70       	andi	r20, 0x0F	; 15
    57a8:	40 5d       	subi	r20, 0xD0	; 208
    57aa:	4a 33       	cpi	r20, 0x3A	; 58
    57ac:	18 f0       	brcs	.+6      	; 0x57b4 <__ultoa_invert+0x7c>
    57ae:	49 5d       	subi	r20, 0xD9	; 217
    57b0:	31 fd       	sbrc	r19, 1
    57b2:	40 52       	subi	r20, 0x20	; 32
    57b4:	41 93       	st	Z+, r20
    57b6:	02 d0       	rcall	.+4      	; 0x57bc <__ultoa_invert+0x84>
    57b8:	a9 f7       	brne	.-22     	; 0x57a4 <__ultoa_invert+0x6c>
    57ba:	ea cf       	rjmp	.-44     	; 0x5790 <__ultoa_invert+0x58>
    57bc:	b4 e0       	ldi	r27, 0x04	; 4
    57be:	a6 95       	lsr	r26
    57c0:	97 95       	ror	r25
    57c2:	87 95       	ror	r24
    57c4:	77 95       	ror	r23
    57c6:	67 95       	ror	r22
    57c8:	ba 95       	dec	r27
    57ca:	c9 f7       	brne	.-14     	; 0x57be <__ultoa_invert+0x86>
    57cc:	00 97       	sbiw	r24, 0x00	; 0
    57ce:	61 05       	cpc	r22, r1
    57d0:	71 05       	cpc	r23, r1
    57d2:	08 95       	ret
    57d4:	9b 01       	movw	r18, r22
    57d6:	ac 01       	movw	r20, r24
    57d8:	0a 2e       	mov	r0, r26
    57da:	06 94       	lsr	r0
    57dc:	57 95       	ror	r21
    57de:	47 95       	ror	r20
    57e0:	37 95       	ror	r19
    57e2:	27 95       	ror	r18
    57e4:	ba 95       	dec	r27
    57e6:	c9 f7       	brne	.-14     	; 0x57da <__ultoa_invert+0xa2>
    57e8:	62 0f       	add	r22, r18
    57ea:	73 1f       	adc	r23, r19
    57ec:	84 1f       	adc	r24, r20
    57ee:	95 1f       	adc	r25, r21
    57f0:	a0 1d       	adc	r26, r0
    57f2:	08 95       	ret

000057f4 <_exit>:
    57f4:	f8 94       	cli

000057f6 <__stop_program>:
    57f6:	ff cf       	rjmp	.-2      	; 0x57f6 <__stop_program>
