
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000694  00800200  000072ca  0000735e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000072ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ceb  00800894  00800894  000079f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000079f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bc8  00000000  00000000  00007a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f1fc  00000000  00000000  00008658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004090  00000000  00000000  00017854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000079ea  00000000  00000000  0001b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029e8  00000000  00000000  000232d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048c9  00000000  00000000  00025cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000da06  00000000  00000000  0002a581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c38  00000000  00000000  00037f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c2       	rjmp	.+1312   	; 0x522 <__ctors_end>
       2:	00 00       	nop
       4:	af c2       	rjmp	.+1374   	; 0x564 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c2       	rjmp	.+1370   	; 0x564 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c2       	rjmp	.+1366   	; 0x564 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c2       	rjmp	.+1362   	; 0x564 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c2       	rjmp	.+1358   	; 0x564 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c2       	rjmp	.+1354   	; 0x564 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c2       	rjmp	.+1350   	; 0x564 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c2       	rjmp	.+1346   	; 0x564 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c2       	rjmp	.+1342   	; 0x564 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c2       	rjmp	.+1338   	; 0x564 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c2       	rjmp	.+1334   	; 0x564 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_12>
      34:	97 c2       	rjmp	.+1326   	; 0x564 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c2       	rjmp	.+1322   	; 0x564 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c2       	rjmp	.+1318   	; 0x564 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c2       	rjmp	.+1314   	; 0x564 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c2       	rjmp	.+1310   	; 0x564 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c2       	rjmp	.+1306   	; 0x564 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c2       	rjmp	.+1302   	; 0x564 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c2       	rjmp	.+1298   	; 0x564 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 06 23 	jmp	0x460c	; 0x460c <__vector_21>
      58:	85 c2       	rjmp	.+1290   	; 0x564 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c2       	rjmp	.+1286   	; 0x564 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 9e 2e 	jmp	0x5d3c	; 0x5d3c <__vector_24>
      64:	0c 94 7f 2a 	jmp	0x54fe	; 0x54fe <__vector_25>
      68:	0c 94 d1 2a 	jmp	0x55a2	; 0x55a2 <__vector_26>
      6c:	7b c2       	rjmp	.+1270   	; 0x564 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c2       	rjmp	.+1266   	; 0x564 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c2       	rjmp	.+1262   	; 0x564 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c2       	rjmp	.+1258   	; 0x564 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c2       	rjmp	.+1254   	; 0x564 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c2       	rjmp	.+1250   	; 0x564 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c2       	rjmp	.+1246   	; 0x564 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c2       	rjmp	.+1242   	; 0x564 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c2       	rjmp	.+1238   	; 0x564 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__vector_36>
      94:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__vector_37>
      98:	65 c2       	rjmp	.+1226   	; 0x564 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__vector_39>
      a0:	61 c2       	rjmp	.+1218   	; 0x564 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c2       	rjmp	.+1214   	; 0x564 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c2       	rjmp	.+1210   	; 0x564 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c2       	rjmp	.+1206   	; 0x564 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c2       	rjmp	.+1202   	; 0x564 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c2       	rjmp	.+1198   	; 0x564 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c2       	rjmp	.+1194   	; 0x564 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c2       	rjmp	.+1190   	; 0x564 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c2       	rjmp	.+1186   	; 0x564 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c2       	rjmp	.+1182   	; 0x564 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c2       	rjmp	.+1178   	; 0x564 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ab 2b 	jmp	0x5756	; 0x5756 <__vector_51>
      d0:	0c 94 fd 2b 	jmp	0x57fa	; 0x57fa <__vector_52>
      d4:	47 c2       	rjmp	.+1166   	; 0x564 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__vector_54>
      dc:	0c 94 93 2c 	jmp	0x5926	; 0x5926 <__vector_55>
      e0:	41 c2       	rjmp	.+1154   	; 0x564 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 02       	muls	r16, r23
      e6:	07 02       	muls	r16, r23
      e8:	07 02       	muls	r16, r23
      ea:	41 02       	muls	r20, r17
      ec:	49 02       	muls	r20, r25
      ee:	5f 02       	muls	r21, r31
      f0:	07 02       	muls	r16, r23
      f2:	07 02       	muls	r16, r23
      f4:	41 02       	muls	r20, r17
      f6:	49 02       	muls	r20, r25
      f8:	5c 31       	cpi	r21, 0x1C	; 28
      fa:	cc 31       	cpi	r28, 0x1C	; 28
      fc:	cc 31       	cpi	r28, 0x1C	; 28
      fe:	cc 31       	cpi	r28, 0x1C	; 28
     100:	cc 31       	cpi	r28, 0x1C	; 28
     102:	cc 31       	cpi	r28, 0x1C	; 28
     104:	cc 31       	cpi	r28, 0x1C	; 28
     106:	cc 31       	cpi	r28, 0x1C	; 28
     108:	5c 31       	cpi	r21, 0x1C	; 28
     10a:	cc 31       	cpi	r28, 0x1C	; 28
     10c:	cc 31       	cpi	r28, 0x1C	; 28
     10e:	cc 31       	cpi	r28, 0x1C	; 28
     110:	cc 31       	cpi	r28, 0x1C	; 28
     112:	cc 31       	cpi	r28, 0x1C	; 28
     114:	cc 31       	cpi	r28, 0x1C	; 28
     116:	cc 31       	cpi	r28, 0x1C	; 28
     118:	5e 31       	cpi	r21, 0x1E	; 30
     11a:	cc 31       	cpi	r28, 0x1C	; 28
     11c:	cc 31       	cpi	r28, 0x1C	; 28
     11e:	cc 31       	cpi	r28, 0x1C	; 28
     120:	cc 31       	cpi	r28, 0x1C	; 28
     122:	cc 31       	cpi	r28, 0x1C	; 28
     124:	cc 31       	cpi	r28, 0x1C	; 28
     126:	cc 31       	cpi	r28, 0x1C	; 28
     128:	cc 31       	cpi	r28, 0x1C	; 28
     12a:	cc 31       	cpi	r28, 0x1C	; 28
     12c:	cc 31       	cpi	r28, 0x1C	; 28
     12e:	cc 31       	cpi	r28, 0x1C	; 28
     130:	cc 31       	cpi	r28, 0x1C	; 28
     132:	cc 31       	cpi	r28, 0x1C	; 28
     134:	cc 31       	cpi	r28, 0x1C	; 28
     136:	cc 31       	cpi	r28, 0x1C	; 28
     138:	5e 31       	cpi	r21, 0x1E	; 30
     13a:	cc 31       	cpi	r28, 0x1C	; 28
     13c:	cc 31       	cpi	r28, 0x1C	; 28
     13e:	cc 31       	cpi	r28, 0x1C	; 28
     140:	cc 31       	cpi	r28, 0x1C	; 28
     142:	cc 31       	cpi	r28, 0x1C	; 28
     144:	cc 31       	cpi	r28, 0x1C	; 28
     146:	cc 31       	cpi	r28, 0x1C	; 28
     148:	cc 31       	cpi	r28, 0x1C	; 28
     14a:	cc 31       	cpi	r28, 0x1C	; 28
     14c:	cc 31       	cpi	r28, 0x1C	; 28
     14e:	cc 31       	cpi	r28, 0x1C	; 28
     150:	cc 31       	cpi	r28, 0x1C	; 28
     152:	cc 31       	cpi	r28, 0x1C	; 28
     154:	cc 31       	cpi	r28, 0x1C	; 28
     156:	cc 31       	cpi	r28, 0x1C	; 28
     158:	c8 31       	cpi	r28, 0x18	; 24
     15a:	cc 31       	cpi	r28, 0x1C	; 28
     15c:	cc 31       	cpi	r28, 0x1C	; 28
     15e:	cc 31       	cpi	r28, 0x1C	; 28
     160:	cc 31       	cpi	r28, 0x1C	; 28
     162:	cc 31       	cpi	r28, 0x1C	; 28
     164:	cc 31       	cpi	r28, 0x1C	; 28
     166:	cc 31       	cpi	r28, 0x1C	; 28
     168:	93 31       	cpi	r25, 0x13	; 19
     16a:	cc 31       	cpi	r28, 0x1C	; 28
     16c:	cc 31       	cpi	r28, 0x1C	; 28
     16e:	cc 31       	cpi	r28, 0x1C	; 28
     170:	cc 31       	cpi	r28, 0x1C	; 28
     172:	cc 31       	cpi	r28, 0x1C	; 28
     174:	cc 31       	cpi	r28, 0x1C	; 28
     176:	cc 31       	cpi	r28, 0x1C	; 28
     178:	cc 31       	cpi	r28, 0x1C	; 28
     17a:	cc 31       	cpi	r28, 0x1C	; 28
     17c:	cc 31       	cpi	r28, 0x1C	; 28
     17e:	cc 31       	cpi	r28, 0x1C	; 28
     180:	cc 31       	cpi	r28, 0x1C	; 28
     182:	cc 31       	cpi	r28, 0x1C	; 28
     184:	cc 31       	cpi	r28, 0x1C	; 28
     186:	cc 31       	cpi	r28, 0x1C	; 28
     188:	87 31       	cpi	r24, 0x17	; 23
     18a:	cc 31       	cpi	r28, 0x1C	; 28
     18c:	cc 31       	cpi	r28, 0x1C	; 28
     18e:	cc 31       	cpi	r28, 0x1C	; 28
     190:	cc 31       	cpi	r28, 0x1C	; 28
     192:	cc 31       	cpi	r28, 0x1C	; 28
     194:	cc 31       	cpi	r28, 0x1C	; 28
     196:	cc 31       	cpi	r28, 0x1C	; 28
     198:	ab 31       	cpi	r26, 0x1B	; 27
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <temperatureSensorController_task+0x7e>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     21c:	01 e9       	ldi	r16, 0x91	; 145
     21e:	12 e1       	ldi	r17, 0x12	; 18
     220:	0f 2e       	mov	r0, r31
     222:	f1 ec       	ldi	r31, 0xC1	; 193
     224:	ef 2e       	mov	r14, r31
     226:	f2 e1       	ldi	r31, 0x12	; 18
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	80 91 90 12 	lds	r24, 0x1290	; 0x801290 <uxDeletedTasksWaitingCleanUp>
     230:	88 23       	and	r24, r24
     232:	29 f1       	breq	.+74     	; 0x27e <prvIdleTask+0x62>
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	0f 92       	push	r0
     23a:	d8 01       	movw	r26, r16
     23c:	17 96       	adiw	r26, 0x07	; 7
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	c0 85       	ldd	r28, Z+8	; 0x08
     246:	d1 85       	ldd	r29, Z+9	; 0x09
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
     250:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxCurrentNumberOfTasks>
     254:	81 50       	subi	r24, 0x01	; 1
     256:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <uxCurrentNumberOfTasks>
     25a:	80 91 90 12 	lds	r24, 0x1290	; 0x801290 <uxDeletedTasksWaitingCleanUp>
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	80 93 90 12 	sts	0x1290, r24	; 0x801290 <uxDeletedTasksWaitingCleanUp>
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	8b 8d       	ldd	r24, Y+27	; 0x1b
     26a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     26c:	0e 94 94 09 	call	0x1328	; 0x1328 <vPortFree>
     270:	ce 01       	movw	r24, r28
     272:	0e 94 94 09 	call	0x1328	; 0x1328 <vPortFree>
     276:	80 91 90 12 	lds	r24, 0x1290	; 0x801290 <uxDeletedTasksWaitingCleanUp>
     27a:	81 11       	cpse	r24, r1
     27c:	db cf       	rjmp	.-74     	; 0x234 <prvIdleTask+0x18>
     27e:	f7 01       	movw	r30, r14
     280:	80 81       	ld	r24, Z
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	10 f0       	brcs	.+4      	; 0x28a <prvIdleTask+0x6e>
     286:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
     28a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <vApplicationIdleHook>
     28e:	ce cf       	rjmp	.-100    	; 0x22c <prvIdleTask+0x10>

00000290 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	60 97       	sbiw	r28, 0x10	; 16
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	9a 87       	std	Y+10, r25	; 0x0a
     2aa:	89 87       	std	Y+9, r24	; 0x09
     2ac:	81 2c       	mov	r8, r1
     2ae:	91 2c       	mov	r9, r1
     2b0:	a1 2c       	mov	r10, r1
     2b2:	b1 2c       	mov	r11, r1
     2b4:	69 84       	ldd	r6, Y+9	; 0x09
     2b6:	7a 84       	ldd	r7, Y+10	; 0x0a
     2b8:	e0 91 3b 13 	lds	r30, 0x133B	; 0x80133b <pxCurrentTimerList>
     2bc:	f0 91 3c 13 	lds	r31, 0x133C	; 0x80133c <pxCurrentTimerList+0x1>
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <prvTimerTask+0x38>
     2c6:	13 c1       	rjmp	.+550    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     2c8:	07 80       	ldd	r0, Z+7	; 0x07
     2ca:	f0 85       	ldd	r31, Z+8	; 0x08
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 80       	ld	r2, Z
     2d0:	31 80       	ldd	r3, Z+1	; 0x01
     2d2:	42 80       	ldd	r4, Z+2	; 0x02
     2d4:	53 80       	ldd	r5, Z+3	; 0x03
     2d6:	0e 94 4b 14 	call	0x2896	; 0x2896 <vTaskSuspendAll>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <prvSampleTimeNow>
     2e2:	6b 87       	std	Y+11, r22	; 0x0b
     2e4:	7c 87       	std	Y+12, r23	; 0x0c
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
     2e8:	9e 87       	std	Y+14, r25	; 0x0e
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	81 11       	cpse	r24, r1
     2ee:	67 c0       	rjmp	.+206    	; 0x3be <prvTimerTask+0x12e>
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2f6:	be 85       	ldd	r27, Y+14	; 0x0e
     2f8:	82 15       	cp	r24, r2
     2fa:	93 05       	cpc	r25, r3
     2fc:	a4 05       	cpc	r26, r4
     2fe:	b5 05       	cpc	r27, r5
     300:	08 f4       	brcc	.+2      	; 0x304 <prvTimerTask+0x74>
     302:	45 c0       	rjmp	.+138    	; 0x38e <prvTimerTask+0xfe>
     304:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
     308:	e0 91 3b 13 	lds	r30, 0x133B	; 0x80133b <pxCurrentTimerList>
     30c:	f0 91 3c 13 	lds	r31, 0x133C	; 0x80133c <pxCurrentTimerList+0x1>
     310:	07 80       	ldd	r0, Z+7	; 0x07
     312:	f0 85       	ldd	r31, Z+8	; 0x08
     314:	e0 2d       	mov	r30, r0
     316:	a0 85       	ldd	r26, Z+8	; 0x08
     318:	b1 85       	ldd	r27, Z+9	; 0x09
     31a:	b8 8b       	std	Y+16, r27	; 0x10
     31c:	af 87       	std	Y+15, r26	; 0x0f
     31e:	cd 01       	movw	r24, r26
     320:	02 96       	adiw	r24, 0x02	; 2
     322:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
     326:	ef 85       	ldd	r30, Y+15	; 0x0f
     328:	f8 89       	ldd	r31, Y+16	; 0x10
     32a:	86 89       	ldd	r24, Z+22	; 0x16
     32c:	82 ff       	sbrs	r24, 2
     32e:	21 c0       	rjmp	.+66     	; 0x372 <prvTimerTask+0xe2>
     330:	46 85       	ldd	r20, Z+14	; 0x0e
     332:	57 85       	ldd	r21, Z+15	; 0x0f
     334:	60 89       	ldd	r22, Z+16	; 0x10
     336:	71 89       	ldd	r23, Z+17	; 0x11
     338:	42 0d       	add	r20, r2
     33a:	53 1d       	adc	r21, r3
     33c:	64 1d       	adc	r22, r4
     33e:	75 1d       	adc	r23, r5
     340:	72 01       	movw	r14, r4
     342:	61 01       	movw	r12, r2
     344:	0b 85       	ldd	r16, Y+11	; 0x0b
     346:	1c 85       	ldd	r17, Y+12	; 0x0c
     348:	2d 85       	ldd	r18, Y+13	; 0x0d
     34a:	3e 85       	ldd	r19, Y+14	; 0x0e
     34c:	cf 01       	movw	r24, r30
     34e:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	99 f0       	breq	.+38     	; 0x37c <prvTimerTask+0xec>
     356:	c8 2c       	mov	r12, r8
     358:	d9 2c       	mov	r13, r9
     35a:	ea 2c       	mov	r14, r10
     35c:	fb 2c       	mov	r15, r11
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a2 01       	movw	r20, r4
     364:	91 01       	movw	r18, r2
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	8f 85       	ldd	r24, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <xTimerGenericCommand>
     370:	05 c0       	rjmp	.+10     	; 0x37c <prvTimerTask+0xec>
     372:	8e 7f       	andi	r24, 0xFE	; 254
     374:	af 85       	ldd	r26, Y+15	; 0x0f
     376:	b8 89       	ldd	r27, Y+16	; 0x10
     378:	56 96       	adiw	r26, 0x16	; 22
     37a:	8c 93       	st	X, r24
     37c:	af 85       	ldd	r26, Y+15	; 0x0f
     37e:	b8 89       	ldd	r27, Y+16	; 0x10
     380:	54 96       	adiw	r26, 0x14	; 20
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	55 97       	sbiw	r26, 0x15	; 21
     388:	cd 01       	movw	r24, r26
     38a:	19 95       	eicall
     38c:	a1 c0       	rjmp	.+322    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	b2 01       	movw	r22, r4
     392:	a1 01       	movw	r20, r2
     394:	8b 85       	ldd	r24, Y+11	; 0x0b
     396:	9c 85       	ldd	r25, Y+12	; 0x0c
     398:	ad 85       	ldd	r26, Y+13	; 0x0d
     39a:	be 85       	ldd	r27, Y+14	; 0x0e
     39c:	48 1b       	sub	r20, r24
     39e:	59 0b       	sbc	r21, r25
     3a0:	6a 0b       	sbc	r22, r26
     3a2:	7b 0b       	sbc	r23, r27
     3a4:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <xTimerQueue>
     3a8:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <xTimerQueue+0x1>
     3ac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <vQueueWaitForMessageRestricted>
     3b0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
     3b4:	81 11       	cpse	r24, r1
     3b6:	8c c0       	rjmp	.+280    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3b8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
     3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3be:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
     3c2:	86 c0       	rjmp	.+268    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <prvTimerTask+0x13c>
     3ca:	82 c0       	rjmp	.+260    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3cc:	4e 80       	ldd	r4, Y+6	; 0x06
     3ce:	5f 80       	ldd	r5, Y+7	; 0x07
     3d0:	d2 01       	movw	r26, r4
     3d2:	1c 96       	adiw	r26, 0x0c	; 12
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	1d 97       	sbiw	r26, 0x0d	; 13
     3da:	89 2b       	or	r24, r25
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <prvTimerTask+0x156>
     3de:	c2 01       	movw	r24, r4
     3e0:	02 96       	adiw	r24, 0x02	; 2
     3e2:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
     3e6:	ce 01       	movw	r24, r28
     3e8:	08 96       	adiw	r24, 0x08	; 8
     3ea:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <prvSampleTimeNow>
     3ee:	8b 01       	movw	r16, r22
     3f0:	9c 01       	movw	r18, r24
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	0e 2e       	mov	r0, r30
     3f6:	00 0c       	add	r0, r0
     3f8:	ff 0b       	sbc	r31, r31
     3fa:	ea 30       	cpi	r30, 0x0A	; 10
     3fc:	f1 05       	cpc	r31, r1
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	67 c0       	rjmp	.+206    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     402:	88 27       	eor	r24, r24
     404:	ee 58       	subi	r30, 0x8E	; 142
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	8f 4f       	sbci	r24, 0xFF	; 255
     40a:	0c 94 72 34 	jmp	0x68e4	; 0x68e4 <__tablejump2__>
     40e:	f2 01       	movw	r30, r4
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	81 60       	ori	r24, 0x01	; 1
     414:	86 8b       	std	Z+22, r24	; 0x16
     416:	ca 80       	ldd	r12, Y+2	; 0x02
     418:	db 80       	ldd	r13, Y+3	; 0x03
     41a:	ec 80       	ldd	r14, Y+4	; 0x04
     41c:	fd 80       	ldd	r15, Y+5	; 0x05
     41e:	46 85       	ldd	r20, Z+14	; 0x0e
     420:	57 85       	ldd	r21, Z+15	; 0x0f
     422:	60 89       	ldd	r22, Z+16	; 0x10
     424:	71 89       	ldd	r23, Z+17	; 0x11
     426:	4c 0d       	add	r20, r12
     428:	5d 1d       	adc	r21, r13
     42a:	6e 1d       	adc	r22, r14
     42c:	7f 1d       	adc	r23, r15
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvInsertTimerInActiveList>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	4b c0       	rjmp	.+150    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43a:	d2 01       	movw	r26, r4
     43c:	54 96       	adiw	r26, 0x14	; 20
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	55 97       	sbiw	r26, 0x15	; 21
     444:	c2 01       	movw	r24, r4
     446:	19 95       	eicall
     448:	f2 01       	movw	r30, r4
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	82 ff       	sbrs	r24, 2
     44e:	40 c0       	rjmp	.+128    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     450:	4a 81       	ldd	r20, Y+2	; 0x02
     452:	5b 81       	ldd	r21, Y+3	; 0x03
     454:	6c 81       	ldd	r22, Y+4	; 0x04
     456:	7d 81       	ldd	r23, Y+5	; 0x05
     458:	86 85       	ldd	r24, Z+14	; 0x0e
     45a:	97 85       	ldd	r25, Z+15	; 0x0f
     45c:	a0 89       	ldd	r26, Z+16	; 0x10
     45e:	b1 89       	ldd	r27, Z+17	; 0x11
     460:	9a 01       	movw	r18, r20
     462:	ab 01       	movw	r20, r22
     464:	28 0f       	add	r18, r24
     466:	39 1f       	adc	r19, r25
     468:	4a 1f       	adc	r20, r26
     46a:	5b 1f       	adc	r21, r27
     46c:	c8 2c       	mov	r12, r8
     46e:	d9 2c       	mov	r13, r9
     470:	ea 2c       	mov	r14, r10
     472:	fb 2c       	mov	r15, r11
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	c2 01       	movw	r24, r4
     47c:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <xTimerGenericCommand>
     480:	27 c0       	rjmp	.+78     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     482:	d2 01       	movw	r26, r4
     484:	56 96       	adiw	r26, 0x16	; 22
     486:	8c 91       	ld	r24, X
     488:	56 97       	sbiw	r26, 0x16	; 22
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	8c 93       	st	X, r24
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     492:	f2 01       	movw	r30, r4
     494:	86 89       	ldd	r24, Z+22	; 0x16
     496:	81 60       	ori	r24, 0x01	; 1
     498:	86 8b       	std	Z+22, r24	; 0x16
     49a:	4a 81       	ldd	r20, Y+2	; 0x02
     49c:	5b 81       	ldd	r21, Y+3	; 0x03
     49e:	6c 81       	ldd	r22, Y+4	; 0x04
     4a0:	7d 81       	ldd	r23, Y+5	; 0x05
     4a2:	46 87       	std	Z+14, r20	; 0x0e
     4a4:	57 87       	std	Z+15, r21	; 0x0f
     4a6:	60 8b       	std	Z+16, r22	; 0x10
     4a8:	71 8b       	std	Z+17, r23	; 0x11
     4aa:	40 0f       	add	r20, r16
     4ac:	51 1f       	adc	r21, r17
     4ae:	62 1f       	adc	r22, r18
     4b0:	73 1f       	adc	r23, r19
     4b2:	68 01       	movw	r12, r16
     4b4:	79 01       	movw	r14, r18
     4b6:	c2 01       	movw	r24, r4
     4b8:	0e 94 ce 1c 	call	0x399c	; 0x399c <prvInsertTimerInActiveList>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4be:	f2 01       	movw	r30, r4
     4c0:	86 89       	ldd	r24, Z+22	; 0x16
     4c2:	81 fd       	sbrc	r24, 1
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c6:	c2 01       	movw	r24, r4
     4c8:	2f d7       	rcall	.+3678   	; 0x1328 <vPortFree>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	86 8b       	std	Z+22, r24	; 0x16
     4d0:	28 2d       	mov	r18, r8
     4d2:	39 2d       	mov	r19, r9
     4d4:	4a 2d       	mov	r20, r10
     4d6:	5b 2d       	mov	r21, r11
     4d8:	66 2d       	mov	r22, r6
     4da:	77 2d       	mov	r23, r7
     4dc:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <xTimerQueue>
     4e0:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <xTimerQueue+0x1>
     4e4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xQueueReceive>
     4e8:	81 11       	cpse	r24, r1
     4ea:	6c cf       	rjmp	.-296    	; 0x3c4 <prvTimerTask+0x134>
     4ec:	e5 ce       	rjmp	.-566    	; 0x2b8 <prvTimerTask+0x28>
     4ee:	0e 94 4b 14 	call	0x2896	; 0x2896 <vTaskSuspendAll>
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <prvSampleTimeNow>
     4fa:	6b 87       	std	Y+11, r22	; 0x0b
     4fc:	7c 87       	std	Y+12, r23	; 0x0c
     4fe:	8d 87       	std	Y+13, r24	; 0x0d
     500:	9e 87       	std	Y+14, r25	; 0x0e
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	81 11       	cpse	r24, r1
     506:	5b cf       	rjmp	.-330    	; 0x3be <prvTimerTask+0x12e>
     508:	e0 91 39 13 	lds	r30, 0x1339	; 0x801339 <pxOverflowTimerList>
     50c:	f0 91 3a 13 	lds	r31, 0x133A	; 0x80133a <pxOverflowTimerList+0x1>
     510:	80 81       	ld	r24, Z
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	81 11       	cpse	r24, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	28 2c       	mov	r2, r8
     51a:	39 2c       	mov	r3, r9
     51c:	4a 2c       	mov	r4, r10
     51e:	5b 2c       	mov	r5, r11
     520:	37 cf       	rjmp	.-402    	; 0x390 <prvTimerTask+0x100>

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d1 e2       	ldi	r29, 0x21	; 33
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	0c bf       	out	0x3c, r16	; 60

00000532 <__do_copy_data>:
     532:	18 e0       	ldi	r17, 0x08	; 8
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b2 e0       	ldi	r27, 0x02	; 2
     538:	ea ec       	ldi	r30, 0xCA	; 202
     53a:	f2 e7       	ldi	r31, 0x72	; 114
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	0b bf       	out	0x3b, r16	; 59
     540:	02 c0       	rjmp	.+4      	; 0x546 <__do_copy_data+0x14>
     542:	07 90       	elpm	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	a4 39       	cpi	r26, 0x94	; 148
     548:	b1 07       	cpc	r27, r17
     54a:	d9 f7       	brne	.-10     	; 0x542 <__do_copy_data+0x10>

0000054c <__do_clear_bss>:
     54c:	25 e1       	ldi	r18, 0x15	; 21
     54e:	a4 e9       	ldi	r26, 0x94	; 148
     550:	b8 e0       	ldi	r27, 0x08	; 8
     552:	01 c0       	rjmp	.+2      	; 0x556 <.do_clear_bss_start>

00000554 <.do_clear_bss_loop>:
     554:	1d 92       	st	X+, r1

00000556 <.do_clear_bss_start>:
     556:	af 37       	cpi	r26, 0x7F	; 127
     558:	b2 07       	cpc	r27, r18
     55a:	e1 f7       	brne	.-8      	; 0x554 <.do_clear_bss_loop>
     55c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <main>
     560:	0c 94 63 39 	jmp	0x72c6	; 0x72c6 <_exit>

00000564 <__bad_interrupt>:
     564:	4d cd       	rjmp	.-1382   	; 0x0 <__vectors>

00000566 <carbonDioxideController_task>:
	if (rc != MHZ19_OK)
	{
		printf("CO2 sensor does not OK\n");
	}
	rc = mh_z19_takeMeassuring();	
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     566:	0f 2e       	mov	r0, r31
     568:	f8 ee       	ldi	r31, 0xE8	; 232
     56a:	cf 2e       	mov	r12, r31
     56c:	f3 e0       	ldi	r31, 0x03	; 3
     56e:	df 2e       	mov	r13, r31
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
     574:	f0 2d       	mov	r31, r0
	PORTA ^= _BV(PA2);
     576:	c4 e0       	ldi	r28, 0x04	; 4
	//mh_z19_setAutoCalibration(false);
	//mh_z19_injectCallBack(myCo2CallBack(appm));
	for(;;)
	{
	
	if (rc != MHZ19_OK)
     578:	80 91 60 15 	lds	r24, 0x1560	; 0x801560 <rc>
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <carbonDioxideController_task+0x22>
	{
		printf("CO2 sensor does not OK\n");
     580:	8f e6       	ldi	r24, 0x6F	; 111
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
	}
	rc = mh_z19_takeMeassuring();	
     588:	0e 94 f7 28 	call	0x51ee	; 0x51ee <mh_z19_takeMeassuring>
     58c:	80 93 60 15 	sts	0x1560, r24	; 0x801560 <rc>
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     590:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <carbon>
     594:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <carbon+0x1>
     598:	eb d2       	rcall	.+1494   	; 0xb70 <carbonDioxideSensor_getReportInterval>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4a ef       	ldi	r20, 0xFA	; 250
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     5a6:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	ae e3       	ldi	r26, 0x3E	; 62
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     5b6:	a7 01       	movw	r20, r14
     5b8:	96 01       	movw	r18, r12
     5ba:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     5be:	ca 01       	movw	r24, r20
     5c0:	b9 01       	movw	r22, r18
     5c2:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
	PORTA ^= _BV(PA2);
     5c6:	82 b1       	in	r24, 0x02	; 2
     5c8:	8c 27       	eor	r24, r28
     5ca:	82 b9       	out	0x02, r24	; 2
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     5cc:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <carbon>
     5d0:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <carbon+0x1>
     5d4:	cd d2       	rcall	.+1434   	; 0xb70 <carbonDioxideSensor_getReportInterval>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a ef       	ldi	r20, 0xFA	; 250
     5dc:	53 e4       	ldi	r21, 0x43	; 67
     5de:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     5e2:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	ae e3       	ldi	r26, 0x3E	; 62
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     5f2:	a7 01       	movw	r20, r14
     5f4:	96 01       	movw	r18, r12
     5f6:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     5fa:	ca 01       	movw	r24, r20
     5fc:	b9 01       	movw	r22, r18
     5fe:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
	//
	PORTA ^= _BV(PA2);
     602:	82 b1       	in	r24, 0x02	; 2
     604:	8c 27       	eor	r24, r28
     606:	82 b9       	out	0x02, r24	; 2
	mh_z19_getCo2Ppm(&appm);
     608:	81 e6       	ldi	r24, 0x61	; 97
     60a:	95 e1       	ldi	r25, 0x15	; 21
     60c:	0e 94 26 29 	call	0x524c	; 0x524c <mh_z19_getCo2Ppm>
	int u = appm;
	
	//printf("Carbon:%d\n",u);
	carbonDioxideSensor_setValue(carbon,u);
     610:	60 91 61 15 	lds	r22, 0x1561	; 0x801561 <appm>
     614:	70 91 62 15 	lds	r23, 0x1562	; 0x801562 <appm+0x1>
     618:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <carbon>
     61c:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <carbon+0x1>
     620:	87 d2       	rcall	.+1294   	; 0xb30 <carbonDioxideSensor_setValue>
	myTime_t time = carbonDioxideSensor_getUpdateTime(carbon);
     622:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <carbon>
     626:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <carbon+0x1>
     62a:	e7 d2       	rcall	.+1486   	; 0xbfa <carbonDioxideSensor_getUpdateTime>
	}
     62c:	a5 cf       	rjmp	.-182    	; 0x578 <carbonDioxideController_task+0x12>

0000062e <CO2SensorController_create>:
}

void CO2SensorController_create(carbonDioxideSensor_t co2)
{
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
		carbon = co2;
     634:	90 93 64 15 	sts	0x1564, r25	; 0x801564 <carbon+0x1>
     638:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <carbon>
		printf("CO2 sensor started!!!\n");
     63c:	86 e8       	ldi	r24, 0x86	; 134
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
		xTaskCreate(carbonDioxideController_task,"COXTask",configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     644:	e1 2c       	mov	r14, r1
     646:	f1 2c       	mov	r15, r1
     648:	01 e0       	ldi	r16, 0x01	; 1
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 ec       	ldi	r20, 0xC0	; 192
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	6c e9       	ldi	r22, 0x9C	; 156
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	83 eb       	ldi	r24, 0xB3	; 179
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
		//vTaskStartScheduler();
}
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	08 95       	ret

00000666 <HumSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     666:	04 ea       	ldi	r16, 0xA4	; 164
     668:	12 e0       	ldi	r17, 0x02	; 2
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     66a:	0f 2e       	mov	r0, r31
     66c:	f8 ee       	ldi	r31, 0xE8	; 232
     66e:	cf 2e       	mov	r12, r31
     670:	f3 e0       	ldi	r31, 0x03	; 3
     672:	df 2e       	mov	r13, r31
     674:	e1 2c       	mov	r14, r1
     676:	f1 2c       	mov	r15, r1
     678:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA1);
     67a:	68 94       	set
     67c:	bb 24       	eor	r11, r11
     67e:	b1 f8       	bld	r11, 1
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Humility sensor didn't measure!!!");
     680:	c8 ec       	ldi	r28, 0xC8	; 200
     682:	d2 e0       	ldi	r29, 0x02	; 2

void HumSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     684:	0e 94 bc 23 	call	0x4778	; 0x4778 <hih8120_wakeup>
     688:	88 23       	and	r24, r24
     68a:	31 f0       	breq	.+12     	; 0x698 <HumSensorController_task+0x32>
		{
			printf("Temperature sensor didn't wakeup!!!");
     68c:	1f 93       	push	r17
     68e:	0f 93       	push	r16
     690:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     698:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <humSensor>
     69c:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <humSensor+0x1>
     6a0:	26 d3       	rcall	.+1612   	; 0xcee <humiditySensor_getReportInterval>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	4a ef       	ldi	r20, 0xFA	; 250
     6a8:	53 e4       	ldi	r21, 0x43	; 67
     6aa:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     6ae:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	ae e3       	ldi	r26, 0x3E	; 62
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     6be:	a7 01       	movw	r20, r14
     6c0:	96 01       	movw	r18, r12
     6c2:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     6c6:	ca 01       	movw	r24, r20
     6c8:	b9 01       	movw	r22, r18
     6ca:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
		PORTA ^= _BV(PA1);
     6ce:	82 b1       	in	r24, 0x02	; 2
     6d0:	8b 25       	eor	r24, r11
     6d2:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     6d4:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <hih8120_measure>
     6d8:	88 23       	and	r24, r24
     6da:	31 f0       	breq	.+12     	; 0x6e8 <HumSensorController_task+0x82>
		{
			printf("Humility sensor didn't measure!!!");
     6dc:	df 93       	push	r29
     6de:	cf 93       	push	r28
     6e0:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     6e8:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <humSensor>
     6ec:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <humSensor+0x1>
     6f0:	fe d2       	rcall	.+1532   	; 0xcee <humiditySensor_getReportInterval>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	4a ef       	ldi	r20, 0xFA	; 250
     6f8:	53 e4       	ldi	r21, 0x43	; 67
     6fa:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     6fe:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	ae e3       	ldi	r26, 0x3E	; 62
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     70e:	a7 01       	movw	r20, r14
     710:	96 01       	movw	r18, r12
     712:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     716:	ca 01       	movw	r24, r20
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
		PORTA ^= _BV(PA1);
     71e:	82 b1       	in	r24, 0x02	; 2
     720:	8b 25       	eor	r24, r11
     722:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		humility = hih8120_getHumidity();
     724:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <hih8120_getHumidity>
     728:	ab 01       	movw	r20, r22
     72a:	bc 01       	movw	r22, r24
     72c:	40 93 94 08 	sts	0x0894, r20	; 0x800894 <__data_end>
     730:	50 93 95 08 	sts	0x0895, r21	; 0x800895 <__data_end+0x1>
     734:	60 93 96 08 	sts	0x0896, r22	; 0x800896 <__data_end+0x2>
     738:	70 93 97 08 	sts	0x0897, r23	; 0x800897 <__data_end+0x3>
		humiditySensor_setValue(humSensor,humility);
     73c:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <humSensor>
     740:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <humSensor+0x1>
     744:	ac d2       	rcall	.+1368   	; 0xc9e <humiditySensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
     746:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <humSensor>
     74a:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <humSensor+0x1>
     74e:	f4 d2       	rcall	.+1512   	; 0xd38 <humiditySensor_getValue>
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
     750:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <humSensor>
     754:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <humSensor+0x1>
     758:	ef d2       	rcall	.+1502   	; 0xd38 <humiditySensor_getValue>
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
     75a:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <humSensor>
     75e:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <humSensor+0x1>
     762:	0f d3       	rcall	.+1566   	; 0xd82 <humiditySensor_getUpdateTime>
     764:	8f cf       	rjmp	.-226    	; 0x684 <HumSensorController_task+0x1e>

00000766 <HumSensorController_create>:
		//printf("Hum%d.%d",a,b);
	}
     766:	ef 92       	push	r14
}

void HumSensorController_create(humiditySensor_t sensor)
{
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
	humSensor = sensor;
     76c:	90 93 66 15 	sts	0x1566, r25	; 0x801566 <humSensor+0x1>
     770:	80 93 65 15 	sts	0x1565, r24	; 0x801565 <humSensor>
	printf("Humility sensor started!!!\n");
     774:	8a ee       	ldi	r24, 0xEA	; 234
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
	xTaskCreate(HumSensorController_task, "HumSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     77c:	e1 2c       	mov	r14, r1
     77e:	f1 2c       	mov	r15, r1
     780:	01 e0       	ldi	r16, 0x01	; 1
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 ec       	ldi	r20, 0xC0	; 192
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	73 e0       	ldi	r23, 0x03	; 3
     78e:	83 e3       	ldi	r24, 0x33	; 51
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
	//vTaskStartScheduler();
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <sevenSegmentDisplayController_task>:
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
		myTime_t nowTime = myTime_getNowTime();
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
		display_7seg_display(time/100,2);
     79e:	0f 2e       	mov	r0, r31
     7a0:	f4 e6       	ldi	r31, 0x64	; 100
     7a2:	8f 2e       	mov	r8, r31
     7a4:	f0 2d       	mov	r31, r0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     7a6:	0f 2e       	mov	r0, r31
     7a8:	f8 ee       	ldi	r31, 0xE8	; 232
     7aa:	cf 2e       	mov	r12, r31
     7ac:	f3 e0       	ldi	r31, 0x03	; 3
     7ae:	df 2e       	mov	r13, r31
     7b0:	e1 2c       	mov	r14, r1
     7b2:	f1 2c       	mov	r15, r1
     7b4:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA7);
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     7b6:	68 94       	set
     7b8:	99 24       	eor	r9, r9
     7ba:	96 f8       	bld	r9, 6
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA6);
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     7bc:	68 94       	set
     7be:	aa 24       	eor	r10, r10
     7c0:	a5 f8       	bld	r10, 5
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA5);
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     7c2:	68 94       	set
     7c4:	bb 24       	eor	r11, r11
     7c6:	b4 f8       	bld	r11, 4
void sevenSegmentDisplayController_task(void *pvParameters)
{
	while(1)
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
     7c8:	82 b1       	in	r24, 0x02	; 2
     7ca:	80 58       	subi	r24, 0x80	; 128
     7cc:	82 b9       	out	0x02, r24	; 2
		myTime_t nowTime = myTime_getNowTime();
     7ce:	89 d4       	rcall	.+2322   	; 0x10e2 <myTime_getNowTime>
     7d0:	ec 01       	movw	r28, r24
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
     7d2:	8d d4       	rcall	.+2330   	; 0x10ee <myTime_getHour>
     7d4:	8c 01       	movw	r16, r24
     7d6:	ce 01       	movw	r24, r28
     7d8:	8e d4       	rcall	.+2332   	; 0x10f6 <myTime_getMin>
     7da:	80 9e       	mul	r8, r16
		display_7seg_display(time/100,2);
     7dc:	b0 01       	movw	r22, r0
     7de:	81 9e       	mul	r8, r17
     7e0:	70 0d       	add	r23, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	86 0f       	add	r24, r22
     7e6:	97 1f       	adc	r25, r23
     7e8:	bc 01       	movw	r22, r24
     7ea:	99 0f       	add	r25, r25
     7ec:	88 0b       	sbc	r24, r24
     7ee:	99 0b       	sbc	r25, r25
     7f0:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatsisf>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	48 ec       	ldi	r20, 0xC8	; 200
     7fa:	52 e4       	ldi	r21, 0x42	; 66
     7fc:	0e 94 66 20 	call	0x40cc	; 0x40cc <__divsf3>
     800:	42 e0       	ldi	r20, 0x02	; 2
     802:	0e 94 16 22 	call	0x442c	; 0x442c <display_7seg_display>
     806:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	4a e7       	ldi	r20, 0x7A	; 122
     80c:	54 e4       	ldi	r21, 0x44	; 68
     80e:	60 91 67 15 	lds	r22, 0x1567	; 0x801567 <updateTime>
     812:	70 91 68 15 	lds	r23, 0x1568	; 0x801568 <updateTime+0x1>
     816:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <updateTime+0x2>
     81a:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <updateTime+0x3>
     81e:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     822:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	ae e3       	ldi	r26, 0x3E	; 62
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     832:	a7 01       	movw	r20, r14
     834:	96 01       	movw	r18, r12
     836:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     83a:	ca 01       	movw	r24, r20
     83c:	b9 01       	movw	r22, r18
     83e:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
     842:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
     844:	80 58       	subi	r24, 0x80	; 128
     846:	82 b9       	out	0x02, r24	; 2
     848:	82 b1       	in	r24, 0x02	; 2
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     84a:	89 25       	eor	r24, r9
		temperatureSensor_t temperatureSensor = sensorModelManager_getTemperatureSensor();
     84c:	82 b9       	out	0x02, r24	; 2
     84e:	9e d3       	rcall	.+1852   	; 0xf8c <sensorModelManager_getTemperatureSensor>
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
     850:	36 d3       	rcall	.+1644   	; 0xebe <temperatureSensor_getValue>
     852:	42 e0       	ldi	r20, 0x02	; 2
     854:	0e 94 16 22 	call	0x442c	; 0x442c <display_7seg_display>
     858:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	4a e7       	ldi	r20, 0x7A	; 122
     85e:	54 e4       	ldi	r21, 0x44	; 68
     860:	60 91 67 15 	lds	r22, 0x1567	; 0x801567 <updateTime>
     864:	70 91 68 15 	lds	r23, 0x1568	; 0x801568 <updateTime+0x1>
     868:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <updateTime+0x2>
     86c:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <updateTime+0x3>
     870:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     874:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	ae e3       	ldi	r26, 0x3E	; 62
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     884:	a7 01       	movw	r20, r14
     886:	96 01       	movw	r18, r12
     888:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     88c:	ca 01       	movw	r24, r20
     88e:	b9 01       	movw	r22, r18
     890:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
     894:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA6);
     896:	89 25       	eor	r24, r9
     898:	82 b9       	out	0x02, r24	; 2
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     89a:	82 b1       	in	r24, 0x02	; 2
     89c:	8a 25       	eor	r24, r10
     89e:	82 b9       	out	0x02, r24	; 2
		humiditySensor_t humiditySensor = sensorModelManager_getHumiditySensor();
     8a0:	7a d3       	rcall	.+1780   	; 0xf96 <sensorModelManager_getHumiditySensor>
     8a2:	4a d2       	rcall	.+1172   	; 0xd38 <humiditySensor_getValue>
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
     8a4:	42 e0       	ldi	r20, 0x02	; 2
     8a6:	0e 94 16 22 	call	0x442c	; 0x442c <display_7seg_display>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     8ae:	4a e7       	ldi	r20, 0x7A	; 122
     8b0:	54 e4       	ldi	r21, 0x44	; 68
     8b2:	60 91 67 15 	lds	r22, 0x1567	; 0x801567 <updateTime>
     8b6:	70 91 68 15 	lds	r23, 0x1568	; 0x801568 <updateTime+0x1>
     8ba:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <updateTime+0x2>
     8be:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <updateTime+0x3>
     8c2:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     8c6:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	ae e3       	ldi	r26, 0x3E	; 62
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     8d6:	a7 01       	movw	r20, r14
     8d8:	96 01       	movw	r18, r12
     8da:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     8de:	ca 01       	movw	r24, r20
     8e0:	b9 01       	movw	r22, r18
     8e2:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
     8e6:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA5);
     8e8:	8a 25       	eor	r24, r10
     8ea:	82 b9       	out	0x02, r24	; 2
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     8ec:	82 b1       	in	r24, 0x02	; 2
     8ee:	8b 25       	eor	r24, r11
     8f0:	82 b9       	out	0x02, r24	; 2
		carbonDioxideSensor_t carbonDioxideSensor = sensorModelManager_getCarbonDioxideSensor();
     8f2:	56 d3       	rcall	.+1708   	; 0xfa0 <sensorModelManager_getCarbonDioxideSensor>
     8f4:	63 d1       	rcall	.+710    	; 0xbbc <carbonDioxideSensor_getValue>
		display_7seg_display(carbonDioxideSensor_getValue(carbonDioxideSensor),0);
     8f6:	bc 01       	movw	r22, r24
     8f8:	99 0f       	add	r25, r25
     8fa:	88 0b       	sbc	r24, r24
     8fc:	99 0b       	sbc	r25, r25
     8fe:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatsisf>
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	0e 94 16 22 	call	0x442c	; 0x442c <display_7seg_display>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     90c:	4a e7       	ldi	r20, 0x7A	; 122
     90e:	54 e4       	ldi	r21, 0x44	; 68
     910:	60 91 67 15 	lds	r22, 0x1567	; 0x801567 <updateTime>
     914:	70 91 68 15 	lds	r23, 0x1568	; 0x801568 <updateTime+0x1>
     918:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <updateTime+0x2>
     91c:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <updateTime+0x3>
     920:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     924:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	ae e3       	ldi	r26, 0x3E	; 62
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     934:	a7 01       	movw	r20, r14
     936:	96 01       	movw	r18, r12
     938:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     93c:	ca 01       	movw	r24, r20
     93e:	b9 01       	movw	r22, r18
     940:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
     944:	82 b1       	in	r24, 0x02	; 2
     946:	8b 25       	eor	r24, r11
		PORTA ^= _BV(PA4);
     948:	82 b9       	out	0x02, r24	; 2
     94a:	3e cf       	rjmp	.-388    	; 0x7c8 <sevenSegmentDisplayController_task+0x2a>

0000094c <sevenSegmentDisplayController_create>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
	}
}

void sevenSegmentDisplayController_create(float displayUpdateTime)
{
     950:	0f 93       	push	r16
	updateTime = displayUpdateTime;
     952:	60 93 67 15 	sts	0x1567, r22	; 0x801567 <updateTime>
     956:	70 93 68 15 	sts	0x1568, r23	; 0x801568 <updateTime+0x1>
     95a:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <updateTime+0x2>
     95e:	90 93 6a 15 	sts	0x156A, r25	; 0x80156a <updateTime+0x3>
	//Init 7-segment Display
	display_7seg_initialise(NULL);
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 c8 22 	call	0x4590	; 0x4590 <display_7seg_initialise>
	display_7seg_powerUp();
     96a:	0e 94 bd 22 	call	0x457a	; 0x457a <display_7seg_powerUp>
	
	printf("7-segment Display started!!!\n");
     96e:	83 e1       	ldi	r24, 0x13	; 19
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
	xTaskCreate(sevenSegmentDisplayController_task, "7-segment Display Task", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     976:	e1 2c       	mov	r14, r1
     978:	f1 2c       	mov	r15, r1
     97a:	01 e0       	ldi	r16, 0x01	; 1
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 ec       	ldi	r20, 0xC0	; 192
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	60 e3       	ldi	r22, 0x30	; 48
     986:	73 e0       	ldi	r23, 0x03	; 3
     988:	8f ec       	ldi	r24, 0xCF	; 207
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <temperatureSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     998:	04 ea       	ldi	r16, 0xA4	; 164
     99a:	12 e0       	ldi	r17, 0x02	; 2
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     99c:	0f 2e       	mov	r0, r31
     99e:	f8 ee       	ldi	r31, 0xE8	; 232
     9a0:	cf 2e       	mov	r12, r31
     9a2:	f3 e0       	ldi	r31, 0x03	; 3
     9a4:	df 2e       	mov	r13, r31
     9a6:	e1 2c       	mov	r14, r1
     9a8:	f1 2c       	mov	r15, r1
     9aa:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA0);
     9ac:	bb 24       	eor	r11, r11
     9ae:	b3 94       	inc	r11
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Temperature sensor didn't measure!!!");
     9b0:	c7 e4       	ldi	r28, 0x47	; 71
     9b2:	d3 e0       	ldi	r29, 0x03	; 3

void temperatureSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     9b4:	0e 94 bc 23 	call	0x4778	; 0x4778 <hih8120_wakeup>
     9b8:	88 23       	and	r24, r24
     9ba:	31 f0       	breq	.+12     	; 0x9c8 <temperatureSensorController_task+0x30>
		{
			printf("Temperature sensor didn't wakeup!!!");
     9bc:	1f 93       	push	r17
     9be:	0f 93       	push	r16
     9c0:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     9c8:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <temSensor>
     9cc:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <temSensor+0x1>
     9d0:	51 d2       	rcall	.+1186   	; 0xe74 <temperatureSensor_getReportInterval>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4a ef       	ldi	r20, 0xFA	; 250
     9d8:	53 e4       	ldi	r21, 0x43	; 67
     9da:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     9de:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     9e2:	9b 01       	movw	r18, r22
     9e4:	ac 01       	movw	r20, r24
     9e6:	ae e3       	ldi	r26, 0x3E	; 62
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     9ee:	a7 01       	movw	r20, r14
     9f0:	96 01       	movw	r18, r12
     9f2:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     9f6:	ca 01       	movw	r24, r20
     9f8:	b9 01       	movw	r22, r18
     9fa:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
		PORTA ^= _BV(PA0);
     9fe:	82 b1       	in	r24, 0x02	; 2
     a00:	8b 25       	eor	r24, r11
     a02:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     a04:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <hih8120_measure>
     a08:	88 23       	and	r24, r24
     a0a:	31 f0       	breq	.+12     	; 0xa18 <temperatureSensorController_task+0x80>
		{
			printf("Temperature sensor didn't measure!!!");
     a0c:	df 93       	push	r29
     a0e:	cf 93       	push	r28
     a10:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     a18:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <temSensor>
     a1c:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <temSensor+0x1>
     a20:	29 d2       	rcall	.+1106   	; 0xe74 <temperatureSensor_getReportInterval>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	4a ef       	ldi	r20, 0xFA	; 250
     a28:	53 e4       	ldi	r21, 0x43	; 67
     a2a:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
     a2e:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	ae e3       	ldi	r26, 0x3E	; 62
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <__muluhisi3>
     a3e:	a7 01       	movw	r20, r14
     a40:	96 01       	movw	r18, r12
     a42:	0e 94 50 34 	call	0x68a0	; 0x68a0 <__udivmodsi4>
     a46:	ca 01       	movw	r24, r20
     a48:	b9 01       	movw	r22, r18
     a4a:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
		PORTA ^= _BV(PA0);
     a4e:	82 b1       	in	r24, 0x02	; 2
     a50:	8b 25       	eor	r24, r11
     a52:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     a54:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <hih8120_getTemperature>
     a58:	ab 01       	movw	r20, r22
     a5a:	bc 01       	movw	r22, r24
     a5c:	40 93 98 08 	sts	0x0898, r20	; 0x800898 <temperature>
     a60:	50 93 99 08 	sts	0x0899, r21	; 0x800899 <temperature+0x1>
     a64:	60 93 9a 08 	sts	0x089A, r22	; 0x80089a <temperature+0x2>
     a68:	70 93 9b 08 	sts	0x089B, r23	; 0x80089b <temperature+0x3>
		temperatureSensor_setValue(temSensor,temperature);
     a6c:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <temSensor>
     a70:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <temSensor+0x1>
     a74:	d7 d1       	rcall	.+942    	; 0xe24 <temperatureSensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
     a76:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <temSensor>
     a7a:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <temSensor+0x1>
     a7e:	1f d2       	rcall	.+1086   	; 0xebe <temperatureSensor_getValue>
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
     a80:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <temSensor>
     a84:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <temSensor+0x1>
     a88:	1a d2       	rcall	.+1076   	; 0xebe <temperatureSensor_getValue>
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
     a8a:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <temSensor>
     a8e:	90 91 6c 15 	lds	r25, 0x156C	; 0x80156c <temSensor+0x1>
     a92:	3a d2       	rcall	.+1140   	; 0xf08 <temperatureSensor_getUpdateTime>
     a94:	8f cf       	rjmp	.-226    	; 0x9b4 <temperatureSensorController_task+0x1c>

00000a96 <temperatureSensorController_create>:
		//printf("temperature:%d.%d",a,b);
	}
     a96:	ef 92       	push	r14
}

void temperatureSensorController_create(temperatureSensor_t sensor)
{
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
	temSensor = sensor;
     a9c:	90 93 6c 15 	sts	0x156C, r25	; 0x80156c <temSensor+0x1>
     aa0:	80 93 6b 15 	sts	0x156B, r24	; 0x80156b <temSensor>
	printf("Temperature sensor started!!!\n");
     aa4:	8c e6       	ldi	r24, 0x6C	; 108
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
	xTaskCreate(temperatureSensorController_task, "TemperatureSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     aac:	e1 2c       	mov	r14, r1
     aae:	f1 2c       	mov	r15, r1
     ab0:	01 e0       	ldi	r16, 0x01	; 1
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 ec       	ldi	r20, 0xC0	; 192
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	6a e8       	ldi	r22, 0x8A	; 138
     abc:	73 e0       	ldi	r23, 0x03	; 3
     abe:	8c ec       	ldi	r24, 0xCC	; 204
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
	//vTaskStartScheduler();
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	08 95       	ret

00000ace <carbonDioxideSensor_create>:
void carbonDioxideSensor_setReportInterval(carbonDioxideSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	6b 01       	movw	r12, r22
     ade:	7c 01       	movw	r14, r24
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	8a e0       	ldi	r24, 0x0A	; 10
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
     aec:	ec 01       	movw	r28, r24
     aee:	89 2b       	or	r24, r25
     af0:	b1 f0       	breq	.+44     	; 0xb1e <carbonDioxideSensor_create+0x50>
     af2:	c8 82       	st	Y, r12
     af4:	d9 82       	std	Y+1, r13	; 0x01
     af6:	ea 82       	std	Y+2, r14	; 0x02
     af8:	fb 82       	std	Y+3, r15	; 0x03
     afa:	1d 82       	std	Y+5, r1	; 0x05
     afc:	1c 82       	std	Y+4, r1	; 0x04
     afe:	b2 d2       	rcall	.+1380   	; 0x1064 <myTime_create>
     b00:	99 87       	std	Y+9, r25	; 0x09
     b02:	88 87       	std	Y+8, r24	; 0x08
     b04:	43 e0       	ldi	r20, 0x03	; 3
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	f0 d6       	rcall	.+3552   	; 0x18ec <xQueueGenericCreate>
     b0c:	9f 83       	std	Y+7, r25	; 0x07
     b0e:	8e 83       	std	Y+6, r24	; 0x06
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	a9 01       	movw	r20, r18
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	08 d7       	rcall	.+3600   	; 0x192e <xQueueGenericSend>
     b1e:	ce 01       	movw	r24, r28
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	08 95       	ret

00000b30 <carbonDioxideSensor_setValue>:

void carbonDioxideSensor_setValue(carbonDioxideSensor_t self,int value)
{
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	8b 01       	movw	r16, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     b3c:	4f ef       	ldi	r20, 0xFF	; 255
     b3e:	5f ef       	ldi	r21, 0xFF	; 255
     b40:	ba 01       	movw	r22, r20
     b42:	8e 81       	ldd	r24, Y+6	; 0x06
     b44:	9f 81       	ldd	r25, Y+7	; 0x07
     b46:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xQueueSemaphoreTake>
	self->value = value;
     b4a:	1d 83       	std	Y+5, r17	; 0x05
     b4c:	0c 83       	std	Y+4, r16	; 0x04
	myTime_updateToNowTime(self->updateTime);
     b4e:	88 85       	ldd	r24, Y+8	; 0x08
     b50:	99 85       	ldd	r25, Y+9	; 0x09
     b52:	a0 d2       	rcall	.+1344   	; 0x1094 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     b54:	00 e0       	ldi	r16, 0x00	; 0
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	a9 01       	movw	r20, r18
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	8e 81       	ldd	r24, Y+6	; 0x06
     b62:	9f 81       	ldd	r25, Y+7	; 0x07
     b64:	e4 d6       	rcall	.+3528   	; 0x192e <xQueueGenericSend>
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	08 95       	ret

00000b70 <carbonDioxideSensor_getReportInterval>:

float carbonDioxideSensor_getReportInterval(carbonDioxideSensor_t self)
{
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     b80:	4f ef       	ldi	r20, 0xFF	; 255
     b82:	5f ef       	ldi	r21, 0xFF	; 255
     b84:	ba 01       	movw	r22, r20
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xQueueSemaphoreTake>
	float result = self->reportInterval;
     b8e:	c8 80       	ld	r12, Y
     b90:	d9 80       	ldd	r13, Y+1	; 0x01
     b92:	ea 80       	ldd	r14, Y+2	; 0x02
     b94:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     b96:	00 e0       	ldi	r16, 0x00	; 0
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	a9 01       	movw	r20, r18
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	8e 81       	ldd	r24, Y+6	; 0x06
     ba4:	9f 81       	ldd	r25, Y+7	; 0x07
     ba6:	c3 d6       	rcall	.+3462   	; 0x192e <xQueueGenericSend>
	return result;
}
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	08 95       	ret

00000bbc <carbonDioxideSensor_getValue>:

int carbonDioxideSensor_getValue(carbonDioxideSensor_t self)
{
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     bc8:	4f ef       	ldi	r20, 0xFF	; 255
     bca:	5f ef       	ldi	r21, 0xFF	; 255
     bcc:	ba 01       	movw	r22, r20
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	9f 81       	ldd	r25, Y+7	; 0x07
     bd2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xQueueSemaphoreTake>
	int result = self->value;
     bd6:	ec 80       	ldd	r14, Y+4	; 0x04
     bd8:	fd 80       	ldd	r15, Y+5	; 0x05
	xSemaphoreGive(self->readWriteSemaphore);
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	a1 d6       	rcall	.+3394   	; 0x192e <xQueueGenericSend>
	return result;
}
     bec:	c7 01       	movw	r24, r14
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	08 95       	ret

00000bfa <carbonDioxideSensor_getUpdateTime>:

myTime_t carbonDioxideSensor_getUpdateTime(carbonDioxideSensor_t self)
{
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     c06:	4f ef       	ldi	r20, 0xFF	; 255
     c08:	5f ef       	ldi	r21, 0xFF	; 255
     c0a:	ba 01       	movw	r22, r20
     c0c:	8e 81       	ldd	r24, Y+6	; 0x06
     c0e:	9f 81       	ldd	r25, Y+7	; 0x07
     c10:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     c14:	e8 84       	ldd	r14, Y+8	; 0x08
     c16:	f9 84       	ldd	r15, Y+9	; 0x09
	xSemaphoreGive(self->readWriteSemaphore);
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	a9 01       	movw	r20, r18
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	9f 81       	ldd	r25, Y+7	; 0x07
     c28:	82 d6       	rcall	.+3332   	; 0x192e <xQueueGenericSend>
	return result;
}
     c2a:	c7 01       	movw	r24, r14
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	08 95       	ret

00000c38 <humiditySensor_create>:
void humiditySensor_setReportInterval(humiditySensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	6b 01       	movw	r12, r22
     c48:	7c 01       	movw	r14, r24
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	8c e0       	ldi	r24, 0x0C	; 12
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
     c56:	ec 01       	movw	r28, r24
     c58:	89 2b       	or	r24, r25
     c5a:	c1 f0       	breq	.+48     	; 0xc8c <humiditySensor_create+0x54>
     c5c:	c8 82       	st	Y, r12
     c5e:	d9 82       	std	Y+1, r13	; 0x01
     c60:	ea 82       	std	Y+2, r14	; 0x02
     c62:	fb 82       	std	Y+3, r15	; 0x03
     c64:	1c 82       	std	Y+4, r1	; 0x04
     c66:	1d 82       	std	Y+5, r1	; 0x05
     c68:	1e 82       	std	Y+6, r1	; 0x06
     c6a:	1f 82       	std	Y+7, r1	; 0x07
     c6c:	fb d1       	rcall	.+1014   	; 0x1064 <myTime_create>
     c6e:	9b 87       	std	Y+11, r25	; 0x0b
     c70:	8a 87       	std	Y+10, r24	; 0x0a
     c72:	43 e0       	ldi	r20, 0x03	; 3
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	39 d6       	rcall	.+3186   	; 0x18ec <xQueueGenericCreate>
     c7a:	99 87       	std	Y+9, r25	; 0x09
     c7c:	88 87       	std	Y+8, r24	; 0x08
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	a9 01       	movw	r20, r18
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	51 d6       	rcall	.+3234   	; 0x192e <xQueueGenericSend>
     c8c:	ce 01       	movw	r24, r28
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	08 95       	ret

00000c9e <humiditySensor_setValue>:

void humiditySensor_setValue(humiditySensor_t self,float value)
{
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	ec 01       	movw	r28, r24
     cae:	6a 01       	movw	r12, r20
     cb0:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     cb2:	4f ef       	ldi	r20, 0xFF	; 255
     cb4:	5f ef       	ldi	r21, 0xFF	; 255
     cb6:	ba 01       	movw	r22, r20
     cb8:	88 85       	ldd	r24, Y+8	; 0x08
     cba:	99 85       	ldd	r25, Y+9	; 0x09
     cbc:	af d7       	rcall	.+3934   	; 0x1c1c <xQueueSemaphoreTake>
	self->value = value;
     cbe:	cc 82       	std	Y+4, r12	; 0x04
     cc0:	dd 82       	std	Y+5, r13	; 0x05
     cc2:	ee 82       	std	Y+6, r14	; 0x06
     cc4:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     cca:	e4 d1       	rcall	.+968    	; 0x1094 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	a9 01       	movw	r20, r18
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	88 85       	ldd	r24, Y+8	; 0x08
     cda:	99 85       	ldd	r25, Y+9	; 0x09
     cdc:	28 d6       	rcall	.+3152   	; 0x192e <xQueueGenericSend>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	08 95       	ret

00000cee <humiditySensor_getReportInterval>:

float humiditySensor_getReportInterval(humiditySensor_t self)
{
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     cfe:	4f ef       	ldi	r20, 0xFF	; 255
     d00:	5f ef       	ldi	r21, 0xFF	; 255
     d02:	ba 01       	movw	r22, r20
     d04:	88 85       	ldd	r24, Y+8	; 0x08
     d06:	99 85       	ldd	r25, Y+9	; 0x09
     d08:	89 d7       	rcall	.+3858   	; 0x1c1c <xQueueSemaphoreTake>
	float result = self->reportInterval;
     d0a:	c8 80       	ld	r12, Y
     d0c:	d9 80       	ldd	r13, Y+1	; 0x01
     d0e:	ea 80       	ldd	r14, Y+2	; 0x02
     d10:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	a9 01       	movw	r20, r18
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	88 85       	ldd	r24, Y+8	; 0x08
     d20:	99 85       	ldd	r25, Y+9	; 0x09
     d22:	05 d6       	rcall	.+3082   	; 0x192e <xQueueGenericSend>
	return result;
}
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	08 95       	ret

00000d38 <humiditySensor_getValue>:

float humiditySensor_getValue(humiditySensor_t self)
{
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d48:	4f ef       	ldi	r20, 0xFF	; 255
     d4a:	5f ef       	ldi	r21, 0xFF	; 255
     d4c:	ba 01       	movw	r22, r20
     d4e:	88 85       	ldd	r24, Y+8	; 0x08
     d50:	99 85       	ldd	r25, Y+9	; 0x09
     d52:	64 d7       	rcall	.+3784   	; 0x1c1c <xQueueSemaphoreTake>
	float result = self->value;
     d54:	cc 80       	ldd	r12, Y+4	; 0x04
     d56:	dd 80       	ldd	r13, Y+5	; 0x05
     d58:	ee 80       	ldd	r14, Y+6	; 0x06
     d5a:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     d5c:	00 e0       	ldi	r16, 0x00	; 0
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	a9 01       	movw	r20, r18
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	88 85       	ldd	r24, Y+8	; 0x08
     d6a:	99 85       	ldd	r25, Y+9	; 0x09
     d6c:	e0 d5       	rcall	.+3008   	; 0x192e <xQueueGenericSend>
	return result;
}
     d6e:	c7 01       	movw	r24, r14
     d70:	b6 01       	movw	r22, r12
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	08 95       	ret

00000d82 <humiditySensor_getUpdateTime>:

myTime_t humiditySensor_getUpdateTime(humiditySensor_t self)
{
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d8e:	4f ef       	ldi	r20, 0xFF	; 255
     d90:	5f ef       	ldi	r21, 0xFF	; 255
     d92:	ba 01       	movw	r22, r20
     d94:	88 85       	ldd	r24, Y+8	; 0x08
     d96:	99 85       	ldd	r25, Y+9	; 0x09
     d98:	41 d7       	rcall	.+3714   	; 0x1c1c <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     d9a:	ea 84       	ldd	r14, Y+10	; 0x0a
     d9c:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	a9 01       	movw	r20, r18
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	88 85       	ldd	r24, Y+8	; 0x08
     dac:	99 85       	ldd	r25, Y+9	; 0x09
     dae:	bf d5       	rcall	.+2942   	; 0x192e <xQueueGenericSend>
	return result;
}
     db0:	c7 01       	movw	r24, r14
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	08 95       	ret

00000dbe <temperatureSensor_create>:
void temperatureSensor_setReportInterval(temperatureSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	6b 01       	movw	r12, r22
     dce:	7c 01       	movw	r14, r24
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
     ddc:	ec 01       	movw	r28, r24
     dde:	89 2b       	or	r24, r25
     de0:	c1 f0       	breq	.+48     	; 0xe12 <temperatureSensor_create+0x54>
     de2:	c8 82       	st	Y, r12
     de4:	d9 82       	std	Y+1, r13	; 0x01
     de6:	ea 82       	std	Y+2, r14	; 0x02
     de8:	fb 82       	std	Y+3, r15	; 0x03
     dea:	1c 82       	std	Y+4, r1	; 0x04
     dec:	1d 82       	std	Y+5, r1	; 0x05
     dee:	1e 82       	std	Y+6, r1	; 0x06
     df0:	1f 82       	std	Y+7, r1	; 0x07
     df2:	38 d1       	rcall	.+624    	; 0x1064 <myTime_create>
     df4:	9b 87       	std	Y+11, r25	; 0x0b
     df6:	8a 87       	std	Y+10, r24	; 0x0a
     df8:	43 e0       	ldi	r20, 0x03	; 3
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	76 d5       	rcall	.+2796   	; 0x18ec <xQueueGenericCreate>
     e00:	99 87       	std	Y+9, r25	; 0x09
     e02:	88 87       	std	Y+8, r24	; 0x08
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	a9 01       	movw	r20, r18
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	8e d5       	rcall	.+2844   	; 0x192e <xQueueGenericSend>
     e12:	ce 01       	movw	r24, r28
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	08 95       	ret

00000e24 <temperatureSensor_setValue>:

void temperatureSensor_setValue(temperatureSensor_t self,float value)
{
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
     e34:	6a 01       	movw	r12, r20
     e36:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e38:	4f ef       	ldi	r20, 0xFF	; 255
     e3a:	5f ef       	ldi	r21, 0xFF	; 255
     e3c:	ba 01       	movw	r22, r20
     e3e:	88 85       	ldd	r24, Y+8	; 0x08
     e40:	99 85       	ldd	r25, Y+9	; 0x09
     e42:	ec d6       	rcall	.+3544   	; 0x1c1c <xQueueSemaphoreTake>
	self->value = value;
     e44:	cc 82       	std	Y+4, r12	; 0x04
     e46:	dd 82       	std	Y+5, r13	; 0x05
     e48:	ee 82       	std	Y+6, r14	; 0x06
     e4a:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     e4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e50:	21 d1       	rcall	.+578    	; 0x1094 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a9 01       	movw	r20, r18
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	88 85       	ldd	r24, Y+8	; 0x08
     e60:	99 85       	ldd	r25, Y+9	; 0x09
     e62:	65 d5       	rcall	.+2762   	; 0x192e <xQueueGenericSend>
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	08 95       	ret

00000e74 <temperatureSensor_getReportInterval>:

float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e84:	4f ef       	ldi	r20, 0xFF	; 255
     e86:	5f ef       	ldi	r21, 0xFF	; 255
     e88:	ba 01       	movw	r22, r20
     e8a:	88 85       	ldd	r24, Y+8	; 0x08
     e8c:	99 85       	ldd	r25, Y+9	; 0x09
     e8e:	c6 d6       	rcall	.+3468   	; 0x1c1c <xQueueSemaphoreTake>
	float result = self->reportInterval;
     e90:	c8 80       	ld	r12, Y
     e92:	d9 80       	ldd	r13, Y+1	; 0x01
     e94:	ea 80       	ldd	r14, Y+2	; 0x02
     e96:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	88 85       	ldd	r24, Y+8	; 0x08
     ea6:	99 85       	ldd	r25, Y+9	; 0x09
     ea8:	42 d5       	rcall	.+2692   	; 0x192e <xQueueGenericSend>
	return result;
}
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	08 95       	ret

00000ebe <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     ece:	4f ef       	ldi	r20, 0xFF	; 255
     ed0:	5f ef       	ldi	r21, 0xFF	; 255
     ed2:	ba 01       	movw	r22, r20
     ed4:	88 85       	ldd	r24, Y+8	; 0x08
     ed6:	99 85       	ldd	r25, Y+9	; 0x09
     ed8:	a1 d6       	rcall	.+3394   	; 0x1c1c <xQueueSemaphoreTake>
	float result = self->value;
     eda:	cc 80       	ldd	r12, Y+4	; 0x04
     edc:	dd 80       	ldd	r13, Y+5	; 0x05
     ede:	ee 80       	ldd	r14, Y+6	; 0x06
     ee0:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	a9 01       	movw	r20, r18
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	88 85       	ldd	r24, Y+8	; 0x08
     ef0:	99 85       	ldd	r25, Y+9	; 0x09
     ef2:	1d d5       	rcall	.+2618   	; 0x192e <xQueueGenericSend>
	return result;
}
     ef4:	c7 01       	movw	r24, r14
     ef6:	b6 01       	movw	r22, r12
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	08 95       	ret

00000f08 <temperatureSensor_getUpdateTime>:

myTime_t temperatureSensor_getUpdateTime(temperatureSensor_t self)
{
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f14:	4f ef       	ldi	r20, 0xFF	; 255
     f16:	5f ef       	ldi	r21, 0xFF	; 255
     f18:	ba 01       	movw	r22, r20
     f1a:	88 85       	ldd	r24, Y+8	; 0x08
     f1c:	99 85       	ldd	r25, Y+9	; 0x09
     f1e:	7e d6       	rcall	.+3324   	; 0x1c1c <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     f20:	ea 84       	ldd	r14, Y+10	; 0x0a
     f22:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     f24:	00 e0       	ldi	r16, 0x00	; 0
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	88 85       	ldd	r24, Y+8	; 0x08
     f32:	99 85       	ldd	r25, Y+9	; 0x09
     f34:	fc d4       	rcall	.+2552   	; 0x192e <xQueueGenericSend>
	return result;
}
     f36:	c7 01       	movw	r24, r14
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	08 95       	ret

00000f44 <sensorModelManager_create>:
void sensorModelManager_setReportInterval(float reportInterval)
{
	temperatureSensor_setReportInterval(temperatureSensor,reportInterval);
	humiditySensor_setReportInterval(humiditySensor,reportInterval);
	carbonDioxideSensor_setReportInterval(carbonDioxideSensor,reportInterval);
}
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	9f e3       	ldi	r25, 0x3F	; 63
     f4c:	ff dc       	rcall	.-1538   	; 0x94c <sevenSegmentDisplayController_create>
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	9f e3       	ldi	r25, 0x3F	; 63
     f56:	33 df       	rcall	.-410    	; 0xdbe <temperatureSensor_create>
     f58:	90 93 70 15 	sts	0x1570, r25	; 0x801570 <temperatureSensor+0x1>
     f5c:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <temperatureSensor>
     f60:	9a dd       	rcall	.-1228   	; 0xa96 <temperatureSensorController_create>
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	9f e3       	ldi	r25, 0x3F	; 63
     f6a:	66 de       	rcall	.-820    	; 0xc38 <humiditySensor_create>
     f6c:	90 93 72 15 	sts	0x1572, r25	; 0x801572 <humiditySensor+0x1>
     f70:	80 93 71 15 	sts	0x1571, r24	; 0x801571 <humiditySensor>
     f74:	f8 db       	rcall	.-2064   	; 0x766 <HumSensorController_create>
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	9f e3       	ldi	r25, 0x3F	; 63
     f7e:	a7 dd       	rcall	.-1202   	; 0xace <carbonDioxideSensor_create>
     f80:	90 93 6e 15 	sts	0x156E, r25	; 0x80156e <carbonDioxideSensor+0x1>
     f84:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <carbonDioxideSensor>
     f88:	52 cb       	rjmp	.-2396   	; 0x62e <CO2SensorController_create>
     f8a:	08 95       	ret

00000f8c <sensorModelManager_getTemperatureSensor>:

temperatureSensor_t sensorModelManager_getTemperatureSensor()
{
	return temperatureSensor;
}
     f8c:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <temperatureSensor>
     f90:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <temperatureSensor+0x1>
     f94:	08 95       	ret

00000f96 <sensorModelManager_getHumiditySensor>:

humiditySensor_t sensorModelManager_getHumiditySensor()
{
	return humiditySensor;
}
     f96:	80 91 71 15 	lds	r24, 0x1571	; 0x801571 <humiditySensor>
     f9a:	90 91 72 15 	lds	r25, 0x1572	; 0x801572 <humiditySensor+0x1>
     f9e:	08 95       	ret

00000fa0 <sensorModelManager_getCarbonDioxideSensor>:

carbonDioxideSensor_t sensorModelManager_getCarbonDioxideSensor()
{
	return carbonDioxideSensor;
}
     fa0:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <carbonDioxideSensor>
     fa4:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <carbonDioxideSensor+0x1>
     fa8:	08 95       	ret

00000faa <nowTimeClockTask>:
}

int myTime_getDay(myTime_t self)
{
	return self->day;
}
     faa:	6e e3       	ldi	r22, 0x3E	; 62
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
     fb6:	e0 91 73 15 	lds	r30, 0x1573	; 0x801573 <nowTime>
     fba:	f0 91 74 15 	lds	r31, 0x1574	; 0x801574 <nowTime+0x1>
     fbe:	82 85       	ldd	r24, Z+10	; 0x0a
     fc0:	93 85       	ldd	r25, Z+11	; 0x0b
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	93 87       	std	Z+11, r25	; 0x0b
     fc6:	82 87       	std	Z+10, r24	; 0x0a
     fc8:	cc 97       	sbiw	r24, 0x3c	; 60
     fca:	7c f3       	brlt	.-34     	; 0xfaa <nowTimeClockTask>
     fcc:	80 85       	ldd	r24, Z+8	; 0x08
     fce:	91 85       	ldd	r25, Z+9	; 0x09
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	91 87       	std	Z+9, r25	; 0x09
     fd4:	80 87       	std	Z+8, r24	; 0x08
     fd6:	13 86       	std	Z+11, r1	; 0x0b
     fd8:	12 86       	std	Z+10, r1	; 0x0a
     fda:	cc 97       	sbiw	r24, 0x3c	; 60
     fdc:	34 f3       	brlt	.-52     	; 0xfaa <nowTimeClockTask>
     fde:	86 81       	ldd	r24, Z+6	; 0x06
     fe0:	97 81       	ldd	r25, Z+7	; 0x07
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	97 83       	std	Z+7, r25	; 0x07
     fe6:	86 83       	std	Z+6, r24	; 0x06
     fe8:	11 86       	std	Z+9, r1	; 0x09
     fea:	10 86       	std	Z+8, r1	; 0x08
     fec:	48 97       	sbiw	r24, 0x18	; 24
     fee:	ec f2       	brlt	.-70     	; 0xfaa <nowTimeClockTask>
     ff0:	17 82       	std	Z+7, r1	; 0x07
     ff2:	16 82       	std	Z+6, r1	; 0x06
     ff4:	da cf       	rjmp	.-76     	; 0xfaa <nowTimeClockTask>

00000ff6 <mytime_tryCreateNowTime>:
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	80 91 73 15 	lds	r24, 0x1573	; 0x801573 <nowTime>
    1000:	90 91 74 15 	lds	r25, 0x1574	; 0x801574 <nowTime+0x1>
    1004:	89 2b       	or	r24, r25
    1006:	51 f5       	brne	.+84     	; 0x105c <mytime_tryCreateNowTime+0x66>
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	8c e0       	ldi	r24, 0x0C	; 12
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
    1014:	fc 01       	movw	r30, r24
    1016:	90 93 74 15 	sts	0x1574, r25	; 0x801574 <nowTime+0x1>
    101a:	80 93 73 15 	sts	0x1573, r24	; 0x801573 <nowTime>
    101e:	89 2b       	or	r24, r25
    1020:	e9 f0       	breq	.+58     	; 0x105c <mytime_tryCreateNowTime+0x66>
    1022:	11 82       	std	Z+1, r1	; 0x01
    1024:	10 82       	st	Z, r1
    1026:	13 82       	std	Z+3, r1	; 0x03
    1028:	12 82       	std	Z+2, r1	; 0x02
    102a:	15 82       	std	Z+5, r1	; 0x05
    102c:	14 82       	std	Z+4, r1	; 0x04
    102e:	17 82       	std	Z+7, r1	; 0x07
    1030:	16 82       	std	Z+6, r1	; 0x06
    1032:	11 86       	std	Z+9, r1	; 0x09
    1034:	10 86       	std	Z+8, r1	; 0x08
    1036:	13 86       	std	Z+11, r1	; 0x0b
    1038:	12 86       	std	Z+10, r1	; 0x0a
    103a:	80 ea       	ldi	r24, 0xA0	; 160
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
    1042:	e1 2c       	mov	r14, r1
    1044:	f1 2c       	mov	r15, r1
    1046:	01 e0       	ldi	r16, 0x01	; 1
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 ec       	ldi	r20, 0xC0	; 192
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	6a eb       	ldi	r22, 0xBA	; 186
    1052:	73 e0       	ldi	r23, 0x03	; 3
    1054:	85 ed       	ldi	r24, 0xD5	; 213
    1056:	97 e0       	ldi	r25, 0x07	; 7
    1058:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	08 95       	ret

00001064 <myTime_create>:
    1064:	c8 df       	rcall	.-112    	; 0xff6 <mytime_tryCreateNowTime>
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	8c e0       	ldi	r24, 0x0C	; 12
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
    1072:	fc 01       	movw	r30, r24
    1074:	89 2b       	or	r24, r25
    1076:	61 f0       	breq	.+24     	; 0x1090 <myTime_create+0x2c>
    1078:	11 82       	std	Z+1, r1	; 0x01
    107a:	10 82       	st	Z, r1
    107c:	13 82       	std	Z+3, r1	; 0x03
    107e:	12 82       	std	Z+2, r1	; 0x02
    1080:	15 82       	std	Z+5, r1	; 0x05
    1082:	14 82       	std	Z+4, r1	; 0x04
    1084:	17 82       	std	Z+7, r1	; 0x07
    1086:	16 82       	std	Z+6, r1	; 0x06
    1088:	11 86       	std	Z+9, r1	; 0x09
    108a:	10 86       	std	Z+8, r1	; 0x08
    108c:	13 86       	std	Z+11, r1	; 0x0b
    108e:	12 86       	std	Z+10, r1	; 0x0a
    1090:	cf 01       	movw	r24, r30
    1092:	08 95       	ret

00001094 <myTime_updateToNowTime>:
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	ad df       	rcall	.-166    	; 0xff6 <mytime_tryCreateNowTime>
    109c:	e0 91 73 15 	lds	r30, 0x1573	; 0x801573 <nowTime>
    10a0:	f0 91 74 15 	lds	r31, 0x1574	; 0x801574 <nowTime+0x1>
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	99 83       	std	Y+1, r25	; 0x01
    10aa:	88 83       	st	Y, r24
    10ac:	e0 91 73 15 	lds	r30, 0x1573	; 0x801573 <nowTime>
    10b0:	f0 91 74 15 	lds	r31, 0x1574	; 0x801574 <nowTime+0x1>
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	95 81       	ldd	r25, Z+5	; 0x05
    10c0:	9d 83       	std	Y+5, r25	; 0x05
    10c2:	8c 83       	std	Y+4, r24	; 0x04
    10c4:	86 81       	ldd	r24, Z+6	; 0x06
    10c6:	97 81       	ldd	r25, Z+7	; 0x07
    10c8:	9f 83       	std	Y+7, r25	; 0x07
    10ca:	8e 83       	std	Y+6, r24	; 0x06
    10cc:	80 85       	ldd	r24, Z+8	; 0x08
    10ce:	91 85       	ldd	r25, Z+9	; 0x09
    10d0:	99 87       	std	Y+9, r25	; 0x09
    10d2:	88 87       	std	Y+8, r24	; 0x08
    10d4:	82 85       	ldd	r24, Z+10	; 0x0a
    10d6:	93 85       	ldd	r25, Z+11	; 0x0b
    10d8:	9b 87       	std	Y+11, r25	; 0x0b
    10da:	8a 87       	std	Y+10, r24	; 0x0a
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <myTime_getNowTime>:
    10e2:	89 df       	rcall	.-238    	; 0xff6 <mytime_tryCreateNowTime>
    10e4:	80 91 73 15 	lds	r24, 0x1573	; 0x801573 <nowTime>
    10e8:	90 91 74 15 	lds	r25, 0x1574	; 0x801574 <nowTime+0x1>
    10ec:	08 95       	ret

000010ee <myTime_getHour>:

int myTime_getHour(myTime_t self)
{
	return self->hour;
}
    10ee:	fc 01       	movw	r30, r24
    10f0:	86 81       	ldd	r24, Z+6	; 0x06
    10f2:	97 81       	ldd	r25, Z+7	; 0x07
    10f4:	08 95       	ret

000010f6 <myTime_getMin>:

int myTime_getMin(myTime_t self)
{
	return self->min;
}
    10f6:	fc 01       	movw	r30, r24
    10f8:	80 85       	ldd	r24, Z+8	; 0x08
    10fa:	91 85       	ldd	r25, Z+9	; 0x09
    10fc:	08 95       	ret

000010fe <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1104:	e8 ea       	ldi	r30, 0xA8	; 168
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	01 c0       	rjmp	.+2      	; 0x110c <prvInsertBlockIntoFreeList+0xe>
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	31 81       	ldd	r19, Z+1	; 0x01
    1110:	2a 17       	cp	r18, r26
    1112:	3b 07       	cpc	r19, r27
    1114:	d0 f3       	brcs	.-12     	; 0x110a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	af 01       	movw	r20, r30
    111c:	48 0f       	add	r20, r24
    111e:	59 1f       	adc	r21, r25
    1120:	a4 17       	cp	r26, r20
    1122:	b5 07       	cpc	r27, r21
    1124:	49 f4       	brne	.+18     	; 0x1138 <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1126:	12 96       	adiw	r26, 0x02	; 2
    1128:	4d 91       	ld	r20, X+
    112a:	5c 91       	ld	r21, X
    112c:	13 97       	sbiw	r26, 0x03	; 3
    112e:	84 0f       	add	r24, r20
    1130:	95 1f       	adc	r25, r21
    1132:	93 83       	std	Z+3, r25	; 0x03
    1134:	82 83       	std	Z+2, r24	; 0x02
    1136:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1138:	12 96       	adiw	r26, 0x02	; 2
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	13 97       	sbiw	r26, 0x03	; 3
    1140:	ed 01       	movw	r28, r26
    1142:	c8 0f       	add	r28, r24
    1144:	d9 1f       	adc	r29, r25
    1146:	2c 17       	cp	r18, r28
    1148:	3d 07       	cpc	r19, r29
    114a:	d9 f4       	brne	.+54     	; 0x1182 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    114c:	20 91 a6 08 	lds	r18, 0x08A6	; 0x8008a6 <pxEnd>
    1150:	30 91 a7 08 	lds	r19, 0x08A7	; 0x8008a7 <pxEnd+0x1>
    1154:	c2 17       	cp	r28, r18
    1156:	d3 07       	cpc	r29, r19
    1158:	81 f0       	breq	.+32     	; 0x117a <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    115a:	2a 81       	ldd	r18, Y+2	; 0x02
    115c:	3b 81       	ldd	r19, Y+3	; 0x03
    115e:	82 0f       	add	r24, r18
    1160:	93 1f       	adc	r25, r19
    1162:	13 96       	adiw	r26, 0x03	; 3
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    116a:	c0 81       	ld	r28, Z
    116c:	d1 81       	ldd	r29, Z+1	; 0x01
    116e:	88 81       	ld	r24, Y
    1170:	99 81       	ldd	r25, Y+1	; 0x01
    1172:	11 96       	adiw	r26, 0x01	; 1
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    117a:	11 96       	adiw	r26, 0x01	; 1
    117c:	dc 93       	st	X, r29
    117e:	ce 93       	st	-X, r28
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1182:	11 96       	adiw	r26, 0x01	; 1
    1184:	3c 93       	st	X, r19
    1186:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1188:	ae 17       	cp	r26, r30
    118a:	bf 07       	cpc	r27, r31
    118c:	11 f0       	breq	.+4      	; 0x1192 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    118e:	b1 83       	std	Z+1, r27	; 0x01
    1190:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    11aa:	0e 94 4b 14 	call	0x2896	; 0x2896 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    11ae:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <pxEnd>
    11b2:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <pxEnd+0x1>
    11b6:	89 2b       	or	r24, r25
    11b8:	41 f5       	brne	.+80     	; 0x120a <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    11ba:	e8 ea       	ldi	r30, 0xA8	; 168
    11bc:	f8 e0       	ldi	r31, 0x08	; 8
    11be:	ac ea       	ldi	r26, 0xAC	; 172
    11c0:	b8 e0       	ldi	r27, 0x08	; 8
    11c2:	b1 83       	std	Z+1, r27	; 0x01
    11c4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    11c6:	13 82       	std	Z+3, r1	; 0x03
    11c8:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    11ca:	ec e6       	ldi	r30, 0x6C	; 108
    11cc:	f2 e1       	ldi	r31, 0x12	; 18
    11ce:	f0 93 a7 08 	sts	0x08A7, r31	; 0x8008a7 <pxEnd+0x1>
    11d2:	e0 93 a6 08 	sts	0x08A6, r30	; 0x8008a6 <pxEnd>
    pxEnd->xBlockSize = 0;
    11d6:	13 82       	std	Z+3, r1	; 0x03
    11d8:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    11da:	11 82       	std	Z+1, r1	; 0x01
    11dc:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    11de:	80 ec       	ldi	r24, 0xC0	; 192
    11e0:	99 e0       	ldi	r25, 0x09	; 9
    11e2:	13 96       	adiw	r26, 0x03	; 3
    11e4:	9c 93       	st	X, r25
    11e6:	8e 93       	st	-X, r24
    11e8:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    11ea:	ed 93       	st	X+, r30
    11ec:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11ee:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <xMinimumEverFreeBytesRemaining+0x1>
    11f2:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11f6:	90 93 a5 08 	sts	0x08A5, r25	; 0x8008a5 <xFreeBytesRemaining+0x1>
    11fa:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e8       	ldi	r25, 0x80	; 128
    1202:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <xBlockAllocatedBit+0x1>
    1206:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    120a:	e0 90 9c 08 	lds	r14, 0x089C	; 0x80089c <xBlockAllocatedBit>
    120e:	f0 90 9d 08 	lds	r15, 0x089D	; 0x80089d <xBlockAllocatedBit+0x1>
    1212:	c7 01       	movw	r24, r14
    1214:	8c 23       	and	r24, r28
    1216:	9d 23       	and	r25, r29
    1218:	89 2b       	or	r24, r25
    121a:	09 f0       	breq	.+2      	; 0x121e <pvPortMalloc+0x86>
    121c:	75 c0       	rjmp	.+234    	; 0x1308 <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    121e:	20 97       	sbiw	r28, 0x00	; 0
    1220:	09 f4       	brne	.+2      	; 0x1224 <pvPortMalloc+0x8c>
    1222:	75 c0       	rjmp	.+234    	; 0x130e <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1224:	9e 01       	movw	r18, r28
    1226:	2c 5f       	subi	r18, 0xFC	; 252
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    122a:	c2 17       	cp	r28, r18
    122c:	d3 07       	cpc	r29, r19
    122e:	08 f0       	brcs	.+2      	; 0x1232 <pvPortMalloc+0x9a>
    1230:	6e c0       	rjmp	.+220    	; 0x130e <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <pvPortMalloc+0xa2>
    1238:	67 c0       	rjmp	.+206    	; 0x1308 <pvPortMalloc+0x170>
    123a:	00 91 a4 08 	lds	r16, 0x08A4	; 0x8008a4 <xFreeBytesRemaining>
    123e:	10 91 a5 08 	lds	r17, 0x08A5	; 0x8008a5 <xFreeBytesRemaining+0x1>
    1242:	02 17       	cp	r16, r18
    1244:	13 07       	cpc	r17, r19
    1246:	08 f4       	brcc	.+2      	; 0x124a <pvPortMalloc+0xb2>
    1248:	5f c0       	rjmp	.+190    	; 0x1308 <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    124a:	c0 91 a8 08 	lds	r28, 0x08A8	; 0x8008a8 <xStart>
    124e:	d0 91 a9 08 	lds	r29, 0x08A9	; 0x8008a9 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1252:	e8 ea       	ldi	r30, 0xA8	; 168
    1254:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1256:	02 c0       	rjmp	.+4      	; 0x125c <pvPortMalloc+0xc4>
    1258:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
    125a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	9b 81       	ldd	r25, Y+3	; 0x03
    1260:	82 17       	cp	r24, r18
    1262:	93 07       	cpc	r25, r19
    1264:	20 f4       	brcc	.+8      	; 0x126e <pvPortMalloc+0xd6>
    1266:	88 81       	ld	r24, Y
    1268:	99 81       	ldd	r25, Y+1	; 0x01
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	a9 f7       	brne	.-22     	; 0x1258 <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    126e:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <pxEnd>
    1272:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <pxEnd+0x1>
    1276:	c8 17       	cp	r28, r24
    1278:	d9 07       	cpc	r29, r25
    127a:	09 f4       	brne	.+2      	; 0x127e <pvPortMalloc+0xe6>
    127c:	45 c0       	rjmp	.+138    	; 0x1308 <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    127e:	c0 80       	ld	r12, Z
    1280:	d1 80       	ldd	r13, Z+1	; 0x01
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	c8 0e       	add	r12, r24
    1286:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1288:	88 81       	ld	r24, Y
    128a:	99 81       	ldd	r25, Y+1	; 0x01
    128c:	91 83       	std	Z+1, r25	; 0x01
    128e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1290:	4a 81       	ldd	r20, Y+2	; 0x02
    1292:	5b 81       	ldd	r21, Y+3	; 0x03
    1294:	42 1b       	sub	r20, r18
    1296:	53 0b       	sbc	r21, r19
    1298:	49 30       	cpi	r20, 0x09	; 9
    129a:	51 05       	cpc	r21, r1
    129c:	48 f0       	brcs	.+18     	; 0x12b0 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    129e:	ce 01       	movw	r24, r28
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    12a4:	fc 01       	movw	r30, r24
    12a6:	53 83       	std	Z+3, r21	; 0x03
    12a8:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    12aa:	3b 83       	std	Y+3, r19	; 0x03
    12ac:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    12ae:	27 df       	rcall	.-434    	; 0x10fe <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	08 1b       	sub	r16, r24
    12b6:	19 0b       	sbc	r17, r25
    12b8:	10 93 a5 08 	sts	0x08A5, r17	; 0x8008a5 <xFreeBytesRemaining+0x1>
    12bc:	00 93 a4 08 	sts	0x08A4, r16	; 0x8008a4 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    12c0:	20 91 a2 08 	lds	r18, 0x08A2	; 0x8008a2 <xMinimumEverFreeBytesRemaining>
    12c4:	30 91 a3 08 	lds	r19, 0x08A3	; 0x8008a3 <xMinimumEverFreeBytesRemaining+0x1>
    12c8:	02 17       	cp	r16, r18
    12ca:	13 07       	cpc	r17, r19
    12cc:	20 f4       	brcc	.+8      	; 0x12d6 <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    12ce:	10 93 a3 08 	sts	0x08A3, r17	; 0x8008a3 <xMinimumEverFreeBytesRemaining+0x1>
    12d2:	00 93 a2 08 	sts	0x08A2, r16	; 0x8008a2 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    12d6:	e8 2a       	or	r14, r24
    12d8:	f9 2a       	or	r15, r25
    12da:	fb 82       	std	Y+3, r15	; 0x03
    12dc:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    12e2:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <xNumberOfSuccessfulAllocations>
    12e6:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <xNumberOfSuccessfulAllocations+0x1>
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <xNumberOfSuccessfulAllocations+0x1>
    12f0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    12f4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    12f8:	c1 14       	cp	r12, r1
    12fa:	d1 04       	cpc	r13, r1
    12fc:	59 f4       	brne	.+22     	; 0x1314 <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    12fe:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <vApplicationMallocFailedHook>
    1302:	c1 2c       	mov	r12, r1
    1304:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1308:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
    130c:	f8 cf       	rjmp	.-16     	; 0x12fe <pvPortMalloc+0x166>
    130e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
    1312:	f5 cf       	rjmp	.-22     	; 0x12fe <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    1314:	c6 01       	movw	r24, r12
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	08 95       	ret

00001328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	99 f1       	breq	.+102    	; 0x1396 <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1330:	fc 01       	movw	r30, r24
    1332:	34 97       	sbiw	r30, 0x04	; 4
    1334:	22 81       	ldd	r18, Z+2	; 0x02
    1336:	33 81       	ldd	r19, Z+3	; 0x03
    1338:	40 91 9c 08 	lds	r20, 0x089C	; 0x80089c <xBlockAllocatedBit>
    133c:	50 91 9d 08 	lds	r21, 0x089D	; 0x80089d <xBlockAllocatedBit+0x1>
    1340:	b9 01       	movw	r22, r18
    1342:	64 23       	and	r22, r20
    1344:	75 23       	and	r23, r21
    1346:	67 2b       	or	r22, r23
    1348:	31 f1       	breq	.+76     	; 0x1396 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	67 2b       	or	r22, r23
    1350:	11 f5       	brne	.+68     	; 0x1396 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1352:	ef 01       	movw	r28, r30
    1354:	40 95       	com	r20
    1356:	50 95       	com	r21
    1358:	24 23       	and	r18, r20
    135a:	35 23       	and	r19, r21
    135c:	33 83       	std	Z+3, r19	; 0x03
    135e:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
    1360:	0e 94 4b 14 	call	0x2896	; 0x2896 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    1364:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <xFreeBytesRemaining>
    1368:	30 91 a5 08 	lds	r19, 0x08A5	; 0x8008a5 <xFreeBytesRemaining+0x1>
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	9b 81       	ldd	r25, Y+3	; 0x03
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	90 93 a5 08 	sts	0x08A5, r25	; 0x8008a5 <xFreeBytesRemaining+0x1>
    1378:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    137c:	ce 01       	movw	r24, r28
    137e:	bf de       	rcall	.-642    	; 0x10fe <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1380:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <xNumberOfSuccessfulFrees>
    1384:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <xNumberOfSuccessfulFrees+0x1>
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <xNumberOfSuccessfulFrees+0x1>
    138e:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    1392:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    139c:	fc 01       	movw	r30, r24
    139e:	03 96       	adiw	r24, 0x03	; 3
    13a0:	92 83       	std	Z+2, r25	; 0x02
    13a2:	81 83       	std	Z+1, r24	; 0x01
    13a4:	4f ef       	ldi	r20, 0xFF	; 255
    13a6:	5f ef       	ldi	r21, 0xFF	; 255
    13a8:	ba 01       	movw	r22, r20
    13aa:	43 83       	std	Z+3, r20	; 0x03
    13ac:	54 83       	std	Z+4, r21	; 0x04
    13ae:	65 83       	std	Z+5, r22	; 0x05
    13b0:	76 83       	std	Z+6, r23	; 0x06
    13b2:	90 87       	std	Z+8, r25	; 0x08
    13b4:	87 83       	std	Z+7, r24	; 0x07
    13b6:	92 87       	std	Z+10, r25	; 0x0a
    13b8:	81 87       	std	Z+9, r24	; 0x09
    13ba:	10 82       	st	Z, r1
    13bc:	08 95       	ret

000013be <vListInitialiseItem>:
    13be:	fc 01       	movw	r30, r24
    13c0:	13 86       	std	Z+11, r1	; 0x0b
    13c2:	12 86       	std	Z+10, r1	; 0x0a
    13c4:	08 95       	ret

000013c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    13d0:	08 81       	ld	r16, Y
    13d2:	19 81       	ldd	r17, Y+1	; 0x01
    13d4:	2a 81       	ldd	r18, Y+2	; 0x02
    13d6:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    13d8:	0f 3f       	cpi	r16, 0xFF	; 255
    13da:	4f ef       	ldi	r20, 0xFF	; 255
    13dc:	14 07       	cpc	r17, r20
    13de:	24 07       	cpc	r18, r20
    13e0:	34 07       	cpc	r19, r20
    13e2:	21 f4       	brne	.+8      	; 0x13ec <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    13e4:	fc 01       	movw	r30, r24
    13e6:	a1 85       	ldd	r26, Z+9	; 0x09
    13e8:	b2 85       	ldd	r27, Z+10	; 0x0a
    13ea:	11 c0       	rjmp	.+34     	; 0x140e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    13ec:	dc 01       	movw	r26, r24
    13ee:	13 96       	adiw	r26, 0x03	; 3
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <vListInsert+0x2e>
    13f2:	df 01       	movw	r26, r30
    13f4:	14 96       	adiw	r26, 0x04	; 4
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	15 97       	sbiw	r26, 0x05	; 5
    13fc:	40 81       	ld	r20, Z
    13fe:	51 81       	ldd	r21, Z+1	; 0x01
    1400:	62 81       	ldd	r22, Z+2	; 0x02
    1402:	73 81       	ldd	r23, Z+3	; 0x03
    1404:	04 17       	cp	r16, r20
    1406:	15 07       	cpc	r17, r21
    1408:	26 07       	cpc	r18, r22
    140a:	37 07       	cpc	r19, r23
    140c:	90 f7       	brcc	.-28     	; 0x13f2 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    140e:	14 96       	adiw	r26, 0x04	; 4
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	15 97       	sbiw	r26, 0x05	; 5
    1416:	fd 83       	std	Y+5, r31	; 0x05
    1418:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    141a:	d7 83       	std	Z+7, r29	; 0x07
    141c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    141e:	bf 83       	std	Y+7, r27	; 0x07
    1420:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1422:	15 96       	adiw	r26, 0x05	; 5
    1424:	dc 93       	st	X, r29
    1426:	ce 93       	st	-X, r28
    1428:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    142a:	9b 87       	std	Y+11, r25	; 0x0b
    142c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    142e:	fc 01       	movw	r30, r24
    1430:	20 81       	ld	r18, Z
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	20 83       	st	Z, r18
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1446:	a2 85       	ldd	r26, Z+10	; 0x0a
    1448:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    144a:	c4 81       	ldd	r28, Z+4	; 0x04
    144c:	d5 81       	ldd	r29, Z+5	; 0x05
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	9f 83       	std	Y+7, r25	; 0x07
    1454:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1456:	c6 81       	ldd	r28, Z+6	; 0x06
    1458:	d7 81       	ldd	r29, Z+7	; 0x07
    145a:	84 81       	ldd	r24, Z+4	; 0x04
    145c:	95 81       	ldd	r25, Z+5	; 0x05
    145e:	9d 83       	std	Y+5, r25	; 0x05
    1460:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	e8 17       	cp	r30, r24
    146c:	f9 07       	cpc	r31, r25
    146e:	31 f4       	brne	.+12     	; 0x147c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1470:	86 81       	ldd	r24, Z+6	; 0x06
    1472:	97 81       	ldd	r25, Z+7	; 0x07
    1474:	12 96       	adiw	r26, 0x02	; 2
    1476:	9c 93       	st	X, r25
    1478:	8e 93       	st	-X, r24
    147a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    147c:	13 86       	std	Z+11, r1	; 0x0b
    147e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1480:	8c 91       	ld	r24, X
    1482:	81 50       	subi	r24, 0x01	; 1
    1484:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1486:	8c 91       	ld	r24, X
}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    148e:	fc 01       	movw	r30, r24
    1490:	60 83       	st	Z, r22
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	70 83       	st	Z, r23
    1496:	31 97       	sbiw	r30, 0x01	; 1
    1498:	10 82       	st	Z, r1
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	10 82       	st	Z, r1
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	20 e8       	ldi	r18, 0x80	; 128
    14a2:	20 83       	st	Z, r18
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	10 82       	st	Z, r1
    14a8:	31 97       	sbiw	r30, 0x01	; 1
    14aa:	10 82       	st	Z, r1
    14ac:	31 97       	sbiw	r30, 0x01	; 1
    14ae:	10 82       	st	Z, r1
    14b0:	77 97       	sbiw	r30, 0x17	; 23
    14b2:	40 83       	st	Z, r20
    14b4:	31 97       	sbiw	r30, 0x01	; 1
    14b6:	50 83       	st	Z, r21
    14b8:	86 97       	sbiw	r24, 0x26	; 38
    14ba:	08 95       	ret

000014bc <xPortStartScheduler>:
    14bc:	a8 95       	wdr
    14be:	90 ec       	ldi	r25, 0xC0	; 192
    14c0:	88 e1       	ldi	r24, 0x18	; 24
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	a8 95       	wdr
    14c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    14d2:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    14d6:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    14da:	cd 91       	ld	r28, X+
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	dd 91       	ld	r29, X+
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	ff 91       	pop	r31
    14e4:	ef 91       	pop	r30
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	bf 91       	pop	r27
    14ec:	af 91       	pop	r26
    14ee:	9f 91       	pop	r25
    14f0:	8f 91       	pop	r24
    14f2:	7f 91       	pop	r23
    14f4:	6f 91       	pop	r22
    14f6:	5f 91       	pop	r21
    14f8:	4f 91       	pop	r20
    14fa:	3f 91       	pop	r19
    14fc:	2f 91       	pop	r18
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	9f 90       	pop	r9
    1510:	8f 90       	pop	r8
    1512:	7f 90       	pop	r7
    1514:	6f 90       	pop	r6
    1516:	5f 90       	pop	r5
    1518:	4f 90       	pop	r4
    151a:	3f 90       	pop	r3
    151c:	2f 90       	pop	r2
    151e:	1f 90       	pop	r1
    1520:	0f 90       	pop	r0
    1522:	0c be       	out	0x3c, r0	; 60
    1524:	0f 90       	pop	r0
    1526:	0b be       	out	0x3b, r0	; 59
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	08 95       	ret
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	08 95       	ret

00001534 <vPortYield>:
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	0f 92       	push	r0
    153c:	0b b6       	in	r0, 0x3b	; 59
    153e:	0f 92       	push	r0
    1540:	0c b6       	in	r0, 0x3c	; 60
    1542:	0f 92       	push	r0
    1544:	1f 92       	push	r1
    1546:	11 24       	eor	r1, r1
    1548:	2f 92       	push	r2
    154a:	3f 92       	push	r3
    154c:	4f 92       	push	r4
    154e:	5f 92       	push	r5
    1550:	6f 92       	push	r6
    1552:	7f 92       	push	r7
    1554:	8f 92       	push	r8
    1556:	9f 92       	push	r9
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
    1584:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    1588:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    158c:	0d b6       	in	r0, 0x3d	; 61
    158e:	0d 92       	st	X+, r0
    1590:	0e b6       	in	r0, 0x3e	; 62
    1592:	0d 92       	st	X+, r0
    1594:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <vTaskSwitchContext>
    1598:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    159c:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    15a0:	cd 91       	ld	r28, X+
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	dd 91       	ld	r29, X+
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	ff 91       	pop	r31
    15aa:	ef 91       	pop	r30
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	6f 90       	pop	r6
    15dc:	5f 90       	pop	r5
    15de:	4f 90       	pop	r4
    15e0:	3f 90       	pop	r3
    15e2:	2f 90       	pop	r2
    15e4:	1f 90       	pop	r1
    15e6:	0f 90       	pop	r0
    15e8:	0c be       	out	0x3c, r0	; 60
    15ea:	0f 90       	pop	r0
    15ec:	0b be       	out	0x3b, r0	; 59
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	08 95       	ret

000015f6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	0f 92       	push	r0
    15fe:	0b b6       	in	r0, 0x3b	; 59
    1600:	0f 92       	push	r0
    1602:	0c b6       	in	r0, 0x3c	; 60
    1604:	0f 92       	push	r0
    1606:	1f 92       	push	r1
    1608:	11 24       	eor	r1, r1
    160a:	2f 92       	push	r2
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	2f 93       	push	r18
    162c:	3f 93       	push	r19
    162e:	4f 93       	push	r20
    1630:	5f 93       	push	r21
    1632:	6f 93       	push	r22
    1634:	7f 93       	push	r23
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    164a:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    164e:	0d b6       	in	r0, 0x3d	; 61
    1650:	0d 92       	st	X+, r0
    1652:	0e b6       	in	r0, 0x3e	; 62
    1654:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1656:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1658:	0e 94 5f 14 	call	0x28be	; 0x28be <xTaskIncrementTick>
    165c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    165e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1662:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    1666:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    166a:	cd 91       	ld	r28, X+
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	dd 91       	ld	r29, X+
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	bf 91       	pop	r27
    167c:	af 91       	pop	r26
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	7f 91       	pop	r23
    1684:	6f 91       	pop	r22
    1686:	5f 91       	pop	r21
    1688:	4f 91       	pop	r20
    168a:	3f 91       	pop	r19
    168c:	2f 91       	pop	r18
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	7f 90       	pop	r7
    16a4:	6f 90       	pop	r6
    16a6:	5f 90       	pop	r5
    16a8:	4f 90       	pop	r4
    16aa:	3f 90       	pop	r3
    16ac:	2f 90       	pop	r2
    16ae:	1f 90       	pop	r1
    16b0:	0f 90       	pop	r0
    16b2:	0c be       	out	0x3c, r0	; 60
    16b4:	0f 90       	pop	r0
    16b6:	0b be       	out	0x3b, r0	; 59
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    16be:	08 95       	ret

000016c0 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    16c0:	9a df       	rcall	.-204    	; 0x15f6 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    16c2:	18 95       	reti

000016c4 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	0f 92       	push	r0
    16ca:	fc 01       	movw	r30, r24
    16cc:	96 8d       	ldd	r25, Z+30	; 0x1e
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	91 11       	cpse	r25, r1
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	08 95       	ret

000016da <prvCopyDataToQueue>:
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
    16e4:	04 2f       	mov	r16, r20
    16e6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    16e8:	48 a1       	ldd	r20, Y+32	; 0x20
    16ea:	41 11       	cpse	r20, r1
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <prvCopyDataToQueue+0x2c>
    16ee:	88 81       	ld	r24, Y
    16f0:	99 81       	ldd	r25, Y+1	; 0x01
    16f2:	89 2b       	or	r24, r25
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <prvCopyDataToQueue+0x1e>
    16f6:	42 c0       	rjmp	.+132    	; 0x177c <prvCopyDataToQueue+0xa2>
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	0e 94 26 19 	call	0x324c	; 0x324c <xTaskPriorityDisinherit>
    1700:	1d 82       	std	Y+5, r1	; 0x05
    1702:	1c 82       	std	Y+4, r1	; 0x04
    1704:	42 c0       	rjmp	.+132    	; 0x178a <prvCopyDataToQueue+0xb0>
    1706:	01 11       	cpse	r16, r1
    1708:	17 c0       	rjmp	.+46     	; 0x1738 <prvCopyDataToQueue+0x5e>
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <memcpy>
    1714:	28 a1       	ldd	r18, Y+32	; 0x20
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	82 0f       	add	r24, r18
    171c:	91 1d       	adc	r25, r1
    171e:	9b 83       	std	Y+3, r25	; 0x03
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	82 17       	cp	r24, r18
    1728:	93 07       	cpc	r25, r19
    172a:	50 f1       	brcs	.+84     	; 0x1780 <prvCopyDataToQueue+0xa6>
    172c:	88 81       	ld	r24, Y
    172e:	99 81       	ldd	r25, Y+1	; 0x01
    1730:	9b 83       	std	Y+3, r25	; 0x03
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	29 c0       	rjmp	.+82     	; 0x178a <prvCopyDataToQueue+0xb0>
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <memcpy>
    1742:	88 a1       	ldd	r24, Y+32	; 0x20
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	91 95       	neg	r25
    1748:	81 95       	neg	r24
    174a:	91 09       	sbc	r25, r1
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	28 0f       	add	r18, r24
    1752:	39 1f       	adc	r19, r25
    1754:	3f 83       	std	Y+7, r19	; 0x07
    1756:	2e 83       	std	Y+6, r18	; 0x06
    1758:	48 81       	ld	r20, Y
    175a:	59 81       	ldd	r21, Y+1	; 0x01
    175c:	24 17       	cp	r18, r20
    175e:	35 07       	cpc	r19, r21
    1760:	30 f4       	brcc	.+12     	; 0x176e <prvCopyDataToQueue+0x94>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	82 0f       	add	r24, r18
    1768:	93 1f       	adc	r25, r19
    176a:	9f 83       	std	Y+7, r25	; 0x07
    176c:	8e 83       	std	Y+6, r24	; 0x06
    176e:	02 30       	cpi	r16, 0x02	; 2
    1770:	49 f4       	brne	.+18     	; 0x1784 <prvCopyDataToQueue+0xaa>
    1772:	11 23       	and	r17, r17
    1774:	49 f0       	breq	.+18     	; 0x1788 <prvCopyDataToQueue+0xae>
    1776:	11 50       	subi	r17, 0x01	; 1
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	07 c0       	rjmp	.+14     	; 0x178a <prvCopyDataToQueue+0xb0>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	05 c0       	rjmp	.+10     	; 0x178a <prvCopyDataToQueue+0xb0>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	03 c0       	rjmp	.+6      	; 0x178a <prvCopyDataToQueue+0xb0>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	01 c0       	rjmp	.+2      	; 0x178a <prvCopyDataToQueue+0xb0>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	1f 5f       	subi	r17, 0xFF	; 255
    178c:	1e 8f       	std	Y+30, r17	; 0x1e
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <prvCopyDataFromQueue>:
    1798:	fc 01       	movw	r30, r24
    179a:	40 a1       	ldd	r20, Z+32	; 0x20
    179c:	44 23       	and	r20, r20
    179e:	a9 f0       	breq	.+42     	; 0x17ca <prvCopyDataFromQueue+0x32>
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	26 81       	ldd	r18, Z+6	; 0x06
    17a4:	37 81       	ldd	r19, Z+7	; 0x07
    17a6:	24 0f       	add	r18, r20
    17a8:	35 1f       	adc	r19, r21
    17aa:	37 83       	std	Z+7, r19	; 0x07
    17ac:	26 83       	std	Z+6, r18	; 0x06
    17ae:	84 81       	ldd	r24, Z+4	; 0x04
    17b0:	95 81       	ldd	r25, Z+5	; 0x05
    17b2:	28 17       	cp	r18, r24
    17b4:	39 07       	cpc	r19, r25
    17b6:	20 f0       	brcs	.+8      	; 0x17c0 <prvCopyDataFromQueue+0x28>
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	97 83       	std	Z+7, r25	; 0x07
    17be:	86 83       	std	Z+6, r24	; 0x06
    17c0:	cb 01       	movw	r24, r22
    17c2:	66 81       	ldd	r22, Z+6	; 0x06
    17c4:	77 81       	ldd	r23, Z+7	; 0x07
    17c6:	0c 94 e6 35 	jmp	0x6bcc	; 0x6bcc <memcpy>
    17ca:	08 95       	ret

000017cc <prvUnlockQueue>:
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	8c 01       	movw	r16, r24
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	0f 92       	push	r0
    17de:	fc 01       	movw	r30, r24
    17e0:	c2 a1       	ldd	r28, Z+34	; 0x22
    17e2:	1c 16       	cp	r1, r28
    17e4:	ac f4       	brge	.+42     	; 0x1810 <prvUnlockQueue+0x44>
    17e6:	83 89       	ldd	r24, Z+19	; 0x13
    17e8:	81 11       	cpse	r24, r1
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <prvUnlockQueue+0x2c>
    17ec:	11 c0       	rjmp	.+34     	; 0x1810 <prvUnlockQueue+0x44>
    17ee:	f8 01       	movw	r30, r16
    17f0:	83 89       	ldd	r24, Z+19	; 0x13
    17f2:	81 11       	cpse	r24, r1
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <prvUnlockQueue+0x34>
    17f6:	0c c0       	rjmp	.+24     	; 0x1810 <prvUnlockQueue+0x44>
    17f8:	78 01       	movw	r14, r16
    17fa:	f3 e1       	ldi	r31, 0x13	; 19
    17fc:	ef 0e       	add	r14, r31
    17fe:	f1 1c       	adc	r15, r1
    1800:	c7 01       	movw	r24, r14
    1802:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    1806:	81 11       	cpse	r24, r1
    1808:	0e 94 88 18 	call	0x3110	; 0x3110 <vTaskMissedYield>
    180c:	c1 50       	subi	r28, 0x01	; 1
    180e:	79 f7       	brne	.-34     	; 0x17ee <prvUnlockQueue+0x22>
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	f8 01       	movw	r30, r16
    1814:	82 a3       	std	Z+34, r24	; 0x22
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	c1 a1       	ldd	r28, Z+33	; 0x21
    1822:	1c 16       	cp	r1, r28
    1824:	ac f4       	brge	.+42     	; 0x1850 <prvUnlockQueue+0x84>
    1826:	80 85       	ldd	r24, Z+8	; 0x08
    1828:	81 11       	cpse	r24, r1
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <prvUnlockQueue+0x6c>
    182c:	11 c0       	rjmp	.+34     	; 0x1850 <prvUnlockQueue+0x84>
    182e:	f8 01       	movw	r30, r16
    1830:	80 85       	ldd	r24, Z+8	; 0x08
    1832:	81 11       	cpse	r24, r1
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <prvUnlockQueue+0x74>
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <prvUnlockQueue+0x84>
    1838:	78 01       	movw	r14, r16
    183a:	f8 e0       	ldi	r31, 0x08	; 8
    183c:	ef 0e       	add	r14, r31
    183e:	f1 1c       	adc	r15, r1
    1840:	c7 01       	movw	r24, r14
    1842:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    1846:	81 11       	cpse	r24, r1
    1848:	0e 94 88 18 	call	0x3110	; 0x3110 <vTaskMissedYield>
    184c:	c1 50       	subi	r28, 0x01	; 1
    184e:	79 f7       	brne	.-34     	; 0x182e <prvUnlockQueue+0x62>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	f8 01       	movw	r30, r16
    1854:	81 a3       	std	Z+33, r24	; 0x21
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	08 95       	ret

00001866 <xQueueGenericReset>:
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	e8 81       	ld	r30, Y
    1874:	f9 81       	ldd	r31, Y+1	; 0x01
    1876:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1878:	28 a1       	ldd	r18, Y+32	; 0x20
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	82 9f       	mul	r24, r18
    1880:	a0 01       	movw	r20, r0
    1882:	83 9f       	mul	r24, r19
    1884:	50 0d       	add	r21, r0
    1886:	92 9f       	mul	r25, r18
    1888:	50 0d       	add	r21, r0
    188a:	11 24       	eor	r1, r1
    188c:	4e 0f       	add	r20, r30
    188e:	5f 1f       	adc	r21, r31
    1890:	5d 83       	std	Y+5, r21	; 0x05
    1892:	4c 83       	std	Y+4, r20	; 0x04
    1894:	1e 8e       	std	Y+30, r1	; 0x1e
    1896:	fb 83       	std	Y+3, r31	; 0x03
    1898:	ea 83       	std	Y+2, r30	; 0x02
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	82 9f       	mul	r24, r18
    189e:	a0 01       	movw	r20, r0
    18a0:	83 9f       	mul	r24, r19
    18a2:	50 0d       	add	r21, r0
    18a4:	92 9f       	mul	r25, r18
    18a6:	50 0d       	add	r21, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	cf 01       	movw	r24, r30
    18ac:	84 0f       	add	r24, r20
    18ae:	95 1f       	adc	r25, r21
    18b0:	9f 83       	std	Y+7, r25	; 0x07
    18b2:	8e 83       	std	Y+6, r24	; 0x06
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	89 a3       	std	Y+33, r24	; 0x21
    18b8:	8a a3       	std	Y+34, r24	; 0x22
    18ba:	61 11       	cpse	r22, r1
    18bc:	0b c0       	rjmp	.+22     	; 0x18d4 <xQueueGenericReset+0x6e>
    18be:	88 85       	ldd	r24, Y+8	; 0x08
    18c0:	88 23       	and	r24, r24
    18c2:	71 f0       	breq	.+28     	; 0x18e0 <xQueueGenericReset+0x7a>
    18c4:	ce 01       	movw	r24, r28
    18c6:	08 96       	adiw	r24, 0x08	; 8
    18c8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    18cc:	88 23       	and	r24, r24
    18ce:	41 f0       	breq	.+16     	; 0x18e0 <xQueueGenericReset+0x7a>
    18d0:	31 de       	rcall	.-926    	; 0x1534 <vPortYield>
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <xQueueGenericReset+0x7a>
    18d4:	ce 01       	movw	r24, r28
    18d6:	08 96       	adiw	r24, 0x08	; 8
    18d8:	61 dd       	rcall	.-1342   	; 0x139c <vListInitialise>
    18da:	ce 01       	movw	r24, r28
    18dc:	43 96       	adiw	r24, 0x13	; 19
    18de:	5e dd       	rcall	.-1348   	; 0x139c <vListInitialise>
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <xQueueGenericCreate>:
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	08 2f       	mov	r16, r24
    18f6:	16 2f       	mov	r17, r22
    18f8:	86 9f       	mul	r24, r22
    18fa:	c0 01       	movw	r24, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	83 96       	adiw	r24, 0x23	; 35
    1900:	4b dc       	rcall	.-1898   	; 0x1198 <pvPortMalloc>
    1902:	ec 01       	movw	r28, r24
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	69 f0       	breq	.+26     	; 0x1922 <xQueueGenericCreate+0x36>
    1908:	11 11       	cpse	r17, r1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <xQueueGenericCreate+0x26>
    190c:	99 83       	std	Y+1, r25	; 0x01
    190e:	88 83       	st	Y, r24
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <xQueueGenericCreate+0x2c>
    1912:	83 96       	adiw	r24, 0x23	; 35
    1914:	99 83       	std	Y+1, r25	; 0x01
    1916:	88 83       	st	Y, r24
    1918:	0f 8f       	std	Y+31, r16	; 0x1f
    191a:	18 a3       	std	Y+32, r17	; 0x20
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	ce 01       	movw	r24, r28
    1920:	a2 df       	rcall	.-188    	; 0x1866 <xQueueGenericReset>
    1922:	ce 01       	movw	r24, r28
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <xQueueGenericSend>:
    192e:	9f 92       	push	r9
    1930:	af 92       	push	r10
    1932:	bf 92       	push	r11
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	29 97       	sbiw	r28, 0x09	; 9
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	7c 01       	movw	r14, r24
    1956:	5b 01       	movw	r10, r22
    1958:	2e 83       	std	Y+6, r18	; 0x06
    195a:	3f 83       	std	Y+7, r19	; 0x07
    195c:	48 87       	std	Y+8, r20	; 0x08
    195e:	59 87       	std	Y+9, r21	; 0x09
    1960:	10 e0       	ldi	r17, 0x00	; 0
    1962:	99 24       	eor	r9, r9
    1964:	93 94       	inc	r9
    1966:	6c 01       	movw	r12, r24
    1968:	88 e0       	ldi	r24, 0x08	; 8
    196a:	c8 0e       	add	r12, r24
    196c:	d1 1c       	adc	r13, r1
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	0f 92       	push	r0
    1974:	f7 01       	movw	r30, r14
    1976:	96 8d       	ldd	r25, Z+30	; 0x1e
    1978:	87 8d       	ldd	r24, Z+31	; 0x1f
    197a:	98 17       	cp	r25, r24
    197c:	10 f0       	brcs	.+4      	; 0x1982 <xQueueGenericSend+0x54>
    197e:	02 30       	cpi	r16, 0x02	; 2
    1980:	b1 f4       	brne	.+44     	; 0x19ae <xQueueGenericSend+0x80>
    1982:	40 2f       	mov	r20, r16
    1984:	b5 01       	movw	r22, r10
    1986:	c7 01       	movw	r24, r14
    1988:	a8 de       	rcall	.-688    	; 0x16da <prvCopyDataToQueue>
    198a:	f7 01       	movw	r30, r14
    198c:	93 89       	ldd	r25, Z+19	; 0x13
    198e:	99 23       	and	r25, r25
    1990:	41 f0       	breq	.+16     	; 0x19a2 <xQueueGenericSend+0x74>
    1992:	c7 01       	movw	r24, r14
    1994:	43 96       	adiw	r24, 0x13	; 19
    1996:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    199a:	88 23       	and	r24, r24
    199c:	21 f0       	breq	.+8      	; 0x19a6 <xQueueGenericSend+0x78>
    199e:	ca dd       	rcall	.-1132   	; 0x1534 <vPortYield>
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <xQueueGenericSend+0x78>
    19a2:	81 11       	cpse	r24, r1
    19a4:	c7 dd       	rcall	.-1138   	; 0x1534 <vPortYield>
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	51 c0       	rjmp	.+162    	; 0x1a50 <xQueueGenericSend+0x122>
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	a8 85       	ldd	r26, Y+8	; 0x08
    19b4:	b9 85       	ldd	r27, Y+9	; 0x09
    19b6:	89 2b       	or	r24, r25
    19b8:	8a 2b       	or	r24, r26
    19ba:	8b 2b       	or	r24, r27
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <xQueueGenericSend+0x98>
    19be:	0f 90       	pop	r0
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	45 c0       	rjmp	.+138    	; 0x1a50 <xQueueGenericSend+0x122>
    19c6:	11 11       	cpse	r17, r1
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <xQueueGenericSend+0xa6>
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 1e 18 	call	0x303c	; 0x303c <vTaskInternalSetTimeOutState>
    19d2:	19 2d       	mov	r17, r9
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	5e d7       	rcall	.+3772   	; 0x2896 <vTaskSuspendAll>
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	0f 92       	push	r0
    19e0:	f7 01       	movw	r30, r14
    19e2:	81 a1       	ldd	r24, Z+33	; 0x21
    19e4:	8f 3f       	cpi	r24, 0xFF	; 255
    19e6:	09 f4       	brne	.+2      	; 0x19ea <xQueueGenericSend+0xbc>
    19e8:	11 a2       	std	Z+33, r1	; 0x21
    19ea:	f7 01       	movw	r30, r14
    19ec:	82 a1       	ldd	r24, Z+34	; 0x22
    19ee:	8f 3f       	cpi	r24, 0xFF	; 255
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <xQueueGenericSend+0xc6>
    19f2:	12 a2       	std	Z+34, r1	; 0x22
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	be 01       	movw	r22, r28
    19fa:	6a 5f       	subi	r22, 0xFA	; 250
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	0e 94 2f 18 	call	0x305e	; 0x305e <xTaskCheckForTimeOut>
    1a06:	81 11       	cpse	r24, r1
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <xQueueGenericSend+0x118>
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	0f 92       	push	r0
    1a10:	f7 01       	movw	r30, r14
    1a12:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a14:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	98 13       	cpse	r25, r24
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <xQueueGenericSend+0x10e>
    1a1e:	4e 81       	ldd	r20, Y+6	; 0x06
    1a20:	5f 81       	ldd	r21, Y+7	; 0x07
    1a22:	68 85       	ldd	r22, Y+8	; 0x08
    1a24:	79 85       	ldd	r23, Y+9	; 0x09
    1a26:	c6 01       	movw	r24, r12
    1a28:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <vTaskPlaceOnEventList>
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	ce de       	rcall	.-612    	; 0x17cc <prvUnlockQueue>
    1a30:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
    1a34:	81 11       	cpse	r24, r1
    1a36:	9b cf       	rjmp	.-202    	; 0x196e <xQueueGenericSend+0x40>
    1a38:	7d dd       	rcall	.-1286   	; 0x1534 <vPortYield>
    1a3a:	99 cf       	rjmp	.-206    	; 0x196e <xQueueGenericSend+0x40>
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	c6 de       	rcall	.-628    	; 0x17cc <prvUnlockQueue>
    1a40:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
    1a44:	94 cf       	rjmp	.-216    	; 0x196e <xQueueGenericSend+0x40>
    1a46:	c7 01       	movw	r24, r14
    1a48:	c1 de       	rcall	.-638    	; 0x17cc <prvUnlockQueue>
    1a4a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskResumeAll>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	29 96       	adiw	r28, 0x09	; 9
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	bf 90       	pop	r11
    1a6e:	af 90       	pop	r10
    1a70:	9f 90       	pop	r9
    1a72:	08 95       	ret

00001a74 <xQueueGenericSendFromISR>:
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	8a 01       	movw	r16, r20
    1a82:	fc 01       	movw	r30, r24
    1a84:	56 8d       	ldd	r21, Z+30	; 0x1e
    1a86:	37 8d       	ldd	r19, Z+31	; 0x1f
    1a88:	53 17       	cp	r21, r19
    1a8a:	10 f0       	brcs	.+4      	; 0x1a90 <xQueueGenericSendFromISR+0x1c>
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	f9 f4       	brne	.+62     	; 0x1ace <xQueueGenericSendFromISR+0x5a>
    1a90:	42 2f       	mov	r20, r18
    1a92:	78 01       	movw	r14, r16
    1a94:	ec 01       	movw	r28, r24
    1a96:	1a a1       	ldd	r17, Y+34	; 0x22
    1a98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	1e de       	rcall	.-964    	; 0x16da <prvCopyDataToQueue>
    1a9e:	1f 3f       	cpi	r17, 0xFF	; 255
    1aa0:	81 f4       	brne	.+32     	; 0x1ac2 <xQueueGenericSendFromISR+0x4e>
    1aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa4:	88 23       	and	r24, r24
    1aa6:	a9 f0       	breq	.+42     	; 0x1ad2 <xQueueGenericSendFromISR+0x5e>
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	43 96       	adiw	r24, 0x13	; 19
    1aac:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    1ab0:	88 23       	and	r24, r24
    1ab2:	89 f0       	breq	.+34     	; 0x1ad6 <xQueueGenericSendFromISR+0x62>
    1ab4:	e1 14       	cp	r14, r1
    1ab6:	f1 04       	cpc	r15, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <xQueueGenericSendFromISR+0x66>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	f7 01       	movw	r30, r14
    1abe:	80 83       	st	Z, r24
    1ac0:	0d c0       	rjmp	.+26     	; 0x1adc <xQueueGenericSendFromISR+0x68>
    1ac2:	ff 24       	eor	r15, r15
    1ac4:	f3 94       	inc	r15
    1ac6:	f1 0e       	add	r15, r17
    1ac8:	fa a2       	std	Y+34, r15	; 0x22
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <xQueueGenericSendFromISR+0x68>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	05 c0       	rjmp	.+10     	; 0x1adc <xQueueGenericSendFromISR+0x68>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <xQueueGenericSendFromISR+0x68>
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <xQueueGenericSendFromISR+0x68>
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <xQueueReceive>:
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	29 97       	sbiw	r28, 0x09	; 9
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	8c 01       	movw	r16, r24
    1b12:	5b 01       	movw	r10, r22
    1b14:	2e 83       	std	Y+6, r18	; 0x06
    1b16:	3f 83       	std	Y+7, r19	; 0x07
    1b18:	48 87       	std	Y+8, r20	; 0x08
    1b1a:	59 87       	std	Y+9, r21	; 0x09
    1b1c:	e1 2c       	mov	r14, r1
    1b1e:	99 24       	eor	r9, r9
    1b20:	93 94       	inc	r9
    1b22:	6c 01       	movw	r12, r24
    1b24:	83 e1       	ldi	r24, 0x13	; 19
    1b26:	c8 0e       	add	r12, r24
    1b28:	d1 1c       	adc	r13, r1
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	0f 92       	push	r0
    1b30:	f8 01       	movw	r30, r16
    1b32:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1b34:	ff 20       	and	r15, r15
    1b36:	99 f0       	breq	.+38     	; 0x1b5e <xQueueReceive+0x74>
    1b38:	b5 01       	movw	r22, r10
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	2d de       	rcall	.-934    	; 0x1798 <prvCopyDataFromQueue>
    1b3e:	fa 94       	dec	r15
    1b40:	f8 01       	movw	r30, r16
    1b42:	f6 8e       	std	Z+30, r15	; 0x1e
    1b44:	80 85       	ldd	r24, Z+8	; 0x08
    1b46:	88 23       	and	r24, r24
    1b48:	31 f0       	breq	.+12     	; 0x1b56 <xQueueReceive+0x6c>
    1b4a:	c8 01       	movw	r24, r16
    1b4c:	08 96       	adiw	r24, 0x08	; 8
    1b4e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    1b52:	81 11       	cpse	r24, r1
    1b54:	ef dc       	rcall	.-1570   	; 0x1534 <vPortYield>
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	4d c0       	rjmp	.+154    	; 0x1bf8 <xQueueReceive+0x10e>
    1b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b60:	9f 81       	ldd	r25, Y+7	; 0x07
    1b62:	a8 85       	ldd	r26, Y+8	; 0x08
    1b64:	b9 85       	ldd	r27, Y+9	; 0x09
    1b66:	89 2b       	or	r24, r25
    1b68:	8a 2b       	or	r24, r26
    1b6a:	8b 2b       	or	r24, r27
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <xQueueReceive+0x8c>
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	41 c0       	rjmp	.+130    	; 0x1bf8 <xQueueReceive+0x10e>
    1b76:	e1 10       	cpse	r14, r1
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <xQueueReceive+0x9a>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	0e 94 1e 18 	call	0x303c	; 0x303c <vTaskInternalSetTimeOutState>
    1b82:	e9 2c       	mov	r14, r9
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	86 d6       	rcall	.+3340   	; 0x2896 <vTaskSuspendAll>
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	0f 92       	push	r0
    1b90:	f8 01       	movw	r30, r16
    1b92:	81 a1       	ldd	r24, Z+33	; 0x21
    1b94:	8f 3f       	cpi	r24, 0xFF	; 255
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <xQueueReceive+0xb0>
    1b98:	11 a2       	std	Z+33, r1	; 0x21
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	82 a1       	ldd	r24, Z+34	; 0x22
    1b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <xQueueReceive+0xba>
    1ba2:	12 a2       	std	Z+34, r1	; 0x22
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	be 01       	movw	r22, r28
    1baa:	6a 5f       	subi	r22, 0xFA	; 250
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	ce 01       	movw	r24, r28
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	0e 94 2f 18 	call	0x305e	; 0x305e <xTaskCheckForTimeOut>
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <xQueueReceive+0xfc>
    1bba:	c8 01       	movw	r24, r16
    1bbc:	83 dd       	rcall	.-1274   	; 0x16c4 <prvIsQueueEmpty>
    1bbe:	88 23       	and	r24, r24
    1bc0:	71 f0       	breq	.+28     	; 0x1bde <xQueueReceive+0xf4>
    1bc2:	4e 81       	ldd	r20, Y+6	; 0x06
    1bc4:	5f 81       	ldd	r21, Y+7	; 0x07
    1bc6:	68 85       	ldd	r22, Y+8	; 0x08
    1bc8:	79 85       	ldd	r23, Y+9	; 0x09
    1bca:	c6 01       	movw	r24, r12
    1bcc:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <vTaskPlaceOnEventList>
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	fc dd       	rcall	.-1032   	; 0x17cc <prvUnlockQueue>
    1bd4:	a4 d7       	rcall	.+3912   	; 0x2b1e <xTaskResumeAll>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	a8 cf       	rjmp	.-176    	; 0x1b2a <xQueueReceive+0x40>
    1bda:	ac dc       	rcall	.-1704   	; 0x1534 <vPortYield>
    1bdc:	a6 cf       	rjmp	.-180    	; 0x1b2a <xQueueReceive+0x40>
    1bde:	c8 01       	movw	r24, r16
    1be0:	f5 dd       	rcall	.-1046   	; 0x17cc <prvUnlockQueue>
    1be2:	9d d7       	rcall	.+3898   	; 0x2b1e <xTaskResumeAll>
    1be4:	a2 cf       	rjmp	.-188    	; 0x1b2a <xQueueReceive+0x40>
    1be6:	c8 01       	movw	r24, r16
    1be8:	f1 dd       	rcall	.-1054   	; 0x17cc <prvUnlockQueue>
    1bea:	99 d7       	rcall	.+3890   	; 0x2b1e <xTaskResumeAll>
    1bec:	c8 01       	movw	r24, r16
    1bee:	6a dd       	rcall	.-1324   	; 0x16c4 <prvIsQueueEmpty>
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <xQueueReceive+0x10c>
    1bf4:	9a cf       	rjmp	.-204    	; 0x1b2a <xQueueReceive+0x40>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	29 96       	adiw	r28, 0x09	; 9
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	bf 90       	pop	r11
    1c16:	af 90       	pop	r10
    1c18:	9f 90       	pop	r9
    1c1a:	08 95       	ret

00001c1c <xQueueSemaphoreTake>:
    1c1c:	bf 92       	push	r11
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	29 97       	sbiw	r28, 0x09	; 9
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	8c 01       	movw	r16, r24
    1c40:	4e 83       	std	Y+6, r20	; 0x06
    1c42:	5f 83       	std	Y+7, r21	; 0x07
    1c44:	68 87       	std	Y+8, r22	; 0x08
    1c46:	79 87       	std	Y+9, r23	; 0x09
    1c48:	b1 2c       	mov	r11, r1
    1c4a:	d1 2c       	mov	r13, r1
    1c4c:	cc 24       	eor	r12, r12
    1c4e:	c3 94       	inc	r12
    1c50:	7c 01       	movw	r14, r24
    1c52:	83 e1       	ldi	r24, 0x13	; 19
    1c54:	e8 0e       	add	r14, r24
    1c56:	f1 1c       	adc	r15, r1
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	0f 92       	push	r0
    1c5e:	d8 01       	movw	r26, r16
    1c60:	5e 96       	adiw	r26, 0x1e	; 30
    1c62:	8c 91       	ld	r24, X
    1c64:	5e 97       	sbiw	r26, 0x1e	; 30
    1c66:	88 23       	and	r24, r24
    1c68:	e1 f0       	breq	.+56     	; 0x1ca2 <xQueueSemaphoreTake+0x86>
    1c6a:	81 50       	subi	r24, 0x01	; 1
    1c6c:	5e 96       	adiw	r26, 0x1e	; 30
    1c6e:	8c 93       	st	X, r24
    1c70:	5e 97       	sbiw	r26, 0x1e	; 30
    1c72:	8d 91       	ld	r24, X+
    1c74:	9c 91       	ld	r25, X
    1c76:	89 2b       	or	r24, r25
    1c78:	29 f4       	brne	.+10     	; 0x1c84 <xQueueSemaphoreTake+0x68>
    1c7a:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <pvTaskIncrementMutexHeldCount>
    1c7e:	f8 01       	movw	r30, r16
    1c80:	95 83       	std	Z+5, r25	; 0x05
    1c82:	84 83       	std	Z+4, r24	; 0x04
    1c84:	d8 01       	movw	r26, r16
    1c86:	18 96       	adiw	r26, 0x08	; 8
    1c88:	8c 91       	ld	r24, X
    1c8a:	88 23       	and	r24, r24
    1c8c:	31 f0       	breq	.+12     	; 0x1c9a <xQueueSemaphoreTake+0x7e>
    1c8e:	c8 01       	movw	r24, r16
    1c90:	08 96       	adiw	r24, 0x08	; 8
    1c92:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskRemoveFromEventList>
    1c96:	81 11       	cpse	r24, r1
    1c98:	4d dc       	rcall	.-1894   	; 0x1534 <vPortYield>
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	7b c0       	rjmp	.+246    	; 0x1d98 <xQueueSemaphoreTake+0x17c>
    1ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca6:	a8 85       	ldd	r26, Y+8	; 0x08
    1ca8:	b9 85       	ldd	r27, Y+9	; 0x09
    1caa:	89 2b       	or	r24, r25
    1cac:	8a 2b       	or	r24, r26
    1cae:	8b 2b       	or	r24, r27
    1cb0:	21 f4       	brne	.+8      	; 0x1cba <xQueueSemaphoreTake+0x9e>
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	6f c0       	rjmp	.+222    	; 0x1d98 <xQueueSemaphoreTake+0x17c>
    1cba:	d1 10       	cpse	r13, r1
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <xQueueSemaphoreTake+0xac>
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	0e 94 1e 18 	call	0x303c	; 0x303c <vTaskInternalSetTimeOutState>
    1cc6:	dc 2c       	mov	r13, r12
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	e4 d5       	rcall	.+3016   	; 0x2896 <vTaskSuspendAll>
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	0f 92       	push	r0
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	81 a1       	ldd	r24, Z+33	; 0x21
    1cd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cda:	09 f4       	brne	.+2      	; 0x1cde <xQueueSemaphoreTake+0xc2>
    1cdc:	11 a2       	std	Z+33, r1	; 0x21
    1cde:	d8 01       	movw	r26, r16
    1ce0:	92 96       	adiw	r26, 0x22	; 34
    1ce2:	8c 91       	ld	r24, X
    1ce4:	92 97       	sbiw	r26, 0x22	; 34
    1ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <xQueueSemaphoreTake+0xd2>
    1cea:	92 96       	adiw	r26, 0x22	; 34
    1cec:	1c 92       	st	X, r1
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	be 01       	movw	r22, r28
    1cf4:	6a 5f       	subi	r22, 0xFA	; 250
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	0e 94 2f 18 	call	0x305e	; 0x305e <xTaskCheckForTimeOut>
    1d00:	81 11       	cpse	r24, r1
    1d02:	25 c0       	rjmp	.+74     	; 0x1d4e <xQueueSemaphoreTake+0x132>
    1d04:	c8 01       	movw	r24, r16
    1d06:	de dc       	rcall	.-1604   	; 0x16c4 <prvIsQueueEmpty>
    1d08:	88 23       	and	r24, r24
    1d0a:	e9 f0       	breq	.+58     	; 0x1d46 <xQueueSemaphoreTake+0x12a>
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	89 2b       	or	r24, r25
    1d14:	51 f4       	brne	.+20     	; 0x1d2a <xQueueSemaphoreTake+0x10e>
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	0f 92       	push	r0
    1d1c:	84 81       	ldd	r24, Z+4	; 0x04
    1d1e:	95 81       	ldd	r25, Z+5	; 0x05
    1d20:	0e 94 9f 18 	call	0x313e	; 0x313e <xTaskPriorityInherit>
    1d24:	b8 2e       	mov	r11, r24
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d2e:	68 85       	ldd	r22, Y+8	; 0x08
    1d30:	79 85       	ldd	r23, Y+9	; 0x09
    1d32:	c7 01       	movw	r24, r14
    1d34:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <vTaskPlaceOnEventList>
    1d38:	c8 01       	movw	r24, r16
    1d3a:	48 dd       	rcall	.-1392   	; 0x17cc <prvUnlockQueue>
    1d3c:	f0 d6       	rcall	.+3552   	; 0x2b1e <xTaskResumeAll>
    1d3e:	81 11       	cpse	r24, r1
    1d40:	8b cf       	rjmp	.-234    	; 0x1c58 <xQueueSemaphoreTake+0x3c>
    1d42:	f8 db       	rcall	.-2064   	; 0x1534 <vPortYield>
    1d44:	89 cf       	rjmp	.-238    	; 0x1c58 <xQueueSemaphoreTake+0x3c>
    1d46:	c8 01       	movw	r24, r16
    1d48:	41 dd       	rcall	.-1406   	; 0x17cc <prvUnlockQueue>
    1d4a:	e9 d6       	rcall	.+3538   	; 0x2b1e <xTaskResumeAll>
    1d4c:	85 cf       	rjmp	.-246    	; 0x1c58 <xQueueSemaphoreTake+0x3c>
    1d4e:	c8 01       	movw	r24, r16
    1d50:	3d dd       	rcall	.-1414   	; 0x17cc <prvUnlockQueue>
    1d52:	e5 d6       	rcall	.+3530   	; 0x2b1e <xTaskResumeAll>
    1d54:	c8 01       	movw	r24, r16
    1d56:	b6 dc       	rcall	.-1684   	; 0x16c4 <prvIsQueueEmpty>
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <xQueueSemaphoreTake+0x142>
    1d5c:	7d cf       	rjmp	.-262    	; 0x1c58 <xQueueSemaphoreTake+0x3c>
    1d5e:	bb 20       	and	r11, r11
    1d60:	d1 f0       	breq	.+52     	; 0x1d96 <xQueueSemaphoreTake+0x17a>
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	0f 92       	push	r0
    1d68:	f8 01       	movw	r30, r16
    1d6a:	83 89       	ldd	r24, Z+19	; 0x13
    1d6c:	88 23       	and	r24, r24
    1d6e:	39 f0       	breq	.+14     	; 0x1d7e <xQueueSemaphoreTake+0x162>
    1d70:	02 8c       	ldd	r0, Z+26	; 0x1a
    1d72:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1d74:	e0 2d       	mov	r30, r0
    1d76:	80 81       	ld	r24, Z
    1d78:	6a e0       	ldi	r22, 0x0A	; 10
    1d7a:	68 1b       	sub	r22, r24
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <xQueueSemaphoreTake+0x164>
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	d8 01       	movw	r26, r16
    1d82:	14 96       	adiw	r26, 0x04	; 4
    1d84:	8d 91       	ld	r24, X+
    1d86:	9c 91       	ld	r25, X
    1d88:	15 97       	sbiw	r26, 0x05	; 5
    1d8a:	0e 94 81 19 	call	0x3302	; 0x3302 <vTaskPriorityDisinheritAfterTimeout>
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <xQueueSemaphoreTake+0x17c>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	29 96       	adiw	r28, 0x09	; 9
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	08 95       	ret

00001db8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	0f 92       	push	r0
    1dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <vQueueWaitForMessageRestricted+0x14>
    1dca:	19 a2       	std	Y+33, r1	; 0x21
    1dcc:	8a a1       	ldd	r24, Y+34	; 0x22
    1dce:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <vQueueWaitForMessageRestricted+0x1c>
    1dd2:	1a a2       	std	Y+34, r1	; 0x22
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1dd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dda:	81 11       	cpse	r24, r1
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1dde:	ce 01       	movw	r24, r28
    1de0:	43 96       	adiw	r24, 0x13	; 19
    1de2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1de6:	ce 01       	movw	r24, r28
    1de8:	f1 dc       	rcall	.-1566   	; 0x17cc <prvUnlockQueue>
    }
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1df0:	fc 01       	movw	r30, r24
    1df2:	44 81       	ldd	r20, Z+4	; 0x04
    1df4:	55 81       	ldd	r21, Z+5	; 0x05
    1df6:	22 81       	ldd	r18, Z+2	; 0x02
    1df8:	33 81       	ldd	r19, Z+3	; 0x03
    1dfa:	24 0f       	add	r18, r20
    1dfc:	35 1f       	adc	r19, r21
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	b9 01       	movw	r22, r18
    1e04:	68 1b       	sub	r22, r24
    1e06:	79 0b       	sbc	r23, r25
    1e08:	cb 01       	movw	r24, r22
    1e0a:	64 17       	cp	r22, r20
    1e0c:	75 07       	cpc	r23, r21
    1e0e:	10 f0       	brcs	.+4      	; 0x1e14 <prvBytesInBuffer+0x24>
    1e10:	84 1b       	sub	r24, r20
    1e12:	95 0b       	sbc	r25, r21
    1e14:	08 95       	ret

00001e16 <prvWriteBytesToBuffer>:
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	6c 01       	movw	r12, r24
    1e2c:	5b 01       	movw	r10, r22
    1e2e:	7a 01       	movw	r14, r20
    1e30:	fc 01       	movw	r30, r24
    1e32:	c2 81       	ldd	r28, Z+2	; 0x02
    1e34:	d3 81       	ldd	r29, Z+3	; 0x03
    1e36:	04 81       	ldd	r16, Z+4	; 0x04
    1e38:	15 81       	ldd	r17, Z+5	; 0x05
    1e3a:	0c 1b       	sub	r16, r28
    1e3c:	1d 0b       	sbc	r17, r29
    1e3e:	40 17       	cp	r20, r16
    1e40:	51 07       	cpc	r21, r17
    1e42:	08 f4       	brcc	.+2      	; 0x1e46 <prvWriteBytesToBuffer+0x30>
    1e44:	8a 01       	movw	r16, r20
    1e46:	f6 01       	movw	r30, r12
    1e48:	84 85       	ldd	r24, Z+12	; 0x0c
    1e4a:	95 85       	ldd	r25, Z+13	; 0x0d
    1e4c:	a8 01       	movw	r20, r16
    1e4e:	b5 01       	movw	r22, r10
    1e50:	8c 0f       	add	r24, r28
    1e52:	9d 1f       	adc	r25, r29
    1e54:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <memcpy>
    1e58:	0e 15       	cp	r16, r14
    1e5a:	1f 05       	cpc	r17, r15
    1e5c:	58 f4       	brcc	.+22     	; 0x1e74 <prvWriteBytesToBuffer+0x5e>
    1e5e:	a7 01       	movw	r20, r14
    1e60:	40 1b       	sub	r20, r16
    1e62:	51 0b       	sbc	r21, r17
    1e64:	b5 01       	movw	r22, r10
    1e66:	60 0f       	add	r22, r16
    1e68:	71 1f       	adc	r23, r17
    1e6a:	f6 01       	movw	r30, r12
    1e6c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e6e:	95 85       	ldd	r25, Z+13	; 0x0d
    1e70:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <memcpy>
    1e74:	ce 01       	movw	r24, r28
    1e76:	8e 0d       	add	r24, r14
    1e78:	9f 1d       	adc	r25, r15
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	24 81       	ldd	r18, Z+4	; 0x04
    1e7e:	35 81       	ldd	r19, Z+5	; 0x05
    1e80:	82 17       	cp	r24, r18
    1e82:	93 07       	cpc	r25, r19
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <prvWriteBytesToBuffer+0x74>
    1e86:	82 1b       	sub	r24, r18
    1e88:	93 0b       	sbc	r25, r19
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	93 83       	std	Z+3, r25	; 0x03
    1e8e:	82 83       	std	Z+2, r24	; 0x02
    1e90:	c7 01       	movw	r24, r14
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	08 95       	ret

00001ea8 <prvWriteMessageToBuffer>:
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	1f 92       	push	r1
    1eba:	1f 92       	push	r1
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	5a 83       	std	Y+2, r21	; 0x02
    1ec2:	49 83       	std	Y+1, r20	; 0x01
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	c9 f0       	breq	.+50     	; 0x1efc <prvWriteMessageToBuffer+0x54>
    1eca:	6b 01       	movw	r12, r22
    1ecc:	7c 01       	movw	r14, r24
    1ece:	fc 01       	movw	r30, r24
    1ed0:	86 85       	ldd	r24, Z+14	; 0x0e
    1ed2:	80 fd       	sbrc	r24, 0
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <prvWriteMessageToBuffer+0x3e>
    1ed6:	ca 01       	movw	r24, r20
    1ed8:	24 17       	cp	r18, r20
    1eda:	35 07       	cpc	r19, r21
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <prvWriteMessageToBuffer+0x38>
    1ede:	c9 01       	movw	r24, r18
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	11 c0       	rjmp	.+34     	; 0x1f08 <prvWriteMessageToBuffer+0x60>
    1ee6:	20 17       	cp	r18, r16
    1ee8:	31 07       	cpc	r19, r17
    1eea:	58 f0       	brcs	.+22     	; 0x1f02 <prvWriteMessageToBuffer+0x5a>
    1eec:	42 e0       	ldi	r20, 0x02	; 2
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	be 01       	movw	r22, r28
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	c7 01       	movw	r24, r14
    1ef8:	8e df       	rcall	.-228    	; 0x1e16 <prvWriteBytesToBuffer>
    1efa:	06 c0       	rjmp	.+12     	; 0x1f08 <prvWriteMessageToBuffer+0x60>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	08 c0       	rjmp	.+16     	; 0x1f12 <prvWriteMessageToBuffer+0x6a>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <prvWriteMessageToBuffer+0x6a>
    1f08:	49 81       	ldd	r20, Y+1	; 0x01
    1f0a:	5a 81       	ldd	r21, Y+2	; 0x02
    1f0c:	b6 01       	movw	r22, r12
    1f0e:	c7 01       	movw	r24, r14
    1f10:	82 df       	rcall	.-252    	; 0x1e16 <prvWriteBytesToBuffer>
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	08 95       	ret

00001f28 <prvReadBytesFromBuffer>:
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	5b 01       	movw	r10, r22
    1f40:	e9 01       	movw	r28, r18
    1f42:	42 17       	cp	r20, r18
    1f44:	53 07       	cpc	r21, r19
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <prvReadBytesFromBuffer+0x22>
    1f48:	ea 01       	movw	r28, r20
    1f4a:	20 97       	sbiw	r28, 0x00	; 0
    1f4c:	79 f1       	breq	.+94     	; 0x1fac <prvReadBytesFromBuffer+0x84>
    1f4e:	f7 01       	movw	r30, r14
    1f50:	00 81       	ld	r16, Z
    1f52:	11 81       	ldd	r17, Z+1	; 0x01
    1f54:	c4 80       	ldd	r12, Z+4	; 0x04
    1f56:	d5 80       	ldd	r13, Z+5	; 0x05
    1f58:	c0 1a       	sub	r12, r16
    1f5a:	d1 0a       	sbc	r13, r17
    1f5c:	cc 15       	cp	r28, r12
    1f5e:	dd 05       	cpc	r29, r13
    1f60:	08 f4       	brcc	.+2      	; 0x1f64 <prvReadBytesFromBuffer+0x3c>
    1f62:	6e 01       	movw	r12, r28
    1f64:	f7 01       	movw	r30, r14
    1f66:	64 85       	ldd	r22, Z+12	; 0x0c
    1f68:	75 85       	ldd	r23, Z+13	; 0x0d
    1f6a:	60 0f       	add	r22, r16
    1f6c:	71 1f       	adc	r23, r17
    1f6e:	a6 01       	movw	r20, r12
    1f70:	c5 01       	movw	r24, r10
    1f72:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <memcpy>
    1f76:	cc 16       	cp	r12, r28
    1f78:	dd 06       	cpc	r13, r29
    1f7a:	58 f4       	brcc	.+22     	; 0x1f92 <prvReadBytesFromBuffer+0x6a>
    1f7c:	ae 01       	movw	r20, r28
    1f7e:	4c 19       	sub	r20, r12
    1f80:	5d 09       	sbc	r21, r13
    1f82:	f7 01       	movw	r30, r14
    1f84:	64 85       	ldd	r22, Z+12	; 0x0c
    1f86:	75 85       	ldd	r23, Z+13	; 0x0d
    1f88:	c5 01       	movw	r24, r10
    1f8a:	8c 0d       	add	r24, r12
    1f8c:	9d 1d       	adc	r25, r13
    1f8e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <memcpy>
    1f92:	0c 0f       	add	r16, r28
    1f94:	1d 1f       	adc	r17, r29
    1f96:	f7 01       	movw	r30, r14
    1f98:	84 81       	ldd	r24, Z+4	; 0x04
    1f9a:	95 81       	ldd	r25, Z+5	; 0x05
    1f9c:	08 17       	cp	r16, r24
    1f9e:	19 07       	cpc	r17, r25
    1fa0:	10 f0       	brcs	.+4      	; 0x1fa6 <prvReadBytesFromBuffer+0x7e>
    1fa2:	08 1b       	sub	r16, r24
    1fa4:	19 0b       	sbc	r17, r25
    1fa6:	f7 01       	movw	r30, r14
    1fa8:	11 83       	std	Z+1, r17	; 0x01
    1faa:	00 83       	st	Z, r16
    1fac:	ce 01       	movw	r24, r28
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	08 95       	ret

00001fc4 <xStreamBufferGenericCreate>:
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	8b 01       	movw	r16, r22
    1fd0:	ff 24       	eor	r15, r15
    1fd2:	f3 94       	inc	r15
    1fd4:	41 30       	cpi	r20, 0x01	; 1
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <xStreamBufferGenericCreate+0x16>
    1fd8:	f1 2c       	mov	r15, r1
    1fda:	01 15       	cp	r16, r1
    1fdc:	11 05       	cpc	r17, r1
    1fde:	11 f4       	brne	.+4      	; 0x1fe4 <xStreamBufferGenericCreate+0x20>
    1fe0:	01 e0       	ldi	r16, 0x01	; 1
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
    1fe4:	9c 01       	movw	r18, r24
    1fe6:	20 5f       	subi	r18, 0xF0	; 240
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	82 17       	cp	r24, r18
    1fec:	93 07       	cpc	r25, r19
    1fee:	b0 f4       	brcc	.+44     	; 0x201c <xStreamBufferGenericCreate+0x58>
    1ff0:	ec 01       	movw	r28, r24
    1ff2:	21 96       	adiw	r28, 0x01	; 1
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	d0 d8       	rcall	.-3680   	; 0x1198 <pvPortMalloc>
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	89 2b       	or	r24, r25
    1ffc:	89 f0       	breq	.+34     	; 0x2020 <xStreamBufferGenericCreate+0x5c>
    1ffe:	8f e0       	ldi	r24, 0x0F	; 15
    2000:	df 01       	movw	r26, r30
    2002:	1d 92       	st	X+, r1
    2004:	8a 95       	dec	r24
    2006:	e9 f7       	brne	.-6      	; 0x2002 <xStreamBufferGenericCreate+0x3e>
    2008:	cf 01       	movw	r24, r30
    200a:	0f 96       	adiw	r24, 0x0f	; 15
    200c:	95 87       	std	Z+13, r25	; 0x0d
    200e:	84 87       	std	Z+12, r24	; 0x0c
    2010:	d5 83       	std	Z+5, r29	; 0x05
    2012:	c4 83       	std	Z+4, r28	; 0x04
    2014:	17 83       	std	Z+7, r17	; 0x07
    2016:	06 83       	std	Z+6, r16	; 0x06
    2018:	f6 86       	std	Z+14, r15	; 0x0e
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <xStreamBufferGenericCreate+0x5c>
    201c:	e0 e0       	ldi	r30, 0x00	; 0
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	cf 01       	movw	r24, r30
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	08 95       	ret

0000202e <xStreamBufferReset>:
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	0f 92       	push	r0
    2034:	dc 01       	movw	r26, r24
    2036:	18 96       	adiw	r26, 0x08	; 8
    2038:	2d 91       	ld	r18, X+
    203a:	3c 91       	ld	r19, X
    203c:	19 97       	sbiw	r26, 0x09	; 9
    203e:	23 2b       	or	r18, r19
    2040:	51 f5       	brne	.+84     	; 0x2096 <xStreamBufferReset+0x68>
    2042:	1a 96       	adiw	r26, 0x0a	; 10
    2044:	2d 91       	ld	r18, X+
    2046:	3c 91       	ld	r19, X
    2048:	1b 97       	sbiw	r26, 0x0b	; 11
    204a:	23 2b       	or	r18, r19
    204c:	31 f5       	brne	.+76     	; 0x209a <xStreamBufferReset+0x6c>
    204e:	1e 96       	adiw	r26, 0x0e	; 14
    2050:	2c 91       	ld	r18, X
    2052:	1e 97       	sbiw	r26, 0x0e	; 14
    2054:	16 96       	adiw	r26, 0x06	; 6
    2056:	4d 91       	ld	r20, X+
    2058:	5c 91       	ld	r21, X
    205a:	17 97       	sbiw	r26, 0x07	; 7
    205c:	14 96       	adiw	r26, 0x04	; 4
    205e:	6d 91       	ld	r22, X+
    2060:	7c 91       	ld	r23, X
    2062:	15 97       	sbiw	r26, 0x05	; 5
    2064:	1c 96       	adiw	r26, 0x0c	; 12
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	1d 97       	sbiw	r26, 0x0d	; 13
    206c:	3f e0       	ldi	r19, 0x0F	; 15
    206e:	1d 92       	st	X+, r1
    2070:	3a 95       	dec	r19
    2072:	e9 f7       	brne	.-6      	; 0x206e <xStreamBufferReset+0x40>
    2074:	dc 01       	movw	r26, r24
    2076:	1d 96       	adiw	r26, 0x0d	; 13
    2078:	fc 93       	st	X, r31
    207a:	ee 93       	st	-X, r30
    207c:	1c 97       	sbiw	r26, 0x0c	; 12
    207e:	15 96       	adiw	r26, 0x05	; 5
    2080:	7c 93       	st	X, r23
    2082:	6e 93       	st	-X, r22
    2084:	14 97       	sbiw	r26, 0x04	; 4
    2086:	17 96       	adiw	r26, 0x07	; 7
    2088:	5c 93       	st	X, r21
    208a:	4e 93       	st	-X, r20
    208c:	16 97       	sbiw	r26, 0x06	; 6
    208e:	1e 96       	adiw	r26, 0x0e	; 14
    2090:	2c 93       	st	X, r18
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	03 c0       	rjmp	.+6      	; 0x209c <xStreamBufferReset+0x6e>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	01 c0       	rjmp	.+2      	; 0x209c <xStreamBufferReset+0x6e>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	0f 90       	pop	r0
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	08 95       	ret

000020a2 <xStreamBufferSpacesAvailable>:
    20a2:	fc 01       	movw	r30, r24
    20a4:	24 81       	ldd	r18, Z+4	; 0x04
    20a6:	35 81       	ldd	r19, Z+5	; 0x05
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	42 81       	ldd	r20, Z+2	; 0x02
    20ae:	53 81       	ldd	r21, Z+3	; 0x03
    20b0:	82 0f       	add	r24, r18
    20b2:	93 1f       	adc	r25, r19
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	84 1b       	sub	r24, r20
    20b8:	95 0b       	sbc	r25, r21
    20ba:	82 17       	cp	r24, r18
    20bc:	93 07       	cpc	r25, r19
    20be:	10 f0       	brcs	.+4      	; 0x20c4 <xStreamBufferSpacesAvailable+0x22>
    20c0:	82 1b       	sub	r24, r18
    20c2:	93 0b       	sbc	r25, r19
    20c4:	08 95       	ret

000020c6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    20c6:	2f 92       	push	r2
    20c8:	3f 92       	push	r3
    20ca:	4f 92       	push	r4
    20cc:	5f 92       	push	r5
    20ce:	6f 92       	push	r6
    20d0:	7f 92       	push	r7
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	2b 97       	sbiw	r28, 0x0b	; 11
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	4c 01       	movw	r8, r24
    20fc:	7b 87       	std	Y+11, r23	; 0x0b
    20fe:	6a 87       	std	Y+10, r22	; 0x0a
    2100:	1a 01       	movw	r2, r20
    2102:	0e 83       	std	Y+6, r16	; 0x06
    2104:	1f 83       	std	Y+7, r17	; 0x07
    2106:	28 87       	std	Y+8, r18	; 0x08
    2108:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    210a:	fc 01       	movw	r30, r24
    210c:	84 81       	ldd	r24, Z+4	; 0x04
    210e:	95 81       	ldd	r25, Z+5	; 0x05
    2110:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2112:	26 85       	ldd	r18, Z+14	; 0x0e
    2114:	20 ff       	sbrs	r18, 0
    2116:	0c c0       	rjmp	.+24     	; 0x2130 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2118:	2a 01       	movw	r4, r20
    211a:	f2 e0       	ldi	r31, 0x02	; 2
    211c:	4f 0e       	add	r4, r31
    211e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    2120:	84 15       	cp	r24, r4
    2122:	95 05       	cpc	r25, r5
    2124:	50 f4       	brcc	.+20     	; 0x213a <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2126:	1e 82       	std	Y+6, r1	; 0x06
    2128:	1f 82       	std	Y+7, r1	; 0x07
    212a:	18 86       	std	Y+8, r1	; 0x08
    212c:	19 86       	std	Y+9, r1	; 0x09
    212e:	45 c0       	rjmp	.+138    	; 0x21ba <xStreamBufferSend+0xf4>
    2130:	2a 01       	movw	r4, r20
    2132:	84 17       	cp	r24, r20
    2134:	95 07       	cpc	r25, r21
    2136:	08 f4       	brcc	.+2      	; 0x213a <xStreamBufferSend+0x74>
    2138:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    213a:	8e 81       	ldd	r24, Y+6	; 0x06
    213c:	9f 81       	ldd	r25, Y+7	; 0x07
    213e:	a8 85       	ldd	r26, Y+8	; 0x08
    2140:	b9 85       	ldd	r27, Y+9	; 0x09
    2142:	89 2b       	or	r24, r25
    2144:	8a 2b       	or	r24, r26
    2146:	8b 2b       	or	r24, r27
    2148:	09 f4       	brne	.+2      	; 0x214c <xStreamBufferSend+0x86>
    214a:	37 c0       	rjmp	.+110    	; 0x21ba <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    214c:	ce 01       	movw	r24, r28
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	5f d7       	rcall	.+3774   	; 0x3010 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2158:	c4 01       	movw	r24, r8
    215a:	a3 df       	rcall	.-186    	; 0x20a2 <xStreamBufferSpacesAvailable>
    215c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    215e:	84 15       	cp	r24, r4
    2160:	95 05       	cpc	r25, r5
    2162:	30 f5       	brcc	.+76     	; 0x21b0 <xStreamBufferSend+0xea>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    216e:	d4 d7       	rcall	.+4008   	; 0x3118 <xTaskGetCurrentTaskHandle>
    2170:	f4 01       	movw	r30, r8
    2172:	93 87       	std	Z+11, r25	; 0x0b
    2174:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2176:	0f 90       	pop	r0
    2178:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    217a:	ae 80       	ldd	r10, Y+6	; 0x06
    217c:	bf 80       	ldd	r11, Y+7	; 0x07
    217e:	c8 84       	ldd	r12, Y+8	; 0x08
    2180:	d9 84       	ldd	r13, Y+9	; 0x09
    2182:	e1 2c       	mov	r14, r1
    2184:	f1 2c       	mov	r15, r1
    2186:	00 e0       	ldi	r16, 0x00	; 0
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	98 01       	movw	r18, r16
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	ba 01       	movw	r22, r20
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2198:	f4 01       	movw	r30, r8
    219a:	13 86       	std	Z+11, r1	; 0x0b
    219c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    219e:	be 01       	movw	r22, r28
    21a0:	6a 5f       	subi	r22, 0xFA	; 250
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	ce 01       	movw	r24, r28
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	5a d7       	rcall	.+3764   	; 0x305e <xTaskCheckForTimeOut>
    21aa:	88 23       	and	r24, r24
    21ac:	91 f2       	breq	.-92     	; 0x2152 <xStreamBufferSend+0x8c>
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <xStreamBufferSend+0xee>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    21b4:	61 14       	cp	r6, r1
    21b6:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21b8:	19 f4       	brne	.+6      	; 0x21c0 <xStreamBufferSend+0xfa>
    21ba:	c4 01       	movw	r24, r8
    21bc:	72 df       	rcall	.-284    	; 0x20a2 <xStreamBufferSpacesAvailable>
    21be:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    21c0:	82 01       	movw	r16, r4
    21c2:	93 01       	movw	r18, r6
    21c4:	a1 01       	movw	r20, r2
    21c6:	6a 85       	ldd	r22, Y+10	; 0x0a
    21c8:	7b 85       	ldd	r23, Y+11	; 0x0b
    21ca:	c4 01       	movw	r24, r8
    21cc:	6d de       	rcall	.-806    	; 0x1ea8 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    21ce:	6c 01       	movw	r12, r24
    21d0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    21d2:	e9 f0       	breq	.+58     	; 0x220e <__stack+0xf>
    21d4:	c4 01       	movw	r24, r8
    21d6:	0c de       	rcall	.-1000   	; 0x1df0 <prvBytesInBuffer>
    21d8:	f4 01       	movw	r30, r8
    21da:	26 81       	ldd	r18, Z+6	; 0x06
    21dc:	37 81       	ldd	r19, Z+7	; 0x07
    21de:	82 17       	cp	r24, r18
    21e0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    21e2:	a8 f0       	brcs	.+42     	; 0x220e <__stack+0xf>
    21e4:	58 d3       	rcall	.+1712   	; 0x2896 <vTaskSuspendAll>
    21e6:	f4 01       	movw	r30, r8
    21e8:	80 85       	ldd	r24, Z+8	; 0x08
    21ea:	91 85       	ldd	r25, Z+9	; 0x09
    21ec:	89 2b       	or	r24, r25
    21ee:	71 f0       	breq	.+28     	; 0x220c <__stack+0xd>
    21f0:	80 85       	ldd	r24, Z+8	; 0x08
    21f2:	91 85       	ldd	r25, Z+9	; 0x09
    21f4:	e1 2c       	mov	r14, r1
    21f6:	f1 2c       	mov	r15, r1
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	a9 01       	movw	r20, r18
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	0e 94 a2 1a 	call	0x3544	; 0x3544 <xTaskGenericNotify>
    2206:	f4 01       	movw	r30, r8
    2208:	11 86       	std	Z+9, r1	; 0x09
    220a:	10 86       	std	Z+8, r1	; 0x08
    220c:	88 d4       	rcall	.+2320   	; 0x2b1e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    220e:	c6 01       	movw	r24, r12
    2210:	2b 96       	adiw	r28, 0x0b	; 11
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	df 90       	pop	r13
    222a:	cf 90       	pop	r12
    222c:	bf 90       	pop	r11
    222e:	af 90       	pop	r10
    2230:	9f 90       	pop	r9
    2232:	8f 90       	pop	r8
    2234:	7f 90       	pop	r7
    2236:	6f 90       	pop	r6
    2238:	5f 90       	pop	r5
    223a:	4f 90       	pop	r4
    223c:	3f 90       	pop	r3
    223e:	2f 90       	pop	r2
    2240:	08 95       	ret

00002242 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2242:	af 92       	push	r10
    2244:	bf 92       	push	r11
    2246:	cf 92       	push	r12
    2248:	df 92       	push	r13
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	ec 01       	movw	r28, r24
    2258:	7b 01       	movw	r14, r22
    225a:	5a 01       	movw	r10, r20
    225c:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    225e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2260:	80 ff       	sbrs	r24, 0
    2262:	04 c0       	rjmp	.+8      	; 0x226c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2264:	8a 01       	movw	r16, r20
    2266:	0e 5f       	subi	r16, 0xFE	; 254
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	01 c0       	rjmp	.+2      	; 0x226e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    226c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    226e:	ce 01       	movw	r24, r28
    2270:	18 df       	rcall	.-464    	; 0x20a2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2272:	9c 01       	movw	r18, r24
    2274:	a5 01       	movw	r20, r10
    2276:	b7 01       	movw	r22, r14
    2278:	ce 01       	movw	r24, r28
    227a:	16 de       	rcall	.-980    	; 0x1ea8 <prvWriteMessageToBuffer>
    227c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    227e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2280:	c1 f0       	breq	.+48     	; 0x22b2 <xStreamBufferSendFromISR+0x70>
    2282:	ce 01       	movw	r24, r28
    2284:	b5 dd       	rcall	.-1174   	; 0x1df0 <prvBytesInBuffer>
    2286:	2e 81       	ldd	r18, Y+6	; 0x06
    2288:	3f 81       	ldd	r19, Y+7	; 0x07
    228a:	82 17       	cp	r24, r18
    228c:	93 07       	cpc	r25, r19
    228e:	88 f0       	brcs	.+34     	; 0x22b2 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2290:	88 85       	ldd	r24, Y+8	; 0x08
    2292:	99 85       	ldd	r25, Y+9	; 0x09
    2294:	89 2b       	or	r24, r25
    2296:	69 f0       	breq	.+26     	; 0x22b2 <xStreamBufferSendFromISR+0x70>
    2298:	88 85       	ldd	r24, Y+8	; 0x08
    229a:	99 85       	ldd	r25, Y+9	; 0x09
    229c:	e1 2c       	mov	r14, r1
    229e:	f1 2c       	mov	r15, r1
    22a0:	00 e0       	ldi	r16, 0x00	; 0
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	a9 01       	movw	r20, r18
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	0e 94 96 1b 	call	0x372c	; 0x372c <xTaskGenericNotifyFromISR>
    22ae:	19 86       	std	Y+9, r1	; 0x09
    22b0:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    22b2:	c5 01       	movw	r24, r10
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
    22c4:	bf 90       	pop	r11
    22c6:	af 90       	pop	r10
    22c8:	08 95       	ret

000022ca <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	1f 92       	push	r1
    22f0:	1f 92       	push	r1
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	4c 01       	movw	r8, r24
    22f8:	1b 01       	movw	r2, r22
    22fa:	2a 01       	movw	r4, r20
    22fc:	58 01       	movw	r10, r16
    22fe:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2300:	fc 01       	movw	r30, r24
    2302:	86 85       	ldd	r24, Z+14	; 0x0e
    2304:	80 fd       	sbrc	r24, 0
    2306:	03 c0       	rjmp	.+6      	; 0x230e <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2308:	61 2c       	mov	r6, r1
    230a:	71 2c       	mov	r7, r1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    230e:	68 94       	set
    2310:	66 24       	eor	r6, r6
    2312:	61 f8       	bld	r6, 1
    2314:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2316:	a1 14       	cp	r10, r1
    2318:	b1 04       	cpc	r11, r1
    231a:	c1 04       	cpc	r12, r1
    231c:	d1 04       	cpc	r13, r1
    231e:	49 f1       	breq	.+82     	; 0x2372 <xStreamBufferReceive+0xa8>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2326:	c4 01       	movw	r24, r8
    2328:	63 dd       	rcall	.-1338   	; 0x1df0 <prvBytesInBuffer>
    232a:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    232c:	68 16       	cp	r6, r24
    232e:	79 06       	cpc	r7, r25
    2330:	48 f0       	brcs	.+18     	; 0x2344 <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 94 b4 1c 	call	0x3968	; 0x3968 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    233c:	ed d6       	rcall	.+3546   	; 0x3118 <xTaskGetCurrentTaskHandle>
    233e:	f4 01       	movw	r30, r8
    2340:	91 87       	std	Z+9, r25	; 0x09
    2342:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2348:	60 16       	cp	r6, r16
    234a:	71 06       	cpc	r7, r17
    234c:	c0 f0       	brcs	.+48     	; 0x237e <xStreamBufferReceive+0xb4>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    234e:	e1 2c       	mov	r14, r1
    2350:	f1 2c       	mov	r15, r1
    2352:	00 e0       	ldi	r16, 0x00	; 0
    2354:	10 e0       	ldi	r17, 0x00	; 0
    2356:	98 01       	movw	r18, r16
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	ba 01       	movw	r22, r20
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2364:	f4 01       	movw	r30, r8
    2366:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2368:	10 86       	std	Z+8, r1	; 0x08
    236a:	c4 01       	movw	r24, r8
    236c:	41 dd       	rcall	.-1406   	; 0x1df0 <prvBytesInBuffer>
    236e:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <xStreamBufferReceive+0xae>
    2372:	c4 01       	movw	r24, r8
    2374:	3d dd       	rcall	.-1414   	; 0x1df0 <prvBytesInBuffer>
    2376:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2378:	60 16       	cp	r6, r16
    237a:	71 06       	cpc	r7, r17
    237c:	c8 f5       	brcc	.+114    	; 0x23f0 <xStreamBufferReceive+0x126>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    237e:	61 14       	cp	r6, r1
    2380:	71 04       	cpc	r7, r1
    2382:	c1 f0       	breq	.+48     	; 0x23b4 <xStreamBufferReceive+0xea>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2384:	f4 01       	movw	r30, r8
    2386:	c0 80       	ld	r12, Z
    2388:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    238a:	98 01       	movw	r18, r16
    238c:	a3 01       	movw	r20, r6
    238e:	be 01       	movw	r22, r28
    2390:	6f 5f       	subi	r22, 0xFF	; 255
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	c4 01       	movw	r24, r8
    2396:	c8 dd       	rcall	.-1136   	; 0x1f28 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    239c:	06 19       	sub	r16, r6
    239e:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    23a0:	48 16       	cp	r4, r24
    23a2:	59 06       	cpc	r5, r25
    23a4:	30 f4       	brcc	.+12     	; 0x23b2 <xStreamBufferReceive+0xe8>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    23a6:	f4 01       	movw	r30, r8
    23a8:	d1 82       	std	Z+1, r13	; 0x01
    23aa:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    23ac:	41 2c       	mov	r4, r1
    23ae:	51 2c       	mov	r5, r1
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <xStreamBufferReceive+0xea>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    23b2:	2c 01       	movw	r4, r24
    23b4:	98 01       	movw	r18, r16
    23b6:	a2 01       	movw	r20, r4
    23b8:	b1 01       	movw	r22, r2
    23ba:	c4 01       	movw	r24, r8
    23bc:	b5 dd       	rcall	.-1174   	; 0x1f28 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    23be:	6c 01       	movw	r12, r24
    23c0:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    23c2:	c1 f0       	breq	.+48     	; 0x23f4 <xStreamBufferReceive+0x12a>
    23c4:	68 d2       	rcall	.+1232   	; 0x2896 <vTaskSuspendAll>
    23c6:	f4 01       	movw	r30, r8
    23c8:	82 85       	ldd	r24, Z+10	; 0x0a
    23ca:	93 85       	ldd	r25, Z+11	; 0x0b
    23cc:	89 2b       	or	r24, r25
    23ce:	71 f0       	breq	.+28     	; 0x23ec <xStreamBufferReceive+0x122>
    23d0:	82 85       	ldd	r24, Z+10	; 0x0a
    23d2:	93 85       	ldd	r25, Z+11	; 0x0b
    23d4:	e1 2c       	mov	r14, r1
    23d6:	f1 2c       	mov	r15, r1
    23d8:	00 e0       	ldi	r16, 0x00	; 0
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	a9 01       	movw	r20, r18
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <xTaskGenericNotify>
    23e6:	f4 01       	movw	r30, r8
    23e8:	13 86       	std	Z+11, r1	; 0x0b
    23ea:	12 86       	std	Z+10, r1	; 0x0a
    23ec:	98 d3       	rcall	.+1840   	; 0x2b1e <xTaskResumeAll>
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <xStreamBufferReceive+0x12a>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    23f0:	c1 2c       	mov	r12, r1
    23f2:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    23f4:	c6 01       	movw	r24, r12
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	bf 90       	pop	r11
    240c:	af 90       	pop	r10
    240e:	9f 90       	pop	r9
    2410:	8f 90       	pop	r8
    2412:	7f 90       	pop	r7
    2414:	6f 90       	pop	r6
    2416:	5f 90       	pop	r5
    2418:	4f 90       	pop	r4
    241a:	3f 90       	pop	r3
    241c:	2f 90       	pop	r2
    241e:	08 95       	ret

00002420 <prvResetNextTaskUnblockTime>:
    2420:	e0 91 a9 12 	lds	r30, 0x12A9	; 0x8012a9 <pxDelayedTaskList>
    2424:	f0 91 aa 12 	lds	r31, 0x12AA	; 0x8012aa <pxDelayedTaskList+0x1>
    2428:	80 81       	ld	r24, Z
    242a:	81 11       	cpse	r24, r1
    242c:	0c c0       	rjmp	.+24     	; 0x2446 <prvResetNextTaskUnblockTime+0x26>
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	9f ef       	ldi	r25, 0xFF	; 255
    2432:	dc 01       	movw	r26, r24
    2434:	80 93 73 12 	sts	0x1273, r24	; 0x801273 <xNextTaskUnblockTime>
    2438:	90 93 74 12 	sts	0x1274, r25	; 0x801274 <xNextTaskUnblockTime+0x1>
    243c:	a0 93 75 12 	sts	0x1275, r26	; 0x801275 <xNextTaskUnblockTime+0x2>
    2440:	b0 93 76 12 	sts	0x1276, r27	; 0x801276 <xNextTaskUnblockTime+0x3>
    2444:	08 95       	ret
    2446:	e0 91 a9 12 	lds	r30, 0x12A9	; 0x8012a9 <pxDelayedTaskList>
    244a:	f0 91 aa 12 	lds	r31, 0x12AA	; 0x8012aa <pxDelayedTaskList+0x1>
    244e:	07 80       	ldd	r0, Z+7	; 0x07
    2450:	f0 85       	ldd	r31, Z+8	; 0x08
    2452:	e0 2d       	mov	r30, r0
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	a2 81       	ldd	r26, Z+2	; 0x02
    245a:	b3 81       	ldd	r27, Z+3	; 0x03
    245c:	80 93 73 12 	sts	0x1273, r24	; 0x801273 <xNextTaskUnblockTime>
    2460:	90 93 74 12 	sts	0x1274, r25	; 0x801274 <xNextTaskUnblockTime+0x1>
    2464:	a0 93 75 12 	sts	0x1275, r26	; 0x801275 <xNextTaskUnblockTime+0x2>
    2468:	b0 93 76 12 	sts	0x1276, r27	; 0x801276 <xNextTaskUnblockTime+0x3>
    246c:	08 95       	ret

0000246e <prvAddCurrentTaskToDelayedList>:
    246e:	8f 92       	push	r8
    2470:	9f 92       	push	r9
    2472:	af 92       	push	r10
    2474:	bf 92       	push	r11
    2476:	cf 92       	push	r12
    2478:	df 92       	push	r13
    247a:	ef 92       	push	r14
    247c:	ff 92       	push	r15
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	6b 01       	movw	r12, r22
    2484:	7c 01       	movw	r14, r24
    2486:	c4 2f       	mov	r28, r20
    2488:	80 90 80 12 	lds	r8, 0x1280	; 0x801280 <xTickCount>
    248c:	90 90 81 12 	lds	r9, 0x1281	; 0x801281 <xTickCount+0x1>
    2490:	a0 90 82 12 	lds	r10, 0x1282	; 0x801282 <xTickCount+0x2>
    2494:	b0 90 83 12 	lds	r11, 0x1283	; 0x801283 <xTickCount+0x3>
    2498:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    249c:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    24a0:	02 96       	adiw	r24, 0x02	; 2
    24a2:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	c8 16       	cp	r12, r24
    24aa:	d8 06       	cpc	r13, r24
    24ac:	e8 06       	cpc	r14, r24
    24ae:	f8 06       	cpc	r15, r24
    24b0:	b1 f5       	brne	.+108    	; 0x251e <prvAddCurrentTaskToDelayedList+0xb0>
    24b2:	cc 23       	and	r28, r28
    24b4:	a1 f1       	breq	.+104    	; 0x251e <prvAddCurrentTaskToDelayedList+0xb0>
    24b6:	e5 e8       	ldi	r30, 0x85	; 133
    24b8:	f2 e1       	ldi	r31, 0x12	; 18
    24ba:	a1 81       	ldd	r26, Z+1	; 0x01
    24bc:	b2 81       	ldd	r27, Z+2	; 0x02
    24be:	c0 91 2f 13 	lds	r28, 0x132F	; 0x80132f <pxCurrentTCB>
    24c2:	d0 91 30 13 	lds	r29, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    24c6:	bf 83       	std	Y+7, r27	; 0x07
    24c8:	ae 83       	std	Y+6, r26	; 0x06
    24ca:	c0 91 2f 13 	lds	r28, 0x132F	; 0x80132f <pxCurrentTCB>
    24ce:	d0 91 30 13 	lds	r29, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    24d2:	16 96       	adiw	r26, 0x06	; 6
    24d4:	8d 91       	ld	r24, X+
    24d6:	9c 91       	ld	r25, X
    24d8:	17 97       	sbiw	r26, 0x07	; 7
    24da:	99 87       	std	Y+9, r25	; 0x09
    24dc:	88 87       	std	Y+8, r24	; 0x08
    24de:	16 96       	adiw	r26, 0x06	; 6
    24e0:	cd 91       	ld	r28, X+
    24e2:	dc 91       	ld	r29, X
    24e4:	17 97       	sbiw	r26, 0x07	; 7
    24e6:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    24ea:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    24ee:	02 96       	adiw	r24, 0x02	; 2
    24f0:	9d 83       	std	Y+5, r25	; 0x05
    24f2:	8c 83       	std	Y+4, r24	; 0x04
    24f4:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    24f8:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    24fc:	02 96       	adiw	r24, 0x02	; 2
    24fe:	17 96       	adiw	r26, 0x07	; 7
    2500:	9c 93       	st	X, r25
    2502:	8e 93       	st	-X, r24
    2504:	16 97       	sbiw	r26, 0x06	; 6
    2506:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    250a:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    250e:	1d 96       	adiw	r26, 0x0d	; 13
    2510:	fc 93       	st	X, r31
    2512:	ee 93       	st	-X, r30
    2514:	1c 97       	sbiw	r26, 0x0c	; 12
    2516:	80 81       	ld	r24, Z
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	80 83       	st	Z, r24
    251c:	3f c0       	rjmp	.+126    	; 0x259c <prvAddCurrentTaskToDelayedList+0x12e>
    251e:	c8 0c       	add	r12, r8
    2520:	d9 1c       	adc	r13, r9
    2522:	ea 1c       	adc	r14, r10
    2524:	fb 1c       	adc	r15, r11
    2526:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    252a:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    252e:	c2 82       	std	Z+2, r12	; 0x02
    2530:	d3 82       	std	Z+3, r13	; 0x03
    2532:	e4 82       	std	Z+4, r14	; 0x04
    2534:	f5 82       	std	Z+5, r15	; 0x05
    2536:	c8 14       	cp	r12, r8
    2538:	d9 04       	cpc	r13, r9
    253a:	ea 04       	cpc	r14, r10
    253c:	fb 04       	cpc	r15, r11
    253e:	68 f4       	brcc	.+26     	; 0x255a <prvAddCurrentTaskToDelayedList+0xec>
    2540:	60 91 2f 13 	lds	r22, 0x132F	; 0x80132f <pxCurrentTCB>
    2544:	70 91 30 13 	lds	r23, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2548:	80 91 a7 12 	lds	r24, 0x12A7	; 0x8012a7 <pxOverflowDelayedTaskList>
    254c:	90 91 a8 12 	lds	r25, 0x12A8	; 0x8012a8 <pxOverflowDelayedTaskList+0x1>
    2550:	6e 5f       	subi	r22, 0xFE	; 254
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    2558:	21 c0       	rjmp	.+66     	; 0x259c <prvAddCurrentTaskToDelayedList+0x12e>
    255a:	60 91 2f 13 	lds	r22, 0x132F	; 0x80132f <pxCurrentTCB>
    255e:	70 91 30 13 	lds	r23, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2562:	80 91 a9 12 	lds	r24, 0x12A9	; 0x8012a9 <pxDelayedTaskList>
    2566:	90 91 aa 12 	lds	r25, 0x12AA	; 0x8012aa <pxDelayedTaskList+0x1>
    256a:	6e 5f       	subi	r22, 0xFE	; 254
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    2572:	80 91 73 12 	lds	r24, 0x1273	; 0x801273 <xNextTaskUnblockTime>
    2576:	90 91 74 12 	lds	r25, 0x1274	; 0x801274 <xNextTaskUnblockTime+0x1>
    257a:	a0 91 75 12 	lds	r26, 0x1275	; 0x801275 <xNextTaskUnblockTime+0x2>
    257e:	b0 91 76 12 	lds	r27, 0x1276	; 0x801276 <xNextTaskUnblockTime+0x3>
    2582:	c8 16       	cp	r12, r24
    2584:	d9 06       	cpc	r13, r25
    2586:	ea 06       	cpc	r14, r26
    2588:	fb 06       	cpc	r15, r27
    258a:	40 f4       	brcc	.+16     	; 0x259c <prvAddCurrentTaskToDelayedList+0x12e>
    258c:	c0 92 73 12 	sts	0x1273, r12	; 0x801273 <xNextTaskUnblockTime>
    2590:	d0 92 74 12 	sts	0x1274, r13	; 0x801274 <xNextTaskUnblockTime+0x1>
    2594:	e0 92 75 12 	sts	0x1275, r14	; 0x801275 <xNextTaskUnblockTime+0x2>
    2598:	f0 92 76 12 	sts	0x1276, r15	; 0x801276 <xNextTaskUnblockTime+0x3>
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	bf 90       	pop	r11
    25aa:	af 90       	pop	r10
    25ac:	9f 90       	pop	r9
    25ae:	8f 90       	pop	r8
    25b0:	08 95       	ret

000025b2 <xTaskCreate>:
    25b2:	4f 92       	push	r4
    25b4:	5f 92       	push	r5
    25b6:	6f 92       	push	r6
    25b8:	7f 92       	push	r7
    25ba:	8f 92       	push	r8
    25bc:	9f 92       	push	r9
    25be:	af 92       	push	r10
    25c0:	bf 92       	push	r11
    25c2:	cf 92       	push	r12
    25c4:	df 92       	push	r13
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	4c 01       	movw	r8, r24
    25d4:	6b 01       	movw	r12, r22
    25d6:	5a 01       	movw	r10, r20
    25d8:	29 01       	movw	r4, r18
    25da:	ca 01       	movw	r24, r20
    25dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <pvPortMalloc>
    25e0:	3c 01       	movw	r6, r24
    25e2:	89 2b       	or	r24, r25
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <xTaskCreate+0x36>
    25e6:	0d c1       	rjmp	.+538    	; 0x2802 <xTaskCreate+0x250>
    25e8:	84 e3       	ldi	r24, 0x34	; 52
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 cc 08 	call	0x1198	; 0x1198 <pvPortMalloc>
    25f0:	ec 01       	movw	r28, r24
    25f2:	89 2b       	or	r24, r25
    25f4:	99 f0       	breq	.+38     	; 0x261c <xTaskCreate+0x6a>
    25f6:	7c 8e       	std	Y+28, r7	; 0x1c
    25f8:	6b 8e       	std	Y+27, r6	; 0x1b
    25fa:	a5 01       	movw	r20, r10
    25fc:	65 ea       	ldi	r22, 0xA5	; 165
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	c3 01       	movw	r24, r6
    2602:	0e 94 ef 35 	call	0x6bde	; 0x6bde <memset>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	a8 1a       	sub	r10, r24
    260a:	b1 08       	sbc	r11, r1
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	a8 0e       	add	r10, r24
    2612:	b9 1e       	adc	r11, r25
    2614:	c1 14       	cp	r12, r1
    2616:	d1 04       	cpc	r13, r1
    2618:	29 f4       	brne	.+10     	; 0x2624 <xTaskCreate+0x72>
    261a:	20 c0       	rjmp	.+64     	; 0x265c <xTaskCreate+0xaa>
    261c:	c3 01       	movw	r24, r6
    261e:	0e 94 94 09 	call	0x1328	; 0x1328 <vPortFree>
    2622:	ef c0       	rjmp	.+478    	; 0x2802 <xTaskCreate+0x250>
    2624:	d6 01       	movw	r26, r12
    2626:	8c 91       	ld	r24, X
    2628:	8d 8f       	std	Y+29, r24	; 0x1d
    262a:	8c 91       	ld	r24, X
    262c:	88 23       	and	r24, r24
    262e:	a1 f0       	breq	.+40     	; 0x2658 <xTaskCreate+0xa6>
    2630:	ae 01       	movw	r20, r28
    2632:	42 5e       	subi	r20, 0xE2	; 226
    2634:	5f 4f       	sbci	r21, 0xFF	; 255
    2636:	f6 01       	movw	r30, r12
    2638:	31 96       	adiw	r30, 0x01	; 1
    263a:	b0 e1       	ldi	r27, 0x10	; 16
    263c:	cb 0e       	add	r12, r27
    263e:	d1 1c       	adc	r13, r1
    2640:	cf 01       	movw	r24, r30
    2642:	21 91       	ld	r18, Z+
    2644:	da 01       	movw	r26, r20
    2646:	2d 93       	st	X+, r18
    2648:	ad 01       	movw	r20, r26
    264a:	dc 01       	movw	r26, r24
    264c:	8c 91       	ld	r24, X
    264e:	88 23       	and	r24, r24
    2650:	19 f0       	breq	.+6      	; 0x2658 <xTaskCreate+0xa6>
    2652:	ce 16       	cp	r12, r30
    2654:	df 06       	cpc	r13, r31
    2656:	a1 f7       	brne	.-24     	; 0x2640 <xTaskCreate+0x8e>
    2658:	1c a6       	std	Y+44, r1	; 0x2c
    265a:	01 c0       	rjmp	.+2      	; 0x265e <xTaskCreate+0xac>
    265c:	1d 8e       	std	Y+29, r1	; 0x1d
    265e:	0a 30       	cpi	r16, 0x0A	; 10
    2660:	08 f0       	brcs	.+2      	; 0x2664 <xTaskCreate+0xb2>
    2662:	09 e0       	ldi	r16, 0x09	; 9
    2664:	0a 8f       	std	Y+26, r16	; 0x1a
    2666:	0d a7       	std	Y+45, r16	; 0x2d
    2668:	1e a6       	std	Y+46, r1	; 0x2e
    266a:	6e 01       	movw	r12, r28
    266c:	b2 e0       	ldi	r27, 0x02	; 2
    266e:	cb 0e       	add	r12, r27
    2670:	d1 1c       	adc	r13, r1
    2672:	c6 01       	movw	r24, r12
    2674:	0e 94 df 09 	call	0x13be	; 0x13be <vListInitialiseItem>
    2678:	ce 01       	movw	r24, r28
    267a:	0e 96       	adiw	r24, 0x0e	; 14
    267c:	0e 94 df 09 	call	0x13be	; 0x13be <vListInitialiseItem>
    2680:	db 87       	std	Y+11, r29	; 0x0b
    2682:	ca 87       	std	Y+10, r28	; 0x0a
    2684:	8a e0       	ldi	r24, 0x0A	; 10
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	80 1b       	sub	r24, r16
    268e:	91 09       	sbc	r25, r1
    2690:	a1 09       	sbc	r26, r1
    2692:	b1 09       	sbc	r27, r1
    2694:	8e 87       	std	Y+14, r24	; 0x0e
    2696:	9f 87       	std	Y+15, r25	; 0x0f
    2698:	a8 8b       	std	Y+16, r26	; 0x10
    269a:	b9 8b       	std	Y+17, r27	; 0x11
    269c:	df 8b       	std	Y+23, r29	; 0x17
    269e:	ce 8b       	std	Y+22, r28	; 0x16
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	fe 01       	movw	r30, r28
    26a4:	bf 96       	adiw	r30, 0x2f	; 47
    26a6:	df 01       	movw	r26, r30
    26a8:	1d 92       	st	X+, r1
    26aa:	8a 95       	dec	r24
    26ac:	e9 f7       	brne	.-6      	; 0x26a8 <xTaskCreate+0xf6>
    26ae:	1b aa       	std	Y+51, r1	; 0x33
    26b0:	a2 01       	movw	r20, r4
    26b2:	b4 01       	movw	r22, r8
    26b4:	c5 01       	movw	r24, r10
    26b6:	0e 94 47 0a 	call	0x148e	; 0x148e <pxPortInitialiseStack>
    26ba:	99 83       	std	Y+1, r25	; 0x01
    26bc:	88 83       	st	Y, r24
    26be:	e1 14       	cp	r14, r1
    26c0:	f1 04       	cpc	r15, r1
    26c2:	19 f0       	breq	.+6      	; 0x26ca <xTaskCreate+0x118>
    26c4:	f7 01       	movw	r30, r14
    26c6:	d1 83       	std	Z+1, r29	; 0x01
    26c8:	c0 83       	st	Z, r28
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	0f 92       	push	r0
    26d0:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxCurrentNumberOfTasks>
    26d4:	8f 5f       	subi	r24, 0xFF	; 255
    26d6:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <uxCurrentNumberOfTasks>
    26da:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    26de:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    26e2:	89 2b       	or	r24, r25
    26e4:	d1 f5       	brne	.+116    	; 0x275a <xTaskCreate+0x1a8>
    26e6:	d0 93 30 13 	sts	0x1330, r29	; 0x801330 <pxCurrentTCB+0x1>
    26ea:	c0 93 2f 13 	sts	0x132F, r28	; 0x80132f <pxCurrentTCB>
    26ee:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxCurrentNumberOfTasks>
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <xTaskCreate+0x146>
    26f6:	41 c0       	rjmp	.+130    	; 0x277a <xTaskCreate+0x1c8>
    26f8:	01 ec       	ldi	r16, 0xC1	; 193
    26fa:	12 e1       	ldi	r17, 0x12	; 18
    26fc:	0f 2e       	mov	r0, r31
    26fe:	ff e2       	ldi	r31, 0x2F	; 47
    2700:	ef 2e       	mov	r14, r31
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	ff 2e       	mov	r15, r31
    2706:	f0 2d       	mov	r31, r0
    2708:	c8 01       	movw	r24, r16
    270a:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    270e:	05 5f       	subi	r16, 0xF5	; 245
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	0e 15       	cp	r16, r14
    2714:	1f 05       	cpc	r17, r15
    2716:	c1 f7       	brne	.-16     	; 0x2708 <xTaskCreate+0x156>
    2718:	86 eb       	ldi	r24, 0xB6	; 182
    271a:	92 e1       	ldi	r25, 0x12	; 18
    271c:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    2720:	8b ea       	ldi	r24, 0xAB	; 171
    2722:	92 e1       	ldi	r25, 0x12	; 18
    2724:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    2728:	8c e9       	ldi	r24, 0x9C	; 156
    272a:	92 e1       	ldi	r25, 0x12	; 18
    272c:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    2730:	81 e9       	ldi	r24, 0x91	; 145
    2732:	92 e1       	ldi	r25, 0x12	; 18
    2734:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    2738:	85 e8       	ldi	r24, 0x85	; 133
    273a:	92 e1       	ldi	r25, 0x12	; 18
    273c:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    2740:	86 eb       	ldi	r24, 0xB6	; 182
    2742:	92 e1       	ldi	r25, 0x12	; 18
    2744:	90 93 aa 12 	sts	0x12AA, r25	; 0x8012aa <pxDelayedTaskList+0x1>
    2748:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <pxDelayedTaskList>
    274c:	8b ea       	ldi	r24, 0xAB	; 171
    274e:	92 e1       	ldi	r25, 0x12	; 18
    2750:	90 93 a8 12 	sts	0x12A8, r25	; 0x8012a8 <pxOverflowDelayedTaskList+0x1>
    2754:	80 93 a7 12 	sts	0x12A7, r24	; 0x8012a7 <pxOverflowDelayedTaskList>
    2758:	10 c0       	rjmp	.+32     	; 0x277a <xTaskCreate+0x1c8>
    275a:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <xSchedulerRunning>
    275e:	81 11       	cpse	r24, r1
    2760:	0c c0       	rjmp	.+24     	; 0x277a <xTaskCreate+0x1c8>
    2762:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    2766:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    276a:	92 8d       	ldd	r25, Z+26	; 0x1a
    276c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    276e:	89 17       	cp	r24, r25
    2770:	20 f0       	brcs	.+8      	; 0x277a <xTaskCreate+0x1c8>
    2772:	d0 93 30 13 	sts	0x1330, r29	; 0x801330 <pxCurrentTCB+0x1>
    2776:	c0 93 2f 13 	sts	0x132F, r28	; 0x80132f <pxCurrentTCB>
    277a:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <uxTaskNumber>
    277e:	8f 5f       	subi	r24, 0xFF	; 255
    2780:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <uxTaskNumber>
    2784:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2786:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    278a:	8e 17       	cp	r24, r30
    278c:	10 f4       	brcc	.+4      	; 0x2792 <xTaskCreate+0x1e0>
    278e:	e0 93 7f 12 	sts	0x127F, r30	; 0x80127f <uxTopReadyPriority>
    2792:	8b e0       	ldi	r24, 0x0B	; 11
    2794:	8e 9f       	mul	r24, r30
    2796:	f0 01       	movw	r30, r0
    2798:	11 24       	eor	r1, r1
    279a:	ef 53       	subi	r30, 0x3F	; 63
    279c:	fd 4e       	sbci	r31, 0xED	; 237
    279e:	01 80       	ldd	r0, Z+1	; 0x01
    27a0:	f2 81       	ldd	r31, Z+2	; 0x02
    27a2:	e0 2d       	mov	r30, r0
    27a4:	ff 83       	std	Y+7, r31	; 0x07
    27a6:	ee 83       	std	Y+6, r30	; 0x06
    27a8:	26 81       	ldd	r18, Z+6	; 0x06
    27aa:	37 81       	ldd	r19, Z+7	; 0x07
    27ac:	39 87       	std	Y+9, r19	; 0x09
    27ae:	28 87       	std	Y+8, r18	; 0x08
    27b0:	a6 81       	ldd	r26, Z+6	; 0x06
    27b2:	b7 81       	ldd	r27, Z+7	; 0x07
    27b4:	15 96       	adiw	r26, 0x05	; 5
    27b6:	dc 92       	st	X, r13
    27b8:	ce 92       	st	-X, r12
    27ba:	14 97       	sbiw	r26, 0x04	; 4
    27bc:	d7 82       	std	Z+7, r13	; 0x07
    27be:	c6 82       	std	Z+6, r12	; 0x06
    27c0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27c2:	8e 9f       	mul	r24, r30
    27c4:	f0 01       	movw	r30, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	ef 53       	subi	r30, 0x3F	; 63
    27ca:	fd 4e       	sbci	r31, 0xED	; 237
    27cc:	fd 87       	std	Y+13, r31	; 0x0d
    27ce:	ec 87       	std	Y+12, r30	; 0x0c
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	80 83       	st	Z, r24
    27d6:	0f 90       	pop	r0
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <xSchedulerRunning>
    27de:	88 23       	and	r24, r24
    27e0:	61 f0       	breq	.+24     	; 0x27fa <xTaskCreate+0x248>
    27e2:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    27e6:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    27ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    27ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27ee:	98 17       	cp	r25, r24
    27f0:	30 f4       	brcc	.+12     	; 0x27fe <xTaskCreate+0x24c>
    27f2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	05 c0       	rjmp	.+10     	; 0x2804 <xTaskCreate+0x252>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <xTaskCreate+0x252>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <xTaskCreate+0x252>
    2802:	8f ef       	ldi	r24, 0xFF	; 255
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	9f 90       	pop	r9
    281a:	8f 90       	pop	r8
    281c:	7f 90       	pop	r7
    281e:	6f 90       	pop	r6
    2820:	5f 90       	pop	r5
    2822:	4f 90       	pop	r4
    2824:	08 95       	ret

00002826 <vTaskStartScheduler>:
    2826:	ef 92       	push	r14
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	0f 2e       	mov	r0, r31
    282e:	f1 e7       	ldi	r31, 0x71	; 113
    2830:	ef 2e       	mov	r14, r31
    2832:	f2 e1       	ldi	r31, 0x12	; 18
    2834:	ff 2e       	mov	r15, r31
    2836:	f0 2d       	mov	r31, r0
    2838:	00 e0       	ldi	r16, 0x00	; 0
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 ec       	ldi	r20, 0xC0	; 192
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	6b ec       	ldi	r22, 0xCB	; 203
    2844:	73 e0       	ldi	r23, 0x03	; 3
    2846:	8e e0       	ldi	r24, 0x0E	; 14
    2848:	91 e0       	ldi	r25, 0x01	; 1
    284a:	b3 de       	rcall	.-666    	; 0x25b2 <xTaskCreate>
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	e9 f4       	brne	.+58     	; 0x288a <vTaskStartScheduler+0x64>
    2850:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <xTimerCreateTimerTask>
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	c9 f4       	brne	.+50     	; 0x288a <vTaskStartScheduler+0x64>
    2858:	f8 94       	cli
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	9f ef       	ldi	r25, 0xFF	; 255
    285e:	dc 01       	movw	r26, r24
    2860:	80 93 73 12 	sts	0x1273, r24	; 0x801273 <xNextTaskUnblockTime>
    2864:	90 93 74 12 	sts	0x1274, r25	; 0x801274 <xNextTaskUnblockTime+0x1>
    2868:	a0 93 75 12 	sts	0x1275, r26	; 0x801275 <xNextTaskUnblockTime+0x2>
    286c:	b0 93 76 12 	sts	0x1276, r27	; 0x801276 <xNextTaskUnblockTime+0x3>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <xSchedulerRunning>
    2876:	10 92 80 12 	sts	0x1280, r1	; 0x801280 <xTickCount>
    287a:	10 92 81 12 	sts	0x1281, r1	; 0x801281 <xTickCount+0x1>
    287e:	10 92 82 12 	sts	0x1282, r1	; 0x801282 <xTickCount+0x2>
    2882:	10 92 83 12 	sts	0x1283, r1	; 0x801283 <xTickCount+0x3>
    2886:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <xPortStartScheduler>
    288a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    288e:	0f 91       	pop	r16
    2890:	ff 90       	pop	r15
    2892:	ef 90       	pop	r14
    2894:	08 95       	ret

00002896 <vTaskSuspendAll>:
    2896:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	80 93 70 12 	sts	0x1270, r24	; 0x801270 <uxSchedulerSuspended>
    28a0:	08 95       	ret

000028a2 <xTaskGetTickCount>:
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	0f 92       	push	r0
    28a8:	60 91 80 12 	lds	r22, 0x1280	; 0x801280 <xTickCount>
    28ac:	70 91 81 12 	lds	r23, 0x1281	; 0x801281 <xTickCount+0x1>
    28b0:	80 91 82 12 	lds	r24, 0x1282	; 0x801282 <xTickCount+0x2>
    28b4:	90 91 83 12 	lds	r25, 0x1283	; 0x801283 <xTickCount+0x3>
    28b8:	0f 90       	pop	r0
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	08 95       	ret

000028be <xTaskIncrementTick>:
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    28d2:	81 11       	cpse	r24, r1
    28d4:	07 c1       	rjmp	.+526    	; 0x2ae4 <xTaskIncrementTick+0x226>
    28d6:	c0 90 80 12 	lds	r12, 0x1280	; 0x801280 <xTickCount>
    28da:	d0 90 81 12 	lds	r13, 0x1281	; 0x801281 <xTickCount+0x1>
    28de:	e0 90 82 12 	lds	r14, 0x1282	; 0x801282 <xTickCount+0x2>
    28e2:	f0 90 83 12 	lds	r15, 0x1283	; 0x801283 <xTickCount+0x3>
    28e6:	8f ef       	ldi	r24, 0xFF	; 255
    28e8:	c8 1a       	sub	r12, r24
    28ea:	d8 0a       	sbc	r13, r24
    28ec:	e8 0a       	sbc	r14, r24
    28ee:	f8 0a       	sbc	r15, r24
    28f0:	c0 92 80 12 	sts	0x1280, r12	; 0x801280 <xTickCount>
    28f4:	d0 92 81 12 	sts	0x1281, r13	; 0x801281 <xTickCount+0x1>
    28f8:	e0 92 82 12 	sts	0x1282, r14	; 0x801282 <xTickCount+0x2>
    28fc:	f0 92 83 12 	sts	0x1283, r15	; 0x801283 <xTickCount+0x3>
    2900:	c1 14       	cp	r12, r1
    2902:	d1 04       	cpc	r13, r1
    2904:	e1 04       	cpc	r14, r1
    2906:	f1 04       	cpc	r15, r1
    2908:	b1 f4       	brne	.+44     	; 0x2936 <xTaskIncrementTick+0x78>
    290a:	80 91 a9 12 	lds	r24, 0x12A9	; 0x8012a9 <pxDelayedTaskList>
    290e:	90 91 aa 12 	lds	r25, 0x12AA	; 0x8012aa <pxDelayedTaskList+0x1>
    2912:	20 91 a7 12 	lds	r18, 0x12A7	; 0x8012a7 <pxOverflowDelayedTaskList>
    2916:	30 91 a8 12 	lds	r19, 0x12A8	; 0x8012a8 <pxOverflowDelayedTaskList+0x1>
    291a:	30 93 aa 12 	sts	0x12AA, r19	; 0x8012aa <pxDelayedTaskList+0x1>
    291e:	20 93 a9 12 	sts	0x12A9, r18	; 0x8012a9 <pxDelayedTaskList>
    2922:	90 93 a8 12 	sts	0x12A8, r25	; 0x8012a8 <pxOverflowDelayedTaskList+0x1>
    2926:	80 93 a7 12 	sts	0x12A7, r24	; 0x8012a7 <pxOverflowDelayedTaskList>
    292a:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <xNumOfOverflows>
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <xNumOfOverflows>
    2934:	75 dd       	rcall	.-1302   	; 0x2420 <prvResetNextTaskUnblockTime>
    2936:	80 91 73 12 	lds	r24, 0x1273	; 0x801273 <xNextTaskUnblockTime>
    293a:	90 91 74 12 	lds	r25, 0x1274	; 0x801274 <xNextTaskUnblockTime+0x1>
    293e:	a0 91 75 12 	lds	r26, 0x1275	; 0x801275 <xNextTaskUnblockTime+0x2>
    2942:	b0 91 76 12 	lds	r27, 0x1276	; 0x801276 <xNextTaskUnblockTime+0x3>
    2946:	c8 16       	cp	r12, r24
    2948:	d9 06       	cpc	r13, r25
    294a:	ea 06       	cpc	r14, r26
    294c:	fb 06       	cpc	r15, r27
    294e:	10 f4       	brcc	.+4      	; 0x2954 <xTaskIncrementTick+0x96>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	b3 c0       	rjmp	.+358    	; 0x2aba <xTaskIncrementTick+0x1fc>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	4b e0       	ldi	r20, 0x0B	; 11
    2958:	51 e0       	ldi	r21, 0x01	; 1
    295a:	e0 91 a9 12 	lds	r30, 0x12A9	; 0x8012a9 <pxDelayedTaskList>
    295e:	f0 91 aa 12 	lds	r31, 0x12AA	; 0x8012aa <pxDelayedTaskList+0x1>
    2962:	90 81       	ld	r25, Z
    2964:	91 11       	cpse	r25, r1
    2966:	0c c0       	rjmp	.+24     	; 0x2980 <xTaskIncrementTick+0xc2>
    2968:	4f ef       	ldi	r20, 0xFF	; 255
    296a:	5f ef       	ldi	r21, 0xFF	; 255
    296c:	ba 01       	movw	r22, r20
    296e:	40 93 73 12 	sts	0x1273, r20	; 0x801273 <xNextTaskUnblockTime>
    2972:	50 93 74 12 	sts	0x1274, r21	; 0x801274 <xNextTaskUnblockTime+0x1>
    2976:	60 93 75 12 	sts	0x1275, r22	; 0x801275 <xNextTaskUnblockTime+0x2>
    297a:	70 93 76 12 	sts	0x1276, r23	; 0x801276 <xNextTaskUnblockTime+0x3>
    297e:	9d c0       	rjmp	.+314    	; 0x2aba <xTaskIncrementTick+0x1fc>
    2980:	e0 91 a9 12 	lds	r30, 0x12A9	; 0x8012a9 <pxDelayedTaskList>
    2984:	f0 91 aa 12 	lds	r31, 0x12AA	; 0x8012aa <pxDelayedTaskList+0x1>
    2988:	07 80       	ldd	r0, Z+7	; 0x07
    298a:	f0 85       	ldd	r31, Z+8	; 0x08
    298c:	e0 2d       	mov	r30, r0
    298e:	00 84       	ldd	r0, Z+8	; 0x08
    2990:	f1 85       	ldd	r31, Z+9	; 0x09
    2992:	e0 2d       	mov	r30, r0
    2994:	02 81       	ldd	r16, Z+2	; 0x02
    2996:	13 81       	ldd	r17, Z+3	; 0x03
    2998:	24 81       	ldd	r18, Z+4	; 0x04
    299a:	35 81       	ldd	r19, Z+5	; 0x05
    299c:	c0 16       	cp	r12, r16
    299e:	d1 06       	cpc	r13, r17
    29a0:	e2 06       	cpc	r14, r18
    29a2:	f3 06       	cpc	r15, r19
    29a4:	48 f4       	brcc	.+18     	; 0x29b8 <xTaskIncrementTick+0xfa>
    29a6:	00 93 73 12 	sts	0x1273, r16	; 0x801273 <xNextTaskUnblockTime>
    29aa:	10 93 74 12 	sts	0x1274, r17	; 0x801274 <xNextTaskUnblockTime+0x1>
    29ae:	20 93 75 12 	sts	0x1275, r18	; 0x801275 <xNextTaskUnblockTime+0x2>
    29b2:	30 93 76 12 	sts	0x1276, r19	; 0x801276 <xNextTaskUnblockTime+0x3>
    29b6:	81 c0       	rjmp	.+258    	; 0x2aba <xTaskIncrementTick+0x1fc>
    29b8:	a4 85       	ldd	r26, Z+12	; 0x0c
    29ba:	b5 85       	ldd	r27, Z+13	; 0x0d
    29bc:	c6 81       	ldd	r28, Z+6	; 0x06
    29be:	d7 81       	ldd	r29, Z+7	; 0x07
    29c0:	20 85       	ldd	r18, Z+8	; 0x08
    29c2:	31 85       	ldd	r19, Z+9	; 0x09
    29c4:	3f 83       	std	Y+7, r19	; 0x07
    29c6:	2e 83       	std	Y+6, r18	; 0x06
    29c8:	c0 85       	ldd	r28, Z+8	; 0x08
    29ca:	d1 85       	ldd	r29, Z+9	; 0x09
    29cc:	26 81       	ldd	r18, Z+6	; 0x06
    29ce:	37 81       	ldd	r19, Z+7	; 0x07
    29d0:	3d 83       	std	Y+5, r19	; 0x05
    29d2:	2c 83       	std	Y+4, r18	; 0x04
    29d4:	9f 01       	movw	r18, r30
    29d6:	2e 5f       	subi	r18, 0xFE	; 254
    29d8:	3f 4f       	sbci	r19, 0xFF	; 255
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	6d 91       	ld	r22, X+
    29de:	7c 91       	ld	r23, X
    29e0:	12 97       	sbiw	r26, 0x02	; 2
    29e2:	62 17       	cp	r22, r18
    29e4:	73 07       	cpc	r23, r19
    29e6:	31 f4       	brne	.+12     	; 0x29f4 <xTaskIncrementTick+0x136>
    29e8:	60 85       	ldd	r22, Z+8	; 0x08
    29ea:	71 85       	ldd	r23, Z+9	; 0x09
    29ec:	12 96       	adiw	r26, 0x02	; 2
    29ee:	7c 93       	st	X, r23
    29f0:	6e 93       	st	-X, r22
    29f2:	11 97       	sbiw	r26, 0x01	; 1
    29f4:	15 86       	std	Z+13, r1	; 0x0d
    29f6:	14 86       	std	Z+12, r1	; 0x0c
    29f8:	9c 91       	ld	r25, X
    29fa:	91 50       	subi	r25, 0x01	; 1
    29fc:	9c 93       	st	X, r25
    29fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a00:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a02:	10 97       	sbiw	r26, 0x00	; 0
    2a04:	09 f1       	breq	.+66     	; 0x2a48 <xTaskIncrementTick+0x18a>
    2a06:	c2 89       	ldd	r28, Z+18	; 0x12
    2a08:	d3 89       	ldd	r29, Z+19	; 0x13
    2a0a:	64 89       	ldd	r22, Z+20	; 0x14
    2a0c:	75 89       	ldd	r23, Z+21	; 0x15
    2a0e:	7f 83       	std	Y+7, r23	; 0x07
    2a10:	6e 83       	std	Y+6, r22	; 0x06
    2a12:	c4 89       	ldd	r28, Z+20	; 0x14
    2a14:	d5 89       	ldd	r29, Z+21	; 0x15
    2a16:	62 89       	ldd	r22, Z+18	; 0x12
    2a18:	73 89       	ldd	r23, Z+19	; 0x13
    2a1a:	7d 83       	std	Y+5, r23	; 0x05
    2a1c:	6c 83       	std	Y+4, r22	; 0x04
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	cd 91       	ld	r28, X+
    2a22:	dc 91       	ld	r29, X
    2a24:	12 97       	sbiw	r26, 0x02	; 2
    2a26:	bf 01       	movw	r22, r30
    2a28:	62 5f       	subi	r22, 0xF2	; 242
    2a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2c:	c6 17       	cp	r28, r22
    2a2e:	d7 07       	cpc	r29, r23
    2a30:	31 f4       	brne	.+12     	; 0x2a3e <xTaskIncrementTick+0x180>
    2a32:	64 89       	ldd	r22, Z+20	; 0x14
    2a34:	75 89       	ldd	r23, Z+21	; 0x15
    2a36:	12 96       	adiw	r26, 0x02	; 2
    2a38:	7c 93       	st	X, r23
    2a3a:	6e 93       	st	-X, r22
    2a3c:	11 97       	sbiw	r26, 0x01	; 1
    2a3e:	11 8e       	std	Z+25, r1	; 0x19
    2a40:	10 8e       	std	Z+24, r1	; 0x18
    2a42:	9c 91       	ld	r25, X
    2a44:	91 50       	subi	r25, 0x01	; 1
    2a46:	9c 93       	st	X, r25
    2a48:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a4a:	90 91 7f 12 	lds	r25, 0x127F	; 0x80127f <uxTopReadyPriority>
    2a4e:	9a 17       	cp	r25, r26
    2a50:	10 f4       	brcc	.+4      	; 0x2a56 <xTaskIncrementTick+0x198>
    2a52:	a0 93 7f 12 	sts	0x127F, r26	; 0x80127f <uxTopReadyPriority>
    2a56:	4a 9f       	mul	r20, r26
    2a58:	d0 01       	movw	r26, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	af 53       	subi	r26, 0x3F	; 63
    2a5e:	bd 4e       	sbci	r27, 0xED	; 237
    2a60:	11 96       	adiw	r26, 0x01	; 1
    2a62:	0d 90       	ld	r0, X+
    2a64:	bc 91       	ld	r27, X
    2a66:	a0 2d       	mov	r26, r0
    2a68:	b7 83       	std	Z+7, r27	; 0x07
    2a6a:	a6 83       	std	Z+6, r26	; 0x06
    2a6c:	16 96       	adiw	r26, 0x06	; 6
    2a6e:	6d 91       	ld	r22, X+
    2a70:	7c 91       	ld	r23, X
    2a72:	17 97       	sbiw	r26, 0x07	; 7
    2a74:	71 87       	std	Z+9, r23	; 0x09
    2a76:	60 87       	std	Z+8, r22	; 0x08
    2a78:	16 96       	adiw	r26, 0x06	; 6
    2a7a:	cd 91       	ld	r28, X+
    2a7c:	dc 91       	ld	r29, X
    2a7e:	17 97       	sbiw	r26, 0x07	; 7
    2a80:	3d 83       	std	Y+5, r19	; 0x05
    2a82:	2c 83       	std	Y+4, r18	; 0x04
    2a84:	17 96       	adiw	r26, 0x07	; 7
    2a86:	3c 93       	st	X, r19
    2a88:	2e 93       	st	-X, r18
    2a8a:	16 97       	sbiw	r26, 0x06	; 6
    2a8c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a8e:	4a 9f       	mul	r20, r26
    2a90:	d0 01       	movw	r26, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	af 53       	subi	r26, 0x3F	; 63
    2a96:	bd 4e       	sbci	r27, 0xED	; 237
    2a98:	b5 87       	std	Z+13, r27	; 0x0d
    2a9a:	a4 87       	std	Z+12, r26	; 0x0c
    2a9c:	9c 91       	ld	r25, X
    2a9e:	9f 5f       	subi	r25, 0xFF	; 255
    2aa0:	9c 93       	st	X, r25
    2aa2:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    2aa6:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2aaa:	22 8d       	ldd	r18, Z+26	; 0x1a
    2aac:	5a 96       	adiw	r26, 0x1a	; 26
    2aae:	9c 91       	ld	r25, X
    2ab0:	29 17       	cp	r18, r25
    2ab2:	08 f4       	brcc	.+2      	; 0x2ab6 <xTaskIncrementTick+0x1f8>
    2ab4:	52 cf       	rjmp	.-348    	; 0x295a <xTaskIncrementTick+0x9c>
    2ab6:	85 2f       	mov	r24, r21
    2ab8:	50 cf       	rjmp	.-352    	; 0x295a <xTaskIncrementTick+0x9c>
    2aba:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    2abe:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2ac2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ac4:	9b e0       	ldi	r25, 0x0B	; 11
    2ac6:	e9 9f       	mul	r30, r25
    2ac8:	f0 01       	movw	r30, r0
    2aca:	11 24       	eor	r1, r1
    2acc:	ef 53       	subi	r30, 0x3F	; 63
    2ace:	fd 4e       	sbci	r31, 0xED	; 237
    2ad0:	90 81       	ld	r25, Z
    2ad2:	92 30       	cpi	r25, 0x02	; 2
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <xTaskIncrementTick+0x21a>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <xYieldPending>
    2adc:	99 23       	and	r25, r25
    2ade:	b1 f0       	breq	.+44     	; 0x2b0c <xTaskIncrementTick+0x24e>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	14 c0       	rjmp	.+40     	; 0x2b0c <xTaskIncrementTick+0x24e>
    2ae4:	80 91 7a 12 	lds	r24, 0x127A	; 0x80127a <xPendedTicks>
    2ae8:	90 91 7b 12 	lds	r25, 0x127B	; 0x80127b <xPendedTicks+0x1>
    2aec:	a0 91 7c 12 	lds	r26, 0x127C	; 0x80127c <xPendedTicks+0x2>
    2af0:	b0 91 7d 12 	lds	r27, 0x127D	; 0x80127d <xPendedTicks+0x3>
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	a1 1d       	adc	r26, r1
    2af8:	b1 1d       	adc	r27, r1
    2afa:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <xPendedTicks>
    2afe:	90 93 7b 12 	sts	0x127B, r25	; 0x80127b <xPendedTicks+0x1>
    2b02:	a0 93 7c 12 	sts	0x127C, r26	; 0x80127c <xPendedTicks+0x2>
    2b06:	b0 93 7d 12 	sts	0x127D, r27	; 0x80127d <xPendedTicks+0x3>
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	1f 91       	pop	r17
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	df 90       	pop	r13
    2b1a:	cf 90       	pop	r12
    2b1c:	08 95       	ret

00002b1e <xTaskResumeAll>:
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	0f 92       	push	r0
    2b34:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    2b38:	81 50       	subi	r24, 0x01	; 1
    2b3a:	80 93 70 12 	sts	0x1270, r24	; 0x801270 <uxSchedulerSuspended>
    2b3e:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    2b42:	81 11       	cpse	r24, r1
    2b44:	c4 c0       	rjmp	.+392    	; 0x2cce <xTaskResumeAll+0x1b0>
    2b46:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <uxCurrentNumberOfTasks>
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	8b c0       	rjmp	.+278    	; 0x2c64 <xTaskResumeAll+0x146>
    2b4e:	c2 c0       	rjmp	.+388    	; 0x2cd4 <xTaskResumeAll+0x1b6>
    2b50:	d8 01       	movw	r26, r16
    2b52:	17 96       	adiw	r26, 0x07	; 7
    2b54:	ed 91       	ld	r30, X+
    2b56:	fc 91       	ld	r31, X
    2b58:	18 97       	sbiw	r26, 0x08	; 8
    2b5a:	00 84       	ldd	r0, Z+8	; 0x08
    2b5c:	f1 85       	ldd	r31, Z+9	; 0x09
    2b5e:	e0 2d       	mov	r30, r0
    2b60:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b62:	b1 8d       	ldd	r27, Z+25	; 0x19
    2b64:	82 89       	ldd	r24, Z+18	; 0x12
    2b66:	93 89       	ldd	r25, Z+19	; 0x13
    2b68:	64 89       	ldd	r22, Z+20	; 0x14
    2b6a:	75 89       	ldd	r23, Z+21	; 0x15
    2b6c:	ec 01       	movw	r28, r24
    2b6e:	7f 83       	std	Y+7, r23	; 0x07
    2b70:	6e 83       	std	Y+6, r22	; 0x06
    2b72:	84 89       	ldd	r24, Z+20	; 0x14
    2b74:	95 89       	ldd	r25, Z+21	; 0x15
    2b76:	62 89       	ldd	r22, Z+18	; 0x12
    2b78:	73 89       	ldd	r23, Z+19	; 0x13
    2b7a:	ec 01       	movw	r28, r24
    2b7c:	7d 83       	std	Y+5, r23	; 0x05
    2b7e:	6c 83       	std	Y+4, r22	; 0x04
    2b80:	cf 01       	movw	r24, r30
    2b82:	0e 96       	adiw	r24, 0x0e	; 14
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	6d 91       	ld	r22, X+
    2b88:	7c 91       	ld	r23, X
    2b8a:	12 97       	sbiw	r26, 0x02	; 2
    2b8c:	68 17       	cp	r22, r24
    2b8e:	79 07       	cpc	r23, r25
    2b90:	31 f4       	brne	.+12     	; 0x2b9e <xTaskResumeAll+0x80>
    2b92:	84 89       	ldd	r24, Z+20	; 0x14
    2b94:	95 89       	ldd	r25, Z+21	; 0x15
    2b96:	12 96       	adiw	r26, 0x02	; 2
    2b98:	9c 93       	st	X, r25
    2b9a:	8e 93       	st	-X, r24
    2b9c:	11 97       	sbiw	r26, 0x01	; 1
    2b9e:	11 8e       	std	Z+25, r1	; 0x19
    2ba0:	10 8e       	std	Z+24, r1	; 0x18
    2ba2:	8c 91       	ld	r24, X
    2ba4:	81 50       	subi	r24, 0x01	; 1
    2ba6:	8c 93       	st	X, r24
    2ba8:	a4 85       	ldd	r26, Z+12	; 0x0c
    2baa:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bac:	86 81       	ldd	r24, Z+6	; 0x06
    2bae:	97 81       	ldd	r25, Z+7	; 0x07
    2bb0:	60 85       	ldd	r22, Z+8	; 0x08
    2bb2:	71 85       	ldd	r23, Z+9	; 0x09
    2bb4:	ec 01       	movw	r28, r24
    2bb6:	7f 83       	std	Y+7, r23	; 0x07
    2bb8:	6e 83       	std	Y+6, r22	; 0x06
    2bba:	80 85       	ldd	r24, Z+8	; 0x08
    2bbc:	91 85       	ldd	r25, Z+9	; 0x09
    2bbe:	66 81       	ldd	r22, Z+6	; 0x06
    2bc0:	77 81       	ldd	r23, Z+7	; 0x07
    2bc2:	ec 01       	movw	r28, r24
    2bc4:	7d 83       	std	Y+5, r23	; 0x05
    2bc6:	6c 83       	std	Y+4, r22	; 0x04
    2bc8:	cf 01       	movw	r24, r30
    2bca:	02 96       	adiw	r24, 0x02	; 2
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	6d 91       	ld	r22, X+
    2bd0:	7c 91       	ld	r23, X
    2bd2:	12 97       	sbiw	r26, 0x02	; 2
    2bd4:	68 17       	cp	r22, r24
    2bd6:	79 07       	cpc	r23, r25
    2bd8:	31 f4       	brne	.+12     	; 0x2be6 <xTaskResumeAll+0xc8>
    2bda:	60 85       	ldd	r22, Z+8	; 0x08
    2bdc:	71 85       	ldd	r23, Z+9	; 0x09
    2bde:	12 96       	adiw	r26, 0x02	; 2
    2be0:	7c 93       	st	X, r23
    2be2:	6e 93       	st	-X, r22
    2be4:	11 97       	sbiw	r26, 0x01	; 1
    2be6:	15 86       	std	Z+13, r1	; 0x0d
    2be8:	14 86       	std	Z+12, r1	; 0x0c
    2bea:	2c 91       	ld	r18, X
    2bec:	21 50       	subi	r18, 0x01	; 1
    2bee:	2c 93       	st	X, r18
    2bf0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bf2:	20 91 7f 12 	lds	r18, 0x127F	; 0x80127f <uxTopReadyPriority>
    2bf6:	2a 17       	cp	r18, r26
    2bf8:	10 f4       	brcc	.+4      	; 0x2bfe <xTaskResumeAll+0xe0>
    2bfa:	a0 93 7f 12 	sts	0x127F, r26	; 0x80127f <uxTopReadyPriority>
    2bfe:	3a 9f       	mul	r19, r26
    2c00:	d0 01       	movw	r26, r0
    2c02:	11 24       	eor	r1, r1
    2c04:	af 53       	subi	r26, 0x3F	; 63
    2c06:	bd 4e       	sbci	r27, 0xED	; 237
    2c08:	11 96       	adiw	r26, 0x01	; 1
    2c0a:	0d 90       	ld	r0, X+
    2c0c:	bc 91       	ld	r27, X
    2c0e:	a0 2d       	mov	r26, r0
    2c10:	b7 83       	std	Z+7, r27	; 0x07
    2c12:	a6 83       	std	Z+6, r26	; 0x06
    2c14:	16 96       	adiw	r26, 0x06	; 6
    2c16:	6d 91       	ld	r22, X+
    2c18:	7c 91       	ld	r23, X
    2c1a:	17 97       	sbiw	r26, 0x07	; 7
    2c1c:	71 87       	std	Z+9, r23	; 0x09
    2c1e:	60 87       	std	Z+8, r22	; 0x08
    2c20:	16 96       	adiw	r26, 0x06	; 6
    2c22:	6d 91       	ld	r22, X+
    2c24:	7c 91       	ld	r23, X
    2c26:	17 97       	sbiw	r26, 0x07	; 7
    2c28:	eb 01       	movw	r28, r22
    2c2a:	9d 83       	std	Y+5, r25	; 0x05
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
    2c2e:	17 96       	adiw	r26, 0x07	; 7
    2c30:	9c 93       	st	X, r25
    2c32:	8e 93       	st	-X, r24
    2c34:	16 97       	sbiw	r26, 0x06	; 6
    2c36:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c38:	3a 9f       	mul	r19, r26
    2c3a:	d0 01       	movw	r26, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	af 53       	subi	r26, 0x3F	; 63
    2c40:	bd 4e       	sbci	r27, 0xED	; 237
    2c42:	b5 87       	std	Z+13, r27	; 0x0d
    2c44:	a4 87       	std	Z+12, r26	; 0x0c
    2c46:	8c 91       	ld	r24, X
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	8c 93       	st	X, r24
    2c4c:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    2c50:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2c54:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c56:	5a 96       	adiw	r26, 0x1a	; 26
    2c58:	8c 91       	ld	r24, X
    2c5a:	98 17       	cp	r25, r24
    2c5c:	48 f0       	brcs	.+18     	; 0x2c70 <xTaskResumeAll+0x152>
    2c5e:	40 93 79 12 	sts	0x1279, r20	; 0x801279 <xYieldPending>
    2c62:	06 c0       	rjmp	.+12     	; 0x2c70 <xTaskResumeAll+0x152>
    2c64:	e0 e0       	ldi	r30, 0x00	; 0
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	0c e9       	ldi	r16, 0x9C	; 156
    2c6a:	12 e1       	ldi	r17, 0x12	; 18
    2c6c:	3b e0       	ldi	r19, 0x0B	; 11
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	d8 01       	movw	r26, r16
    2c72:	8c 91       	ld	r24, X
    2c74:	81 11       	cpse	r24, r1
    2c76:	6c cf       	rjmp	.-296    	; 0x2b50 <xTaskResumeAll+0x32>
    2c78:	ef 2b       	or	r30, r31
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <xTaskResumeAll+0x160>
    2c7c:	d1 db       	rcall	.-2142   	; 0x2420 <prvResetNextTaskUnblockTime>
    2c7e:	c0 90 7a 12 	lds	r12, 0x127A	; 0x80127a <xPendedTicks>
    2c82:	d0 90 7b 12 	lds	r13, 0x127B	; 0x80127b <xPendedTicks+0x1>
    2c86:	e0 90 7c 12 	lds	r14, 0x127C	; 0x80127c <xPendedTicks+0x2>
    2c8a:	f0 90 7d 12 	lds	r15, 0x127D	; 0x80127d <xPendedTicks+0x3>
    2c8e:	c1 14       	cp	r12, r1
    2c90:	d1 04       	cpc	r13, r1
    2c92:	e1 04       	cpc	r14, r1
    2c94:	f1 04       	cpc	r15, r1
    2c96:	99 f0       	breq	.+38     	; 0x2cbe <xTaskResumeAll+0x1a0>
    2c98:	c1 e0       	ldi	r28, 0x01	; 1
    2c9a:	11 de       	rcall	.-990    	; 0x28be <xTaskIncrementTick>
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	c0 93 79 12 	sts	0x1279, r28	; 0x801279 <xYieldPending>
    2ca2:	b1 e0       	ldi	r27, 0x01	; 1
    2ca4:	cb 1a       	sub	r12, r27
    2ca6:	d1 08       	sbc	r13, r1
    2ca8:	e1 08       	sbc	r14, r1
    2caa:	f1 08       	sbc	r15, r1
    2cac:	b1 f7       	brne	.-20     	; 0x2c9a <xTaskResumeAll+0x17c>
    2cae:	10 92 7a 12 	sts	0x127A, r1	; 0x80127a <xPendedTicks>
    2cb2:	10 92 7b 12 	sts	0x127B, r1	; 0x80127b <xPendedTicks+0x1>
    2cb6:	10 92 7c 12 	sts	0x127C, r1	; 0x80127c <xPendedTicks+0x2>
    2cba:	10 92 7d 12 	sts	0x127D, r1	; 0x80127d <xPendedTicks+0x3>
    2cbe:	80 91 79 12 	lds	r24, 0x1279	; 0x801279 <xYieldPending>
    2cc2:	88 23       	and	r24, r24
    2cc4:	31 f0       	breq	.+12     	; 0x2cd2 <xTaskResumeAll+0x1b4>
    2cc6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	03 c0       	rjmp	.+6      	; 0x2cd4 <xTaskResumeAll+0x1b6>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	01 c0       	rjmp	.+2      	; 0x2cd4 <xTaskResumeAll+0x1b6>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	08 95       	ret

00002cea <vTaskDelay>:
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	6b 01       	movw	r12, r22
    2cf4:	7c 01       	movw	r14, r24
    2cf6:	67 2b       	or	r22, r23
    2cf8:	68 2b       	or	r22, r24
    2cfa:	69 2b       	or	r22, r25
    2cfc:	41 f0       	breq	.+16     	; 0x2d0e <vTaskDelay+0x24>
    2cfe:	cb dd       	rcall	.-1130   	; 0x2896 <vTaskSuspendAll>
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	c7 01       	movw	r24, r14
    2d04:	b6 01       	movw	r22, r12
    2d06:	b3 db       	rcall	.-2202   	; 0x246e <prvAddCurrentTaskToDelayedList>
    2d08:	0a df       	rcall	.-492    	; 0x2b1e <xTaskResumeAll>
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <vTaskDelay+0x28>
    2d0e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
    2d1a:	08 95       	ret

00002d1c <vTaskSwitchContext>:
    2d1c:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    2d20:	88 23       	and	r24, r24
    2d22:	21 f0       	breq	.+8      	; 0x2d2c <vTaskSwitchContext+0x10>
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    2d2a:	08 95       	ret
    2d2c:	10 92 79 12 	sts	0x1279, r1	; 0x801279 <xYieldPending>
    2d30:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    2d34:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2d38:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    2d3c:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2d40:	2d 91       	ld	r18, X+
    2d42:	3c 91       	ld	r19, X
    2d44:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d46:	94 8d       	ldd	r25, Z+28	; 0x1c
    2d48:	82 17       	cp	r24, r18
    2d4a:	93 07       	cpc	r25, r19
    2d4c:	58 f0       	brcs	.+22     	; 0x2d64 <vTaskSwitchContext+0x48>
    2d4e:	60 91 2f 13 	lds	r22, 0x132F	; 0x80132f <pxCurrentTCB>
    2d52:	70 91 30 13 	lds	r23, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2d56:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    2d5a:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2d5e:	63 5e       	subi	r22, 0xE3	; 227
    2d60:	7f 4f       	sbci	r23, 0xFF	; 255
    2d62:	b6 d7       	rcall	.+3948   	; 0x3cd0 <vApplicationStackOverflowHook>
    2d64:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	9b e0       	ldi	r25, 0x0B	; 11
    2d6e:	89 9f       	mul	r24, r25
    2d70:	f0 01       	movw	r30, r0
    2d72:	11 24       	eor	r1, r1
    2d74:	ef 53       	subi	r30, 0x3F	; 63
    2d76:	fd 4e       	sbci	r31, 0xED	; 237
    2d78:	90 81       	ld	r25, Z
    2d7a:	91 11       	cpse	r25, r1
    2d7c:	0e c0       	rjmp	.+28     	; 0x2d9a <vTaskSwitchContext+0x7e>
    2d7e:	4b e0       	ldi	r20, 0x0B	; 11
    2d80:	81 50       	subi	r24, 0x01	; 1
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	42 9f       	mul	r20, r18
    2d88:	f0 01       	movw	r30, r0
    2d8a:	43 9f       	mul	r20, r19
    2d8c:	f0 0d       	add	r31, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	ef 53       	subi	r30, 0x3F	; 63
    2d92:	fd 4e       	sbci	r31, 0xED	; 237
    2d94:	90 81       	ld	r25, Z
    2d96:	99 23       	and	r25, r25
    2d98:	99 f3       	breq	.-26     	; 0x2d80 <vTaskSwitchContext+0x64>
    2d9a:	9b e0       	ldi	r25, 0x0B	; 11
    2d9c:	92 9f       	mul	r25, r18
    2d9e:	a0 01       	movw	r20, r0
    2da0:	93 9f       	mul	r25, r19
    2da2:	50 0d       	add	r21, r0
    2da4:	11 24       	eor	r1, r1
    2da6:	da 01       	movw	r26, r20
    2da8:	af 53       	subi	r26, 0x3F	; 63
    2daa:	bd 4e       	sbci	r27, 0xED	; 237
    2dac:	11 96       	adiw	r26, 0x01	; 1
    2dae:	ed 91       	ld	r30, X+
    2db0:	fc 91       	ld	r31, X
    2db2:	12 97       	sbiw	r26, 0x02	; 2
    2db4:	04 80       	ldd	r0, Z+4	; 0x04
    2db6:	f5 81       	ldd	r31, Z+5	; 0x05
    2db8:	e0 2d       	mov	r30, r0
    2dba:	12 96       	adiw	r26, 0x02	; 2
    2dbc:	fc 93       	st	X, r31
    2dbe:	ee 93       	st	-X, r30
    2dc0:	11 97       	sbiw	r26, 0x01	; 1
    2dc2:	4c 53       	subi	r20, 0x3C	; 60
    2dc4:	5d 4e       	sbci	r21, 0xED	; 237
    2dc6:	e4 17       	cp	r30, r20
    2dc8:	f5 07       	cpc	r31, r21
    2dca:	29 f4       	brne	.+10     	; 0x2dd6 <vTaskSwitchContext+0xba>
    2dcc:	44 81       	ldd	r20, Z+4	; 0x04
    2dce:	55 81       	ldd	r21, Z+5	; 0x05
    2dd0:	fd 01       	movw	r30, r26
    2dd2:	52 83       	std	Z+2, r21	; 0x02
    2dd4:	41 83       	std	Z+1, r20	; 0x01
    2dd6:	9b e0       	ldi	r25, 0x0B	; 11
    2dd8:	92 9f       	mul	r25, r18
    2dda:	f0 01       	movw	r30, r0
    2ddc:	93 9f       	mul	r25, r19
    2dde:	f0 0d       	add	r31, r0
    2de0:	11 24       	eor	r1, r1
    2de2:	ef 53       	subi	r30, 0x3F	; 63
    2de4:	fd 4e       	sbci	r31, 0xED	; 237
    2de6:	01 80       	ldd	r0, Z+1	; 0x01
    2de8:	f2 81       	ldd	r31, Z+2	; 0x02
    2dea:	e0 2d       	mov	r30, r0
    2dec:	20 85       	ldd	r18, Z+8	; 0x08
    2dee:	31 85       	ldd	r19, Z+9	; 0x09
    2df0:	30 93 30 13 	sts	0x1330, r19	; 0x801330 <pxCurrentTCB+0x1>
    2df4:	20 93 2f 13 	sts	0x132F, r18	; 0x80132f <pxCurrentTCB>
    2df8:	80 93 7f 12 	sts	0x127F, r24	; 0x80127f <uxTopReadyPriority>
    2dfc:	08 95       	ret

00002dfe <vTaskPlaceOnEventList>:
    2dfe:	cf 92       	push	r12
    2e00:	df 92       	push	r13
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	6a 01       	movw	r12, r20
    2e08:	7b 01       	movw	r14, r22
    2e0a:	60 91 2f 13 	lds	r22, 0x132F	; 0x80132f <pxCurrentTCB>
    2e0e:	70 91 30 13 	lds	r23, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2e12:	62 5f       	subi	r22, 0xF2	; 242
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	c7 01       	movw	r24, r14
    2e1e:	b6 01       	movw	r22, r12
    2e20:	26 db       	rcall	.-2484   	; 0x246e <prvAddCurrentTaskToDelayedList>
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	08 95       	ret

00002e2c <vTaskPlaceOnEventListRestricted>:
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	fc 01       	movw	r30, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	ba 01       	movw	r22, r20
    2e36:	a1 81       	ldd	r26, Z+1	; 0x01
    2e38:	b2 81       	ldd	r27, Z+2	; 0x02
    2e3a:	c0 91 2f 13 	lds	r28, 0x132F	; 0x80132f <pxCurrentTCB>
    2e3e:	d0 91 30 13 	lds	r29, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2e42:	bb 8b       	std	Y+19, r27	; 0x13
    2e44:	aa 8b       	std	Y+18, r26	; 0x12
    2e46:	c0 91 2f 13 	lds	r28, 0x132F	; 0x80132f <pxCurrentTCB>
    2e4a:	d0 91 30 13 	lds	r29, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2e4e:	16 96       	adiw	r26, 0x06	; 6
    2e50:	4d 91       	ld	r20, X+
    2e52:	5c 91       	ld	r21, X
    2e54:	17 97       	sbiw	r26, 0x07	; 7
    2e56:	5d 8b       	std	Y+21, r21	; 0x15
    2e58:	4c 8b       	std	Y+20, r20	; 0x14
    2e5a:	16 96       	adiw	r26, 0x06	; 6
    2e5c:	cd 91       	ld	r28, X+
    2e5e:	dc 91       	ld	r29, X
    2e60:	17 97       	sbiw	r26, 0x07	; 7
    2e62:	40 91 2f 13 	lds	r20, 0x132F	; 0x80132f <pxCurrentTCB>
    2e66:	50 91 30 13 	lds	r21, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2e6a:	42 5f       	subi	r20, 0xF2	; 242
    2e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6e:	5d 83       	std	Y+5, r21	; 0x05
    2e70:	4c 83       	std	Y+4, r20	; 0x04
    2e72:	40 91 2f 13 	lds	r20, 0x132F	; 0x80132f <pxCurrentTCB>
    2e76:	50 91 30 13 	lds	r21, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2e7a:	42 5f       	subi	r20, 0xF2	; 242
    2e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7e:	17 96       	adiw	r26, 0x07	; 7
    2e80:	5c 93       	st	X, r21
    2e82:	4e 93       	st	-X, r20
    2e84:	16 97       	sbiw	r26, 0x06	; 6
    2e86:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    2e8a:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2e8e:	59 96       	adiw	r26, 0x19	; 25
    2e90:	fc 93       	st	X, r31
    2e92:	ee 93       	st	-X, r30
    2e94:	58 97       	sbiw	r26, 0x18	; 24
    2e96:	30 81       	ld	r19, Z
    2e98:	3f 5f       	subi	r19, 0xFF	; 255
    2e9a:	30 83       	st	Z, r19
    2e9c:	22 23       	and	r18, r18
    2e9e:	19 f0       	breq	.+6      	; 0x2ea6 <vTaskPlaceOnEventListRestricted+0x7a>
    2ea0:	6f ef       	ldi	r22, 0xFF	; 255
    2ea2:	7f ef       	ldi	r23, 0xFF	; 255
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	42 2f       	mov	r20, r18
    2ea8:	e2 da       	rcall	.-2620   	; 0x246e <prvAddCurrentTaskToDelayedList>
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <xTaskRemoveFromEventList>:
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	17 96       	adiw	r26, 0x07	; 7
    2eb8:	ed 91       	ld	r30, X+
    2eba:	fc 91       	ld	r31, X
    2ebc:	18 97       	sbiw	r26, 0x08	; 8
    2ebe:	00 84       	ldd	r0, Z+8	; 0x08
    2ec0:	f1 85       	ldd	r31, Z+9	; 0x09
    2ec2:	e0 2d       	mov	r30, r0
    2ec4:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ec6:	b1 8d       	ldd	r27, Z+25	; 0x19
    2ec8:	c2 89       	ldd	r28, Z+18	; 0x12
    2eca:	d3 89       	ldd	r29, Z+19	; 0x13
    2ecc:	84 89       	ldd	r24, Z+20	; 0x14
    2ece:	95 89       	ldd	r25, Z+21	; 0x15
    2ed0:	9f 83       	std	Y+7, r25	; 0x07
    2ed2:	8e 83       	std	Y+6, r24	; 0x06
    2ed4:	c4 89       	ldd	r28, Z+20	; 0x14
    2ed6:	d5 89       	ldd	r29, Z+21	; 0x15
    2ed8:	82 89       	ldd	r24, Z+18	; 0x12
    2eda:	93 89       	ldd	r25, Z+19	; 0x13
    2edc:	9d 83       	std	Y+5, r25	; 0x05
    2ede:	8c 83       	std	Y+4, r24	; 0x04
    2ee0:	9f 01       	movw	r18, r30
    2ee2:	22 5f       	subi	r18, 0xF2	; 242
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	11 96       	adiw	r26, 0x01	; 1
    2ee8:	8d 91       	ld	r24, X+
    2eea:	9c 91       	ld	r25, X
    2eec:	12 97       	sbiw	r26, 0x02	; 2
    2eee:	82 17       	cp	r24, r18
    2ef0:	93 07       	cpc	r25, r19
    2ef2:	31 f4       	brne	.+12     	; 0x2f00 <xTaskRemoveFromEventList+0x50>
    2ef4:	84 89       	ldd	r24, Z+20	; 0x14
    2ef6:	95 89       	ldd	r25, Z+21	; 0x15
    2ef8:	12 96       	adiw	r26, 0x02	; 2
    2efa:	9c 93       	st	X, r25
    2efc:	8e 93       	st	-X, r24
    2efe:	11 97       	sbiw	r26, 0x01	; 1
    2f00:	11 8e       	std	Z+25, r1	; 0x19
    2f02:	10 8e       	std	Z+24, r1	; 0x18
    2f04:	8c 91       	ld	r24, X
    2f06:	81 50       	subi	r24, 0x01	; 1
    2f08:	8c 93       	st	X, r24
    2f0a:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    2f0e:	81 11       	cpse	r24, r1
    2f10:	52 c0       	rjmp	.+164    	; 0x2fb6 <xTaskRemoveFromEventList+0x106>
    2f12:	a4 85       	ldd	r26, Z+12	; 0x0c
    2f14:	b5 85       	ldd	r27, Z+13	; 0x0d
    2f16:	c6 81       	ldd	r28, Z+6	; 0x06
    2f18:	d7 81       	ldd	r29, Z+7	; 0x07
    2f1a:	80 85       	ldd	r24, Z+8	; 0x08
    2f1c:	91 85       	ldd	r25, Z+9	; 0x09
    2f1e:	9f 83       	std	Y+7, r25	; 0x07
    2f20:	8e 83       	std	Y+6, r24	; 0x06
    2f22:	c0 85       	ldd	r28, Z+8	; 0x08
    2f24:	d1 85       	ldd	r29, Z+9	; 0x09
    2f26:	86 81       	ldd	r24, Z+6	; 0x06
    2f28:	97 81       	ldd	r25, Z+7	; 0x07
    2f2a:	9d 83       	std	Y+5, r25	; 0x05
    2f2c:	8c 83       	std	Y+4, r24	; 0x04
    2f2e:	9f 01       	movw	r18, r30
    2f30:	2e 5f       	subi	r18, 0xFE	; 254
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	11 96       	adiw	r26, 0x01	; 1
    2f36:	8d 91       	ld	r24, X+
    2f38:	9c 91       	ld	r25, X
    2f3a:	12 97       	sbiw	r26, 0x02	; 2
    2f3c:	82 17       	cp	r24, r18
    2f3e:	93 07       	cpc	r25, r19
    2f40:	31 f4       	brne	.+12     	; 0x2f4e <xTaskRemoveFromEventList+0x9e>
    2f42:	80 85       	ldd	r24, Z+8	; 0x08
    2f44:	91 85       	ldd	r25, Z+9	; 0x09
    2f46:	12 96       	adiw	r26, 0x02	; 2
    2f48:	9c 93       	st	X, r25
    2f4a:	8e 93       	st	-X, r24
    2f4c:	11 97       	sbiw	r26, 0x01	; 1
    2f4e:	15 86       	std	Z+13, r1	; 0x0d
    2f50:	14 86       	std	Z+12, r1	; 0x0c
    2f52:	8c 91       	ld	r24, X
    2f54:	81 50       	subi	r24, 0x01	; 1
    2f56:	8c 93       	st	X, r24
    2f58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2f5a:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    2f5e:	8a 17       	cp	r24, r26
    2f60:	10 f4       	brcc	.+4      	; 0x2f66 <xTaskRemoveFromEventList+0xb6>
    2f62:	a0 93 7f 12 	sts	0x127F, r26	; 0x80127f <uxTopReadyPriority>
    2f66:	8b e0       	ldi	r24, 0x0B	; 11
    2f68:	8a 9f       	mul	r24, r26
    2f6a:	d0 01       	movw	r26, r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	af 53       	subi	r26, 0x3F	; 63
    2f70:	bd 4e       	sbci	r27, 0xED	; 237
    2f72:	11 96       	adiw	r26, 0x01	; 1
    2f74:	0d 90       	ld	r0, X+
    2f76:	bc 91       	ld	r27, X
    2f78:	a0 2d       	mov	r26, r0
    2f7a:	b7 83       	std	Z+7, r27	; 0x07
    2f7c:	a6 83       	std	Z+6, r26	; 0x06
    2f7e:	16 96       	adiw	r26, 0x06	; 6
    2f80:	4d 91       	ld	r20, X+
    2f82:	5c 91       	ld	r21, X
    2f84:	17 97       	sbiw	r26, 0x07	; 7
    2f86:	51 87       	std	Z+9, r21	; 0x09
    2f88:	40 87       	std	Z+8, r20	; 0x08
    2f8a:	16 96       	adiw	r26, 0x06	; 6
    2f8c:	cd 91       	ld	r28, X+
    2f8e:	dc 91       	ld	r29, X
    2f90:	17 97       	sbiw	r26, 0x07	; 7
    2f92:	3d 83       	std	Y+5, r19	; 0x05
    2f94:	2c 83       	std	Y+4, r18	; 0x04
    2f96:	17 96       	adiw	r26, 0x07	; 7
    2f98:	3c 93       	st	X, r19
    2f9a:	2e 93       	st	-X, r18
    2f9c:	16 97       	sbiw	r26, 0x06	; 6
    2f9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2fa0:	8a 9f       	mul	r24, r26
    2fa2:	d0 01       	movw	r26, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	af 53       	subi	r26, 0x3F	; 63
    2fa8:	bd 4e       	sbci	r27, 0xED	; 237
    2faa:	b5 87       	std	Z+13, r27	; 0x0d
    2fac:	a4 87       	std	Z+12, r26	; 0x0c
    2fae:	8c 91       	ld	r24, X
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	8c 93       	st	X, r24
    2fb4:	1c c0       	rjmp	.+56     	; 0x2fee <xTaskRemoveFromEventList+0x13e>
    2fb6:	4c e9       	ldi	r20, 0x9C	; 156
    2fb8:	52 e1       	ldi	r21, 0x12	; 18
    2fba:	da 01       	movw	r26, r20
    2fbc:	11 96       	adiw	r26, 0x01	; 1
    2fbe:	cd 91       	ld	r28, X+
    2fc0:	dc 91       	ld	r29, X
    2fc2:	12 97       	sbiw	r26, 0x02	; 2
    2fc4:	d3 8b       	std	Z+19, r29	; 0x13
    2fc6:	c2 8b       	std	Z+18, r28	; 0x12
    2fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fca:	9f 81       	ldd	r25, Y+7	; 0x07
    2fcc:	95 8b       	std	Z+21, r25	; 0x15
    2fce:	84 8b       	std	Z+20, r24	; 0x14
    2fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	15 96       	adiw	r26, 0x05	; 5
    2fd8:	3c 93       	st	X, r19
    2fda:	2e 93       	st	-X, r18
    2fdc:	14 97       	sbiw	r26, 0x04	; 4
    2fde:	3f 83       	std	Y+7, r19	; 0x07
    2fe0:	2e 83       	std	Y+6, r18	; 0x06
    2fe2:	51 8f       	std	Z+25, r21	; 0x19
    2fe4:	40 8f       	std	Z+24, r20	; 0x18
    2fe6:	da 01       	movw	r26, r20
    2fe8:	8c 91       	ld	r24, X
    2fea:	8f 5f       	subi	r24, 0xFF	; 255
    2fec:	8c 93       	st	X, r24
    2fee:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    2ff2:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    2ff6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ff8:	5a 96       	adiw	r26, 0x1a	; 26
    2ffa:	8c 91       	ld	r24, X
    2ffc:	89 17       	cp	r24, r25
    2ffe:	20 f4       	brcc	.+8      	; 0x3008 <xTaskRemoveFromEventList+0x158>
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    3006:	01 c0       	rjmp	.+2      	; 0x300a <xTaskRemoveFromEventList+0x15a>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	08 95       	ret

00003010 <vTaskSetTimeOutState>:
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	0f 92       	push	r0
    3016:	20 91 78 12 	lds	r18, 0x1278	; 0x801278 <xNumOfOverflows>
    301a:	fc 01       	movw	r30, r24
    301c:	20 83       	st	Z, r18
    301e:	40 91 80 12 	lds	r20, 0x1280	; 0x801280 <xTickCount>
    3022:	50 91 81 12 	lds	r21, 0x1281	; 0x801281 <xTickCount+0x1>
    3026:	60 91 82 12 	lds	r22, 0x1282	; 0x801282 <xTickCount+0x2>
    302a:	70 91 83 12 	lds	r23, 0x1283	; 0x801283 <xTickCount+0x3>
    302e:	41 83       	std	Z+1, r20	; 0x01
    3030:	52 83       	std	Z+2, r21	; 0x02
    3032:	63 83       	std	Z+3, r22	; 0x03
    3034:	74 83       	std	Z+4, r23	; 0x04
    3036:	0f 90       	pop	r0
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	08 95       	ret

0000303c <vTaskInternalSetTimeOutState>:
    303c:	20 91 78 12 	lds	r18, 0x1278	; 0x801278 <xNumOfOverflows>
    3040:	fc 01       	movw	r30, r24
    3042:	20 83       	st	Z, r18
    3044:	40 91 80 12 	lds	r20, 0x1280	; 0x801280 <xTickCount>
    3048:	50 91 81 12 	lds	r21, 0x1281	; 0x801281 <xTickCount+0x1>
    304c:	60 91 82 12 	lds	r22, 0x1282	; 0x801282 <xTickCount+0x2>
    3050:	70 91 83 12 	lds	r23, 0x1283	; 0x801283 <xTickCount+0x3>
    3054:	41 83       	std	Z+1, r20	; 0x01
    3056:	52 83       	std	Z+2, r21	; 0x02
    3058:	63 83       	std	Z+3, r22	; 0x03
    305a:	74 83       	std	Z+4, r23	; 0x04
    305c:	08 95       	ret

0000305e <xTaskCheckForTimeOut>:
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	fb 01       	movw	r30, r22
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	0f 92       	push	r0
    3076:	40 91 80 12 	lds	r20, 0x1280	; 0x801280 <xTickCount>
    307a:	50 91 81 12 	lds	r21, 0x1281	; 0x801281 <xTickCount+0x1>
    307e:	60 91 82 12 	lds	r22, 0x1282	; 0x801282 <xTickCount+0x2>
    3082:	70 91 83 12 	lds	r23, 0x1283	; 0x801283 <xTickCount+0x3>
    3086:	00 81       	ld	r16, Z
    3088:	11 81       	ldd	r17, Z+1	; 0x01
    308a:	22 81       	ldd	r18, Z+2	; 0x02
    308c:	33 81       	ldd	r19, Z+3	; 0x03
    308e:	0f 3f       	cpi	r16, 0xFF	; 255
    3090:	af ef       	ldi	r26, 0xFF	; 255
    3092:	1a 07       	cpc	r17, r26
    3094:	2a 07       	cpc	r18, r26
    3096:	3a 07       	cpc	r19, r26
    3098:	79 f1       	breq	.+94     	; 0x30f8 <xTaskCheckForTimeOut+0x9a>
    309a:	ec 01       	movw	r28, r24
    309c:	c9 80       	ldd	r12, Y+1	; 0x01
    309e:	da 80       	ldd	r13, Y+2	; 0x02
    30a0:	eb 80       	ldd	r14, Y+3	; 0x03
    30a2:	fc 80       	ldd	r15, Y+4	; 0x04
    30a4:	a0 91 78 12 	lds	r26, 0x1278	; 0x801278 <xNumOfOverflows>
    30a8:	b8 81       	ld	r27, Y
    30aa:	ba 17       	cp	r27, r26
    30ac:	59 f0       	breq	.+22     	; 0x30c4 <xTaskCheckForTimeOut+0x66>
    30ae:	4c 15       	cp	r20, r12
    30b0:	5d 05       	cpc	r21, r13
    30b2:	6e 05       	cpc	r22, r14
    30b4:	7f 05       	cpc	r23, r15
    30b6:	30 f0       	brcs	.+12     	; 0x30c4 <xTaskCheckForTimeOut+0x66>
    30b8:	10 82       	st	Z, r1
    30ba:	11 82       	std	Z+1, r1	; 0x01
    30bc:	12 82       	std	Z+2, r1	; 0x02
    30be:	13 82       	std	Z+3, r1	; 0x03
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	1b c0       	rjmp	.+54     	; 0x30fa <xTaskCheckForTimeOut+0x9c>
    30c4:	4c 19       	sub	r20, r12
    30c6:	5d 09       	sbc	r21, r13
    30c8:	6e 09       	sbc	r22, r14
    30ca:	7f 09       	sbc	r23, r15
    30cc:	40 17       	cp	r20, r16
    30ce:	51 07       	cpc	r21, r17
    30d0:	62 07       	cpc	r22, r18
    30d2:	73 07       	cpc	r23, r19
    30d4:	58 f4       	brcc	.+22     	; 0x30ec <xTaskCheckForTimeOut+0x8e>
    30d6:	04 1b       	sub	r16, r20
    30d8:	15 0b       	sbc	r17, r21
    30da:	26 0b       	sbc	r18, r22
    30dc:	37 0b       	sbc	r19, r23
    30de:	00 83       	st	Z, r16
    30e0:	11 83       	std	Z+1, r17	; 0x01
    30e2:	22 83       	std	Z+2, r18	; 0x02
    30e4:	33 83       	std	Z+3, r19	; 0x03
    30e6:	aa df       	rcall	.-172    	; 0x303c <vTaskInternalSetTimeOutState>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	07 c0       	rjmp	.+14     	; 0x30fa <xTaskCheckForTimeOut+0x9c>
    30ec:	10 82       	st	Z, r1
    30ee:	11 82       	std	Z+1, r1	; 0x01
    30f0:	12 82       	std	Z+2, r1	; 0x02
    30f2:	13 82       	std	Z+3, r1	; 0x03
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	01 c0       	rjmp	.+2      	; 0x30fa <xTaskCheckForTimeOut+0x9c>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0f 90       	pop	r0
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	ff 90       	pop	r15
    3108:	ef 90       	pop	r14
    310a:	df 90       	pop	r13
    310c:	cf 90       	pop	r12
    310e:	08 95       	ret

00003110 <vTaskMissedYield>:
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    3116:	08 95       	ret

00003118 <xTaskGetCurrentTaskHandle>:
    3118:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    311c:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3120:	08 95       	ret

00003122 <xTaskGetSchedulerState>:
    3122:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <xSchedulerRunning>
    3126:	88 23       	and	r24, r24
    3128:	31 f0       	breq	.+12     	; 0x3136 <xTaskGetSchedulerState+0x14>
    312a:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    312e:	88 23       	and	r24, r24
    3130:	21 f0       	breq	.+8      	; 0x313a <xTaskGetSchedulerState+0x18>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	08 95       	ret
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	08 95       	ret
    313a:	82 e0       	ldi	r24, 0x02	; 2
    313c:	08 95       	ret

0000313e <xTaskPriorityInherit>:
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	fc 01       	movw	r30, r24
    3148:	89 2b       	or	r24, r25
    314a:	09 f4       	brne	.+2      	; 0x314e <xTaskPriorityInherit+0x10>
    314c:	79 c0       	rjmp	.+242    	; 0x3240 <xTaskPriorityInherit+0x102>
    314e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3150:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    3154:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3158:	5a 96       	adiw	r26, 0x1a	; 26
    315a:	9c 91       	ld	r25, X
    315c:	89 17       	cp	r24, r25
    315e:	08 f0       	brcs	.+2      	; 0x3162 <xTaskPriorityInherit+0x24>
    3160:	63 c0       	rjmp	.+198    	; 0x3228 <xTaskPriorityInherit+0xea>
    3162:	46 85       	ldd	r20, Z+14	; 0x0e
    3164:	57 85       	ldd	r21, Z+15	; 0x0f
    3166:	60 89       	ldd	r22, Z+16	; 0x10
    3168:	71 89       	ldd	r23, Z+17	; 0x11
    316a:	77 23       	and	r23, r23
    316c:	94 f0       	brlt	.+36     	; 0x3192 <xTaskPriorityInherit+0x54>
    316e:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    3172:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3176:	5a 96       	adiw	r26, 0x1a	; 26
    3178:	9c 91       	ld	r25, X
    317a:	4a e0       	ldi	r20, 0x0A	; 10
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	49 1b       	sub	r20, r25
    3184:	51 09       	sbc	r21, r1
    3186:	61 09       	sbc	r22, r1
    3188:	71 09       	sbc	r23, r1
    318a:	46 87       	std	Z+14, r20	; 0x0e
    318c:	57 87       	std	Z+15, r21	; 0x0f
    318e:	60 8b       	std	Z+16, r22	; 0x10
    3190:	71 8b       	std	Z+17, r23	; 0x11
    3192:	2b e0       	ldi	r18, 0x0B	; 11
    3194:	82 9f       	mul	r24, r18
    3196:	c0 01       	movw	r24, r0
    3198:	11 24       	eor	r1, r1
    319a:	8f 53       	subi	r24, 0x3F	; 63
    319c:	9d 4e       	sbci	r25, 0xED	; 237
    319e:	24 85       	ldd	r18, Z+12	; 0x0c
    31a0:	35 85       	ldd	r19, Z+13	; 0x0d
    31a2:	28 17       	cp	r18, r24
    31a4:	39 07       	cpc	r19, r25
    31a6:	b9 f5       	brne	.+110    	; 0x3216 <xTaskPriorityInherit+0xd8>
    31a8:	ef 01       	movw	r28, r30
    31aa:	8f 01       	movw	r16, r30
    31ac:	0e 5f       	subi	r16, 0xFE	; 254
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	c8 01       	movw	r24, r16
    31b2:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    31b6:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    31ba:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    31be:	e2 8d       	ldd	r30, Z+26	; 0x1a
    31c0:	ea 8f       	std	Y+26, r30	; 0x1a
    31c2:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    31c6:	8e 17       	cp	r24, r30
    31c8:	10 f4       	brcc	.+4      	; 0x31ce <xTaskPriorityInherit+0x90>
    31ca:	e0 93 7f 12 	sts	0x127F, r30	; 0x80127f <uxTopReadyPriority>
    31ce:	8b e0       	ldi	r24, 0x0B	; 11
    31d0:	8e 9f       	mul	r24, r30
    31d2:	f0 01       	movw	r30, r0
    31d4:	11 24       	eor	r1, r1
    31d6:	ef 53       	subi	r30, 0x3F	; 63
    31d8:	fd 4e       	sbci	r31, 0xED	; 237
    31da:	01 80       	ldd	r0, Z+1	; 0x01
    31dc:	f2 81       	ldd	r31, Z+2	; 0x02
    31de:	e0 2d       	mov	r30, r0
    31e0:	ff 83       	std	Y+7, r31	; 0x07
    31e2:	ee 83       	std	Y+6, r30	; 0x06
    31e4:	26 81       	ldd	r18, Z+6	; 0x06
    31e6:	37 81       	ldd	r19, Z+7	; 0x07
    31e8:	39 87       	std	Y+9, r19	; 0x09
    31ea:	28 87       	std	Y+8, r18	; 0x08
    31ec:	a6 81       	ldd	r26, Z+6	; 0x06
    31ee:	b7 81       	ldd	r27, Z+7	; 0x07
    31f0:	15 96       	adiw	r26, 0x05	; 5
    31f2:	1c 93       	st	X, r17
    31f4:	0e 93       	st	-X, r16
    31f6:	14 97       	sbiw	r26, 0x04	; 4
    31f8:	17 83       	std	Z+7, r17	; 0x07
    31fa:	06 83       	std	Z+6, r16	; 0x06
    31fc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31fe:	8e 9f       	mul	r24, r30
    3200:	f0 01       	movw	r30, r0
    3202:	11 24       	eor	r1, r1
    3204:	ef 53       	subi	r30, 0x3F	; 63
    3206:	fd 4e       	sbci	r31, 0xED	; 237
    3208:	fd 87       	std	Y+13, r31	; 0x0d
    320a:	ec 87       	std	Y+12, r30	; 0x0c
    320c:	80 81       	ld	r24, Z
    320e:	8f 5f       	subi	r24, 0xFF	; 255
    3210:	80 83       	st	Z, r24
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	16 c0       	rjmp	.+44     	; 0x3242 <xTaskPriorityInherit+0x104>
    3216:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    321a:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    321e:	5a 96       	adiw	r26, 0x1a	; 26
    3220:	8c 91       	ld	r24, X
    3222:	82 8f       	std	Z+26, r24	; 0x1a
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	0d c0       	rjmp	.+26     	; 0x3242 <xTaskPriorityInherit+0x104>
    3228:	a0 91 2f 13 	lds	r26, 0x132F	; 0x80132f <pxCurrentTCB>
    322c:	b0 91 30 13 	lds	r27, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	25 a5       	ldd	r18, Z+45	; 0x2d
    3234:	5a 96       	adiw	r26, 0x1a	; 26
    3236:	9c 91       	ld	r25, X
    3238:	29 17       	cp	r18, r25
    323a:	18 f0       	brcs	.+6      	; 0x3242 <xTaskPriorityInherit+0x104>
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <xTaskPriorityInherit+0x104>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	08 95       	ret

0000324c <xTaskPriorityDisinherit>:
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	fc 01       	movw	r30, r24
    3256:	89 2b       	or	r24, r25
    3258:	09 f4       	brne	.+2      	; 0x325c <xTaskPriorityDisinherit+0x10>
    325a:	49 c0       	rjmp	.+146    	; 0x32ee <xTaskPriorityDisinherit+0xa2>
    325c:	86 a5       	ldd	r24, Z+46	; 0x2e
    325e:	81 50       	subi	r24, 0x01	; 1
    3260:	86 a7       	std	Z+46, r24	; 0x2e
    3262:	22 8d       	ldd	r18, Z+26	; 0x1a
    3264:	95 a5       	ldd	r25, Z+45	; 0x2d
    3266:	29 17       	cp	r18, r25
    3268:	09 f4       	brne	.+2      	; 0x326c <xTaskPriorityDisinherit+0x20>
    326a:	43 c0       	rjmp	.+134    	; 0x32f2 <xTaskPriorityDisinherit+0xa6>
    326c:	81 11       	cpse	r24, r1
    326e:	43 c0       	rjmp	.+134    	; 0x32f6 <xTaskPriorityDisinherit+0xaa>
    3270:	ef 01       	movw	r28, r30
    3272:	8f 01       	movw	r16, r30
    3274:	0e 5f       	subi	r16, 0xFE	; 254
    3276:	1f 4f       	sbci	r17, 0xFF	; 255
    3278:	c8 01       	movw	r24, r16
    327a:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    327e:	ed a5       	ldd	r30, Y+45	; 0x2d
    3280:	ea 8f       	std	Y+26, r30	; 0x1a
    3282:	8a e0       	ldi	r24, 0x0A	; 10
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	a0 e0       	ldi	r26, 0x00	; 0
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	8e 1b       	sub	r24, r30
    328c:	91 09       	sbc	r25, r1
    328e:	a1 09       	sbc	r26, r1
    3290:	b1 09       	sbc	r27, r1
    3292:	8e 87       	std	Y+14, r24	; 0x0e
    3294:	9f 87       	std	Y+15, r25	; 0x0f
    3296:	a8 8b       	std	Y+16, r26	; 0x10
    3298:	b9 8b       	std	Y+17, r27	; 0x11
    329a:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    329e:	8e 17       	cp	r24, r30
    32a0:	10 f4       	brcc	.+4      	; 0x32a6 <xTaskPriorityDisinherit+0x5a>
    32a2:	e0 93 7f 12 	sts	0x127F, r30	; 0x80127f <uxTopReadyPriority>
    32a6:	8b e0       	ldi	r24, 0x0B	; 11
    32a8:	8e 9f       	mul	r24, r30
    32aa:	f0 01       	movw	r30, r0
    32ac:	11 24       	eor	r1, r1
    32ae:	ef 53       	subi	r30, 0x3F	; 63
    32b0:	fd 4e       	sbci	r31, 0xED	; 237
    32b2:	01 80       	ldd	r0, Z+1	; 0x01
    32b4:	f2 81       	ldd	r31, Z+2	; 0x02
    32b6:	e0 2d       	mov	r30, r0
    32b8:	ff 83       	std	Y+7, r31	; 0x07
    32ba:	ee 83       	std	Y+6, r30	; 0x06
    32bc:	26 81       	ldd	r18, Z+6	; 0x06
    32be:	37 81       	ldd	r19, Z+7	; 0x07
    32c0:	39 87       	std	Y+9, r19	; 0x09
    32c2:	28 87       	std	Y+8, r18	; 0x08
    32c4:	a6 81       	ldd	r26, Z+6	; 0x06
    32c6:	b7 81       	ldd	r27, Z+7	; 0x07
    32c8:	15 96       	adiw	r26, 0x05	; 5
    32ca:	1c 93       	st	X, r17
    32cc:	0e 93       	st	-X, r16
    32ce:	14 97       	sbiw	r26, 0x04	; 4
    32d0:	17 83       	std	Z+7, r17	; 0x07
    32d2:	06 83       	std	Z+6, r16	; 0x06
    32d4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    32d6:	8e 9f       	mul	r24, r30
    32d8:	f0 01       	movw	r30, r0
    32da:	11 24       	eor	r1, r1
    32dc:	ef 53       	subi	r30, 0x3F	; 63
    32de:	fd 4e       	sbci	r31, 0xED	; 237
    32e0:	fd 87       	std	Y+13, r31	; 0x0d
    32e2:	ec 87       	std	Y+12, r30	; 0x0c
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	80 83       	st	Z, r24
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <xTaskPriorityDisinherit+0xac>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	03 c0       	rjmp	.+6      	; 0x32f8 <xTaskPriorityDisinherit+0xac>
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	01 c0       	rjmp	.+2      	; 0x32f8 <xTaskPriorityDisinherit+0xac>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	08 95       	ret

00003302 <vTaskPriorityDisinheritAfterTimeout>:
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	fc 01       	movw	r30, r24
    330c:	89 2b       	or	r24, r25
    330e:	09 f4       	brne	.+2      	; 0x3312 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3310:	5a c0       	rjmp	.+180    	; 0x33c6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3312:	85 a5       	ldd	r24, Z+45	; 0x2d
    3314:	86 17       	cp	r24, r22
    3316:	08 f4       	brcc	.+2      	; 0x331a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3318:	86 2f       	mov	r24, r22
    331a:	92 8d       	ldd	r25, Z+26	; 0x1a
    331c:	98 17       	cp	r25, r24
    331e:	09 f4       	brne	.+2      	; 0x3322 <vTaskPriorityDisinheritAfterTimeout+0x20>
    3320:	52 c0       	rjmp	.+164    	; 0x33c6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3322:	26 a5       	ldd	r18, Z+46	; 0x2e
    3324:	21 30       	cpi	r18, 0x01	; 1
    3326:	09 f0       	breq	.+2      	; 0x332a <vTaskPriorityDisinheritAfterTimeout+0x28>
    3328:	4e c0       	rjmp	.+156    	; 0x33c6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    332a:	82 8f       	std	Z+26, r24	; 0x1a
    332c:	46 85       	ldd	r20, Z+14	; 0x0e
    332e:	57 85       	ldd	r21, Z+15	; 0x0f
    3330:	60 89       	ldd	r22, Z+16	; 0x10
    3332:	71 89       	ldd	r23, Z+17	; 0x11
    3334:	77 23       	and	r23, r23
    3336:	64 f0       	brlt	.+24     	; 0x3350 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3338:	4a e0       	ldi	r20, 0x0A	; 10
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	70 e0       	ldi	r23, 0x00	; 0
    3340:	48 1b       	sub	r20, r24
    3342:	51 09       	sbc	r21, r1
    3344:	61 09       	sbc	r22, r1
    3346:	71 09       	sbc	r23, r1
    3348:	46 87       	std	Z+14, r20	; 0x0e
    334a:	57 87       	std	Z+15, r21	; 0x0f
    334c:	60 8b       	std	Z+16, r22	; 0x10
    334e:	71 8b       	std	Z+17, r23	; 0x11
    3350:	2b e0       	ldi	r18, 0x0B	; 11
    3352:	92 9f       	mul	r25, r18
    3354:	c0 01       	movw	r24, r0
    3356:	11 24       	eor	r1, r1
    3358:	8f 53       	subi	r24, 0x3F	; 63
    335a:	9d 4e       	sbci	r25, 0xED	; 237
    335c:	24 85       	ldd	r18, Z+12	; 0x0c
    335e:	35 85       	ldd	r19, Z+13	; 0x0d
    3360:	28 17       	cp	r18, r24
    3362:	39 07       	cpc	r19, r25
    3364:	81 f5       	brne	.+96     	; 0x33c6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3366:	ef 01       	movw	r28, r30
    3368:	8f 01       	movw	r16, r30
    336a:	0e 5f       	subi	r16, 0xFE	; 254
    336c:	1f 4f       	sbci	r17, 0xFF	; 255
    336e:	c8 01       	movw	r24, r16
    3370:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    3374:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3376:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    337a:	8e 17       	cp	r24, r30
    337c:	10 f4       	brcc	.+4      	; 0x3382 <vTaskPriorityDisinheritAfterTimeout+0x80>
    337e:	e0 93 7f 12 	sts	0x127F, r30	; 0x80127f <uxTopReadyPriority>
    3382:	8b e0       	ldi	r24, 0x0B	; 11
    3384:	8e 9f       	mul	r24, r30
    3386:	f0 01       	movw	r30, r0
    3388:	11 24       	eor	r1, r1
    338a:	ef 53       	subi	r30, 0x3F	; 63
    338c:	fd 4e       	sbci	r31, 0xED	; 237
    338e:	01 80       	ldd	r0, Z+1	; 0x01
    3390:	f2 81       	ldd	r31, Z+2	; 0x02
    3392:	e0 2d       	mov	r30, r0
    3394:	ff 83       	std	Y+7, r31	; 0x07
    3396:	ee 83       	std	Y+6, r30	; 0x06
    3398:	26 81       	ldd	r18, Z+6	; 0x06
    339a:	37 81       	ldd	r19, Z+7	; 0x07
    339c:	39 87       	std	Y+9, r19	; 0x09
    339e:	28 87       	std	Y+8, r18	; 0x08
    33a0:	a6 81       	ldd	r26, Z+6	; 0x06
    33a2:	b7 81       	ldd	r27, Z+7	; 0x07
    33a4:	15 96       	adiw	r26, 0x05	; 5
    33a6:	1c 93       	st	X, r17
    33a8:	0e 93       	st	-X, r16
    33aa:	14 97       	sbiw	r26, 0x04	; 4
    33ac:	17 83       	std	Z+7, r17	; 0x07
    33ae:	06 83       	std	Z+6, r16	; 0x06
    33b0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    33b2:	8e 9f       	mul	r24, r30
    33b4:	f0 01       	movw	r30, r0
    33b6:	11 24       	eor	r1, r1
    33b8:	ef 53       	subi	r30, 0x3F	; 63
    33ba:	fd 4e       	sbci	r31, 0xED	; 237
    33bc:	fd 87       	std	Y+13, r31	; 0x0d
    33be:	ec 87       	std	Y+12, r30	; 0x0c
    33c0:	80 81       	ld	r24, Z
    33c2:	8f 5f       	subi	r24, 0xFF	; 255
    33c4:	80 83       	st	Z, r24
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	08 95       	ret

000033d0 <pvTaskIncrementMutexHeldCount>:
    33d0:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    33d4:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    33d8:	89 2b       	or	r24, r25
    33da:	39 f0       	breq	.+14     	; 0x33ea <pvTaskIncrementMutexHeldCount+0x1a>
    33dc:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    33e0:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    33e4:	86 a5       	ldd	r24, Z+46	; 0x2e
    33e6:	8f 5f       	subi	r24, 0xFF	; 255
    33e8:	86 a7       	std	Z+46, r24	; 0x2e
    33ea:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    33ee:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    33f2:	08 95       	ret

000033f4 <xTaskGenericNotifyWait>:
    33f4:	4f 92       	push	r4
    33f6:	5f 92       	push	r5
    33f8:	6f 92       	push	r6
    33fa:	7f 92       	push	r7
    33fc:	af 92       	push	r10
    33fe:	bf 92       	push	r11
    3400:	cf 92       	push	r12
    3402:	df 92       	push	r13
    3404:	ef 92       	push	r14
    3406:	ff 92       	push	r15
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	28 01       	movw	r4, r16
    3412:	39 01       	movw	r6, r18
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	0f 92       	push	r0
    341a:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    341e:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3422:	c8 2f       	mov	r28, r24
    3424:	d0 e0       	ldi	r29, 0x00	; 0
    3426:	ec 0f       	add	r30, r28
    3428:	fd 1f       	adc	r31, r29
    342a:	83 a9       	ldd	r24, Z+51	; 0x33
    342c:	82 30       	cpi	r24, 0x02	; 2
    342e:	79 f1       	breq	.+94     	; 0x348e <xTaskGenericNotifyWait+0x9a>
    3430:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    3434:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3438:	ce 01       	movw	r24, r28
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	88 0f       	add	r24, r24
    3440:	99 1f       	adc	r25, r25
    3442:	e8 0f       	add	r30, r24
    3444:	f9 1f       	adc	r31, r25
    3446:	87 a5       	ldd	r24, Z+47	; 0x2f
    3448:	90 a9       	ldd	r25, Z+48	; 0x30
    344a:	a1 a9       	ldd	r26, Z+49	; 0x31
    344c:	b2 a9       	ldd	r27, Z+50	; 0x32
    344e:	40 95       	com	r20
    3450:	50 95       	com	r21
    3452:	60 95       	com	r22
    3454:	70 95       	com	r23
    3456:	48 23       	and	r20, r24
    3458:	59 23       	and	r21, r25
    345a:	6a 23       	and	r22, r26
    345c:	7b 23       	and	r23, r27
    345e:	47 a7       	std	Z+47, r20	; 0x2f
    3460:	50 ab       	std	Z+48, r21	; 0x30
    3462:	61 ab       	std	Z+49, r22	; 0x31
    3464:	72 ab       	std	Z+50, r23	; 0x32
    3466:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    346a:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    346e:	ec 0f       	add	r30, r28
    3470:	fd 1f       	adc	r31, r29
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	83 ab       	std	Z+51, r24	; 0x33
    3476:	a1 14       	cp	r10, r1
    3478:	b1 04       	cpc	r11, r1
    347a:	c1 04       	cpc	r12, r1
    347c:	d1 04       	cpc	r13, r1
    347e:	39 f0       	breq	.+14     	; 0x348e <xTaskGenericNotifyWait+0x9a>
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	c6 01       	movw	r24, r12
    3484:	b5 01       	movw	r22, r10
    3486:	0e 94 37 12 	call	0x246e	; 0x246e <prvAddCurrentTaskToDelayedList>
    348a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
    348e:	0f 90       	pop	r0
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	0f 92       	push	r0
    3498:	e1 14       	cp	r14, r1
    349a:	f1 04       	cpc	r15, r1
    349c:	a1 f0       	breq	.+40     	; 0x34c6 <xTaskGenericNotifyWait+0xd2>
    349e:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    34a2:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    34a6:	ce 01       	movw	r24, r28
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	e8 0f       	add	r30, r24
    34b2:	f9 1f       	adc	r31, r25
    34b4:	87 a5       	ldd	r24, Z+47	; 0x2f
    34b6:	90 a9       	ldd	r25, Z+48	; 0x30
    34b8:	a1 a9       	ldd	r26, Z+49	; 0x31
    34ba:	b2 a9       	ldd	r27, Z+50	; 0x32
    34bc:	f7 01       	movw	r30, r14
    34be:	80 83       	st	Z, r24
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	a2 83       	std	Z+2, r26	; 0x02
    34c4:	b3 83       	std	Z+3, r27	; 0x03
    34c6:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    34ca:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    34ce:	ec 0f       	add	r30, r28
    34d0:	fd 1f       	adc	r31, r29
    34d2:	83 a9       	ldd	r24, Z+51	; 0x33
    34d4:	82 30       	cpi	r24, 0x02	; 2
    34d6:	e9 f4       	brne	.+58     	; 0x3512 <xTaskGenericNotifyWait+0x11e>
    34d8:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    34dc:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    34e0:	ce 01       	movw	r24, r28
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	e8 0f       	add	r30, r24
    34ec:	f9 1f       	adc	r31, r25
    34ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    34f0:	90 a9       	ldd	r25, Z+48	; 0x30
    34f2:	a1 a9       	ldd	r26, Z+49	; 0x31
    34f4:	b2 a9       	ldd	r27, Z+50	; 0x32
    34f6:	40 94       	com	r4
    34f8:	50 94       	com	r5
    34fa:	60 94       	com	r6
    34fc:	70 94       	com	r7
    34fe:	48 22       	and	r4, r24
    3500:	59 22       	and	r5, r25
    3502:	6a 22       	and	r6, r26
    3504:	7b 22       	and	r7, r27
    3506:	47 a6       	std	Z+47, r4	; 0x2f
    3508:	50 aa       	std	Z+48, r5	; 0x30
    350a:	61 aa       	std	Z+49, r6	; 0x31
    350c:	72 aa       	std	Z+50, r7	; 0x32
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	01 c0       	rjmp	.+2      	; 0x3514 <xTaskGenericNotifyWait+0x120>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	20 91 2f 13 	lds	r18, 0x132F	; 0x80132f <pxCurrentTCB>
    3518:	30 91 30 13 	lds	r19, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    351c:	c2 0f       	add	r28, r18
    351e:	d3 1f       	adc	r29, r19
    3520:	1b aa       	std	Y+51, r1	; 0x33
    3522:	0f 90       	pop	r0
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	df 91       	pop	r29
    3528:	cf 91       	pop	r28
    352a:	1f 91       	pop	r17
    352c:	0f 91       	pop	r16
    352e:	ff 90       	pop	r15
    3530:	ef 90       	pop	r14
    3532:	df 90       	pop	r13
    3534:	cf 90       	pop	r12
    3536:	bf 90       	pop	r11
    3538:	af 90       	pop	r10
    353a:	7f 90       	pop	r7
    353c:	6f 90       	pop	r6
    353e:	5f 90       	pop	r5
    3540:	4f 90       	pop	r4
    3542:	08 95       	ret

00003544 <xTaskGenericNotify>:
    3544:	8f 92       	push	r8
    3546:	9f 92       	push	r9
    3548:	af 92       	push	r10
    354a:	bf 92       	push	r11
    354c:	ef 92       	push	r14
    354e:	ff 92       	push	r15
    3550:	0f 93       	push	r16
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	dc 01       	movw	r26, r24
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	0f 92       	push	r0
    355e:	e1 14       	cp	r14, r1
    3560:	f1 04       	cpc	r15, r1
    3562:	79 f0       	breq	.+30     	; 0x3582 <xTaskGenericNotify+0x3e>
    3564:	fc 01       	movw	r30, r24
    3566:	84 e0       	ldi	r24, 0x04	; 4
    3568:	68 9f       	mul	r22, r24
    356a:	e0 0d       	add	r30, r0
    356c:	f1 1d       	adc	r31, r1
    356e:	11 24       	eor	r1, r1
    3570:	87 a4       	ldd	r8, Z+47	; 0x2f
    3572:	90 a8       	ldd	r9, Z+48	; 0x30
    3574:	a1 a8       	ldd	r10, Z+49	; 0x31
    3576:	b2 a8       	ldd	r11, Z+50	; 0x32
    3578:	f7 01       	movw	r30, r14
    357a:	80 82       	st	Z, r8
    357c:	91 82       	std	Z+1, r9	; 0x01
    357e:	a2 82       	std	Z+2, r10	; 0x02
    3580:	b3 82       	std	Z+3, r11	; 0x03
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	fd 01       	movw	r30, r26
    3586:	e6 0f       	add	r30, r22
    3588:	f7 1f       	adc	r31, r23
    358a:	83 a9       	ldd	r24, Z+51	; 0x33
    358c:	92 e0       	ldi	r25, 0x02	; 2
    358e:	93 ab       	std	Z+51, r25	; 0x33
    3590:	02 30       	cpi	r16, 0x02	; 2
    3592:	f9 f0       	breq	.+62     	; 0x35d2 <xTaskGenericNotify+0x8e>
    3594:	18 f4       	brcc	.+6      	; 0x359c <xTaskGenericNotify+0x58>
    3596:	01 30       	cpi	r16, 0x01	; 1
    3598:	31 f0       	breq	.+12     	; 0x35a6 <xTaskGenericNotify+0x62>
    359a:	49 c0       	rjmp	.+146    	; 0x362e <xTaskGenericNotify+0xea>
    359c:	03 30       	cpi	r16, 0x03	; 3
    359e:	69 f1       	breq	.+90     	; 0x35fa <xTaskGenericNotify+0xb6>
    35a0:	04 30       	cpi	r16, 0x04	; 4
    35a2:	b9 f1       	breq	.+110    	; 0x3612 <xTaskGenericNotify+0xce>
    35a4:	44 c0       	rjmp	.+136    	; 0x362e <xTaskGenericNotify+0xea>
    35a6:	66 0f       	add	r22, r22
    35a8:	77 1f       	adc	r23, r23
    35aa:	66 0f       	add	r22, r22
    35ac:	77 1f       	adc	r23, r23
    35ae:	fd 01       	movw	r30, r26
    35b0:	e6 0f       	add	r30, r22
    35b2:	f7 1f       	adc	r31, r23
    35b4:	87 a4       	ldd	r8, Z+47	; 0x2f
    35b6:	90 a8       	ldd	r9, Z+48	; 0x30
    35b8:	a1 a8       	ldd	r10, Z+49	; 0x31
    35ba:	b2 a8       	ldd	r11, Z+50	; 0x32
    35bc:	ba 01       	movw	r22, r20
    35be:	a9 01       	movw	r20, r18
    35c0:	48 29       	or	r20, r8
    35c2:	59 29       	or	r21, r9
    35c4:	6a 29       	or	r22, r10
    35c6:	7b 29       	or	r23, r11
    35c8:	47 a7       	std	Z+47, r20	; 0x2f
    35ca:	50 ab       	std	Z+48, r21	; 0x30
    35cc:	61 ab       	std	Z+49, r22	; 0x31
    35ce:	72 ab       	std	Z+50, r23	; 0x32
    35d0:	2e c0       	rjmp	.+92     	; 0x362e <xTaskGenericNotify+0xea>
    35d2:	66 0f       	add	r22, r22
    35d4:	77 1f       	adc	r23, r23
    35d6:	66 0f       	add	r22, r22
    35d8:	77 1f       	adc	r23, r23
    35da:	fd 01       	movw	r30, r26
    35dc:	e6 0f       	add	r30, r22
    35de:	f7 1f       	adc	r31, r23
    35e0:	47 a5       	ldd	r20, Z+47	; 0x2f
    35e2:	50 a9       	ldd	r21, Z+48	; 0x30
    35e4:	61 a9       	ldd	r22, Z+49	; 0x31
    35e6:	72 a9       	ldd	r23, Z+50	; 0x32
    35e8:	4f 5f       	subi	r20, 0xFF	; 255
    35ea:	5f 4f       	sbci	r21, 0xFF	; 255
    35ec:	6f 4f       	sbci	r22, 0xFF	; 255
    35ee:	7f 4f       	sbci	r23, 0xFF	; 255
    35f0:	47 a7       	std	Z+47, r20	; 0x2f
    35f2:	50 ab       	std	Z+48, r21	; 0x30
    35f4:	61 ab       	std	Z+49, r22	; 0x31
    35f6:	72 ab       	std	Z+50, r23	; 0x32
    35f8:	1a c0       	rjmp	.+52     	; 0x362e <xTaskGenericNotify+0xea>
    35fa:	66 0f       	add	r22, r22
    35fc:	77 1f       	adc	r23, r23
    35fe:	66 0f       	add	r22, r22
    3600:	77 1f       	adc	r23, r23
    3602:	fd 01       	movw	r30, r26
    3604:	e6 0f       	add	r30, r22
    3606:	f7 1f       	adc	r31, r23
    3608:	27 a7       	std	Z+47, r18	; 0x2f
    360a:	30 ab       	std	Z+48, r19	; 0x30
    360c:	41 ab       	std	Z+49, r20	; 0x31
    360e:	52 ab       	std	Z+50, r21	; 0x32
    3610:	0e c0       	rjmp	.+28     	; 0x362e <xTaskGenericNotify+0xea>
    3612:	82 30       	cpi	r24, 0x02	; 2
    3614:	09 f4       	brne	.+2      	; 0x3618 <xTaskGenericNotify+0xd4>
    3616:	79 c0       	rjmp	.+242    	; 0x370a <xTaskGenericNotify+0x1c6>
    3618:	66 0f       	add	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	66 0f       	add	r22, r22
    361e:	77 1f       	adc	r23, r23
    3620:	fd 01       	movw	r30, r26
    3622:	e6 0f       	add	r30, r22
    3624:	f7 1f       	adc	r31, r23
    3626:	27 a7       	std	Z+47, r18	; 0x2f
    3628:	30 ab       	std	Z+48, r19	; 0x30
    362a:	41 ab       	std	Z+49, r20	; 0x31
    362c:	52 ab       	std	Z+50, r21	; 0x32
    362e:	81 30       	cpi	r24, 0x01	; 1
    3630:	09 f0       	breq	.+2      	; 0x3634 <xTaskGenericNotify+0xf0>
    3632:	6d c0       	rjmp	.+218    	; 0x370e <xTaskGenericNotify+0x1ca>
    3634:	1c 96       	adiw	r26, 0x0c	; 12
    3636:	ed 91       	ld	r30, X+
    3638:	fc 91       	ld	r31, X
    363a:	1d 97       	sbiw	r26, 0x0d	; 13
    363c:	16 96       	adiw	r26, 0x06	; 6
    363e:	cd 91       	ld	r28, X+
    3640:	dc 91       	ld	r29, X
    3642:	17 97       	sbiw	r26, 0x07	; 7
    3644:	18 96       	adiw	r26, 0x08	; 8
    3646:	8d 91       	ld	r24, X+
    3648:	9c 91       	ld	r25, X
    364a:	19 97       	sbiw	r26, 0x09	; 9
    364c:	9f 83       	std	Y+7, r25	; 0x07
    364e:	8e 83       	std	Y+6, r24	; 0x06
    3650:	18 96       	adiw	r26, 0x08	; 8
    3652:	cd 91       	ld	r28, X+
    3654:	dc 91       	ld	r29, X
    3656:	19 97       	sbiw	r26, 0x09	; 9
    3658:	16 96       	adiw	r26, 0x06	; 6
    365a:	8d 91       	ld	r24, X+
    365c:	9c 91       	ld	r25, X
    365e:	17 97       	sbiw	r26, 0x07	; 7
    3660:	9d 83       	std	Y+5, r25	; 0x05
    3662:	8c 83       	std	Y+4, r24	; 0x04
    3664:	9d 01       	movw	r18, r26
    3666:	2e 5f       	subi	r18, 0xFE	; 254
    3668:	3f 4f       	sbci	r19, 0xFF	; 255
    366a:	81 81       	ldd	r24, Z+1	; 0x01
    366c:	92 81       	ldd	r25, Z+2	; 0x02
    366e:	82 17       	cp	r24, r18
    3670:	93 07       	cpc	r25, r19
    3672:	31 f4       	brne	.+12     	; 0x3680 <xTaskGenericNotify+0x13c>
    3674:	18 96       	adiw	r26, 0x08	; 8
    3676:	8d 91       	ld	r24, X+
    3678:	9c 91       	ld	r25, X
    367a:	19 97       	sbiw	r26, 0x09	; 9
    367c:	92 83       	std	Z+2, r25	; 0x02
    367e:	81 83       	std	Z+1, r24	; 0x01
    3680:	1d 96       	adiw	r26, 0x0d	; 13
    3682:	1c 92       	st	X, r1
    3684:	1e 92       	st	-X, r1
    3686:	1c 97       	sbiw	r26, 0x0c	; 12
    3688:	80 81       	ld	r24, Z
    368a:	81 50       	subi	r24, 0x01	; 1
    368c:	80 83       	st	Z, r24
    368e:	5a 96       	adiw	r26, 0x1a	; 26
    3690:	ec 91       	ld	r30, X
    3692:	5a 97       	sbiw	r26, 0x1a	; 26
    3694:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    3698:	8e 17       	cp	r24, r30
    369a:	10 f4       	brcc	.+4      	; 0x36a0 <xTaskGenericNotify+0x15c>
    369c:	e0 93 7f 12 	sts	0x127F, r30	; 0x80127f <uxTopReadyPriority>
    36a0:	8b e0       	ldi	r24, 0x0B	; 11
    36a2:	8e 9f       	mul	r24, r30
    36a4:	f0 01       	movw	r30, r0
    36a6:	11 24       	eor	r1, r1
    36a8:	ef 53       	subi	r30, 0x3F	; 63
    36aa:	fd 4e       	sbci	r31, 0xED	; 237
    36ac:	01 80       	ldd	r0, Z+1	; 0x01
    36ae:	f2 81       	ldd	r31, Z+2	; 0x02
    36b0:	e0 2d       	mov	r30, r0
    36b2:	17 96       	adiw	r26, 0x07	; 7
    36b4:	fc 93       	st	X, r31
    36b6:	ee 93       	st	-X, r30
    36b8:	16 97       	sbiw	r26, 0x06	; 6
    36ba:	46 81       	ldd	r20, Z+6	; 0x06
    36bc:	57 81       	ldd	r21, Z+7	; 0x07
    36be:	19 96       	adiw	r26, 0x09	; 9
    36c0:	5c 93       	st	X, r21
    36c2:	4e 93       	st	-X, r20
    36c4:	18 97       	sbiw	r26, 0x08	; 8
    36c6:	c6 81       	ldd	r28, Z+6	; 0x06
    36c8:	d7 81       	ldd	r29, Z+7	; 0x07
    36ca:	3d 83       	std	Y+5, r19	; 0x05
    36cc:	2c 83       	std	Y+4, r18	; 0x04
    36ce:	37 83       	std	Z+7, r19	; 0x07
    36d0:	26 83       	std	Z+6, r18	; 0x06
    36d2:	5a 96       	adiw	r26, 0x1a	; 26
    36d4:	ec 91       	ld	r30, X
    36d6:	5a 97       	sbiw	r26, 0x1a	; 26
    36d8:	8e 9f       	mul	r24, r30
    36da:	f0 01       	movw	r30, r0
    36dc:	11 24       	eor	r1, r1
    36de:	ef 53       	subi	r30, 0x3F	; 63
    36e0:	fd 4e       	sbci	r31, 0xED	; 237
    36e2:	1d 96       	adiw	r26, 0x0d	; 13
    36e4:	fc 93       	st	X, r31
    36e6:	ee 93       	st	-X, r30
    36e8:	1c 97       	sbiw	r26, 0x0c	; 12
    36ea:	80 81       	ld	r24, Z
    36ec:	8f 5f       	subi	r24, 0xFF	; 255
    36ee:	80 83       	st	Z, r24
    36f0:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    36f4:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    36f8:	5a 96       	adiw	r26, 0x1a	; 26
    36fa:	9c 91       	ld	r25, X
    36fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    36fe:	89 17       	cp	r24, r25
    3700:	40 f4       	brcc	.+16     	; 0x3712 <xTaskGenericNotify+0x1ce>
    3702:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	05 c0       	rjmp	.+10     	; 0x3714 <xTaskGenericNotify+0x1d0>
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <xTaskGenericNotify+0x1d0>
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <xTaskGenericNotify+0x1d0>
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	0f 90       	pop	r0
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	bf 90       	pop	r11
    3724:	af 90       	pop	r10
    3726:	9f 90       	pop	r9
    3728:	8f 90       	pop	r8
    372a:	08 95       	ret

0000372c <xTaskGenericNotifyFromISR>:
    372c:	8f 92       	push	r8
    372e:	9f 92       	push	r9
    3730:	af 92       	push	r10
    3732:	bf 92       	push	r11
    3734:	cf 92       	push	r12
    3736:	df 92       	push	r13
    3738:	ef 92       	push	r14
    373a:	ff 92       	push	r15
    373c:	0f 93       	push	r16
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	dc 01       	movw	r26, r24
    3744:	e1 14       	cp	r14, r1
    3746:	f1 04       	cpc	r15, r1
    3748:	79 f0       	breq	.+30     	; 0x3768 <xTaskGenericNotifyFromISR+0x3c>
    374a:	fc 01       	movw	r30, r24
    374c:	84 e0       	ldi	r24, 0x04	; 4
    374e:	68 9f       	mul	r22, r24
    3750:	e0 0d       	add	r30, r0
    3752:	f1 1d       	adc	r31, r1
    3754:	11 24       	eor	r1, r1
    3756:	87 a4       	ldd	r8, Z+47	; 0x2f
    3758:	90 a8       	ldd	r9, Z+48	; 0x30
    375a:	a1 a8       	ldd	r10, Z+49	; 0x31
    375c:	b2 a8       	ldd	r11, Z+50	; 0x32
    375e:	f7 01       	movw	r30, r14
    3760:	80 82       	st	Z, r8
    3762:	91 82       	std	Z+1, r9	; 0x01
    3764:	a2 82       	std	Z+2, r10	; 0x02
    3766:	b3 82       	std	Z+3, r11	; 0x03
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	fd 01       	movw	r30, r26
    376c:	e6 0f       	add	r30, r22
    376e:	f7 1f       	adc	r31, r23
    3770:	83 a9       	ldd	r24, Z+51	; 0x33
    3772:	92 e0       	ldi	r25, 0x02	; 2
    3774:	93 ab       	std	Z+51, r25	; 0x33
    3776:	02 30       	cpi	r16, 0x02	; 2
    3778:	f9 f0       	breq	.+62     	; 0x37b8 <xTaskGenericNotifyFromISR+0x8c>
    377a:	18 f4       	brcc	.+6      	; 0x3782 <xTaskGenericNotifyFromISR+0x56>
    377c:	01 30       	cpi	r16, 0x01	; 1
    377e:	31 f0       	breq	.+12     	; 0x378c <xTaskGenericNotifyFromISR+0x60>
    3780:	49 c0       	rjmp	.+146    	; 0x3814 <xTaskGenericNotifyFromISR+0xe8>
    3782:	03 30       	cpi	r16, 0x03	; 3
    3784:	69 f1       	breq	.+90     	; 0x37e0 <xTaskGenericNotifyFromISR+0xb4>
    3786:	04 30       	cpi	r16, 0x04	; 4
    3788:	b9 f1       	breq	.+110    	; 0x37f8 <xTaskGenericNotifyFromISR+0xcc>
    378a:	44 c0       	rjmp	.+136    	; 0x3814 <xTaskGenericNotifyFromISR+0xe8>
    378c:	66 0f       	add	r22, r22
    378e:	77 1f       	adc	r23, r23
    3790:	66 0f       	add	r22, r22
    3792:	77 1f       	adc	r23, r23
    3794:	fd 01       	movw	r30, r26
    3796:	e6 0f       	add	r30, r22
    3798:	f7 1f       	adc	r31, r23
    379a:	87 a4       	ldd	r8, Z+47	; 0x2f
    379c:	90 a8       	ldd	r9, Z+48	; 0x30
    379e:	a1 a8       	ldd	r10, Z+49	; 0x31
    37a0:	b2 a8       	ldd	r11, Z+50	; 0x32
    37a2:	ba 01       	movw	r22, r20
    37a4:	a9 01       	movw	r20, r18
    37a6:	48 29       	or	r20, r8
    37a8:	59 29       	or	r21, r9
    37aa:	6a 29       	or	r22, r10
    37ac:	7b 29       	or	r23, r11
    37ae:	47 a7       	std	Z+47, r20	; 0x2f
    37b0:	50 ab       	std	Z+48, r21	; 0x30
    37b2:	61 ab       	std	Z+49, r22	; 0x31
    37b4:	72 ab       	std	Z+50, r23	; 0x32
    37b6:	2e c0       	rjmp	.+92     	; 0x3814 <xTaskGenericNotifyFromISR+0xe8>
    37b8:	66 0f       	add	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	66 0f       	add	r22, r22
    37be:	77 1f       	adc	r23, r23
    37c0:	fd 01       	movw	r30, r26
    37c2:	e6 0f       	add	r30, r22
    37c4:	f7 1f       	adc	r31, r23
    37c6:	47 a5       	ldd	r20, Z+47	; 0x2f
    37c8:	50 a9       	ldd	r21, Z+48	; 0x30
    37ca:	61 a9       	ldd	r22, Z+49	; 0x31
    37cc:	72 a9       	ldd	r23, Z+50	; 0x32
    37ce:	4f 5f       	subi	r20, 0xFF	; 255
    37d0:	5f 4f       	sbci	r21, 0xFF	; 255
    37d2:	6f 4f       	sbci	r22, 0xFF	; 255
    37d4:	7f 4f       	sbci	r23, 0xFF	; 255
    37d6:	47 a7       	std	Z+47, r20	; 0x2f
    37d8:	50 ab       	std	Z+48, r21	; 0x30
    37da:	61 ab       	std	Z+49, r22	; 0x31
    37dc:	72 ab       	std	Z+50, r23	; 0x32
    37de:	1a c0       	rjmp	.+52     	; 0x3814 <xTaskGenericNotifyFromISR+0xe8>
    37e0:	66 0f       	add	r22, r22
    37e2:	77 1f       	adc	r23, r23
    37e4:	66 0f       	add	r22, r22
    37e6:	77 1f       	adc	r23, r23
    37e8:	fd 01       	movw	r30, r26
    37ea:	e6 0f       	add	r30, r22
    37ec:	f7 1f       	adc	r31, r23
    37ee:	27 a7       	std	Z+47, r18	; 0x2f
    37f0:	30 ab       	std	Z+48, r19	; 0x30
    37f2:	41 ab       	std	Z+49, r20	; 0x31
    37f4:	52 ab       	std	Z+50, r21	; 0x32
    37f6:	0e c0       	rjmp	.+28     	; 0x3814 <xTaskGenericNotifyFromISR+0xe8>
    37f8:	82 30       	cpi	r24, 0x02	; 2
    37fa:	09 f4       	brne	.+2      	; 0x37fe <xTaskGenericNotifyFromISR+0xd2>
    37fc:	a4 c0       	rjmp	.+328    	; 0x3946 <xTaskGenericNotifyFromISR+0x21a>
    37fe:	66 0f       	add	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	66 0f       	add	r22, r22
    3804:	77 1f       	adc	r23, r23
    3806:	fd 01       	movw	r30, r26
    3808:	e6 0f       	add	r30, r22
    380a:	f7 1f       	adc	r31, r23
    380c:	27 a7       	std	Z+47, r18	; 0x2f
    380e:	30 ab       	std	Z+48, r19	; 0x30
    3810:	41 ab       	std	Z+49, r20	; 0x31
    3812:	52 ab       	std	Z+50, r21	; 0x32
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	09 f0       	breq	.+2      	; 0x381a <xTaskGenericNotifyFromISR+0xee>
    3818:	98 c0       	rjmp	.+304    	; 0x394a <xTaskGenericNotifyFromISR+0x21e>
    381a:	80 91 70 12 	lds	r24, 0x1270	; 0x801270 <uxSchedulerSuspended>
    381e:	81 11       	cpse	r24, r1
    3820:	5f c0       	rjmp	.+190    	; 0x38e0 <xTaskGenericNotifyFromISR+0x1b4>
    3822:	1c 96       	adiw	r26, 0x0c	; 12
    3824:	ed 91       	ld	r30, X+
    3826:	fc 91       	ld	r31, X
    3828:	1d 97       	sbiw	r26, 0x0d	; 13
    382a:	16 96       	adiw	r26, 0x06	; 6
    382c:	cd 91       	ld	r28, X+
    382e:	dc 91       	ld	r29, X
    3830:	17 97       	sbiw	r26, 0x07	; 7
    3832:	18 96       	adiw	r26, 0x08	; 8
    3834:	8d 91       	ld	r24, X+
    3836:	9c 91       	ld	r25, X
    3838:	19 97       	sbiw	r26, 0x09	; 9
    383a:	9f 83       	std	Y+7, r25	; 0x07
    383c:	8e 83       	std	Y+6, r24	; 0x06
    383e:	18 96       	adiw	r26, 0x08	; 8
    3840:	cd 91       	ld	r28, X+
    3842:	dc 91       	ld	r29, X
    3844:	19 97       	sbiw	r26, 0x09	; 9
    3846:	16 96       	adiw	r26, 0x06	; 6
    3848:	8d 91       	ld	r24, X+
    384a:	9c 91       	ld	r25, X
    384c:	17 97       	sbiw	r26, 0x07	; 7
    384e:	9d 83       	std	Y+5, r25	; 0x05
    3850:	8c 83       	std	Y+4, r24	; 0x04
    3852:	9d 01       	movw	r18, r26
    3854:	2e 5f       	subi	r18, 0xFE	; 254
    3856:	3f 4f       	sbci	r19, 0xFF	; 255
    3858:	81 81       	ldd	r24, Z+1	; 0x01
    385a:	92 81       	ldd	r25, Z+2	; 0x02
    385c:	82 17       	cp	r24, r18
    385e:	93 07       	cpc	r25, r19
    3860:	31 f4       	brne	.+12     	; 0x386e <xTaskGenericNotifyFromISR+0x142>
    3862:	18 96       	adiw	r26, 0x08	; 8
    3864:	8d 91       	ld	r24, X+
    3866:	9c 91       	ld	r25, X
    3868:	19 97       	sbiw	r26, 0x09	; 9
    386a:	92 83       	std	Z+2, r25	; 0x02
    386c:	81 83       	std	Z+1, r24	; 0x01
    386e:	1d 96       	adiw	r26, 0x0d	; 13
    3870:	1c 92       	st	X, r1
    3872:	1e 92       	st	-X, r1
    3874:	1c 97       	sbiw	r26, 0x0c	; 12
    3876:	80 81       	ld	r24, Z
    3878:	81 50       	subi	r24, 0x01	; 1
    387a:	80 83       	st	Z, r24
    387c:	5a 96       	adiw	r26, 0x1a	; 26
    387e:	ec 91       	ld	r30, X
    3880:	5a 97       	sbiw	r26, 0x1a	; 26
    3882:	80 91 7f 12 	lds	r24, 0x127F	; 0x80127f <uxTopReadyPriority>
    3886:	8e 17       	cp	r24, r30
    3888:	10 f4       	brcc	.+4      	; 0x388e <xTaskGenericNotifyFromISR+0x162>
    388a:	e0 93 7f 12 	sts	0x127F, r30	; 0x80127f <uxTopReadyPriority>
    388e:	8b e0       	ldi	r24, 0x0B	; 11
    3890:	8e 9f       	mul	r24, r30
    3892:	f0 01       	movw	r30, r0
    3894:	11 24       	eor	r1, r1
    3896:	ef 53       	subi	r30, 0x3F	; 63
    3898:	fd 4e       	sbci	r31, 0xED	; 237
    389a:	01 80       	ldd	r0, Z+1	; 0x01
    389c:	f2 81       	ldd	r31, Z+2	; 0x02
    389e:	e0 2d       	mov	r30, r0
    38a0:	17 96       	adiw	r26, 0x07	; 7
    38a2:	fc 93       	st	X, r31
    38a4:	ee 93       	st	-X, r30
    38a6:	16 97       	sbiw	r26, 0x06	; 6
    38a8:	46 81       	ldd	r20, Z+6	; 0x06
    38aa:	57 81       	ldd	r21, Z+7	; 0x07
    38ac:	19 96       	adiw	r26, 0x09	; 9
    38ae:	5c 93       	st	X, r21
    38b0:	4e 93       	st	-X, r20
    38b2:	18 97       	sbiw	r26, 0x08	; 8
    38b4:	c6 81       	ldd	r28, Z+6	; 0x06
    38b6:	d7 81       	ldd	r29, Z+7	; 0x07
    38b8:	3d 83       	std	Y+5, r19	; 0x05
    38ba:	2c 83       	std	Y+4, r18	; 0x04
    38bc:	37 83       	std	Z+7, r19	; 0x07
    38be:	26 83       	std	Z+6, r18	; 0x06
    38c0:	5a 96       	adiw	r26, 0x1a	; 26
    38c2:	ec 91       	ld	r30, X
    38c4:	5a 97       	sbiw	r26, 0x1a	; 26
    38c6:	8e 9f       	mul	r24, r30
    38c8:	f0 01       	movw	r30, r0
    38ca:	11 24       	eor	r1, r1
    38cc:	ef 53       	subi	r30, 0x3F	; 63
    38ce:	fd 4e       	sbci	r31, 0xED	; 237
    38d0:	1d 96       	adiw	r26, 0x0d	; 13
    38d2:	fc 93       	st	X, r31
    38d4:	ee 93       	st	-X, r30
    38d6:	1c 97       	sbiw	r26, 0x0c	; 12
    38d8:	80 81       	ld	r24, Z
    38da:	8f 5f       	subi	r24, 0xFF	; 255
    38dc:	80 83       	st	Z, r24
    38de:	20 c0       	rjmp	.+64     	; 0x3920 <xTaskGenericNotifyFromISR+0x1f4>
    38e0:	4c e9       	ldi	r20, 0x9C	; 156
    38e2:	52 e1       	ldi	r21, 0x12	; 18
    38e4:	fa 01       	movw	r30, r20
    38e6:	c1 81       	ldd	r28, Z+1	; 0x01
    38e8:	d2 81       	ldd	r29, Z+2	; 0x02
    38ea:	53 96       	adiw	r26, 0x13	; 19
    38ec:	dc 93       	st	X, r29
    38ee:	ce 93       	st	-X, r28
    38f0:	52 97       	sbiw	r26, 0x12	; 18
    38f2:	8e 81       	ldd	r24, Y+6	; 0x06
    38f4:	9f 81       	ldd	r25, Y+7	; 0x07
    38f6:	55 96       	adiw	r26, 0x15	; 21
    38f8:	9c 93       	st	X, r25
    38fa:	8e 93       	st	-X, r24
    38fc:	54 97       	sbiw	r26, 0x14	; 20
    38fe:	2e 81       	ldd	r18, Y+6	; 0x06
    3900:	3f 81       	ldd	r19, Y+7	; 0x07
    3902:	cd 01       	movw	r24, r26
    3904:	0e 96       	adiw	r24, 0x0e	; 14
    3906:	f9 01       	movw	r30, r18
    3908:	95 83       	std	Z+5, r25	; 0x05
    390a:	84 83       	std	Z+4, r24	; 0x04
    390c:	9f 83       	std	Y+7, r25	; 0x07
    390e:	8e 83       	std	Y+6, r24	; 0x06
    3910:	59 96       	adiw	r26, 0x19	; 25
    3912:	5c 93       	st	X, r21
    3914:	4e 93       	st	-X, r20
    3916:	58 97       	sbiw	r26, 0x18	; 24
    3918:	fa 01       	movw	r30, r20
    391a:	80 81       	ld	r24, Z
    391c:	8f 5f       	subi	r24, 0xFF	; 255
    391e:	80 83       	st	Z, r24
    3920:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <pxCurrentTCB>
    3924:	f0 91 30 13 	lds	r31, 0x1330	; 0x801330 <pxCurrentTCB+0x1>
    3928:	5a 96       	adiw	r26, 0x1a	; 26
    392a:	9c 91       	ld	r25, X
    392c:	82 8d       	ldd	r24, Z+26	; 0x1a
    392e:	89 17       	cp	r24, r25
    3930:	70 f4       	brcc	.+28     	; 0x394e <xTaskGenericNotifyFromISR+0x222>
    3932:	c1 14       	cp	r12, r1
    3934:	d1 04       	cpc	r13, r1
    3936:	19 f0       	breq	.+6      	; 0x393e <xTaskGenericNotifyFromISR+0x212>
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	f6 01       	movw	r30, r12
    393c:	80 83       	st	Z, r24
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <xTaskGenericNotifyFromISR+0x224>
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	03 c0       	rjmp	.+6      	; 0x3950 <xTaskGenericNotifyFromISR+0x224>
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	01 c0       	rjmp	.+2      	; 0x3950 <xTaskGenericNotifyFromISR+0x224>
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	0f 91       	pop	r16
    3956:	ff 90       	pop	r15
    3958:	ef 90       	pop	r14
    395a:	df 90       	pop	r13
    395c:	cf 90       	pop	r12
    395e:	bf 90       	pop	r11
    3960:	af 90       	pop	r10
    3962:	9f 90       	pop	r9
    3964:	8f 90       	pop	r8
    3966:	08 95       	ret

00003968 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	21 f4       	brne	.+8      	; 0x3974 <xTaskGenericNotifyStateClear+0xc>
    396c:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <pxCurrentTCB>
    3970:	90 91 30 13 	lds	r25, 0x1330	; 0x801330 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	fc 01       	movw	r30, r24
    397e:	e6 0f       	add	r30, r22
    3980:	f7 1f       	adc	r31, r23
    3982:	23 a9       	ldd	r18, Z+51	; 0x33
    3984:	22 30       	cpi	r18, 0x02	; 2
    3986:	31 f4       	brne	.+12     	; 0x3994 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3988:	fc 01       	movw	r30, r24
    398a:	e6 0f       	add	r30, r22
    398c:	f7 1f       	adc	r31, r23
    398e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3994:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3996:	0f 90       	pop	r0
    3998:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    399a:	08 95       	ret

0000399c <prvInsertTimerInActiveList>:
    399c:	cf 92       	push	r12
    399e:	df 92       	push	r13
    39a0:	ef 92       	push	r14
    39a2:	ff 92       	push	r15
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	fc 01       	movw	r30, r24
    39aa:	42 83       	std	Z+2, r20	; 0x02
    39ac:	53 83       	std	Z+3, r21	; 0x03
    39ae:	64 83       	std	Z+4, r22	; 0x04
    39b0:	75 83       	std	Z+5, r23	; 0x05
    39b2:	93 87       	std	Z+11, r25	; 0x0b
    39b4:	82 87       	std	Z+10, r24	; 0x0a
    39b6:	04 17       	cp	r16, r20
    39b8:	15 07       	cpc	r17, r21
    39ba:	26 07       	cpc	r18, r22
    39bc:	37 07       	cpc	r19, r23
    39be:	c0 f0       	brcs	.+48     	; 0x39f0 <prvInsertTimerInActiveList+0x54>
    39c0:	0c 19       	sub	r16, r12
    39c2:	1d 09       	sbc	r17, r13
    39c4:	2e 09       	sbc	r18, r14
    39c6:	3f 09       	sbc	r19, r15
    39c8:	86 85       	ldd	r24, Z+14	; 0x0e
    39ca:	97 85       	ldd	r25, Z+15	; 0x0f
    39cc:	a0 89       	ldd	r26, Z+16	; 0x10
    39ce:	b1 89       	ldd	r27, Z+17	; 0x11
    39d0:	08 17       	cp	r16, r24
    39d2:	19 07       	cpc	r17, r25
    39d4:	2a 07       	cpc	r18, r26
    39d6:	3b 07       	cpc	r19, r27
    39d8:	00 f5       	brcc	.+64     	; 0x3a1a <prvInsertTimerInActiveList+0x7e>
    39da:	bf 01       	movw	r22, r30
    39dc:	6e 5f       	subi	r22, 0xFE	; 254
    39de:	7f 4f       	sbci	r23, 0xFF	; 255
    39e0:	80 91 39 13 	lds	r24, 0x1339	; 0x801339 <pxOverflowTimerList>
    39e4:	90 91 3a 13 	lds	r25, 0x133A	; 0x80133a <pxOverflowTimerList+0x1>
    39e8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	18 c0       	rjmp	.+48     	; 0x3a20 <prvInsertTimerInActiveList+0x84>
    39f0:	0c 15       	cp	r16, r12
    39f2:	1d 05       	cpc	r17, r13
    39f4:	2e 05       	cpc	r18, r14
    39f6:	3f 05       	cpc	r19, r15
    39f8:	28 f4       	brcc	.+10     	; 0x3a04 <prvInsertTimerInActiveList+0x68>
    39fa:	4c 15       	cp	r20, r12
    39fc:	5d 05       	cpc	r21, r13
    39fe:	6e 05       	cpc	r22, r14
    3a00:	7f 05       	cpc	r23, r15
    3a02:	68 f4       	brcc	.+26     	; 0x3a1e <prvInsertTimerInActiveList+0x82>
    3a04:	bf 01       	movw	r22, r30
    3a06:	6e 5f       	subi	r22, 0xFE	; 254
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pxCurrentTimerList>
    3a0e:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <pxCurrentTimerList+0x1>
    3a12:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	03 c0       	rjmp	.+6      	; 0x3a20 <prvInsertTimerInActiveList+0x84>
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	01 c0       	rjmp	.+2      	; 0x3a20 <prvInsertTimerInActiveList+0x84>
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	df 90       	pop	r13
    3a2a:	cf 90       	pop	r12
    3a2c:	08 95       	ret

00003a2e <prvCheckForValidListAndQueue>:
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	0f 92       	push	r0
    3a34:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <xTimerQueue>
    3a38:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <xTimerQueue+0x1>
    3a3c:	89 2b       	or	r24, r25
    3a3e:	e9 f4       	brne	.+58     	; 0x3a7a <prvCheckForValidListAndQueue+0x4c>
    3a40:	88 e4       	ldi	r24, 0x48	; 72
    3a42:	93 e1       	ldi	r25, 0x13	; 19
    3a44:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    3a48:	8d e3       	ldi	r24, 0x3D	; 61
    3a4a:	93 e1       	ldi	r25, 0x13	; 19
    3a4c:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    3a50:	88 e4       	ldi	r24, 0x48	; 72
    3a52:	93 e1       	ldi	r25, 0x13	; 19
    3a54:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <pxCurrentTimerList+0x1>
    3a58:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <pxCurrentTimerList>
    3a5c:	8d e3       	ldi	r24, 0x3D	; 61
    3a5e:	93 e1       	ldi	r25, 0x13	; 19
    3a60:	90 93 3a 13 	sts	0x133A, r25	; 0x80133a <pxOverflowTimerList+0x1>
    3a64:	80 93 39 13 	sts	0x1339, r24	; 0x801339 <pxOverflowTimerList>
    3a68:	40 e0       	ldi	r20, 0x00	; 0
    3a6a:	67 e0       	ldi	r22, 0x07	; 7
    3a6c:	8a e0       	ldi	r24, 0x0A	; 10
    3a6e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xQueueGenericCreate>
    3a72:	90 93 38 13 	sts	0x1338, r25	; 0x801338 <xTimerQueue+0x1>
    3a76:	80 93 37 13 	sts	0x1337, r24	; 0x801337 <xTimerQueue>
    3a7a:	0f 90       	pop	r0
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	08 95       	ret

00003a80 <xTimerCreateTimerTask>:
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	d3 df       	rcall	.-90     	; 0x3a2e <prvCheckForValidListAndQueue>
    3a88:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <xTimerQueue>
    3a8c:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <xTimerQueue+0x1>
    3a90:	89 2b       	or	r24, r25
    3a92:	91 f0       	breq	.+36     	; 0x3ab8 <xTimerCreateTimerTask+0x38>
    3a94:	0f 2e       	mov	r0, r31
    3a96:	f5 e3       	ldi	r31, 0x35	; 53
    3a98:	ef 2e       	mov	r14, r31
    3a9a:	f3 e1       	ldi	r31, 0x13	; 19
    3a9c:	ff 2e       	mov	r15, r31
    3a9e:	f0 2d       	mov	r31, r0
    3aa0:	03 e0       	ldi	r16, 0x03	; 3
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 ec       	ldi	r20, 0xC0	; 192
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	60 ed       	ldi	r22, 0xD0	; 208
    3aac:	73 e0       	ldi	r23, 0x03	; 3
    3aae:	88 e4       	ldi	r24, 0x48	; 72
    3ab0:	91 e0       	ldi	r25, 0x01	; 1
    3ab2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
    3ab6:	01 c0       	rjmp	.+2      	; 0x3aba <xTimerCreateTimerTask+0x3a>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	08 95       	ret

00003ac2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3ac2:	8f 92       	push	r8
    3ac4:	9f 92       	push	r9
    3ac6:	af 92       	push	r10
    3ac8:	bf 92       	push	r11
    3aca:	cf 92       	push	r12
    3acc:	df 92       	push	r13
    3ace:	ef 92       	push	r14
    3ad0:	ff 92       	push	r15
    3ad2:	0f 93       	push	r16
    3ad4:	1f 93       	push	r17
    3ad6:	cf 93       	push	r28
    3ad8:	df 93       	push	r29
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	27 97       	sbiw	r28, 0x07	; 7
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3aea:	e0 91 37 13 	lds	r30, 0x1337	; 0x801337 <xTimerQueue>
    3aee:	f0 91 38 13 	lds	r31, 0x1338	; 0x801338 <xTimerQueue+0x1>
    3af2:	30 97       	sbiw	r30, 0x00	; 0
    3af4:	81 f1       	breq	.+96     	; 0x3b56 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3af6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3af8:	2a 83       	std	Y+2, r18	; 0x02
    3afa:	3b 83       	std	Y+3, r19	; 0x03
    3afc:	4c 83       	std	Y+4, r20	; 0x04
    3afe:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b00:	9f 83       	std	Y+7, r25	; 0x07
    3b02:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b04:	66 30       	cpi	r22, 0x06	; 6
    3b06:	f4 f4       	brge	.+60     	; 0x3b44 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b08:	0c db       	rcall	.-2536   	; 0x3122 <xTaskGetSchedulerState>
    3b0a:	82 30       	cpi	r24, 0x02	; 2
    3b0c:	69 f4       	brne	.+26     	; 0x3b28 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b0e:	00 e0       	ldi	r16, 0x00	; 0
    3b10:	a7 01       	movw	r20, r14
    3b12:	96 01       	movw	r18, r12
    3b14:	be 01       	movw	r22, r28
    3b16:	6f 5f       	subi	r22, 0xFF	; 255
    3b18:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1a:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <xTimerQueue>
    3b1e:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <xTimerQueue+0x1>
    3b22:	0e 94 97 0c 	call	0x192e	; 0x192e <xQueueGenericSend>
    3b26:	18 c0       	rjmp	.+48     	; 0x3b58 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b28:	00 e0       	ldi	r16, 0x00	; 0
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	a9 01       	movw	r20, r18
    3b30:	be 01       	movw	r22, r28
    3b32:	6f 5f       	subi	r22, 0xFF	; 255
    3b34:	7f 4f       	sbci	r23, 0xFF	; 255
    3b36:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <xTimerQueue>
    3b3a:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <xTimerQueue+0x1>
    3b3e:	0e 94 97 0c 	call	0x192e	; 0x192e <xQueueGenericSend>
    3b42:	0a c0       	rjmp	.+20     	; 0x3b58 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	a8 01       	movw	r20, r16
    3b48:	be 01       	movw	r22, r28
    3b4a:	6f 5f       	subi	r22, 0xFF	; 255
    3b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4e:	cf 01       	movw	r24, r30
    3b50:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xQueueGenericSendFromISR>
    3b54:	01 c0       	rjmp	.+2      	; 0x3b58 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3b56:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3b58:	27 96       	adiw	r28, 0x07	; 7
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	bf 90       	pop	r11
    3b76:	af 90       	pop	r10
    3b78:	9f 90       	pop	r9
    3b7a:	8f 90       	pop	r8
    3b7c:	08 95       	ret

00003b7e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3b7e:	2f 92       	push	r2
    3b80:	3f 92       	push	r3
    3b82:	4f 92       	push	r4
    3b84:	5f 92       	push	r5
    3b86:	6f 92       	push	r6
    3b88:	7f 92       	push	r7
    3b8a:	8f 92       	push	r8
    3b8c:	9f 92       	push	r9
    3b8e:	af 92       	push	r10
    3b90:	bf 92       	push	r11
    3b92:	cf 92       	push	r12
    3b94:	df 92       	push	r13
    3b96:	ef 92       	push	r14
    3b98:	ff 92       	push	r15
    3b9a:	0f 93       	push	r16
    3b9c:	1f 93       	push	r17
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3ba4:	0e 94 51 14 	call	0x28a2	; 0x28a2 <xTaskGetTickCount>
    3ba8:	2b 01       	movw	r4, r22
    3baa:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    3bac:	80 91 31 13 	lds	r24, 0x1331	; 0x801331 <xLastTime.2436>
    3bb0:	90 91 32 13 	lds	r25, 0x1332	; 0x801332 <xLastTime.2436+0x1>
    3bb4:	a0 91 33 13 	lds	r26, 0x1333	; 0x801333 <xLastTime.2436+0x2>
    3bb8:	b0 91 34 13 	lds	r27, 0x1334	; 0x801334 <xLastTime.2436+0x3>
    3bbc:	48 16       	cp	r4, r24
    3bbe:	59 06       	cpc	r5, r25
    3bc0:	6a 06       	cpc	r6, r26
    3bc2:	7b 06       	cpc	r7, r27
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <prvSampleTimeNow+0x4a>
    3bc6:	53 c0       	rjmp	.+166    	; 0x3c6e <prvSampleTimeNow+0xf0>
    3bc8:	3b c0       	rjmp	.+118    	; 0x3c40 <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bca:	07 80       	ldd	r0, Z+7	; 0x07
    3bcc:	f0 85       	ldd	r31, Z+8	; 0x08
    3bce:	e0 2d       	mov	r30, r0
    3bd0:	80 80       	ld	r8, Z
    3bd2:	91 80       	ldd	r9, Z+1	; 0x01
    3bd4:	a2 80       	ldd	r10, Z+2	; 0x02
    3bd6:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bd8:	c0 85       	ldd	r28, Z+8	; 0x08
    3bda:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bdc:	8e 01       	movw	r16, r28
    3bde:	0e 5f       	subi	r16, 0xFE	; 254
    3be0:	1f 4f       	sbci	r17, 0xFF	; 255
    3be2:	c8 01       	movw	r24, r16
    3be4:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3be8:	ec 89       	ldd	r30, Y+20	; 0x14
    3bea:	fd 89       	ldd	r31, Y+21	; 0x15
    3bec:	ce 01       	movw	r24, r28
    3bee:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3bf0:	8e 89       	ldd	r24, Y+22	; 0x16
    3bf2:	82 ff       	sbrs	r24, 2
    3bf4:	25 c0       	rjmp	.+74     	; 0x3c40 <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bfa:	a8 89       	ldd	r26, Y+16	; 0x10
    3bfc:	b9 89       	ldd	r27, Y+17	; 0x11
    3bfe:	88 0d       	add	r24, r8
    3c00:	99 1d       	adc	r25, r9
    3c02:	aa 1d       	adc	r26, r10
    3c04:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3c06:	88 16       	cp	r8, r24
    3c08:	99 06       	cpc	r9, r25
    3c0a:	aa 06       	cpc	r10, r26
    3c0c:	bb 06       	cpc	r11, r27
    3c0e:	70 f4       	brcc	.+28     	; 0x3c2c <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c10:	8a 83       	std	Y+2, r24	; 0x02
    3c12:	9b 83       	std	Y+3, r25	; 0x03
    3c14:	ac 83       	std	Y+4, r26	; 0x04
    3c16:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c18:	db 87       	std	Y+11, r29	; 0x0b
    3c1a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c1c:	b8 01       	movw	r22, r16
    3c1e:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pxCurrentTimerList>
    3c22:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <pxCurrentTimerList+0x1>
    3c26:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    3c2a:	0a c0       	rjmp	.+20     	; 0x3c40 <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c2c:	c1 2c       	mov	r12, r1
    3c2e:	d1 2c       	mov	r13, r1
    3c30:	76 01       	movw	r14, r12
    3c32:	00 e0       	ldi	r16, 0x00	; 0
    3c34:	10 e0       	ldi	r17, 0x00	; 0
    3c36:	a5 01       	movw	r20, r10
    3c38:	94 01       	movw	r18, r8
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	41 df       	rcall	.-382    	; 0x3ac2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c40:	e0 91 3b 13 	lds	r30, 0x133B	; 0x80133b <pxCurrentTimerList>
    3c44:	f0 91 3c 13 	lds	r31, 0x133C	; 0x80133c <pxCurrentTimerList+0x1>
    3c48:	80 81       	ld	r24, Z
    3c4a:	81 11       	cpse	r24, r1
    3c4c:	be cf       	rjmp	.-132    	; 0x3bca <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3c4e:	80 91 39 13 	lds	r24, 0x1339	; 0x801339 <pxOverflowTimerList>
    3c52:	90 91 3a 13 	lds	r25, 0x133A	; 0x80133a <pxOverflowTimerList+0x1>
    3c56:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <pxCurrentTimerList+0x1>
    3c5a:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3c5e:	f0 93 3a 13 	sts	0x133A, r31	; 0x80133a <pxOverflowTimerList+0x1>
    3c62:	e0 93 39 13 	sts	0x1339, r30	; 0x801339 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	f1 01       	movw	r30, r2
    3c6a:	80 83       	st	Z, r24
    3c6c:	02 c0       	rjmp	.+4      	; 0x3c72 <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3c6e:	f1 01       	movw	r30, r2
    3c70:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3c72:	40 92 31 13 	sts	0x1331, r4	; 0x801331 <xLastTime.2436>
    3c76:	50 92 32 13 	sts	0x1332, r5	; 0x801332 <xLastTime.2436+0x1>
    3c7a:	60 92 33 13 	sts	0x1333, r6	; 0x801333 <xLastTime.2436+0x2>
    3c7e:	70 92 34 13 	sts	0x1334, r7	; 0x801334 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3c82:	c3 01       	movw	r24, r6
    3c84:	b2 01       	movw	r22, r4
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	df 90       	pop	r13
    3c94:	cf 90       	pop	r12
    3c96:	bf 90       	pop	r11
    3c98:	af 90       	pop	r10
    3c9a:	9f 90       	pop	r9
    3c9c:	8f 90       	pop	r8
    3c9e:	7f 90       	pop	r7
    3ca0:	6f 90       	pop	r6
    3ca2:	5f 90       	pop	r5
    3ca4:	4f 90       	pop	r4
    3ca6:	3f 90       	pop	r3
    3ca8:	2f 90       	pop	r2
    3caa:	08 95       	ret

00003cac <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cac:	08 95       	ret

00003cae <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cae:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cb0:	2f 9a       	sbi	0x05, 7	; 5
    3cb2:	08 95       	ret

00003cb4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3cb4:	1f 9a       	sbi	0x03, 7	; 3
    3cb6:	08 95       	ret

00003cb8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3cb8:	fa df       	rcall	.-12     	; 0x3cae <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cba:	2f ef       	ldi	r18, 0xFF	; 255
    3cbc:	80 e7       	ldi	r24, 0x70	; 112
    3cbe:	92 e0       	ldi	r25, 0x02	; 2
    3cc0:	21 50       	subi	r18, 0x01	; 1
    3cc2:	80 40       	sbci	r24, 0x00	; 0
    3cc4:	90 40       	sbci	r25, 0x00	; 0
    3cc6:	e1 f7       	brne	.-8      	; 0x3cc0 <vApplicationMallocFailedHook+0x8>
    3cc8:	00 c0       	rjmp	.+0      	; 0x3cca <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3cca:	00 00       	nop
    3ccc:	f3 df       	rcall	.-26     	; 0x3cb4 <prvBlinkMainLed>
    3cce:	f5 cf       	rjmp	.-22     	; 0x3cba <vApplicationMallocFailedHook+0x2>

00003cd0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3cd0:	ee df       	rcall	.-36     	; 0x3cae <prvSetMainLedOn>
    3cd2:	2f ef       	ldi	r18, 0xFF	; 255
    3cd4:	87 ea       	ldi	r24, 0xA7	; 167
    3cd6:	91 e6       	ldi	r25, 0x61	; 97
    3cd8:	21 50       	subi	r18, 0x01	; 1
    3cda:	80 40       	sbci	r24, 0x00	; 0
    3cdc:	90 40       	sbci	r25, 0x00	; 0
    3cde:	e1 f7       	brne	.-8      	; 0x3cd8 <vApplicationStackOverflowHook+0x8>
    3ce0:	00 c0       	rjmp	.+0      	; 0x3ce2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3ce2:	00 00       	nop
    3ce4:	e7 df       	rcall	.-50     	; 0x3cb4 <prvBlinkMainLed>
    3ce6:	f5 cf       	rjmp	.-22     	; 0x3cd2 <vApplicationStackOverflowHook+0x2>

00003ce8 <lora_handler_initialise>:
       // decode the payload into our variales
       temp = (downlinkPayload.bytes[0] << 8) + downlinkPayload.bytes[1];
       hum = (downlinkPayload.bytes[2] << 8) + downlinkPayload.bytes[3];
	   
	}
}
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	e1 2c       	mov	r14, r1
    3cf0:	f1 2c       	mov	r15, r1
    3cf2:	02 e0       	ldi	r16, 0x02	; 2
    3cf4:	21 e0       	ldi	r18, 0x01	; 1
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 ec       	ldi	r20, 0xC0	; 192
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	68 ed       	ldi	r22, 0xD8	; 216
    3cfe:	73 e0       	ldi	r23, 0x03	; 3
    3d00:	85 eb       	ldi	r24, 0xB5	; 181
    3d02:	9e e1       	ldi	r25, 0x1E	; 30
    3d04:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <xTaskCreate>
    3d08:	0f 91       	pop	r16
    3d0a:	ff 90       	pop	r15
    3d0c:	ef 90       	pop	r14
    3d0e:	08 95       	ret

00003d10 <decode>:

void decode(lora_driver_payload_t load)
{
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
	int16_t hum;
	int16_t carbon;
	temp = (load.bytes[0] << 8) + load.bytes[1];
    hum = (load.bytes[2] << 8) + load.bytes[3];
	carbon = (load.bytes[4] << 8) + load.bytes[5];
	printf("|%d_%d_%d|",temp,hum,carbon);
    3d18:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	98 2f       	mov	r25, r24
    3d1e:	88 27       	eor	r24, r24
    3d20:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d22:	82 0f       	add	r24, r18
    3d24:	91 1d       	adc	r25, r1
    3d26:	9f 93       	push	r25
    3d28:	8f 93       	push	r24
    3d2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	98 2f       	mov	r25, r24
    3d30:	88 27       	eor	r24, r24
    3d32:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d34:	82 0f       	add	r24, r18
    3d36:	91 1d       	adc	r25, r1
    3d38:	9f 93       	push	r25
    3d3a:	8f 93       	push	r24
    3d3c:	88 85       	ldd	r24, Y+8	; 0x08
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	98 2f       	mov	r25, r24
    3d42:	88 27       	eor	r24, r24
    3d44:	29 85       	ldd	r18, Y+9	; 0x09
    3d46:	82 0f       	add	r24, r18
    3d48:	91 1d       	adc	r25, r1
    3d4a:	9f 93       	push	r25
    3d4c:	8f 93       	push	r24
    3d4e:	80 e1       	ldi	r24, 0x10	; 16
    3d50:	94 e0       	ldi	r25, 0x04	; 4
    3d52:	9f 93       	push	r25
    3d54:	8f 93       	push	r24
    3d56:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
}
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	de bf       	out	0x3e, r29	; 62
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	cd bf       	out	0x3d, r28	; 61
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	08 95       	ret

00003d6a <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	b4 d6       	rcall	.+3432   	; 0x4ad6 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3d6e:	62 e0       	ldi	r22, 0x02	; 2
    3d70:	70 e0       	ldi	r23, 0x00	; 0
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
	lora_driver_resetRn2483(0);
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	ac d6       	rcall	.+3416   	; 0x4ad6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3d7e:	66 e9       	ldi	r22, 0x96	; 150
    3d80:	70 e0       	ldi	r23, 0x00	; 0
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3d8a:	5e d6       	rcall	.+3260   	; 0x4a48 <lora_driver_flushBuffers>
}

static void _lora_setup(void)
{
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3d92:	af d6       	rcall	.+3422   	; 0x4af2 <lora_driver_rn2483FactoryReset>
    3d94:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3d98:	9f 93       	push	r25
    3d9a:	8f 93       	push	r24
    3d9c:	8b e1       	ldi	r24, 0x1B	; 27
    3d9e:	94 e0       	ldi	r25, 0x04	; 4
    3da0:	9f 93       	push	r25
    3da2:	8f 93       	push	r24
    3da4:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3da8:	0e 94 f7 26 	call	0x4dee	; 0x4dee <lora_driver_configureToEu868>
    3dac:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3db0:	9f 93       	push	r25
    3db2:	8f 93       	push	r24
    3db4:	8e e2       	ldi	r24, 0x2E	; 46
    3db6:	94 e0       	ldi	r25, 0x04	; 4
    3db8:	9f 93       	push	r25
    3dba:	8f 93       	push	r24
    3dbc:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3dc0:	89 e6       	ldi	r24, 0x69	; 105
    3dc2:	93 e1       	ldi	r25, 0x13	; 19
    3dc4:	a8 d6       	rcall	.+3408   	; 0x4b16 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3dc6:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3dca:	c9 e6       	ldi	r28, 0x69	; 105
    3dcc:	d3 e1       	ldi	r29, 0x13	; 19
    3dce:	df 93       	push	r29
    3dd0:	cf 93       	push	r28
    3dd2:	9f 93       	push	r25
    3dd4:	8f 93       	push	r24
    3dd6:	87 e4       	ldi	r24, 0x47	; 71
    3dd8:	94 e0       	ldi	r25, 0x04	; 4
    3dda:	9f 93       	push	r25
    3ddc:	8f 93       	push	r24
    3dde:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3de2:	ce 01       	movw	r24, r28
    3de4:	b4 d6       	rcall	.+3432   	; 0x4b4e <lora_driver_setDeviceIdentifier>
    3de6:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3dea:	9f 93       	push	r25
    3dec:	8f 93       	push	r24
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	8b e5       	ldi	r24, 0x5B	; 91
    3df4:	94 e0       	ldi	r25, 0x04	; 4
    3df6:	9f 93       	push	r25
    3df8:	8f 93       	push	r24
    3dfa:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3dfe:	ae 01       	movw	r20, r28
    3e00:	60 e7       	ldi	r22, 0x70	; 112
    3e02:	74 e0       	ldi	r23, 0x04	; 4
    3e04:	81 e9       	ldi	r24, 0x91	; 145
    3e06:	94 e0       	ldi	r25, 0x04	; 4
    3e08:	0e 94 d5 27 	call	0x4faa	; 0x4faa <lora_driver_setOtaaIdentity>
    3e0c:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3e10:	9f 93       	push	r25
    3e12:	8f 93       	push	r24
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	80 e7       	ldi	r24, 0x70	; 112
    3e1a:	94 e0       	ldi	r25, 0x04	; 4
    3e1c:	9f 93       	push	r25
    3e1e:	8f 93       	push	r24
    3e20:	81 e9       	ldi	r24, 0x91	; 145
    3e22:	94 e0       	ldi	r25, 0x04	; 4
    3e24:	9f 93       	push	r25
    3e26:	8f 93       	push	r24
    3e28:	82 ea       	ldi	r24, 0xA2	; 162
    3e2a:	94 e0       	ldi	r25, 0x04	; 4
    3e2c:	9f 93       	push	r25
    3e2e:	8f 93       	push	r24
    3e30:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3e34:	bf d6       	rcall	.+3454   	; 0x4bb4 <lora_driver_saveMac>
    3e36:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3e3a:	9f 93       	push	r25
    3e3c:	8f 93       	push	r24
    3e3e:	88 ed       	ldi	r24, 0xD8	; 216
    3e40:	94 e0       	ldi	r25, 0x04	; 4
    3e42:	9f 93       	push	r25
    3e44:	8f 93       	push	r24
    3e46:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3e4a:	8d b7       	in	r24, 0x3d	; 61
    3e4c:	9e b7       	in	r25, 0x3e	; 62
    3e4e:	82 96       	adiw	r24, 0x22	; 34
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	f8 94       	cli
    3e54:	9e bf       	out	0x3e, r25	; 62
    3e56:	0f be       	out	0x3f, r0	; 63
    3e58:	8d bf       	out	0x3d, r24	; 61
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	a5 d7       	rcall	.+3914   	; 0x4da8 <lora_driver_setAdaptiveDataRate>
    3e5e:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	87 ee       	ldi	r24, 0xE7	; 231
    3e68:	94 e0       	ldi	r25, 0x04	; 4
    3e6a:	9f 93       	push	r25
    3e6c:	8f 93       	push	r24
    3e6e:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3e72:	84 ef       	ldi	r24, 0xF4	; 244
    3e74:	91 e0       	ldi	r25, 0x01	; 1
    3e76:	a3 d7       	rcall	.+3910   	; 0x4dbe <lora_driver_setReceiveDelay>
    3e78:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3e7c:	9f 93       	push	r25
    3e7e:	8f 93       	push	r24
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	8f 93       	push	r24
    3e84:	84 ef       	ldi	r24, 0xF4	; 244
    3e86:	8f 93       	push	r24
    3e88:	88 e0       	ldi	r24, 0x08	; 8
    3e8a:	95 e0       	ldi	r25, 0x05	; 5
    3e8c:	9f 93       	push	r25
    3e8e:	8f 93       	push	r24
    3e90:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
    3e94:	8d b7       	in	r24, 0x3d	; 61
    3e96:	9e b7       	in	r25, 0x3e	; 62
    3e98:	0a 96       	adiw	r24, 0x0a	; 10
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	9e bf       	out	0x3e, r25	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	8d bf       	out	0x3d, r24	; 61
    3ea4:	ca e0       	ldi	r28, 0x0A	; 10
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3ea6:	d0 e0       	ldi	r29, 0x00	; 0
    3ea8:	08 e2       	ldi	r16, 0x28	; 40

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3eaa:	15 e0       	ldi	r17, 0x05	; 5
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	88 d6       	rcall	.+3344   	; 0x4bc0 <lora_driver_join>
    3eb0:	f8 2e       	mov	r15, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3eb2:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3eb6:	9f 93       	push	r25
    3eb8:	8f 93       	push	r24
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	1f 93       	push	r17
    3ec0:	0f 93       	push	r16
    3ec2:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>

		if ( rc != LORA_ACCEPTED)
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	88 e0       	ldi	r24, 0x08	; 8
    3ed4:	f8 16       	cp	r15, r24
    3ed6:	09 f4       	brne	.+2      	; 0x3eda <lora_handler_task+0x170>
    3ed8:	98 c0       	rjmp	.+304    	; 0x400a <lora_handler_task+0x2a0>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	0e 94 35 30 	call	0x606a	; 0x606a <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3ee0:	66 e3       	ldi	r22, 0x36	; 54
    3ee2:	71 e0       	ldi	r23, 0x01	; 1
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3eec:	21 97       	sbiw	r28, 0x01	; 1
    3eee:	f1 f6       	brne	.-68     	; 0x3eac <lora_handler_task+0x142>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3ef0:	85 c0       	rjmp	.+266    	; 0x3ffc <lora_handler_task+0x292>
    3ef2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
	_uplink_payload.portNo = 2;
	
	for(;;)
	{
		
		int16_t temp = temperatureSensor_getValue(sensorModelManager_getTemperatureSensor());
    3ef6:	fd cf       	rjmp	.-6      	; 0x3ef2 <lora_handler_task+0x188>
    3ef8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <sensorModelManager_getTemperatureSensor>
    3efc:	0e 94 5f 07 	call	0xebe	; 0xebe <temperatureSensor_getValue>
    3f00:	4d d1       	rcall	.+666    	; 0x419c <__fixsfsi>
    3f02:	a6 2e       	mov	r10, r22
		int16_t hum = humiditySensor_getValue(sensorModelManager_getHumiditySensor());
    3f04:	97 2e       	mov	r9, r23
    3f06:	0e 94 cb 07 	call	0xf96	; 0xf96 <sensorModelManager_getHumiditySensor>
    3f0a:	0e 94 9c 06 	call	0xd38	; 0xd38 <humiditySensor_getValue>
    3f0e:	46 d1       	rcall	.+652    	; 0x419c <__fixsfsi>
    3f10:	16 2f       	mov	r17, r22
    3f12:	07 2f       	mov	r16, r23
		int16_t co2_ppm = carbonDioxideSensor_getValue(sensorModelManager_getCarbonDioxideSensor());
    3f14:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <sensorModelManager_getCarbonDioxideSensor>
    3f18:	0e 94 de 05 	call	0xbbc	; 0xbbc <carbonDioxideSensor_getValue>
		
		_uplink_payload.bytes[0] = temp >> 8;
    3f1c:	9a 82       	std	Y+2, r9	; 0x02
		_uplink_payload.bytes[1] = temp & 0xFF;
    3f1e:	ab 82       	std	Y+3, r10	; 0x03
		_uplink_payload.bytes[2] = hum >> 8;
		_uplink_payload.bytes[3] = hum & 0xFF;
    3f20:	0c 83       	std	Y+4, r16	; 0x04
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3f22:	1d 83       	std	Y+5, r17	; 0x05
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3f24:	9e 83       	std	Y+6, r25	; 0x06

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3f26:	8f 83       	std	Y+7, r24	; 0x07
    3f28:	83 e0       	ldi	r24, 0x03	; 3
    3f2a:	0e 94 47 30 	call	0x608e	; 0x608e <status_leds_shortPuls>
		PORTA ^= _BV(PA3);
    3f2e:	82 b1       	in	r24, 0x02	; 2
    3f30:	8b 25       	eor	r24, r11
		char *result = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
    3f32:	82 b9       	out	0x02, r24	; 2
    3f34:	be 01       	movw	r22, r28
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	6c d6       	rcall	.+3288   	; 0x4c12 <lora_driver_sendUploadMessage>
    3f3a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3f3e:	8c 01       	movw	r16, r24
		printf("Upload Message >%s<\n", result);
    3f40:	1f 93       	push	r17
    3f42:	8f 93       	push	r24
    3f44:	ff 92       	push	r15
    3f46:	ef 92       	push	r14
    3f48:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
		if (result!="MAC_TX_OK")
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0d 55       	subi	r16, 0x5D	; 93
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_resetRn2483(1);
    3f56:	15 40       	sbci	r17, 0x05	; 5
    3f58:	69 f1       	breq	.+90     	; 0x3fb4 <lora_handler_task+0x24a>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
			vTaskDelay(2);
    3f5c:	bc d5       	rcall	.+2936   	; 0x4ad6 <lora_driver_resetRn2483>
    3f5e:	62 e0       	ldi	r22, 0x02	; 2
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
			lora_driver_resetRn2483(0);
    3f66:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
			// Give it a chance to wakeup
			vTaskDelay(150);
    3f6c:	b4 d5       	rcall	.+2920   	; 0x4ad6 <lora_driver_resetRn2483>
    3f6e:	66 e9       	ldi	r22, 0x96	; 150
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
			printf("Rejoin Network TriesLeft:>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_join(LORA_OTAA)));
    3f76:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	21 d6       	rcall	.+3138   	; 0x4bc0 <lora_driver_join>
    3f7e:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3f82:	9f 93       	push	r25
    3f84:	8f 93       	push	r24
    3f86:	df 92       	push	r13
    3f88:	cf 92       	push	r12
    3f8a:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3f8e:	be 01       	movw	r22, r28
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	3f d6       	rcall	.+3198   	; 0x4c12 <lora_driver_sendUploadMessage>
    3f94:	0e 94 f6 27 	call	0x4fec	; 0x4fec <lora_driver_mapReturnCodeToText>
    3f98:	9f 93       	push	r25
    3f9a:	8f 93       	push	r24
    3f9c:	ff 92       	push	r15
    3f9e:	ef 92       	push	r14
    3fa0:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
    3fa4:	8d b7       	in	r24, 0x3d	; 61
    3fa6:	9e b7       	in	r25, 0x3e	; 62
    3fa8:	08 96       	adiw	r24, 0x08	; 8
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	9e bf       	out	0x3e, r25	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	8d bf       	out	0x3d, r24	; 61
		}
		PORTA ^= _BV(PA3);
    3fb4:	82 b1       	in	r24, 0x02	; 2
    3fb6:	8b 25       	eor	r24, r11
    3fb8:	82 b9       	out	0x02, r24	; 2
		decode(_uplink_payload);
    3fba:	8d b7       	in	r24, 0x3d	; 61
    3fbc:	9e b7       	in	r25, 0x3e	; 62
    3fbe:	46 97       	sbiw	r24, 0x16	; 22
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	9e bf       	out	0x3e, r25	; 62
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	8d bf       	out	0x3d, r24	; 61
    3fca:	ad b7       	in	r26, 0x3d	; 61
    3fcc:	be b7       	in	r27, 0x3e	; 62
    3fce:	11 96       	adiw	r26, 0x01	; 1
    3fd0:	86 e1       	ldi	r24, 0x16	; 22
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	01 90       	ld	r0, Z+
    3fd6:	0d 92       	st	X+, r0
    3fd8:	8a 95       	dec	r24
    3fda:	e1 f7       	brne	.-8      	; 0x3fd4 <lora_handler_task+0x26a>
    3fdc:	99 de       	rcall	.-718    	; 0x3d10 <decode>
		//wait 1 min
		vTaskDelay(pdMS_TO_TICKS(60000));
    3fde:	68 e8       	ldi	r22, 0x88	; 136
    3fe0:	7e e0       	ldi	r23, 0x0E	; 14
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 75 16 	call	0x2cea	; 0x2cea <vTaskDelay>
		//lora_handler_downlink();
	}
    3fea:	8d b7       	in	r24, 0x3d	; 61
    3fec:	9e b7       	in	r25, 0x3e	; 62
    3fee:	46 96       	adiw	r24, 0x16	; 22
    3ff0:	0f b6       	in	r0, 0x3f	; 63
    3ff2:	f8 94       	cli
    3ff4:	9e bf       	out	0x3e, r25	; 62
    3ff6:	0f be       	out	0x3f, r0	; 63
    3ff8:	8d bf       	out	0x3d, r24	; 61
    3ffa:	7e cf       	rjmp	.-260    	; 0x3ef8 <lora_handler_task+0x18e>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	0e 94 26 30 	call	0x604c	; 0x604c <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <status_leds_fastBlink>
    4008:	74 cf       	rjmp	.-280    	; 0x3ef2 <lora_handler_task+0x188>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	0e 94 17 30 	call	0x602e	; 0x602e <status_leds_ledOn>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    4010:	e3 e5       	ldi	r30, 0x53	; 83
    4012:	f3 e1       	ldi	r31, 0x13	; 19
    4014:	86 e0       	ldi	r24, 0x06	; 6
    4016:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	80 83       	st	Z, r24
		
		int16_t temp = temperatureSensor_getValue(sensorModelManager_getTemperatureSensor());
		int16_t hum = humiditySensor_getValue(sensorModelManager_getHumiditySensor());
		int16_t co2_ppm = carbonDioxideSensor_getValue(sensorModelManager_getCarbonDioxideSensor());
		
		_uplink_payload.bytes[0] = temp >> 8;
    401c:	ef 01       	movw	r28, r30
		_uplink_payload.bytes[3] = hum & 0xFF;
		_uplink_payload.bytes[4] = co2_ppm >> 8;
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		PORTA ^= _BV(PA3);
    401e:	68 94       	set
    4020:	bb 24       	eor	r11, r11
    4022:	b3 f8       	bld	r11, 3
		char *result = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
		printf("Upload Message >%s<\n", result);
    4024:	0f 2e       	mov	r0, r31
    4026:	f8 e4       	ldi	r31, 0x48	; 72
    4028:	ef 2e       	mov	r14, r31
    402a:	f5 e0       	ldi	r31, 0x05	; 5
    402c:	ff 2e       	mov	r15, r31
    402e:	f0 2d       	mov	r31, r0
			lora_driver_resetRn2483(1);
			vTaskDelay(2);
			lora_driver_resetRn2483(0);
			// Give it a chance to wakeup
			vTaskDelay(150);
			printf("Rejoin Network TriesLeft:>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_join(LORA_OTAA)));
    4030:	0f 2e       	mov	r0, r31
    4032:	f7 e6       	ldi	r31, 0x67	; 103
    4034:	cf 2e       	mov	r12, r31
    4036:	f5 e0       	ldi	r31, 0x05	; 5
    4038:	df 2e       	mov	r13, r31
    403a:	f0 2d       	mov	r31, r0
    403c:	5d cf       	rjmp	.-326    	; 0x3ef8 <lora_handler_task+0x18e>

0000403e <initialiseSystem>:
	// A3 for LoRaWAN
	// A4 means 7-segment Display is showing carbon dioxide
	// A5 means 7-segment Display is showing humidity
	// A6 means 7-segment Display is showing temperature
	// A7 means 7-segment Display is showing time(hh.mm)
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5) | _BV(DDA6) | _BV(DDA7);
    403e:	81 b1       	in	r24, 0x01	; 1
    4040:	8f ef       	ldi	r24, 0xFF	; 255
    4042:	81 b9       	out	0x01, r24	; 1
	//Turn off all led
	PORTA ^= _BV(PA0);
    4044:	92 b1       	in	r25, 0x02	; 2
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	89 27       	eor	r24, r25
    404a:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA1);
    404c:	92 b1       	in	r25, 0x02	; 2
    404e:	82 e0       	ldi	r24, 0x02	; 2
    4050:	89 27       	eor	r24, r25
    4052:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA2);
    4054:	92 b1       	in	r25, 0x02	; 2
    4056:	84 e0       	ldi	r24, 0x04	; 4
    4058:	89 27       	eor	r24, r25
    405a:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA3);
    405c:	92 b1       	in	r25, 0x02	; 2
    405e:	88 e0       	ldi	r24, 0x08	; 8
    4060:	89 27       	eor	r24, r25
    4062:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA4);
    4064:	92 b1       	in	r25, 0x02	; 2
    4066:	80 e1       	ldi	r24, 0x10	; 16
    4068:	89 27       	eor	r24, r25
    406a:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA5);
    406c:	92 b1       	in	r25, 0x02	; 2
    406e:	80 e2       	ldi	r24, 0x20	; 32
    4070:	89 27       	eor	r24, r25
    4072:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA6);
    4074:	92 b1       	in	r25, 0x02	; 2
    4076:	80 e4       	ldi	r24, 0x40	; 64
    4078:	89 27       	eor	r24, r25
    407a:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA7);
    407c:	82 b1       	in	r24, 0x02	; 2
    407e:	80 58       	subi	r24, 0x80	; 128
    4080:	82 b9       	out	0x02, r24	; 2
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <stdio_initialise>
    mh_z19_initialise(ser_USART3);
    4088:	83 e0       	ldi	r24, 0x03	; 3
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <mh_z19_initialise>
	if ( HIH8120_OK == hih8120_initialise() )
    4090:	5b d3       	rcall	.+1718   	; 0x4748 <hih8120_initialise>
    4092:	81 11       	cpse	r24, r1
    4094:	08 c0       	rjmp	.+16     	; 0x40a6 <initialiseSystem+0x68>
	{
		printf("temperature/humidity sensor init!");
    4096:	86 e8       	ldi	r24, 0x86	; 134
    4098:	95 e0       	ldi	r25, 0x05	; 5
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <printf>
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	08 95       	ret

000040a8 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    40a8:	ca df       	rcall	.-108    	; 0x403e <initialiseSystem>
	printf("Program Started!!!\n");
    40aa:	88 ea       	ldi	r24, 0xA8	; 168
    40ac:	95 e0       	ldi	r25, 0x05	; 5
    40ae:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <puts>
	sensorModelManager_create();
    40b2:	0e 94 a2 07 	call	0xf44	; 0xf44 <sensorModelManager_create>
	//MessageBufferHandle_t downLinkMessageBufferHandle = xMessageBufferCreate(2); 
	lora_driver_initialise(ser_USART1, NULL);
    40b6:	60 e0       	ldi	r22, 0x00	; 0
    40b8:	70 e0       	ldi	r23, 0x00	; 0
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	cc d4       	rcall	.+2456   	; 0x4a56 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    40be:	83 e0       	ldi	r24, 0x03	; 3
    40c0:	13 de       	rcall	.-986    	; 0x3ce8 <lora_handler_initialise>
    40c2:	0e 94 13 14 	call	0x2826	; 0x2826 <vTaskStartScheduler>
	vTaskStartScheduler();
    40c6:	80 e0       	ldi	r24, 0x00	; 0
}
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	08 95       	ret

000040cc <__divsf3>:
    40cc:	0c d0       	rcall	.+24     	; 0x40e6 <__divsf3x>
    40ce:	eb c0       	rjmp	.+470    	; 0x42a6 <__fp_round>
    40d0:	e3 d0       	rcall	.+454    	; 0x4298 <__fp_pscB>
    40d2:	40 f0       	brcs	.+16     	; 0x40e4 <__divsf3+0x18>
    40d4:	da d0       	rcall	.+436    	; 0x428a <__fp_pscA>
    40d6:	30 f0       	brcs	.+12     	; 0x40e4 <__divsf3+0x18>
    40d8:	21 f4       	brne	.+8      	; 0x40e2 <__divsf3+0x16>
    40da:	5f 3f       	cpi	r21, 0xFF	; 255
    40dc:	19 f0       	breq	.+6      	; 0x40e4 <__divsf3+0x18>
    40de:	cc c0       	rjmp	.+408    	; 0x4278 <__fp_inf>
    40e0:	51 11       	cpse	r21, r1
    40e2:	15 c1       	rjmp	.+554    	; 0x430e <__fp_szero>
    40e4:	cf c0       	rjmp	.+414    	; 0x4284 <__fp_nan>

000040e6 <__divsf3x>:
    40e6:	f0 d0       	rcall	.+480    	; 0x42c8 <__fp_split3>
    40e8:	98 f3       	brcs	.-26     	; 0x40d0 <__divsf3+0x4>

000040ea <__divsf3_pse>:
    40ea:	99 23       	and	r25, r25
    40ec:	c9 f3       	breq	.-14     	; 0x40e0 <__divsf3+0x14>
    40ee:	55 23       	and	r21, r21
    40f0:	b1 f3       	breq	.-20     	; 0x40de <__divsf3+0x12>
    40f2:	95 1b       	sub	r25, r21
    40f4:	55 0b       	sbc	r21, r21
    40f6:	bb 27       	eor	r27, r27
    40f8:	aa 27       	eor	r26, r26
    40fa:	62 17       	cp	r22, r18
    40fc:	73 07       	cpc	r23, r19
    40fe:	84 07       	cpc	r24, r20
    4100:	38 f0       	brcs	.+14     	; 0x4110 <__divsf3_pse+0x26>
    4102:	9f 5f       	subi	r25, 0xFF	; 255
    4104:	5f 4f       	sbci	r21, 0xFF	; 255
    4106:	22 0f       	add	r18, r18
    4108:	33 1f       	adc	r19, r19
    410a:	44 1f       	adc	r20, r20
    410c:	aa 1f       	adc	r26, r26
    410e:	a9 f3       	breq	.-22     	; 0x40fa <__divsf3_pse+0x10>
    4110:	33 d0       	rcall	.+102    	; 0x4178 <__divsf3_pse+0x8e>
    4112:	0e 2e       	mov	r0, r30
    4114:	3a f0       	brmi	.+14     	; 0x4124 <__divsf3_pse+0x3a>
    4116:	e0 e8       	ldi	r30, 0x80	; 128
    4118:	30 d0       	rcall	.+96     	; 0x417a <__divsf3_pse+0x90>
    411a:	91 50       	subi	r25, 0x01	; 1
    411c:	50 40       	sbci	r21, 0x00	; 0
    411e:	e6 95       	lsr	r30
    4120:	00 1c       	adc	r0, r0
    4122:	ca f7       	brpl	.-14     	; 0x4116 <__divsf3_pse+0x2c>
    4124:	29 d0       	rcall	.+82     	; 0x4178 <__divsf3_pse+0x8e>
    4126:	fe 2f       	mov	r31, r30
    4128:	27 d0       	rcall	.+78     	; 0x4178 <__divsf3_pse+0x8e>
    412a:	66 0f       	add	r22, r22
    412c:	77 1f       	adc	r23, r23
    412e:	88 1f       	adc	r24, r24
    4130:	bb 1f       	adc	r27, r27
    4132:	26 17       	cp	r18, r22
    4134:	37 07       	cpc	r19, r23
    4136:	48 07       	cpc	r20, r24
    4138:	ab 07       	cpc	r26, r27
    413a:	b0 e8       	ldi	r27, 0x80	; 128
    413c:	09 f0       	breq	.+2      	; 0x4140 <__divsf3_pse+0x56>
    413e:	bb 0b       	sbc	r27, r27
    4140:	80 2d       	mov	r24, r0
    4142:	bf 01       	movw	r22, r30
    4144:	ff 27       	eor	r31, r31
    4146:	93 58       	subi	r25, 0x83	; 131
    4148:	5f 4f       	sbci	r21, 0xFF	; 255
    414a:	2a f0       	brmi	.+10     	; 0x4156 <__divsf3_pse+0x6c>
    414c:	9e 3f       	cpi	r25, 0xFE	; 254
    414e:	51 05       	cpc	r21, r1
    4150:	68 f0       	brcs	.+26     	; 0x416c <__divsf3_pse+0x82>
    4152:	92 c0       	rjmp	.+292    	; 0x4278 <__fp_inf>
    4154:	dc c0       	rjmp	.+440    	; 0x430e <__fp_szero>
    4156:	5f 3f       	cpi	r21, 0xFF	; 255
    4158:	ec f3       	brlt	.-6      	; 0x4154 <__divsf3_pse+0x6a>
    415a:	98 3e       	cpi	r25, 0xE8	; 232
    415c:	dc f3       	brlt	.-10     	; 0x4154 <__divsf3_pse+0x6a>
    415e:	86 95       	lsr	r24
    4160:	77 95       	ror	r23
    4162:	67 95       	ror	r22
    4164:	b7 95       	ror	r27
    4166:	f7 95       	ror	r31
    4168:	9f 5f       	subi	r25, 0xFF	; 255
    416a:	c9 f7       	brne	.-14     	; 0x415e <__divsf3_pse+0x74>
    416c:	88 0f       	add	r24, r24
    416e:	91 1d       	adc	r25, r1
    4170:	96 95       	lsr	r25
    4172:	87 95       	ror	r24
    4174:	97 f9       	bld	r25, 7
    4176:	08 95       	ret
    4178:	e1 e0       	ldi	r30, 0x01	; 1
    417a:	66 0f       	add	r22, r22
    417c:	77 1f       	adc	r23, r23
    417e:	88 1f       	adc	r24, r24
    4180:	bb 1f       	adc	r27, r27
    4182:	62 17       	cp	r22, r18
    4184:	73 07       	cpc	r23, r19
    4186:	84 07       	cpc	r24, r20
    4188:	ba 07       	cpc	r27, r26
    418a:	20 f0       	brcs	.+8      	; 0x4194 <__divsf3_pse+0xaa>
    418c:	62 1b       	sub	r22, r18
    418e:	73 0b       	sbc	r23, r19
    4190:	84 0b       	sbc	r24, r20
    4192:	ba 0b       	sbc	r27, r26
    4194:	ee 1f       	adc	r30, r30
    4196:	88 f7       	brcc	.-30     	; 0x417a <__divsf3_pse+0x90>
    4198:	e0 95       	com	r30
    419a:	08 95       	ret

0000419c <__fixsfsi>:
    419c:	04 d0       	rcall	.+8      	; 0x41a6 <__fixunssfsi>
    419e:	68 94       	set
    41a0:	b1 11       	cpse	r27, r1
    41a2:	b5 c0       	rjmp	.+362    	; 0x430e <__fp_szero>
    41a4:	08 95       	ret

000041a6 <__fixunssfsi>:
    41a6:	98 d0       	rcall	.+304    	; 0x42d8 <__fp_splitA>
    41a8:	88 f0       	brcs	.+34     	; 0x41cc <__fixunssfsi+0x26>
    41aa:	9f 57       	subi	r25, 0x7F	; 127
    41ac:	90 f0       	brcs	.+36     	; 0x41d2 <__fixunssfsi+0x2c>
    41ae:	b9 2f       	mov	r27, r25
    41b0:	99 27       	eor	r25, r25
    41b2:	b7 51       	subi	r27, 0x17	; 23
    41b4:	a0 f0       	brcs	.+40     	; 0x41de <__fixunssfsi+0x38>
    41b6:	d1 f0       	breq	.+52     	; 0x41ec <__fixunssfsi+0x46>
    41b8:	66 0f       	add	r22, r22
    41ba:	77 1f       	adc	r23, r23
    41bc:	88 1f       	adc	r24, r24
    41be:	99 1f       	adc	r25, r25
    41c0:	1a f0       	brmi	.+6      	; 0x41c8 <__fixunssfsi+0x22>
    41c2:	ba 95       	dec	r27
    41c4:	c9 f7       	brne	.-14     	; 0x41b8 <__fixunssfsi+0x12>
    41c6:	12 c0       	rjmp	.+36     	; 0x41ec <__fixunssfsi+0x46>
    41c8:	b1 30       	cpi	r27, 0x01	; 1
    41ca:	81 f0       	breq	.+32     	; 0x41ec <__fixunssfsi+0x46>
    41cc:	9f d0       	rcall	.+318    	; 0x430c <__fp_zero>
    41ce:	b1 e0       	ldi	r27, 0x01	; 1
    41d0:	08 95       	ret
    41d2:	9c c0       	rjmp	.+312    	; 0x430c <__fp_zero>
    41d4:	67 2f       	mov	r22, r23
    41d6:	78 2f       	mov	r23, r24
    41d8:	88 27       	eor	r24, r24
    41da:	b8 5f       	subi	r27, 0xF8	; 248
    41dc:	39 f0       	breq	.+14     	; 0x41ec <__fixunssfsi+0x46>
    41de:	b9 3f       	cpi	r27, 0xF9	; 249
    41e0:	cc f3       	brlt	.-14     	; 0x41d4 <__fixunssfsi+0x2e>
    41e2:	86 95       	lsr	r24
    41e4:	77 95       	ror	r23
    41e6:	67 95       	ror	r22
    41e8:	b3 95       	inc	r27
    41ea:	d9 f7       	brne	.-10     	; 0x41e2 <__fixunssfsi+0x3c>
    41ec:	3e f4       	brtc	.+14     	; 0x41fc <__fixunssfsi+0x56>
    41ee:	90 95       	com	r25
    41f0:	80 95       	com	r24
    41f2:	70 95       	com	r23
    41f4:	61 95       	neg	r22
    41f6:	7f 4f       	sbci	r23, 0xFF	; 255
    41f8:	8f 4f       	sbci	r24, 0xFF	; 255
    41fa:	9f 4f       	sbci	r25, 0xFF	; 255
    41fc:	08 95       	ret

000041fe <__floatunsisf>:
    41fe:	e8 94       	clt
    4200:	09 c0       	rjmp	.+18     	; 0x4214 <__floatsisf+0x12>

00004202 <__floatsisf>:
    4202:	97 fb       	bst	r25, 7
    4204:	3e f4       	brtc	.+14     	; 0x4214 <__floatsisf+0x12>
    4206:	90 95       	com	r25
    4208:	80 95       	com	r24
    420a:	70 95       	com	r23
    420c:	61 95       	neg	r22
    420e:	7f 4f       	sbci	r23, 0xFF	; 255
    4210:	8f 4f       	sbci	r24, 0xFF	; 255
    4212:	9f 4f       	sbci	r25, 0xFF	; 255
    4214:	99 23       	and	r25, r25
    4216:	a9 f0       	breq	.+42     	; 0x4242 <__floatsisf+0x40>
    4218:	f9 2f       	mov	r31, r25
    421a:	96 e9       	ldi	r25, 0x96	; 150
    421c:	bb 27       	eor	r27, r27
    421e:	93 95       	inc	r25
    4220:	f6 95       	lsr	r31
    4222:	87 95       	ror	r24
    4224:	77 95       	ror	r23
    4226:	67 95       	ror	r22
    4228:	b7 95       	ror	r27
    422a:	f1 11       	cpse	r31, r1
    422c:	f8 cf       	rjmp	.-16     	; 0x421e <__floatsisf+0x1c>
    422e:	fa f4       	brpl	.+62     	; 0x426e <__floatsisf+0x6c>
    4230:	bb 0f       	add	r27, r27
    4232:	11 f4       	brne	.+4      	; 0x4238 <__floatsisf+0x36>
    4234:	60 ff       	sbrs	r22, 0
    4236:	1b c0       	rjmp	.+54     	; 0x426e <__floatsisf+0x6c>
    4238:	6f 5f       	subi	r22, 0xFF	; 255
    423a:	7f 4f       	sbci	r23, 0xFF	; 255
    423c:	8f 4f       	sbci	r24, 0xFF	; 255
    423e:	9f 4f       	sbci	r25, 0xFF	; 255
    4240:	16 c0       	rjmp	.+44     	; 0x426e <__floatsisf+0x6c>
    4242:	88 23       	and	r24, r24
    4244:	11 f0       	breq	.+4      	; 0x424a <__floatsisf+0x48>
    4246:	96 e9       	ldi	r25, 0x96	; 150
    4248:	11 c0       	rjmp	.+34     	; 0x426c <__floatsisf+0x6a>
    424a:	77 23       	and	r23, r23
    424c:	21 f0       	breq	.+8      	; 0x4256 <__floatsisf+0x54>
    424e:	9e e8       	ldi	r25, 0x8E	; 142
    4250:	87 2f       	mov	r24, r23
    4252:	76 2f       	mov	r23, r22
    4254:	05 c0       	rjmp	.+10     	; 0x4260 <__floatsisf+0x5e>
    4256:	66 23       	and	r22, r22
    4258:	71 f0       	breq	.+28     	; 0x4276 <__floatsisf+0x74>
    425a:	96 e8       	ldi	r25, 0x86	; 134
    425c:	86 2f       	mov	r24, r22
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	2a f0       	brmi	.+10     	; 0x426e <__floatsisf+0x6c>
    4264:	9a 95       	dec	r25
    4266:	66 0f       	add	r22, r22
    4268:	77 1f       	adc	r23, r23
    426a:	88 1f       	adc	r24, r24
    426c:	da f7       	brpl	.-10     	; 0x4264 <__floatsisf+0x62>
    426e:	88 0f       	add	r24, r24
    4270:	96 95       	lsr	r25
    4272:	87 95       	ror	r24
    4274:	97 f9       	bld	r25, 7
    4276:	08 95       	ret

00004278 <__fp_inf>:
    4278:	97 f9       	bld	r25, 7
    427a:	9f 67       	ori	r25, 0x7F	; 127
    427c:	80 e8       	ldi	r24, 0x80	; 128
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	08 95       	ret

00004284 <__fp_nan>:
    4284:	9f ef       	ldi	r25, 0xFF	; 255
    4286:	80 ec       	ldi	r24, 0xC0	; 192
    4288:	08 95       	ret

0000428a <__fp_pscA>:
    428a:	00 24       	eor	r0, r0
    428c:	0a 94       	dec	r0
    428e:	16 16       	cp	r1, r22
    4290:	17 06       	cpc	r1, r23
    4292:	18 06       	cpc	r1, r24
    4294:	09 06       	cpc	r0, r25
    4296:	08 95       	ret

00004298 <__fp_pscB>:
    4298:	00 24       	eor	r0, r0
    429a:	0a 94       	dec	r0
    429c:	12 16       	cp	r1, r18
    429e:	13 06       	cpc	r1, r19
    42a0:	14 06       	cpc	r1, r20
    42a2:	05 06       	cpc	r0, r21
    42a4:	08 95       	ret

000042a6 <__fp_round>:
    42a6:	09 2e       	mov	r0, r25
    42a8:	03 94       	inc	r0
    42aa:	00 0c       	add	r0, r0
    42ac:	11 f4       	brne	.+4      	; 0x42b2 <__fp_round+0xc>
    42ae:	88 23       	and	r24, r24
    42b0:	52 f0       	brmi	.+20     	; 0x42c6 <__fp_round+0x20>
    42b2:	bb 0f       	add	r27, r27
    42b4:	40 f4       	brcc	.+16     	; 0x42c6 <__fp_round+0x20>
    42b6:	bf 2b       	or	r27, r31
    42b8:	11 f4       	brne	.+4      	; 0x42be <__fp_round+0x18>
    42ba:	60 ff       	sbrs	r22, 0
    42bc:	04 c0       	rjmp	.+8      	; 0x42c6 <__fp_round+0x20>
    42be:	6f 5f       	subi	r22, 0xFF	; 255
    42c0:	7f 4f       	sbci	r23, 0xFF	; 255
    42c2:	8f 4f       	sbci	r24, 0xFF	; 255
    42c4:	9f 4f       	sbci	r25, 0xFF	; 255
    42c6:	08 95       	ret

000042c8 <__fp_split3>:
    42c8:	57 fd       	sbrc	r21, 7
    42ca:	90 58       	subi	r25, 0x80	; 128
    42cc:	44 0f       	add	r20, r20
    42ce:	55 1f       	adc	r21, r21
    42d0:	59 f0       	breq	.+22     	; 0x42e8 <__fp_splitA+0x10>
    42d2:	5f 3f       	cpi	r21, 0xFF	; 255
    42d4:	71 f0       	breq	.+28     	; 0x42f2 <__fp_splitA+0x1a>
    42d6:	47 95       	ror	r20

000042d8 <__fp_splitA>:
    42d8:	88 0f       	add	r24, r24
    42da:	97 fb       	bst	r25, 7
    42dc:	99 1f       	adc	r25, r25
    42de:	61 f0       	breq	.+24     	; 0x42f8 <__fp_splitA+0x20>
    42e0:	9f 3f       	cpi	r25, 0xFF	; 255
    42e2:	79 f0       	breq	.+30     	; 0x4302 <__fp_splitA+0x2a>
    42e4:	87 95       	ror	r24
    42e6:	08 95       	ret
    42e8:	12 16       	cp	r1, r18
    42ea:	13 06       	cpc	r1, r19
    42ec:	14 06       	cpc	r1, r20
    42ee:	55 1f       	adc	r21, r21
    42f0:	f2 cf       	rjmp	.-28     	; 0x42d6 <__fp_split3+0xe>
    42f2:	46 95       	lsr	r20
    42f4:	f1 df       	rcall	.-30     	; 0x42d8 <__fp_splitA>
    42f6:	08 c0       	rjmp	.+16     	; 0x4308 <__fp_splitA+0x30>
    42f8:	16 16       	cp	r1, r22
    42fa:	17 06       	cpc	r1, r23
    42fc:	18 06       	cpc	r1, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	f1 cf       	rjmp	.-30     	; 0x42e4 <__fp_splitA+0xc>
    4302:	86 95       	lsr	r24
    4304:	71 05       	cpc	r23, r1
    4306:	61 05       	cpc	r22, r1
    4308:	08 94       	sec
    430a:	08 95       	ret

0000430c <__fp_zero>:
    430c:	e8 94       	clt

0000430e <__fp_szero>:
    430e:	bb 27       	eor	r27, r27
    4310:	66 27       	eor	r22, r22
    4312:	77 27       	eor	r23, r23
    4314:	cb 01       	movw	r24, r22
    4316:	97 f9       	bld	r25, 7
    4318:	08 95       	ret

0000431a <__mulsf3>:
    431a:	0b d0       	rcall	.+22     	; 0x4332 <__mulsf3x>
    431c:	c4 cf       	rjmp	.-120    	; 0x42a6 <__fp_round>
    431e:	b5 df       	rcall	.-150    	; 0x428a <__fp_pscA>
    4320:	28 f0       	brcs	.+10     	; 0x432c <__mulsf3+0x12>
    4322:	ba df       	rcall	.-140    	; 0x4298 <__fp_pscB>
    4324:	18 f0       	brcs	.+6      	; 0x432c <__mulsf3+0x12>
    4326:	95 23       	and	r25, r21
    4328:	09 f0       	breq	.+2      	; 0x432c <__mulsf3+0x12>
    432a:	a6 cf       	rjmp	.-180    	; 0x4278 <__fp_inf>
    432c:	ab cf       	rjmp	.-170    	; 0x4284 <__fp_nan>
    432e:	11 24       	eor	r1, r1
    4330:	ee cf       	rjmp	.-36     	; 0x430e <__fp_szero>

00004332 <__mulsf3x>:
    4332:	ca df       	rcall	.-108    	; 0x42c8 <__fp_split3>
    4334:	a0 f3       	brcs	.-24     	; 0x431e <__mulsf3+0x4>

00004336 <__mulsf3_pse>:
    4336:	95 9f       	mul	r25, r21
    4338:	d1 f3       	breq	.-12     	; 0x432e <__mulsf3+0x14>
    433a:	95 0f       	add	r25, r21
    433c:	50 e0       	ldi	r21, 0x00	; 0
    433e:	55 1f       	adc	r21, r21
    4340:	62 9f       	mul	r22, r18
    4342:	f0 01       	movw	r30, r0
    4344:	72 9f       	mul	r23, r18
    4346:	bb 27       	eor	r27, r27
    4348:	f0 0d       	add	r31, r0
    434a:	b1 1d       	adc	r27, r1
    434c:	63 9f       	mul	r22, r19
    434e:	aa 27       	eor	r26, r26
    4350:	f0 0d       	add	r31, r0
    4352:	b1 1d       	adc	r27, r1
    4354:	aa 1f       	adc	r26, r26
    4356:	64 9f       	mul	r22, r20
    4358:	66 27       	eor	r22, r22
    435a:	b0 0d       	add	r27, r0
    435c:	a1 1d       	adc	r26, r1
    435e:	66 1f       	adc	r22, r22
    4360:	82 9f       	mul	r24, r18
    4362:	22 27       	eor	r18, r18
    4364:	b0 0d       	add	r27, r0
    4366:	a1 1d       	adc	r26, r1
    4368:	62 1f       	adc	r22, r18
    436a:	73 9f       	mul	r23, r19
    436c:	b0 0d       	add	r27, r0
    436e:	a1 1d       	adc	r26, r1
    4370:	62 1f       	adc	r22, r18
    4372:	83 9f       	mul	r24, r19
    4374:	a0 0d       	add	r26, r0
    4376:	61 1d       	adc	r22, r1
    4378:	22 1f       	adc	r18, r18
    437a:	74 9f       	mul	r23, r20
    437c:	33 27       	eor	r19, r19
    437e:	a0 0d       	add	r26, r0
    4380:	61 1d       	adc	r22, r1
    4382:	23 1f       	adc	r18, r19
    4384:	84 9f       	mul	r24, r20
    4386:	60 0d       	add	r22, r0
    4388:	21 1d       	adc	r18, r1
    438a:	82 2f       	mov	r24, r18
    438c:	76 2f       	mov	r23, r22
    438e:	6a 2f       	mov	r22, r26
    4390:	11 24       	eor	r1, r1
    4392:	9f 57       	subi	r25, 0x7F	; 127
    4394:	50 40       	sbci	r21, 0x00	; 0
    4396:	8a f0       	brmi	.+34     	; 0x43ba <__mulsf3_pse+0x84>
    4398:	e1 f0       	breq	.+56     	; 0x43d2 <__mulsf3_pse+0x9c>
    439a:	88 23       	and	r24, r24
    439c:	4a f0       	brmi	.+18     	; 0x43b0 <__mulsf3_pse+0x7a>
    439e:	ee 0f       	add	r30, r30
    43a0:	ff 1f       	adc	r31, r31
    43a2:	bb 1f       	adc	r27, r27
    43a4:	66 1f       	adc	r22, r22
    43a6:	77 1f       	adc	r23, r23
    43a8:	88 1f       	adc	r24, r24
    43aa:	91 50       	subi	r25, 0x01	; 1
    43ac:	50 40       	sbci	r21, 0x00	; 0
    43ae:	a9 f7       	brne	.-22     	; 0x439a <__mulsf3_pse+0x64>
    43b0:	9e 3f       	cpi	r25, 0xFE	; 254
    43b2:	51 05       	cpc	r21, r1
    43b4:	70 f0       	brcs	.+28     	; 0x43d2 <__mulsf3_pse+0x9c>
    43b6:	60 cf       	rjmp	.-320    	; 0x4278 <__fp_inf>
    43b8:	aa cf       	rjmp	.-172    	; 0x430e <__fp_szero>
    43ba:	5f 3f       	cpi	r21, 0xFF	; 255
    43bc:	ec f3       	brlt	.-6      	; 0x43b8 <__mulsf3_pse+0x82>
    43be:	98 3e       	cpi	r25, 0xE8	; 232
    43c0:	dc f3       	brlt	.-10     	; 0x43b8 <__mulsf3_pse+0x82>
    43c2:	86 95       	lsr	r24
    43c4:	77 95       	ror	r23
    43c6:	67 95       	ror	r22
    43c8:	b7 95       	ror	r27
    43ca:	f7 95       	ror	r31
    43cc:	e7 95       	ror	r30
    43ce:	9f 5f       	subi	r25, 0xFF	; 255
    43d0:	c1 f7       	brne	.-16     	; 0x43c2 <__mulsf3_pse+0x8c>
    43d2:	fe 2b       	or	r31, r30
    43d4:	88 0f       	add	r24, r24
    43d6:	91 1d       	adc	r25, r1
    43d8:	96 95       	lsr	r25
    43da:	87 95       	ror	r24
    43dc:	97 f9       	bld	r25, 7
    43de:	08 95       	ret

000043e0 <_spiCallBack>:
    43e0:	81 b3       	in	r24, 0x11	; 17
    43e2:	8f 60       	ori	r24, 0x0F	; 15
    43e4:	81 bb       	out	0x11, r24	; 17
    43e6:	28 98       	cbi	0x05, 0	; 5
    43e8:	28 9a       	sbi	0x05, 0	; 5
    43ea:	21 b3       	in	r18, 0x11	; 17
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	00 90 fd 13 	lds	r0, 0x13FD	; 0x8013fd <_digitNo>
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <_spiCallBack+0x1a>
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	0a 94       	dec	r0
    43fc:	e2 f7       	brpl	.-8      	; 0x43f6 <_spiCallBack+0x16>
    43fe:	80 95       	com	r24
    4400:	82 23       	and	r24, r18
    4402:	81 bb       	out	0x11, r24	; 17
    4404:	e0 91 cd 13 	lds	r30, 0x13CD	; 0x8013cd <_displayDoneCallBack>
    4408:	f0 91 ce 13 	lds	r31, 0x13CE	; 0x8013ce <_displayDoneCallBack+0x1>
    440c:	30 97       	sbiw	r30, 0x00	; 0
    440e:	09 f0       	breq	.+2      	; 0x4412 <_spiCallBack+0x32>
    4410:	19 95       	eicall
    4412:	08 95       	ret

00004414 <display_7seg_displayErr>:
    4414:	9f b7       	in	r25, 0x3f	; 63
    4416:	f8 94       	cli
    4418:	e9 ef       	ldi	r30, 0xF9	; 249
    441a:	f3 e1       	ldi	r31, 0x13	; 19
    441c:	10 82       	st	Z, r1
    441e:	8e e9       	ldi	r24, 0x9E	; 158
    4420:	81 83       	std	Z+1, r24	; 0x01
    4422:	8a e0       	ldi	r24, 0x0A	; 10
    4424:	82 83       	std	Z+2, r24	; 0x02
    4426:	83 83       	std	Z+3, r24	; 0x03
    4428:	9f bf       	out	0x3f, r25	; 63
    442a:	08 95       	ret

0000442c <display_7seg_display>:
    442c:	bf 92       	push	r11
    442e:	cf 92       	push	r12
    4430:	df 92       	push	r13
    4432:	ef 92       	push	r14
    4434:	ff 92       	push	r15
    4436:	0f 93       	push	r16
    4438:	1f 93       	push	r17
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	6b 01       	movw	r12, r22
    4440:	7c 01       	movw	r14, r24
    4442:	b4 2e       	mov	r11, r20
    4444:	10 92 d0 13 	sts	0x13D0, r1	; 0x8013d0 <_maxHexSegmentindex>
    4448:	83 e0       	ldi	r24, 0x03	; 3
    444a:	84 17       	cp	r24, r20
    444c:	80 f1       	brcs	.+96     	; 0x44ae <display_7seg_display+0x82>
    444e:	64 2f       	mov	r22, r20
    4450:	70 e0       	ldi	r23, 0x00	; 0
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	d3 de       	rcall	.-602    	; 0x41fe <__floatunsisf>
    4458:	9b 01       	movw	r18, r22
    445a:	ac 01       	movw	r20, r24
    445c:	60 e0       	ldi	r22, 0x00	; 0
    445e:	70 e0       	ldi	r23, 0x00	; 0
    4460:	80 e2       	ldi	r24, 0x20	; 32
    4462:	91 e4       	ldi	r25, 0x41	; 65
    4464:	0e 94 d4 32 	call	0x65a8	; 0x65a8 <pow>
    4468:	a7 01       	movw	r20, r14
    446a:	96 01       	movw	r18, r12
    446c:	56 df       	rcall	.-340    	; 0x431a <__mulsf3>
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e0       	ldi	r20, 0x00	; 0
    4474:	5f e3       	ldi	r21, 0x3F	; 63
    4476:	0e 94 14 32 	call	0x6428	; 0x6428 <__addsf3>
    447a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <floor>
    447e:	8e de       	rcall	.-740    	; 0x419c <__fixsfsi>
    4480:	ab 01       	movw	r20, r22
    4482:	77 23       	and	r23, r23
    4484:	64 f4       	brge	.+24     	; 0x449e <display_7seg_display+0x72>
    4486:	44 27       	eor	r20, r20
    4488:	55 27       	eor	r21, r21
    448a:	46 1b       	sub	r20, r22
    448c:	57 0b       	sbc	r21, r23
    448e:	21 e0       	ldi	r18, 0x01	; 1
    4490:	48 3e       	cpi	r20, 0xE8	; 232
    4492:	83 e0       	ldi	r24, 0x03	; 3
    4494:	58 07       	cpc	r21, r24
    4496:	0c f4       	brge	.+2      	; 0x449a <display_7seg_display+0x6e>
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	11 e0       	ldi	r17, 0x01	; 1
    449c:	0c c0       	rjmp	.+24     	; 0x44b6 <display_7seg_display+0x8a>
    449e:	21 e0       	ldi	r18, 0x01	; 1
    44a0:	40 31       	cpi	r20, 0x10	; 16
    44a2:	87 e2       	ldi	r24, 0x27	; 39
    44a4:	58 07       	cpc	r21, r24
    44a6:	0c f4       	brge	.+2      	; 0x44aa <display_7seg_display+0x7e>
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	10 e0       	ldi	r17, 0x00	; 0
    44ac:	04 c0       	rjmp	.+8      	; 0x44b6 <display_7seg_display+0x8a>
    44ae:	40 e0       	ldi	r20, 0x00	; 0
    44b0:	50 e0       	ldi	r21, 0x00	; 0
    44b2:	21 e0       	ldi	r18, 0x01	; 1
    44b4:	10 e0       	ldi	r17, 0x00	; 0
    44b6:	0f b7       	in	r16, 0x3f	; 63
    44b8:	f8 94       	cli
    44ba:	22 23       	and	r18, r18
    44bc:	11 f0       	breq	.+4      	; 0x44c2 <display_7seg_display+0x96>
    44be:	aa df       	rcall	.-172    	; 0x4414 <display_7seg_displayErr>
    44c0:	51 c0       	rjmp	.+162    	; 0x4564 <display_7seg_display+0x138>
    44c2:	cd ef       	ldi	r28, 0xFD	; 253
    44c4:	d3 e1       	ldi	r29, 0x13	; 19
    44c6:	0f 2e       	mov	r0, r31
    44c8:	f9 ef       	ldi	r31, 0xF9	; 249
    44ca:	cf 2e       	mov	r12, r31
    44cc:	f3 e1       	ldi	r31, 0x13	; 19
    44ce:	df 2e       	mov	r13, r31
    44d0:	f0 2d       	mov	r31, r0
    44d2:	0f 2e       	mov	r0, r31
    44d4:	fa e0       	ldi	r31, 0x0A	; 10
    44d6:	ef 2e       	mov	r14, r31
    44d8:	f1 2c       	mov	r15, r1
    44da:	f0 2d       	mov	r31, r0
    44dc:	ca 01       	movw	r24, r20
    44de:	b7 01       	movw	r22, r14
    44e0:	0e 94 3d 34 	call	0x687a	; 0x687a <__divmodhi4>
    44e4:	fc 01       	movw	r30, r24
    44e6:	e5 54       	subi	r30, 0x45	; 69
    44e8:	fa 4f       	sbci	r31, 0xFA	; 250
    44ea:	80 81       	ld	r24, Z
    44ec:	8a 93       	st	-Y, r24
    44ee:	46 2f       	mov	r20, r22
    44f0:	57 2f       	mov	r21, r23
    44f2:	cc 15       	cp	r28, r12
    44f4:	dd 05       	cpc	r29, r13
    44f6:	91 f7       	brne	.-28     	; 0x44dc <display_7seg_display+0xb0>
    44f8:	43 e0       	ldi	r20, 0x03	; 3
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	4b 19       	sub	r20, r11
    44fe:	51 09       	sbc	r21, r1
    4500:	14 16       	cp	r1, r20
    4502:	15 06       	cpc	r1, r21
    4504:	f4 f4       	brge	.+60     	; 0x4542 <display_7seg_display+0x116>
    4506:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <_digitSegments>
    450a:	8c 3f       	cpi	r24, 0xFC	; 252
    450c:	49 f0       	breq	.+18     	; 0x4520 <display_7seg_display+0xf4>
    450e:	60 e0       	ldi	r22, 0x00	; 0
    4510:	19 c0       	rjmp	.+50     	; 0x4544 <display_7seg_display+0x118>
    4512:	fc 01       	movw	r30, r24
    4514:	e7 50       	subi	r30, 0x07	; 7
    4516:	fc 4e       	sbci	r31, 0xEC	; 236
    4518:	30 81       	ld	r19, Z
    451a:	3c 3f       	cpi	r19, 0xFC	; 252
    451c:	21 f0       	breq	.+8      	; 0x4526 <display_7seg_display+0xfa>
    451e:	12 c0       	rjmp	.+36     	; 0x4544 <display_7seg_display+0x118>
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	fc 01       	movw	r30, r24
    4528:	e7 50       	subi	r30, 0x07	; 7
    452a:	fc 4e       	sbci	r31, 0xEC	; 236
    452c:	10 82       	st	Z, r1
    452e:	62 2f       	mov	r22, r18
    4530:	2f 5f       	subi	r18, 0xFF	; 255
    4532:	82 2f       	mov	r24, r18
    4534:	02 2e       	mov	r0, r18
    4536:	00 0c       	add	r0, r0
    4538:	99 0b       	sbc	r25, r25
    453a:	84 17       	cp	r24, r20
    453c:	95 07       	cpc	r25, r21
    453e:	4c f3       	brlt	.-46     	; 0x4512 <display_7seg_display+0xe6>
    4540:	01 c0       	rjmp	.+2      	; 0x4544 <display_7seg_display+0x118>
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	11 23       	and	r17, r17
    4546:	31 f0       	breq	.+12     	; 0x4554 <display_7seg_display+0x128>
    4548:	e6 2f       	mov	r30, r22
    454a:	f0 e0       	ldi	r31, 0x00	; 0
    454c:	e7 50       	subi	r30, 0x07	; 7
    454e:	fc 4e       	sbci	r31, 0xEC	; 236
    4550:	82 e0       	ldi	r24, 0x02	; 2
    4552:	80 83       	st	Z, r24
    4554:	bb 20       	and	r11, r11
    4556:	31 f0       	breq	.+12     	; 0x4564 <display_7seg_display+0x138>
    4558:	fa 01       	movw	r30, r20
    455a:	e7 50       	subi	r30, 0x07	; 7
    455c:	fc 4e       	sbci	r31, 0xEC	; 236
    455e:	80 81       	ld	r24, Z
    4560:	81 60       	ori	r24, 0x01	; 1
    4562:	80 83       	st	Z, r24
    4564:	0f bf       	out	0x3f, r16	; 63
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	ff 90       	pop	r15
    4570:	ef 90       	pop	r14
    4572:	df 90       	pop	r13
    4574:	cf 90       	pop	r12
    4576:	bf 90       	pop	r11
    4578:	08 95       	ret

0000457a <display_7seg_powerUp>:
    457a:	85 b5       	in	r24, 0x25	; 37
    457c:	85 60       	ori	r24, 0x05	; 5
    457e:	85 bd       	out	0x25, r24	; 37
    4580:	08 95       	ret

00004582 <display_7seg_powerDown>:
    4582:	85 b5       	in	r24, 0x25	; 37
    4584:	88 7f       	andi	r24, 0xF8	; 248
    4586:	85 bd       	out	0x25, r24	; 37
    4588:	81 b3       	in	r24, 0x11	; 17
    458a:	8f 60       	ori	r24, 0x0F	; 15
    458c:	81 bb       	out	0x11, r24	; 17
    458e:	08 95       	ret

00004590 <display_7seg_initialise>:
    4590:	8f 92       	push	r8
    4592:	af 92       	push	r10
    4594:	cf 92       	push	r12
    4596:	ef 92       	push	r14
    4598:	0f 93       	push	r16
    459a:	1f 93       	push	r17
    459c:	cf 93       	push	r28
    459e:	df 93       	push	r29
    45a0:	ec 01       	movw	r28, r24
    45a2:	80 b3       	in	r24, 0x10	; 16
    45a4:	8f 60       	ori	r24, 0x0F	; 15
    45a6:	80 bb       	out	0x10, r24	; 16
    45a8:	81 b3       	in	r24, 0x11	; 17
    45aa:	8f 60       	ori	r24, 0x0F	; 15
    45ac:	81 bb       	out	0x11, r24	; 17
    45ae:	20 9a       	sbi	0x04, 0	; 4
    45b0:	80 ef       	ldi	r24, 0xF0	; 240
    45b2:	91 e2       	ldi	r25, 0x21	; 33
    45b4:	9f 93       	push	r25
    45b6:	8f 93       	push	r24
    45b8:	81 2c       	mov	r8, r1
    45ba:	a1 2c       	mov	r10, r1
    45bc:	c1 2c       	mov	r12, r1
    45be:	e1 2c       	mov	r14, r1
    45c0:	00 e0       	ldi	r16, 0x00	; 0
    45c2:	10 e0       	ldi	r17, 0x00	; 0
    45c4:	20 e2       	ldi	r18, 0x20	; 32
    45c6:	40 e0       	ldi	r20, 0x00	; 0
    45c8:	63 e0       	ldi	r22, 0x03	; 3
    45ca:	80 e1       	ldi	r24, 0x10	; 16
    45cc:	0e 94 57 2d 	call	0x5aae	; 0x5aae <spi_create>
    45d0:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <_spi+0x1>
    45d4:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <_spi>
    45d8:	89 e1       	ldi	r24, 0x19	; 25
    45da:	87 bd       	out	0x27, r24	; 39
    45dc:	84 b5       	in	r24, 0x24	; 36
    45de:	82 60       	ori	r24, 0x02	; 2
    45e0:	84 bd       	out	0x24, r24	; 36
    45e2:	ee e6       	ldi	r30, 0x6E	; 110
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	80 81       	ld	r24, Z
    45e8:	82 60       	ori	r24, 0x02	; 2
    45ea:	80 83       	st	Z, r24
    45ec:	ca df       	rcall	.-108    	; 0x4582 <display_7seg_powerDown>
    45ee:	d0 93 ce 13 	sts	0x13CE, r29	; 0x8013ce <_displayDoneCallBack+0x1>
    45f2:	c0 93 cd 13 	sts	0x13CD, r28	; 0x8013cd <_displayDoneCallBack>
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	df 91       	pop	r29
    45fc:	cf 91       	pop	r28
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	ef 90       	pop	r14
    4604:	cf 90       	pop	r12
    4606:	af 90       	pop	r10
    4608:	8f 90       	pop	r8
    460a:	08 95       	ret

0000460c <__vector_21>:
    460c:	1f 92       	push	r1
    460e:	0f 92       	push	r0
    4610:	0f b6       	in	r0, 0x3f	; 63
    4612:	0f 92       	push	r0
    4614:	11 24       	eor	r1, r1
    4616:	0b b6       	in	r0, 0x3b	; 59
    4618:	0f 92       	push	r0
    461a:	2f 93       	push	r18
    461c:	3f 93       	push	r19
    461e:	4f 93       	push	r20
    4620:	5f 93       	push	r21
    4622:	6f 93       	push	r22
    4624:	7f 93       	push	r23
    4626:	8f 93       	push	r24
    4628:	9f 93       	push	r25
    462a:	af 93       	push	r26
    462c:	bf 93       	push	r27
    462e:	ef 93       	push	r30
    4630:	ff 93       	push	r31
    4632:	80 91 d0 13 	lds	r24, 0x13D0	; 0x8013d0 <_maxHexSegmentindex>
    4636:	88 23       	and	r24, r24
    4638:	69 f1       	breq	.+90     	; 0x4694 <__vector_21+0x88>
    463a:	20 91 d1 13 	lds	r18, 0x13D1	; 0x8013d1 <_intCounter>
    463e:	30 91 d2 13 	lds	r19, 0x13D2	; 0x8013d2 <_intCounter+0x1>
    4642:	25 3f       	cpi	r18, 0xF5	; 245
    4644:	91 e0       	ldi	r25, 0x01	; 1
    4646:	39 07       	cpc	r19, r25
    4648:	38 f4       	brcc	.+14     	; 0x4658 <__vector_21+0x4c>
    464a:	2f 5f       	subi	r18, 0xFF	; 255
    464c:	3f 4f       	sbci	r19, 0xFF	; 255
    464e:	30 93 d2 13 	sts	0x13D2, r19	; 0x8013d2 <_intCounter+0x1>
    4652:	20 93 d1 13 	sts	0x13D1, r18	; 0x8013d1 <_intCounter>
    4656:	1e c0       	rjmp	.+60     	; 0x4694 <__vector_21+0x88>
    4658:	10 92 d2 13 	sts	0x13D2, r1	; 0x8013d2 <_intCounter+0x1>
    465c:	10 92 d1 13 	sts	0x13D1, r1	; 0x8013d1 <_intCounter>
    4660:	e0 91 cf 13 	lds	r30, 0x13CF	; 0x8013cf <_scrollIndex>
    4664:	2e 2f       	mov	r18, r30
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	04 97       	sbiw	r24, 0x04	; 4
    466c:	28 17       	cp	r18, r24
    466e:	39 07       	cpc	r19, r25
    4670:	14 f4       	brge	.+4      	; 0x4676 <__vector_21+0x6a>
    4672:	ef 5f       	subi	r30, 0xFF	; 255
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <__vector_21+0x6c>
    4676:	e0 e0       	ldi	r30, 0x00	; 0
    4678:	e0 93 cf 13 	sts	0x13CF, r30	; 0x8013cf <_scrollIndex>
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	ed 52       	subi	r30, 0x2D	; 45
    4680:	fc 4e       	sbci	r31, 0xEC	; 236
    4682:	a9 ef       	ldi	r26, 0xF9	; 249
    4684:	b3 e1       	ldi	r27, 0x13	; 19
    4686:	2d ef       	ldi	r18, 0xFD	; 253
    4688:	33 e1       	ldi	r19, 0x13	; 19
    468a:	81 91       	ld	r24, Z+
    468c:	8d 93       	st	X+, r24
    468e:	a2 17       	cp	r26, r18
    4690:	b3 07       	cpc	r27, r19
    4692:	d9 f7       	brne	.-10     	; 0x468a <__vector_21+0x7e>
    4694:	80 91 fd 13 	lds	r24, 0x13FD	; 0x8013fd <_digitNo>
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	83 70       	andi	r24, 0x03	; 3
    469e:	90 78       	andi	r25, 0x80	; 128
    46a0:	99 23       	and	r25, r25
    46a2:	24 f4       	brge	.+8      	; 0x46ac <__vector_21+0xa0>
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	8c 6f       	ori	r24, 0xFC	; 252
    46a8:	9f 6f       	ori	r25, 0xFF	; 255
    46aa:	01 96       	adiw	r24, 0x01	; 1
    46ac:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <_digitNo>
    46b0:	99 27       	eor	r25, r25
    46b2:	fc 01       	movw	r30, r24
    46b4:	e7 50       	subi	r30, 0x07	; 7
    46b6:	fc 4e       	sbci	r31, 0xEC	; 236
    46b8:	60 81       	ld	r22, Z
    46ba:	60 95       	com	r22
    46bc:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <_spi>
    46c0:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <_spi+0x1>
    46c4:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <spi_sendByte>
    46c8:	ff 91       	pop	r31
    46ca:	ef 91       	pop	r30
    46cc:	bf 91       	pop	r27
    46ce:	af 91       	pop	r26
    46d0:	9f 91       	pop	r25
    46d2:	8f 91       	pop	r24
    46d4:	7f 91       	pop	r23
    46d6:	6f 91       	pop	r22
    46d8:	5f 91       	pop	r21
    46da:	4f 91       	pop	r20
    46dc:	3f 91       	pop	r19
    46de:	2f 91       	pop	r18
    46e0:	0f 90       	pop	r0
    46e2:	0b be       	out	0x3b, r0	; 59
    46e4:	0f 90       	pop	r0
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	0f 90       	pop	r0
    46ea:	1f 90       	pop	r1
    46ec:	18 95       	reti

000046ee <_hihTwiCallback>:
    46ee:	65 30       	cpi	r22, 0x05	; 5
    46f0:	f1 f4       	brne	.+60     	; 0x472e <_hihTwiCallback+0x40>
    46f2:	fa 01       	movw	r30, r20
    46f4:	80 81       	ld	r24, Z
    46f6:	8f 73       	andi	r24, 0x3F	; 63
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	98 2f       	mov	r25, r24
    46fc:	88 27       	eor	r24, r24
    46fe:	21 81       	ldd	r18, Z+1	; 0x01
    4700:	82 2b       	or	r24, r18
    4702:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4706:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	f0 e4       	ldi	r31, 0x40	; 64
    470e:	8f 9f       	mul	r24, r31
    4710:	c0 01       	movw	r24, r0
    4712:	11 24       	eor	r1, r1
    4714:	fa 01       	movw	r30, r20
    4716:	23 81       	ldd	r18, Z+3	; 0x03
    4718:	26 95       	lsr	r18
    471a:	26 95       	lsr	r18
    471c:	82 2b       	or	r24, r18
    471e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4722:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <_measuringIsReady>
    472c:	08 95       	ret
    472e:	64 30       	cpi	r22, 0x04	; 4
    4730:	51 f0       	breq	.+20     	; 0x4746 <_hihTwiCallback+0x58>
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	90 e4       	ldi	r25, 0x40	; 64
    4736:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    473a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    473e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4742:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4746:	08 95       	ret

00004748 <hih8120_initialise>:
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	07 e7       	ldi	r16, 0x77	; 119
    474e:	13 e2       	ldi	r17, 0x23	; 35
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	34 e2       	ldi	r19, 0x24	; 36
    4754:	44 ef       	ldi	r20, 0xF4	; 244
    4756:	50 e0       	ldi	r21, 0x00	; 0
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	87 e2       	ldi	r24, 0x27	; 39
    475c:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <twiCreate>
    4760:	90 93 02 14 	sts	0x1402, r25	; 0x801402 <_hih8120Handler+0x1>
    4764:	80 93 01 14 	sts	0x1401, r24	; 0x801401 <_hih8120Handler>
    4768:	21 e0       	ldi	r18, 0x01	; 1
    476a:	89 2b       	or	r24, r25
    476c:	09 f0       	breq	.+2      	; 0x4770 <hih8120_initialise+0x28>
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	82 2f       	mov	r24, r18
    4772:	1f 91       	pop	r17
    4774:	0f 91       	pop	r16
    4776:	08 95       	ret

00004778 <hih8120_wakeup>:
    4778:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <_hih8120Handler>
    477c:	90 91 02 14 	lds	r25, 0x1402	; 0x801402 <_hih8120Handler+0x1>
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	59 f0       	breq	.+22     	; 0x479a <hih8120_wakeup+0x22>
    4784:	40 e0       	ldi	r20, 0x00	; 0
    4786:	60 e0       	ldi	r22, 0x00	; 0
    4788:	70 e0       	ldi	r23, 0x00	; 0
    478a:	0e 94 bb 30 	call	0x6176	; 0x6176 <twiTransmit>
    478e:	84 30       	cpi	r24, 0x04	; 4
    4790:	31 f4       	brne	.+12     	; 0x479e <hih8120_wakeup+0x26>
    4792:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <_measuringIsReady>
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	08 95       	ret
    479a:	82 e0       	ldi	r24, 0x02	; 2
    479c:	08 95       	ret
    479e:	83 e0       	ldi	r24, 0x03	; 3
    47a0:	08 95       	ret

000047a2 <hih8120_measure>:
    47a2:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <_hih8120Handler>
    47a6:	90 91 02 14 	lds	r25, 0x1402	; 0x801402 <_hih8120Handler+0x1>
    47aa:	00 97       	sbiw	r24, 0x00	; 0
    47ac:	39 f0       	breq	.+14     	; 0x47bc <hih8120_measure+0x1a>
    47ae:	64 e0       	ldi	r22, 0x04	; 4
    47b0:	0e 94 07 31 	call	0x620e	; 0x620e <twiReceive>
    47b4:	85 30       	cpi	r24, 0x05	; 5
    47b6:	21 f0       	breq	.+8      	; 0x47c0 <hih8120_measure+0x1e>
    47b8:	83 e0       	ldi	r24, 0x03	; 3
    47ba:	08 95       	ret
    47bc:	82 e0       	ldi	r24, 0x02	; 2
    47be:	08 95       	ret
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	08 95       	ret

000047c4 <hih8120_getHumidity>:
    47c4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    47c8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	16 dd       	rcall	.-1492   	; 0x41fe <__floatunsisf>
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	48 ec       	ldi	r20, 0xC8	; 200
    47d8:	52 e4       	ldi	r21, 0x42	; 66
    47da:	9f dd       	rcall	.-1218   	; 0x431a <__mulsf3>
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	38 ef       	ldi	r19, 0xF8	; 248
    47e0:	4f e7       	ldi	r20, 0x7F	; 127
    47e2:	56 e4       	ldi	r21, 0x46	; 70
    47e4:	73 cc       	rjmp	.-1818   	; 0x40cc <__divsf3>
    47e6:	08 95       	ret

000047e8 <hih8120_getTemperature>:
    47e8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    47ec:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	04 dd       	rcall	.-1528   	; 0x41fe <__floatunsisf>
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	45 e2       	ldi	r20, 0x25	; 37
    47fc:	53 e4       	ldi	r21, 0x43	; 67
    47fe:	8d dd       	rcall	.-1254   	; 0x431a <__mulsf3>
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	38 ef       	ldi	r19, 0xF8	; 248
    4804:	4f e7       	ldi	r20, 0x7F	; 127
    4806:	56 e4       	ldi	r21, 0x46	; 70
    4808:	61 dc       	rcall	.-1854   	; 0x40cc <__divsf3>
    480a:	20 e0       	ldi	r18, 0x00	; 0
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	40 e2       	ldi	r20, 0x20	; 32
    4810:	52 e4       	ldi	r21, 0x42	; 66
    4812:	0c 94 13 32 	jmp	0x6426	; 0x6426 <__subsf3>
    4816:	08 95       	ret

00004818 <_serialCallBack>:
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	1f 92       	push	r1
    4822:	1f 92       	push	r1
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	8c 01       	movw	r16, r24
    482a:	19 82       	std	Y+1, r1	; 0x01
    482c:	2d c0       	rjmp	.+90     	; 0x4888 <_serialCallBack+0x70>
    482e:	e0 91 67 14 	lds	r30, 0x1467	; 0x801467 <rec_buf_inp.2878>
    4832:	ec 32       	cpi	r30, 0x2C	; 44
    4834:	50 f4       	brcc	.+20     	; 0x484a <_serialCallBack+0x32>
    4836:	81 e0       	ldi	r24, 0x01	; 1
    4838:	8e 0f       	add	r24, r30
    483a:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <rec_buf_inp.2878>
    483e:	f0 e0       	ldi	r31, 0x00	; 0
    4840:	e7 56       	subi	r30, 0x67	; 103
    4842:	fb 4e       	sbci	r31, 0xEB	; 235
    4844:	8a 81       	ldd	r24, Y+2	; 0x02
    4846:	80 83       	st	Z, r24
    4848:	02 c0       	rjmp	.+4      	; 0x484e <_serialCallBack+0x36>
    484a:	10 92 67 14 	sts	0x1467, r1	; 0x801467 <rec_buf_inp.2878>
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	8a 30       	cpi	r24, 0x0A	; 10
    4852:	d1 f4       	brne	.+52     	; 0x4888 <_serialCallBack+0x70>
    4854:	40 91 67 14 	lds	r20, 0x1467	; 0x801467 <rec_buf_inp.2878>
    4858:	50 e0       	ldi	r21, 0x00	; 0
    485a:	fa 01       	movw	r30, r20
    485c:	e9 56       	subi	r30, 0x69	; 105
    485e:	fb 4e       	sbci	r31, 0xEB	; 235
    4860:	10 82       	st	Z, r1
    4862:	41 50       	subi	r20, 0x01	; 1
    4864:	51 09       	sbc	r21, r1
    4866:	9e 01       	movw	r18, r28
    4868:	2f 5f       	subi	r18, 0xFF	; 255
    486a:	3f 4f       	sbci	r19, 0xFF	; 255
    486c:	69 e9       	ldi	r22, 0x99	; 153
    486e:	74 e1       	ldi	r23, 0x14	; 20
    4870:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_serialReplyBufferHandle>
    4874:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_serialReplyBufferHandle+0x1>
    4878:	0e 94 21 11 	call	0x2242	; 0x2242 <xStreamBufferSendFromISR>
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	81 11       	cpse	r24, r1
    4880:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vPortYield>
    4884:	10 92 67 14 	sts	0x1467, r1	; 0x801467 <rec_buf_inp.2878>
    4888:	be 01       	movw	r22, r28
    488a:	6e 5f       	subi	r22, 0xFE	; 254
    488c:	7f 4f       	sbci	r23, 0xFF	; 255
    488e:	c8 01       	movw	r24, r16
    4890:	16 d6       	rcall	.+3116   	; 0x54be <serial_getByte>
    4892:	88 23       	and	r24, r24
    4894:	61 f2       	breq	.-104    	; 0x482e <_serialCallBack+0x16>
    4896:	0f 90       	pop	r0
    4898:	0f 90       	pop	r0
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	1f 91       	pop	r17
    48a0:	0f 91       	pop	r16
    48a2:	08 95       	ret

000048a4 <_uploadMessage>:
    48a4:	0f 93       	push	r16
    48a6:	1f 93       	push	r17
    48a8:	cf 93       	push	r28
    48aa:	df 93       	push	r29
    48ac:	8c 01       	movw	r16, r24
    48ae:	eb 01       	movw	r28, r22
    48b0:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_serialReplyBufferHandle>
    48b4:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_serialReplyBufferHandle+0x1>
    48b8:	0e 94 17 10 	call	0x202e	; 0x202e <xStreamBufferReset>
    48bc:	b8 01       	movw	r22, r16
    48be:	83 e0       	ldi	r24, 0x03	; 3
    48c0:	94 e1       	ldi	r25, 0x14	; 20
    48c2:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <strcpy>
    48c6:	20 97       	sbiw	r28, 0x00	; 0
    48c8:	79 f0       	breq	.+30     	; 0x48e8 <_uploadMessage+0x44>
    48ca:	e3 e0       	ldi	r30, 0x03	; 3
    48cc:	f4 e1       	ldi	r31, 0x14	; 20
    48ce:	01 90       	ld	r0, Z+
    48d0:	00 20       	and	r0, r0
    48d2:	e9 f7       	brne	.-6      	; 0x48ce <_uploadMessage+0x2a>
    48d4:	31 97       	sbiw	r30, 0x01	; 1
    48d6:	80 e2       	ldi	r24, 0x20	; 32
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	91 83       	std	Z+1, r25	; 0x01
    48dc:	80 83       	st	Z, r24
    48de:	be 01       	movw	r22, r28
    48e0:	83 e0       	ldi	r24, 0x03	; 3
    48e2:	94 e1       	ldi	r25, 0x14	; 20
    48e4:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <strcat>
    48e8:	e3 e0       	ldi	r30, 0x03	; 3
    48ea:	f4 e1       	ldi	r31, 0x14	; 20
    48ec:	df 01       	movw	r26, r30
    48ee:	0d 90       	ld	r0, X+
    48f0:	00 20       	and	r0, r0
    48f2:	e9 f7       	brne	.-6      	; 0x48ee <_uploadMessage+0x4a>
    48f4:	11 97       	sbiw	r26, 0x01	; 1
    48f6:	8d e0       	ldi	r24, 0x0D	; 13
    48f8:	9a e0       	ldi	r25, 0x0A	; 10
    48fa:	11 96       	adiw	r26, 0x01	; 1
    48fc:	9c 93       	st	X, r25
    48fe:	8e 93       	st	-X, r24
    4900:	12 96       	adiw	r26, 0x02	; 2
    4902:	1c 92       	st	X, r1
    4904:	01 90       	ld	r0, Z+
    4906:	00 20       	and	r0, r0
    4908:	e9 f7       	brne	.-6      	; 0x4904 <_uploadMessage+0x60>
    490a:	31 97       	sbiw	r30, 0x01	; 1
    490c:	e3 50       	subi	r30, 0x03	; 3
    490e:	f4 41       	sbci	r31, 0x14	; 20
    4910:	ae 2f       	mov	r26, r30
    4912:	83 e0       	ldi	r24, 0x03	; 3
    4914:	94 e1       	ldi	r25, 0x14	; 20
    4916:	ac 01       	movw	r20, r24
    4918:	6a 2f       	mov	r22, r26
    491a:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_rn2483_serial>
    491e:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_rn2483_serial+0x1>
    4922:	78 d5       	rcall	.+2800   	; 0x5414 <serial_sendBytes>
    4924:	81 11       	cpse	r24, r1
    4926:	11 c0       	rjmp	.+34     	; 0x494a <_uploadMessage+0xa6>
    4928:	08 e2       	ldi	r16, 0x28	; 40
    492a:	15 e0       	ldi	r17, 0x05	; 5
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	4d e2       	ldi	r20, 0x2D	; 45
    4932:	50 e0       	ldi	r21, 0x00	; 0
    4934:	63 ef       	ldi	r22, 0xF3	; 243
    4936:	74 e1       	ldi	r23, 0x14	; 20
    4938:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_serialReplyBufferHandle>
    493c:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_serialReplyBufferHandle+0x1>
    4940:	0e 94 65 11 	call	0x22ca	; 0x22ca <xStreamBufferReceive>
    4944:	83 ef       	ldi	r24, 0xF3	; 243
    4946:	94 e1       	ldi	r25, 0x14	; 20
    4948:	02 c0       	rjmp	.+4      	; 0x494e <_uploadMessage+0xaa>
    494a:	80 e0       	ldi	r24, 0x00	; 0
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	1f 91       	pop	r17
    4954:	0f 91       	pop	r16
    4956:	08 95       	ret

00004958 <_reply2ReturnCode>:
    4958:	2f 92       	push	r2
    495a:	3f 92       	push	r3
    495c:	4f 92       	push	r4
    495e:	5f 92       	push	r5
    4960:	6f 92       	push	r6
    4962:	7f 92       	push	r7
    4964:	8f 92       	push	r8
    4966:	9f 92       	push	r9
    4968:	af 92       	push	r10
    496a:	bf 92       	push	r11
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	5c 01       	movw	r10, r24
    497e:	fc 01       	movw	r30, r24
    4980:	01 90       	ld	r0, Z+
    4982:	00 20       	and	r0, r0
    4984:	e9 f7       	brne	.-6      	; 0x4980 <_reply2ReturnCode+0x28>
    4986:	31 97       	sbiw	r30, 0x01	; 1
    4988:	6f 01       	movw	r12, r30
    498a:	c8 1a       	sub	r12, r24
    498c:	d9 0a       	sbc	r13, r25
    498e:	5c 2c       	mov	r5, r12
    4990:	0f 2e       	mov	r0, r31
    4992:	fa e5       	ldi	r31, 0x5A	; 90
    4994:	8f 2e       	mov	r8, r31
    4996:	f8 e0       	ldi	r31, 0x08	; 8
    4998:	9f 2e       	mov	r9, r31
    499a:	f0 2d       	mov	r31, r0
    499c:	e1 2c       	mov	r14, r1
    499e:	f1 2c       	mov	r15, r1
    49a0:	4c 2c       	mov	r4, r12
    49a2:	37 01       	movw	r6, r14
    49a4:	f4 01       	movw	r30, r8
    49a6:	01 81       	ldd	r16, Z+1	; 0x01
    49a8:	12 81       	ldd	r17, Z+2	; 0x02
    49aa:	e8 01       	movw	r28, r16
    49ac:	09 90       	ld	r0, Y+
    49ae:	00 20       	and	r0, r0
    49b0:	e9 f7       	brne	.-6      	; 0x49ac <_reply2ReturnCode+0x54>
    49b2:	21 97       	sbiw	r28, 0x01	; 1
    49b4:	c0 1b       	sub	r28, r16
    49b6:	d1 0b       	sbc	r29, r17
    49b8:	3c 2e       	mov	r3, r28
    49ba:	f9 e0       	ldi	r31, 0x09	; 9
    49bc:	cf 16       	cp	r12, r31
    49be:	d1 04       	cpc	r13, r1
    49c0:	58 f0       	brcs	.+22     	; 0x49d8 <_reply2ReturnCode+0x80>
    49c2:	f4 01       	movw	r30, r8
    49c4:	20 80       	ld	r2, Z
    49c6:	fe e0       	ldi	r31, 0x0E	; 14
    49c8:	2f 12       	cpse	r2, r31
    49ca:	06 c0       	rjmp	.+12     	; 0x49d8 <_reply2ReturnCode+0x80>
    49cc:	b8 01       	movw	r22, r16
    49ce:	c5 01       	movw	r24, r10
    49d0:	0e 94 f6 35 	call	0x6bec	; 0x6bec <strcasestr>
    49d4:	89 2b       	or	r24, r25
    49d6:	09 f5       	brne	.+66     	; 0x4a1a <_reply2ReturnCode+0xc2>
    49d8:	44 2d       	mov	r20, r4
    49da:	35 14       	cp	r3, r5
    49dc:	08 f4       	brcc	.+2      	; 0x49e0 <_reply2ReturnCode+0x88>
    49de:	4c 2f       	mov	r20, r28
    49e0:	50 e0       	ldi	r21, 0x00	; 0
    49e2:	b8 01       	movw	r22, r16
    49e4:	c5 01       	movw	r24, r10
    49e6:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <strncasecmp>
    49ea:	89 2b       	or	r24, r25
    49ec:	49 f4       	brne	.+18     	; 0x4a00 <_reply2ReturnCode+0xa8>
    49ee:	f3 01       	movw	r30, r6
    49f0:	ee 0f       	add	r30, r30
    49f2:	ff 1f       	adc	r31, r31
    49f4:	e6 0d       	add	r30, r6
    49f6:	f7 1d       	adc	r31, r7
    49f8:	e6 5a       	subi	r30, 0xA6	; 166
    49fa:	f7 4f       	sbci	r31, 0xF7	; 247
    49fc:	20 80       	ld	r2, Z
    49fe:	0d c0       	rjmp	.+26     	; 0x4a1a <_reply2ReturnCode+0xc2>
    4a00:	8f ef       	ldi	r24, 0xFF	; 255
    4a02:	e8 1a       	sub	r14, r24
    4a04:	f8 0a       	sbc	r15, r24
    4a06:	e3 e0       	ldi	r30, 0x03	; 3
    4a08:	8e 0e       	add	r8, r30
    4a0a:	91 1c       	adc	r9, r1
    4a0c:	f1 e1       	ldi	r31, 0x11	; 17
    4a0e:	ef 16       	cp	r14, r31
    4a10:	f1 04       	cpc	r15, r1
    4a12:	39 f6       	brne	.-114    	; 0x49a2 <_reply2ReturnCode+0x4a>
    4a14:	68 94       	set
    4a16:	22 24       	eor	r2, r2
    4a18:	24 f8       	bld	r2, 4
    4a1a:	82 2d       	mov	r24, r2
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	1f 91       	pop	r17
    4a22:	0f 91       	pop	r16
    4a24:	ff 90       	pop	r15
    4a26:	ef 90       	pop	r14
    4a28:	df 90       	pop	r13
    4a2a:	cf 90       	pop	r12
    4a2c:	bf 90       	pop	r11
    4a2e:	af 90       	pop	r10
    4a30:	9f 90       	pop	r9
    4a32:	8f 90       	pop	r8
    4a34:	7f 90       	pop	r7
    4a36:	6f 90       	pop	r6
    4a38:	5f 90       	pop	r5
    4a3a:	4f 90       	pop	r4
    4a3c:	3f 90       	pop	r3
    4a3e:	2f 90       	pop	r2
    4a40:	08 95       	ret

00004a42 <_uploadMessageRc>:
    4a42:	30 df       	rcall	.-416    	; 0x48a4 <_uploadMessage>
    4a44:	89 cf       	rjmp	.-238    	; 0x4958 <_reply2ReturnCode>
    4a46:	08 95       	ret

00004a48 <lora_driver_flushBuffers>:
    4a48:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_serialReplyBufferHandle>
    4a4c:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_serialReplyBufferHandle+0x1>
    4a50:	0c 94 17 10 	jmp	0x202e	; 0x202e <xStreamBufferReset>
    4a54:	08 95       	ret

00004a56 <lora_driver_initialise>:
    4a56:	8f 92       	push	r8
    4a58:	9f 92       	push	r9
    4a5a:	af 92       	push	r10
    4a5c:	cf 92       	push	r12
    4a5e:	ef 92       	push	r14
    4a60:	0f 93       	push	r16
    4a62:	1f 93       	push	r17
    4a64:	cf 93       	push	r28
    4a66:	c8 2f       	mov	r28, r24
    4a68:	8b 01       	movw	r16, r22
    4a6a:	41 e0       	ldi	r20, 0x01	; 1
    4a6c:	60 e0       	ldi	r22, 0x00	; 0
    4a6e:	70 e0       	ldi	r23, 0x00	; 0
    4a70:	88 ec       	ldi	r24, 0xC8	; 200
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <xStreamBufferGenericCreate>
    4a78:	90 93 6b 14 	sts	0x146B, r25	; 0x80146b <_serialReplyBufferHandle+0x1>
    4a7c:	80 93 6a 14 	sts	0x146A, r24	; 0x80146a <_serialReplyBufferHandle>
    4a80:	10 93 69 14 	sts	0x1469, r17	; 0x801469 <_downlinkMessageBuffer+0x1>
    4a84:	00 93 68 14 	sts	0x1468, r16	; 0x801468 <_downlinkMessageBuffer>
    4a88:	0f 2e       	mov	r0, r31
    4a8a:	fc e0       	ldi	r31, 0x0C	; 12
    4a8c:	8f 2e       	mov	r8, r31
    4a8e:	f4 e2       	ldi	r31, 0x24	; 36
    4a90:	9f 2e       	mov	r9, r31
    4a92:	f0 2d       	mov	r31, r0
    4a94:	68 94       	set
    4a96:	aa 24       	eor	r10, r10
    4a98:	a6 f8       	bld	r10, 6
    4a9a:	68 94       	set
    4a9c:	cc 24       	eor	r12, r12
    4a9e:	c6 f8       	bld	r12, 6
    4aa0:	e1 2c       	mov	r14, r1
    4aa2:	00 e0       	ldi	r16, 0x00	; 0
    4aa4:	23 e0       	ldi	r18, 0x03	; 3
    4aa6:	40 e0       	ldi	r20, 0x00	; 0
    4aa8:	51 ee       	ldi	r21, 0xE1	; 225
    4aaa:	60 e0       	ldi	r22, 0x00	; 0
    4aac:	70 e0       	ldi	r23, 0x00	; 0
    4aae:	8c 2f       	mov	r24, r28
    4ab0:	de d3       	rcall	.+1980   	; 0x526e <serial_create>
    4ab2:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <_rn2483_serial+0x1>
    4ab6:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <_rn2483_serial>
    4aba:	e7 e0       	ldi	r30, 0x07	; 7
    4abc:	f1 e0       	ldi	r31, 0x01	; 1
    4abe:	80 81       	ld	r24, Z
    4ac0:	80 61       	ori	r24, 0x10	; 16
    4ac2:	80 83       	st	Z, r24
    4ac4:	cf 91       	pop	r28
    4ac6:	1f 91       	pop	r17
    4ac8:	0f 91       	pop	r16
    4aca:	ef 90       	pop	r14
    4acc:	cf 90       	pop	r12
    4ace:	af 90       	pop	r10
    4ad0:	9f 90       	pop	r9
    4ad2:	8f 90       	pop	r8
    4ad4:	08 95       	ret

00004ad6 <lora_driver_resetRn2483>:
    4ad6:	88 23       	and	r24, r24
    4ad8:	31 f0       	breq	.+12     	; 0x4ae6 <lora_driver_resetRn2483+0x10>
    4ada:	e8 e0       	ldi	r30, 0x08	; 8
    4adc:	f1 e0       	ldi	r31, 0x01	; 1
    4ade:	80 81       	ld	r24, Z
    4ae0:	8f 7e       	andi	r24, 0xEF	; 239
    4ae2:	80 83       	st	Z, r24
    4ae4:	08 95       	ret
    4ae6:	e8 e0       	ldi	r30, 0x08	; 8
    4ae8:	f1 e0       	ldi	r31, 0x01	; 1
    4aea:	80 81       	ld	r24, Z
    4aec:	80 61       	ori	r24, 0x10	; 16
    4aee:	80 83       	st	Z, r24
    4af0:	08 95       	ret

00004af2 <lora_driver_rn2483FactoryReset>:
    4af2:	60 e0       	ldi	r22, 0x00	; 0
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	8a ee       	ldi	r24, 0xEA	; 234
    4af8:	95 e0       	ldi	r25, 0x05	; 5
    4afa:	d4 de       	rcall	.-600    	; 0x48a4 <_uploadMessage>
    4afc:	e3 ef       	ldi	r30, 0xF3	; 243
    4afe:	f4 e1       	ldi	r31, 0x14	; 20
    4b00:	01 90       	ld	r0, Z+
    4b02:	00 20       	and	r0, r0
    4b04:	e9 f7       	brne	.-6      	; 0x4b00 <lora_driver_rn2483FactoryReset+0xe>
    4b06:	31 97       	sbiw	r30, 0x01	; 1
    4b08:	e3 5f       	subi	r30, 0xF3	; 243
    4b0a:	f4 41       	sbci	r31, 0x14	; 20
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	75 97       	sbiw	r30, 0x15	; 21
    4b10:	08 f0       	brcs	.+2      	; 0x4b14 <lora_driver_rn2483FactoryReset+0x22>
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	08 95       	ret

00004b16 <lora_driver_getRn2483Hweui>:
    4b16:	cf 93       	push	r28
    4b18:	df 93       	push	r29
    4b1a:	ec 01       	movw	r28, r24
    4b1c:	60 e0       	ldi	r22, 0x00	; 0
    4b1e:	70 e0       	ldi	r23, 0x00	; 0
    4b20:	8b ef       	ldi	r24, 0xFB	; 251
    4b22:	95 e0       	ldi	r25, 0x05	; 5
    4b24:	bf de       	rcall	.-642    	; 0x48a4 <_uploadMessage>
    4b26:	e3 ef       	ldi	r30, 0xF3	; 243
    4b28:	f4 e1       	ldi	r31, 0x14	; 20
    4b2a:	01 90       	ld	r0, Z+
    4b2c:	00 20       	and	r0, r0
    4b2e:	e9 f7       	brne	.-6      	; 0x4b2a <lora_driver_getRn2483Hweui+0x14>
    4b30:	e4 50       	subi	r30, 0x04	; 4
    4b32:	f5 41       	sbci	r31, 0x15	; 21
    4b34:	39 f4       	brne	.+14     	; 0x4b44 <lora_driver_getRn2483Hweui+0x2e>
    4b36:	63 ef       	ldi	r22, 0xF3	; 243
    4b38:	74 e1       	ldi	r23, 0x14	; 20
    4b3a:	ce 01       	movw	r24, r28
    4b3c:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <strcpy>
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	02 c0       	rjmp	.+4      	; 0x4b48 <lora_driver_getRn2483Hweui+0x32>
    4b44:	18 82       	st	Y, r1
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	df 91       	pop	r29
    4b4a:	cf 91       	pop	r28
    4b4c:	08 95       	ret

00004b4e <lora_driver_setDeviceIdentifier>:
    4b4e:	fc 01       	movw	r30, r24
    4b50:	01 90       	ld	r0, Z+
    4b52:	00 20       	and	r0, r0
    4b54:	e9 f7       	brne	.-6      	; 0x4b50 <lora_driver_setDeviceIdentifier+0x2>
    4b56:	9f 01       	movw	r18, r30
    4b58:	21 51       	subi	r18, 0x11	; 17
    4b5a:	31 09       	sbc	r19, r1
    4b5c:	28 17       	cp	r18, r24
    4b5e:	39 07       	cpc	r19, r25
    4b60:	29 f4       	brne	.+10     	; 0x4b6c <lora_driver_setDeviceIdentifier+0x1e>
    4b62:	bc 01       	movw	r22, r24
    4b64:	89 e2       	ldi	r24, 0x29	; 41
    4b66:	96 e0       	ldi	r25, 0x06	; 6
    4b68:	6c cf       	rjmp	.-296    	; 0x4a42 <_uploadMessageRc>
    4b6a:	08 95       	ret
    4b6c:	89 e0       	ldi	r24, 0x09	; 9
    4b6e:	08 95       	ret

00004b70 <lora_driver_setApplicationIdentifier>:
    4b70:	fc 01       	movw	r30, r24
    4b72:	01 90       	ld	r0, Z+
    4b74:	00 20       	and	r0, r0
    4b76:	e9 f7       	brne	.-6      	; 0x4b72 <lora_driver_setApplicationIdentifier+0x2>
    4b78:	9f 01       	movw	r18, r30
    4b7a:	21 51       	subi	r18, 0x11	; 17
    4b7c:	31 09       	sbc	r19, r1
    4b7e:	28 17       	cp	r18, r24
    4b80:	39 07       	cpc	r19, r25
    4b82:	29 f4       	brne	.+10     	; 0x4b8e <lora_driver_setApplicationIdentifier+0x1e>
    4b84:	bc 01       	movw	r22, r24
    4b86:	88 e3       	ldi	r24, 0x38	; 56
    4b88:	96 e0       	ldi	r25, 0x06	; 6
    4b8a:	5b cf       	rjmp	.-330    	; 0x4a42 <_uploadMessageRc>
    4b8c:	08 95       	ret
    4b8e:	89 e0       	ldi	r24, 0x09	; 9
    4b90:	08 95       	ret

00004b92 <lora_driver_setApplicationKey>:
    4b92:	fc 01       	movw	r30, r24
    4b94:	01 90       	ld	r0, Z+
    4b96:	00 20       	and	r0, r0
    4b98:	e9 f7       	brne	.-6      	; 0x4b94 <lora_driver_setApplicationKey+0x2>
    4b9a:	9f 01       	movw	r18, r30
    4b9c:	21 52       	subi	r18, 0x21	; 33
    4b9e:	31 09       	sbc	r19, r1
    4ba0:	28 17       	cp	r18, r24
    4ba2:	39 07       	cpc	r19, r25
    4ba4:	29 f4       	brne	.+10     	; 0x4bb0 <lora_driver_setApplicationKey+0x1e>
    4ba6:	bc 01       	movw	r22, r24
    4ba8:	87 e4       	ldi	r24, 0x47	; 71
    4baa:	96 e0       	ldi	r25, 0x06	; 6
    4bac:	4a cf       	rjmp	.-364    	; 0x4a42 <_uploadMessageRc>
    4bae:	08 95       	ret
    4bb0:	89 e0       	ldi	r24, 0x09	; 9
    4bb2:	08 95       	ret

00004bb4 <lora_driver_saveMac>:
    4bb4:	60 e0       	ldi	r22, 0x00	; 0
    4bb6:	70 e0       	ldi	r23, 0x00	; 0
    4bb8:	86 e8       	ldi	r24, 0x86	; 134
    4bba:	96 e0       	ldi	r25, 0x06	; 6
    4bbc:	42 cf       	rjmp	.-380    	; 0x4a42 <_uploadMessageRc>
    4bbe:	08 95       	ret

00004bc0 <lora_driver_join>:
    4bc0:	0f 93       	push	r16
    4bc2:	1f 93       	push	r17
    4bc4:	e8 2f       	mov	r30, r24
    4bc6:	f0 e0       	ldi	r31, 0x00	; 0
    4bc8:	ee 0f       	add	r30, r30
    4bca:	ff 1f       	adc	r31, r31
    4bcc:	ea 5a       	subi	r30, 0xAA	; 170
    4bce:	f7 4f       	sbci	r31, 0xF7	; 247
    4bd0:	60 81       	ld	r22, Z
    4bd2:	71 81       	ldd	r23, Z+1	; 0x01
    4bd4:	8f e8       	ldi	r24, 0x8F	; 143
    4bd6:	96 e0       	ldi	r25, 0x06	; 6
    4bd8:	34 df       	rcall	.-408    	; 0x4a42 <_uploadMessageRc>
    4bda:	81 11       	cpse	r24, r1
    4bdc:	14 c0       	rjmp	.+40     	; 0x4c06 <lora_driver_join+0x46>
    4bde:	08 e2       	ldi	r16, 0x28	; 40
    4be0:	15 e0       	ldi	r17, 0x05	; 5
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	4d e2       	ldi	r20, 0x2D	; 45
    4be8:	50 e0       	ldi	r21, 0x00	; 0
    4bea:	63 ef       	ldi	r22, 0xF3	; 243
    4bec:	74 e1       	ldi	r23, 0x14	; 20
    4bee:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_serialReplyBufferHandle>
    4bf2:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_serialReplyBufferHandle+0x1>
    4bf6:	0e 94 65 11 	call	0x22ca	; 0x22ca <xStreamBufferReceive>
    4bfa:	88 23       	and	r24, r24
    4bfc:	21 f0       	breq	.+8      	; 0x4c06 <lora_driver_join+0x46>
    4bfe:	83 ef       	ldi	r24, 0xF3	; 243
    4c00:	94 e1       	ldi	r25, 0x14	; 20
    4c02:	aa de       	rcall	.-684    	; 0x4958 <_reply2ReturnCode>
    4c04:	03 c0       	rjmp	.+6      	; 0x4c0c <lora_driver_join+0x4c>
    4c06:	83 ef       	ldi	r24, 0xF3	; 243
    4c08:	94 e1       	ldi	r25, 0x14	; 20
    4c0a:	a6 de       	rcall	.-692    	; 0x4958 <_reply2ReturnCode>
    4c0c:	1f 91       	pop	r17
    4c0e:	0f 91       	pop	r16
    4c10:	08 95       	ret

00004c12 <lora_driver_sendUploadMessage>:
    4c12:	0f 93       	push	r16
    4c14:	1f 93       	push	r17
    4c16:	cf 93       	push	r28
    4c18:	df 93       	push	r29
    4c1a:	1f 92       	push	r1
    4c1c:	cd b7       	in	r28, 0x3d	; 61
    4c1e:	de b7       	in	r29, 0x3e	; 62
    4c20:	db 01       	movw	r26, r22
    4c22:	11 96       	adiw	r26, 0x01	; 1
    4c24:	9c 91       	ld	r25, X
    4c26:	11 97       	sbiw	r26, 0x01	; 1
    4c28:	95 31       	cpi	r25, 0x15	; 21
    4c2a:	08 f0       	brcs	.+2      	; 0x4c2e <lora_driver_sendUploadMessage+0x1c>
    4c2c:	b4 c0       	rjmp	.+360    	; 0x4d96 <lora_driver_sendUploadMessage+0x184>
    4c2e:	99 23       	and	r25, r25
    4c30:	81 f1       	breq	.+96     	; 0x4c92 <lora_driver_sendUploadMessage+0x80>
    4c32:	60 e0       	ldi	r22, 0x00	; 0
    4c34:	70 e0       	ldi	r23, 0x00	; 0
    4c36:	27 2f       	mov	r18, r23
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	46 2f       	mov	r20, r22
    4c3c:	50 e0       	ldi	r21, 0x00	; 0
    4c3e:	fd 01       	movw	r30, r26
    4c40:	e4 0f       	add	r30, r20
    4c42:	f5 1f       	adc	r31, r21
    4c44:	92 81       	ldd	r25, Z+2	; 0x02
    4c46:	92 95       	swap	r25
    4c48:	9f 70       	andi	r25, 0x0F	; 15
    4c4a:	9a 30       	cpi	r25, 0x0A	; 10
    4c4c:	10 f0       	brcs	.+4      	; 0x4c52 <lora_driver_sendUploadMessage+0x40>
    4c4e:	99 5c       	subi	r25, 0xC9	; 201
    4c50:	01 c0       	rjmp	.+2      	; 0x4c54 <lora_driver_sendUploadMessage+0x42>
    4c52:	90 5d       	subi	r25, 0xD0	; 208
    4c54:	f9 01       	movw	r30, r18
    4c56:	ec 57       	subi	r30, 0x7C	; 124
    4c58:	fb 4e       	sbci	r31, 0xEB	; 235
    4c5a:	90 83       	st	Z, r25
    4c5c:	2f 5f       	subi	r18, 0xFF	; 255
    4c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c60:	fd 01       	movw	r30, r26
    4c62:	e4 0f       	add	r30, r20
    4c64:	f5 1f       	adc	r31, r21
    4c66:	92 81       	ldd	r25, Z+2	; 0x02
    4c68:	9f 70       	andi	r25, 0x0F	; 15
    4c6a:	49 2f       	mov	r20, r25
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	4a 30       	cpi	r20, 0x0A	; 10
    4c70:	51 05       	cpc	r21, r1
    4c72:	14 f0       	brlt	.+4      	; 0x4c78 <lora_driver_sendUploadMessage+0x66>
    4c74:	99 5c       	subi	r25, 0xC9	; 201
    4c76:	01 c0       	rjmp	.+2      	; 0x4c7a <lora_driver_sendUploadMessage+0x68>
    4c78:	90 5d       	subi	r25, 0xD0	; 208
    4c7a:	f9 01       	movw	r30, r18
    4c7c:	ec 57       	subi	r30, 0x7C	; 124
    4c7e:	fb 4e       	sbci	r31, 0xEB	; 235
    4c80:	90 83       	st	Z, r25
    4c82:	7e 5f       	subi	r23, 0xFE	; 254
    4c84:	6f 5f       	subi	r22, 0xFF	; 255
    4c86:	11 96       	adiw	r26, 0x01	; 1
    4c88:	9c 91       	ld	r25, X
    4c8a:	11 97       	sbiw	r26, 0x01	; 1
    4c8c:	69 17       	cp	r22, r25
    4c8e:	98 f2       	brcs	.-90     	; 0x4c36 <lora_driver_sendUploadMessage+0x24>
    4c90:	01 c0       	rjmp	.+2      	; 0x4c94 <lora_driver_sendUploadMessage+0x82>
    4c92:	70 e0       	ldi	r23, 0x00	; 0
    4c94:	e7 2f       	mov	r30, r23
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	ec 57       	subi	r30, 0x7C	; 124
    4c9a:	fb 4e       	sbci	r31, 0xEB	; 235
    4c9c:	10 82       	st	Z, r1
    4c9e:	4c 91       	ld	r20, X
    4ca0:	81 11       	cpse	r24, r1
    4ca2:	03 c0       	rjmp	.+6      	; 0x4caa <lora_driver_sendUploadMessage+0x98>
    4ca4:	88 e9       	ldi	r24, 0x98	; 152
    4ca6:	96 e0       	ldi	r25, 0x06	; 6
    4ca8:	02 c0       	rjmp	.+4      	; 0x4cae <lora_driver_sendUploadMessage+0x9c>
    4caa:	8a e9       	ldi	r24, 0x9A	; 154
    4cac:	96 e0       	ldi	r25, 0x06	; 6
    4cae:	24 e8       	ldi	r18, 0x84	; 132
    4cb0:	34 e1       	ldi	r19, 0x14	; 20
    4cb2:	3f 93       	push	r19
    4cb4:	2f 93       	push	r18
    4cb6:	1f 92       	push	r1
    4cb8:	4f 93       	push	r20
    4cba:	9f 93       	push	r25
    4cbc:	8f 93       	push	r24
    4cbe:	8e e9       	ldi	r24, 0x9E	; 158
    4cc0:	96 e0       	ldi	r25, 0x06	; 6
    4cc2:	9f 93       	push	r25
    4cc4:	8f 93       	push	r24
    4cc6:	86 ec       	ldi	r24, 0xC6	; 198
    4cc8:	94 e1       	ldi	r25, 0x14	; 20
    4cca:	9f 93       	push	r25
    4ccc:	8f 93       	push	r24
    4cce:	0e 94 88 36 	call	0x6d10	; 0x6d10 <sprintf>
    4cd2:	60 e0       	ldi	r22, 0x00	; 0
    4cd4:	70 e0       	ldi	r23, 0x00	; 0
    4cd6:	86 ec       	ldi	r24, 0xC6	; 198
    4cd8:	94 e1       	ldi	r25, 0x14	; 20
    4cda:	b3 de       	rcall	.-666    	; 0x4a42 <_uploadMessageRc>
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	0f be       	out	0x3f, r0	; 63
    4ce4:	cd bf       	out	0x3d, r28	; 61
    4ce6:	81 11       	cpse	r24, r1
    4ce8:	59 c0       	rjmp	.+178    	; 0x4d9c <lora_driver_sendUploadMessage+0x18a>
    4cea:	08 e2       	ldi	r16, 0x28	; 40
    4cec:	15 e0       	ldi	r17, 0x05	; 5
    4cee:	20 e0       	ldi	r18, 0x00	; 0
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	4d e2       	ldi	r20, 0x2D	; 45
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	63 ef       	ldi	r22, 0xF3	; 243
    4cf8:	74 e1       	ldi	r23, 0x14	; 20
    4cfa:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_serialReplyBufferHandle>
    4cfe:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_serialReplyBufferHandle+0x1>
    4d02:	0e 94 65 11 	call	0x22ca	; 0x22ca <xStreamBufferReceive>
    4d06:	88 23       	and	r24, r24
    4d08:	09 f4       	brne	.+2      	; 0x4d0c <lora_driver_sendUploadMessage+0xfa>
    4d0a:	47 c0       	rjmp	.+142    	; 0x4d9a <lora_driver_sendUploadMessage+0x188>
    4d0c:	83 ef       	ldi	r24, 0xF3	; 243
    4d0e:	94 e1       	ldi	r25, 0x14	; 20
    4d10:	23 de       	rcall	.-954    	; 0x4958 <_reply2ReturnCode>
    4d12:	8e 30       	cpi	r24, 0x0E	; 14
    4d14:	09 f0       	breq	.+2      	; 0x4d18 <lora_driver_sendUploadMessage+0x106>
    4d16:	42 c0       	rjmp	.+132    	; 0x4d9c <lora_driver_sendUploadMessage+0x18a>
    4d18:	87 e0       	ldi	r24, 0x07	; 7
    4d1a:	89 83       	std	Y+1, r24	; 0x01
    4d1c:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <_downlinkMessageBuffer>
    4d20:	90 91 69 14 	lds	r25, 0x1469	; 0x801469 <_downlinkMessageBuffer+0x1>
    4d24:	89 2b       	or	r24, r25
    4d26:	a9 f1       	breq	.+106    	; 0x4d92 <lora_driver_sendUploadMessage+0x180>
    4d28:	be 01       	movw	r22, r28
    4d2a:	6f 5f       	subi	r22, 0xFF	; 255
    4d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2e:	83 ef       	ldi	r24, 0xF3	; 243
    4d30:	94 e1       	ldi	r25, 0x14	; 20
    4d32:	68 d1       	rcall	.+720    	; 0x5004 <decode_port_no>
    4d34:	80 93 6e 14 	sts	0x146E, r24	; 0x80146e <_downlinkPayload>
    4d38:	e9 81       	ldd	r30, Y+1	; 0x01
    4d3a:	f0 e0       	ldi	r31, 0x00	; 0
    4d3c:	ed 50       	subi	r30, 0x0D	; 13
    4d3e:	fb 4e       	sbci	r31, 0xEB	; 235
    4d40:	df 01       	movw	r26, r30
    4d42:	0d 90       	ld	r0, X+
    4d44:	00 20       	and	r0, r0
    4d46:	e9 f7       	brne	.-6      	; 0x4d42 <lora_driver_sendUploadMessage+0x130>
    4d48:	11 97       	sbiw	r26, 0x01	; 1
    4d4a:	ae 1b       	sub	r26, r30
    4d4c:	bf 0b       	sbc	r27, r31
    4d4e:	aa 23       	and	r26, r26
    4d50:	91 f0       	breq	.+36     	; 0x4d76 <lora_driver_sendUploadMessage+0x164>
    4d52:	bb 27       	eor	r27, r27
    4d54:	cd 01       	movw	r24, r26
    4d56:	01 97       	sbiw	r24, 0x01	; 1
    4d58:	9c 01       	movw	r18, r24
    4d5a:	12 f4       	brpl	.+4      	; 0x4d60 <lora_driver_sendUploadMessage+0x14e>
    4d5c:	2f 5f       	subi	r18, 0xFF	; 255
    4d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d60:	35 95       	asr	r19
    4d62:	27 95       	ror	r18
    4d64:	20 93 6f 14 	sts	0x146F, r18	; 0x80146f <_downlinkPayload+0x1>
    4d68:	af 01       	movw	r20, r30
    4d6a:	4f 5f       	subi	r20, 0xFF	; 255
    4d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d6e:	64 e1       	ldi	r22, 0x14	; 20
    4d70:	80 e7       	ldi	r24, 0x70	; 112
    4d72:	94 e1       	ldi	r25, 0x14	; 20
    4d74:	73 d1       	rcall	.+742    	; 0x505c <decode_hexadecimal_string_bytes>
    4d76:	01 e0       	ldi	r16, 0x01	; 1
    4d78:	10 e0       	ldi	r17, 0x00	; 0
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	46 e1       	ldi	r20, 0x16	; 22
    4d80:	50 e0       	ldi	r21, 0x00	; 0
    4d82:	6e e6       	ldi	r22, 0x6E	; 110
    4d84:	74 e1       	ldi	r23, 0x14	; 20
    4d86:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <_downlinkMessageBuffer>
    4d8a:	90 91 69 14 	lds	r25, 0x1469	; 0x801469 <_downlinkMessageBuffer+0x1>
    4d8e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xStreamBufferSend>
    4d92:	8e e0       	ldi	r24, 0x0E	; 14
    4d94:	03 c0       	rjmp	.+6      	; 0x4d9c <lora_driver_sendUploadMessage+0x18a>
    4d96:	84 e1       	ldi	r24, 0x14	; 20
    4d98:	01 c0       	rjmp	.+2      	; 0x4d9c <lora_driver_sendUploadMessage+0x18a>
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	0f 90       	pop	r0
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	1f 91       	pop	r17
    4da4:	0f 91       	pop	r16
    4da6:	08 95       	ret

00004da8 <lora_driver_setAdaptiveDataRate>:
    4da8:	81 30       	cpi	r24, 0x01	; 1
    4daa:	19 f0       	breq	.+6      	; 0x4db2 <lora_driver_setAdaptiveDataRate+0xa>
    4dac:	6e ea       	ldi	r22, 0xAE	; 174
    4dae:	76 e0       	ldi	r23, 0x06	; 6
    4db0:	02 c0       	rjmp	.+4      	; 0x4db6 <lora_driver_setAdaptiveDataRate+0xe>
    4db2:	67 e8       	ldi	r22, 0x87	; 135
    4db4:	77 e0       	ldi	r23, 0x07	; 7
    4db6:	82 eb       	ldi	r24, 0xB2	; 178
    4db8:	96 e0       	ldi	r25, 0x06	; 6
    4dba:	43 ce       	rjmp	.-890    	; 0x4a42 <_uploadMessageRc>
    4dbc:	08 95       	ret

00004dbe <lora_driver_setReceiveDelay>:
    4dbe:	9f 93       	push	r25
    4dc0:	8f 93       	push	r24
    4dc2:	83 ee       	ldi	r24, 0xE3	; 227
    4dc4:	96 e0       	ldi	r25, 0x06	; 6
    4dc6:	9f 93       	push	r25
    4dc8:	8f 93       	push	r24
    4dca:	86 ec       	ldi	r24, 0xC6	; 198
    4dcc:	94 e1       	ldi	r25, 0x14	; 20
    4dce:	9f 93       	push	r25
    4dd0:	8f 93       	push	r24
    4dd2:	0e 94 88 36 	call	0x6d10	; 0x6d10 <sprintf>
    4dd6:	60 e0       	ldi	r22, 0x00	; 0
    4dd8:	70 e0       	ldi	r23, 0x00	; 0
    4dda:	86 ec       	ldi	r24, 0xC6	; 198
    4ddc:	94 e1       	ldi	r25, 0x14	; 20
    4dde:	31 de       	rcall	.-926    	; 0x4a42 <_uploadMessageRc>
    4de0:	0f 90       	pop	r0
    4de2:	0f 90       	pop	r0
    4de4:	0f 90       	pop	r0
    4de6:	0f 90       	pop	r0
    4de8:	0f 90       	pop	r0
    4dea:	0f 90       	pop	r0
    4dec:	08 95       	ret

00004dee <lora_driver_configureToEu868>:
    4dee:	2f 92       	push	r2
    4df0:	3f 92       	push	r3
    4df2:	4f 92       	push	r4
    4df4:	5f 92       	push	r5
    4df6:	6f 92       	push	r6
    4df8:	7f 92       	push	r7
    4dfa:	8f 92       	push	r8
    4dfc:	9f 92       	push	r9
    4dfe:	af 92       	push	r10
    4e00:	bf 92       	push	r11
    4e02:	cf 92       	push	r12
    4e04:	df 92       	push	r13
    4e06:	ef 92       	push	r14
    4e08:	ff 92       	push	r15
    4e0a:	0f 93       	push	r16
    4e0c:	1f 93       	push	r17
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
    4e16:	a0 97       	sbiw	r28, 0x20	; 32
    4e18:	0f b6       	in	r0, 0x3f	; 63
    4e1a:	f8 94       	cli
    4e1c:	de bf       	out	0x3e, r29	; 62
    4e1e:	0f be       	out	0x3f, r0	; 63
    4e20:	cd bf       	out	0x3d, r28	; 61
    4e22:	60 e1       	ldi	r22, 0x10	; 16
    4e24:	77 e0       	ldi	r23, 0x07	; 7
    4e26:	8c e1       	ldi	r24, 0x1C	; 28
    4e28:	97 e0       	ldi	r25, 0x07	; 7
    4e2a:	3c dd       	rcall	.-1416   	; 0x48a4 <_uploadMessage>
    4e2c:	95 dd       	rcall	.-1238   	; 0x4958 <_reply2ReturnCode>
    4e2e:	81 11       	cpse	r24, r1
    4e30:	a3 c0       	rjmp	.+326    	; 0x4f78 <lora_driver_configureToEu868+0x18a>
    4e32:	80 e2       	ldi	r24, 0x20	; 32
    4e34:	e2 e2       	ldi	r30, 0x22	; 34
    4e36:	f2 e0       	ldi	r31, 0x02	; 2
    4e38:	de 01       	movw	r26, r28
    4e3a:	11 96       	adiw	r26, 0x01	; 1
    4e3c:	01 90       	ld	r0, Z+
    4e3e:	0d 92       	st	X+, r0
    4e40:	8a 95       	dec	r24
    4e42:	e1 f7       	brne	.-8      	; 0x4e3c <lora_driver_configureToEu868+0x4e>
    4e44:	9e 01       	movw	r18, r28
    4e46:	2f 5f       	subi	r18, 0xFF	; 255
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	69 01       	movw	r12, r18
    4e4c:	e1 2c       	mov	r14, r1
    4e4e:	f1 2c       	mov	r15, r1
    4e50:	0f 2e       	mov	r0, r31
    4e52:	f8 e2       	ldi	r31, 0x28	; 40
    4e54:	af 2e       	mov	r10, r31
    4e56:	f7 e0       	ldi	r31, 0x07	; 7
    4e58:	bf 2e       	mov	r11, r31
    4e5a:	f0 2d       	mov	r31, r0
    4e5c:	06 ec       	ldi	r16, 0xC6	; 198
    4e5e:	14 e1       	ldi	r17, 0x14	; 20
    4e60:	0f 2e       	mov	r0, r31
    4e62:	f1 e4       	ldi	r31, 0x41	; 65
    4e64:	4f 2e       	mov	r4, r31
    4e66:	f7 e0       	ldi	r31, 0x07	; 7
    4e68:	5f 2e       	mov	r5, r31
    4e6a:	f0 2d       	mov	r31, r0
    4e6c:	0f 2e       	mov	r0, r31
    4e6e:	f8 e5       	ldi	r31, 0x58	; 88
    4e70:	8f 2e       	mov	r8, r31
    4e72:	f7 e0       	ldi	r31, 0x07	; 7
    4e74:	9f 2e       	mov	r9, r31
    4e76:	f0 2d       	mov	r31, r0
    4e78:	0f 2e       	mov	r0, r31
    4e7a:	f2 e7       	ldi	r31, 0x72	; 114
    4e7c:	6f 2e       	mov	r6, r31
    4e7e:	f7 e0       	ldi	r31, 0x07	; 7
    4e80:	7f 2e       	mov	r7, r31
    4e82:	f0 2d       	mov	r31, r0
    4e84:	3e 2c       	mov	r3, r14
    4e86:	2f 2c       	mov	r2, r15
    4e88:	ff 92       	push	r15
    4e8a:	ef 92       	push	r14
    4e8c:	bf 92       	push	r11
    4e8e:	af 92       	push	r10
    4e90:	1f 93       	push	r17
    4e92:	0f 93       	push	r16
    4e94:	0e 94 88 36 	call	0x6d10	; 0x6d10 <sprintf>
    4e98:	60 e0       	ldi	r22, 0x00	; 0
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	c8 01       	movw	r24, r16
    4e9e:	02 dd       	rcall	.-1532   	; 0x48a4 <_uploadMessage>
    4ea0:	5b dd       	rcall	.-1354   	; 0x4958 <_reply2ReturnCode>
    4ea2:	0f 90       	pop	r0
    4ea4:	0f 90       	pop	r0
    4ea6:	0f 90       	pop	r0
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	81 11       	cpse	r24, r1
    4eb0:	63 c0       	rjmp	.+198    	; 0x4f78 <lora_driver_configureToEu868+0x18a>
    4eb2:	32 e0       	ldi	r19, 0x02	; 2
    4eb4:	3e 15       	cp	r19, r14
    4eb6:	e8 f4       	brcc	.+58     	; 0x4ef2 <lora_driver_configureToEu868+0x104>
    4eb8:	f6 01       	movw	r30, r12
    4eba:	83 81       	ldd	r24, Z+3	; 0x03
    4ebc:	8f 93       	push	r24
    4ebe:	82 81       	ldd	r24, Z+2	; 0x02
    4ec0:	8f 93       	push	r24
    4ec2:	81 81       	ldd	r24, Z+1	; 0x01
    4ec4:	8f 93       	push	r24
    4ec6:	80 81       	ld	r24, Z
    4ec8:	8f 93       	push	r24
    4eca:	ff 92       	push	r15
    4ecc:	ef 92       	push	r14
    4ece:	5f 92       	push	r5
    4ed0:	4f 92       	push	r4
    4ed2:	1f 93       	push	r17
    4ed4:	0f 93       	push	r16
    4ed6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <sprintf>
    4eda:	60 e0       	ldi	r22, 0x00	; 0
    4edc:	70 e0       	ldi	r23, 0x00	; 0
    4ede:	c8 01       	movw	r24, r16
    4ee0:	e1 dc       	rcall	.-1598   	; 0x48a4 <_uploadMessage>
    4ee2:	3a dd       	rcall	.-1420   	; 0x4958 <_reply2ReturnCode>
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	f8 94       	cli
    4ee8:	de bf       	out	0x3e, r29	; 62
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	cd bf       	out	0x3d, r28	; 61
    4eee:	81 11       	cpse	r24, r1
    4ef0:	43 c0       	rjmp	.+134    	; 0x4f78 <lora_driver_configureToEu868+0x18a>
    4ef2:	2f 92       	push	r2
    4ef4:	3f 92       	push	r3
    4ef6:	9f 92       	push	r9
    4ef8:	8f 92       	push	r8
    4efa:	1f 93       	push	r17
    4efc:	0f 93       	push	r16
    4efe:	0e 94 88 36 	call	0x6d10	; 0x6d10 <sprintf>
    4f02:	60 e0       	ldi	r22, 0x00	; 0
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	c8 01       	movw	r24, r16
    4f08:	cd dc       	rcall	.-1638   	; 0x48a4 <_uploadMessage>
    4f0a:	26 dd       	rcall	.-1460   	; 0x4958 <_reply2ReturnCode>
    4f0c:	0f 90       	pop	r0
    4f0e:	0f 90       	pop	r0
    4f10:	0f 90       	pop	r0
    4f12:	0f 90       	pop	r0
    4f14:	0f 90       	pop	r0
    4f16:	0f 90       	pop	r0
    4f18:	81 11       	cpse	r24, r1
    4f1a:	2e c0       	rjmp	.+92     	; 0x4f78 <lora_driver_configureToEu868+0x18a>
    4f1c:	2f 92       	push	r2
    4f1e:	3f 92       	push	r3
    4f20:	7f 92       	push	r7
    4f22:	6f 92       	push	r6
    4f24:	1f 93       	push	r17
    4f26:	0f 93       	push	r16
    4f28:	0e 94 88 36 	call	0x6d10	; 0x6d10 <sprintf>
    4f2c:	60 e0       	ldi	r22, 0x00	; 0
    4f2e:	70 e0       	ldi	r23, 0x00	; 0
    4f30:	c8 01       	movw	r24, r16
    4f32:	b8 dc       	rcall	.-1680   	; 0x48a4 <_uploadMessage>
    4f34:	11 dd       	rcall	.-1502   	; 0x4958 <_reply2ReturnCode>
    4f36:	0f 90       	pop	r0
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	81 11       	cpse	r24, r1
    4f44:	19 c0       	rjmp	.+50     	; 0x4f78 <lora_driver_configureToEu868+0x18a>
    4f46:	3f ef       	ldi	r19, 0xFF	; 255
    4f48:	e3 1a       	sub	r14, r19
    4f4a:	f3 0a       	sbc	r15, r19
    4f4c:	84 e0       	ldi	r24, 0x04	; 4
    4f4e:	c8 0e       	add	r12, r24
    4f50:	d1 1c       	adc	r13, r1
    4f52:	98 e0       	ldi	r25, 0x08	; 8
    4f54:	e9 16       	cp	r14, r25
    4f56:	f1 04       	cpc	r15, r1
    4f58:	09 f0       	breq	.+2      	; 0x4f5c <lora_driver_configureToEu868+0x16e>
    4f5a:	94 cf       	rjmp	.-216    	; 0x4e84 <lora_driver_configureToEu868+0x96>
    4f5c:	60 e0       	ldi	r22, 0x00	; 0
    4f5e:	70 e0       	ldi	r23, 0x00	; 0
    4f60:	8a e8       	ldi	r24, 0x8A	; 138
    4f62:	97 e0       	ldi	r25, 0x07	; 7
    4f64:	9f dc       	rcall	.-1730   	; 0x48a4 <_uploadMessage>
    4f66:	f8 dc       	rcall	.-1552   	; 0x4958 <_reply2ReturnCode>
    4f68:	81 11       	cpse	r24, r1
    4f6a:	06 c0       	rjmp	.+12     	; 0x4f78 <lora_driver_configureToEu868+0x18a>
    4f6c:	60 e0       	ldi	r22, 0x00	; 0
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	8b e9       	ldi	r24, 0x9B	; 155
    4f72:	97 e0       	ldi	r25, 0x07	; 7
    4f74:	97 dc       	rcall	.-1746   	; 0x48a4 <_uploadMessage>
    4f76:	f0 dc       	rcall	.-1568   	; 0x4958 <_reply2ReturnCode>
    4f78:	a0 96       	adiw	r28, 0x20	; 32
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	f8 94       	cli
    4f7e:	de bf       	out	0x3e, r29	; 62
    4f80:	0f be       	out	0x3f, r0	; 63
    4f82:	cd bf       	out	0x3d, r28	; 61
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	1f 91       	pop	r17
    4f8a:	0f 91       	pop	r16
    4f8c:	ff 90       	pop	r15
    4f8e:	ef 90       	pop	r14
    4f90:	df 90       	pop	r13
    4f92:	cf 90       	pop	r12
    4f94:	bf 90       	pop	r11
    4f96:	af 90       	pop	r10
    4f98:	9f 90       	pop	r9
    4f9a:	8f 90       	pop	r8
    4f9c:	7f 90       	pop	r7
    4f9e:	6f 90       	pop	r6
    4fa0:	5f 90       	pop	r5
    4fa2:	4f 90       	pop	r4
    4fa4:	3f 90       	pop	r3
    4fa6:	2f 90       	pop	r2
    4fa8:	08 95       	ret

00004faa <lora_driver_setOtaaIdentity>:
    4faa:	ef 92       	push	r14
    4fac:	ff 92       	push	r15
    4fae:	0f 93       	push	r16
    4fb0:	1f 93       	push	r17
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	ec 01       	movw	r28, r24
    4fb8:	8b 01       	movw	r16, r22
    4fba:	7a 01       	movw	r14, r20
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	f4 de       	rcall	.-536    	; 0x4da8 <lora_driver_setAdaptiveDataRate>
    4fc0:	81 11       	cpse	r24, r1
    4fc2:	0d c0       	rjmp	.+26     	; 0x4fde <lora_driver_setOtaaIdentity+0x34>
    4fc4:	ce 01       	movw	r24, r28
    4fc6:	d4 dd       	rcall	.-1112   	; 0x4b70 <lora_driver_setApplicationIdentifier>
    4fc8:	81 11       	cpse	r24, r1
    4fca:	09 c0       	rjmp	.+18     	; 0x4fde <lora_driver_setOtaaIdentity+0x34>
    4fcc:	c8 01       	movw	r24, r16
    4fce:	e1 dd       	rcall	.-1086   	; 0x4b92 <lora_driver_setApplicationKey>
    4fd0:	81 11       	cpse	r24, r1
    4fd2:	05 c0       	rjmp	.+10     	; 0x4fde <lora_driver_setOtaaIdentity+0x34>
    4fd4:	c7 01       	movw	r24, r14
    4fd6:	bb dd       	rcall	.-1162   	; 0x4b4e <lora_driver_setDeviceIdentifier>
    4fd8:	81 11       	cpse	r24, r1
    4fda:	01 c0       	rjmp	.+2      	; 0x4fde <lora_driver_setOtaaIdentity+0x34>
    4fdc:	eb dd       	rcall	.-1066   	; 0x4bb4 <lora_driver_saveMac>
    4fde:	df 91       	pop	r29
    4fe0:	cf 91       	pop	r28
    4fe2:	1f 91       	pop	r17
    4fe4:	0f 91       	pop	r16
    4fe6:	ff 90       	pop	r15
    4fe8:	ef 90       	pop	r14
    4fea:	08 95       	ret

00004fec <lora_driver_mapReturnCodeToText>:
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	fc 01       	movw	r30, r24
    4ff0:	ee 0f       	add	r30, r30
    4ff2:	ff 1f       	adc	r31, r31
    4ff4:	8e 0f       	add	r24, r30
    4ff6:	9f 1f       	adc	r25, r31
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	e6 5a       	subi	r30, 0xA6	; 166
    4ffc:	f7 4f       	sbci	r31, 0xF7	; 247
    4ffe:	81 81       	ldd	r24, Z+1	; 0x01
    5000:	92 81       	ldd	r25, Z+2	; 0x02
    5002:	08 95       	ret

00005004 <decode_port_no>:
    5004:	dc 01       	movw	r26, r24
    5006:	00 97       	sbiw	r24, 0x00	; 0
    5008:	29 f1       	breq	.+74     	; 0x5054 <decode_port_no+0x50>
    500a:	fb 01       	movw	r30, r22
    500c:	20 81       	ld	r18, Z
    500e:	fc 01       	movw	r30, r24
    5010:	01 90       	ld	r0, Z+
    5012:	00 20       	and	r0, r0
    5014:	e9 f7       	brne	.-6      	; 0x5010 <decode_port_no+0xc>
    5016:	31 97       	sbiw	r30, 0x01	; 1
    5018:	e8 1b       	sub	r30, r24
    501a:	f9 0b       	sbc	r31, r25
    501c:	82 2f       	mov	r24, r18
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	e8 17       	cp	r30, r24
    5022:	f9 07       	cpc	r31, r25
    5024:	c8 f0       	brcs	.+50     	; 0x5058 <decode_port_no+0x54>
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	08 c0       	rjmp	.+16     	; 0x503a <decode_port_no+0x36>
    502a:	88 0f       	add	r24, r24
    502c:	38 2f       	mov	r19, r24
    502e:	33 0f       	add	r19, r19
    5030:	33 0f       	add	r19, r19
    5032:	83 0f       	add	r24, r19
    5034:	80 53       	subi	r24, 0x30	; 48
    5036:	89 0f       	add	r24, r25
    5038:	2f 5f       	subi	r18, 0xFF	; 255
    503a:	fd 01       	movw	r30, r26
    503c:	e2 0f       	add	r30, r18
    503e:	f1 1d       	adc	r31, r1
    5040:	90 81       	ld	r25, Z
    5042:	30 ed       	ldi	r19, 0xD0	; 208
    5044:	39 0f       	add	r19, r25
    5046:	3a 30       	cpi	r19, 0x0A	; 10
    5048:	10 f4       	brcc	.+4      	; 0x504e <decode_port_no+0x4a>
    504a:	91 11       	cpse	r25, r1
    504c:	ee cf       	rjmp	.-36     	; 0x502a <decode_port_no+0x26>
    504e:	fb 01       	movw	r30, r22
    5050:	20 83       	st	Z, r18
    5052:	08 95       	ret
    5054:	80 e0       	ldi	r24, 0x00	; 0
    5056:	08 95       	ret
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	08 95       	ret

0000505c <decode_hexadecimal_string_bytes>:
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	dc 01       	movw	r26, r24
    5066:	ea 01       	movw	r28, r20
    5068:	20 97       	sbiw	r28, 0x00	; 0
    506a:	e1 f1       	breq	.+120    	; 0x50e4 <decode_hexadecimal_string_bytes+0x88>
    506c:	fa 01       	movw	r30, r20
    506e:	01 90       	ld	r0, Z+
    5070:	00 20       	and	r0, r0
    5072:	e9 f7       	brne	.-6      	; 0x506e <decode_hexadecimal_string_bytes+0x12>
    5074:	31 97       	sbiw	r30, 0x01	; 1
    5076:	e4 1b       	sub	r30, r20
    5078:	f5 0b       	sbc	r31, r21
    507a:	32 97       	sbiw	r30, 0x02	; 2
    507c:	10 f5       	brcc	.+68     	; 0x50c2 <decode_hexadecimal_string_bytes+0x66>
    507e:	32 c0       	rjmp	.+100    	; 0x50e4 <decode_hexadecimal_string_bytes+0x88>
    5080:	8d 01       	movw	r16, r26
    5082:	04 0f       	add	r16, r20
    5084:	15 1f       	adc	r17, r21
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	ae 01       	movw	r20, r28
    508a:	42 0f       	add	r20, r18
    508c:	53 1f       	adc	r21, r19
    508e:	fa 01       	movw	r30, r20
    5090:	90 81       	ld	r25, Z
    5092:	91 34       	cpi	r25, 0x41	; 65
    5094:	28 f0       	brcs	.+10     	; 0x50a0 <decode_hexadecimal_string_bytes+0x44>
    5096:	97 53       	subi	r25, 0x37	; 55
    5098:	59 2f       	mov	r21, r25
    509a:	52 95       	swap	r21
    509c:	50 7f       	andi	r21, 0xF0	; 240
    509e:	03 c0       	rjmp	.+6      	; 0x50a6 <decode_hexadecimal_string_bytes+0x4a>
    50a0:	59 2f       	mov	r21, r25
    50a2:	52 95       	swap	r21
    50a4:	50 7f       	andi	r21, 0xF0	; 240
    50a6:	2c 0f       	add	r18, r28
    50a8:	3d 1f       	adc	r19, r29
    50aa:	f9 01       	movw	r30, r18
    50ac:	91 81       	ldd	r25, Z+1	; 0x01
    50ae:	91 34       	cpi	r25, 0x41	; 65
    50b0:	10 f0       	brcs	.+4      	; 0x50b6 <decode_hexadecimal_string_bytes+0x5a>
    50b2:	97 53       	subi	r25, 0x37	; 55
    50b4:	01 c0       	rjmp	.+2      	; 0x50b8 <decode_hexadecimal_string_bytes+0x5c>
    50b6:	90 53       	subi	r25, 0x30	; 48
    50b8:	95 0f       	add	r25, r21
    50ba:	f8 01       	movw	r30, r16
    50bc:	90 83       	st	Z, r25
    50be:	8f 5f       	subi	r24, 0xFF	; 255
    50c0:	01 c0       	rjmp	.+2      	; 0x50c4 <decode_hexadecimal_string_bytes+0x68>
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	28 2f       	mov	r18, r24
    50c6:	22 0f       	add	r18, r18
    50c8:	48 2f       	mov	r20, r24
    50ca:	50 e0       	ldi	r21, 0x00	; 0
    50cc:	fe 01       	movw	r30, r28
    50ce:	01 90       	ld	r0, Z+
    50d0:	00 20       	and	r0, r0
    50d2:	e9 f7       	brne	.-6      	; 0x50ce <decode_hexadecimal_string_bytes+0x72>
    50d4:	31 97       	sbiw	r30, 0x01	; 1
    50d6:	ec 1b       	sub	r30, r28
    50d8:	fd 0b       	sbc	r31, r29
    50da:	4e 17       	cp	r20, r30
    50dc:	5f 07       	cpc	r21, r31
    50de:	10 f4       	brcc	.+4      	; 0x50e4 <decode_hexadecimal_string_bytes+0x88>
    50e0:	86 13       	cpse	r24, r22
    50e2:	ce cf       	rjmp	.-100    	; 0x5080 <decode_hexadecimal_string_bytes+0x24>
    50e4:	df 91       	pop	r29
    50e6:	cf 91       	pop	r28
    50e8:	1f 91       	pop	r17
    50ea:	0f 91       	pop	r16
    50ec:	08 95       	ret

000050ee <_serialCallBack>:
    50ee:	80 91 23 15 	lds	r24, 0x1523	; 0x801523 <crc_sum.1945>
    50f2:	86 0f       	add	r24, r22
    50f4:	80 93 23 15 	sts	0x1523, r24	; 0x801523 <crc_sum.1945>
    50f8:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <_mh_state>
    50fc:	91 30       	cpi	r25, 0x01	; 1
    50fe:	79 f0       	breq	.+30     	; 0x511e <_serialCallBack+0x30>
    5100:	28 f0       	brcs	.+10     	; 0x510c <_serialCallBack+0x1e>
    5102:	92 30       	cpi	r25, 0x02	; 2
    5104:	a9 f0       	breq	.+42     	; 0x5130 <_serialCallBack+0x42>
    5106:	93 30       	cpi	r25, 0x03	; 3
    5108:	19 f1       	breq	.+70     	; 0x5150 <_serialCallBack+0x62>
    510a:	08 95       	ret
    510c:	6f 3f       	cpi	r22, 0xFF	; 255
    510e:	09 f0       	breq	.+2      	; 0x5112 <_serialCallBack+0x24>
    5110:	48 c0       	rjmp	.+144    	; 0x51a2 <_serialCallBack+0xb4>
    5112:	10 92 23 15 	sts	0x1523, r1	; 0x801523 <crc_sum.1945>
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	80 93 26 15 	sts	0x1526, r24	; 0x801526 <_mh_state>
    511c:	08 95       	ret
    511e:	66 38       	cpi	r22, 0x86	; 134
    5120:	09 f0       	breq	.+2      	; 0x5124 <_serialCallBack+0x36>
    5122:	3f c0       	rjmp	.+126    	; 0x51a2 <_serialCallBack+0xb4>
    5124:	10 92 22 15 	sts	0x1522, r1	; 0x801522 <inDex.1943>
    5128:	82 e0       	ldi	r24, 0x02	; 2
    512a:	80 93 26 15 	sts	0x1526, r24	; 0x801526 <_mh_state>
    512e:	08 95       	ret
    5130:	e0 91 22 15 	lds	r30, 0x1522	; 0x801522 <inDex.1943>
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	8e 0f       	add	r24, r30
    5138:	80 93 22 15 	sts	0x1522, r24	; 0x801522 <inDex.1943>
    513c:	f0 e0       	ldi	r31, 0x00	; 0
    513e:	e0 5e       	subi	r30, 0xE0	; 224
    5140:	fa 4e       	sbci	r31, 0xEA	; 234
    5142:	60 83       	st	Z, r22
    5144:	82 30       	cpi	r24, 0x02	; 2
    5146:	69 f5       	brne	.+90     	; 0x51a2 <_serialCallBack+0xb4>
    5148:	83 e0       	ldi	r24, 0x03	; 3
    514a:	80 93 26 15 	sts	0x1526, r24	; 0x801526 <_mh_state>
    514e:	08 95       	ret
    5150:	90 91 22 15 	lds	r25, 0x1522	; 0x801522 <inDex.1943>
    5154:	21 e0       	ldi	r18, 0x01	; 1
    5156:	29 0f       	add	r18, r25
    5158:	20 93 22 15 	sts	0x1522, r18	; 0x801522 <inDex.1943>
    515c:	96 30       	cpi	r25, 0x06	; 6
    515e:	09 f5       	brne	.+66     	; 0x51a2 <_serialCallBack+0xb4>
    5160:	81 11       	cpse	r24, r1
    5162:	0e c0       	rjmp	.+28     	; 0x5180 <_serialCallBack+0x92>
    5164:	e0 e2       	ldi	r30, 0x20	; 32
    5166:	f5 e1       	ldi	r31, 0x15	; 21
    5168:	80 81       	ld	r24, Z
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	98 2f       	mov	r25, r24
    516e:	88 27       	eor	r24, r24
    5170:	21 81       	ldd	r18, Z+1	; 0x01
    5172:	82 0f       	add	r24, r18
    5174:	91 1d       	adc	r25, r1
    5176:	90 93 28 15 	sts	0x1528, r25	; 0x801528 <_ppm+0x1>
    517a:	80 93 27 15 	sts	0x1527, r24	; 0x801527 <_ppm>
    517e:	04 c0       	rjmp	.+8      	; 0x5188 <_serialCallBack+0x9a>
    5180:	10 92 28 15 	sts	0x1528, r1	; 0x801528 <_ppm+0x1>
    5184:	10 92 27 15 	sts	0x1527, r1	; 0x801527 <_ppm>
    5188:	10 92 26 15 	sts	0x1526, r1	; 0x801526 <_mh_state>
    518c:	e0 91 24 15 	lds	r30, 0x1524	; 0x801524 <_appCallBack>
    5190:	f0 91 25 15 	lds	r31, 0x1525	; 0x801525 <_appCallBack+0x1>
    5194:	30 97       	sbiw	r30, 0x00	; 0
    5196:	29 f0       	breq	.+10     	; 0x51a2 <_serialCallBack+0xb4>
    5198:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <_ppm>
    519c:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <_ppm+0x1>
    51a0:	19 95       	eicall
    51a2:	08 95       	ret

000051a4 <mh_z19_initialise>:
    51a4:	8f 92       	push	r8
    51a6:	9f 92       	push	r9
    51a8:	af 92       	push	r10
    51aa:	cf 92       	push	r12
    51ac:	ef 92       	push	r14
    51ae:	0f 93       	push	r16
    51b0:	0f 2e       	mov	r0, r31
    51b2:	f7 e7       	ldi	r31, 0x77	; 119
    51b4:	8f 2e       	mov	r8, r31
    51b6:	f8 e2       	ldi	r31, 0x28	; 40
    51b8:	9f 2e       	mov	r9, r31
    51ba:	f0 2d       	mov	r31, r0
    51bc:	68 94       	set
    51be:	aa 24       	eor	r10, r10
    51c0:	a4 f8       	bld	r10, 4
    51c2:	68 94       	set
    51c4:	cc 24       	eor	r12, r12
    51c6:	c4 f8       	bld	r12, 4
    51c8:	e1 2c       	mov	r14, r1
    51ca:	00 e0       	ldi	r16, 0x00	; 0
    51cc:	23 e0       	ldi	r18, 0x03	; 3
    51ce:	40 e8       	ldi	r20, 0x80	; 128
    51d0:	55 e2       	ldi	r21, 0x25	; 37
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	70 e0       	ldi	r23, 0x00	; 0
    51d6:	4b d0       	rcall	.+150    	; 0x526e <serial_create>
    51d8:	90 93 2a 15 	sts	0x152A, r25	; 0x80152a <_serial+0x1>
    51dc:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <_serial>
    51e0:	0f 91       	pop	r16
    51e2:	ef 90       	pop	r14
    51e4:	cf 90       	pop	r12
    51e6:	af 90       	pop	r10
    51e8:	9f 90       	pop	r9
    51ea:	8f 90       	pop	r8
    51ec:	08 95       	ret

000051ee <mh_z19_takeMeassuring>:
    51ee:	cf 93       	push	r28
    51f0:	df 93       	push	r29
    51f2:	cd b7       	in	r28, 0x3d	; 61
    51f4:	de b7       	in	r29, 0x3e	; 62
    51f6:	29 97       	sbiw	r28, 0x09	; 9
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	de bf       	out	0x3e, r29	; 62
    51fe:	0f be       	out	0x3f, r0	; 63
    5200:	cd bf       	out	0x3d, r28	; 61
    5202:	89 e0       	ldi	r24, 0x09	; 9
    5204:	e2 e4       	ldi	r30, 0x42	; 66
    5206:	f2 e0       	ldi	r31, 0x02	; 2
    5208:	9e 01       	movw	r18, r28
    520a:	2f 5f       	subi	r18, 0xFF	; 255
    520c:	3f 4f       	sbci	r19, 0xFF	; 255
    520e:	d9 01       	movw	r26, r18
    5210:	01 90       	ld	r0, Z+
    5212:	0d 92       	st	X+, r0
    5214:	8a 95       	dec	r24
    5216:	e1 f7       	brne	.-8      	; 0x5210 <mh_z19_takeMeassuring+0x22>
    5218:	10 92 28 15 	sts	0x1528, r1	; 0x801528 <_ppm+0x1>
    521c:	10 92 27 15 	sts	0x1527, r1	; 0x801527 <_ppm>
    5220:	80 91 29 15 	lds	r24, 0x1529	; 0x801529 <_serial>
    5224:	90 91 2a 15 	lds	r25, 0x152A	; 0x80152a <_serial+0x1>
    5228:	00 97       	sbiw	r24, 0x00	; 0
    522a:	31 f0       	breq	.+12     	; 0x5238 <mh_z19_takeMeassuring+0x4a>
    522c:	42 2f       	mov	r20, r18
    522e:	53 2f       	mov	r21, r19
    5230:	69 e0       	ldi	r22, 0x09	; 9
    5232:	f0 d0       	rcall	.+480    	; 0x5414 <serial_sendBytes>
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	01 c0       	rjmp	.+2      	; 0x523a <mh_z19_takeMeassuring+0x4c>
    5238:	82 e0       	ldi	r24, 0x02	; 2
    523a:	29 96       	adiw	r28, 0x09	; 9
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	f8 94       	cli
    5240:	de bf       	out	0x3e, r29	; 62
    5242:	0f be       	out	0x3f, r0	; 63
    5244:	cd bf       	out	0x3d, r28	; 61
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	08 95       	ret

0000524c <mh_z19_getCo2Ppm>:
    524c:	20 91 27 15 	lds	r18, 0x1527	; 0x801527 <_ppm>
    5250:	30 91 28 15 	lds	r19, 0x1528	; 0x801528 <_ppm+0x1>
    5254:	21 15       	cp	r18, r1
    5256:	31 05       	cpc	r19, r1
    5258:	29 f4       	brne	.+10     	; 0x5264 <mh_z19_getCo2Ppm+0x18>
    525a:	fc 01       	movw	r30, r24
    525c:	11 82       	std	Z+1, r1	; 0x01
    525e:	10 82       	st	Z, r1
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	08 95       	ret
    5264:	fc 01       	movw	r30, r24
    5266:	31 83       	std	Z+1, r19	; 0x01
    5268:	20 83       	st	Z, r18
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	08 95       	ret

0000526e <serial_create>:
    526e:	2f 92       	push	r2
    5270:	3f 92       	push	r3
    5272:	4f 92       	push	r4
    5274:	5f 92       	push	r5
    5276:	6f 92       	push	r6
    5278:	7f 92       	push	r7
    527a:	8f 92       	push	r8
    527c:	9f 92       	push	r9
    527e:	af 92       	push	r10
    5280:	cf 92       	push	r12
    5282:	ef 92       	push	r14
    5284:	ff 92       	push	r15
    5286:	0f 93       	push	r16
    5288:	1f 93       	push	r17
    528a:	cf 93       	push	r28
    528c:	df 93       	push	r29
    528e:	cd b7       	in	r28, 0x3d	; 61
    5290:	de b7       	in	r29, 0x3e	; 62
    5292:	f8 2e       	mov	r15, r24
    5294:	2a 01       	movw	r4, r20
    5296:	3b 01       	movw	r6, r22
    5298:	88 e0       	ldi	r24, 0x08	; 8
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	0e 94 c1 34 	call	0x6982	; 0x6982 <malloc>
    52a0:	8c 01       	movw	r16, r24
    52a2:	8f 2d       	mov	r24, r15
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	fc 01       	movw	r30, r24
    52a8:	ee 0f       	add	r30, r30
    52aa:	ff 1f       	adc	r31, r31
    52ac:	e5 5d       	subi	r30, 0xD5	; 213
    52ae:	fa 4e       	sbci	r31, 0xEA	; 234
    52b0:	11 83       	std	Z+1, r17	; 0x01
    52b2:	00 83       	st	Z, r16
    52b4:	01 15       	cp	r16, r1
    52b6:	11 05       	cpc	r17, r1
    52b8:	09 f4       	brne	.+2      	; 0x52bc <serial_create+0x4e>
    52ba:	6f c0       	rjmp	.+222    	; 0x539a <serial_create+0x12c>
    52bc:	88 0f       	add	r24, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	fc 01       	movw	r30, r24
    52c2:	e5 5f       	subi	r30, 0xF5	; 245
    52c4:	fd 4f       	sbci	r31, 0xFD	; 253
    52c6:	80 81       	ld	r24, Z
    52c8:	91 81       	ldd	r25, Z+1	; 0x01
    52ca:	d8 01       	movw	r26, r16
    52cc:	8d 93       	st	X+, r24
    52ce:	9c 93       	st	X, r25
    52d0:	6c 2d       	mov	r22, r12
    52d2:	70 e0       	ldi	r23, 0x00	; 0
    52d4:	84 e0       	ldi	r24, 0x04	; 4
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
    52dc:	1c 01       	movw	r2, r24
    52de:	61 e0       	ldi	r22, 0x01	; 1
    52e0:	70 e0       	ldi	r23, 0x00	; 0
    52e2:	86 e0       	ldi	r24, 0x06	; 6
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
    52ea:	7c 01       	movw	r14, r24
    52ec:	4c 2d       	mov	r20, r12
    52ee:	b1 01       	movw	r22, r2
    52f0:	0e 94 f7 31 	call	0x63ee	; 0x63ee <fifo_init>
    52f4:	f8 01       	movw	r30, r16
    52f6:	f5 82       	std	Z+5, r15	; 0x05
    52f8:	e4 82       	std	Z+4, r14	; 0x04
    52fa:	6a 2d       	mov	r22, r10
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	84 e0       	ldi	r24, 0x04	; 4
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
    5306:	1c 01       	movw	r2, r24
    5308:	61 e0       	ldi	r22, 0x01	; 1
    530a:	70 e0       	ldi	r23, 0x00	; 0
    530c:	86 e0       	ldi	r24, 0x06	; 6
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	0e 94 a7 34 	call	0x694e	; 0x694e <calloc>
    5314:	7c 01       	movw	r14, r24
    5316:	4a 2d       	mov	r20, r10
    5318:	b1 01       	movw	r22, r2
    531a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <fifo_init>
    531e:	d8 01       	movw	r26, r16
    5320:	13 96       	adiw	r26, 0x03	; 3
    5322:	fc 92       	st	X, r15
    5324:	ee 92       	st	-X, r14
    5326:	12 97       	sbiw	r26, 0x02	; 2
    5328:	17 96       	adiw	r26, 0x07	; 7
    532a:	9c 92       	st	X, r9
    532c:	8e 92       	st	-X, r8
    532e:	16 97       	sbiw	r26, 0x06	; 6
    5330:	ff b6       	in	r15, 0x3f	; 63
    5332:	f8 94       	cli
    5334:	ed 91       	ld	r30, X+
    5336:	fc 91       	ld	r31, X
    5338:	11 97       	sbiw	r26, 0x01	; 1
    533a:	36 97       	sbiw	r30, 0x06	; 6
    533c:	80 81       	ld	r24, Z
    533e:	82 60       	ori	r24, 0x02	; 2
    5340:	80 83       	st	Z, r24
    5342:	8d 90       	ld	r8, X+
    5344:	9c 90       	ld	r9, X
    5346:	c3 01       	movw	r24, r6
    5348:	b2 01       	movw	r22, r4
    534a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <__floatunsisf>
    534e:	20 e0       	ldi	r18, 0x00	; 0
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	40 e0       	ldi	r20, 0x00	; 0
    5354:	51 e4       	ldi	r21, 0x41	; 65
    5356:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
    535a:	9b 01       	movw	r18, r22
    535c:	ac 01       	movw	r20, r24
    535e:	60 e0       	ldi	r22, 0x00	; 0
    5360:	74 e2       	ldi	r23, 0x24	; 36
    5362:	84 e7       	ldi	r24, 0x74	; 116
    5364:	9b e4       	ldi	r25, 0x4B	; 75
    5366:	0e 94 66 20 	call	0x40cc	; 0x40cc <__divsf3>
    536a:	20 e0       	ldi	r18, 0x00	; 0
    536c:	30 e0       	ldi	r19, 0x00	; 0
    536e:	40 e8       	ldi	r20, 0x80	; 128
    5370:	5f e3       	ldi	r21, 0x3F	; 63
    5372:	0e 94 13 32 	call	0x6426	; 0x6426 <__subsf3>
    5376:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fixunssfsi>
    537a:	f4 01       	movw	r30, r8
    537c:	32 97       	sbiw	r30, 0x02	; 2
    537e:	60 83       	st	Z, r22
    5380:	d8 01       	movw	r26, r16
    5382:	ed 91       	ld	r30, X+
    5384:	fc 91       	ld	r31, X
    5386:	11 97       	sbiw	r26, 0x01	; 1
    5388:	35 97       	sbiw	r30, 0x05	; 5
    538a:	88 e9       	ldi	r24, 0x98	; 152
    538c:	80 83       	st	Z, r24
    538e:	ed 91       	ld	r30, X+
    5390:	fc 91       	ld	r31, X
    5392:	34 97       	sbiw	r30, 0x04	; 4
    5394:	86 e0       	ldi	r24, 0x06	; 6
    5396:	80 83       	st	Z, r24
    5398:	ff be       	out	0x3f, r15	; 63
    539a:	c8 01       	movw	r24, r16
    539c:	df 91       	pop	r29
    539e:	cf 91       	pop	r28
    53a0:	1f 91       	pop	r17
    53a2:	0f 91       	pop	r16
    53a4:	ff 90       	pop	r15
    53a6:	ef 90       	pop	r14
    53a8:	cf 90       	pop	r12
    53aa:	af 90       	pop	r10
    53ac:	9f 90       	pop	r9
    53ae:	8f 90       	pop	r8
    53b0:	7f 90       	pop	r7
    53b2:	6f 90       	pop	r6
    53b4:	5f 90       	pop	r5
    53b6:	4f 90       	pop	r4
    53b8:	3f 90       	pop	r3
    53ba:	2f 90       	pop	r2
    53bc:	08 95       	ret

000053be <serial_sendByte>:
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	dc 01       	movw	r26, r24
    53c4:	89 2b       	or	r24, r25
    53c6:	01 f1       	breq	.+64     	; 0x5408 <serial_sendByte+0x4a>
    53c8:	12 96       	adiw	r26, 0x02	; 2
    53ca:	ed 91       	ld	r30, X+
    53cc:	fc 91       	ld	r31, X
    53ce:	13 97       	sbiw	r26, 0x03	; 3
    53d0:	93 81       	ldd	r25, Z+3	; 0x03
    53d2:	82 81       	ldd	r24, Z+2	; 0x02
    53d4:	25 81       	ldd	r18, Z+5	; 0x05
    53d6:	98 1b       	sub	r25, r24
    53d8:	92 23       	and	r25, r18
    53da:	84 81       	ldd	r24, Z+4	; 0x04
    53dc:	98 17       	cp	r25, r24
    53de:	b1 f0       	breq	.+44     	; 0x540c <serial_sendByte+0x4e>
    53e0:	83 81       	ldd	r24, Z+3	; 0x03
    53e2:	26 95       	lsr	r18
    53e4:	28 23       	and	r18, r24
    53e6:	c0 81       	ld	r28, Z
    53e8:	d1 81       	ldd	r29, Z+1	; 0x01
    53ea:	c2 0f       	add	r28, r18
    53ec:	d1 1d       	adc	r29, r1
    53ee:	68 83       	st	Y, r22
    53f0:	8f 5f       	subi	r24, 0xFF	; 255
    53f2:	95 81       	ldd	r25, Z+5	; 0x05
    53f4:	89 23       	and	r24, r25
    53f6:	83 83       	std	Z+3, r24	; 0x03
    53f8:	ed 91       	ld	r30, X+
    53fa:	fc 91       	ld	r31, X
    53fc:	35 97       	sbiw	r30, 0x05	; 5
    53fe:	80 81       	ld	r24, Z
    5400:	80 62       	ori	r24, 0x20	; 32
    5402:	80 83       	st	Z, r24
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	03 c0       	rjmp	.+6      	; 0x540e <serial_sendByte+0x50>
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	01 c0       	rjmp	.+2      	; 0x540e <serial_sendByte+0x50>
    540c:	82 e0       	ldi	r24, 0x02	; 2
    540e:	df 91       	pop	r29
    5410:	cf 91       	pop	r28
    5412:	08 95       	ret

00005414 <serial_sendBytes>:
    5414:	ef 92       	push	r14
    5416:	ff 92       	push	r15
    5418:	0f 93       	push	r16
    541a:	1f 93       	push	r17
    541c:	cf 93       	push	r28
    541e:	df 93       	push	r29
    5420:	7c 01       	movw	r14, r24
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	09 f4       	brne	.+2      	; 0x5428 <serial_sendBytes+0x14>
    5426:	41 c0       	rjmp	.+130    	; 0x54aa <serial_sendBytes+0x96>
    5428:	dc 01       	movw	r26, r24
    542a:	12 96       	adiw	r26, 0x02	; 2
    542c:	ed 91       	ld	r30, X+
    542e:	fc 91       	ld	r31, X
    5430:	13 97       	sbiw	r26, 0x03	; 3
    5432:	93 81       	ldd	r25, Z+3	; 0x03
    5434:	82 81       	ldd	r24, Z+2	; 0x02
    5436:	98 1b       	sub	r25, r24
    5438:	85 81       	ldd	r24, Z+5	; 0x05
    543a:	98 23       	and	r25, r24
    543c:	84 81       	ldd	r24, Z+4	; 0x04
    543e:	89 1b       	sub	r24, r25
    5440:	86 17       	cp	r24, r22
    5442:	a8 f1       	brcs	.+106    	; 0x54ae <serial_sendBytes+0x9a>
    5444:	66 23       	and	r22, r22
    5446:	41 f1       	breq	.+80     	; 0x5498 <serial_sendBytes+0x84>
    5448:	84 2f       	mov	r24, r20
    544a:	95 2f       	mov	r25, r21
    544c:	dc 01       	movw	r26, r24
    544e:	61 50       	subi	r22, 0x01	; 1
    5450:	46 2f       	mov	r20, r22
    5452:	50 e0       	ldi	r21, 0x00	; 0
    5454:	4f 5f       	subi	r20, 0xFF	; 255
    5456:	5f 4f       	sbci	r21, 0xFF	; 255
    5458:	48 0f       	add	r20, r24
    545a:	59 1f       	adc	r21, r25
    545c:	e7 01       	movw	r28, r14
    545e:	ea 81       	ldd	r30, Y+2	; 0x02
    5460:	fb 81       	ldd	r31, Y+3	; 0x03
    5462:	93 81       	ldd	r25, Z+3	; 0x03
    5464:	82 81       	ldd	r24, Z+2	; 0x02
    5466:	25 81       	ldd	r18, Z+5	; 0x05
    5468:	98 1b       	sub	r25, r24
    546a:	92 23       	and	r25, r18
    546c:	84 81       	ldd	r24, Z+4	; 0x04
    546e:	98 17       	cp	r25, r24
    5470:	79 f0       	breq	.+30     	; 0x5490 <serial_sendBytes+0x7c>
    5472:	8c 91       	ld	r24, X
    5474:	93 81       	ldd	r25, Z+3	; 0x03
    5476:	26 95       	lsr	r18
    5478:	29 23       	and	r18, r25
    547a:	60 81       	ld	r22, Z
    547c:	71 81       	ldd	r23, Z+1	; 0x01
    547e:	8b 01       	movw	r16, r22
    5480:	02 0f       	add	r16, r18
    5482:	11 1d       	adc	r17, r1
    5484:	e8 01       	movw	r28, r16
    5486:	88 83       	st	Y, r24
    5488:	9f 5f       	subi	r25, 0xFF	; 255
    548a:	85 81       	ldd	r24, Z+5	; 0x05
    548c:	98 23       	and	r25, r24
    548e:	93 83       	std	Z+3, r25	; 0x03
    5490:	11 96       	adiw	r26, 0x01	; 1
    5492:	a4 17       	cp	r26, r20
    5494:	b5 07       	cpc	r27, r21
    5496:	11 f7       	brne	.-60     	; 0x545c <serial_sendBytes+0x48>
    5498:	d7 01       	movw	r26, r14
    549a:	ed 91       	ld	r30, X+
    549c:	fc 91       	ld	r31, X
    549e:	35 97       	sbiw	r30, 0x05	; 5
    54a0:	80 81       	ld	r24, Z
    54a2:	80 62       	ori	r24, 0x20	; 32
    54a4:	80 83       	st	Z, r24
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	03 c0       	rjmp	.+6      	; 0x54b0 <serial_sendBytes+0x9c>
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	01 c0       	rjmp	.+2      	; 0x54b0 <serial_sendBytes+0x9c>
    54ae:	82 e0       	ldi	r24, 0x02	; 2
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	ff 90       	pop	r15
    54ba:	ef 90       	pop	r14
    54bc:	08 95       	ret

000054be <serial_getByte>:
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	d1 f0       	breq	.+52     	; 0x54f6 <serial_getByte+0x38>
    54c2:	dc 01       	movw	r26, r24
    54c4:	14 96       	adiw	r26, 0x04	; 4
    54c6:	ed 91       	ld	r30, X+
    54c8:	fc 91       	ld	r31, X
    54ca:	15 97       	sbiw	r26, 0x05	; 5
    54cc:	93 81       	ldd	r25, Z+3	; 0x03
    54ce:	82 81       	ldd	r24, Z+2	; 0x02
    54d0:	98 17       	cp	r25, r24
    54d2:	99 f0       	breq	.+38     	; 0x54fa <serial_getByte+0x3c>
    54d4:	92 81       	ldd	r25, Z+2	; 0x02
    54d6:	85 81       	ldd	r24, Z+5	; 0x05
    54d8:	86 95       	lsr	r24
    54da:	89 23       	and	r24, r25
    54dc:	a0 81       	ld	r26, Z
    54de:	b1 81       	ldd	r27, Z+1	; 0x01
    54e0:	a8 0f       	add	r26, r24
    54e2:	b1 1d       	adc	r27, r1
    54e4:	8c 91       	ld	r24, X
    54e6:	db 01       	movw	r26, r22
    54e8:	8c 93       	st	X, r24
    54ea:	9f 5f       	subi	r25, 0xFF	; 255
    54ec:	85 81       	ldd	r24, Z+5	; 0x05
    54ee:	98 23       	and	r25, r24
    54f0:	92 83       	std	Z+2, r25	; 0x02
    54f2:	80 e0       	ldi	r24, 0x00	; 0
    54f4:	08 95       	ret
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	08 95       	ret
    54fa:	83 e0       	ldi	r24, 0x03	; 3
    54fc:	08 95       	ret

000054fe <__vector_25>:
    54fe:	1f 92       	push	r1
    5500:	0f 92       	push	r0
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	0f 92       	push	r0
    5506:	11 24       	eor	r1, r1
    5508:	0b b6       	in	r0, 0x3b	; 59
    550a:	0f 92       	push	r0
    550c:	2f 93       	push	r18
    550e:	3f 93       	push	r19
    5510:	4f 93       	push	r20
    5512:	5f 93       	push	r21
    5514:	6f 93       	push	r22
    5516:	7f 93       	push	r23
    5518:	8f 93       	push	r24
    551a:	9f 93       	push	r25
    551c:	af 93       	push	r26
    551e:	bf 93       	push	r27
    5520:	cf 93       	push	r28
    5522:	df 93       	push	r29
    5524:	ef 93       	push	r30
    5526:	ff 93       	push	r31
    5528:	a0 91 2b 15 	lds	r26, 0x152B	; 0x80152b <_ser_handle>
    552c:	b0 91 2c 15 	lds	r27, 0x152C	; 0x80152c <_ser_handle+0x1>
    5530:	10 97       	sbiw	r26, 0x00	; 0
    5532:	11 f1       	breq	.+68     	; 0x5578 <__vector_25+0x7a>
    5534:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5538:	14 96       	adiw	r26, 0x04	; 4
    553a:	ed 91       	ld	r30, X+
    553c:	fc 91       	ld	r31, X
    553e:	15 97       	sbiw	r26, 0x05	; 5
    5540:	93 81       	ldd	r25, Z+3	; 0x03
    5542:	82 81       	ldd	r24, Z+2	; 0x02
    5544:	25 81       	ldd	r18, Z+5	; 0x05
    5546:	98 1b       	sub	r25, r24
    5548:	92 23       	and	r25, r18
    554a:	84 81       	ldd	r24, Z+4	; 0x04
    554c:	98 17       	cp	r25, r24
    554e:	61 f0       	breq	.+24     	; 0x5568 <__vector_25+0x6a>
    5550:	83 81       	ldd	r24, Z+3	; 0x03
    5552:	26 95       	lsr	r18
    5554:	28 23       	and	r18, r24
    5556:	c0 81       	ld	r28, Z
    5558:	d1 81       	ldd	r29, Z+1	; 0x01
    555a:	c2 0f       	add	r28, r18
    555c:	d1 1d       	adc	r29, r1
    555e:	68 83       	st	Y, r22
    5560:	8f 5f       	subi	r24, 0xFF	; 255
    5562:	95 81       	ldd	r25, Z+5	; 0x05
    5564:	89 23       	and	r24, r25
    5566:	83 83       	std	Z+3, r24	; 0x03
    5568:	16 96       	adiw	r26, 0x06	; 6
    556a:	ed 91       	ld	r30, X+
    556c:	fc 91       	ld	r31, X
    556e:	17 97       	sbiw	r26, 0x07	; 7
    5570:	30 97       	sbiw	r30, 0x00	; 0
    5572:	11 f0       	breq	.+4      	; 0x5578 <__vector_25+0x7a>
    5574:	cd 01       	movw	r24, r26
    5576:	19 95       	eicall
    5578:	ff 91       	pop	r31
    557a:	ef 91       	pop	r30
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	bf 91       	pop	r27
    5582:	af 91       	pop	r26
    5584:	9f 91       	pop	r25
    5586:	8f 91       	pop	r24
    5588:	7f 91       	pop	r23
    558a:	6f 91       	pop	r22
    558c:	5f 91       	pop	r21
    558e:	4f 91       	pop	r20
    5590:	3f 91       	pop	r19
    5592:	2f 91       	pop	r18
    5594:	0f 90       	pop	r0
    5596:	0b be       	out	0x3b, r0	; 59
    5598:	0f 90       	pop	r0
    559a:	0f be       	out	0x3f, r0	; 63
    559c:	0f 90       	pop	r0
    559e:	1f 90       	pop	r1
    55a0:	18 95       	reti

000055a2 <__vector_26>:
    55a2:	1f 92       	push	r1
    55a4:	0f 92       	push	r0
    55a6:	0f b6       	in	r0, 0x3f	; 63
    55a8:	0f 92       	push	r0
    55aa:	11 24       	eor	r1, r1
    55ac:	0b b6       	in	r0, 0x3b	; 59
    55ae:	0f 92       	push	r0
    55b0:	2f 93       	push	r18
    55b2:	8f 93       	push	r24
    55b4:	9f 93       	push	r25
    55b6:	af 93       	push	r26
    55b8:	bf 93       	push	r27
    55ba:	ef 93       	push	r30
    55bc:	ff 93       	push	r31
    55be:	e0 91 2b 15 	lds	r30, 0x152B	; 0x80152b <_ser_handle>
    55c2:	f0 91 2c 15 	lds	r31, 0x152C	; 0x80152c <_ser_handle+0x1>
    55c6:	30 97       	sbiw	r30, 0x00	; 0
    55c8:	b9 f0       	breq	.+46     	; 0x55f8 <__vector_26+0x56>
    55ca:	02 80       	ldd	r0, Z+2	; 0x02
    55cc:	f3 81       	ldd	r31, Z+3	; 0x03
    55ce:	e0 2d       	mov	r30, r0
    55d0:	93 81       	ldd	r25, Z+3	; 0x03
    55d2:	82 81       	ldd	r24, Z+2	; 0x02
    55d4:	98 17       	cp	r25, r24
    55d6:	b1 f0       	breq	.+44     	; 0x5604 <__vector_26+0x62>
    55d8:	92 81       	ldd	r25, Z+2	; 0x02
    55da:	85 81       	ldd	r24, Z+5	; 0x05
    55dc:	28 2f       	mov	r18, r24
    55de:	26 95       	lsr	r18
    55e0:	29 23       	and	r18, r25
    55e2:	a0 81       	ld	r26, Z
    55e4:	b1 81       	ldd	r27, Z+1	; 0x01
    55e6:	a2 0f       	add	r26, r18
    55e8:	b1 1d       	adc	r27, r1
    55ea:	2c 91       	ld	r18, X
    55ec:	9f 5f       	subi	r25, 0xFF	; 255
    55ee:	89 23       	and	r24, r25
    55f0:	82 83       	std	Z+2, r24	; 0x02
    55f2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    55f6:	0b c0       	rjmp	.+22     	; 0x560e <__vector_26+0x6c>
    55f8:	e1 ec       	ldi	r30, 0xC1	; 193
    55fa:	f0 e0       	ldi	r31, 0x00	; 0
    55fc:	80 81       	ld	r24, Z
    55fe:	8f 7d       	andi	r24, 0xDF	; 223
    5600:	80 83       	st	Z, r24
    5602:	05 c0       	rjmp	.+10     	; 0x560e <__vector_26+0x6c>
    5604:	e1 ec       	ldi	r30, 0xC1	; 193
    5606:	f0 e0       	ldi	r31, 0x00	; 0
    5608:	80 81       	ld	r24, Z
    560a:	8f 7d       	andi	r24, 0xDF	; 223
    560c:	80 83       	st	Z, r24
    560e:	ff 91       	pop	r31
    5610:	ef 91       	pop	r30
    5612:	bf 91       	pop	r27
    5614:	af 91       	pop	r26
    5616:	9f 91       	pop	r25
    5618:	8f 91       	pop	r24
    561a:	2f 91       	pop	r18
    561c:	0f 90       	pop	r0
    561e:	0b be       	out	0x3b, r0	; 59
    5620:	0f 90       	pop	r0
    5622:	0f be       	out	0x3f, r0	; 63
    5624:	0f 90       	pop	r0
    5626:	1f 90       	pop	r1
    5628:	18 95       	reti

0000562a <__vector_36>:
    562a:	1f 92       	push	r1
    562c:	0f 92       	push	r0
    562e:	0f b6       	in	r0, 0x3f	; 63
    5630:	0f 92       	push	r0
    5632:	11 24       	eor	r1, r1
    5634:	0b b6       	in	r0, 0x3b	; 59
    5636:	0f 92       	push	r0
    5638:	2f 93       	push	r18
    563a:	3f 93       	push	r19
    563c:	4f 93       	push	r20
    563e:	5f 93       	push	r21
    5640:	6f 93       	push	r22
    5642:	7f 93       	push	r23
    5644:	8f 93       	push	r24
    5646:	9f 93       	push	r25
    5648:	af 93       	push	r26
    564a:	bf 93       	push	r27
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	ef 93       	push	r30
    5652:	ff 93       	push	r31
    5654:	a0 91 2d 15 	lds	r26, 0x152D	; 0x80152d <_ser_handle+0x2>
    5658:	b0 91 2e 15 	lds	r27, 0x152E	; 0x80152e <_ser_handle+0x3>
    565c:	10 97       	sbiw	r26, 0x00	; 0
    565e:	11 f1       	breq	.+68     	; 0x56a4 <__vector_36+0x7a>
    5660:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5664:	14 96       	adiw	r26, 0x04	; 4
    5666:	ed 91       	ld	r30, X+
    5668:	fc 91       	ld	r31, X
    566a:	15 97       	sbiw	r26, 0x05	; 5
    566c:	93 81       	ldd	r25, Z+3	; 0x03
    566e:	82 81       	ldd	r24, Z+2	; 0x02
    5670:	25 81       	ldd	r18, Z+5	; 0x05
    5672:	98 1b       	sub	r25, r24
    5674:	92 23       	and	r25, r18
    5676:	84 81       	ldd	r24, Z+4	; 0x04
    5678:	98 17       	cp	r25, r24
    567a:	61 f0       	breq	.+24     	; 0x5694 <__vector_36+0x6a>
    567c:	83 81       	ldd	r24, Z+3	; 0x03
    567e:	26 95       	lsr	r18
    5680:	28 23       	and	r18, r24
    5682:	c0 81       	ld	r28, Z
    5684:	d1 81       	ldd	r29, Z+1	; 0x01
    5686:	c2 0f       	add	r28, r18
    5688:	d1 1d       	adc	r29, r1
    568a:	68 83       	st	Y, r22
    568c:	8f 5f       	subi	r24, 0xFF	; 255
    568e:	95 81       	ldd	r25, Z+5	; 0x05
    5690:	89 23       	and	r24, r25
    5692:	83 83       	std	Z+3, r24	; 0x03
    5694:	16 96       	adiw	r26, 0x06	; 6
    5696:	ed 91       	ld	r30, X+
    5698:	fc 91       	ld	r31, X
    569a:	17 97       	sbiw	r26, 0x07	; 7
    569c:	30 97       	sbiw	r30, 0x00	; 0
    569e:	11 f0       	breq	.+4      	; 0x56a4 <__vector_36+0x7a>
    56a0:	cd 01       	movw	r24, r26
    56a2:	19 95       	eicall
    56a4:	ff 91       	pop	r31
    56a6:	ef 91       	pop	r30
    56a8:	df 91       	pop	r29
    56aa:	cf 91       	pop	r28
    56ac:	bf 91       	pop	r27
    56ae:	af 91       	pop	r26
    56b0:	9f 91       	pop	r25
    56b2:	8f 91       	pop	r24
    56b4:	7f 91       	pop	r23
    56b6:	6f 91       	pop	r22
    56b8:	5f 91       	pop	r21
    56ba:	4f 91       	pop	r20
    56bc:	3f 91       	pop	r19
    56be:	2f 91       	pop	r18
    56c0:	0f 90       	pop	r0
    56c2:	0b be       	out	0x3b, r0	; 59
    56c4:	0f 90       	pop	r0
    56c6:	0f be       	out	0x3f, r0	; 63
    56c8:	0f 90       	pop	r0
    56ca:	1f 90       	pop	r1
    56cc:	18 95       	reti

000056ce <__vector_37>:
    56ce:	1f 92       	push	r1
    56d0:	0f 92       	push	r0
    56d2:	0f b6       	in	r0, 0x3f	; 63
    56d4:	0f 92       	push	r0
    56d6:	11 24       	eor	r1, r1
    56d8:	0b b6       	in	r0, 0x3b	; 59
    56da:	0f 92       	push	r0
    56dc:	2f 93       	push	r18
    56de:	8f 93       	push	r24
    56e0:	9f 93       	push	r25
    56e2:	af 93       	push	r26
    56e4:	bf 93       	push	r27
    56e6:	ef 93       	push	r30
    56e8:	ff 93       	push	r31
    56ea:	e0 91 2d 15 	lds	r30, 0x152D	; 0x80152d <_ser_handle+0x2>
    56ee:	f0 91 2e 15 	lds	r31, 0x152E	; 0x80152e <_ser_handle+0x3>
    56f2:	30 97       	sbiw	r30, 0x00	; 0
    56f4:	b9 f0       	breq	.+46     	; 0x5724 <__vector_37+0x56>
    56f6:	02 80       	ldd	r0, Z+2	; 0x02
    56f8:	f3 81       	ldd	r31, Z+3	; 0x03
    56fa:	e0 2d       	mov	r30, r0
    56fc:	93 81       	ldd	r25, Z+3	; 0x03
    56fe:	82 81       	ldd	r24, Z+2	; 0x02
    5700:	98 17       	cp	r25, r24
    5702:	b1 f0       	breq	.+44     	; 0x5730 <__vector_37+0x62>
    5704:	92 81       	ldd	r25, Z+2	; 0x02
    5706:	85 81       	ldd	r24, Z+5	; 0x05
    5708:	28 2f       	mov	r18, r24
    570a:	26 95       	lsr	r18
    570c:	29 23       	and	r18, r25
    570e:	a0 81       	ld	r26, Z
    5710:	b1 81       	ldd	r27, Z+1	; 0x01
    5712:	a2 0f       	add	r26, r18
    5714:	b1 1d       	adc	r27, r1
    5716:	2c 91       	ld	r18, X
    5718:	9f 5f       	subi	r25, 0xFF	; 255
    571a:	89 23       	and	r24, r25
    571c:	82 83       	std	Z+2, r24	; 0x02
    571e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5722:	0b c0       	rjmp	.+22     	; 0x573a <__vector_37+0x6c>
    5724:	e9 ec       	ldi	r30, 0xC9	; 201
    5726:	f0 e0       	ldi	r31, 0x00	; 0
    5728:	80 81       	ld	r24, Z
    572a:	8f 7d       	andi	r24, 0xDF	; 223
    572c:	80 83       	st	Z, r24
    572e:	05 c0       	rjmp	.+10     	; 0x573a <__vector_37+0x6c>
    5730:	e9 ec       	ldi	r30, 0xC9	; 201
    5732:	f0 e0       	ldi	r31, 0x00	; 0
    5734:	80 81       	ld	r24, Z
    5736:	8f 7d       	andi	r24, 0xDF	; 223
    5738:	80 83       	st	Z, r24
    573a:	ff 91       	pop	r31
    573c:	ef 91       	pop	r30
    573e:	bf 91       	pop	r27
    5740:	af 91       	pop	r26
    5742:	9f 91       	pop	r25
    5744:	8f 91       	pop	r24
    5746:	2f 91       	pop	r18
    5748:	0f 90       	pop	r0
    574a:	0b be       	out	0x3b, r0	; 59
    574c:	0f 90       	pop	r0
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	0f 90       	pop	r0
    5752:	1f 90       	pop	r1
    5754:	18 95       	reti

00005756 <__vector_51>:
    5756:	1f 92       	push	r1
    5758:	0f 92       	push	r0
    575a:	0f b6       	in	r0, 0x3f	; 63
    575c:	0f 92       	push	r0
    575e:	11 24       	eor	r1, r1
    5760:	0b b6       	in	r0, 0x3b	; 59
    5762:	0f 92       	push	r0
    5764:	2f 93       	push	r18
    5766:	3f 93       	push	r19
    5768:	4f 93       	push	r20
    576a:	5f 93       	push	r21
    576c:	6f 93       	push	r22
    576e:	7f 93       	push	r23
    5770:	8f 93       	push	r24
    5772:	9f 93       	push	r25
    5774:	af 93       	push	r26
    5776:	bf 93       	push	r27
    5778:	cf 93       	push	r28
    577a:	df 93       	push	r29
    577c:	ef 93       	push	r30
    577e:	ff 93       	push	r31
    5780:	a0 91 2f 15 	lds	r26, 0x152F	; 0x80152f <_ser_handle+0x4>
    5784:	b0 91 30 15 	lds	r27, 0x1530	; 0x801530 <_ser_handle+0x5>
    5788:	10 97       	sbiw	r26, 0x00	; 0
    578a:	11 f1       	breq	.+68     	; 0x57d0 <__vector_51+0x7a>
    578c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5790:	14 96       	adiw	r26, 0x04	; 4
    5792:	ed 91       	ld	r30, X+
    5794:	fc 91       	ld	r31, X
    5796:	15 97       	sbiw	r26, 0x05	; 5
    5798:	93 81       	ldd	r25, Z+3	; 0x03
    579a:	82 81       	ldd	r24, Z+2	; 0x02
    579c:	25 81       	ldd	r18, Z+5	; 0x05
    579e:	98 1b       	sub	r25, r24
    57a0:	92 23       	and	r25, r18
    57a2:	84 81       	ldd	r24, Z+4	; 0x04
    57a4:	98 17       	cp	r25, r24
    57a6:	61 f0       	breq	.+24     	; 0x57c0 <__vector_51+0x6a>
    57a8:	83 81       	ldd	r24, Z+3	; 0x03
    57aa:	26 95       	lsr	r18
    57ac:	28 23       	and	r18, r24
    57ae:	c0 81       	ld	r28, Z
    57b0:	d1 81       	ldd	r29, Z+1	; 0x01
    57b2:	c2 0f       	add	r28, r18
    57b4:	d1 1d       	adc	r29, r1
    57b6:	68 83       	st	Y, r22
    57b8:	8f 5f       	subi	r24, 0xFF	; 255
    57ba:	95 81       	ldd	r25, Z+5	; 0x05
    57bc:	89 23       	and	r24, r25
    57be:	83 83       	std	Z+3, r24	; 0x03
    57c0:	16 96       	adiw	r26, 0x06	; 6
    57c2:	ed 91       	ld	r30, X+
    57c4:	fc 91       	ld	r31, X
    57c6:	17 97       	sbiw	r26, 0x07	; 7
    57c8:	30 97       	sbiw	r30, 0x00	; 0
    57ca:	11 f0       	breq	.+4      	; 0x57d0 <__vector_51+0x7a>
    57cc:	cd 01       	movw	r24, r26
    57ce:	19 95       	eicall
    57d0:	ff 91       	pop	r31
    57d2:	ef 91       	pop	r30
    57d4:	df 91       	pop	r29
    57d6:	cf 91       	pop	r28
    57d8:	bf 91       	pop	r27
    57da:	af 91       	pop	r26
    57dc:	9f 91       	pop	r25
    57de:	8f 91       	pop	r24
    57e0:	7f 91       	pop	r23
    57e2:	6f 91       	pop	r22
    57e4:	5f 91       	pop	r21
    57e6:	4f 91       	pop	r20
    57e8:	3f 91       	pop	r19
    57ea:	2f 91       	pop	r18
    57ec:	0f 90       	pop	r0
    57ee:	0b be       	out	0x3b, r0	; 59
    57f0:	0f 90       	pop	r0
    57f2:	0f be       	out	0x3f, r0	; 63
    57f4:	0f 90       	pop	r0
    57f6:	1f 90       	pop	r1
    57f8:	18 95       	reti

000057fa <__vector_52>:
    57fa:	1f 92       	push	r1
    57fc:	0f 92       	push	r0
    57fe:	0f b6       	in	r0, 0x3f	; 63
    5800:	0f 92       	push	r0
    5802:	11 24       	eor	r1, r1
    5804:	0b b6       	in	r0, 0x3b	; 59
    5806:	0f 92       	push	r0
    5808:	2f 93       	push	r18
    580a:	8f 93       	push	r24
    580c:	9f 93       	push	r25
    580e:	af 93       	push	r26
    5810:	bf 93       	push	r27
    5812:	ef 93       	push	r30
    5814:	ff 93       	push	r31
    5816:	e0 91 2f 15 	lds	r30, 0x152F	; 0x80152f <_ser_handle+0x4>
    581a:	f0 91 30 15 	lds	r31, 0x1530	; 0x801530 <_ser_handle+0x5>
    581e:	30 97       	sbiw	r30, 0x00	; 0
    5820:	b9 f0       	breq	.+46     	; 0x5850 <__vector_52+0x56>
    5822:	02 80       	ldd	r0, Z+2	; 0x02
    5824:	f3 81       	ldd	r31, Z+3	; 0x03
    5826:	e0 2d       	mov	r30, r0
    5828:	93 81       	ldd	r25, Z+3	; 0x03
    582a:	82 81       	ldd	r24, Z+2	; 0x02
    582c:	98 17       	cp	r25, r24
    582e:	b1 f0       	breq	.+44     	; 0x585c <__vector_52+0x62>
    5830:	92 81       	ldd	r25, Z+2	; 0x02
    5832:	85 81       	ldd	r24, Z+5	; 0x05
    5834:	28 2f       	mov	r18, r24
    5836:	26 95       	lsr	r18
    5838:	29 23       	and	r18, r25
    583a:	a0 81       	ld	r26, Z
    583c:	b1 81       	ldd	r27, Z+1	; 0x01
    583e:	a2 0f       	add	r26, r18
    5840:	b1 1d       	adc	r27, r1
    5842:	2c 91       	ld	r18, X
    5844:	9f 5f       	subi	r25, 0xFF	; 255
    5846:	89 23       	and	r24, r25
    5848:	82 83       	std	Z+2, r24	; 0x02
    584a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    584e:	0b c0       	rjmp	.+22     	; 0x5866 <__vector_52+0x6c>
    5850:	e1 ed       	ldi	r30, 0xD1	; 209
    5852:	f0 e0       	ldi	r31, 0x00	; 0
    5854:	80 81       	ld	r24, Z
    5856:	8f 7d       	andi	r24, 0xDF	; 223
    5858:	80 83       	st	Z, r24
    585a:	05 c0       	rjmp	.+10     	; 0x5866 <__vector_52+0x6c>
    585c:	e1 ed       	ldi	r30, 0xD1	; 209
    585e:	f0 e0       	ldi	r31, 0x00	; 0
    5860:	80 81       	ld	r24, Z
    5862:	8f 7d       	andi	r24, 0xDF	; 223
    5864:	80 83       	st	Z, r24
    5866:	ff 91       	pop	r31
    5868:	ef 91       	pop	r30
    586a:	bf 91       	pop	r27
    586c:	af 91       	pop	r26
    586e:	9f 91       	pop	r25
    5870:	8f 91       	pop	r24
    5872:	2f 91       	pop	r18
    5874:	0f 90       	pop	r0
    5876:	0b be       	out	0x3b, r0	; 59
    5878:	0f 90       	pop	r0
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	0f 90       	pop	r0
    587e:	1f 90       	pop	r1
    5880:	18 95       	reti

00005882 <__vector_54>:
    5882:	1f 92       	push	r1
    5884:	0f 92       	push	r0
    5886:	0f b6       	in	r0, 0x3f	; 63
    5888:	0f 92       	push	r0
    588a:	11 24       	eor	r1, r1
    588c:	0b b6       	in	r0, 0x3b	; 59
    588e:	0f 92       	push	r0
    5890:	2f 93       	push	r18
    5892:	3f 93       	push	r19
    5894:	4f 93       	push	r20
    5896:	5f 93       	push	r21
    5898:	6f 93       	push	r22
    589a:	7f 93       	push	r23
    589c:	8f 93       	push	r24
    589e:	9f 93       	push	r25
    58a0:	af 93       	push	r26
    58a2:	bf 93       	push	r27
    58a4:	cf 93       	push	r28
    58a6:	df 93       	push	r29
    58a8:	ef 93       	push	r30
    58aa:	ff 93       	push	r31
    58ac:	a0 91 31 15 	lds	r26, 0x1531	; 0x801531 <_ser_handle+0x6>
    58b0:	b0 91 32 15 	lds	r27, 0x1532	; 0x801532 <_ser_handle+0x7>
    58b4:	10 97       	sbiw	r26, 0x00	; 0
    58b6:	11 f1       	breq	.+68     	; 0x58fc <__vector_54+0x7a>
    58b8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    58bc:	14 96       	adiw	r26, 0x04	; 4
    58be:	ed 91       	ld	r30, X+
    58c0:	fc 91       	ld	r31, X
    58c2:	15 97       	sbiw	r26, 0x05	; 5
    58c4:	93 81       	ldd	r25, Z+3	; 0x03
    58c6:	82 81       	ldd	r24, Z+2	; 0x02
    58c8:	25 81       	ldd	r18, Z+5	; 0x05
    58ca:	98 1b       	sub	r25, r24
    58cc:	92 23       	and	r25, r18
    58ce:	84 81       	ldd	r24, Z+4	; 0x04
    58d0:	98 17       	cp	r25, r24
    58d2:	61 f0       	breq	.+24     	; 0x58ec <__vector_54+0x6a>
    58d4:	83 81       	ldd	r24, Z+3	; 0x03
    58d6:	26 95       	lsr	r18
    58d8:	28 23       	and	r18, r24
    58da:	c0 81       	ld	r28, Z
    58dc:	d1 81       	ldd	r29, Z+1	; 0x01
    58de:	c2 0f       	add	r28, r18
    58e0:	d1 1d       	adc	r29, r1
    58e2:	68 83       	st	Y, r22
    58e4:	8f 5f       	subi	r24, 0xFF	; 255
    58e6:	95 81       	ldd	r25, Z+5	; 0x05
    58e8:	89 23       	and	r24, r25
    58ea:	83 83       	std	Z+3, r24	; 0x03
    58ec:	16 96       	adiw	r26, 0x06	; 6
    58ee:	ed 91       	ld	r30, X+
    58f0:	fc 91       	ld	r31, X
    58f2:	17 97       	sbiw	r26, 0x07	; 7
    58f4:	30 97       	sbiw	r30, 0x00	; 0
    58f6:	11 f0       	breq	.+4      	; 0x58fc <__vector_54+0x7a>
    58f8:	cd 01       	movw	r24, r26
    58fa:	19 95       	eicall
    58fc:	ff 91       	pop	r31
    58fe:	ef 91       	pop	r30
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	bf 91       	pop	r27
    5906:	af 91       	pop	r26
    5908:	9f 91       	pop	r25
    590a:	8f 91       	pop	r24
    590c:	7f 91       	pop	r23
    590e:	6f 91       	pop	r22
    5910:	5f 91       	pop	r21
    5912:	4f 91       	pop	r20
    5914:	3f 91       	pop	r19
    5916:	2f 91       	pop	r18
    5918:	0f 90       	pop	r0
    591a:	0b be       	out	0x3b, r0	; 59
    591c:	0f 90       	pop	r0
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	0f 90       	pop	r0
    5922:	1f 90       	pop	r1
    5924:	18 95       	reti

00005926 <__vector_55>:
    5926:	1f 92       	push	r1
    5928:	0f 92       	push	r0
    592a:	0f b6       	in	r0, 0x3f	; 63
    592c:	0f 92       	push	r0
    592e:	11 24       	eor	r1, r1
    5930:	0b b6       	in	r0, 0x3b	; 59
    5932:	0f 92       	push	r0
    5934:	2f 93       	push	r18
    5936:	8f 93       	push	r24
    5938:	9f 93       	push	r25
    593a:	af 93       	push	r26
    593c:	bf 93       	push	r27
    593e:	ef 93       	push	r30
    5940:	ff 93       	push	r31
    5942:	e0 91 31 15 	lds	r30, 0x1531	; 0x801531 <_ser_handle+0x6>
    5946:	f0 91 32 15 	lds	r31, 0x1532	; 0x801532 <_ser_handle+0x7>
    594a:	30 97       	sbiw	r30, 0x00	; 0
    594c:	b9 f0       	breq	.+46     	; 0x597c <__vector_55+0x56>
    594e:	02 80       	ldd	r0, Z+2	; 0x02
    5950:	f3 81       	ldd	r31, Z+3	; 0x03
    5952:	e0 2d       	mov	r30, r0
    5954:	93 81       	ldd	r25, Z+3	; 0x03
    5956:	82 81       	ldd	r24, Z+2	; 0x02
    5958:	98 17       	cp	r25, r24
    595a:	b1 f0       	breq	.+44     	; 0x5988 <__vector_55+0x62>
    595c:	92 81       	ldd	r25, Z+2	; 0x02
    595e:	85 81       	ldd	r24, Z+5	; 0x05
    5960:	28 2f       	mov	r18, r24
    5962:	26 95       	lsr	r18
    5964:	29 23       	and	r18, r25
    5966:	a0 81       	ld	r26, Z
    5968:	b1 81       	ldd	r27, Z+1	; 0x01
    596a:	a2 0f       	add	r26, r18
    596c:	b1 1d       	adc	r27, r1
    596e:	2c 91       	ld	r18, X
    5970:	9f 5f       	subi	r25, 0xFF	; 255
    5972:	89 23       	and	r24, r25
    5974:	82 83       	std	Z+2, r24	; 0x02
    5976:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    597a:	0b c0       	rjmp	.+22     	; 0x5992 <__vector_55+0x6c>
    597c:	e1 e3       	ldi	r30, 0x31	; 49
    597e:	f1 e0       	ldi	r31, 0x01	; 1
    5980:	80 81       	ld	r24, Z
    5982:	8f 7d       	andi	r24, 0xDF	; 223
    5984:	80 83       	st	Z, r24
    5986:	05 c0       	rjmp	.+10     	; 0x5992 <__vector_55+0x6c>
    5988:	e1 e3       	ldi	r30, 0x31	; 49
    598a:	f1 e0       	ldi	r31, 0x01	; 1
    598c:	80 81       	ld	r24, Z
    598e:	8f 7d       	andi	r24, 0xDF	; 223
    5990:	80 83       	st	Z, r24
    5992:	ff 91       	pop	r31
    5994:	ef 91       	pop	r30
    5996:	bf 91       	pop	r27
    5998:	af 91       	pop	r26
    599a:	9f 91       	pop	r25
    599c:	8f 91       	pop	r24
    599e:	2f 91       	pop	r18
    59a0:	0f 90       	pop	r0
    59a2:	0b be       	out	0x3b, r0	; 59
    59a4:	0f 90       	pop	r0
    59a6:	0f be       	out	0x3f, r0	; 63
    59a8:	0f 90       	pop	r0
    59aa:	1f 90       	pop	r1
    59ac:	18 95       	reti

000059ae <usart_getchar>:
    59ae:	cf 93       	push	r28
    59b0:	df 93       	push	r29
    59b2:	1f 92       	push	r1
    59b4:	cd b7       	in	r28, 0x3d	; 61
    59b6:	de b7       	in	r29, 0x3e	; 62
    59b8:	be 01       	movw	r22, r28
    59ba:	6f 5f       	subi	r22, 0xFF	; 255
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	80 91 33 15 	lds	r24, 0x1533	; 0x801533 <_com_serial_instance>
    59c2:	90 91 34 15 	lds	r25, 0x1534	; 0x801534 <_com_serial_instance+0x1>
    59c6:	7b dd       	rcall	.-1290   	; 0x54be <serial_getByte>
    59c8:	81 11       	cpse	r24, r1
    59ca:	f6 cf       	rjmp	.-20     	; 0x59b8 <usart_getchar+0xa>
    59cc:	89 81       	ldd	r24, Y+1	; 0x01
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	0f 90       	pop	r0
    59d2:	df 91       	pop	r29
    59d4:	cf 91       	pop	r28
    59d6:	08 95       	ret

000059d8 <usart_putchar>:
    59d8:	68 2f       	mov	r22, r24
    59da:	80 91 33 15 	lds	r24, 0x1533	; 0x801533 <_com_serial_instance>
    59de:	90 91 34 15 	lds	r25, 0x1534	; 0x801534 <_com_serial_instance+0x1>
    59e2:	ed dc       	rcall	.-1574   	; 0x53be <serial_sendByte>
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	08 95       	ret

000059ea <stdio_initialise>:
    59ea:	8f 92       	push	r8
    59ec:	9f 92       	push	r9
    59ee:	af 92       	push	r10
    59f0:	cf 92       	push	r12
    59f2:	ef 92       	push	r14
    59f4:	0f 93       	push	r16
    59f6:	81 2c       	mov	r8, r1
    59f8:	91 2c       	mov	r9, r1
    59fa:	68 94       	set
    59fc:	aa 24       	eor	r10, r10
    59fe:	a7 f8       	bld	r10, 7
    5a00:	68 94       	set
    5a02:	cc 24       	eor	r12, r12
    5a04:	c7 f8       	bld	r12, 7
    5a06:	e1 2c       	mov	r14, r1
    5a08:	00 e0       	ldi	r16, 0x00	; 0
    5a0a:	23 e0       	ldi	r18, 0x03	; 3
    5a0c:	40 e0       	ldi	r20, 0x00	; 0
    5a0e:	51 ee       	ldi	r21, 0xE1	; 225
    5a10:	60 e0       	ldi	r22, 0x00	; 0
    5a12:	70 e0       	ldi	r23, 0x00	; 0
    5a14:	2c dc       	rcall	.-1960   	; 0x526e <serial_create>
    5a16:	90 93 34 15 	sts	0x1534, r25	; 0x801534 <_com_serial_instance+0x1>
    5a1a:	80 93 33 15 	sts	0x1533, r24	; 0x801533 <_com_serial_instance>
    5a1e:	e9 e7       	ldi	r30, 0x79	; 121
    5a20:	f5 e1       	ldi	r31, 0x15	; 21
    5a22:	83 e1       	ldi	r24, 0x13	; 19
    5a24:	92 e0       	ldi	r25, 0x02	; 2
    5a26:	91 83       	std	Z+1, r25	; 0x01
    5a28:	80 83       	st	Z, r24
    5a2a:	93 83       	std	Z+3, r25	; 0x03
    5a2c:	82 83       	std	Z+2, r24	; 0x02
    5a2e:	0f 91       	pop	r16
    5a30:	ef 90       	pop	r14
    5a32:	cf 90       	pop	r12
    5a34:	af 90       	pop	r10
    5a36:	9f 90       	pop	r9
    5a38:	8f 90       	pop	r8
    5a3a:	08 95       	ret

00005a3c <_select_instance>:
    5a3c:	e0 91 36 15 	lds	r30, 0x1536	; 0x801536 <_this>
    5a40:	f0 91 37 15 	lds	r31, 0x1537	; 0x801537 <_this+0x1>
    5a44:	30 97       	sbiw	r30, 0x00	; 0
    5a46:	f9 f0       	breq	.+62     	; 0x5a86 <_select_instance+0x4a>
    5a48:	a0 81       	ld	r26, Z
    5a4a:	b1 81       	ldd	r27, Z+1	; 0x01
    5a4c:	10 97       	sbiw	r26, 0x00	; 0
    5a4e:	d9 f0       	breq	.+54     	; 0x5a86 <_select_instance+0x4a>
    5a50:	23 81       	ldd	r18, Z+3	; 0x03
    5a52:	21 30       	cpi	r18, 0x01	; 1
    5a54:	69 f4       	brne	.+26     	; 0x5a70 <_select_instance+0x34>
    5a56:	4c 91       	ld	r20, X
    5a58:	21 e0       	ldi	r18, 0x01	; 1
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	02 80       	ldd	r0, Z+2	; 0x02
    5a5e:	02 c0       	rjmp	.+4      	; 0x5a64 <_select_instance+0x28>
    5a60:	22 0f       	add	r18, r18
    5a62:	33 1f       	adc	r19, r19
    5a64:	0a 94       	dec	r0
    5a66:	e2 f7       	brpl	.-8      	; 0x5a60 <_select_instance+0x24>
    5a68:	20 95       	com	r18
    5a6a:	24 23       	and	r18, r20
    5a6c:	2c 93       	st	X, r18
    5a6e:	0b c0       	rjmp	.+22     	; 0x5a86 <_select_instance+0x4a>
    5a70:	4c 91       	ld	r20, X
    5a72:	21 e0       	ldi	r18, 0x01	; 1
    5a74:	30 e0       	ldi	r19, 0x00	; 0
    5a76:	02 80       	ldd	r0, Z+2	; 0x02
    5a78:	02 c0       	rjmp	.+4      	; 0x5a7e <_select_instance+0x42>
    5a7a:	22 0f       	add	r18, r18
    5a7c:	33 1f       	adc	r19, r19
    5a7e:	0a 94       	dec	r0
    5a80:	e2 f7       	brpl	.-8      	; 0x5a7a <_select_instance+0x3e>
    5a82:	24 2b       	or	r18, r20
    5a84:	2c 93       	st	X, r18
    5a86:	90 93 37 15 	sts	0x1537, r25	; 0x801537 <_this+0x1>
    5a8a:	80 93 36 15 	sts	0x1536, r24	; 0x801536 <_this>
    5a8e:	00 97       	sbiw	r24, 0x00	; 0
    5a90:	69 f0       	breq	.+26     	; 0x5aac <_select_instance+0x70>
    5a92:	10 92 38 15 	sts	0x1538, r1	; 0x801538 <_spi_active>
    5a96:	2c b5       	in	r18, 0x2c	; 44
    5a98:	2f 73       	andi	r18, 0x3F	; 63
    5a9a:	2c bd       	out	0x2c, r18	; 44
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	24 81       	ldd	r18, Z+4	; 0x04
    5aa0:	2c bd       	out	0x2c, r18	; 44
    5aa2:	85 81       	ldd	r24, Z+5	; 0x05
    5aa4:	8d bd       	out	0x2d, r24	; 45
    5aa6:	8c b5       	in	r24, 0x2c	; 44
    5aa8:	80 64       	ori	r24, 0x40	; 64
    5aaa:	8c bd       	out	0x2c, r24	; 44
    5aac:	08 95       	ret

00005aae <spi_create>:
    5aae:	4f 92       	push	r4
    5ab0:	5f 92       	push	r5
    5ab2:	6f 92       	push	r6
    5ab4:	7f 92       	push	r7
    5ab6:	8f 92       	push	r8
    5ab8:	9f 92       	push	r9
    5aba:	af 92       	push	r10
    5abc:	bf 92       	push	r11
    5abe:	cf 92       	push	r12
    5ac0:	df 92       	push	r13
    5ac2:	ef 92       	push	r14
    5ac4:	ff 92       	push	r15
    5ac6:	0f 93       	push	r16
    5ac8:	1f 93       	push	r17
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	cd b7       	in	r28, 0x3d	; 61
    5ad0:	de b7       	in	r29, 0x3e	; 62
    5ad2:	98 2e       	mov	r9, r24
    5ad4:	b6 2e       	mov	r11, r22
    5ad6:	d4 2e       	mov	r13, r20
    5ad8:	f2 2e       	mov	r15, r18
    5ada:	80 91 35 15 	lds	r24, 0x1535	; 0x801535 <_initialised>
    5ade:	81 11       	cpse	r24, r1
    5ae0:	06 c0       	rjmp	.+12     	; 0x5aee <spi_create+0x40>
    5ae2:	84 b1       	in	r24, 0x04	; 4
    5ae4:	87 60       	ori	r24, 0x07	; 7
    5ae6:	84 b9       	out	0x04, r24	; 4
    5ae8:	81 e0       	ldi	r24, 0x01	; 1
    5aea:	80 93 35 15 	sts	0x1535, r24	; 0x801535 <_initialised>
    5aee:	8c e0       	ldi	r24, 0x0C	; 12
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	47 d7       	rcall	.+3726   	; 0x6982 <malloc>
    5af4:	3c 01       	movw	r6, r24
    5af6:	dc 01       	movw	r26, r24
    5af8:	11 96       	adiw	r26, 0x01	; 1
    5afa:	1c 93       	st	X, r17
    5afc:	0e 93       	st	-X, r16
    5afe:	12 96       	adiw	r26, 0x02	; 2
    5b00:	ec 92       	st	X, r14
    5b02:	12 97       	sbiw	r26, 0x02	; 2
    5b04:	13 96       	adiw	r26, 0x03	; 3
    5b06:	cc 92       	st	X, r12
    5b08:	13 97       	sbiw	r26, 0x03	; 3
    5b0a:	8d 2d       	mov	r24, r13
    5b0c:	88 0f       	add	r24, r24
    5b0e:	88 0f       	add	r24, r24
    5b10:	f8 2a       	or	r15, r24
    5b12:	eb 2d       	mov	r30, r11
    5b14:	f0 e0       	ldi	r31, 0x00	; 0
    5b16:	e3 57       	subi	r30, 0x73	; 115
    5b18:	f7 4f       	sbci	r31, 0xF7	; 247
    5b1a:	80 81       	ld	r24, Z
    5b1c:	98 2a       	or	r9, r24
    5b1e:	8f 2d       	mov	r24, r15
    5b20:	89 29       	or	r24, r9
    5b22:	14 96       	adiw	r26, 0x04	; 4
    5b24:	8c 93       	st	X, r24
    5b26:	b3 e0       	ldi	r27, 0x03	; 3
    5b28:	bb 15       	cp	r27, r11
    5b2a:	18 f4       	brcc	.+6      	; 0x5b32 <spi_create+0x84>
    5b2c:	81 e0       	ldi	r24, 0x01	; 1
    5b2e:	f3 01       	movw	r30, r6
    5b30:	85 83       	std	Z+5, r24	; 0x05
    5b32:	a1 10       	cpse	r10, r1
    5b34:	06 c0       	rjmp	.+12     	; 0x5b42 <spi_create+0x94>
    5b36:	d3 01       	movw	r26, r6
    5b38:	19 96       	adiw	r26, 0x09	; 9
    5b3a:	1c 92       	st	X, r1
    5b3c:	1e 92       	st	-X, r1
    5b3e:	18 97       	sbiw	r26, 0x08	; 8
    5b40:	12 c0       	rjmp	.+36     	; 0x5b66 <spi_create+0xb8>
    5b42:	6a 2d       	mov	r22, r10
    5b44:	70 e0       	ldi	r23, 0x00	; 0
    5b46:	84 e0       	ldi	r24, 0x04	; 4
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	01 d7       	rcall	.+3586   	; 0x694e <calloc>
    5b4c:	2c 01       	movw	r4, r24
    5b4e:	61 e0       	ldi	r22, 0x01	; 1
    5b50:	70 e0       	ldi	r23, 0x00	; 0
    5b52:	86 e0       	ldi	r24, 0x06	; 6
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	fb d6       	rcall	.+3574   	; 0x694e <calloc>
    5b58:	6c 01       	movw	r12, r24
    5b5a:	4a 2d       	mov	r20, r10
    5b5c:	b2 01       	movw	r22, r4
    5b5e:	47 d4       	rcall	.+2190   	; 0x63ee <fifo_init>
    5b60:	f3 01       	movw	r30, r6
    5b62:	d1 86       	std	Z+9, r13	; 0x09
    5b64:	c0 86       	std	Z+8, r12	; 0x08
    5b66:	81 10       	cpse	r8, r1
    5b68:	06 c0       	rjmp	.+12     	; 0x5b76 <spi_create+0xc8>
    5b6a:	d3 01       	movw	r26, r6
    5b6c:	17 96       	adiw	r26, 0x07	; 7
    5b6e:	1c 92       	st	X, r1
    5b70:	1e 92       	st	-X, r1
    5b72:	16 97       	sbiw	r26, 0x06	; 6
    5b74:	12 c0       	rjmp	.+36     	; 0x5b9a <spi_create+0xec>
    5b76:	68 2d       	mov	r22, r8
    5b78:	70 e0       	ldi	r23, 0x00	; 0
    5b7a:	84 e0       	ldi	r24, 0x04	; 4
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	e7 d6       	rcall	.+3534   	; 0x694e <calloc>
    5b80:	5c 01       	movw	r10, r24
    5b82:	61 e0       	ldi	r22, 0x01	; 1
    5b84:	70 e0       	ldi	r23, 0x00	; 0
    5b86:	86 e0       	ldi	r24, 0x06	; 6
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	e1 d6       	rcall	.+3522   	; 0x694e <calloc>
    5b8c:	6c 01       	movw	r12, r24
    5b8e:	48 2d       	mov	r20, r8
    5b90:	b5 01       	movw	r22, r10
    5b92:	2d d4       	rcall	.+2138   	; 0x63ee <fifo_init>
    5b94:	f3 01       	movw	r30, r6
    5b96:	d7 82       	std	Z+7, r13	; 0x07
    5b98:	c6 82       	std	Z+6, r12	; 0x06
    5b9a:	8c 89       	ldd	r24, Y+20	; 0x14
    5b9c:	9d 89       	ldd	r25, Y+21	; 0x15
    5b9e:	d3 01       	movw	r26, r6
    5ba0:	1b 96       	adiw	r26, 0x0b	; 11
    5ba2:	9c 93       	st	X, r25
    5ba4:	8e 93       	st	-X, r24
    5ba6:	1a 97       	sbiw	r26, 0x0a	; 10
    5ba8:	01 15       	cp	r16, r1
    5baa:	11 05       	cpc	r17, r1
    5bac:	59 f0       	breq	.+22     	; 0x5bc4 <spi_create+0x116>
    5bae:	f8 01       	movw	r30, r16
    5bb0:	22 91       	ld	r18, -Z
    5bb2:	81 e0       	ldi	r24, 0x01	; 1
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	02 c0       	rjmp	.+4      	; 0x5bbc <spi_create+0x10e>
    5bb8:	88 0f       	add	r24, r24
    5bba:	99 1f       	adc	r25, r25
    5bbc:	ea 94       	dec	r14
    5bbe:	e2 f7       	brpl	.-8      	; 0x5bb8 <spi_create+0x10a>
    5bc0:	82 2b       	or	r24, r18
    5bc2:	80 83       	st	Z, r24
    5bc4:	2f b7       	in	r18, 0x3f	; 63
    5bc6:	f8 94       	cli
    5bc8:	40 91 36 15 	lds	r20, 0x1536	; 0x801536 <_this>
    5bcc:	50 91 37 15 	lds	r21, 0x1537	; 0x801537 <_this+0x1>
    5bd0:	70 92 37 15 	sts	0x1537, r7	; 0x801537 <_this+0x1>
    5bd4:	60 92 36 15 	sts	0x1536, r6	; 0x801536 <_this>
    5bd8:	d3 01       	movw	r26, r6
    5bda:	ed 91       	ld	r30, X+
    5bdc:	fc 91       	ld	r31, X
    5bde:	11 97       	sbiw	r26, 0x01	; 1
    5be0:	30 97       	sbiw	r30, 0x00	; 0
    5be2:	01 f1       	breq	.+64     	; 0x5c24 <spi_create+0x176>
    5be4:	13 96       	adiw	r26, 0x03	; 3
    5be6:	8c 91       	ld	r24, X
    5be8:	13 97       	sbiw	r26, 0x03	; 3
    5bea:	81 30       	cpi	r24, 0x01	; 1
    5bec:	71 f4       	brne	.+28     	; 0x5c0a <spi_create+0x15c>
    5bee:	30 81       	ld	r19, Z
    5bf0:	81 e0       	ldi	r24, 0x01	; 1
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	12 96       	adiw	r26, 0x02	; 2
    5bf6:	0c 90       	ld	r0, X
    5bf8:	02 c0       	rjmp	.+4      	; 0x5bfe <spi_create+0x150>
    5bfa:	88 0f       	add	r24, r24
    5bfc:	99 1f       	adc	r25, r25
    5bfe:	0a 94       	dec	r0
    5c00:	e2 f7       	brpl	.-8      	; 0x5bfa <spi_create+0x14c>
    5c02:	80 95       	com	r24
    5c04:	83 23       	and	r24, r19
    5c06:	80 83       	st	Z, r24
    5c08:	0d c0       	rjmp	.+26     	; 0x5c24 <spi_create+0x176>
    5c0a:	30 81       	ld	r19, Z
    5c0c:	81 e0       	ldi	r24, 0x01	; 1
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	d3 01       	movw	r26, r6
    5c12:	12 96       	adiw	r26, 0x02	; 2
    5c14:	0c 90       	ld	r0, X
    5c16:	02 c0       	rjmp	.+4      	; 0x5c1c <spi_create+0x16e>
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	0a 94       	dec	r0
    5c1e:	e2 f7       	brpl	.-8      	; 0x5c18 <spi_create+0x16a>
    5c20:	83 2b       	or	r24, r19
    5c22:	80 83       	st	Z, r24
    5c24:	50 93 37 15 	sts	0x1537, r21	; 0x801537 <_this+0x1>
    5c28:	40 93 36 15 	sts	0x1536, r20	; 0x801536 <_this>
    5c2c:	2f bf       	out	0x3f, r18	; 63
    5c2e:	c3 01       	movw	r24, r6
    5c30:	df 91       	pop	r29
    5c32:	cf 91       	pop	r28
    5c34:	1f 91       	pop	r17
    5c36:	0f 91       	pop	r16
    5c38:	ff 90       	pop	r15
    5c3a:	ef 90       	pop	r14
    5c3c:	df 90       	pop	r13
    5c3e:	cf 90       	pop	r12
    5c40:	bf 90       	pop	r11
    5c42:	af 90       	pop	r10
    5c44:	9f 90       	pop	r9
    5c46:	8f 90       	pop	r8
    5c48:	7f 90       	pop	r7
    5c4a:	6f 90       	pop	r6
    5c4c:	5f 90       	pop	r5
    5c4e:	4f 90       	pop	r4
    5c50:	08 95       	ret

00005c52 <spi_sendByte>:
    5c52:	1f 93       	push	r17
    5c54:	cf 93       	push	r28
    5c56:	df 93       	push	r29
    5c58:	00 97       	sbiw	r24, 0x00	; 0
    5c5a:	09 f4       	brne	.+2      	; 0x5c5e <spi_sendByte+0xc>
    5c5c:	6a c0       	rjmp	.+212    	; 0x5d32 <spi_sendByte+0xe0>
    5c5e:	16 2f       	mov	r17, r22
    5c60:	ec 01       	movw	r28, r24
    5c62:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_this>
    5c66:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_this+0x1>
    5c6a:	c8 17       	cp	r28, r24
    5c6c:	d9 07       	cpc	r29, r25
    5c6e:	11 f0       	breq	.+4      	; 0x5c74 <spi_sendByte+0x22>
    5c70:	ce 01       	movw	r24, r28
    5c72:	e4 de       	rcall	.-568    	; 0x5a3c <_select_instance>
    5c74:	8f b7       	in	r24, 0x3f	; 63
    5c76:	2f b7       	in	r18, 0x3f	; 63
    5c78:	f8 94       	cli
    5c7a:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <_spi_active>
    5c7e:	81 11       	cpse	r24, r1
    5c80:	31 c0       	rjmp	.+98     	; 0x5ce4 <spi_sendByte+0x92>
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	80 93 38 15 	sts	0x1538, r24	; 0x801538 <_spi_active>
    5c88:	a0 91 36 15 	lds	r26, 0x1536	; 0x801536 <_this>
    5c8c:	b0 91 37 15 	lds	r27, 0x1537	; 0x801537 <_this+0x1>
    5c90:	ed 91       	ld	r30, X+
    5c92:	fc 91       	ld	r31, X
    5c94:	11 97       	sbiw	r26, 0x01	; 1
    5c96:	30 97       	sbiw	r30, 0x00	; 0
    5c98:	f9 f0       	breq	.+62     	; 0x5cd8 <spi_sendByte+0x86>
    5c9a:	13 96       	adiw	r26, 0x03	; 3
    5c9c:	8c 91       	ld	r24, X
    5c9e:	13 97       	sbiw	r26, 0x03	; 3
    5ca0:	81 30       	cpi	r24, 0x01	; 1
    5ca2:	69 f4       	brne	.+26     	; 0x5cbe <spi_sendByte+0x6c>
    5ca4:	30 81       	ld	r19, Z
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	12 96       	adiw	r26, 0x02	; 2
    5cac:	0c 90       	ld	r0, X
    5cae:	02 c0       	rjmp	.+4      	; 0x5cb4 <spi_sendByte+0x62>
    5cb0:	88 0f       	add	r24, r24
    5cb2:	99 1f       	adc	r25, r25
    5cb4:	0a 94       	dec	r0
    5cb6:	e2 f7       	brpl	.-8      	; 0x5cb0 <spi_sendByte+0x5e>
    5cb8:	83 2b       	or	r24, r19
    5cba:	80 83       	st	Z, r24
    5cbc:	0d c0       	rjmp	.+26     	; 0x5cd8 <spi_sendByte+0x86>
    5cbe:	30 81       	ld	r19, Z
    5cc0:	81 e0       	ldi	r24, 0x01	; 1
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	12 96       	adiw	r26, 0x02	; 2
    5cc6:	0c 90       	ld	r0, X
    5cc8:	02 c0       	rjmp	.+4      	; 0x5cce <spi_sendByte+0x7c>
    5cca:	88 0f       	add	r24, r24
    5ccc:	99 1f       	adc	r25, r25
    5cce:	0a 94       	dec	r0
    5cd0:	e2 f7       	brpl	.-8      	; 0x5cca <spi_sendByte+0x78>
    5cd2:	80 95       	com	r24
    5cd4:	83 23       	and	r24, r19
    5cd6:	80 83       	st	Z, r24
    5cd8:	8c b5       	in	r24, 0x2c	; 44
    5cda:	80 68       	ori	r24, 0x80	; 128
    5cdc:	8c bd       	out	0x2c, r24	; 44
    5cde:	1e bd       	out	0x2e, r17	; 46
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
    5ce2:	25 c0       	rjmp	.+74     	; 0x5d2e <spi_sendByte+0xdc>
    5ce4:	ee 81       	ldd	r30, Y+6	; 0x06
    5ce6:	ff 81       	ldd	r31, Y+7	; 0x07
    5ce8:	30 97       	sbiw	r30, 0x00	; 0
    5cea:	e1 f0       	breq	.+56     	; 0x5d24 <spi_sendByte+0xd2>
    5cec:	34 81       	ldd	r19, Z+4	; 0x04
    5cee:	83 81       	ldd	r24, Z+3	; 0x03
    5cf0:	42 81       	ldd	r20, Z+2	; 0x02
    5cf2:	95 81       	ldd	r25, Z+5	; 0x05
    5cf4:	84 1b       	sub	r24, r20
    5cf6:	89 23       	and	r24, r25
    5cf8:	38 17       	cp	r19, r24
    5cfa:	b1 f0       	breq	.+44     	; 0x5d28 <spi_sendByte+0xd6>
    5cfc:	83 81       	ldd	r24, Z+3	; 0x03
    5cfe:	42 81       	ldd	r20, Z+2	; 0x02
    5d00:	84 1b       	sub	r24, r20
    5d02:	89 23       	and	r24, r25
    5d04:	38 17       	cp	r19, r24
    5d06:	91 f0       	breq	.+36     	; 0x5d2c <spi_sendByte+0xda>
    5d08:	83 81       	ldd	r24, Z+3	; 0x03
    5d0a:	96 95       	lsr	r25
    5d0c:	98 23       	and	r25, r24
    5d0e:	a0 81       	ld	r26, Z
    5d10:	b1 81       	ldd	r27, Z+1	; 0x01
    5d12:	a9 0f       	add	r26, r25
    5d14:	b1 1d       	adc	r27, r1
    5d16:	1c 93       	st	X, r17
    5d18:	8f 5f       	subi	r24, 0xFF	; 255
    5d1a:	95 81       	ldd	r25, Z+5	; 0x05
    5d1c:	89 23       	and	r24, r25
    5d1e:	83 83       	std	Z+3, r24	; 0x03
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	05 c0       	rjmp	.+10     	; 0x5d2e <spi_sendByte+0xdc>
    5d24:	82 e0       	ldi	r24, 0x02	; 2
    5d26:	03 c0       	rjmp	.+6      	; 0x5d2e <spi_sendByte+0xdc>
    5d28:	81 e0       	ldi	r24, 0x01	; 1
    5d2a:	01 c0       	rjmp	.+2      	; 0x5d2e <spi_sendByte+0xdc>
    5d2c:	80 e0       	ldi	r24, 0x00	; 0
    5d2e:	2f bf       	out	0x3f, r18	; 63
    5d30:	01 c0       	rjmp	.+2      	; 0x5d34 <spi_sendByte+0xe2>
    5d32:	83 e0       	ldi	r24, 0x03	; 3
    5d34:	df 91       	pop	r29
    5d36:	cf 91       	pop	r28
    5d38:	1f 91       	pop	r17
    5d3a:	08 95       	ret

00005d3c <__vector_24>:
    5d3c:	1f 92       	push	r1
    5d3e:	0f 92       	push	r0
    5d40:	0f b6       	in	r0, 0x3f	; 63
    5d42:	0f 92       	push	r0
    5d44:	11 24       	eor	r1, r1
    5d46:	0b b6       	in	r0, 0x3b	; 59
    5d48:	0f 92       	push	r0
    5d4a:	2f 93       	push	r18
    5d4c:	3f 93       	push	r19
    5d4e:	4f 93       	push	r20
    5d50:	5f 93       	push	r21
    5d52:	6f 93       	push	r22
    5d54:	7f 93       	push	r23
    5d56:	8f 93       	push	r24
    5d58:	9f 93       	push	r25
    5d5a:	af 93       	push	r26
    5d5c:	bf 93       	push	r27
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
    5d62:	ef 93       	push	r30
    5d64:	ff 93       	push	r31
    5d66:	6e b5       	in	r22, 0x2e	; 46
    5d68:	a0 91 36 15 	lds	r26, 0x1536	; 0x801536 <_this>
    5d6c:	b0 91 37 15 	lds	r27, 0x1537	; 0x801537 <_this+0x1>
    5d70:	18 96       	adiw	r26, 0x08	; 8
    5d72:	ed 91       	ld	r30, X+
    5d74:	fc 91       	ld	r31, X
    5d76:	19 97       	sbiw	r26, 0x09	; 9
    5d78:	30 97       	sbiw	r30, 0x00	; 0
    5d7a:	a1 f0       	breq	.+40     	; 0x5da4 <__vector_24+0x68>
    5d7c:	83 81       	ldd	r24, Z+3	; 0x03
    5d7e:	22 81       	ldd	r18, Z+2	; 0x02
    5d80:	95 81       	ldd	r25, Z+5	; 0x05
    5d82:	82 1b       	sub	r24, r18
    5d84:	89 23       	and	r24, r25
    5d86:	24 81       	ldd	r18, Z+4	; 0x04
    5d88:	82 17       	cp	r24, r18
    5d8a:	61 f0       	breq	.+24     	; 0x5da4 <__vector_24+0x68>
    5d8c:	83 81       	ldd	r24, Z+3	; 0x03
    5d8e:	96 95       	lsr	r25
    5d90:	98 23       	and	r25, r24
    5d92:	c0 81       	ld	r28, Z
    5d94:	d1 81       	ldd	r29, Z+1	; 0x01
    5d96:	c9 0f       	add	r28, r25
    5d98:	d1 1d       	adc	r29, r1
    5d9a:	68 83       	st	Y, r22
    5d9c:	8f 5f       	subi	r24, 0xFF	; 255
    5d9e:	95 81       	ldd	r25, Z+5	; 0x05
    5da0:	89 23       	and	r24, r25
    5da2:	83 83       	std	Z+3, r24	; 0x03
    5da4:	16 96       	adiw	r26, 0x06	; 6
    5da6:	ed 91       	ld	r30, X+
    5da8:	fc 91       	ld	r31, X
    5daa:	17 97       	sbiw	r26, 0x07	; 7
    5dac:	30 97       	sbiw	r30, 0x00	; 0
    5dae:	99 f0       	breq	.+38     	; 0x5dd6 <__vector_24+0x9a>
    5db0:	93 81       	ldd	r25, Z+3	; 0x03
    5db2:	82 81       	ldd	r24, Z+2	; 0x02
    5db4:	98 17       	cp	r25, r24
    5db6:	79 f0       	breq	.+30     	; 0x5dd6 <__vector_24+0x9a>
    5db8:	92 81       	ldd	r25, Z+2	; 0x02
    5dba:	85 81       	ldd	r24, Z+5	; 0x05
    5dbc:	28 2f       	mov	r18, r24
    5dbe:	26 95       	lsr	r18
    5dc0:	29 23       	and	r18, r25
    5dc2:	a0 81       	ld	r26, Z
    5dc4:	b1 81       	ldd	r27, Z+1	; 0x01
    5dc6:	a2 0f       	add	r26, r18
    5dc8:	b1 1d       	adc	r27, r1
    5dca:	2c 91       	ld	r18, X
    5dcc:	9f 5f       	subi	r25, 0xFF	; 255
    5dce:	89 23       	and	r24, r25
    5dd0:	82 83       	std	Z+2, r24	; 0x02
    5dd2:	2e bd       	out	0x2e, r18	; 46
    5dd4:	2d c0       	rjmp	.+90     	; 0x5e30 <__vector_24+0xf4>
    5dd6:	8c b5       	in	r24, 0x2c	; 44
    5dd8:	8f 77       	andi	r24, 0x7F	; 127
    5dda:	8c bd       	out	0x2c, r24	; 44
    5ddc:	10 92 38 15 	sts	0x1538, r1	; 0x801538 <_spi_active>
    5de0:	a0 91 36 15 	lds	r26, 0x1536	; 0x801536 <_this>
    5de4:	b0 91 37 15 	lds	r27, 0x1537	; 0x801537 <_this+0x1>
    5de8:	ed 91       	ld	r30, X+
    5dea:	fc 91       	ld	r31, X
    5dec:	11 97       	sbiw	r26, 0x01	; 1
    5dee:	30 97       	sbiw	r30, 0x00	; 0
    5df0:	f9 f0       	breq	.+62     	; 0x5e30 <__vector_24+0xf4>
    5df2:	13 96       	adiw	r26, 0x03	; 3
    5df4:	8c 91       	ld	r24, X
    5df6:	13 97       	sbiw	r26, 0x03	; 3
    5df8:	81 30       	cpi	r24, 0x01	; 1
    5dfa:	71 f4       	brne	.+28     	; 0x5e18 <__vector_24+0xdc>
    5dfc:	20 81       	ld	r18, Z
    5dfe:	81 e0       	ldi	r24, 0x01	; 1
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	12 96       	adiw	r26, 0x02	; 2
    5e04:	0c 90       	ld	r0, X
    5e06:	02 c0       	rjmp	.+4      	; 0x5e0c <__vector_24+0xd0>
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	0a 94       	dec	r0
    5e0e:	e2 f7       	brpl	.-8      	; 0x5e08 <__vector_24+0xcc>
    5e10:	80 95       	com	r24
    5e12:	82 23       	and	r24, r18
    5e14:	80 83       	st	Z, r24
    5e16:	0c c0       	rjmp	.+24     	; 0x5e30 <__vector_24+0xf4>
    5e18:	20 81       	ld	r18, Z
    5e1a:	81 e0       	ldi	r24, 0x01	; 1
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
    5e1e:	12 96       	adiw	r26, 0x02	; 2
    5e20:	0c 90       	ld	r0, X
    5e22:	02 c0       	rjmp	.+4      	; 0x5e28 <__vector_24+0xec>
    5e24:	88 0f       	add	r24, r24
    5e26:	99 1f       	adc	r25, r25
    5e28:	0a 94       	dec	r0
    5e2a:	e2 f7       	brpl	.-8      	; 0x5e24 <__vector_24+0xe8>
    5e2c:	82 2b       	or	r24, r18
    5e2e:	80 83       	st	Z, r24
    5e30:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_this>
    5e34:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_this+0x1>
    5e38:	dc 01       	movw	r26, r24
    5e3a:	1a 96       	adiw	r26, 0x0a	; 10
    5e3c:	ed 91       	ld	r30, X+
    5e3e:	fc 91       	ld	r31, X
    5e40:	1b 97       	sbiw	r26, 0x0b	; 11
    5e42:	30 97       	sbiw	r30, 0x00	; 0
    5e44:	09 f0       	breq	.+2      	; 0x5e48 <__vector_24+0x10c>
    5e46:	19 95       	eicall
    5e48:	ff 91       	pop	r31
    5e4a:	ef 91       	pop	r30
    5e4c:	df 91       	pop	r29
    5e4e:	cf 91       	pop	r28
    5e50:	bf 91       	pop	r27
    5e52:	af 91       	pop	r26
    5e54:	9f 91       	pop	r25
    5e56:	8f 91       	pop	r24
    5e58:	7f 91       	pop	r23
    5e5a:	6f 91       	pop	r22
    5e5c:	5f 91       	pop	r21
    5e5e:	4f 91       	pop	r20
    5e60:	3f 91       	pop	r19
    5e62:	2f 91       	pop	r18
    5e64:	0f 90       	pop	r0
    5e66:	0b be       	out	0x3b, r0	; 59
    5e68:	0f 90       	pop	r0
    5e6a:	0f be       	out	0x3f, r0	; 63
    5e6c:	0f 90       	pop	r0
    5e6e:	1f 90       	pop	r1
    5e70:	18 95       	reti

00005e72 <_turn_off>:
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	fc 01       	movw	r30, r24
    5e76:	ee 0f       	add	r30, r30
    5e78:	ff 1f       	adc	r31, r31
    5e7a:	e8 0f       	add	r30, r24
    5e7c:	f9 1f       	adc	r31, r25
    5e7e:	ee 0f       	add	r30, r30
    5e80:	ff 1f       	adc	r31, r31
    5e82:	e7 5c       	subi	r30, 0xC7	; 199
    5e84:	fa 4e       	sbci	r31, 0xEA	; 234
    5e86:	23 81       	ldd	r18, Z+3	; 0x03
    5e88:	21 11       	cpse	r18, r1
    5e8a:	1f c0       	rjmp	.+62     	; 0x5eca <_turn_off+0x58>
    5e8c:	9c 01       	movw	r18, r24
    5e8e:	22 0f       	add	r18, r18
    5e90:	33 1f       	adc	r19, r19
    5e92:	f9 01       	movw	r30, r18
    5e94:	e8 0f       	add	r30, r24
    5e96:	f9 1f       	adc	r31, r25
    5e98:	ee 0f       	add	r30, r30
    5e9a:	ff 1f       	adc	r31, r31
    5e9c:	e7 5c       	subi	r30, 0xC7	; 199
    5e9e:	fa 4e       	sbci	r31, 0xEA	; 234
    5ea0:	a0 81       	ld	r26, Z
    5ea2:	b1 81       	ldd	r27, Z+1	; 0x01
    5ea4:	4c 91       	ld	r20, X
    5ea6:	f9 01       	movw	r30, r18
    5ea8:	e8 0f       	add	r30, r24
    5eaa:	f9 1f       	adc	r31, r25
    5eac:	ee 0f       	add	r30, r30
    5eae:	ff 1f       	adc	r31, r31
    5eb0:	e7 5c       	subi	r30, 0xC7	; 199
    5eb2:	fa 4e       	sbci	r31, 0xEA	; 234
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	02 80       	ldd	r0, Z+2	; 0x02
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <_turn_off+0x4e>
    5ebc:	88 0f       	add	r24, r24
    5ebe:	99 1f       	adc	r25, r25
    5ec0:	0a 94       	dec	r0
    5ec2:	e2 f7       	brpl	.-8      	; 0x5ebc <_turn_off+0x4a>
    5ec4:	84 2b       	or	r24, r20
    5ec6:	8c 93       	st	X, r24
    5ec8:	08 95       	ret
    5eca:	fc 01       	movw	r30, r24
    5ecc:	ee 0f       	add	r30, r30
    5ece:	ff 1f       	adc	r31, r31
    5ed0:	df 01       	movw	r26, r30
    5ed2:	a8 0f       	add	r26, r24
    5ed4:	b9 1f       	adc	r27, r25
    5ed6:	aa 0f       	add	r26, r26
    5ed8:	bb 1f       	adc	r27, r27
    5eda:	a7 5c       	subi	r26, 0xC7	; 199
    5edc:	ba 4e       	sbci	r27, 0xEA	; 234
    5ede:	0d 90       	ld	r0, X+
    5ee0:	bc 91       	ld	r27, X
    5ee2:	a0 2d       	mov	r26, r0
    5ee4:	2c 91       	ld	r18, X
    5ee6:	e8 0f       	add	r30, r24
    5ee8:	f9 1f       	adc	r31, r25
    5eea:	ee 0f       	add	r30, r30
    5eec:	ff 1f       	adc	r31, r31
    5eee:	e7 5c       	subi	r30, 0xC7	; 199
    5ef0:	fa 4e       	sbci	r31, 0xEA	; 234
    5ef2:	81 e0       	ldi	r24, 0x01	; 1
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	02 80       	ldd	r0, Z+2	; 0x02
    5ef8:	02 c0       	rjmp	.+4      	; 0x5efe <_turn_off+0x8c>
    5efa:	88 0f       	add	r24, r24
    5efc:	99 1f       	adc	r25, r25
    5efe:	0a 94       	dec	r0
    5f00:	e2 f7       	brpl	.-8      	; 0x5efa <_turn_off+0x88>
    5f02:	80 95       	com	r24
    5f04:	82 23       	and	r24, r18
    5f06:	8c 93       	st	X, r24
    5f08:	08 95       	ret

00005f0a <_turn_on>:
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	ee 0f       	add	r30, r30
    5f10:	ff 1f       	adc	r31, r31
    5f12:	e8 0f       	add	r30, r24
    5f14:	f9 1f       	adc	r31, r25
    5f16:	ee 0f       	add	r30, r30
    5f18:	ff 1f       	adc	r31, r31
    5f1a:	e7 5c       	subi	r30, 0xC7	; 199
    5f1c:	fa 4e       	sbci	r31, 0xEA	; 234
    5f1e:	23 81       	ldd	r18, Z+3	; 0x03
    5f20:	21 11       	cpse	r18, r1
    5f22:	20 c0       	rjmp	.+64     	; 0x5f64 <_turn_on+0x5a>
    5f24:	9c 01       	movw	r18, r24
    5f26:	22 0f       	add	r18, r18
    5f28:	33 1f       	adc	r19, r19
    5f2a:	f9 01       	movw	r30, r18
    5f2c:	e8 0f       	add	r30, r24
    5f2e:	f9 1f       	adc	r31, r25
    5f30:	ee 0f       	add	r30, r30
    5f32:	ff 1f       	adc	r31, r31
    5f34:	e7 5c       	subi	r30, 0xC7	; 199
    5f36:	fa 4e       	sbci	r31, 0xEA	; 234
    5f38:	a0 81       	ld	r26, Z
    5f3a:	b1 81       	ldd	r27, Z+1	; 0x01
    5f3c:	4c 91       	ld	r20, X
    5f3e:	f9 01       	movw	r30, r18
    5f40:	e8 0f       	add	r30, r24
    5f42:	f9 1f       	adc	r31, r25
    5f44:	ee 0f       	add	r30, r30
    5f46:	ff 1f       	adc	r31, r31
    5f48:	e7 5c       	subi	r30, 0xC7	; 199
    5f4a:	fa 4e       	sbci	r31, 0xEA	; 234
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	02 80       	ldd	r0, Z+2	; 0x02
    5f52:	02 c0       	rjmp	.+4      	; 0x5f58 <_turn_on+0x4e>
    5f54:	88 0f       	add	r24, r24
    5f56:	99 1f       	adc	r25, r25
    5f58:	0a 94       	dec	r0
    5f5a:	e2 f7       	brpl	.-8      	; 0x5f54 <_turn_on+0x4a>
    5f5c:	80 95       	com	r24
    5f5e:	84 23       	and	r24, r20
    5f60:	8c 93       	st	X, r24
    5f62:	08 95       	ret
    5f64:	fc 01       	movw	r30, r24
    5f66:	ee 0f       	add	r30, r30
    5f68:	ff 1f       	adc	r31, r31
    5f6a:	df 01       	movw	r26, r30
    5f6c:	a8 0f       	add	r26, r24
    5f6e:	b9 1f       	adc	r27, r25
    5f70:	aa 0f       	add	r26, r26
    5f72:	bb 1f       	adc	r27, r27
    5f74:	a7 5c       	subi	r26, 0xC7	; 199
    5f76:	ba 4e       	sbci	r27, 0xEA	; 234
    5f78:	0d 90       	ld	r0, X+
    5f7a:	bc 91       	ld	r27, X
    5f7c:	a0 2d       	mov	r26, r0
    5f7e:	2c 91       	ld	r18, X
    5f80:	e8 0f       	add	r30, r24
    5f82:	f9 1f       	adc	r31, r25
    5f84:	ee 0f       	add	r30, r30
    5f86:	ff 1f       	adc	r31, r31
    5f88:	e7 5c       	subi	r30, 0xC7	; 199
    5f8a:	fa 4e       	sbci	r31, 0xEA	; 234
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	02 80       	ldd	r0, Z+2	; 0x02
    5f92:	02 c0       	rjmp	.+4      	; 0x5f98 <_turn_on+0x8e>
    5f94:	88 0f       	add	r24, r24
    5f96:	99 1f       	adc	r25, r25
    5f98:	0a 94       	dec	r0
    5f9a:	e2 f7       	brpl	.-8      	; 0x5f94 <_turn_on+0x8a>
    5f9c:	82 2b       	or	r24, r18
    5f9e:	8c 93       	st	X, r24
    5fa0:	08 95       	ret

00005fa2 <status_leds_slowBlink>:
    5fa2:	cf 93       	push	r28
    5fa4:	df 93       	push	r29
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	fc 01       	movw	r30, r24
    5faa:	ee 0f       	add	r30, r30
    5fac:	ff 1f       	adc	r31, r31
    5fae:	df 01       	movw	r26, r30
    5fb0:	a8 0f       	add	r26, r24
    5fb2:	b9 1f       	adc	r27, r25
    5fb4:	aa 0f       	add	r26, r26
    5fb6:	bb 1f       	adc	r27, r27
    5fb8:	a7 5c       	subi	r26, 0xC7	; 199
    5fba:	ba 4e       	sbci	r27, 0xEA	; 234
    5fbc:	cd 91       	ld	r28, X+
    5fbe:	dc 91       	ld	r29, X
    5fc0:	11 97       	sbiw	r26, 0x01	; 1
    5fc2:	48 81       	ld	r20, Y
    5fc4:	21 e0       	ldi	r18, 0x01	; 1
    5fc6:	30 e0       	ldi	r19, 0x00	; 0
    5fc8:	12 96       	adiw	r26, 0x02	; 2
    5fca:	0c 90       	ld	r0, X
    5fcc:	12 97       	sbiw	r26, 0x02	; 2
    5fce:	02 c0       	rjmp	.+4      	; 0x5fd4 <status_leds_slowBlink+0x32>
    5fd0:	22 0f       	add	r18, r18
    5fd2:	33 1f       	adc	r19, r19
    5fd4:	0a 94       	dec	r0
    5fd6:	e2 f7       	brpl	.-8      	; 0x5fd0 <status_leds_slowBlink+0x2e>
    5fd8:	24 27       	eor	r18, r20
    5fda:	28 83       	st	Y, r18
    5fdc:	fd 01       	movw	r30, r26
    5fde:	81 e0       	ldi	r24, 0x01	; 1
    5fe0:	84 83       	std	Z+4, r24	; 0x04
    5fe2:	df 91       	pop	r29
    5fe4:	cf 91       	pop	r28
    5fe6:	08 95       	ret

00005fe8 <status_leds_fastBlink>:
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	fc 01       	movw	r30, r24
    5ff0:	ee 0f       	add	r30, r30
    5ff2:	ff 1f       	adc	r31, r31
    5ff4:	df 01       	movw	r26, r30
    5ff6:	a8 0f       	add	r26, r24
    5ff8:	b9 1f       	adc	r27, r25
    5ffa:	aa 0f       	add	r26, r26
    5ffc:	bb 1f       	adc	r27, r27
    5ffe:	a7 5c       	subi	r26, 0xC7	; 199
    6000:	ba 4e       	sbci	r27, 0xEA	; 234
    6002:	cd 91       	ld	r28, X+
    6004:	dc 91       	ld	r29, X
    6006:	11 97       	sbiw	r26, 0x01	; 1
    6008:	48 81       	ld	r20, Y
    600a:	21 e0       	ldi	r18, 0x01	; 1
    600c:	30 e0       	ldi	r19, 0x00	; 0
    600e:	12 96       	adiw	r26, 0x02	; 2
    6010:	0c 90       	ld	r0, X
    6012:	12 97       	sbiw	r26, 0x02	; 2
    6014:	02 c0       	rjmp	.+4      	; 0x601a <status_leds_fastBlink+0x32>
    6016:	22 0f       	add	r18, r18
    6018:	33 1f       	adc	r19, r19
    601a:	0a 94       	dec	r0
    601c:	e2 f7       	brpl	.-8      	; 0x6016 <status_leds_fastBlink+0x2e>
    601e:	24 27       	eor	r18, r20
    6020:	28 83       	st	Y, r18
    6022:	fd 01       	movw	r30, r26
    6024:	82 e0       	ldi	r24, 0x02	; 2
    6026:	84 83       	std	Z+4, r24	; 0x04
    6028:	df 91       	pop	r29
    602a:	cf 91       	pop	r28
    602c:	08 95       	ret

0000602e <status_leds_ledOn>:
    602e:	28 2f       	mov	r18, r24
    6030:	30 e0       	ldi	r19, 0x00	; 0
    6032:	f9 01       	movw	r30, r18
    6034:	ee 0f       	add	r30, r30
    6036:	ff 1f       	adc	r31, r31
    6038:	e2 0f       	add	r30, r18
    603a:	f3 1f       	adc	r31, r19
    603c:	ee 0f       	add	r30, r30
    603e:	ff 1f       	adc	r31, r31
    6040:	e7 5c       	subi	r30, 0xC7	; 199
    6042:	fa 4e       	sbci	r31, 0xEA	; 234
    6044:	93 e0       	ldi	r25, 0x03	; 3
    6046:	94 83       	std	Z+4, r25	; 0x04
    6048:	60 cf       	rjmp	.-320    	; 0x5f0a <_turn_on>
    604a:	08 95       	ret

0000604c <status_leds_ledOff>:
    604c:	28 2f       	mov	r18, r24
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	f9 01       	movw	r30, r18
    6052:	ee 0f       	add	r30, r30
    6054:	ff 1f       	adc	r31, r31
    6056:	e2 0f       	add	r30, r18
    6058:	f3 1f       	adc	r31, r19
    605a:	ee 0f       	add	r30, r30
    605c:	ff 1f       	adc	r31, r31
    605e:	e7 5c       	subi	r30, 0xC7	; 199
    6060:	fa 4e       	sbci	r31, 0xEA	; 234
    6062:	94 e0       	ldi	r25, 0x04	; 4
    6064:	94 83       	std	Z+4, r25	; 0x04
    6066:	05 cf       	rjmp	.-502    	; 0x5e72 <_turn_off>
    6068:	08 95       	ret

0000606a <status_leds_longPuls>:
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	fc 01       	movw	r30, r24
    606e:	ee 0f       	add	r30, r30
    6070:	ff 1f       	adc	r31, r31
    6072:	df 01       	movw	r26, r30
    6074:	a8 0f       	add	r26, r24
    6076:	b9 1f       	adc	r27, r25
    6078:	aa 0f       	add	r26, r26
    607a:	bb 1f       	adc	r27, r27
    607c:	a7 5c       	subi	r26, 0xC7	; 199
    607e:	ba 4e       	sbci	r27, 0xEA	; 234
    6080:	24 e0       	ldi	r18, 0x04	; 4
    6082:	15 96       	adiw	r26, 0x05	; 5
    6084:	2c 93       	st	X, r18
    6086:	15 97       	sbiw	r26, 0x05	; 5
    6088:	fd 01       	movw	r30, r26
    608a:	14 82       	std	Z+4, r1	; 0x04
    608c:	08 95       	ret

0000608e <status_leds_shortPuls>:
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	fc 01       	movw	r30, r24
    6092:	ee 0f       	add	r30, r30
    6094:	ff 1f       	adc	r31, r31
    6096:	df 01       	movw	r26, r30
    6098:	a8 0f       	add	r26, r24
    609a:	b9 1f       	adc	r27, r25
    609c:	aa 0f       	add	r26, r26
    609e:	bb 1f       	adc	r27, r27
    60a0:	a7 5c       	subi	r26, 0xC7	; 199
    60a2:	ba 4e       	sbci	r27, 0xEA	; 234
    60a4:	21 e0       	ldi	r18, 0x01	; 1
    60a6:	15 96       	adiw	r26, 0x05	; 5
    60a8:	2c 93       	st	X, r18
    60aa:	15 97       	sbiw	r26, 0x05	; 5
    60ac:	fd 01       	movw	r30, r26
    60ae:	14 82       	std	Z+4, r1	; 0x04
    60b0:	08 95       	ret

000060b2 <_initTwiInterface>:
    60b2:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <_twiIsInitiated>
    60b6:	81 11       	cpse	r24, r1
    60b8:	0c c0       	rjmp	.+24     	; 0x60d2 <_initTwiInterface+0x20>
    60ba:	8c e0       	ldi	r24, 0x0C	; 12
    60bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    60c0:	8f ef       	ldi	r24, 0xFF	; 255
    60c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    60c6:	84 e0       	ldi	r24, 0x04	; 4
    60c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    60cc:	81 e0       	ldi	r24, 0x01	; 1
    60ce:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <_twiIsInitiated>
    60d2:	08 95       	ret

000060d4 <twiCreate>:
    60d4:	af 92       	push	r10
    60d6:	bf 92       	push	r11
    60d8:	cf 92       	push	r12
    60da:	df 92       	push	r13
    60dc:	ef 92       	push	r14
    60de:	ff 92       	push	r15
    60e0:	0f 93       	push	r16
    60e2:	1f 93       	push	r17
    60e4:	cf 93       	push	r28
    60e6:	df 93       	push	r29
    60e8:	a8 2e       	mov	r10, r24
    60ea:	b6 2e       	mov	r11, r22
    60ec:	69 01       	movw	r12, r18
    60ee:	7a 01       	movw	r14, r20
    60f0:	84 e0       	ldi	r24, 0x04	; 4
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	46 d4       	rcall	.+2188   	; 0x6982 <malloc>
    60f6:	ec 01       	movw	r28, r24
    60f8:	89 2b       	or	r24, r25
    60fa:	61 f1       	breq	.+88     	; 0x6154 <twiCreate+0x80>
    60fc:	a8 82       	st	Y, r10
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	b8 12       	cpse	r11, r24
    6102:	12 c0       	rjmp	.+36     	; 0x6128 <twiCreate+0x54>
    6104:	c7 01       	movw	r24, r14
    6106:	b6 01       	movw	r22, r12
    6108:	20 ea       	ldi	r18, 0xA0	; 160
    610a:	36 e8       	ldi	r19, 0x86	; 134
    610c:	41 e0       	ldi	r20, 0x01	; 1
    610e:	50 e0       	ldi	r21, 0x00	; 0
    6110:	c7 d3       	rcall	.+1934   	; 0x68a0 <__udivmodsi4>
    6112:	da 01       	movw	r26, r20
    6114:	c9 01       	movw	r24, r18
    6116:	40 97       	sbiw	r24, 0x10	; 16
    6118:	a1 09       	sbc	r26, r1
    611a:	b1 09       	sbc	r27, r1
    611c:	b6 95       	lsr	r27
    611e:	a7 95       	ror	r26
    6120:	97 95       	ror	r25
    6122:	87 95       	ror	r24
    6124:	89 83       	std	Y+1, r24	; 0x01
    6126:	11 c0       	rjmp	.+34     	; 0x614a <twiCreate+0x76>
    6128:	c7 01       	movw	r24, r14
    612a:	b6 01       	movw	r22, r12
    612c:	20 e8       	ldi	r18, 0x80	; 128
    612e:	3a e1       	ldi	r19, 0x1A	; 26
    6130:	46 e0       	ldi	r20, 0x06	; 6
    6132:	50 e0       	ldi	r21, 0x00	; 0
    6134:	b5 d3       	rcall	.+1898   	; 0x68a0 <__udivmodsi4>
    6136:	da 01       	movw	r26, r20
    6138:	c9 01       	movw	r24, r18
    613a:	40 97       	sbiw	r24, 0x10	; 16
    613c:	a1 09       	sbc	r26, r1
    613e:	b1 09       	sbc	r27, r1
    6140:	b6 95       	lsr	r27
    6142:	a7 95       	ror	r26
    6144:	97 95       	ror	r25
    6146:	87 95       	ror	r24
    6148:	89 83       	std	Y+1, r24	; 0x01
    614a:	1b 83       	std	Y+3, r17	; 0x03
    614c:	0a 83       	std	Y+2, r16	; 0x02
    614e:	8c 2f       	mov	r24, r28
    6150:	9d 2f       	mov	r25, r29
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <twiCreate+0x84>
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	df 91       	pop	r29
    615a:	cf 91       	pop	r28
    615c:	1f 91       	pop	r17
    615e:	0f 91       	pop	r16
    6160:	ff 90       	pop	r15
    6162:	ef 90       	pop	r14
    6164:	df 90       	pop	r13
    6166:	cf 90       	pop	r12
    6168:	bf 90       	pop	r11
    616a:	af 90       	pop	r10
    616c:	08 95       	ret

0000616e <twiIsBusy>:
    616e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6172:	81 70       	andi	r24, 0x01	; 1
    6174:	08 95       	ret

00006176 <twiTransmit>:
    6176:	ff 92       	push	r15
    6178:	0f 93       	push	r16
    617a:	1f 93       	push	r17
    617c:	cf 93       	push	r28
    617e:	df 93       	push	r29
    6180:	00 97       	sbiw	r24, 0x00	; 0
    6182:	d1 f1       	breq	.+116    	; 0x61f8 <twiTransmit+0x82>
    6184:	4a 30       	cpi	r20, 0x0A	; 10
    6186:	d0 f5       	brcc	.+116    	; 0x61fc <twiTransmit+0x86>
    6188:	f4 2e       	mov	r15, r20
    618a:	8b 01       	movw	r16, r22
    618c:	ec 01       	movw	r28, r24
    618e:	ef df       	rcall	.-34     	; 0x616e <twiIsBusy>
    6190:	81 11       	cpse	r24, r1
    6192:	36 c0       	rjmp	.+108    	; 0x6200 <twiTransmit+0x8a>
    6194:	80 91 52 15 	lds	r24, 0x1552	; 0x801552 <_twiCurrentHandler>
    6198:	90 91 53 15 	lds	r25, 0x1553	; 0x801553 <_twiCurrentHandler+0x1>
    619c:	c8 17       	cp	r28, r24
    619e:	d9 07       	cpc	r29, r25
    61a0:	41 f0       	breq	.+16     	; 0x61b2 <twiTransmit+0x3c>
    61a2:	87 df       	rcall	.-242    	; 0x60b2 <_initTwiInterface>
    61a4:	89 81       	ldd	r24, Y+1	; 0x01
    61a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    61aa:	d0 93 53 15 	sts	0x1553, r29	; 0x801553 <_twiCurrentHandler+0x1>
    61ae:	c0 93 52 15 	sts	0x1552, r28	; 0x801552 <_twiCurrentHandler>
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	8f 0d       	add	r24, r15
    61b6:	80 93 54 15 	sts	0x1554, r24	; 0x801554 <_twiMessageLen>
    61ba:	88 81       	ld	r24, Y
    61bc:	88 0f       	add	r24, r24
    61be:	80 93 55 15 	sts	0x1555, r24	; 0x801555 <_twiMessageBuffer>
    61c2:	ff 20       	and	r15, r15
    61c4:	89 f0       	breq	.+34     	; 0x61e8 <twiTransmit+0x72>
    61c6:	f8 01       	movw	r30, r16
    61c8:	a6 e5       	ldi	r26, 0x56	; 86
    61ca:	b5 e1       	ldi	r27, 0x15	; 21
    61cc:	4f ef       	ldi	r20, 0xFF	; 255
    61ce:	4f 0d       	add	r20, r15
    61d0:	64 2f       	mov	r22, r20
    61d2:	70 e0       	ldi	r23, 0x00	; 0
    61d4:	cb 01       	movw	r24, r22
    61d6:	01 96       	adiw	r24, 0x01	; 1
    61d8:	b8 01       	movw	r22, r16
    61da:	68 0f       	add	r22, r24
    61dc:	79 1f       	adc	r23, r25
    61de:	81 91       	ld	r24, Z+
    61e0:	8d 93       	st	X+, r24
    61e2:	e6 17       	cp	r30, r22
    61e4:	f7 07       	cpc	r31, r23
    61e6:	d9 f7       	brne	.-10     	; 0x61de <twiTransmit+0x68>
    61e8:	88 ef       	ldi	r24, 0xF8	; 248
    61ea:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    61ee:	85 ea       	ldi	r24, 0xA5	; 165
    61f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    61f4:	84 e0       	ldi	r24, 0x04	; 4
    61f6:	05 c0       	rjmp	.+10     	; 0x6202 <twiTransmit+0x8c>
    61f8:	86 e0       	ldi	r24, 0x06	; 6
    61fa:	03 c0       	rjmp	.+6      	; 0x6202 <twiTransmit+0x8c>
    61fc:	87 e0       	ldi	r24, 0x07	; 7
    61fe:	01 c0       	rjmp	.+2      	; 0x6202 <twiTransmit+0x8c>
    6200:	82 e0       	ldi	r24, 0x02	; 2
    6202:	df 91       	pop	r29
    6204:	cf 91       	pop	r28
    6206:	1f 91       	pop	r17
    6208:	0f 91       	pop	r16
    620a:	ff 90       	pop	r15
    620c:	08 95       	ret

0000620e <twiReceive>:
    620e:	1f 93       	push	r17
    6210:	cf 93       	push	r28
    6212:	df 93       	push	r29
    6214:	00 97       	sbiw	r24, 0x00	; 0
    6216:	29 f1       	breq	.+74     	; 0x6262 <twiReceive+0x54>
    6218:	6b 30       	cpi	r22, 0x0B	; 11
    621a:	28 f5       	brcc	.+74     	; 0x6266 <twiReceive+0x58>
    621c:	16 2f       	mov	r17, r22
    621e:	ec 01       	movw	r28, r24
    6220:	a6 df       	rcall	.-180    	; 0x616e <twiIsBusy>
    6222:	81 11       	cpse	r24, r1
    6224:	22 c0       	rjmp	.+68     	; 0x626a <twiReceive+0x5c>
    6226:	80 91 52 15 	lds	r24, 0x1552	; 0x801552 <_twiCurrentHandler>
    622a:	90 91 53 15 	lds	r25, 0x1553	; 0x801553 <_twiCurrentHandler+0x1>
    622e:	c8 17       	cp	r28, r24
    6230:	d9 07       	cpc	r29, r25
    6232:	41 f0       	breq	.+16     	; 0x6244 <twiReceive+0x36>
    6234:	3e df       	rcall	.-388    	; 0x60b2 <_initTwiInterface>
    6236:	89 81       	ldd	r24, Y+1	; 0x01
    6238:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    623c:	d0 93 53 15 	sts	0x1553, r29	; 0x801553 <_twiCurrentHandler+0x1>
    6240:	c0 93 52 15 	sts	0x1552, r28	; 0x801552 <_twiCurrentHandler>
    6244:	10 93 54 15 	sts	0x1554, r17	; 0x801554 <_twiMessageLen>
    6248:	88 81       	ld	r24, Y
    624a:	88 0f       	add	r24, r24
    624c:	81 60       	ori	r24, 0x01	; 1
    624e:	80 93 55 15 	sts	0x1555, r24	; 0x801555 <_twiMessageBuffer>
    6252:	88 ef       	ldi	r24, 0xF8	; 248
    6254:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6258:	85 ea       	ldi	r24, 0xA5	; 165
    625a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    625e:	85 e0       	ldi	r24, 0x05	; 5
    6260:	05 c0       	rjmp	.+10     	; 0x626c <twiReceive+0x5e>
    6262:	86 e0       	ldi	r24, 0x06	; 6
    6264:	03 c0       	rjmp	.+6      	; 0x626c <twiReceive+0x5e>
    6266:	87 e0       	ldi	r24, 0x07	; 7
    6268:	01 c0       	rjmp	.+2      	; 0x626c <twiReceive+0x5e>
    626a:	82 e0       	ldi	r24, 0x02	; 2
    626c:	df 91       	pop	r29
    626e:	cf 91       	pop	r28
    6270:	1f 91       	pop	r17
    6272:	08 95       	ret

00006274 <__vector_39>:
    6274:	1f 92       	push	r1
    6276:	0f 92       	push	r0
    6278:	0f b6       	in	r0, 0x3f	; 63
    627a:	0f 92       	push	r0
    627c:	11 24       	eor	r1, r1
    627e:	0b b6       	in	r0, 0x3b	; 59
    6280:	0f 92       	push	r0
    6282:	2f 93       	push	r18
    6284:	3f 93       	push	r19
    6286:	4f 93       	push	r20
    6288:	5f 93       	push	r21
    628a:	6f 93       	push	r22
    628c:	7f 93       	push	r23
    628e:	8f 93       	push	r24
    6290:	9f 93       	push	r25
    6292:	af 93       	push	r26
    6294:	bf 93       	push	r27
    6296:	ef 93       	push	r30
    6298:	ff 93       	push	r31
    629a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    629e:	8e 2f       	mov	r24, r30
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	fc 01       	movw	r30, r24
    62a4:	38 97       	sbiw	r30, 0x08	; 8
    62a6:	e1 35       	cpi	r30, 0x51	; 81
    62a8:	f1 05       	cpc	r31, r1
    62aa:	08 f0       	brcs	.+2      	; 0x62ae <__vector_39+0x3a>
    62ac:	75 c0       	rjmp	.+234    	; 0x6398 <__vector_39+0x124>
    62ae:	88 27       	eor	r24, r24
    62b0:	e4 58       	subi	r30, 0x84	; 132
    62b2:	ff 4f       	sbci	r31, 0xFF	; 255
    62b4:	8f 4f       	sbci	r24, 0xFF	; 255
    62b6:	16 c3       	rjmp	.+1580   	; 0x68e4 <__tablejump2__>
    62b8:	10 92 51 15 	sts	0x1551, r1	; 0x801551 <_index.1885>
    62bc:	e0 91 51 15 	lds	r30, 0x1551	; 0x801551 <_index.1885>
    62c0:	80 91 54 15 	lds	r24, 0x1554	; 0x801554 <_twiMessageLen>
    62c4:	e8 17       	cp	r30, r24
    62c6:	70 f4       	brcc	.+28     	; 0x62e4 <__vector_39+0x70>
    62c8:	81 e0       	ldi	r24, 0x01	; 1
    62ca:	8e 0f       	add	r24, r30
    62cc:	80 93 51 15 	sts	0x1551, r24	; 0x801551 <_index.1885>
    62d0:	f0 e0       	ldi	r31, 0x00	; 0
    62d2:	eb 5a       	subi	r30, 0xAB	; 171
    62d4:	fa 4e       	sbci	r31, 0xEA	; 234
    62d6:	80 81       	ld	r24, Z
    62d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    62dc:	85 e8       	ldi	r24, 0x85	; 133
    62de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    62e2:	72 c0       	rjmp	.+228    	; 0x63c8 <__vector_39+0x154>
    62e4:	84 e9       	ldi	r24, 0x94	; 148
    62e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    62ea:	80 91 52 15 	lds	r24, 0x1552	; 0x801552 <_twiCurrentHandler>
    62ee:	90 91 53 15 	lds	r25, 0x1553	; 0x801553 <_twiCurrentHandler+0x1>
    62f2:	dc 01       	movw	r26, r24
    62f4:	12 96       	adiw	r26, 0x02	; 2
    62f6:	ed 91       	ld	r30, X+
    62f8:	fc 91       	ld	r31, X
    62fa:	13 97       	sbiw	r26, 0x03	; 3
    62fc:	30 97       	sbiw	r30, 0x00	; 0
    62fe:	09 f4       	brne	.+2      	; 0x6302 <__vector_39+0x8e>
    6300:	63 c0       	rjmp	.+198    	; 0x63c8 <__vector_39+0x154>
    6302:	20 e0       	ldi	r18, 0x00	; 0
    6304:	40 e0       	ldi	r20, 0x00	; 0
    6306:	50 e0       	ldi	r21, 0x00	; 0
    6308:	64 e0       	ldi	r22, 0x04	; 4
    630a:	19 95       	eicall
    630c:	5d c0       	rjmp	.+186    	; 0x63c8 <__vector_39+0x154>
    630e:	e0 91 51 15 	lds	r30, 0x1551	; 0x801551 <_index.1885>
    6312:	81 e0       	ldi	r24, 0x01	; 1
    6314:	8e 0f       	add	r24, r30
    6316:	80 93 51 15 	sts	0x1551, r24	; 0x801551 <_index.1885>
    631a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    631e:	f0 e0       	ldi	r31, 0x00	; 0
    6320:	eb 5a       	subi	r30, 0xAB	; 171
    6322:	fa 4e       	sbci	r31, 0xEA	; 234
    6324:	80 83       	st	Z, r24
    6326:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    632a:	80 34       	cpi	r24, 0x40	; 64
    632c:	11 f4       	brne	.+4      	; 0x6332 <__vector_39+0xbe>
    632e:	10 92 51 15 	sts	0x1551, r1	; 0x801551 <_index.1885>
    6332:	20 91 51 15 	lds	r18, 0x1551	; 0x801551 <_index.1885>
    6336:	30 e0       	ldi	r19, 0x00	; 0
    6338:	80 91 54 15 	lds	r24, 0x1554	; 0x801554 <_twiMessageLen>
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	01 97       	sbiw	r24, 0x01	; 1
    6340:	28 17       	cp	r18, r24
    6342:	39 07       	cpc	r19, r25
    6344:	24 f4       	brge	.+8      	; 0x634e <__vector_39+0xda>
    6346:	85 ec       	ldi	r24, 0xC5	; 197
    6348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    634c:	3d c0       	rjmp	.+122    	; 0x63c8 <__vector_39+0x154>
    634e:	85 e8       	ldi	r24, 0x85	; 133
    6350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6354:	39 c0       	rjmp	.+114    	; 0x63c8 <__vector_39+0x154>
    6356:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    635a:	e0 91 51 15 	lds	r30, 0x1551	; 0x801551 <_index.1885>
    635e:	f0 e0       	ldi	r31, 0x00	; 0
    6360:	eb 5a       	subi	r30, 0xAB	; 171
    6362:	fa 4e       	sbci	r31, 0xEA	; 234
    6364:	80 83       	st	Z, r24
    6366:	84 e9       	ldi	r24, 0x94	; 148
    6368:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    636c:	80 91 52 15 	lds	r24, 0x1552	; 0x801552 <_twiCurrentHandler>
    6370:	90 91 53 15 	lds	r25, 0x1553	; 0x801553 <_twiCurrentHandler+0x1>
    6374:	dc 01       	movw	r26, r24
    6376:	12 96       	adiw	r26, 0x02	; 2
    6378:	ed 91       	ld	r30, X+
    637a:	fc 91       	ld	r31, X
    637c:	13 97       	sbiw	r26, 0x03	; 3
    637e:	30 97       	sbiw	r30, 0x00	; 0
    6380:	19 f1       	breq	.+70     	; 0x63c8 <__vector_39+0x154>
    6382:	20 91 54 15 	lds	r18, 0x1554	; 0x801554 <_twiMessageLen>
    6386:	45 e5       	ldi	r20, 0x55	; 85
    6388:	55 e1       	ldi	r21, 0x15	; 21
    638a:	65 e0       	ldi	r22, 0x05	; 5
    638c:	19 95       	eicall
    638e:	1c c0       	rjmp	.+56     	; 0x63c8 <__vector_39+0x154>
    6390:	85 ea       	ldi	r24, 0xA5	; 165
    6392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6396:	18 c0       	rjmp	.+48     	; 0x63c8 <__vector_39+0x154>
    6398:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    639c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    63a0:	84 e0       	ldi	r24, 0x04	; 4
    63a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    63a6:	80 91 52 15 	lds	r24, 0x1552	; 0x801552 <_twiCurrentHandler>
    63aa:	90 91 53 15 	lds	r25, 0x1553	; 0x801553 <_twiCurrentHandler+0x1>
    63ae:	dc 01       	movw	r26, r24
    63b0:	12 96       	adiw	r26, 0x02	; 2
    63b2:	ed 91       	ld	r30, X+
    63b4:	fc 91       	ld	r31, X
    63b6:	13 97       	sbiw	r26, 0x03	; 3
    63b8:	30 97       	sbiw	r30, 0x00	; 0
    63ba:	31 f0       	breq	.+12     	; 0x63c8 <__vector_39+0x154>
    63bc:	20 e0       	ldi	r18, 0x00	; 0
    63be:	40 e0       	ldi	r20, 0x00	; 0
    63c0:	50 e0       	ldi	r21, 0x00	; 0
    63c2:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    63c6:	19 95       	eicall
    63c8:	ff 91       	pop	r31
    63ca:	ef 91       	pop	r30
    63cc:	bf 91       	pop	r27
    63ce:	af 91       	pop	r26
    63d0:	9f 91       	pop	r25
    63d2:	8f 91       	pop	r24
    63d4:	7f 91       	pop	r23
    63d6:	6f 91       	pop	r22
    63d8:	5f 91       	pop	r21
    63da:	4f 91       	pop	r20
    63dc:	3f 91       	pop	r19
    63de:	2f 91       	pop	r18
    63e0:	0f 90       	pop	r0
    63e2:	0b be       	out	0x3b, r0	; 59
    63e4:	0f 90       	pop	r0
    63e6:	0f be       	out	0x3f, r0	; 63
    63e8:	0f 90       	pop	r0
    63ea:	1f 90       	pop	r1
    63ec:	18 95       	reti

000063ee <fifo_init>:
    63ee:	fc 01       	movw	r30, r24
    63f0:	41 11       	cpse	r20, r1
    63f2:	01 c0       	rjmp	.+2      	; 0x63f6 <fifo_init+0x8>
    63f4:	e7 d3       	rcall	.+1998   	; 0x6bc4 <abort>
    63f6:	84 2f       	mov	r24, r20
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	9c 01       	movw	r18, r24
    63fc:	21 50       	subi	r18, 0x01	; 1
    63fe:	31 09       	sbc	r19, r1
    6400:	82 23       	and	r24, r18
    6402:	93 23       	and	r25, r19
    6404:	89 2b       	or	r24, r25
    6406:	09 f0       	breq	.+2      	; 0x640a <fifo_init+0x1c>
    6408:	dd d3       	rcall	.+1978   	; 0x6bc4 <abort>
    640a:	41 38       	cpi	r20, 0x81	; 129
    640c:	08 f0       	brcs	.+2      	; 0x6410 <fifo_init+0x22>
    640e:	da d3       	rcall	.+1972   	; 0x6bc4 <abort>
    6410:	12 82       	std	Z+2, r1	; 0x02
    6412:	13 82       	std	Z+3, r1	; 0x03
    6414:	44 83       	std	Z+4, r20	; 0x04
    6416:	44 0f       	add	r20, r20
    6418:	41 50       	subi	r20, 0x01	; 1
    641a:	45 83       	std	Z+5, r20	; 0x05
    641c:	71 83       	std	Z+1, r23	; 0x01
    641e:	60 83       	st	Z, r22
    6420:	80 e0       	ldi	r24, 0x00	; 0
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	08 95       	ret

00006426 <__subsf3>:
    6426:	50 58       	subi	r21, 0x80	; 128

00006428 <__addsf3>:
    6428:	bb 27       	eor	r27, r27
    642a:	aa 27       	eor	r26, r26
    642c:	13 d0       	rcall	.+38     	; 0x6454 <__addsf3x>
    642e:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <__fp_round>
    6432:	0e 94 45 21 	call	0x428a	; 0x428a <__fp_pscA>
    6436:	38 f0       	brcs	.+14     	; 0x6446 <__addsf3+0x1e>
    6438:	0e 94 4c 21 	call	0x4298	; 0x4298 <__fp_pscB>
    643c:	20 f0       	brcs	.+8      	; 0x6446 <__addsf3+0x1e>
    643e:	39 f4       	brne	.+14     	; 0x644e <__addsf3+0x26>
    6440:	9f 3f       	cpi	r25, 0xFF	; 255
    6442:	19 f4       	brne	.+6      	; 0x644a <__addsf3+0x22>
    6444:	26 f4       	brtc	.+8      	; 0x644e <__addsf3+0x26>
    6446:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__fp_nan>
    644a:	0e f4       	brtc	.+2      	; 0x644e <__addsf3+0x26>
    644c:	e0 95       	com	r30
    644e:	e7 fb       	bst	r30, 7
    6450:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__fp_inf>

00006454 <__addsf3x>:
    6454:	e9 2f       	mov	r30, r25
    6456:	0e 94 64 21 	call	0x42c8	; 0x42c8 <__fp_split3>
    645a:	58 f3       	brcs	.-42     	; 0x6432 <__addsf3+0xa>
    645c:	ba 17       	cp	r27, r26
    645e:	62 07       	cpc	r22, r18
    6460:	73 07       	cpc	r23, r19
    6462:	84 07       	cpc	r24, r20
    6464:	95 07       	cpc	r25, r21
    6466:	20 f0       	brcs	.+8      	; 0x6470 <__addsf3x+0x1c>
    6468:	79 f4       	brne	.+30     	; 0x6488 <__addsf3x+0x34>
    646a:	a6 f5       	brtc	.+104    	; 0x64d4 <__addsf3x+0x80>
    646c:	0c 94 86 21 	jmp	0x430c	; 0x430c <__fp_zero>
    6470:	0e f4       	brtc	.+2      	; 0x6474 <__addsf3x+0x20>
    6472:	e0 95       	com	r30
    6474:	0b 2e       	mov	r0, r27
    6476:	ba 2f       	mov	r27, r26
    6478:	a0 2d       	mov	r26, r0
    647a:	0b 01       	movw	r0, r22
    647c:	b9 01       	movw	r22, r18
    647e:	90 01       	movw	r18, r0
    6480:	0c 01       	movw	r0, r24
    6482:	ca 01       	movw	r24, r20
    6484:	a0 01       	movw	r20, r0
    6486:	11 24       	eor	r1, r1
    6488:	ff 27       	eor	r31, r31
    648a:	59 1b       	sub	r21, r25
    648c:	99 f0       	breq	.+38     	; 0x64b4 <__addsf3x+0x60>
    648e:	59 3f       	cpi	r21, 0xF9	; 249
    6490:	50 f4       	brcc	.+20     	; 0x64a6 <__addsf3x+0x52>
    6492:	50 3e       	cpi	r21, 0xE0	; 224
    6494:	68 f1       	brcs	.+90     	; 0x64f0 <__addsf3x+0x9c>
    6496:	1a 16       	cp	r1, r26
    6498:	f0 40       	sbci	r31, 0x00	; 0
    649a:	a2 2f       	mov	r26, r18
    649c:	23 2f       	mov	r18, r19
    649e:	34 2f       	mov	r19, r20
    64a0:	44 27       	eor	r20, r20
    64a2:	58 5f       	subi	r21, 0xF8	; 248
    64a4:	f3 cf       	rjmp	.-26     	; 0x648c <__addsf3x+0x38>
    64a6:	46 95       	lsr	r20
    64a8:	37 95       	ror	r19
    64aa:	27 95       	ror	r18
    64ac:	a7 95       	ror	r26
    64ae:	f0 40       	sbci	r31, 0x00	; 0
    64b0:	53 95       	inc	r21
    64b2:	c9 f7       	brne	.-14     	; 0x64a6 <__addsf3x+0x52>
    64b4:	7e f4       	brtc	.+30     	; 0x64d4 <__addsf3x+0x80>
    64b6:	1f 16       	cp	r1, r31
    64b8:	ba 0b       	sbc	r27, r26
    64ba:	62 0b       	sbc	r22, r18
    64bc:	73 0b       	sbc	r23, r19
    64be:	84 0b       	sbc	r24, r20
    64c0:	ba f0       	brmi	.+46     	; 0x64f0 <__addsf3x+0x9c>
    64c2:	91 50       	subi	r25, 0x01	; 1
    64c4:	a1 f0       	breq	.+40     	; 0x64ee <__addsf3x+0x9a>
    64c6:	ff 0f       	add	r31, r31
    64c8:	bb 1f       	adc	r27, r27
    64ca:	66 1f       	adc	r22, r22
    64cc:	77 1f       	adc	r23, r23
    64ce:	88 1f       	adc	r24, r24
    64d0:	c2 f7       	brpl	.-16     	; 0x64c2 <__addsf3x+0x6e>
    64d2:	0e c0       	rjmp	.+28     	; 0x64f0 <__addsf3x+0x9c>
    64d4:	ba 0f       	add	r27, r26
    64d6:	62 1f       	adc	r22, r18
    64d8:	73 1f       	adc	r23, r19
    64da:	84 1f       	adc	r24, r20
    64dc:	48 f4       	brcc	.+18     	; 0x64f0 <__addsf3x+0x9c>
    64de:	87 95       	ror	r24
    64e0:	77 95       	ror	r23
    64e2:	67 95       	ror	r22
    64e4:	b7 95       	ror	r27
    64e6:	f7 95       	ror	r31
    64e8:	9e 3f       	cpi	r25, 0xFE	; 254
    64ea:	08 f0       	brcs	.+2      	; 0x64ee <__addsf3x+0x9a>
    64ec:	b0 cf       	rjmp	.-160    	; 0x644e <__addsf3+0x26>
    64ee:	93 95       	inc	r25
    64f0:	88 0f       	add	r24, r24
    64f2:	08 f0       	brcs	.+2      	; 0x64f6 <__addsf3x+0xa2>
    64f4:	99 27       	eor	r25, r25
    64f6:	ee 0f       	add	r30, r30
    64f8:	97 95       	ror	r25
    64fa:	87 95       	ror	r24
    64fc:	08 95       	ret

000064fe <floor>:
    64fe:	3c d0       	rcall	.+120    	; 0x6578 <__fp_trunc>
    6500:	88 f0       	brcs	.+34     	; 0x6524 <floor+0x26>
    6502:	9f 37       	cpi	r25, 0x7F	; 127
    6504:	48 f4       	brcc	.+18     	; 0x6518 <floor+0x1a>
    6506:	91 11       	cpse	r25, r1
    6508:	16 f0       	brts	.+4      	; 0x650e <floor+0x10>
    650a:	0c 94 87 21 	jmp	0x430e	; 0x430e <__fp_szero>
    650e:	60 e0       	ldi	r22, 0x00	; 0
    6510:	70 e0       	ldi	r23, 0x00	; 0
    6512:	80 e8       	ldi	r24, 0x80	; 128
    6514:	9f eb       	ldi	r25, 0xBF	; 191
    6516:	08 95       	ret
    6518:	26 f4       	brtc	.+8      	; 0x6522 <floor+0x24>
    651a:	1b 16       	cp	r1, r27
    651c:	61 1d       	adc	r22, r1
    651e:	71 1d       	adc	r23, r1
    6520:	81 1d       	adc	r24, r1
    6522:	01 c0       	rjmp	.+2      	; 0x6526 <__fp_mintl>
    6524:	1b c0       	rjmp	.+54     	; 0x655c <__fp_mpack>

00006526 <__fp_mintl>:
    6526:	88 23       	and	r24, r24
    6528:	71 f4       	brne	.+28     	; 0x6546 <__fp_mintl+0x20>
    652a:	77 23       	and	r23, r23
    652c:	21 f0       	breq	.+8      	; 0x6536 <__fp_mintl+0x10>
    652e:	98 50       	subi	r25, 0x08	; 8
    6530:	87 2b       	or	r24, r23
    6532:	76 2f       	mov	r23, r22
    6534:	07 c0       	rjmp	.+14     	; 0x6544 <__fp_mintl+0x1e>
    6536:	66 23       	and	r22, r22
    6538:	11 f4       	brne	.+4      	; 0x653e <__fp_mintl+0x18>
    653a:	99 27       	eor	r25, r25
    653c:	0d c0       	rjmp	.+26     	; 0x6558 <__fp_mintl+0x32>
    653e:	90 51       	subi	r25, 0x10	; 16
    6540:	86 2b       	or	r24, r22
    6542:	70 e0       	ldi	r23, 0x00	; 0
    6544:	60 e0       	ldi	r22, 0x00	; 0
    6546:	2a f0       	brmi	.+10     	; 0x6552 <__fp_mintl+0x2c>
    6548:	9a 95       	dec	r25
    654a:	66 0f       	add	r22, r22
    654c:	77 1f       	adc	r23, r23
    654e:	88 1f       	adc	r24, r24
    6550:	da f7       	brpl	.-10     	; 0x6548 <__fp_mintl+0x22>
    6552:	88 0f       	add	r24, r24
    6554:	96 95       	lsr	r25
    6556:	87 95       	ror	r24
    6558:	97 f9       	bld	r25, 7
    655a:	08 95       	ret

0000655c <__fp_mpack>:
    655c:	9f 3f       	cpi	r25, 0xFF	; 255
    655e:	31 f0       	breq	.+12     	; 0x656c <__fp_mpack_finite+0xc>

00006560 <__fp_mpack_finite>:
    6560:	91 50       	subi	r25, 0x01	; 1
    6562:	20 f4       	brcc	.+8      	; 0x656c <__fp_mpack_finite+0xc>
    6564:	87 95       	ror	r24
    6566:	77 95       	ror	r23
    6568:	67 95       	ror	r22
    656a:	b7 95       	ror	r27
    656c:	88 0f       	add	r24, r24
    656e:	91 1d       	adc	r25, r1
    6570:	96 95       	lsr	r25
    6572:	87 95       	ror	r24
    6574:	97 f9       	bld	r25, 7
    6576:	08 95       	ret

00006578 <__fp_trunc>:
    6578:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fp_splitA>
    657c:	a0 f0       	brcs	.+40     	; 0x65a6 <__fp_trunc+0x2e>
    657e:	be e7       	ldi	r27, 0x7E	; 126
    6580:	b9 17       	cp	r27, r25
    6582:	88 f4       	brcc	.+34     	; 0x65a6 <__fp_trunc+0x2e>
    6584:	bb 27       	eor	r27, r27
    6586:	9f 38       	cpi	r25, 0x8F	; 143
    6588:	60 f4       	brcc	.+24     	; 0x65a2 <__fp_trunc+0x2a>
    658a:	16 16       	cp	r1, r22
    658c:	b1 1d       	adc	r27, r1
    658e:	67 2f       	mov	r22, r23
    6590:	78 2f       	mov	r23, r24
    6592:	88 27       	eor	r24, r24
    6594:	98 5f       	subi	r25, 0xF8	; 248
    6596:	f7 cf       	rjmp	.-18     	; 0x6586 <__fp_trunc+0xe>
    6598:	86 95       	lsr	r24
    659a:	77 95       	ror	r23
    659c:	67 95       	ror	r22
    659e:	b1 1d       	adc	r27, r1
    65a0:	93 95       	inc	r25
    65a2:	96 39       	cpi	r25, 0x96	; 150
    65a4:	c8 f3       	brcs	.-14     	; 0x6598 <__fp_trunc+0x20>
    65a6:	08 95       	ret

000065a8 <pow>:
    65a8:	fa 01       	movw	r30, r20
    65aa:	ee 0f       	add	r30, r30
    65ac:	ff 1f       	adc	r31, r31
    65ae:	30 96       	adiw	r30, 0x00	; 0
    65b0:	21 05       	cpc	r18, r1
    65b2:	31 05       	cpc	r19, r1
    65b4:	a1 f1       	breq	.+104    	; 0x661e <pow+0x76>
    65b6:	61 15       	cp	r22, r1
    65b8:	71 05       	cpc	r23, r1
    65ba:	61 f4       	brne	.+24     	; 0x65d4 <pow+0x2c>
    65bc:	80 38       	cpi	r24, 0x80	; 128
    65be:	bf e3       	ldi	r27, 0x3F	; 63
    65c0:	9b 07       	cpc	r25, r27
    65c2:	49 f1       	breq	.+82     	; 0x6616 <pow+0x6e>
    65c4:	68 94       	set
    65c6:	90 38       	cpi	r25, 0x80	; 128
    65c8:	81 05       	cpc	r24, r1
    65ca:	61 f0       	breq	.+24     	; 0x65e4 <pow+0x3c>
    65cc:	80 38       	cpi	r24, 0x80	; 128
    65ce:	bf ef       	ldi	r27, 0xFF	; 255
    65d0:	9b 07       	cpc	r25, r27
    65d2:	41 f0       	breq	.+16     	; 0x65e4 <pow+0x3c>
    65d4:	99 23       	and	r25, r25
    65d6:	4a f5       	brpl	.+82     	; 0x662a <pow+0x82>
    65d8:	ff 3f       	cpi	r31, 0xFF	; 255
    65da:	e1 05       	cpc	r30, r1
    65dc:	31 05       	cpc	r19, r1
    65de:	21 05       	cpc	r18, r1
    65e0:	19 f1       	breq	.+70     	; 0x6628 <pow+0x80>
    65e2:	e8 94       	clt
    65e4:	08 94       	sec
    65e6:	e7 95       	ror	r30
    65e8:	d9 01       	movw	r26, r18
    65ea:	aa 23       	and	r26, r26
    65ec:	29 f4       	brne	.+10     	; 0x65f8 <pow+0x50>
    65ee:	ab 2f       	mov	r26, r27
    65f0:	be 2f       	mov	r27, r30
    65f2:	f8 5f       	subi	r31, 0xF8	; 248
    65f4:	d0 f3       	brcs	.-12     	; 0x65ea <pow+0x42>
    65f6:	10 c0       	rjmp	.+32     	; 0x6618 <pow+0x70>
    65f8:	ff 5f       	subi	r31, 0xFF	; 255
    65fa:	70 f4       	brcc	.+28     	; 0x6618 <pow+0x70>
    65fc:	a6 95       	lsr	r26
    65fe:	e0 f7       	brcc	.-8      	; 0x65f8 <pow+0x50>
    6600:	f7 39       	cpi	r31, 0x97	; 151
    6602:	50 f0       	brcs	.+20     	; 0x6618 <pow+0x70>
    6604:	19 f0       	breq	.+6      	; 0x660c <pow+0x64>
    6606:	ff 3a       	cpi	r31, 0xAF	; 175
    6608:	38 f4       	brcc	.+14     	; 0x6618 <pow+0x70>
    660a:	9f 77       	andi	r25, 0x7F	; 127
    660c:	9f 93       	push	r25
    660e:	0d d0       	rcall	.+26     	; 0x662a <pow+0x82>
    6610:	0f 90       	pop	r0
    6612:	07 fc       	sbrc	r0, 7
    6614:	90 58       	subi	r25, 0x80	; 128
    6616:	08 95       	ret
    6618:	46 f0       	brts	.+16     	; 0x662a <pow+0x82>
    661a:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__fp_nan>
    661e:	60 e0       	ldi	r22, 0x00	; 0
    6620:	70 e0       	ldi	r23, 0x00	; 0
    6622:	80 e8       	ldi	r24, 0x80	; 128
    6624:	9f e3       	ldi	r25, 0x3F	; 63
    6626:	08 95       	ret
    6628:	4f e7       	ldi	r20, 0x7F	; 127
    662a:	9f 77       	andi	r25, 0x7F	; 127
    662c:	5f 93       	push	r21
    662e:	4f 93       	push	r20
    6630:	3f 93       	push	r19
    6632:	2f 93       	push	r18
    6634:	ab d0       	rcall	.+342    	; 0x678c <log>
    6636:	2f 91       	pop	r18
    6638:	3f 91       	pop	r19
    663a:	4f 91       	pop	r20
    663c:	5f 91       	pop	r21
    663e:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
    6642:	08 c0       	rjmp	.+16     	; 0x6654 <exp>
    6644:	29 f4       	brne	.+10     	; 0x6650 <pow+0xa8>
    6646:	16 f0       	brts	.+4      	; 0x664c <pow+0xa4>
    6648:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__fp_inf>
    664c:	0c 94 86 21 	jmp	0x430c	; 0x430c <__fp_zero>
    6650:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__fp_nan>

00006654 <exp>:
    6654:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fp_splitA>
    6658:	a8 f3       	brcs	.-22     	; 0x6644 <pow+0x9c>
    665a:	96 38       	cpi	r25, 0x86	; 134
    665c:	a0 f7       	brcc	.-24     	; 0x6646 <pow+0x9e>
    665e:	07 f8       	bld	r0, 7
    6660:	0f 92       	push	r0
    6662:	e8 94       	clt
    6664:	2b e3       	ldi	r18, 0x3B	; 59
    6666:	3a ea       	ldi	r19, 0xAA	; 170
    6668:	48 eb       	ldi	r20, 0xB8	; 184
    666a:	5f e7       	ldi	r21, 0x7F	; 127
    666c:	0e 94 9b 21 	call	0x4336	; 0x4336 <__mulsf3_pse>
    6670:	0f 92       	push	r0
    6672:	0f 92       	push	r0
    6674:	0f 92       	push	r0
    6676:	4d b7       	in	r20, 0x3d	; 61
    6678:	5e b7       	in	r21, 0x3e	; 62
    667a:	0f 92       	push	r0
    667c:	cb d0       	rcall	.+406    	; 0x6814 <modf>
    667e:	ea e9       	ldi	r30, 0x9A	; 154
    6680:	f1 e0       	ldi	r31, 0x01	; 1
    6682:	16 d0       	rcall	.+44     	; 0x66b0 <__fp_powser>
    6684:	4f 91       	pop	r20
    6686:	5f 91       	pop	r21
    6688:	ef 91       	pop	r30
    668a:	ff 91       	pop	r31
    668c:	e5 95       	asr	r30
    668e:	ee 1f       	adc	r30, r30
    6690:	ff 1f       	adc	r31, r31
    6692:	49 f0       	breq	.+18     	; 0x66a6 <exp+0x52>
    6694:	fe 57       	subi	r31, 0x7E	; 126
    6696:	e0 68       	ori	r30, 0x80	; 128
    6698:	44 27       	eor	r20, r20
    669a:	ee 0f       	add	r30, r30
    669c:	44 1f       	adc	r20, r20
    669e:	fa 95       	dec	r31
    66a0:	e1 f7       	brne	.-8      	; 0x669a <exp+0x46>
    66a2:	41 95       	neg	r20
    66a4:	55 0b       	sbc	r21, r21
    66a6:	35 d0       	rcall	.+106    	; 0x6712 <ldexp>
    66a8:	0f 90       	pop	r0
    66aa:	07 fe       	sbrs	r0, 7
    66ac:	27 c0       	rjmp	.+78     	; 0x66fc <inverse>
    66ae:	08 95       	ret

000066b0 <__fp_powser>:
    66b0:	df 93       	push	r29
    66b2:	cf 93       	push	r28
    66b4:	1f 93       	push	r17
    66b6:	0f 93       	push	r16
    66b8:	ff 92       	push	r15
    66ba:	ef 92       	push	r14
    66bc:	df 92       	push	r13
    66be:	7b 01       	movw	r14, r22
    66c0:	8c 01       	movw	r16, r24
    66c2:	68 94       	set
    66c4:	06 c0       	rjmp	.+12     	; 0x66d2 <__fp_powser+0x22>
    66c6:	da 2e       	mov	r13, r26
    66c8:	ef 01       	movw	r28, r30
    66ca:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3x>
    66ce:	fe 01       	movw	r30, r28
    66d0:	e8 94       	clt
    66d2:	a5 91       	lpm	r26, Z+
    66d4:	25 91       	lpm	r18, Z+
    66d6:	35 91       	lpm	r19, Z+
    66d8:	45 91       	lpm	r20, Z+
    66da:	55 91       	lpm	r21, Z+
    66dc:	a6 f3       	brts	.-24     	; 0x66c6 <__fp_powser+0x16>
    66de:	ef 01       	movw	r28, r30
    66e0:	b9 de       	rcall	.-654    	; 0x6454 <__addsf3x>
    66e2:	fe 01       	movw	r30, r28
    66e4:	97 01       	movw	r18, r14
    66e6:	a8 01       	movw	r20, r16
    66e8:	da 94       	dec	r13
    66ea:	71 f7       	brne	.-36     	; 0x66c8 <__fp_powser+0x18>
    66ec:	df 90       	pop	r13
    66ee:	ef 90       	pop	r14
    66f0:	ff 90       	pop	r15
    66f2:	0f 91       	pop	r16
    66f4:	1f 91       	pop	r17
    66f6:	cf 91       	pop	r28
    66f8:	df 91       	pop	r29
    66fa:	08 95       	ret

000066fc <inverse>:
    66fc:	9b 01       	movw	r18, r22
    66fe:	ac 01       	movw	r20, r24
    6700:	60 e0       	ldi	r22, 0x00	; 0
    6702:	70 e0       	ldi	r23, 0x00	; 0
    6704:	80 e8       	ldi	r24, 0x80	; 128
    6706:	9f e3       	ldi	r25, 0x3F	; 63
    6708:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__divsf3>
    670c:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__fp_inf>
    6710:	25 cf       	rjmp	.-438    	; 0x655c <__fp_mpack>

00006712 <ldexp>:
    6712:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fp_splitA>
    6716:	e0 f3       	brcs	.-8      	; 0x6710 <inverse+0x14>
    6718:	99 23       	and	r25, r25
    671a:	d1 f3       	breq	.-12     	; 0x6710 <inverse+0x14>
    671c:	94 0f       	add	r25, r20
    671e:	51 1d       	adc	r21, r1
    6720:	ab f3       	brvs	.-22     	; 0x670c <inverse+0x10>
    6722:	91 50       	subi	r25, 0x01	; 1
    6724:	50 40       	sbci	r21, 0x00	; 0
    6726:	94 f0       	brlt	.+36     	; 0x674c <ldexp+0x3a>
    6728:	59 f0       	breq	.+22     	; 0x6740 <ldexp+0x2e>
    672a:	88 23       	and	r24, r24
    672c:	32 f0       	brmi	.+12     	; 0x673a <ldexp+0x28>
    672e:	66 0f       	add	r22, r22
    6730:	77 1f       	adc	r23, r23
    6732:	88 1f       	adc	r24, r24
    6734:	91 50       	subi	r25, 0x01	; 1
    6736:	50 40       	sbci	r21, 0x00	; 0
    6738:	c1 f7       	brne	.-16     	; 0x672a <ldexp+0x18>
    673a:	9e 3f       	cpi	r25, 0xFE	; 254
    673c:	51 05       	cpc	r21, r1
    673e:	34 f7       	brge	.-52     	; 0x670c <inverse+0x10>
    6740:	88 0f       	add	r24, r24
    6742:	91 1d       	adc	r25, r1
    6744:	96 95       	lsr	r25
    6746:	87 95       	ror	r24
    6748:	97 f9       	bld	r25, 7
    674a:	08 95       	ret
    674c:	5f 3f       	cpi	r21, 0xFF	; 255
    674e:	ac f0       	brlt	.+42     	; 0x677a <ldexp+0x68>
    6750:	98 3e       	cpi	r25, 0xE8	; 232
    6752:	9c f0       	brlt	.+38     	; 0x677a <ldexp+0x68>
    6754:	bb 27       	eor	r27, r27
    6756:	86 95       	lsr	r24
    6758:	77 95       	ror	r23
    675a:	67 95       	ror	r22
    675c:	b7 95       	ror	r27
    675e:	08 f4       	brcc	.+2      	; 0x6762 <ldexp+0x50>
    6760:	b1 60       	ori	r27, 0x01	; 1
    6762:	93 95       	inc	r25
    6764:	c1 f7       	brne	.-16     	; 0x6756 <ldexp+0x44>
    6766:	bb 0f       	add	r27, r27
    6768:	58 f7       	brcc	.-42     	; 0x6740 <ldexp+0x2e>
    676a:	11 f4       	brne	.+4      	; 0x6770 <ldexp+0x5e>
    676c:	60 ff       	sbrs	r22, 0
    676e:	e8 cf       	rjmp	.-48     	; 0x6740 <ldexp+0x2e>
    6770:	6f 5f       	subi	r22, 0xFF	; 255
    6772:	7f 4f       	sbci	r23, 0xFF	; 255
    6774:	8f 4f       	sbci	r24, 0xFF	; 255
    6776:	9f 4f       	sbci	r25, 0xFF	; 255
    6778:	e3 cf       	rjmp	.-58     	; 0x6740 <ldexp+0x2e>
    677a:	0c 94 87 21 	jmp	0x430e	; 0x430e <__fp_szero>
    677e:	0e f0       	brts	.+2      	; 0x6782 <ldexp+0x70>
    6780:	ed ce       	rjmp	.-550    	; 0x655c <__fp_mpack>
    6782:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__fp_nan>
    6786:	68 94       	set
    6788:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__fp_inf>

0000678c <log>:
    678c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fp_splitA>
    6790:	b0 f3       	brcs	.-20     	; 0x677e <ldexp+0x6c>
    6792:	99 23       	and	r25, r25
    6794:	c1 f3       	breq	.-16     	; 0x6786 <ldexp+0x74>
    6796:	ae f3       	brts	.-22     	; 0x6782 <ldexp+0x70>
    6798:	df 93       	push	r29
    679a:	cf 93       	push	r28
    679c:	1f 93       	push	r17
    679e:	0f 93       	push	r16
    67a0:	ff 92       	push	r15
    67a2:	c9 2f       	mov	r28, r25
    67a4:	dd 27       	eor	r29, r29
    67a6:	88 23       	and	r24, r24
    67a8:	2a f0       	brmi	.+10     	; 0x67b4 <log+0x28>
    67aa:	21 97       	sbiw	r28, 0x01	; 1
    67ac:	66 0f       	add	r22, r22
    67ae:	77 1f       	adc	r23, r23
    67b0:	88 1f       	adc	r24, r24
    67b2:	da f7       	brpl	.-10     	; 0x67aa <log+0x1e>
    67b4:	20 e0       	ldi	r18, 0x00	; 0
    67b6:	30 e0       	ldi	r19, 0x00	; 0
    67b8:	40 e8       	ldi	r20, 0x80	; 128
    67ba:	5f eb       	ldi	r21, 0xBF	; 191
    67bc:	9f e3       	ldi	r25, 0x3F	; 63
    67be:	88 39       	cpi	r24, 0x98	; 152
    67c0:	20 f0       	brcs	.+8      	; 0x67ca <log+0x3e>
    67c2:	80 3e       	cpi	r24, 0xE0	; 224
    67c4:	30 f0       	brcs	.+12     	; 0x67d2 <log+0x46>
    67c6:	21 96       	adiw	r28, 0x01	; 1
    67c8:	8f 77       	andi	r24, 0x7F	; 127
    67ca:	2e de       	rcall	.-932    	; 0x6428 <__addsf3>
    67cc:	e2 ec       	ldi	r30, 0xC2	; 194
    67ce:	f1 e0       	ldi	r31, 0x01	; 1
    67d0:	03 c0       	rjmp	.+6      	; 0x67d8 <log+0x4c>
    67d2:	2a de       	rcall	.-940    	; 0x6428 <__addsf3>
    67d4:	ef ee       	ldi	r30, 0xEF	; 239
    67d6:	f1 e0       	ldi	r31, 0x01	; 1
    67d8:	6b df       	rcall	.-298    	; 0x66b0 <__fp_powser>
    67da:	8b 01       	movw	r16, r22
    67dc:	be 01       	movw	r22, r28
    67de:	ec 01       	movw	r28, r24
    67e0:	fb 2e       	mov	r15, r27
    67e2:	6f 57       	subi	r22, 0x7F	; 127
    67e4:	71 09       	sbc	r23, r1
    67e6:	75 95       	asr	r23
    67e8:	77 1f       	adc	r23, r23
    67ea:	88 0b       	sbc	r24, r24
    67ec:	99 0b       	sbc	r25, r25
    67ee:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatsisf>
    67f2:	28 e1       	ldi	r18, 0x18	; 24
    67f4:	32 e7       	ldi	r19, 0x72	; 114
    67f6:	41 e3       	ldi	r20, 0x31	; 49
    67f8:	5f e3       	ldi	r21, 0x3F	; 63
    67fa:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3x>
    67fe:	af 2d       	mov	r26, r15
    6800:	98 01       	movw	r18, r16
    6802:	ae 01       	movw	r20, r28
    6804:	ff 90       	pop	r15
    6806:	0f 91       	pop	r16
    6808:	1f 91       	pop	r17
    680a:	cf 91       	pop	r28
    680c:	df 91       	pop	r29
    680e:	22 de       	rcall	.-956    	; 0x6454 <__addsf3x>
    6810:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <__fp_round>

00006814 <modf>:
    6814:	fa 01       	movw	r30, r20
    6816:	dc 01       	movw	r26, r24
    6818:	aa 0f       	add	r26, r26
    681a:	bb 1f       	adc	r27, r27
    681c:	9b 01       	movw	r18, r22
    681e:	ac 01       	movw	r20, r24
    6820:	bf 57       	subi	r27, 0x7F	; 127
    6822:	28 f4       	brcc	.+10     	; 0x682e <modf+0x1a>
    6824:	22 27       	eor	r18, r18
    6826:	33 27       	eor	r19, r19
    6828:	44 27       	eor	r20, r20
    682a:	50 78       	andi	r21, 0x80	; 128
    682c:	1f c0       	rjmp	.+62     	; 0x686c <modf+0x58>
    682e:	b7 51       	subi	r27, 0x17	; 23
    6830:	88 f4       	brcc	.+34     	; 0x6854 <modf+0x40>
    6832:	ab 2f       	mov	r26, r27
    6834:	00 24       	eor	r0, r0
    6836:	46 95       	lsr	r20
    6838:	37 95       	ror	r19
    683a:	27 95       	ror	r18
    683c:	01 1c       	adc	r0, r1
    683e:	a3 95       	inc	r26
    6840:	d2 f3       	brmi	.-12     	; 0x6836 <modf+0x22>
    6842:	00 20       	and	r0, r0
    6844:	69 f0       	breq	.+26     	; 0x6860 <modf+0x4c>
    6846:	22 0f       	add	r18, r18
    6848:	33 1f       	adc	r19, r19
    684a:	44 1f       	adc	r20, r20
    684c:	b3 95       	inc	r27
    684e:	da f3       	brmi	.-10     	; 0x6846 <modf+0x32>
    6850:	0d d0       	rcall	.+26     	; 0x686c <modf+0x58>
    6852:	e9 cd       	rjmp	.-1070   	; 0x6426 <__subsf3>
    6854:	61 30       	cpi	r22, 0x01	; 1
    6856:	71 05       	cpc	r23, r1
    6858:	a0 e8       	ldi	r26, 0x80	; 128
    685a:	8a 07       	cpc	r24, r26
    685c:	b9 46       	sbci	r27, 0x69	; 105
    685e:	30 f4       	brcc	.+12     	; 0x686c <modf+0x58>
    6860:	9b 01       	movw	r18, r22
    6862:	ac 01       	movw	r20, r24
    6864:	66 27       	eor	r22, r22
    6866:	77 27       	eor	r23, r23
    6868:	88 27       	eor	r24, r24
    686a:	90 78       	andi	r25, 0x80	; 128
    686c:	30 96       	adiw	r30, 0x00	; 0
    686e:	21 f0       	breq	.+8      	; 0x6878 <modf+0x64>
    6870:	20 83       	st	Z, r18
    6872:	31 83       	std	Z+1, r19	; 0x01
    6874:	42 83       	std	Z+2, r20	; 0x02
    6876:	53 83       	std	Z+3, r21	; 0x03
    6878:	08 95       	ret

0000687a <__divmodhi4>:
    687a:	97 fb       	bst	r25, 7
    687c:	07 2e       	mov	r0, r23
    687e:	16 f4       	brtc	.+4      	; 0x6884 <__divmodhi4+0xa>
    6880:	00 94       	com	r0
    6882:	06 d0       	rcall	.+12     	; 0x6890 <__divmodhi4_neg1>
    6884:	77 fd       	sbrc	r23, 7
    6886:	08 d0       	rcall	.+16     	; 0x6898 <__divmodhi4_neg2>
    6888:	3f d0       	rcall	.+126    	; 0x6908 <__udivmodhi4>
    688a:	07 fc       	sbrc	r0, 7
    688c:	05 d0       	rcall	.+10     	; 0x6898 <__divmodhi4_neg2>
    688e:	3e f4       	brtc	.+14     	; 0x689e <__divmodhi4_exit>

00006890 <__divmodhi4_neg1>:
    6890:	90 95       	com	r25
    6892:	81 95       	neg	r24
    6894:	9f 4f       	sbci	r25, 0xFF	; 255
    6896:	08 95       	ret

00006898 <__divmodhi4_neg2>:
    6898:	70 95       	com	r23
    689a:	61 95       	neg	r22
    689c:	7f 4f       	sbci	r23, 0xFF	; 255

0000689e <__divmodhi4_exit>:
    689e:	08 95       	ret

000068a0 <__udivmodsi4>:
    68a0:	a1 e2       	ldi	r26, 0x21	; 33
    68a2:	1a 2e       	mov	r1, r26
    68a4:	aa 1b       	sub	r26, r26
    68a6:	bb 1b       	sub	r27, r27
    68a8:	fd 01       	movw	r30, r26
    68aa:	0d c0       	rjmp	.+26     	; 0x68c6 <__udivmodsi4_ep>

000068ac <__udivmodsi4_loop>:
    68ac:	aa 1f       	adc	r26, r26
    68ae:	bb 1f       	adc	r27, r27
    68b0:	ee 1f       	adc	r30, r30
    68b2:	ff 1f       	adc	r31, r31
    68b4:	a2 17       	cp	r26, r18
    68b6:	b3 07       	cpc	r27, r19
    68b8:	e4 07       	cpc	r30, r20
    68ba:	f5 07       	cpc	r31, r21
    68bc:	20 f0       	brcs	.+8      	; 0x68c6 <__udivmodsi4_ep>
    68be:	a2 1b       	sub	r26, r18
    68c0:	b3 0b       	sbc	r27, r19
    68c2:	e4 0b       	sbc	r30, r20
    68c4:	f5 0b       	sbc	r31, r21

000068c6 <__udivmodsi4_ep>:
    68c6:	66 1f       	adc	r22, r22
    68c8:	77 1f       	adc	r23, r23
    68ca:	88 1f       	adc	r24, r24
    68cc:	99 1f       	adc	r25, r25
    68ce:	1a 94       	dec	r1
    68d0:	69 f7       	brne	.-38     	; 0x68ac <__udivmodsi4_loop>
    68d2:	60 95       	com	r22
    68d4:	70 95       	com	r23
    68d6:	80 95       	com	r24
    68d8:	90 95       	com	r25
    68da:	9b 01       	movw	r18, r22
    68dc:	ac 01       	movw	r20, r24
    68de:	bd 01       	movw	r22, r26
    68e0:	cf 01       	movw	r24, r30
    68e2:	08 95       	ret

000068e4 <__tablejump2__>:
    68e4:	ee 0f       	add	r30, r30
    68e6:	ff 1f       	adc	r31, r31
    68e8:	88 1f       	adc	r24, r24
    68ea:	8b bf       	out	0x3b, r24	; 59
    68ec:	07 90       	elpm	r0, Z+
    68ee:	f6 91       	elpm	r31, Z
    68f0:	e0 2d       	mov	r30, r0
    68f2:	19 94       	eijmp

000068f4 <__muluhisi3>:
    68f4:	1d d0       	rcall	.+58     	; 0x6930 <__umulhisi3>
    68f6:	a5 9f       	mul	r26, r21
    68f8:	90 0d       	add	r25, r0
    68fa:	b4 9f       	mul	r27, r20
    68fc:	90 0d       	add	r25, r0
    68fe:	a4 9f       	mul	r26, r20
    6900:	80 0d       	add	r24, r0
    6902:	91 1d       	adc	r25, r1
    6904:	11 24       	eor	r1, r1
    6906:	08 95       	ret

00006908 <__udivmodhi4>:
    6908:	aa 1b       	sub	r26, r26
    690a:	bb 1b       	sub	r27, r27
    690c:	51 e1       	ldi	r21, 0x11	; 17
    690e:	07 c0       	rjmp	.+14     	; 0x691e <__udivmodhi4_ep>

00006910 <__udivmodhi4_loop>:
    6910:	aa 1f       	adc	r26, r26
    6912:	bb 1f       	adc	r27, r27
    6914:	a6 17       	cp	r26, r22
    6916:	b7 07       	cpc	r27, r23
    6918:	10 f0       	brcs	.+4      	; 0x691e <__udivmodhi4_ep>
    691a:	a6 1b       	sub	r26, r22
    691c:	b7 0b       	sbc	r27, r23

0000691e <__udivmodhi4_ep>:
    691e:	88 1f       	adc	r24, r24
    6920:	99 1f       	adc	r25, r25
    6922:	5a 95       	dec	r21
    6924:	a9 f7       	brne	.-22     	; 0x6910 <__udivmodhi4_loop>
    6926:	80 95       	com	r24
    6928:	90 95       	com	r25
    692a:	bc 01       	movw	r22, r24
    692c:	cd 01       	movw	r24, r26
    692e:	08 95       	ret

00006930 <__umulhisi3>:
    6930:	a2 9f       	mul	r26, r18
    6932:	b0 01       	movw	r22, r0
    6934:	b3 9f       	mul	r27, r19
    6936:	c0 01       	movw	r24, r0
    6938:	a3 9f       	mul	r26, r19
    693a:	70 0d       	add	r23, r0
    693c:	81 1d       	adc	r24, r1
    693e:	11 24       	eor	r1, r1
    6940:	91 1d       	adc	r25, r1
    6942:	b2 9f       	mul	r27, r18
    6944:	70 0d       	add	r23, r0
    6946:	81 1d       	adc	r24, r1
    6948:	11 24       	eor	r1, r1
    694a:	91 1d       	adc	r25, r1
    694c:	08 95       	ret

0000694e <calloc>:
    694e:	0f 93       	push	r16
    6950:	1f 93       	push	r17
    6952:	cf 93       	push	r28
    6954:	df 93       	push	r29
    6956:	86 9f       	mul	r24, r22
    6958:	80 01       	movw	r16, r0
    695a:	87 9f       	mul	r24, r23
    695c:	10 0d       	add	r17, r0
    695e:	96 9f       	mul	r25, r22
    6960:	10 0d       	add	r17, r0
    6962:	11 24       	eor	r1, r1
    6964:	c8 01       	movw	r24, r16
    6966:	0d d0       	rcall	.+26     	; 0x6982 <malloc>
    6968:	ec 01       	movw	r28, r24
    696a:	00 97       	sbiw	r24, 0x00	; 0
    696c:	21 f0       	breq	.+8      	; 0x6976 <calloc+0x28>
    696e:	a8 01       	movw	r20, r16
    6970:	60 e0       	ldi	r22, 0x00	; 0
    6972:	70 e0       	ldi	r23, 0x00	; 0
    6974:	34 d1       	rcall	.+616    	; 0x6bde <memset>
    6976:	ce 01       	movw	r24, r28
    6978:	df 91       	pop	r29
    697a:	cf 91       	pop	r28
    697c:	1f 91       	pop	r17
    697e:	0f 91       	pop	r16
    6980:	08 95       	ret

00006982 <malloc>:
    6982:	0f 93       	push	r16
    6984:	1f 93       	push	r17
    6986:	cf 93       	push	r28
    6988:	df 93       	push	r29
    698a:	82 30       	cpi	r24, 0x02	; 2
    698c:	91 05       	cpc	r25, r1
    698e:	10 f4       	brcc	.+4      	; 0x6994 <malloc+0x12>
    6990:	82 e0       	ldi	r24, 0x02	; 2
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	e0 91 77 15 	lds	r30, 0x1577	; 0x801577 <__flp>
    6998:	f0 91 78 15 	lds	r31, 0x1578	; 0x801578 <__flp+0x1>
    699c:	20 e0       	ldi	r18, 0x00	; 0
    699e:	30 e0       	ldi	r19, 0x00	; 0
    69a0:	a0 e0       	ldi	r26, 0x00	; 0
    69a2:	b0 e0       	ldi	r27, 0x00	; 0
    69a4:	30 97       	sbiw	r30, 0x00	; 0
    69a6:	19 f1       	breq	.+70     	; 0x69ee <malloc+0x6c>
    69a8:	40 81       	ld	r20, Z
    69aa:	51 81       	ldd	r21, Z+1	; 0x01
    69ac:	02 81       	ldd	r16, Z+2	; 0x02
    69ae:	13 81       	ldd	r17, Z+3	; 0x03
    69b0:	48 17       	cp	r20, r24
    69b2:	59 07       	cpc	r21, r25
    69b4:	c8 f0       	brcs	.+50     	; 0x69e8 <malloc+0x66>
    69b6:	84 17       	cp	r24, r20
    69b8:	95 07       	cpc	r25, r21
    69ba:	69 f4       	brne	.+26     	; 0x69d6 <malloc+0x54>
    69bc:	10 97       	sbiw	r26, 0x00	; 0
    69be:	31 f0       	breq	.+12     	; 0x69cc <malloc+0x4a>
    69c0:	12 96       	adiw	r26, 0x02	; 2
    69c2:	0c 93       	st	X, r16
    69c4:	12 97       	sbiw	r26, 0x02	; 2
    69c6:	13 96       	adiw	r26, 0x03	; 3
    69c8:	1c 93       	st	X, r17
    69ca:	27 c0       	rjmp	.+78     	; 0x6a1a <malloc+0x98>
    69cc:	00 93 77 15 	sts	0x1577, r16	; 0x801577 <__flp>
    69d0:	10 93 78 15 	sts	0x1578, r17	; 0x801578 <__flp+0x1>
    69d4:	22 c0       	rjmp	.+68     	; 0x6a1a <malloc+0x98>
    69d6:	21 15       	cp	r18, r1
    69d8:	31 05       	cpc	r19, r1
    69da:	19 f0       	breq	.+6      	; 0x69e2 <malloc+0x60>
    69dc:	42 17       	cp	r20, r18
    69de:	53 07       	cpc	r21, r19
    69e0:	18 f4       	brcc	.+6      	; 0x69e8 <malloc+0x66>
    69e2:	9a 01       	movw	r18, r20
    69e4:	bd 01       	movw	r22, r26
    69e6:	ef 01       	movw	r28, r30
    69e8:	df 01       	movw	r26, r30
    69ea:	f8 01       	movw	r30, r16
    69ec:	db cf       	rjmp	.-74     	; 0x69a4 <malloc+0x22>
    69ee:	21 15       	cp	r18, r1
    69f0:	31 05       	cpc	r19, r1
    69f2:	f9 f0       	breq	.+62     	; 0x6a32 <malloc+0xb0>
    69f4:	28 1b       	sub	r18, r24
    69f6:	39 0b       	sbc	r19, r25
    69f8:	24 30       	cpi	r18, 0x04	; 4
    69fa:	31 05       	cpc	r19, r1
    69fc:	80 f4       	brcc	.+32     	; 0x6a1e <malloc+0x9c>
    69fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6a00:	9b 81       	ldd	r25, Y+3	; 0x03
    6a02:	61 15       	cp	r22, r1
    6a04:	71 05       	cpc	r23, r1
    6a06:	21 f0       	breq	.+8      	; 0x6a10 <malloc+0x8e>
    6a08:	fb 01       	movw	r30, r22
    6a0a:	93 83       	std	Z+3, r25	; 0x03
    6a0c:	82 83       	std	Z+2, r24	; 0x02
    6a0e:	04 c0       	rjmp	.+8      	; 0x6a18 <malloc+0x96>
    6a10:	90 93 78 15 	sts	0x1578, r25	; 0x801578 <__flp+0x1>
    6a14:	80 93 77 15 	sts	0x1577, r24	; 0x801577 <__flp>
    6a18:	fe 01       	movw	r30, r28
    6a1a:	32 96       	adiw	r30, 0x02	; 2
    6a1c:	44 c0       	rjmp	.+136    	; 0x6aa6 <malloc+0x124>
    6a1e:	fe 01       	movw	r30, r28
    6a20:	e2 0f       	add	r30, r18
    6a22:	f3 1f       	adc	r31, r19
    6a24:	81 93       	st	Z+, r24
    6a26:	91 93       	st	Z+, r25
    6a28:	22 50       	subi	r18, 0x02	; 2
    6a2a:	31 09       	sbc	r19, r1
    6a2c:	39 83       	std	Y+1, r19	; 0x01
    6a2e:	28 83       	st	Y, r18
    6a30:	3a c0       	rjmp	.+116    	; 0x6aa6 <malloc+0x124>
    6a32:	20 91 75 15 	lds	r18, 0x1575	; 0x801575 <__brkval>
    6a36:	30 91 76 15 	lds	r19, 0x1576	; 0x801576 <__brkval+0x1>
    6a3a:	23 2b       	or	r18, r19
    6a3c:	41 f4       	brne	.+16     	; 0x6a4e <malloc+0xcc>
    6a3e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6a42:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6a46:	30 93 76 15 	sts	0x1576, r19	; 0x801576 <__brkval+0x1>
    6a4a:	20 93 75 15 	sts	0x1575, r18	; 0x801575 <__brkval>
    6a4e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6a52:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6a56:	21 15       	cp	r18, r1
    6a58:	31 05       	cpc	r19, r1
    6a5a:	41 f4       	brne	.+16     	; 0x6a6c <malloc+0xea>
    6a5c:	2d b7       	in	r18, 0x3d	; 61
    6a5e:	3e b7       	in	r19, 0x3e	; 62
    6a60:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6a64:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6a68:	24 1b       	sub	r18, r20
    6a6a:	35 0b       	sbc	r19, r21
    6a6c:	e0 91 75 15 	lds	r30, 0x1575	; 0x801575 <__brkval>
    6a70:	f0 91 76 15 	lds	r31, 0x1576	; 0x801576 <__brkval+0x1>
    6a74:	e2 17       	cp	r30, r18
    6a76:	f3 07       	cpc	r31, r19
    6a78:	a0 f4       	brcc	.+40     	; 0x6aa2 <malloc+0x120>
    6a7a:	2e 1b       	sub	r18, r30
    6a7c:	3f 0b       	sbc	r19, r31
    6a7e:	28 17       	cp	r18, r24
    6a80:	39 07       	cpc	r19, r25
    6a82:	78 f0       	brcs	.+30     	; 0x6aa2 <malloc+0x120>
    6a84:	ac 01       	movw	r20, r24
    6a86:	4e 5f       	subi	r20, 0xFE	; 254
    6a88:	5f 4f       	sbci	r21, 0xFF	; 255
    6a8a:	24 17       	cp	r18, r20
    6a8c:	35 07       	cpc	r19, r21
    6a8e:	48 f0       	brcs	.+18     	; 0x6aa2 <malloc+0x120>
    6a90:	4e 0f       	add	r20, r30
    6a92:	5f 1f       	adc	r21, r31
    6a94:	50 93 76 15 	sts	0x1576, r21	; 0x801576 <__brkval+0x1>
    6a98:	40 93 75 15 	sts	0x1575, r20	; 0x801575 <__brkval>
    6a9c:	81 93       	st	Z+, r24
    6a9e:	91 93       	st	Z+, r25
    6aa0:	02 c0       	rjmp	.+4      	; 0x6aa6 <malloc+0x124>
    6aa2:	e0 e0       	ldi	r30, 0x00	; 0
    6aa4:	f0 e0       	ldi	r31, 0x00	; 0
    6aa6:	cf 01       	movw	r24, r30
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	1f 91       	pop	r17
    6aae:	0f 91       	pop	r16
    6ab0:	08 95       	ret

00006ab2 <free>:
    6ab2:	cf 93       	push	r28
    6ab4:	df 93       	push	r29
    6ab6:	00 97       	sbiw	r24, 0x00	; 0
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <free+0xa>
    6aba:	81 c0       	rjmp	.+258    	; 0x6bbe <free+0x10c>
    6abc:	fc 01       	movw	r30, r24
    6abe:	32 97       	sbiw	r30, 0x02	; 2
    6ac0:	13 82       	std	Z+3, r1	; 0x03
    6ac2:	12 82       	std	Z+2, r1	; 0x02
    6ac4:	a0 91 77 15 	lds	r26, 0x1577	; 0x801577 <__flp>
    6ac8:	b0 91 78 15 	lds	r27, 0x1578	; 0x801578 <__flp+0x1>
    6acc:	10 97       	sbiw	r26, 0x00	; 0
    6ace:	81 f4       	brne	.+32     	; 0x6af0 <free+0x3e>
    6ad0:	20 81       	ld	r18, Z
    6ad2:	31 81       	ldd	r19, Z+1	; 0x01
    6ad4:	82 0f       	add	r24, r18
    6ad6:	93 1f       	adc	r25, r19
    6ad8:	20 91 75 15 	lds	r18, 0x1575	; 0x801575 <__brkval>
    6adc:	30 91 76 15 	lds	r19, 0x1576	; 0x801576 <__brkval+0x1>
    6ae0:	28 17       	cp	r18, r24
    6ae2:	39 07       	cpc	r19, r25
    6ae4:	51 f5       	brne	.+84     	; 0x6b3a <free+0x88>
    6ae6:	f0 93 76 15 	sts	0x1576, r31	; 0x801576 <__brkval+0x1>
    6aea:	e0 93 75 15 	sts	0x1575, r30	; 0x801575 <__brkval>
    6aee:	67 c0       	rjmp	.+206    	; 0x6bbe <free+0x10c>
    6af0:	ed 01       	movw	r28, r26
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	ce 17       	cp	r28, r30
    6af8:	df 07       	cpc	r29, r31
    6afa:	40 f4       	brcc	.+16     	; 0x6b0c <free+0x5a>
    6afc:	4a 81       	ldd	r20, Y+2	; 0x02
    6afe:	5b 81       	ldd	r21, Y+3	; 0x03
    6b00:	9e 01       	movw	r18, r28
    6b02:	41 15       	cp	r20, r1
    6b04:	51 05       	cpc	r21, r1
    6b06:	f1 f0       	breq	.+60     	; 0x6b44 <free+0x92>
    6b08:	ea 01       	movw	r28, r20
    6b0a:	f5 cf       	rjmp	.-22     	; 0x6af6 <free+0x44>
    6b0c:	d3 83       	std	Z+3, r29	; 0x03
    6b0e:	c2 83       	std	Z+2, r28	; 0x02
    6b10:	40 81       	ld	r20, Z
    6b12:	51 81       	ldd	r21, Z+1	; 0x01
    6b14:	84 0f       	add	r24, r20
    6b16:	95 1f       	adc	r25, r21
    6b18:	c8 17       	cp	r28, r24
    6b1a:	d9 07       	cpc	r29, r25
    6b1c:	59 f4       	brne	.+22     	; 0x6b34 <free+0x82>
    6b1e:	88 81       	ld	r24, Y
    6b20:	99 81       	ldd	r25, Y+1	; 0x01
    6b22:	84 0f       	add	r24, r20
    6b24:	95 1f       	adc	r25, r21
    6b26:	02 96       	adiw	r24, 0x02	; 2
    6b28:	91 83       	std	Z+1, r25	; 0x01
    6b2a:	80 83       	st	Z, r24
    6b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    6b30:	93 83       	std	Z+3, r25	; 0x03
    6b32:	82 83       	std	Z+2, r24	; 0x02
    6b34:	21 15       	cp	r18, r1
    6b36:	31 05       	cpc	r19, r1
    6b38:	29 f4       	brne	.+10     	; 0x6b44 <free+0x92>
    6b3a:	f0 93 78 15 	sts	0x1578, r31	; 0x801578 <__flp+0x1>
    6b3e:	e0 93 77 15 	sts	0x1577, r30	; 0x801577 <__flp>
    6b42:	3d c0       	rjmp	.+122    	; 0x6bbe <free+0x10c>
    6b44:	e9 01       	movw	r28, r18
    6b46:	fb 83       	std	Y+3, r31	; 0x03
    6b48:	ea 83       	std	Y+2, r30	; 0x02
    6b4a:	49 91       	ld	r20, Y+
    6b4c:	59 91       	ld	r21, Y+
    6b4e:	c4 0f       	add	r28, r20
    6b50:	d5 1f       	adc	r29, r21
    6b52:	ec 17       	cp	r30, r28
    6b54:	fd 07       	cpc	r31, r29
    6b56:	61 f4       	brne	.+24     	; 0x6b70 <free+0xbe>
    6b58:	80 81       	ld	r24, Z
    6b5a:	91 81       	ldd	r25, Z+1	; 0x01
    6b5c:	84 0f       	add	r24, r20
    6b5e:	95 1f       	adc	r25, r21
    6b60:	02 96       	adiw	r24, 0x02	; 2
    6b62:	e9 01       	movw	r28, r18
    6b64:	99 83       	std	Y+1, r25	; 0x01
    6b66:	88 83       	st	Y, r24
    6b68:	82 81       	ldd	r24, Z+2	; 0x02
    6b6a:	93 81       	ldd	r25, Z+3	; 0x03
    6b6c:	9b 83       	std	Y+3, r25	; 0x03
    6b6e:	8a 83       	std	Y+2, r24	; 0x02
    6b70:	e0 e0       	ldi	r30, 0x00	; 0
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	12 96       	adiw	r26, 0x02	; 2
    6b76:	8d 91       	ld	r24, X+
    6b78:	9c 91       	ld	r25, X
    6b7a:	13 97       	sbiw	r26, 0x03	; 3
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	19 f0       	breq	.+6      	; 0x6b86 <free+0xd4>
    6b80:	fd 01       	movw	r30, r26
    6b82:	dc 01       	movw	r26, r24
    6b84:	f7 cf       	rjmp	.-18     	; 0x6b74 <free+0xc2>
    6b86:	8d 91       	ld	r24, X+
    6b88:	9c 91       	ld	r25, X
    6b8a:	11 97       	sbiw	r26, 0x01	; 1
    6b8c:	9d 01       	movw	r18, r26
    6b8e:	2e 5f       	subi	r18, 0xFE	; 254
    6b90:	3f 4f       	sbci	r19, 0xFF	; 255
    6b92:	82 0f       	add	r24, r18
    6b94:	93 1f       	adc	r25, r19
    6b96:	20 91 75 15 	lds	r18, 0x1575	; 0x801575 <__brkval>
    6b9a:	30 91 76 15 	lds	r19, 0x1576	; 0x801576 <__brkval+0x1>
    6b9e:	28 17       	cp	r18, r24
    6ba0:	39 07       	cpc	r19, r25
    6ba2:	69 f4       	brne	.+26     	; 0x6bbe <free+0x10c>
    6ba4:	30 97       	sbiw	r30, 0x00	; 0
    6ba6:	29 f4       	brne	.+10     	; 0x6bb2 <free+0x100>
    6ba8:	10 92 78 15 	sts	0x1578, r1	; 0x801578 <__flp+0x1>
    6bac:	10 92 77 15 	sts	0x1577, r1	; 0x801577 <__flp>
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <free+0x104>
    6bb2:	13 82       	std	Z+3, r1	; 0x03
    6bb4:	12 82       	std	Z+2, r1	; 0x02
    6bb6:	b0 93 76 15 	sts	0x1576, r27	; 0x801576 <__brkval+0x1>
    6bba:	a0 93 75 15 	sts	0x1575, r26	; 0x801575 <__brkval>
    6bbe:	df 91       	pop	r29
    6bc0:	cf 91       	pop	r28
    6bc2:	08 95       	ret

00006bc4 <abort>:
    6bc4:	81 e0       	ldi	r24, 0x01	; 1
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	f8 94       	cli
    6bca:	7d c3       	rjmp	.+1786   	; 0x72c6 <_exit>

00006bcc <memcpy>:
    6bcc:	fb 01       	movw	r30, r22
    6bce:	dc 01       	movw	r26, r24
    6bd0:	02 c0       	rjmp	.+4      	; 0x6bd6 <memcpy+0xa>
    6bd2:	01 90       	ld	r0, Z+
    6bd4:	0d 92       	st	X+, r0
    6bd6:	41 50       	subi	r20, 0x01	; 1
    6bd8:	50 40       	sbci	r21, 0x00	; 0
    6bda:	d8 f7       	brcc	.-10     	; 0x6bd2 <memcpy+0x6>
    6bdc:	08 95       	ret

00006bde <memset>:
    6bde:	dc 01       	movw	r26, r24
    6be0:	01 c0       	rjmp	.+2      	; 0x6be4 <memset+0x6>
    6be2:	6d 93       	st	X+, r22
    6be4:	41 50       	subi	r20, 0x01	; 1
    6be6:	50 40       	sbci	r21, 0x00	; 0
    6be8:	e0 f7       	brcc	.-8      	; 0x6be2 <memset+0x4>
    6bea:	08 95       	ret

00006bec <strcasestr>:
    6bec:	fb 01       	movw	r30, r22
    6bee:	51 91       	ld	r21, Z+
    6bf0:	55 23       	and	r21, r21
    6bf2:	b1 f0       	breq	.+44     	; 0x6c20 <strcasestr+0x34>
    6bf4:	bf 01       	movw	r22, r30
    6bf6:	dc 01       	movw	r26, r24
    6bf8:	05 2e       	mov	r0, r21
    6bfa:	4d 91       	ld	r20, X+
    6bfc:	44 23       	and	r20, r20
    6bfe:	69 f0       	breq	.+26     	; 0x6c1a <strcasestr+0x2e>
    6c00:	10 d0       	rcall	.+32     	; 0x6c22 <strcasestr+0x36>
    6c02:	d9 f7       	brne	.-10     	; 0x6bfa <strcasestr+0xe>
    6c04:	cd 01       	movw	r24, r26
    6c06:	01 90       	ld	r0, Z+
    6c08:	00 20       	and	r0, r0
    6c0a:	49 f0       	breq	.+18     	; 0x6c1e <strcasestr+0x32>
    6c0c:	4d 91       	ld	r20, X+
    6c0e:	41 11       	cpse	r20, r1
    6c10:	08 d0       	rcall	.+16     	; 0x6c22 <strcasestr+0x36>
    6c12:	c9 f3       	breq	.-14     	; 0x6c06 <strcasestr+0x1a>
    6c14:	fb 01       	movw	r30, r22
    6c16:	41 11       	cpse	r20, r1
    6c18:	ee cf       	rjmp	.-36     	; 0x6bf6 <strcasestr+0xa>
    6c1a:	81 e0       	ldi	r24, 0x01	; 1
    6c1c:	90 e0       	ldi	r25, 0x00	; 0
    6c1e:	01 97       	sbiw	r24, 0x01	; 1
    6c20:	08 95       	ret
    6c22:	40 25       	eor	r20, r0
    6c24:	39 f0       	breq	.+14     	; 0x6c34 <strcasestr+0x48>
    6c26:	40 32       	cpi	r20, 0x20	; 32
    6c28:	29 f4       	brne	.+10     	; 0x6c34 <strcasestr+0x48>
    6c2a:	40 29       	or	r20, r0
    6c2c:	4b 57       	subi	r20, 0x7B	; 123
    6c2e:	46 5e       	subi	r20, 0xE6	; 230
    6c30:	08 f0       	brcs	.+2      	; 0x6c34 <strcasestr+0x48>
    6c32:	18 94       	sez
    6c34:	08 95       	ret

00006c36 <strcat>:
    6c36:	fb 01       	movw	r30, r22
    6c38:	dc 01       	movw	r26, r24
    6c3a:	0d 90       	ld	r0, X+
    6c3c:	00 20       	and	r0, r0
    6c3e:	e9 f7       	brne	.-6      	; 0x6c3a <strcat+0x4>
    6c40:	11 97       	sbiw	r26, 0x01	; 1
    6c42:	01 90       	ld	r0, Z+
    6c44:	0d 92       	st	X+, r0
    6c46:	00 20       	and	r0, r0
    6c48:	e1 f7       	brne	.-8      	; 0x6c42 <strcat+0xc>
    6c4a:	08 95       	ret

00006c4c <strcpy>:
    6c4c:	fb 01       	movw	r30, r22
    6c4e:	dc 01       	movw	r26, r24
    6c50:	01 90       	ld	r0, Z+
    6c52:	0d 92       	st	X+, r0
    6c54:	00 20       	and	r0, r0
    6c56:	e1 f7       	brne	.-8      	; 0x6c50 <strcpy+0x4>
    6c58:	08 95       	ret

00006c5a <strncasecmp>:
    6c5a:	fb 01       	movw	r30, r22
    6c5c:	dc 01       	movw	r26, r24
    6c5e:	41 50       	subi	r20, 0x01	; 1
    6c60:	50 40       	sbci	r21, 0x00	; 0
    6c62:	88 f0       	brcs	.+34     	; 0x6c86 <strncasecmp+0x2c>
    6c64:	8d 91       	ld	r24, X+
    6c66:	81 34       	cpi	r24, 0x41	; 65
    6c68:	1c f0       	brlt	.+6      	; 0x6c70 <strncasecmp+0x16>
    6c6a:	8b 35       	cpi	r24, 0x5B	; 91
    6c6c:	0c f4       	brge	.+2      	; 0x6c70 <strncasecmp+0x16>
    6c6e:	80 5e       	subi	r24, 0xE0	; 224
    6c70:	61 91       	ld	r22, Z+
    6c72:	61 34       	cpi	r22, 0x41	; 65
    6c74:	1c f0       	brlt	.+6      	; 0x6c7c <strncasecmp+0x22>
    6c76:	6b 35       	cpi	r22, 0x5B	; 91
    6c78:	0c f4       	brge	.+2      	; 0x6c7c <strncasecmp+0x22>
    6c7a:	60 5e       	subi	r22, 0xE0	; 224
    6c7c:	86 1b       	sub	r24, r22
    6c7e:	61 11       	cpse	r22, r1
    6c80:	71 f3       	breq	.-36     	; 0x6c5e <strncasecmp+0x4>
    6c82:	99 0b       	sbc	r25, r25
    6c84:	08 95       	ret
    6c86:	88 1b       	sub	r24, r24
    6c88:	fc cf       	rjmp	.-8      	; 0x6c82 <strncasecmp+0x28>

00006c8a <printf>:
    6c8a:	cf 93       	push	r28
    6c8c:	df 93       	push	r29
    6c8e:	cd b7       	in	r28, 0x3d	; 61
    6c90:	de b7       	in	r29, 0x3e	; 62
    6c92:	ae 01       	movw	r20, r28
    6c94:	4a 5f       	subi	r20, 0xFA	; 250
    6c96:	5f 4f       	sbci	r21, 0xFF	; 255
    6c98:	fa 01       	movw	r30, r20
    6c9a:	61 91       	ld	r22, Z+
    6c9c:	71 91       	ld	r23, Z+
    6c9e:	af 01       	movw	r20, r30
    6ca0:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <__iob+0x2>
    6ca4:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <__iob+0x3>
    6ca8:	61 d0       	rcall	.+194    	; 0x6d6c <vfprintf>
    6caa:	df 91       	pop	r29
    6cac:	cf 91       	pop	r28
    6cae:	08 95       	ret

00006cb0 <puts>:
    6cb0:	0f 93       	push	r16
    6cb2:	1f 93       	push	r17
    6cb4:	cf 93       	push	r28
    6cb6:	df 93       	push	r29
    6cb8:	e0 91 7b 15 	lds	r30, 0x157B	; 0x80157b <__iob+0x2>
    6cbc:	f0 91 7c 15 	lds	r31, 0x157C	; 0x80157c <__iob+0x3>
    6cc0:	23 81       	ldd	r18, Z+3	; 0x03
    6cc2:	21 ff       	sbrs	r18, 1
    6cc4:	1b c0       	rjmp	.+54     	; 0x6cfc <puts+0x4c>
    6cc6:	8c 01       	movw	r16, r24
    6cc8:	d0 e0       	ldi	r29, 0x00	; 0
    6cca:	c0 e0       	ldi	r28, 0x00	; 0
    6ccc:	f8 01       	movw	r30, r16
    6cce:	81 91       	ld	r24, Z+
    6cd0:	8f 01       	movw	r16, r30
    6cd2:	60 91 7b 15 	lds	r22, 0x157B	; 0x80157b <__iob+0x2>
    6cd6:	70 91 7c 15 	lds	r23, 0x157C	; 0x80157c <__iob+0x3>
    6cda:	db 01       	movw	r26, r22
    6cdc:	18 96       	adiw	r26, 0x08	; 8
    6cde:	ed 91       	ld	r30, X+
    6ce0:	fc 91       	ld	r31, X
    6ce2:	19 97       	sbiw	r26, 0x09	; 9
    6ce4:	88 23       	and	r24, r24
    6ce6:	31 f0       	breq	.+12     	; 0x6cf4 <puts+0x44>
    6ce8:	19 95       	eicall
    6cea:	89 2b       	or	r24, r25
    6cec:	79 f3       	breq	.-34     	; 0x6ccc <puts+0x1c>
    6cee:	df ef       	ldi	r29, 0xFF	; 255
    6cf0:	cf ef       	ldi	r28, 0xFF	; 255
    6cf2:	ec cf       	rjmp	.-40     	; 0x6ccc <puts+0x1c>
    6cf4:	8a e0       	ldi	r24, 0x0A	; 10
    6cf6:	19 95       	eicall
    6cf8:	89 2b       	or	r24, r25
    6cfa:	19 f0       	breq	.+6      	; 0x6d02 <puts+0x52>
    6cfc:	8f ef       	ldi	r24, 0xFF	; 255
    6cfe:	9f ef       	ldi	r25, 0xFF	; 255
    6d00:	02 c0       	rjmp	.+4      	; 0x6d06 <puts+0x56>
    6d02:	8d 2f       	mov	r24, r29
    6d04:	9c 2f       	mov	r25, r28
    6d06:	df 91       	pop	r29
    6d08:	cf 91       	pop	r28
    6d0a:	1f 91       	pop	r17
    6d0c:	0f 91       	pop	r16
    6d0e:	08 95       	ret

00006d10 <sprintf>:
    6d10:	0f 93       	push	r16
    6d12:	1f 93       	push	r17
    6d14:	cf 93       	push	r28
    6d16:	df 93       	push	r29
    6d18:	cd b7       	in	r28, 0x3d	; 61
    6d1a:	de b7       	in	r29, 0x3e	; 62
    6d1c:	2e 97       	sbiw	r28, 0x0e	; 14
    6d1e:	0f b6       	in	r0, 0x3f	; 63
    6d20:	f8 94       	cli
    6d22:	de bf       	out	0x3e, r29	; 62
    6d24:	0f be       	out	0x3f, r0	; 63
    6d26:	cd bf       	out	0x3d, r28	; 61
    6d28:	0e 89       	ldd	r16, Y+22	; 0x16
    6d2a:	1f 89       	ldd	r17, Y+23	; 0x17
    6d2c:	86 e0       	ldi	r24, 0x06	; 6
    6d2e:	8c 83       	std	Y+4, r24	; 0x04
    6d30:	1a 83       	std	Y+2, r17	; 0x02
    6d32:	09 83       	std	Y+1, r16	; 0x01
    6d34:	8f ef       	ldi	r24, 0xFF	; 255
    6d36:	9f e7       	ldi	r25, 0x7F	; 127
    6d38:	9e 83       	std	Y+6, r25	; 0x06
    6d3a:	8d 83       	std	Y+5, r24	; 0x05
    6d3c:	ae 01       	movw	r20, r28
    6d3e:	46 5e       	subi	r20, 0xE6	; 230
    6d40:	5f 4f       	sbci	r21, 0xFF	; 255
    6d42:	68 8d       	ldd	r22, Y+24	; 0x18
    6d44:	79 8d       	ldd	r23, Y+25	; 0x19
    6d46:	ce 01       	movw	r24, r28
    6d48:	01 96       	adiw	r24, 0x01	; 1
    6d4a:	10 d0       	rcall	.+32     	; 0x6d6c <vfprintf>
    6d4c:	ef 81       	ldd	r30, Y+7	; 0x07
    6d4e:	f8 85       	ldd	r31, Y+8	; 0x08
    6d50:	e0 0f       	add	r30, r16
    6d52:	f1 1f       	adc	r31, r17
    6d54:	10 82       	st	Z, r1
    6d56:	2e 96       	adiw	r28, 0x0e	; 14
    6d58:	0f b6       	in	r0, 0x3f	; 63
    6d5a:	f8 94       	cli
    6d5c:	de bf       	out	0x3e, r29	; 62
    6d5e:	0f be       	out	0x3f, r0	; 63
    6d60:	cd bf       	out	0x3d, r28	; 61
    6d62:	df 91       	pop	r29
    6d64:	cf 91       	pop	r28
    6d66:	1f 91       	pop	r17
    6d68:	0f 91       	pop	r16
    6d6a:	08 95       	ret

00006d6c <vfprintf>:
    6d6c:	2f 92       	push	r2
    6d6e:	3f 92       	push	r3
    6d70:	4f 92       	push	r4
    6d72:	5f 92       	push	r5
    6d74:	6f 92       	push	r6
    6d76:	7f 92       	push	r7
    6d78:	8f 92       	push	r8
    6d7a:	9f 92       	push	r9
    6d7c:	af 92       	push	r10
    6d7e:	bf 92       	push	r11
    6d80:	cf 92       	push	r12
    6d82:	df 92       	push	r13
    6d84:	ef 92       	push	r14
    6d86:	ff 92       	push	r15
    6d88:	0f 93       	push	r16
    6d8a:	1f 93       	push	r17
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	cd b7       	in	r28, 0x3d	; 61
    6d92:	de b7       	in	r29, 0x3e	; 62
    6d94:	2b 97       	sbiw	r28, 0x0b	; 11
    6d96:	0f b6       	in	r0, 0x3f	; 63
    6d98:	f8 94       	cli
    6d9a:	de bf       	out	0x3e, r29	; 62
    6d9c:	0f be       	out	0x3f, r0	; 63
    6d9e:	cd bf       	out	0x3d, r28	; 61
    6da0:	6c 01       	movw	r12, r24
    6da2:	7b 01       	movw	r14, r22
    6da4:	8a 01       	movw	r16, r20
    6da6:	fc 01       	movw	r30, r24
    6da8:	17 82       	std	Z+7, r1	; 0x07
    6daa:	16 82       	std	Z+6, r1	; 0x06
    6dac:	83 81       	ldd	r24, Z+3	; 0x03
    6dae:	81 ff       	sbrs	r24, 1
    6db0:	bf c1       	rjmp	.+894    	; 0x7130 <vfprintf+0x3c4>
    6db2:	ce 01       	movw	r24, r28
    6db4:	01 96       	adiw	r24, 0x01	; 1
    6db6:	3c 01       	movw	r6, r24
    6db8:	f6 01       	movw	r30, r12
    6dba:	93 81       	ldd	r25, Z+3	; 0x03
    6dbc:	f7 01       	movw	r30, r14
    6dbe:	93 fd       	sbrc	r25, 3
    6dc0:	85 91       	lpm	r24, Z+
    6dc2:	93 ff       	sbrs	r25, 3
    6dc4:	81 91       	ld	r24, Z+
    6dc6:	7f 01       	movw	r14, r30
    6dc8:	88 23       	and	r24, r24
    6dca:	09 f4       	brne	.+2      	; 0x6dce <vfprintf+0x62>
    6dcc:	ad c1       	rjmp	.+858    	; 0x7128 <vfprintf+0x3bc>
    6dce:	85 32       	cpi	r24, 0x25	; 37
    6dd0:	39 f4       	brne	.+14     	; 0x6de0 <vfprintf+0x74>
    6dd2:	93 fd       	sbrc	r25, 3
    6dd4:	85 91       	lpm	r24, Z+
    6dd6:	93 ff       	sbrs	r25, 3
    6dd8:	81 91       	ld	r24, Z+
    6dda:	7f 01       	movw	r14, r30
    6ddc:	85 32       	cpi	r24, 0x25	; 37
    6dde:	21 f4       	brne	.+8      	; 0x6de8 <vfprintf+0x7c>
    6de0:	b6 01       	movw	r22, r12
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	d6 d1       	rcall	.+940    	; 0x7192 <fputc>
    6de6:	e8 cf       	rjmp	.-48     	; 0x6db8 <vfprintf+0x4c>
    6de8:	91 2c       	mov	r9, r1
    6dea:	21 2c       	mov	r2, r1
    6dec:	31 2c       	mov	r3, r1
    6dee:	ff e1       	ldi	r31, 0x1F	; 31
    6df0:	f3 15       	cp	r31, r3
    6df2:	d8 f0       	brcs	.+54     	; 0x6e2a <vfprintf+0xbe>
    6df4:	8b 32       	cpi	r24, 0x2B	; 43
    6df6:	79 f0       	breq	.+30     	; 0x6e16 <vfprintf+0xaa>
    6df8:	38 f4       	brcc	.+14     	; 0x6e08 <vfprintf+0x9c>
    6dfa:	80 32       	cpi	r24, 0x20	; 32
    6dfc:	79 f0       	breq	.+30     	; 0x6e1c <vfprintf+0xb0>
    6dfe:	83 32       	cpi	r24, 0x23	; 35
    6e00:	a1 f4       	brne	.+40     	; 0x6e2a <vfprintf+0xbe>
    6e02:	23 2d       	mov	r18, r3
    6e04:	20 61       	ori	r18, 0x10	; 16
    6e06:	1d c0       	rjmp	.+58     	; 0x6e42 <vfprintf+0xd6>
    6e08:	8d 32       	cpi	r24, 0x2D	; 45
    6e0a:	61 f0       	breq	.+24     	; 0x6e24 <vfprintf+0xb8>
    6e0c:	80 33       	cpi	r24, 0x30	; 48
    6e0e:	69 f4       	brne	.+26     	; 0x6e2a <vfprintf+0xbe>
    6e10:	23 2d       	mov	r18, r3
    6e12:	21 60       	ori	r18, 0x01	; 1
    6e14:	16 c0       	rjmp	.+44     	; 0x6e42 <vfprintf+0xd6>
    6e16:	83 2d       	mov	r24, r3
    6e18:	82 60       	ori	r24, 0x02	; 2
    6e1a:	38 2e       	mov	r3, r24
    6e1c:	e3 2d       	mov	r30, r3
    6e1e:	e4 60       	ori	r30, 0x04	; 4
    6e20:	3e 2e       	mov	r3, r30
    6e22:	2a c0       	rjmp	.+84     	; 0x6e78 <vfprintf+0x10c>
    6e24:	f3 2d       	mov	r31, r3
    6e26:	f8 60       	ori	r31, 0x08	; 8
    6e28:	1d c0       	rjmp	.+58     	; 0x6e64 <vfprintf+0xf8>
    6e2a:	37 fc       	sbrc	r3, 7
    6e2c:	2d c0       	rjmp	.+90     	; 0x6e88 <vfprintf+0x11c>
    6e2e:	20 ed       	ldi	r18, 0xD0	; 208
    6e30:	28 0f       	add	r18, r24
    6e32:	2a 30       	cpi	r18, 0x0A	; 10
    6e34:	40 f0       	brcs	.+16     	; 0x6e46 <vfprintf+0xda>
    6e36:	8e 32       	cpi	r24, 0x2E	; 46
    6e38:	b9 f4       	brne	.+46     	; 0x6e68 <vfprintf+0xfc>
    6e3a:	36 fc       	sbrc	r3, 6
    6e3c:	75 c1       	rjmp	.+746    	; 0x7128 <vfprintf+0x3bc>
    6e3e:	23 2d       	mov	r18, r3
    6e40:	20 64       	ori	r18, 0x40	; 64
    6e42:	32 2e       	mov	r3, r18
    6e44:	19 c0       	rjmp	.+50     	; 0x6e78 <vfprintf+0x10c>
    6e46:	36 fe       	sbrs	r3, 6
    6e48:	06 c0       	rjmp	.+12     	; 0x6e56 <vfprintf+0xea>
    6e4a:	8a e0       	ldi	r24, 0x0A	; 10
    6e4c:	98 9e       	mul	r9, r24
    6e4e:	20 0d       	add	r18, r0
    6e50:	11 24       	eor	r1, r1
    6e52:	92 2e       	mov	r9, r18
    6e54:	11 c0       	rjmp	.+34     	; 0x6e78 <vfprintf+0x10c>
    6e56:	ea e0       	ldi	r30, 0x0A	; 10
    6e58:	2e 9e       	mul	r2, r30
    6e5a:	20 0d       	add	r18, r0
    6e5c:	11 24       	eor	r1, r1
    6e5e:	22 2e       	mov	r2, r18
    6e60:	f3 2d       	mov	r31, r3
    6e62:	f0 62       	ori	r31, 0x20	; 32
    6e64:	3f 2e       	mov	r3, r31
    6e66:	08 c0       	rjmp	.+16     	; 0x6e78 <vfprintf+0x10c>
    6e68:	8c 36       	cpi	r24, 0x6C	; 108
    6e6a:	21 f4       	brne	.+8      	; 0x6e74 <vfprintf+0x108>
    6e6c:	83 2d       	mov	r24, r3
    6e6e:	80 68       	ori	r24, 0x80	; 128
    6e70:	38 2e       	mov	r3, r24
    6e72:	02 c0       	rjmp	.+4      	; 0x6e78 <vfprintf+0x10c>
    6e74:	88 36       	cpi	r24, 0x68	; 104
    6e76:	41 f4       	brne	.+16     	; 0x6e88 <vfprintf+0x11c>
    6e78:	f7 01       	movw	r30, r14
    6e7a:	93 fd       	sbrc	r25, 3
    6e7c:	85 91       	lpm	r24, Z+
    6e7e:	93 ff       	sbrs	r25, 3
    6e80:	81 91       	ld	r24, Z+
    6e82:	7f 01       	movw	r14, r30
    6e84:	81 11       	cpse	r24, r1
    6e86:	b3 cf       	rjmp	.-154    	; 0x6dee <vfprintf+0x82>
    6e88:	98 2f       	mov	r25, r24
    6e8a:	9f 7d       	andi	r25, 0xDF	; 223
    6e8c:	95 54       	subi	r25, 0x45	; 69
    6e8e:	93 30       	cpi	r25, 0x03	; 3
    6e90:	28 f4       	brcc	.+10     	; 0x6e9c <vfprintf+0x130>
    6e92:	0c 5f       	subi	r16, 0xFC	; 252
    6e94:	1f 4f       	sbci	r17, 0xFF	; 255
    6e96:	9f e3       	ldi	r25, 0x3F	; 63
    6e98:	99 83       	std	Y+1, r25	; 0x01
    6e9a:	0d c0       	rjmp	.+26     	; 0x6eb6 <vfprintf+0x14a>
    6e9c:	83 36       	cpi	r24, 0x63	; 99
    6e9e:	31 f0       	breq	.+12     	; 0x6eac <vfprintf+0x140>
    6ea0:	83 37       	cpi	r24, 0x73	; 115
    6ea2:	71 f0       	breq	.+28     	; 0x6ec0 <vfprintf+0x154>
    6ea4:	83 35       	cpi	r24, 0x53	; 83
    6ea6:	09 f0       	breq	.+2      	; 0x6eaa <vfprintf+0x13e>
    6ea8:	55 c0       	rjmp	.+170    	; 0x6f54 <vfprintf+0x1e8>
    6eaa:	20 c0       	rjmp	.+64     	; 0x6eec <vfprintf+0x180>
    6eac:	f8 01       	movw	r30, r16
    6eae:	80 81       	ld	r24, Z
    6eb0:	89 83       	std	Y+1, r24	; 0x01
    6eb2:	0e 5f       	subi	r16, 0xFE	; 254
    6eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    6eb6:	88 24       	eor	r8, r8
    6eb8:	83 94       	inc	r8
    6eba:	91 2c       	mov	r9, r1
    6ebc:	53 01       	movw	r10, r6
    6ebe:	12 c0       	rjmp	.+36     	; 0x6ee4 <vfprintf+0x178>
    6ec0:	28 01       	movw	r4, r16
    6ec2:	f2 e0       	ldi	r31, 0x02	; 2
    6ec4:	4f 0e       	add	r4, r31
    6ec6:	51 1c       	adc	r5, r1
    6ec8:	f8 01       	movw	r30, r16
    6eca:	a0 80       	ld	r10, Z
    6ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    6ece:	36 fe       	sbrs	r3, 6
    6ed0:	03 c0       	rjmp	.+6      	; 0x6ed8 <vfprintf+0x16c>
    6ed2:	69 2d       	mov	r22, r9
    6ed4:	70 e0       	ldi	r23, 0x00	; 0
    6ed6:	02 c0       	rjmp	.+4      	; 0x6edc <vfprintf+0x170>
    6ed8:	6f ef       	ldi	r22, 0xFF	; 255
    6eda:	7f ef       	ldi	r23, 0xFF	; 255
    6edc:	c5 01       	movw	r24, r10
    6ede:	4e d1       	rcall	.+668    	; 0x717c <strnlen>
    6ee0:	4c 01       	movw	r8, r24
    6ee2:	82 01       	movw	r16, r4
    6ee4:	f3 2d       	mov	r31, r3
    6ee6:	ff 77       	andi	r31, 0x7F	; 127
    6ee8:	3f 2e       	mov	r3, r31
    6eea:	15 c0       	rjmp	.+42     	; 0x6f16 <vfprintf+0x1aa>
    6eec:	28 01       	movw	r4, r16
    6eee:	22 e0       	ldi	r18, 0x02	; 2
    6ef0:	42 0e       	add	r4, r18
    6ef2:	51 1c       	adc	r5, r1
    6ef4:	f8 01       	movw	r30, r16
    6ef6:	a0 80       	ld	r10, Z
    6ef8:	b1 80       	ldd	r11, Z+1	; 0x01
    6efa:	36 fe       	sbrs	r3, 6
    6efc:	03 c0       	rjmp	.+6      	; 0x6f04 <vfprintf+0x198>
    6efe:	69 2d       	mov	r22, r9
    6f00:	70 e0       	ldi	r23, 0x00	; 0
    6f02:	02 c0       	rjmp	.+4      	; 0x6f08 <vfprintf+0x19c>
    6f04:	6f ef       	ldi	r22, 0xFF	; 255
    6f06:	7f ef       	ldi	r23, 0xFF	; 255
    6f08:	c5 01       	movw	r24, r10
    6f0a:	2d d1       	rcall	.+602    	; 0x7166 <strnlen_P>
    6f0c:	4c 01       	movw	r8, r24
    6f0e:	f3 2d       	mov	r31, r3
    6f10:	f0 68       	ori	r31, 0x80	; 128
    6f12:	3f 2e       	mov	r3, r31
    6f14:	82 01       	movw	r16, r4
    6f16:	33 fc       	sbrc	r3, 3
    6f18:	19 c0       	rjmp	.+50     	; 0x6f4c <vfprintf+0x1e0>
    6f1a:	82 2d       	mov	r24, r2
    6f1c:	90 e0       	ldi	r25, 0x00	; 0
    6f1e:	88 16       	cp	r8, r24
    6f20:	99 06       	cpc	r9, r25
    6f22:	a0 f4       	brcc	.+40     	; 0x6f4c <vfprintf+0x1e0>
    6f24:	b6 01       	movw	r22, r12
    6f26:	80 e2       	ldi	r24, 0x20	; 32
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	33 d1       	rcall	.+614    	; 0x7192 <fputc>
    6f2c:	2a 94       	dec	r2
    6f2e:	f5 cf       	rjmp	.-22     	; 0x6f1a <vfprintf+0x1ae>
    6f30:	f5 01       	movw	r30, r10
    6f32:	37 fc       	sbrc	r3, 7
    6f34:	85 91       	lpm	r24, Z+
    6f36:	37 fe       	sbrs	r3, 7
    6f38:	81 91       	ld	r24, Z+
    6f3a:	5f 01       	movw	r10, r30
    6f3c:	b6 01       	movw	r22, r12
    6f3e:	90 e0       	ldi	r25, 0x00	; 0
    6f40:	28 d1       	rcall	.+592    	; 0x7192 <fputc>
    6f42:	21 10       	cpse	r2, r1
    6f44:	2a 94       	dec	r2
    6f46:	21 e0       	ldi	r18, 0x01	; 1
    6f48:	82 1a       	sub	r8, r18
    6f4a:	91 08       	sbc	r9, r1
    6f4c:	81 14       	cp	r8, r1
    6f4e:	91 04       	cpc	r9, r1
    6f50:	79 f7       	brne	.-34     	; 0x6f30 <vfprintf+0x1c4>
    6f52:	e1 c0       	rjmp	.+450    	; 0x7116 <vfprintf+0x3aa>
    6f54:	84 36       	cpi	r24, 0x64	; 100
    6f56:	11 f0       	breq	.+4      	; 0x6f5c <vfprintf+0x1f0>
    6f58:	89 36       	cpi	r24, 0x69	; 105
    6f5a:	39 f5       	brne	.+78     	; 0x6faa <vfprintf+0x23e>
    6f5c:	f8 01       	movw	r30, r16
    6f5e:	37 fe       	sbrs	r3, 7
    6f60:	07 c0       	rjmp	.+14     	; 0x6f70 <vfprintf+0x204>
    6f62:	60 81       	ld	r22, Z
    6f64:	71 81       	ldd	r23, Z+1	; 0x01
    6f66:	82 81       	ldd	r24, Z+2	; 0x02
    6f68:	93 81       	ldd	r25, Z+3	; 0x03
    6f6a:	0c 5f       	subi	r16, 0xFC	; 252
    6f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f6e:	08 c0       	rjmp	.+16     	; 0x6f80 <vfprintf+0x214>
    6f70:	60 81       	ld	r22, Z
    6f72:	71 81       	ldd	r23, Z+1	; 0x01
    6f74:	07 2e       	mov	r0, r23
    6f76:	00 0c       	add	r0, r0
    6f78:	88 0b       	sbc	r24, r24
    6f7a:	99 0b       	sbc	r25, r25
    6f7c:	0e 5f       	subi	r16, 0xFE	; 254
    6f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f80:	f3 2d       	mov	r31, r3
    6f82:	ff 76       	andi	r31, 0x6F	; 111
    6f84:	3f 2e       	mov	r3, r31
    6f86:	97 ff       	sbrs	r25, 7
    6f88:	09 c0       	rjmp	.+18     	; 0x6f9c <vfprintf+0x230>
    6f8a:	90 95       	com	r25
    6f8c:	80 95       	com	r24
    6f8e:	70 95       	com	r23
    6f90:	61 95       	neg	r22
    6f92:	7f 4f       	sbci	r23, 0xFF	; 255
    6f94:	8f 4f       	sbci	r24, 0xFF	; 255
    6f96:	9f 4f       	sbci	r25, 0xFF	; 255
    6f98:	f0 68       	ori	r31, 0x80	; 128
    6f9a:	3f 2e       	mov	r3, r31
    6f9c:	2a e0       	ldi	r18, 0x0A	; 10
    6f9e:	30 e0       	ldi	r19, 0x00	; 0
    6fa0:	a3 01       	movw	r20, r6
    6fa2:	33 d1       	rcall	.+614    	; 0x720a <__ultoa_invert>
    6fa4:	88 2e       	mov	r8, r24
    6fa6:	86 18       	sub	r8, r6
    6fa8:	44 c0       	rjmp	.+136    	; 0x7032 <vfprintf+0x2c6>
    6faa:	85 37       	cpi	r24, 0x75	; 117
    6fac:	31 f4       	brne	.+12     	; 0x6fba <vfprintf+0x24e>
    6fae:	23 2d       	mov	r18, r3
    6fb0:	2f 7e       	andi	r18, 0xEF	; 239
    6fb2:	b2 2e       	mov	r11, r18
    6fb4:	2a e0       	ldi	r18, 0x0A	; 10
    6fb6:	30 e0       	ldi	r19, 0x00	; 0
    6fb8:	25 c0       	rjmp	.+74     	; 0x7004 <vfprintf+0x298>
    6fba:	93 2d       	mov	r25, r3
    6fbc:	99 7f       	andi	r25, 0xF9	; 249
    6fbe:	b9 2e       	mov	r11, r25
    6fc0:	8f 36       	cpi	r24, 0x6F	; 111
    6fc2:	c1 f0       	breq	.+48     	; 0x6ff4 <vfprintf+0x288>
    6fc4:	18 f4       	brcc	.+6      	; 0x6fcc <vfprintf+0x260>
    6fc6:	88 35       	cpi	r24, 0x58	; 88
    6fc8:	79 f0       	breq	.+30     	; 0x6fe8 <vfprintf+0x27c>
    6fca:	ae c0       	rjmp	.+348    	; 0x7128 <vfprintf+0x3bc>
    6fcc:	80 37       	cpi	r24, 0x70	; 112
    6fce:	19 f0       	breq	.+6      	; 0x6fd6 <vfprintf+0x26a>
    6fd0:	88 37       	cpi	r24, 0x78	; 120
    6fd2:	21 f0       	breq	.+8      	; 0x6fdc <vfprintf+0x270>
    6fd4:	a9 c0       	rjmp	.+338    	; 0x7128 <vfprintf+0x3bc>
    6fd6:	e9 2f       	mov	r30, r25
    6fd8:	e0 61       	ori	r30, 0x10	; 16
    6fda:	be 2e       	mov	r11, r30
    6fdc:	b4 fe       	sbrs	r11, 4
    6fde:	0d c0       	rjmp	.+26     	; 0x6ffa <vfprintf+0x28e>
    6fe0:	fb 2d       	mov	r31, r11
    6fe2:	f4 60       	ori	r31, 0x04	; 4
    6fe4:	bf 2e       	mov	r11, r31
    6fe6:	09 c0       	rjmp	.+18     	; 0x6ffa <vfprintf+0x28e>
    6fe8:	34 fe       	sbrs	r3, 4
    6fea:	0a c0       	rjmp	.+20     	; 0x7000 <vfprintf+0x294>
    6fec:	29 2f       	mov	r18, r25
    6fee:	26 60       	ori	r18, 0x06	; 6
    6ff0:	b2 2e       	mov	r11, r18
    6ff2:	06 c0       	rjmp	.+12     	; 0x7000 <vfprintf+0x294>
    6ff4:	28 e0       	ldi	r18, 0x08	; 8
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	05 c0       	rjmp	.+10     	; 0x7004 <vfprintf+0x298>
    6ffa:	20 e1       	ldi	r18, 0x10	; 16
    6ffc:	30 e0       	ldi	r19, 0x00	; 0
    6ffe:	02 c0       	rjmp	.+4      	; 0x7004 <vfprintf+0x298>
    7000:	20 e1       	ldi	r18, 0x10	; 16
    7002:	32 e0       	ldi	r19, 0x02	; 2
    7004:	f8 01       	movw	r30, r16
    7006:	b7 fe       	sbrs	r11, 7
    7008:	07 c0       	rjmp	.+14     	; 0x7018 <vfprintf+0x2ac>
    700a:	60 81       	ld	r22, Z
    700c:	71 81       	ldd	r23, Z+1	; 0x01
    700e:	82 81       	ldd	r24, Z+2	; 0x02
    7010:	93 81       	ldd	r25, Z+3	; 0x03
    7012:	0c 5f       	subi	r16, 0xFC	; 252
    7014:	1f 4f       	sbci	r17, 0xFF	; 255
    7016:	06 c0       	rjmp	.+12     	; 0x7024 <vfprintf+0x2b8>
    7018:	60 81       	ld	r22, Z
    701a:	71 81       	ldd	r23, Z+1	; 0x01
    701c:	80 e0       	ldi	r24, 0x00	; 0
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	0e 5f       	subi	r16, 0xFE	; 254
    7022:	1f 4f       	sbci	r17, 0xFF	; 255
    7024:	a3 01       	movw	r20, r6
    7026:	f1 d0       	rcall	.+482    	; 0x720a <__ultoa_invert>
    7028:	88 2e       	mov	r8, r24
    702a:	86 18       	sub	r8, r6
    702c:	fb 2d       	mov	r31, r11
    702e:	ff 77       	andi	r31, 0x7F	; 127
    7030:	3f 2e       	mov	r3, r31
    7032:	36 fe       	sbrs	r3, 6
    7034:	0d c0       	rjmp	.+26     	; 0x7050 <vfprintf+0x2e4>
    7036:	23 2d       	mov	r18, r3
    7038:	2e 7f       	andi	r18, 0xFE	; 254
    703a:	a2 2e       	mov	r10, r18
    703c:	89 14       	cp	r8, r9
    703e:	58 f4       	brcc	.+22     	; 0x7056 <vfprintf+0x2ea>
    7040:	34 fe       	sbrs	r3, 4
    7042:	0b c0       	rjmp	.+22     	; 0x705a <vfprintf+0x2ee>
    7044:	32 fc       	sbrc	r3, 2
    7046:	09 c0       	rjmp	.+18     	; 0x705a <vfprintf+0x2ee>
    7048:	83 2d       	mov	r24, r3
    704a:	8e 7e       	andi	r24, 0xEE	; 238
    704c:	a8 2e       	mov	r10, r24
    704e:	05 c0       	rjmp	.+10     	; 0x705a <vfprintf+0x2ee>
    7050:	b8 2c       	mov	r11, r8
    7052:	a3 2c       	mov	r10, r3
    7054:	03 c0       	rjmp	.+6      	; 0x705c <vfprintf+0x2f0>
    7056:	b8 2c       	mov	r11, r8
    7058:	01 c0       	rjmp	.+2      	; 0x705c <vfprintf+0x2f0>
    705a:	b9 2c       	mov	r11, r9
    705c:	a4 fe       	sbrs	r10, 4
    705e:	0f c0       	rjmp	.+30     	; 0x707e <vfprintf+0x312>
    7060:	fe 01       	movw	r30, r28
    7062:	e8 0d       	add	r30, r8
    7064:	f1 1d       	adc	r31, r1
    7066:	80 81       	ld	r24, Z
    7068:	80 33       	cpi	r24, 0x30	; 48
    706a:	21 f4       	brne	.+8      	; 0x7074 <vfprintf+0x308>
    706c:	9a 2d       	mov	r25, r10
    706e:	99 7e       	andi	r25, 0xE9	; 233
    7070:	a9 2e       	mov	r10, r25
    7072:	09 c0       	rjmp	.+18     	; 0x7086 <vfprintf+0x31a>
    7074:	a2 fe       	sbrs	r10, 2
    7076:	06 c0       	rjmp	.+12     	; 0x7084 <vfprintf+0x318>
    7078:	b3 94       	inc	r11
    707a:	b3 94       	inc	r11
    707c:	04 c0       	rjmp	.+8      	; 0x7086 <vfprintf+0x31a>
    707e:	8a 2d       	mov	r24, r10
    7080:	86 78       	andi	r24, 0x86	; 134
    7082:	09 f0       	breq	.+2      	; 0x7086 <vfprintf+0x31a>
    7084:	b3 94       	inc	r11
    7086:	a3 fc       	sbrc	r10, 3
    7088:	10 c0       	rjmp	.+32     	; 0x70aa <vfprintf+0x33e>
    708a:	a0 fe       	sbrs	r10, 0
    708c:	06 c0       	rjmp	.+12     	; 0x709a <vfprintf+0x32e>
    708e:	b2 14       	cp	r11, r2
    7090:	80 f4       	brcc	.+32     	; 0x70b2 <vfprintf+0x346>
    7092:	28 0c       	add	r2, r8
    7094:	92 2c       	mov	r9, r2
    7096:	9b 18       	sub	r9, r11
    7098:	0d c0       	rjmp	.+26     	; 0x70b4 <vfprintf+0x348>
    709a:	b2 14       	cp	r11, r2
    709c:	58 f4       	brcc	.+22     	; 0x70b4 <vfprintf+0x348>
    709e:	b6 01       	movw	r22, r12
    70a0:	80 e2       	ldi	r24, 0x20	; 32
    70a2:	90 e0       	ldi	r25, 0x00	; 0
    70a4:	76 d0       	rcall	.+236    	; 0x7192 <fputc>
    70a6:	b3 94       	inc	r11
    70a8:	f8 cf       	rjmp	.-16     	; 0x709a <vfprintf+0x32e>
    70aa:	b2 14       	cp	r11, r2
    70ac:	18 f4       	brcc	.+6      	; 0x70b4 <vfprintf+0x348>
    70ae:	2b 18       	sub	r2, r11
    70b0:	02 c0       	rjmp	.+4      	; 0x70b6 <vfprintf+0x34a>
    70b2:	98 2c       	mov	r9, r8
    70b4:	21 2c       	mov	r2, r1
    70b6:	a4 fe       	sbrs	r10, 4
    70b8:	0f c0       	rjmp	.+30     	; 0x70d8 <vfprintf+0x36c>
    70ba:	b6 01       	movw	r22, r12
    70bc:	80 e3       	ldi	r24, 0x30	; 48
    70be:	90 e0       	ldi	r25, 0x00	; 0
    70c0:	68 d0       	rcall	.+208    	; 0x7192 <fputc>
    70c2:	a2 fe       	sbrs	r10, 2
    70c4:	16 c0       	rjmp	.+44     	; 0x70f2 <vfprintf+0x386>
    70c6:	a1 fc       	sbrc	r10, 1
    70c8:	03 c0       	rjmp	.+6      	; 0x70d0 <vfprintf+0x364>
    70ca:	88 e7       	ldi	r24, 0x78	; 120
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	02 c0       	rjmp	.+4      	; 0x70d4 <vfprintf+0x368>
    70d0:	88 e5       	ldi	r24, 0x58	; 88
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	b6 01       	movw	r22, r12
    70d6:	0c c0       	rjmp	.+24     	; 0x70f0 <vfprintf+0x384>
    70d8:	8a 2d       	mov	r24, r10
    70da:	86 78       	andi	r24, 0x86	; 134
    70dc:	51 f0       	breq	.+20     	; 0x70f2 <vfprintf+0x386>
    70de:	a1 fe       	sbrs	r10, 1
    70e0:	02 c0       	rjmp	.+4      	; 0x70e6 <vfprintf+0x37a>
    70e2:	8b e2       	ldi	r24, 0x2B	; 43
    70e4:	01 c0       	rjmp	.+2      	; 0x70e8 <vfprintf+0x37c>
    70e6:	80 e2       	ldi	r24, 0x20	; 32
    70e8:	a7 fc       	sbrc	r10, 7
    70ea:	8d e2       	ldi	r24, 0x2D	; 45
    70ec:	b6 01       	movw	r22, r12
    70ee:	90 e0       	ldi	r25, 0x00	; 0
    70f0:	50 d0       	rcall	.+160    	; 0x7192 <fputc>
    70f2:	89 14       	cp	r8, r9
    70f4:	30 f4       	brcc	.+12     	; 0x7102 <vfprintf+0x396>
    70f6:	b6 01       	movw	r22, r12
    70f8:	80 e3       	ldi	r24, 0x30	; 48
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	4a d0       	rcall	.+148    	; 0x7192 <fputc>
    70fe:	9a 94       	dec	r9
    7100:	f8 cf       	rjmp	.-16     	; 0x70f2 <vfprintf+0x386>
    7102:	8a 94       	dec	r8
    7104:	f3 01       	movw	r30, r6
    7106:	e8 0d       	add	r30, r8
    7108:	f1 1d       	adc	r31, r1
    710a:	80 81       	ld	r24, Z
    710c:	b6 01       	movw	r22, r12
    710e:	90 e0       	ldi	r25, 0x00	; 0
    7110:	40 d0       	rcall	.+128    	; 0x7192 <fputc>
    7112:	81 10       	cpse	r8, r1
    7114:	f6 cf       	rjmp	.-20     	; 0x7102 <vfprintf+0x396>
    7116:	22 20       	and	r2, r2
    7118:	09 f4       	brne	.+2      	; 0x711c <vfprintf+0x3b0>
    711a:	4e ce       	rjmp	.-868    	; 0x6db8 <vfprintf+0x4c>
    711c:	b6 01       	movw	r22, r12
    711e:	80 e2       	ldi	r24, 0x20	; 32
    7120:	90 e0       	ldi	r25, 0x00	; 0
    7122:	37 d0       	rcall	.+110    	; 0x7192 <fputc>
    7124:	2a 94       	dec	r2
    7126:	f7 cf       	rjmp	.-18     	; 0x7116 <vfprintf+0x3aa>
    7128:	f6 01       	movw	r30, r12
    712a:	86 81       	ldd	r24, Z+6	; 0x06
    712c:	97 81       	ldd	r25, Z+7	; 0x07
    712e:	02 c0       	rjmp	.+4      	; 0x7134 <vfprintf+0x3c8>
    7130:	8f ef       	ldi	r24, 0xFF	; 255
    7132:	9f ef       	ldi	r25, 0xFF	; 255
    7134:	2b 96       	adiw	r28, 0x0b	; 11
    7136:	0f b6       	in	r0, 0x3f	; 63
    7138:	f8 94       	cli
    713a:	de bf       	out	0x3e, r29	; 62
    713c:	0f be       	out	0x3f, r0	; 63
    713e:	cd bf       	out	0x3d, r28	; 61
    7140:	df 91       	pop	r29
    7142:	cf 91       	pop	r28
    7144:	1f 91       	pop	r17
    7146:	0f 91       	pop	r16
    7148:	ff 90       	pop	r15
    714a:	ef 90       	pop	r14
    714c:	df 90       	pop	r13
    714e:	cf 90       	pop	r12
    7150:	bf 90       	pop	r11
    7152:	af 90       	pop	r10
    7154:	9f 90       	pop	r9
    7156:	8f 90       	pop	r8
    7158:	7f 90       	pop	r7
    715a:	6f 90       	pop	r6
    715c:	5f 90       	pop	r5
    715e:	4f 90       	pop	r4
    7160:	3f 90       	pop	r3
    7162:	2f 90       	pop	r2
    7164:	08 95       	ret

00007166 <strnlen_P>:
    7166:	fc 01       	movw	r30, r24
    7168:	05 90       	lpm	r0, Z+
    716a:	61 50       	subi	r22, 0x01	; 1
    716c:	70 40       	sbci	r23, 0x00	; 0
    716e:	01 10       	cpse	r0, r1
    7170:	d8 f7       	brcc	.-10     	; 0x7168 <strnlen_P+0x2>
    7172:	80 95       	com	r24
    7174:	90 95       	com	r25
    7176:	8e 0f       	add	r24, r30
    7178:	9f 1f       	adc	r25, r31
    717a:	08 95       	ret

0000717c <strnlen>:
    717c:	fc 01       	movw	r30, r24
    717e:	61 50       	subi	r22, 0x01	; 1
    7180:	70 40       	sbci	r23, 0x00	; 0
    7182:	01 90       	ld	r0, Z+
    7184:	01 10       	cpse	r0, r1
    7186:	d8 f7       	brcc	.-10     	; 0x717e <strnlen+0x2>
    7188:	80 95       	com	r24
    718a:	90 95       	com	r25
    718c:	8e 0f       	add	r24, r30
    718e:	9f 1f       	adc	r25, r31
    7190:	08 95       	ret

00007192 <fputc>:
    7192:	0f 93       	push	r16
    7194:	1f 93       	push	r17
    7196:	cf 93       	push	r28
    7198:	df 93       	push	r29
    719a:	fb 01       	movw	r30, r22
    719c:	23 81       	ldd	r18, Z+3	; 0x03
    719e:	21 fd       	sbrc	r18, 1
    71a0:	03 c0       	rjmp	.+6      	; 0x71a8 <fputc+0x16>
    71a2:	8f ef       	ldi	r24, 0xFF	; 255
    71a4:	9f ef       	ldi	r25, 0xFF	; 255
    71a6:	2c c0       	rjmp	.+88     	; 0x7200 <fputc+0x6e>
    71a8:	22 ff       	sbrs	r18, 2
    71aa:	16 c0       	rjmp	.+44     	; 0x71d8 <fputc+0x46>
    71ac:	46 81       	ldd	r20, Z+6	; 0x06
    71ae:	57 81       	ldd	r21, Z+7	; 0x07
    71b0:	24 81       	ldd	r18, Z+4	; 0x04
    71b2:	35 81       	ldd	r19, Z+5	; 0x05
    71b4:	42 17       	cp	r20, r18
    71b6:	53 07       	cpc	r21, r19
    71b8:	44 f4       	brge	.+16     	; 0x71ca <fputc+0x38>
    71ba:	a0 81       	ld	r26, Z
    71bc:	b1 81       	ldd	r27, Z+1	; 0x01
    71be:	9d 01       	movw	r18, r26
    71c0:	2f 5f       	subi	r18, 0xFF	; 255
    71c2:	3f 4f       	sbci	r19, 0xFF	; 255
    71c4:	31 83       	std	Z+1, r19	; 0x01
    71c6:	20 83       	st	Z, r18
    71c8:	8c 93       	st	X, r24
    71ca:	26 81       	ldd	r18, Z+6	; 0x06
    71cc:	37 81       	ldd	r19, Z+7	; 0x07
    71ce:	2f 5f       	subi	r18, 0xFF	; 255
    71d0:	3f 4f       	sbci	r19, 0xFF	; 255
    71d2:	37 83       	std	Z+7, r19	; 0x07
    71d4:	26 83       	std	Z+6, r18	; 0x06
    71d6:	14 c0       	rjmp	.+40     	; 0x7200 <fputc+0x6e>
    71d8:	8b 01       	movw	r16, r22
    71da:	ec 01       	movw	r28, r24
    71dc:	fb 01       	movw	r30, r22
    71de:	00 84       	ldd	r0, Z+8	; 0x08
    71e0:	f1 85       	ldd	r31, Z+9	; 0x09
    71e2:	e0 2d       	mov	r30, r0
    71e4:	19 95       	eicall
    71e6:	89 2b       	or	r24, r25
    71e8:	e1 f6       	brne	.-72     	; 0x71a2 <fputc+0x10>
    71ea:	d8 01       	movw	r26, r16
    71ec:	16 96       	adiw	r26, 0x06	; 6
    71ee:	8d 91       	ld	r24, X+
    71f0:	9c 91       	ld	r25, X
    71f2:	17 97       	sbiw	r26, 0x07	; 7
    71f4:	01 96       	adiw	r24, 0x01	; 1
    71f6:	17 96       	adiw	r26, 0x07	; 7
    71f8:	9c 93       	st	X, r25
    71fa:	8e 93       	st	-X, r24
    71fc:	16 97       	sbiw	r26, 0x06	; 6
    71fe:	ce 01       	movw	r24, r28
    7200:	df 91       	pop	r29
    7202:	cf 91       	pop	r28
    7204:	1f 91       	pop	r17
    7206:	0f 91       	pop	r16
    7208:	08 95       	ret

0000720a <__ultoa_invert>:
    720a:	fa 01       	movw	r30, r20
    720c:	aa 27       	eor	r26, r26
    720e:	28 30       	cpi	r18, 0x08	; 8
    7210:	51 f1       	breq	.+84     	; 0x7266 <__ultoa_invert+0x5c>
    7212:	20 31       	cpi	r18, 0x10	; 16
    7214:	81 f1       	breq	.+96     	; 0x7276 <__ultoa_invert+0x6c>
    7216:	e8 94       	clt
    7218:	6f 93       	push	r22
    721a:	6e 7f       	andi	r22, 0xFE	; 254
    721c:	6e 5f       	subi	r22, 0xFE	; 254
    721e:	7f 4f       	sbci	r23, 0xFF	; 255
    7220:	8f 4f       	sbci	r24, 0xFF	; 255
    7222:	9f 4f       	sbci	r25, 0xFF	; 255
    7224:	af 4f       	sbci	r26, 0xFF	; 255
    7226:	b1 e0       	ldi	r27, 0x01	; 1
    7228:	3e d0       	rcall	.+124    	; 0x72a6 <__ultoa_invert+0x9c>
    722a:	b4 e0       	ldi	r27, 0x04	; 4
    722c:	3c d0       	rcall	.+120    	; 0x72a6 <__ultoa_invert+0x9c>
    722e:	67 0f       	add	r22, r23
    7230:	78 1f       	adc	r23, r24
    7232:	89 1f       	adc	r24, r25
    7234:	9a 1f       	adc	r25, r26
    7236:	a1 1d       	adc	r26, r1
    7238:	68 0f       	add	r22, r24
    723a:	79 1f       	adc	r23, r25
    723c:	8a 1f       	adc	r24, r26
    723e:	91 1d       	adc	r25, r1
    7240:	a1 1d       	adc	r26, r1
    7242:	6a 0f       	add	r22, r26
    7244:	71 1d       	adc	r23, r1
    7246:	81 1d       	adc	r24, r1
    7248:	91 1d       	adc	r25, r1
    724a:	a1 1d       	adc	r26, r1
    724c:	20 d0       	rcall	.+64     	; 0x728e <__ultoa_invert+0x84>
    724e:	09 f4       	brne	.+2      	; 0x7252 <__ultoa_invert+0x48>
    7250:	68 94       	set
    7252:	3f 91       	pop	r19
    7254:	2a e0       	ldi	r18, 0x0A	; 10
    7256:	26 9f       	mul	r18, r22
    7258:	11 24       	eor	r1, r1
    725a:	30 19       	sub	r19, r0
    725c:	30 5d       	subi	r19, 0xD0	; 208
    725e:	31 93       	st	Z+, r19
    7260:	de f6       	brtc	.-74     	; 0x7218 <__ultoa_invert+0xe>
    7262:	cf 01       	movw	r24, r30
    7264:	08 95       	ret
    7266:	46 2f       	mov	r20, r22
    7268:	47 70       	andi	r20, 0x07	; 7
    726a:	40 5d       	subi	r20, 0xD0	; 208
    726c:	41 93       	st	Z+, r20
    726e:	b3 e0       	ldi	r27, 0x03	; 3
    7270:	0f d0       	rcall	.+30     	; 0x7290 <__ultoa_invert+0x86>
    7272:	c9 f7       	brne	.-14     	; 0x7266 <__ultoa_invert+0x5c>
    7274:	f6 cf       	rjmp	.-20     	; 0x7262 <__ultoa_invert+0x58>
    7276:	46 2f       	mov	r20, r22
    7278:	4f 70       	andi	r20, 0x0F	; 15
    727a:	40 5d       	subi	r20, 0xD0	; 208
    727c:	4a 33       	cpi	r20, 0x3A	; 58
    727e:	18 f0       	brcs	.+6      	; 0x7286 <__ultoa_invert+0x7c>
    7280:	49 5d       	subi	r20, 0xD9	; 217
    7282:	31 fd       	sbrc	r19, 1
    7284:	40 52       	subi	r20, 0x20	; 32
    7286:	41 93       	st	Z+, r20
    7288:	02 d0       	rcall	.+4      	; 0x728e <__ultoa_invert+0x84>
    728a:	a9 f7       	brne	.-22     	; 0x7276 <__ultoa_invert+0x6c>
    728c:	ea cf       	rjmp	.-44     	; 0x7262 <__ultoa_invert+0x58>
    728e:	b4 e0       	ldi	r27, 0x04	; 4
    7290:	a6 95       	lsr	r26
    7292:	97 95       	ror	r25
    7294:	87 95       	ror	r24
    7296:	77 95       	ror	r23
    7298:	67 95       	ror	r22
    729a:	ba 95       	dec	r27
    729c:	c9 f7       	brne	.-14     	; 0x7290 <__ultoa_invert+0x86>
    729e:	00 97       	sbiw	r24, 0x00	; 0
    72a0:	61 05       	cpc	r22, r1
    72a2:	71 05       	cpc	r23, r1
    72a4:	08 95       	ret
    72a6:	9b 01       	movw	r18, r22
    72a8:	ac 01       	movw	r20, r24
    72aa:	0a 2e       	mov	r0, r26
    72ac:	06 94       	lsr	r0
    72ae:	57 95       	ror	r21
    72b0:	47 95       	ror	r20
    72b2:	37 95       	ror	r19
    72b4:	27 95       	ror	r18
    72b6:	ba 95       	dec	r27
    72b8:	c9 f7       	brne	.-14     	; 0x72ac <__ultoa_invert+0xa2>
    72ba:	62 0f       	add	r22, r18
    72bc:	73 1f       	adc	r23, r19
    72be:	84 1f       	adc	r24, r20
    72c0:	95 1f       	adc	r25, r21
    72c2:	a0 1d       	adc	r26, r0
    72c4:	08 95       	ret

000072c6 <_exit>:
    72c6:	f8 94       	cli

000072c8 <__stop_program>:
    72c8:	ff cf       	rjmp	.-2      	; 0x72c8 <__stop_program>
