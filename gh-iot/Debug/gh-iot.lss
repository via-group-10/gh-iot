
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800200  00005818  000058ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b3c  0080040a  0080040a  00005ab6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000918  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bbfd  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003672  00000000  00000000  00012069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000613c  00000000  00000000  000156db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f9c  00000000  00000000  0001b818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003943  00000000  00000000  0001d7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a218  00000000  00000000  000210f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0002b30f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c2       	rjmp	.+1312   	; 0x522 <__ctors_end>
       2:	00 00       	nop
       4:	af c2       	rjmp	.+1374   	; 0x564 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c2       	rjmp	.+1370   	; 0x564 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c2       	rjmp	.+1366   	; 0x564 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c2       	rjmp	.+1362   	; 0x564 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c2       	rjmp	.+1358   	; 0x564 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c2       	rjmp	.+1354   	; 0x564 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c2       	rjmp	.+1350   	; 0x564 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c2       	rjmp	.+1346   	; 0x564 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c2       	rjmp	.+1342   	; 0x564 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c2       	rjmp	.+1338   	; 0x564 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c2       	rjmp	.+1334   	; 0x564 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_12>
      34:	97 c2       	rjmp	.+1326   	; 0x564 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c2       	rjmp	.+1322   	; 0x564 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c2       	rjmp	.+1318   	; 0x564 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c2       	rjmp	.+1314   	; 0x564 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c2       	rjmp	.+1310   	; 0x564 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c2       	rjmp	.+1306   	; 0x564 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c2       	rjmp	.+1302   	; 0x564 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c2       	rjmp	.+1298   	; 0x564 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__vector_21>
      58:	85 c2       	rjmp	.+1290   	; 0x564 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c2       	rjmp	.+1286   	; 0x564 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 49 23 	jmp	0x4692	; 0x4692 <__vector_24>
      64:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__vector_25>
      68:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <__vector_26>
      6c:	7b c2       	rjmp	.+1270   	; 0x564 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c2       	rjmp	.+1266   	; 0x564 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c2       	rjmp	.+1262   	; 0x564 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c2       	rjmp	.+1258   	; 0x564 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c2       	rjmp	.+1254   	; 0x564 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c2       	rjmp	.+1250   	; 0x564 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c2       	rjmp	.+1246   	; 0x564 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c2       	rjmp	.+1242   	; 0x564 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c2       	rjmp	.+1238   	; 0x564 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__vector_36>
      94:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__vector_37>
      98:	65 c2       	rjmp	.+1226   	; 0x564 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__vector_39>
      a0:	61 c2       	rjmp	.+1218   	; 0x564 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c2       	rjmp	.+1214   	; 0x564 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c2       	rjmp	.+1210   	; 0x564 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c2       	rjmp	.+1206   	; 0x564 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c2       	rjmp	.+1202   	; 0x564 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c2       	rjmp	.+1198   	; 0x564 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c2       	rjmp	.+1194   	; 0x564 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c2       	rjmp	.+1190   	; 0x564 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c2       	rjmp	.+1186   	; 0x564 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c2       	rjmp	.+1182   	; 0x564 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c2       	rjmp	.+1178   	; 0x564 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__vector_51>
      d0:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__vector_52>
      d4:	47 c2       	rjmp	.+1166   	; 0x564 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__vector_54>
      dc:	0c 94 3e 21 	jmp	0x427c	; 0x427c <__vector_55>
      e0:	41 c2       	rjmp	.+1154   	; 0x564 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 02       	muls	r16, r23
      e6:	07 02       	muls	r16, r23
      e8:	07 02       	muls	r16, r23
      ea:	41 02       	muls	r20, r17
      ec:	49 02       	muls	r20, r25
      ee:	5f 02       	muls	r21, r31
      f0:	07 02       	muls	r16, r23
      f2:	07 02       	muls	r16, r23
      f4:	41 02       	muls	r20, r17
      f6:	49 02       	muls	r20, r25
      f8:	e7 24       	eor	r14, r7
      fa:	57 25       	eor	r21, r7
      fc:	57 25       	eor	r21, r7
      fe:	57 25       	eor	r21, r7
     100:	57 25       	eor	r21, r7
     102:	57 25       	eor	r21, r7
     104:	57 25       	eor	r21, r7
     106:	57 25       	eor	r21, r7
     108:	e7 24       	eor	r14, r7
     10a:	57 25       	eor	r21, r7
     10c:	57 25       	eor	r21, r7
     10e:	57 25       	eor	r21, r7
     110:	57 25       	eor	r21, r7
     112:	57 25       	eor	r21, r7
     114:	57 25       	eor	r21, r7
     116:	57 25       	eor	r21, r7
     118:	e9 24       	eor	r14, r9
     11a:	57 25       	eor	r21, r7
     11c:	57 25       	eor	r21, r7
     11e:	57 25       	eor	r21, r7
     120:	57 25       	eor	r21, r7
     122:	57 25       	eor	r21, r7
     124:	57 25       	eor	r21, r7
     126:	57 25       	eor	r21, r7
     128:	57 25       	eor	r21, r7
     12a:	57 25       	eor	r21, r7
     12c:	57 25       	eor	r21, r7
     12e:	57 25       	eor	r21, r7
     130:	57 25       	eor	r21, r7
     132:	57 25       	eor	r21, r7
     134:	57 25       	eor	r21, r7
     136:	57 25       	eor	r21, r7
     138:	e9 24       	eor	r14, r9
     13a:	57 25       	eor	r21, r7
     13c:	57 25       	eor	r21, r7
     13e:	57 25       	eor	r21, r7
     140:	57 25       	eor	r21, r7
     142:	57 25       	eor	r21, r7
     144:	57 25       	eor	r21, r7
     146:	57 25       	eor	r21, r7
     148:	57 25       	eor	r21, r7
     14a:	57 25       	eor	r21, r7
     14c:	57 25       	eor	r21, r7
     14e:	57 25       	eor	r21, r7
     150:	57 25       	eor	r21, r7
     152:	57 25       	eor	r21, r7
     154:	57 25       	eor	r21, r7
     156:	57 25       	eor	r21, r7
     158:	53 25       	eor	r21, r3
     15a:	57 25       	eor	r21, r7
     15c:	57 25       	eor	r21, r7
     15e:	57 25       	eor	r21, r7
     160:	57 25       	eor	r21, r7
     162:	57 25       	eor	r21, r7
     164:	57 25       	eor	r21, r7
     166:	57 25       	eor	r21, r7
     168:	1e 25       	eor	r17, r14
     16a:	57 25       	eor	r21, r7
     16c:	57 25       	eor	r21, r7
     16e:	57 25       	eor	r21, r7
     170:	57 25       	eor	r21, r7
     172:	57 25       	eor	r21, r7
     174:	57 25       	eor	r21, r7
     176:	57 25       	eor	r21, r7
     178:	57 25       	eor	r21, r7
     17a:	57 25       	eor	r21, r7
     17c:	57 25       	eor	r21, r7
     17e:	57 25       	eor	r21, r7
     180:	57 25       	eor	r21, r7
     182:	57 25       	eor	r21, r7
     184:	57 25       	eor	r21, r7
     186:	57 25       	eor	r21, r7
     188:	12 25       	eor	r17, r2
     18a:	57 25       	eor	r21, r7
     18c:	57 25       	eor	r21, r7
     18e:	57 25       	eor	r21, r7
     190:	57 25       	eor	r21, r7
     192:	57 25       	eor	r21, r7
     194:	57 25       	eor	r21, r7
     196:	57 25       	eor	r21, r7
     198:	36 25       	eor	r19, r6
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <sevenSegmentDisplayController_create+0x8>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     21c:	07 e0       	ldi	r16, 0x07	; 7
     21e:	1e e0       	ldi	r17, 0x0E	; 14
     220:	0f 2e       	mov	r0, r31
     222:	f7 e3       	ldi	r31, 0x37	; 55
     224:	ef 2e       	mov	r14, r31
     226:	fe e0       	ldi	r31, 0x0E	; 14
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <uxDeletedTasksWaitingCleanUp>
     230:	88 23       	and	r24, r24
     232:	29 f1       	breq	.+74     	; 0x27e <prvIdleTask+0x62>
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	0f 92       	push	r0
     23a:	d8 01       	movw	r26, r16
     23c:	17 96       	adiw	r26, 0x07	; 7
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	c0 85       	ldd	r28, Z+8	; 0x08
     246:	d1 85       	ldd	r29, Z+9	; 0x09
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
     250:	80 91 fa 0d 	lds	r24, 0x0DFA	; 0x800dfa <uxCurrentNumberOfTasks>
     254:	81 50       	subi	r24, 0x01	; 1
     256:	80 93 fa 0d 	sts	0x0DFA, r24	; 0x800dfa <uxCurrentNumberOfTasks>
     25a:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <uxDeletedTasksWaitingCleanUp>
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <uxDeletedTasksWaitingCleanUp>
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	8b 8d       	ldd	r24, Y+27	; 0x1b
     26a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     26c:	0e 94 45 0a 	call	0x148a	; 0x148a <vPortFree>
     270:	ce 01       	movw	r24, r28
     272:	0e 94 45 0a 	call	0x148a	; 0x148a <vPortFree>
     276:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <uxDeletedTasksWaitingCleanUp>
     27a:	81 11       	cpse	r24, r1
     27c:	db cf       	rjmp	.-74     	; 0x234 <prvIdleTask+0x18>
     27e:	f7 01       	movw	r30, r14
     280:	80 81       	ld	r24, Z
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	10 f0       	brcs	.+4      	; 0x28a <prvIdleTask+0x6e>
     286:	0e 94 4a 0b 	call	0x1694	; 0x1694 <vPortYield>
     28a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <vApplicationIdleHook>
     28e:	ce cf       	rjmp	.-100    	; 0x22c <prvIdleTask+0x10>

00000290 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	60 97       	sbiw	r28, 0x10	; 16
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	9a 87       	std	Y+10, r25	; 0x0a
     2aa:	89 87       	std	Y+9, r24	; 0x09
     2ac:	81 2c       	mov	r8, r1
     2ae:	91 2c       	mov	r9, r1
     2b0:	a1 2c       	mov	r10, r1
     2b2:	b1 2c       	mov	r11, r1
     2b4:	69 84       	ldd	r6, Y+9	; 0x09
     2b6:	7a 84       	ldd	r7, Y+10	; 0x0a
     2b8:	e0 91 b1 0e 	lds	r30, 0x0EB1	; 0x800eb1 <pxCurrentTimerList>
     2bc:	f0 91 b2 0e 	lds	r31, 0x0EB2	; 0x800eb2 <pxCurrentTimerList+0x1>
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <prvTimerTask+0x38>
     2c6:	13 c1       	rjmp	.+550    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     2c8:	07 80       	ldd	r0, Z+7	; 0x07
     2ca:	f0 85       	ldd	r31, Z+8	; 0x08
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 80       	ld	r2, Z
     2d0:	31 80       	ldd	r3, Z+1	; 0x01
     2d2:	42 80       	ldd	r4, Z+2	; 0x02
     2d4:	53 80       	ldd	r5, Z+3	; 0x03
     2d6:	0e 94 bb 11 	call	0x2376	; 0x2376 <vTaskSuspendAll>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 3f 18 	call	0x307e	; 0x307e <prvSampleTimeNow>
     2e2:	6b 87       	std	Y+11, r22	; 0x0b
     2e4:	7c 87       	std	Y+12, r23	; 0x0c
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
     2e8:	9e 87       	std	Y+14, r25	; 0x0e
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	81 11       	cpse	r24, r1
     2ee:	67 c0       	rjmp	.+206    	; 0x3be <prvTimerTask+0x12e>
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2f6:	be 85       	ldd	r27, Y+14	; 0x0e
     2f8:	82 15       	cp	r24, r2
     2fa:	93 05       	cpc	r25, r3
     2fc:	a4 05       	cpc	r26, r4
     2fe:	b5 05       	cpc	r27, r5
     300:	08 f4       	brcc	.+2      	; 0x304 <prvTimerTask+0x74>
     302:	45 c0       	rjmp	.+138    	; 0x38e <prvTimerTask+0xfe>
     304:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>
     308:	e0 91 b1 0e 	lds	r30, 0x0EB1	; 0x800eb1 <pxCurrentTimerList>
     30c:	f0 91 b2 0e 	lds	r31, 0x0EB2	; 0x800eb2 <pxCurrentTimerList+0x1>
     310:	07 80       	ldd	r0, Z+7	; 0x07
     312:	f0 85       	ldd	r31, Z+8	; 0x08
     314:	e0 2d       	mov	r30, r0
     316:	a0 85       	ldd	r26, Z+8	; 0x08
     318:	b1 85       	ldd	r27, Z+9	; 0x09
     31a:	b8 8b       	std	Y+16, r27	; 0x10
     31c:	af 87       	std	Y+15, r26	; 0x0f
     31e:	cd 01       	movw	r24, r26
     320:	02 96       	adiw	r24, 0x02	; 2
     322:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
     326:	ef 85       	ldd	r30, Y+15	; 0x0f
     328:	f8 89       	ldd	r31, Y+16	; 0x10
     32a:	86 89       	ldd	r24, Z+22	; 0x16
     32c:	82 ff       	sbrs	r24, 2
     32e:	21 c0       	rjmp	.+66     	; 0x372 <prvTimerTask+0xe2>
     330:	46 85       	ldd	r20, Z+14	; 0x0e
     332:	57 85       	ldd	r21, Z+15	; 0x0f
     334:	60 89       	ldd	r22, Z+16	; 0x10
     336:	71 89       	ldd	r23, Z+17	; 0x11
     338:	42 0d       	add	r20, r2
     33a:	53 1d       	adc	r21, r3
     33c:	64 1d       	adc	r22, r4
     33e:	75 1d       	adc	r23, r5
     340:	72 01       	movw	r14, r4
     342:	61 01       	movw	r12, r2
     344:	0b 85       	ldd	r16, Y+11	; 0x0b
     346:	1c 85       	ldd	r17, Y+12	; 0x0c
     348:	2d 85       	ldd	r18, Y+13	; 0x0d
     34a:	3e 85       	ldd	r19, Y+14	; 0x0e
     34c:	cf 01       	movw	r24, r30
     34e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	99 f0       	breq	.+38     	; 0x37c <prvTimerTask+0xec>
     356:	c8 2c       	mov	r12, r8
     358:	d9 2c       	mov	r13, r9
     35a:	ea 2c       	mov	r14, r10
     35c:	fb 2c       	mov	r15, r11
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a2 01       	movw	r20, r4
     364:	91 01       	movw	r18, r2
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	8f 85       	ldd	r24, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <xTimerGenericCommand>
     370:	05 c0       	rjmp	.+10     	; 0x37c <prvTimerTask+0xec>
     372:	8e 7f       	andi	r24, 0xFE	; 254
     374:	af 85       	ldd	r26, Y+15	; 0x0f
     376:	b8 89       	ldd	r27, Y+16	; 0x10
     378:	56 96       	adiw	r26, 0x16	; 22
     37a:	8c 93       	st	X, r24
     37c:	af 85       	ldd	r26, Y+15	; 0x0f
     37e:	b8 89       	ldd	r27, Y+16	; 0x10
     380:	54 96       	adiw	r26, 0x14	; 20
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	55 97       	sbiw	r26, 0x15	; 21
     388:	cd 01       	movw	r24, r26
     38a:	19 95       	eicall
     38c:	a1 c0       	rjmp	.+322    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	b2 01       	movw	r22, r4
     392:	a1 01       	movw	r20, r2
     394:	8b 85       	ldd	r24, Y+11	; 0x0b
     396:	9c 85       	ldd	r25, Y+12	; 0x0c
     398:	ad 85       	ldd	r26, Y+13	; 0x0d
     39a:	be 85       	ldd	r27, Y+14	; 0x0e
     39c:	48 1b       	sub	r20, r24
     39e:	59 0b       	sbc	r21, r25
     3a0:	6a 0b       	sbc	r22, r26
     3a2:	7b 0b       	sbc	r23, r27
     3a4:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <xTimerQueue>
     3a8:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
     3ac:	0e 94 77 0f 	call	0x1eee	; 0x1eee <vQueueWaitForMessageRestricted>
     3b0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>
     3b4:	81 11       	cpse	r24, r1
     3b6:	8c c0       	rjmp	.+280    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3b8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <vPortYield>
     3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3be:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>
     3c2:	86 c0       	rjmp	.+268    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <prvTimerTask+0x13c>
     3ca:	82 c0       	rjmp	.+260    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3cc:	4e 80       	ldd	r4, Y+6	; 0x06
     3ce:	5f 80       	ldd	r5, Y+7	; 0x07
     3d0:	d2 01       	movw	r26, r4
     3d2:	1c 96       	adiw	r26, 0x0c	; 12
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	1d 97       	sbiw	r26, 0x0d	; 13
     3da:	89 2b       	or	r24, r25
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <prvTimerTask+0x156>
     3de:	c2 01       	movw	r24, r4
     3e0:	02 96       	adiw	r24, 0x02	; 2
     3e2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
     3e6:	ce 01       	movw	r24, r28
     3e8:	08 96       	adiw	r24, 0x08	; 8
     3ea:	0e 94 3f 18 	call	0x307e	; 0x307e <prvSampleTimeNow>
     3ee:	8b 01       	movw	r16, r22
     3f0:	9c 01       	movw	r18, r24
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	0e 2e       	mov	r0, r30
     3f6:	00 0c       	add	r0, r0
     3f8:	ff 0b       	sbc	r31, r31
     3fa:	ea 30       	cpi	r30, 0x0A	; 10
     3fc:	f1 05       	cpc	r31, r1
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	67 c0       	rjmp	.+206    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     402:	88 27       	eor	r24, r24
     404:	ee 58       	subi	r30, 0x8E	; 142
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	8f 4f       	sbci	r24, 0xFF	; 255
     40a:	0c 94 96 27 	jmp	0x4f2c	; 0x4f2c <__tablejump2__>
     40e:	f2 01       	movw	r30, r4
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	81 60       	ori	r24, 0x01	; 1
     414:	86 8b       	std	Z+22, r24	; 0x16
     416:	ca 80       	ldd	r12, Y+2	; 0x02
     418:	db 80       	ldd	r13, Y+3	; 0x03
     41a:	ec 80       	ldd	r14, Y+4	; 0x04
     41c:	fd 80       	ldd	r15, Y+5	; 0x05
     41e:	46 85       	ldd	r20, Z+14	; 0x0e
     420:	57 85       	ldd	r21, Z+15	; 0x0f
     422:	60 89       	ldd	r22, Z+16	; 0x10
     424:	71 89       	ldd	r23, Z+17	; 0x11
     426:	4c 0d       	add	r20, r12
     428:	5d 1d       	adc	r21, r13
     42a:	6e 1d       	adc	r22, r14
     42c:	7f 1d       	adc	r23, r15
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <prvInsertTimerInActiveList>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	4b c0       	rjmp	.+150    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43a:	d2 01       	movw	r26, r4
     43c:	54 96       	adiw	r26, 0x14	; 20
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	55 97       	sbiw	r26, 0x15	; 21
     444:	c2 01       	movw	r24, r4
     446:	19 95       	eicall
     448:	f2 01       	movw	r30, r4
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	82 ff       	sbrs	r24, 2
     44e:	40 c0       	rjmp	.+128    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     450:	4a 81       	ldd	r20, Y+2	; 0x02
     452:	5b 81       	ldd	r21, Y+3	; 0x03
     454:	6c 81       	ldd	r22, Y+4	; 0x04
     456:	7d 81       	ldd	r23, Y+5	; 0x05
     458:	86 85       	ldd	r24, Z+14	; 0x0e
     45a:	97 85       	ldd	r25, Z+15	; 0x0f
     45c:	a0 89       	ldd	r26, Z+16	; 0x10
     45e:	b1 89       	ldd	r27, Z+17	; 0x11
     460:	9a 01       	movw	r18, r20
     462:	ab 01       	movw	r20, r22
     464:	28 0f       	add	r18, r24
     466:	39 1f       	adc	r19, r25
     468:	4a 1f       	adc	r20, r26
     46a:	5b 1f       	adc	r21, r27
     46c:	c8 2c       	mov	r12, r8
     46e:	d9 2c       	mov	r13, r9
     470:	ea 2c       	mov	r14, r10
     472:	fb 2c       	mov	r15, r11
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	c2 01       	movw	r24, r4
     47c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <xTimerGenericCommand>
     480:	27 c0       	rjmp	.+78     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     482:	d2 01       	movw	r26, r4
     484:	56 96       	adiw	r26, 0x16	; 22
     486:	8c 91       	ld	r24, X
     488:	56 97       	sbiw	r26, 0x16	; 22
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	8c 93       	st	X, r24
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     492:	f2 01       	movw	r30, r4
     494:	86 89       	ldd	r24, Z+22	; 0x16
     496:	81 60       	ori	r24, 0x01	; 1
     498:	86 8b       	std	Z+22, r24	; 0x16
     49a:	4a 81       	ldd	r20, Y+2	; 0x02
     49c:	5b 81       	ldd	r21, Y+3	; 0x03
     49e:	6c 81       	ldd	r22, Y+4	; 0x04
     4a0:	7d 81       	ldd	r23, Y+5	; 0x05
     4a2:	46 87       	std	Z+14, r20	; 0x0e
     4a4:	57 87       	std	Z+15, r21	; 0x0f
     4a6:	60 8b       	std	Z+16, r22	; 0x10
     4a8:	71 8b       	std	Z+17, r23	; 0x11
     4aa:	40 0f       	add	r20, r16
     4ac:	51 1f       	adc	r21, r17
     4ae:	62 1f       	adc	r22, r18
     4b0:	73 1f       	adc	r23, r19
     4b2:	68 01       	movw	r12, r16
     4b4:	79 01       	movw	r14, r18
     4b6:	c2 01       	movw	r24, r4
     4b8:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <prvInsertTimerInActiveList>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4be:	f2 01       	movw	r30, r4
     4c0:	86 89       	ldd	r24, Z+22	; 0x16
     4c2:	81 fd       	sbrc	r24, 1
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c6:	c2 01       	movw	r24, r4
     4c8:	e0 d7       	rcall	.+4032   	; 0x148a <vPortFree>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	86 8b       	std	Z+22, r24	; 0x16
     4d0:	28 2d       	mov	r18, r8
     4d2:	39 2d       	mov	r19, r9
     4d4:	4a 2d       	mov	r20, r10
     4d6:	5b 2d       	mov	r21, r11
     4d8:	66 2d       	mov	r22, r6
     4da:	77 2d       	mov	r23, r7
     4dc:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <xTimerQueue>
     4e0:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
     4e4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xQueueReceive>
     4e8:	81 11       	cpse	r24, r1
     4ea:	6c cf       	rjmp	.-296    	; 0x3c4 <prvTimerTask+0x134>
     4ec:	e5 ce       	rjmp	.-566    	; 0x2b8 <prvTimerTask+0x28>
     4ee:	0e 94 bb 11 	call	0x2376	; 0x2376 <vTaskSuspendAll>
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 3f 18 	call	0x307e	; 0x307e <prvSampleTimeNow>
     4fa:	6b 87       	std	Y+11, r22	; 0x0b
     4fc:	7c 87       	std	Y+12, r23	; 0x0c
     4fe:	8d 87       	std	Y+13, r24	; 0x0d
     500:	9e 87       	std	Y+14, r25	; 0x0e
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	81 11       	cpse	r24, r1
     506:	5b cf       	rjmp	.-330    	; 0x3be <prvTimerTask+0x12e>
     508:	e0 91 af 0e 	lds	r30, 0x0EAF	; 0x800eaf <pxOverflowTimerList>
     50c:	f0 91 b0 0e 	lds	r31, 0x0EB0	; 0x800eb0 <pxOverflowTimerList+0x1>
     510:	80 81       	ld	r24, Z
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	81 11       	cpse	r24, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	28 2c       	mov	r2, r8
     51a:	39 2c       	mov	r3, r9
     51c:	4a 2c       	mov	r4, r10
     51e:	5b 2c       	mov	r5, r11
     520:	37 cf       	rjmp	.-402    	; 0x390 <prvTimerTask+0x100>

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d1 e2       	ldi	r29, 0x21	; 33
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	0c bf       	out	0x3c, r16	; 60

00000532 <__do_copy_data>:
     532:	14 e0       	ldi	r17, 0x04	; 4
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b2 e0       	ldi	r27, 0x02	; 2
     538:	e8 e1       	ldi	r30, 0x18	; 24
     53a:	f8 e5       	ldi	r31, 0x58	; 88
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	0b bf       	out	0x3b, r16	; 59
     540:	02 c0       	rjmp	.+4      	; 0x546 <__do_copy_data+0x14>
     542:	07 90       	elpm	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	aa 30       	cpi	r26, 0x0A	; 10
     548:	b1 07       	cpc	r27, r17
     54a:	d9 f7       	brne	.-10     	; 0x542 <__do_copy_data+0x10>

0000054c <__do_clear_bss>:
     54c:	2f e0       	ldi	r18, 0x0F	; 15
     54e:	aa e0       	ldi	r26, 0x0A	; 10
     550:	b4 e0       	ldi	r27, 0x04	; 4
     552:	01 c0       	rjmp	.+2      	; 0x556 <.do_clear_bss_start>

00000554 <.do_clear_bss_loop>:
     554:	1d 92       	st	X+, r1

00000556 <.do_clear_bss_start>:
     556:	a6 34       	cpi	r26, 0x46	; 70
     558:	b2 07       	cpc	r27, r18
     55a:	e1 f7       	brne	.-8      	; 0x554 <.do_clear_bss_loop>
     55c:	0e 94 1d 19 	call	0x323a	; 0x323a <main>
     560:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <_exit>

00000564 <__bad_interrupt>:
     564:	4d cd       	rjmp	.-1382   	; 0x0 <__vectors>

00000566 <carbonDioxideController_task>:
	for(;;)
	{
	
	if (rc != MHZ19_OK)
	{
		printf("CO2 sensor does not OK");
     566:	0f 2e       	mov	r0, r31
     568:	ff e4       	ldi	r31, 0x4F	; 79
     56a:	2f 2e       	mov	r2, r31
     56c:	f2 e0       	ldi	r31, 0x02	; 2
     56e:	3f 2e       	mov	r3, r31
     570:	f0 2d       	mov	r31, r0
	}
	rc = mh_z19_takeMeassuring();	
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*1000));
	//
	PORTA ^= _BV(PA2);
     572:	d4 e0       	ldi	r29, 0x04	; 4
	appm = mh_z19_getCo2Ppm(appm);
	float u = appm;
	int a = u;
	int b = u*10000-a*10000;
	printf("Carbon:%d.%d",a,b);
     574:	0f 2e       	mov	r0, r31
     576:	f0 e1       	ldi	r31, 0x10	; 16
     578:	8f 2e       	mov	r8, r31
     57a:	f7 e2       	ldi	r31, 0x27	; 39
     57c:	9f 2e       	mov	r9, r31
     57e:	f0 2d       	mov	r31, r0
     580:	0f 2e       	mov	r0, r31
     582:	f6 e6       	ldi	r31, 0x66	; 102
     584:	af 2e       	mov	r10, r31
     586:	f2 e0       	ldi	r31, 0x02	; 2
     588:	bf 2e       	mov	r11, r31
     58a:	f0 2d       	mov	r31, r0
	//mh_z19_setAutoCalibration(false);
	//mh_z19_injectCallBack(myCo2CallBack(appm));
	for(;;)
	{
	
	if (rc != MHZ19_OK)
     58c:	80 91 27 0f 	lds	r24, 0x0F27	; 0x800f27 <rc>
     590:	88 23       	and	r24, r24
     592:	31 f0       	breq	.+12     	; 0x5a0 <carbonDioxideController_task+0x3a>
	{
		printf("CO2 sensor does not OK");
     594:	3f 92       	push	r3
     596:	2f 92       	push	r2
     598:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
	}
	rc = mh_z19_takeMeassuring();	
     5a0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <mh_z19_takeMeassuring>
     5a4:	80 93 27 0f 	sts	0x0F27, r24	; 0x800f27 <rc>
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*1000));
     5a8:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <carbon>
     5ac:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <carbon+0x1>
     5b0:	89 d3       	rcall	.+1810   	; 0xcc4 <carbonDioxideSensor_getReportInterval>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	4a e7       	ldi	r20, 0x7A	; 122
     5b8:	54 e4       	ldi	r21, 0x44	; 68
     5ba:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     5be:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	ae e3       	ldi	r26, 0x3E	; 62
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     5ce:	28 ee       	ldi	r18, 0xE8	; 232
     5d0:	33 e0       	ldi	r19, 0x03	; 3
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     5da:	ca 01       	movw	r24, r20
     5dc:	b9 01       	movw	r22, r18
     5de:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
	//
	PORTA ^= _BV(PA2);
     5e2:	82 b1       	in	r24, 0x02	; 2
     5e4:	8d 27       	eor	r24, r29
     5e6:	82 b9       	out	0x02, r24	; 2
	appm = mh_z19_getCo2Ppm(appm);
     5e8:	80 91 28 0f 	lds	r24, 0x0F28	; 0x800f28 <appm>
     5ec:	90 91 29 0f 	lds	r25, 0x0F29	; 0x800f29 <appm+0x1>
     5f0:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <mh_z19_getCo2Ppm>
     5f4:	c8 2f       	mov	r28, r24
     5f6:	08 2f       	mov	r16, r24
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	10 93 29 0f 	sts	0x0F29, r17	; 0x800f29 <appm+0x1>
     5fe:	00 93 28 0f 	sts	0x0F28, r16	; 0x800f28 <appm>
	float u = appm;
     602:	68 2f       	mov	r22, r24
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 23 1a 	call	0x3446	; 0x3446 <__floatunsisf>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
	int a = u;
	int b = u*10000-a*10000;
	printf("Carbon:%d.%d",a,b);
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e4       	ldi	r19, 0x40	; 64
     616:	4c e1       	ldi	r20, 0x1C	; 28
     618:	56 e4       	ldi	r21, 0x46	; 70
     61a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     61e:	2b 01       	movw	r4, r22
     620:	3c 01       	movw	r6, r24
     622:	08 9d       	mul	r16, r8
     624:	b0 01       	movw	r22, r0
     626:	09 9d       	mul	r16, r9
     628:	70 0d       	add	r23, r0
     62a:	18 9d       	mul	r17, r8
     62c:	70 0d       	add	r23, r0
     62e:	11 24       	eor	r1, r1
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatsisf>
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	c3 01       	movw	r24, r6
     642:	b2 01       	movw	r22, r4
     644:	0e 94 25 19 	call	0x324a	; 0x324a <__subsf3>
     648:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__fixsfsi>
     64c:	7f 93       	push	r23
     64e:	6f 93       	push	r22
     650:	1f 92       	push	r1
     652:	cf 93       	push	r28
     654:	bf 92       	push	r11
     656:	af 92       	push	r10
     658:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
	carbonDioxideSensor_setValue(carbon,u);
     65c:	b7 01       	movw	r22, r14
     65e:	a6 01       	movw	r20, r12
     660:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <carbon>
     664:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <carbon+0x1>
     668:	04 d3       	rcall	.+1544   	; 0xc72 <carbonDioxideSensor_setValue>
	myTime_t time = carbonDioxideSensor_getUpdateTime(carbon);
     66a:	80 91 2a 0f 	lds	r24, 0x0F2A	; 0x800f2a <carbon>
     66e:	90 91 2b 0f 	lds	r25, 0x0F2B	; 0x800f2b <carbon+0x1>
     672:	74 d3       	rcall	.+1768   	; 0xd5c <carbonDioxideSensor_getUpdateTime>
	}
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	85 cf       	rjmp	.-246    	; 0x58c <carbonDioxideController_task+0x26>

00000682 <CO2SensorController_create>:
}

void CO2SensorController_create(carbonDioxideSensor_t co2)
{
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
		carbon = co2;
     688:	90 93 2b 0f 	sts	0x0F2B, r25	; 0x800f2b <carbon+0x1>
     68c:	80 93 2a 0f 	sts	0x0F2A, r24	; 0x800f2a <carbon>
		printf("CO2 sensor started!!!\n");
     690:	83 e7       	ldi	r24, 0x73	; 115
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 2d 29 	call	0x525a	; 0x525a <puts>
		xTaskCreate(carbonDioxideController_task,"COXTask",configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     698:	e1 2c       	mov	r14, r1
     69a:	f1 2c       	mov	r15, r1
     69c:	01 e0       	ldi	r16, 0x01	; 1
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 ec       	ldi	r20, 0xC0	; 192
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	69 e8       	ldi	r22, 0x89	; 137
     6a8:	72 e0       	ldi	r23, 0x02	; 2
     6aa:	83 eb       	ldi	r24, 0xB3	; 179
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 58 10 	call	0x20b0	; 0x20b0 <xTaskCreate>
		//vTaskStartScheduler();
}
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <HumSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     6ba:	0f 2e       	mov	r0, r31
     6bc:	f1 e9       	ldi	r31, 0x91	; 145
     6be:	8f 2e       	mov	r8, r31
     6c0:	f2 e0       	ldi	r31, 0x02	; 2
     6c2:	9f 2e       	mov	r9, r31
     6c4:	f0 2d       	mov	r31, r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
		PORTA ^= _BV(PA1);
     6c6:	12 e0       	ldi	r17, 0x02	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Humility sensor didn't measure!!!");
     6c8:	0f 2e       	mov	r0, r31
     6ca:	f5 eb       	ldi	r31, 0xB5	; 181
     6cc:	2f 2e       	mov	r2, r31
     6ce:	f2 e0       	ldi	r31, 0x02	; 2
     6d0:	3f 2e       	mov	r3, r31
     6d2:	f0 2d       	mov	r31, r0
		humiditySensor_setValue(humSensor,humility);
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
		printf("Hum%d.%d",a,b);
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f0 e1       	ldi	r31, 0x10	; 16
     6d8:	af 2e       	mov	r10, r31
     6da:	f7 e2       	ldi	r31, 0x27	; 39
     6dc:	bf 2e       	mov	r11, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	c7 ed       	ldi	r28, 0xD7	; 215
     6e2:	d2 e0       	ldi	r29, 0x02	; 2

void HumSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     6e4:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <hih8120_wakeup>
     6e8:	88 23       	and	r24, r24
     6ea:	31 f0       	breq	.+12     	; 0x6f8 <HumSensorController_task+0x3e>
		{
			printf("Temperature sensor didn't wakeup!!!");
     6ec:	9f 92       	push	r9
     6ee:	8f 92       	push	r8
     6f0:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     6f8:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <humSensor>
     6fc:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <humSensor+0x1>
     700:	a6 d3       	rcall	.+1868   	; 0xe4e <humiditySensor_getReportInterval>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	4a ef       	ldi	r20, 0xFA	; 250
     708:	53 e4       	ldi	r21, 0x43	; 67
     70a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     70e:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	ae e3       	ldi	r26, 0x3E	; 62
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     71e:	28 ee       	ldi	r18, 0xE8	; 232
     720:	33 e0       	ldi	r19, 0x03	; 3
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     72a:	ca 01       	movw	r24, r20
     72c:	b9 01       	movw	r22, r18
     72e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
		PORTA ^= _BV(PA1);
     732:	82 b1       	in	r24, 0x02	; 2
     734:	81 27       	eor	r24, r17
     736:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     738:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <hih8120_measure>
     73c:	88 23       	and	r24, r24
     73e:	31 f0       	breq	.+12     	; 0x74c <HumSensorController_task+0x92>
		{
			printf("Humility sensor didn't measure!!!");
     740:	3f 92       	push	r3
     742:	2f 92       	push	r2
     744:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(humiditySensor_getReportInterval(humSensor)*500));
     74c:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <humSensor>
     750:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <humSensor+0x1>
     754:	7c d3       	rcall	.+1784   	; 0xe4e <humiditySensor_getReportInterval>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	4a ef       	ldi	r20, 0xFA	; 250
     75c:	53 e4       	ldi	r21, 0x43	; 67
     75e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     762:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	ae e3       	ldi	r26, 0x3E	; 62
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     772:	28 ee       	ldi	r18, 0xE8	; 232
     774:	33 e0       	ldi	r19, 0x03	; 3
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     77e:	ca 01       	movw	r24, r20
     780:	b9 01       	movw	r22, r18
     782:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
		PORTA ^= _BV(PA1);
     786:	82 b1       	in	r24, 0x02	; 2
     788:	81 27       	eor	r24, r17
     78a:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		humility = hih8120_getHumidity();
     78c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <hih8120_getHumidity>
     790:	ab 01       	movw	r20, r22
     792:	bc 01       	movw	r22, r24
     794:	40 93 0a 04 	sts	0x040A, r20	; 0x80040a <__data_end>
     798:	50 93 0b 04 	sts	0x040B, r21	; 0x80040b <__data_end+0x1>
     79c:	60 93 0c 04 	sts	0x040C, r22	; 0x80040c <__data_end+0x2>
     7a0:	70 93 0d 04 	sts	0x040D, r23	; 0x80040d <__data_end+0x3>
		humiditySensor_setValue(humSensor,humility);
     7a4:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <humSensor>
     7a8:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <humSensor+0x1>
     7ac:	28 d3       	rcall	.+1616   	; 0xdfe <humiditySensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = humiditySensor_getValue(humSensor);
     7ae:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <humSensor>
     7b2:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <humSensor+0x1>
     7b6:	70 d3       	rcall	.+1760   	; 0xe98 <humiditySensor_getValue>
     7b8:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__fixsfsi>
     7bc:	6b 01       	movw	r12, r22
     7be:	7c 01       	movw	r14, r24
		int b = humiditySensor_getValue(humSensor)*10000-a*10000;
     7c0:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <humSensor>
     7c4:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <humSensor+0x1>
     7c8:	67 d3       	rcall	.+1742   	; 0xe98 <humiditySensor_getValue>
     7ca:	2b 01       	movw	r4, r22
     7cc:	3c 01       	movw	r6, r24
		myTime_t time = humiditySensor_getUpdateTime(humSensor);
     7ce:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <humSensor>
     7d2:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <humSensor+0x1>
     7d6:	85 d3       	rcall	.+1802   	; 0xee2 <humiditySensor_getUpdateTime>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
		printf("Hum%d.%d",a,b);
     7da:	30 e4       	ldi	r19, 0x40	; 64
     7dc:	4c e1       	ldi	r20, 0x1C	; 28
     7de:	56 e4       	ldi	r21, 0x46	; 70
     7e0:	c3 01       	movw	r24, r6
     7e2:	b2 01       	movw	r22, r4
     7e4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     7e8:	2b 01       	movw	r4, r22
     7ea:	3c 01       	movw	r6, r24
     7ec:	ac 9c       	mul	r10, r12
     7ee:	b0 01       	movw	r22, r0
     7f0:	ad 9c       	mul	r10, r13
     7f2:	70 0d       	add	r23, r0
     7f4:	bc 9c       	mul	r11, r12
     7f6:	70 0d       	add	r23, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	07 2e       	mov	r0, r23
     7fc:	00 0c       	add	r0, r0
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatsisf>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c3 01       	movw	r24, r6
     80c:	b2 01       	movw	r22, r4
     80e:	0e 94 25 19 	call	0x324a	; 0x324a <__subsf3>
     812:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__fixsfsi>
     816:	7f 93       	push	r23
     818:	6f 93       	push	r22
     81a:	df 92       	push	r13
     81c:	cf 92       	push	r12
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     826:	0f 90       	pop	r0
	}
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	58 cf       	rjmp	.-336    	; 0x6e4 <HumSensorController_task+0x2a>

00000834 <HumSensorController_create>:
     834:	ef 92       	push	r14
}

void HumSensorController_create(humiditySensor_t sensor)
{
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
	humSensor = sensor;
     83a:	90 93 2d 0f 	sts	0x0F2D, r25	; 0x800f2d <humSensor+0x1>
     83e:	80 93 2c 0f 	sts	0x0F2C, r24	; 0x800f2c <humSensor>
		printf("Humility sensor started!!!\n");
     842:	80 ee       	ldi	r24, 0xE0	; 224
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 2d 29 	call	0x525a	; 0x525a <puts>
		xTaskCreate(HumSensorController_task, "HumSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     84a:	e1 2c       	mov	r14, r1
     84c:	f1 2c       	mov	r15, r1
     84e:	01 e0       	ldi	r16, 0x01	; 1
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 ec       	ldi	r20, 0xC0	; 192
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	6b ef       	ldi	r22, 0xFB	; 251
     85a:	72 e0       	ldi	r23, 0x02	; 2
     85c:	8d e5       	ldi	r24, 0x5D	; 93
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	0e 94 58 10 	call	0x20b0	; 0x20b0 <xTaskCreate>
		//vTaskStartScheduler();
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	08 95       	ret

0000086c <sevenSegmentDisplayController_task>:
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
		myTime_t nowTime = myTime_getNowTime();
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
		display_7seg_display(time/100,2);
     86c:	0f 2e       	mov	r0, r31
     86e:	f4 e6       	ldi	r31, 0x64	; 100
     870:	8f 2e       	mov	r8, r31
     872:	f0 2d       	mov	r31, r0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     874:	0f 2e       	mov	r0, r31
     876:	f8 ee       	ldi	r31, 0xE8	; 232
     878:	cf 2e       	mov	r12, r31
     87a:	f3 e0       	ldi	r31, 0x03	; 3
     87c:	df 2e       	mov	r13, r31
     87e:	e1 2c       	mov	r14, r1
     880:	f1 2c       	mov	r15, r1
     882:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA7);
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     884:	68 94       	set
     886:	99 24       	eor	r9, r9
     888:	96 f8       	bld	r9, 6
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA6);
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     88a:	68 94       	set
     88c:	aa 24       	eor	r10, r10
     88e:	a5 f8       	bld	r10, 5
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA5);
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     890:	68 94       	set
     892:	bb 24       	eor	r11, r11
     894:	b4 f8       	bld	r11, 4
void sevenSegmentDisplayController_task(void *pvParameters)
{
	while(1)
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
     896:	82 b1       	in	r24, 0x02	; 2
     898:	80 58       	subi	r24, 0x80	; 128
     89a:	82 b9       	out	0x02, r24	; 2
		myTime_t nowTime = myTime_getNowTime();
     89c:	d3 d4       	rcall	.+2470   	; 0x1244 <myTime_getNowTime>
     89e:	ec 01       	movw	r28, r24
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
     8a0:	d7 d4       	rcall	.+2478   	; 0x1250 <myTime_getHour>
     8a2:	8c 01       	movw	r16, r24
     8a4:	ce 01       	movw	r24, r28
     8a6:	d8 d4       	rcall	.+2480   	; 0x1258 <myTime_getMin>
     8a8:	80 9e       	mul	r8, r16
		display_7seg_display(time/100,2);
     8aa:	b0 01       	movw	r22, r0
     8ac:	81 9e       	mul	r8, r17
     8ae:	70 0d       	add	r23, r0
     8b0:	11 24       	eor	r1, r1
     8b2:	86 0f       	add	r24, r22
     8b4:	97 1f       	adc	r25, r23
     8b6:	bc 01       	movw	r22, r24
     8b8:	99 0f       	add	r25, r25
     8ba:	88 0b       	sbc	r24, r24
     8bc:	99 0b       	sbc	r25, r25
     8be:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatsisf>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	48 ec       	ldi	r20, 0xC8	; 200
     8c8:	52 e4       	ldi	r21, 0x42	; 66
     8ca:	0e 94 8a 19 	call	0x3314	; 0x3314 <__divsf3>
     8ce:	42 e0       	ldi	r20, 0x02	; 2
     8d0:	0e 94 3a 1b 	call	0x3674	; 0x3674 <display_7seg_display>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4a e7       	ldi	r20, 0x7A	; 122
     8da:	54 e4       	ldi	r21, 0x44	; 68
     8dc:	60 91 2e 0f 	lds	r22, 0x0F2E	; 0x800f2e <updateTime>
     8e0:	70 91 2f 0f 	lds	r23, 0x0F2F	; 0x800f2f <updateTime+0x1>
     8e4:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <updateTime+0x2>
     8e8:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <updateTime+0x3>
     8ec:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     8f0:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
     8f8:	ae e3       	ldi	r26, 0x3E	; 62
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     900:	a7 01       	movw	r20, r14
     902:	96 01       	movw	r18, r12
     904:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     908:	ca 01       	movw	r24, r20
     90a:	b9 01       	movw	r22, r18
     90c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
     910:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
     912:	80 58       	subi	r24, 0x80	; 128
     914:	82 b9       	out	0x02, r24	; 2
     916:	82 b1       	in	r24, 0x02	; 2
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     918:	89 25       	eor	r24, r9
		temperatureSensor_t temperatureSensor = sensorModelManager_getTemperatureSensor();
     91a:	82 b9       	out	0x02, r24	; 2
     91c:	e9 d3       	rcall	.+2002   	; 0x10f0 <sensorModelManager_getTemperatureSensor>
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
     91e:	7f d3       	rcall	.+1790   	; 0x101e <temperatureSensor_getValue>
     920:	42 e0       	ldi	r20, 0x02	; 2
     922:	0e 94 3a 1b 	call	0x3674	; 0x3674 <display_7seg_display>
     926:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4a e7       	ldi	r20, 0x7A	; 122
     92c:	54 e4       	ldi	r21, 0x44	; 68
     92e:	60 91 2e 0f 	lds	r22, 0x0F2E	; 0x800f2e <updateTime>
     932:	70 91 2f 0f 	lds	r23, 0x0F2F	; 0x800f2f <updateTime+0x1>
     936:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <updateTime+0x2>
     93a:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <updateTime+0x3>
     93e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     942:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	ae e3       	ldi	r26, 0x3E	; 62
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     952:	a7 01       	movw	r20, r14
     954:	96 01       	movw	r18, r12
     956:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     95a:	ca 01       	movw	r24, r20
     95c:	b9 01       	movw	r22, r18
     95e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
     962:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA6);
     964:	89 25       	eor	r24, r9
     966:	82 b9       	out	0x02, r24	; 2
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     968:	82 b1       	in	r24, 0x02	; 2
     96a:	8a 25       	eor	r24, r10
     96c:	82 b9       	out	0x02, r24	; 2
		humiditySensor_t humiditySensor = sensorModelManager_getHumiditySensor();
     96e:	c5 d3       	rcall	.+1930   	; 0x10fa <sensorModelManager_getHumiditySensor>
     970:	93 d2       	rcall	.+1318   	; 0xe98 <humiditySensor_getValue>
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
     972:	42 e0       	ldi	r20, 0x02	; 2
     974:	0e 94 3a 1b 	call	0x3674	; 0x3674 <display_7seg_display>
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     97c:	4a e7       	ldi	r20, 0x7A	; 122
     97e:	54 e4       	ldi	r21, 0x44	; 68
     980:	60 91 2e 0f 	lds	r22, 0x0F2E	; 0x800f2e <updateTime>
     984:	70 91 2f 0f 	lds	r23, 0x0F2F	; 0x800f2f <updateTime+0x1>
     988:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <updateTime+0x2>
     98c:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <updateTime+0x3>
     990:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     994:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
     99c:	ae e3       	ldi	r26, 0x3E	; 62
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     9a4:	a7 01       	movw	r20, r14
     9a6:	96 01       	movw	r18, r12
     9a8:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     9ac:	ca 01       	movw	r24, r20
     9ae:	b9 01       	movw	r22, r18
     9b0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
     9b4:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA5);
     9b6:	8a 25       	eor	r24, r10
     9b8:	82 b9       	out	0x02, r24	; 2
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     9ba:	82 b1       	in	r24, 0x02	; 2
     9bc:	8b 25       	eor	r24, r11
     9be:	82 b9       	out	0x02, r24	; 2
		carbonDioxideSensor_t carbonDioxideSensor = sensorModelManager_getCarbonDioxideSensor();
     9c0:	a1 d3       	rcall	.+1858   	; 0x1104 <sensorModelManager_getCarbonDioxideSensor>
     9c2:	a6 d1       	rcall	.+844    	; 0xd10 <carbonDioxideSensor_getValue>
		display_7seg_display(carbonDioxideSensor_getValue(carbonDioxideSensor),2);
     9c4:	42 e0       	ldi	r20, 0x02	; 2
     9c6:	0e 94 3a 1b 	call	0x3674	; 0x3674 <display_7seg_display>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     9ce:	4a e7       	ldi	r20, 0x7A	; 122
     9d0:	54 e4       	ldi	r21, 0x44	; 68
     9d2:	60 91 2e 0f 	lds	r22, 0x0F2E	; 0x800f2e <updateTime>
     9d6:	70 91 2f 0f 	lds	r23, 0x0F2F	; 0x800f2f <updateTime+0x1>
     9da:	80 91 30 0f 	lds	r24, 0x0F30	; 0x800f30 <updateTime+0x2>
     9de:	90 91 31 0f 	lds	r25, 0x0F31	; 0x800f31 <updateTime+0x3>
     9e2:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     9e6:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	ae e3       	ldi	r26, 0x3E	; 62
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     9f6:	a7 01       	movw	r20, r14
     9f8:	96 01       	movw	r18, r12
     9fa:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     9fe:	ca 01       	movw	r24, r20
     a00:	b9 01       	movw	r22, r18
     a02:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
     a06:	82 b1       	in	r24, 0x02	; 2
     a08:	8b 25       	eor	r24, r11
		PORTA ^= _BV(PA4);
     a0a:	82 b9       	out	0x02, r24	; 2
     a0c:	44 cf       	rjmp	.-376    	; 0x896 <sevenSegmentDisplayController_task+0x2a>

00000a0e <sevenSegmentDisplayController_create>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
	}
}

void sevenSegmentDisplayController_create(float displayUpdateTime)
{
     a12:	0f 93       	push	r16
	updateTime = displayUpdateTime;
     a14:	60 93 2e 0f 	sts	0x0F2E, r22	; 0x800f2e <updateTime>
     a18:	70 93 2f 0f 	sts	0x0F2F, r23	; 0x800f2f <updateTime+0x1>
     a1c:	80 93 30 0f 	sts	0x0F30, r24	; 0x800f30 <updateTime+0x2>
     a20:	90 93 31 0f 	sts	0x0F31, r25	; 0x800f31 <updateTime+0x3>
	//Init 7-segment Display
	display_7seg_initialise(NULL);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <display_7seg_initialise>
	display_7seg_powerUp();
     a2c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <display_7seg_powerUp>
	
	printf("7-segment Display started!!!\n");
     a30:	89 e0       	ldi	r24, 0x09	; 9
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	0e 94 2d 29 	call	0x525a	; 0x525a <puts>
	xTaskCreate(sevenSegmentDisplayController_task, "7-segment Display Task", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     a38:	e1 2c       	mov	r14, r1
     a3a:	f1 2c       	mov	r15, r1
     a3c:	01 e0       	ldi	r16, 0x01	; 1
     a3e:	21 e0       	ldi	r18, 0x01	; 1
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 ec       	ldi	r20, 0xC0	; 192
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	66 e2       	ldi	r22, 0x26	; 38
     a48:	73 e0       	ldi	r23, 0x03	; 3
     a4a:	86 e3       	ldi	r24, 0x36	; 54
     a4c:	94 e0       	ldi	r25, 0x04	; 4
     a4e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <xTaskCreate>
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	08 95       	ret

00000a5a <temperatureSensorController_task>:
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     a5a:	0f 2e       	mov	r0, r31
     a5c:	f1 e9       	ldi	r31, 0x91	; 145
     a5e:	8f 2e       	mov	r8, r31
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	9f 2e       	mov	r9, r31
     a64:	f0 2d       	mov	r31, r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
		PORTA ^= _BV(PA0);
     a66:	11 e0       	ldi	r17, 0x01	; 1
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Temperature sensor didn't measure!!!");
     a68:	0f 2e       	mov	r0, r31
     a6a:	fd e3       	ldi	r31, 0x3D	; 61
     a6c:	2f 2e       	mov	r2, r31
     a6e:	f3 e0       	ldi	r31, 0x03	; 3
     a70:	3f 2e       	mov	r3, r31
     a72:	f0 2d       	mov	r31, r0
		temperatureSensor_setValue(temSensor,temperature);
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
		printf("temperature:%d.%d",a,b);
     a74:	0f 2e       	mov	r0, r31
     a76:	f0 e1       	ldi	r31, 0x10	; 16
     a78:	af 2e       	mov	r10, r31
     a7a:	f7 e2       	ldi	r31, 0x27	; 39
     a7c:	bf 2e       	mov	r11, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	c2 e6       	ldi	r28, 0x62	; 98
     a82:	d3 e0       	ldi	r29, 0x03	; 3

void temperatureSensorController_task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
     a84:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <hih8120_wakeup>
     a88:	88 23       	and	r24, r24
     a8a:	31 f0       	breq	.+12     	; 0xa98 <temperatureSensorController_task+0x3e>
		{
			printf("Temperature sensor didn't wakeup!!!");
     a8c:	9f 92       	push	r9
     a8e:	8f 92       	push	r8
     a90:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     a98:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <temSensor>
     a9c:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <temSensor+0x1>
     aa0:	99 d2       	rcall	.+1330   	; 0xfd4 <temperatureSensor_getReportInterval>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	4a ef       	ldi	r20, 0xFA	; 250
     aa8:	53 e4       	ldi	r21, 0x43	; 67
     aaa:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     aae:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	ae e3       	ldi	r26, 0x3E	; 62
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     abe:	28 ee       	ldi	r18, 0xE8	; 232
     ac0:	33 e0       	ldi	r19, 0x03	; 3
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     aca:	ca 01       	movw	r24, r20
     acc:	b9 01       	movw	r22, r18
     ace:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
		PORTA ^= _BV(PA0);
     ad2:	82 b1       	in	r24, 0x02	; 2
     ad4:	81 27       	eor	r24, r17
     ad6:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     ad8:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <hih8120_measure>
     adc:	88 23       	and	r24, r24
     ade:	31 f0       	breq	.+12     	; 0xaec <temperatureSensorController_task+0x92>
		{
			printf("Temperature sensor didn't measure!!!");
     ae0:	3f 92       	push	r3
     ae2:	2f 92       	push	r2
     ae4:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(temSensor)*500));
     aec:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <temSensor>
     af0:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <temSensor+0x1>
     af4:	6f d2       	rcall	.+1246   	; 0xfd4 <temperatureSensor_getReportInterval>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a ef       	ldi	r20, 0xFA	; 250
     afc:	53 e4       	ldi	r21, 0x43	; 67
     afe:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     b02:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__fixunssfsi>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	ae e3       	ldi	r26, 0x3E	; 62
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__muluhisi3>
     b12:	28 ee       	ldi	r18, 0xE8	; 232
     b14:	33 e0       	ldi	r19, 0x03	; 3
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__udivmodsi4>
     b1e:	ca 01       	movw	r24, r20
     b20:	b9 01       	movw	r22, r18
     b22:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
		PORTA ^= _BV(PA0);
     b26:	82 b1       	in	r24, 0x02	; 2
     b28:	81 27       	eor	r24, r17
     b2a:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     b2c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <hih8120_getTemperature>
     b30:	ab 01       	movw	r20, r22
     b32:	bc 01       	movw	r22, r24
     b34:	40 93 0e 04 	sts	0x040E, r20	; 0x80040e <temperature>
     b38:	50 93 0f 04 	sts	0x040F, r21	; 0x80040f <temperature+0x1>
     b3c:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <temperature+0x2>
     b40:	70 93 11 04 	sts	0x0411, r23	; 0x800411 <temperature+0x3>
		temperatureSensor_setValue(temSensor,temperature);
     b44:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <temSensor>
     b48:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <temSensor+0x1>
     b4c:	1b d2       	rcall	.+1078   	; 0xf84 <temperatureSensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(temSensor);
     b4e:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <temSensor>
     b52:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <temSensor+0x1>
     b56:	63 d2       	rcall	.+1222   	; 0x101e <temperatureSensor_getValue>
     b58:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__fixsfsi>
     b5c:	6b 01       	movw	r12, r22
     b5e:	7c 01       	movw	r14, r24
		int b = temperatureSensor_getValue(temSensor)*10000-a*10000;
     b60:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <temSensor>
     b64:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <temSensor+0x1>
     b68:	5a d2       	rcall	.+1204   	; 0x101e <temperatureSensor_getValue>
     b6a:	2b 01       	movw	r4, r22
     b6c:	3c 01       	movw	r6, r24
		myTime_t time = temperatureSensor_getUpdateTime(temSensor);
     b6e:	80 91 32 0f 	lds	r24, 0x0F32	; 0x800f32 <temSensor>
     b72:	90 91 33 0f 	lds	r25, 0x0F33	; 0x800f33 <temSensor+0x1>
     b76:	78 d2       	rcall	.+1264   	; 0x1068 <temperatureSensor_getUpdateTime>
     b78:	20 e0       	ldi	r18, 0x00	; 0
		printf("temperature:%d.%d",a,b);
     b7a:	30 e4       	ldi	r19, 0x40	; 64
     b7c:	4c e1       	ldi	r20, 0x1C	; 28
     b7e:	56 e4       	ldi	r21, 0x46	; 70
     b80:	c3 01       	movw	r24, r6
     b82:	b2 01       	movw	r22, r4
     b84:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
     b88:	2b 01       	movw	r4, r22
     b8a:	3c 01       	movw	r6, r24
     b8c:	ac 9c       	mul	r10, r12
     b8e:	b0 01       	movw	r22, r0
     b90:	ad 9c       	mul	r10, r13
     b92:	70 0d       	add	r23, r0
     b94:	bc 9c       	mul	r11, r12
     b96:	70 0d       	add	r23, r0
     b98:	11 24       	eor	r1, r1
     b9a:	07 2e       	mov	r0, r23
     b9c:	00 0c       	add	r0, r0
     b9e:	88 0b       	sbc	r24, r24
     ba0:	99 0b       	sbc	r25, r25
     ba2:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatsisf>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c3 01       	movw	r24, r6
     bac:	b2 01       	movw	r22, r4
     bae:	0e 94 25 19 	call	0x324a	; 0x324a <__subsf3>
     bb2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__fixsfsi>
     bb6:	7f 93       	push	r23
     bb8:	6f 93       	push	r22
     bba:	df 92       	push	r13
     bbc:	cf 92       	push	r12
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	0e 94 1a 29 	call	0x5234	; 0x5234 <printf>
     bc6:	0f 90       	pop	r0
	}
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	58 cf       	rjmp	.-336    	; 0xa84 <temperatureSensorController_task+0x2a>

00000bd4 <temperatureSensorController_create>:
     bd4:	ef 92       	push	r14
}

void temperatureSensorController_create(temperatureSensor_t sensor)
{
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
	temSensor = sensor;
     bda:	90 93 33 0f 	sts	0x0F33, r25	; 0x800f33 <temSensor+0x1>
     bde:	80 93 32 0f 	sts	0x0F32, r24	; 0x800f32 <temSensor>
	printf("Temperature sensor started!!!\n");
     be2:	84 e7       	ldi	r24, 0x74	; 116
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 2d 29 	call	0x525a	; 0x525a <puts>
	xTaskCreate(temperatureSensorController_task, "TemperatureSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     bea:	e1 2c       	mov	r14, r1
     bec:	f1 2c       	mov	r15, r1
     bee:	01 e0       	ldi	r16, 0x01	; 1
     bf0:	21 e0       	ldi	r18, 0x01	; 1
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 ec       	ldi	r20, 0xC0	; 192
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	62 e9       	ldi	r22, 0x92	; 146
     bfa:	73 e0       	ldi	r23, 0x03	; 3
     bfc:	8d e2       	ldi	r24, 0x2D	; 45
     bfe:	95 e0       	ldi	r25, 0x05	; 5
     c00:	0e 94 58 10 	call	0x20b0	; 0x20b0 <xTaskCreate>
	//vTaskStartScheduler();
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	08 95       	ret

00000c0c <carbonDioxideSensor_create>:
void carbonDioxideSensor_setReportInterval(carbonDioxideSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	8c e0       	ldi	r24, 0x0C	; 12
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
     c2a:	ec 01       	movw	r28, r24
     c2c:	89 2b       	or	r24, r25
     c2e:	c1 f0       	breq	.+48     	; 0xc60 <carbonDioxideSensor_create+0x54>
     c30:	c8 82       	st	Y, r12
     c32:	d9 82       	std	Y+1, r13	; 0x01
     c34:	ea 82       	std	Y+2, r14	; 0x02
     c36:	fb 82       	std	Y+3, r15	; 0x03
     c38:	1c 82       	std	Y+4, r1	; 0x04
     c3a:	1d 82       	std	Y+5, r1	; 0x05
     c3c:	1e 82       	std	Y+6, r1	; 0x06
     c3e:	1f 82       	std	Y+7, r1	; 0x07
     c40:	c2 d2       	rcall	.+1412   	; 0x11c6 <myTime_create>
     c42:	9b 87       	std	Y+11, r25	; 0x0b
     c44:	8a 87       	std	Y+10, r24	; 0x0a
     c46:	43 e0       	ldi	r20, 0x03	; 3
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	fc d6       	rcall	.+3576   	; 0x1a46 <xQueueGenericCreate>
     c4e:	99 87       	std	Y+9, r25	; 0x09
     c50:	88 87       	std	Y+8, r24	; 0x08
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	a9 01       	movw	r20, r18
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	14 d7       	rcall	.+3624   	; 0x1a88 <xQueueGenericSend>
     c60:	ce 01       	movw	r24, r28
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	08 95       	ret

00000c72 <carbonDioxideSensor_setValue>:

void carbonDioxideSensor_setValue(carbonDioxideSensor_t self,float value)
{
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	6a 01       	movw	r12, r20
     c84:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     c86:	4f ef       	ldi	r20, 0xFF	; 255
     c88:	5f ef       	ldi	r21, 0xFF	; 255
     c8a:	ba 01       	movw	r22, r20
     c8c:	88 85       	ldd	r24, Y+8	; 0x08
     c8e:	99 85       	ldd	r25, Y+9	; 0x09
     c90:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueSemaphoreTake>
	self->value = value;
     c94:	cc 82       	std	Y+4, r12	; 0x04
     c96:	dd 82       	std	Y+5, r13	; 0x05
     c98:	ee 82       	std	Y+6, r14	; 0x06
     c9a:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca0:	aa d2       	rcall	.+1364   	; 0x11f6 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	a9 01       	movw	r20, r18
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	88 85       	ldd	r24, Y+8	; 0x08
     cb0:	99 85       	ldd	r25, Y+9	; 0x09
     cb2:	ea d6       	rcall	.+3540   	; 0x1a88 <xQueueGenericSend>
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	08 95       	ret

00000cc4 <carbonDioxideSensor_getReportInterval>:

float carbonDioxideSensor_getReportInterval(carbonDioxideSensor_t self)
{
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     cd4:	4f ef       	ldi	r20, 0xFF	; 255
     cd6:	5f ef       	ldi	r21, 0xFF	; 255
     cd8:	ba 01       	movw	r22, r20
     cda:	88 85       	ldd	r24, Y+8	; 0x08
     cdc:	99 85       	ldd	r25, Y+9	; 0x09
     cde:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueSemaphoreTake>
	float result = self->reportInterval;
     ce2:	c8 80       	ld	r12, Y
     ce4:	d9 80       	ldd	r13, Y+1	; 0x01
     ce6:	ea 80       	ldd	r14, Y+2	; 0x02
     ce8:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     cea:	00 e0       	ldi	r16, 0x00	; 0
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	a9 01       	movw	r20, r18
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	88 85       	ldd	r24, Y+8	; 0x08
     cf8:	99 85       	ldd	r25, Y+9	; 0x09
     cfa:	c6 d6       	rcall	.+3468   	; 0x1a88 <xQueueGenericSend>
	return result;
}
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	08 95       	ret

00000d10 <carbonDioxideSensor_getValue>:

float carbonDioxideSensor_getValue(carbonDioxideSensor_t self)
{
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d20:	4f ef       	ldi	r20, 0xFF	; 255
     d22:	5f ef       	ldi	r21, 0xFF	; 255
     d24:	ba 01       	movw	r22, r20
     d26:	88 85       	ldd	r24, Y+8	; 0x08
     d28:	99 85       	ldd	r25, Y+9	; 0x09
     d2a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <xQueueSemaphoreTake>
	float result = self->value;
     d2e:	cc 80       	ldd	r12, Y+4	; 0x04
     d30:	dd 80       	ldd	r13, Y+5	; 0x05
     d32:	ee 80       	ldd	r14, Y+6	; 0x06
     d34:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     d36:	00 e0       	ldi	r16, 0x00	; 0
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	a9 01       	movw	r20, r18
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	88 85       	ldd	r24, Y+8	; 0x08
     d44:	99 85       	ldd	r25, Y+9	; 0x09
     d46:	a0 d6       	rcall	.+3392   	; 0x1a88 <xQueueGenericSend>
	return result;
}
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret

00000d5c <carbonDioxideSensor_getUpdateTime>:

myTime_t carbonDioxideSensor_getUpdateTime(carbonDioxideSensor_t self)
{
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d68:	4f ef       	ldi	r20, 0xFF	; 255
     d6a:	5f ef       	ldi	r21, 0xFF	; 255
     d6c:	ba 01       	movw	r22, r20
     d6e:	88 85       	ldd	r24, Y+8	; 0x08
     d70:	99 85       	ldd	r25, Y+9	; 0x09
     d72:	f5 d7       	rcall	.+4074   	; 0x1d5e <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     d74:	ea 84       	ldd	r14, Y+10	; 0x0a
     d76:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	a9 01       	movw	r20, r18
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	88 85       	ldd	r24, Y+8	; 0x08
     d86:	99 85       	ldd	r25, Y+9	; 0x09
     d88:	7f d6       	rcall	.+3326   	; 0x1a88 <xQueueGenericSend>
	return result;
}
     d8a:	c7 01       	movw	r24, r14
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	08 95       	ret

00000d98 <humiditySensor_create>:
void humiditySensor_setReportInterval(humiditySensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	6b 01       	movw	r12, r22
     da8:	7c 01       	movw	r14, r24
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	8c e0       	ldi	r24, 0x0C	; 12
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
     db6:	ec 01       	movw	r28, r24
     db8:	89 2b       	or	r24, r25
     dba:	c1 f0       	breq	.+48     	; 0xdec <humiditySensor_create+0x54>
     dbc:	c8 82       	st	Y, r12
     dbe:	d9 82       	std	Y+1, r13	; 0x01
     dc0:	ea 82       	std	Y+2, r14	; 0x02
     dc2:	fb 82       	std	Y+3, r15	; 0x03
     dc4:	1c 82       	std	Y+4, r1	; 0x04
     dc6:	1d 82       	std	Y+5, r1	; 0x05
     dc8:	1e 82       	std	Y+6, r1	; 0x06
     dca:	1f 82       	std	Y+7, r1	; 0x07
     dcc:	fc d1       	rcall	.+1016   	; 0x11c6 <myTime_create>
     dce:	9b 87       	std	Y+11, r25	; 0x0b
     dd0:	8a 87       	std	Y+10, r24	; 0x0a
     dd2:	43 e0       	ldi	r20, 0x03	; 3
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	36 d6       	rcall	.+3180   	; 0x1a46 <xQueueGenericCreate>
     dda:	99 87       	std	Y+9, r25	; 0x09
     ddc:	88 87       	std	Y+8, r24	; 0x08
     dde:	00 e0       	ldi	r16, 0x00	; 0
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a9 01       	movw	r20, r18
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	4e d6       	rcall	.+3228   	; 0x1a88 <xQueueGenericSend>
     dec:	ce 01       	movw	r24, r28
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	08 95       	ret

00000dfe <humiditySensor_setValue>:

void humiditySensor_setValue(humiditySensor_t self,float value)
{
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	ec 01       	movw	r28, r24
     e0e:	6a 01       	movw	r12, r20
     e10:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e12:	4f ef       	ldi	r20, 0xFF	; 255
     e14:	5f ef       	ldi	r21, 0xFF	; 255
     e16:	ba 01       	movw	r22, r20
     e18:	88 85       	ldd	r24, Y+8	; 0x08
     e1a:	99 85       	ldd	r25, Y+9	; 0x09
     e1c:	a0 d7       	rcall	.+3904   	; 0x1d5e <xQueueSemaphoreTake>
	self->value = value;
     e1e:	cc 82       	std	Y+4, r12	; 0x04
     e20:	dd 82       	std	Y+5, r13	; 0x05
     e22:	ee 82       	std	Y+6, r14	; 0x06
     e24:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     e26:	8a 85       	ldd	r24, Y+10	; 0x0a
     e28:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2a:	e5 d1       	rcall	.+970    	; 0x11f6 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	88 85       	ldd	r24, Y+8	; 0x08
     e3a:	99 85       	ldd	r25, Y+9	; 0x09
     e3c:	25 d6       	rcall	.+3146   	; 0x1a88 <xQueueGenericSend>
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	08 95       	ret

00000e4e <humiditySensor_getReportInterval>:

float humiditySensor_getReportInterval(humiditySensor_t self)
{
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     e5e:	4f ef       	ldi	r20, 0xFF	; 255
     e60:	5f ef       	ldi	r21, 0xFF	; 255
     e62:	ba 01       	movw	r22, r20
     e64:	88 85       	ldd	r24, Y+8	; 0x08
     e66:	99 85       	ldd	r25, Y+9	; 0x09
     e68:	7a d7       	rcall	.+3828   	; 0x1d5e <xQueueSemaphoreTake>
	float result = self->reportInterval;
     e6a:	c8 80       	ld	r12, Y
     e6c:	d9 80       	ldd	r13, Y+1	; 0x01
     e6e:	ea 80       	ldd	r14, Y+2	; 0x02
     e70:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	a9 01       	movw	r20, r18
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	88 85       	ldd	r24, Y+8	; 0x08
     e80:	99 85       	ldd	r25, Y+9	; 0x09
     e82:	02 d6       	rcall	.+3076   	; 0x1a88 <xQueueGenericSend>
	return result;
}
     e84:	c7 01       	movw	r24, r14
     e86:	b6 01       	movw	r22, r12
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	08 95       	ret

00000e98 <humiditySensor_getValue>:

float humiditySensor_getValue(humiditySensor_t self)
{
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     ea8:	4f ef       	ldi	r20, 0xFF	; 255
     eaa:	5f ef       	ldi	r21, 0xFF	; 255
     eac:	ba 01       	movw	r22, r20
     eae:	88 85       	ldd	r24, Y+8	; 0x08
     eb0:	99 85       	ldd	r25, Y+9	; 0x09
     eb2:	55 d7       	rcall	.+3754   	; 0x1d5e <xQueueSemaphoreTake>
	float result = self->value;
     eb4:	cc 80       	ldd	r12, Y+4	; 0x04
     eb6:	dd 80       	ldd	r13, Y+5	; 0x05
     eb8:	ee 80       	ldd	r14, Y+6	; 0x06
     eba:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     ebc:	00 e0       	ldi	r16, 0x00	; 0
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	88 85       	ldd	r24, Y+8	; 0x08
     eca:	99 85       	ldd	r25, Y+9	; 0x09
     ecc:	dd d5       	rcall	.+3002   	; 0x1a88 <xQueueGenericSend>
	return result;
}
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	08 95       	ret

00000ee2 <humiditySensor_getUpdateTime>:

myTime_t humiditySensor_getUpdateTime(humiditySensor_t self)
{
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     eee:	4f ef       	ldi	r20, 0xFF	; 255
     ef0:	5f ef       	ldi	r21, 0xFF	; 255
     ef2:	ba 01       	movw	r22, r20
     ef4:	88 85       	ldd	r24, Y+8	; 0x08
     ef6:	99 85       	ldd	r25, Y+9	; 0x09
     ef8:	32 d7       	rcall	.+3684   	; 0x1d5e <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     efa:	ea 84       	ldd	r14, Y+10	; 0x0a
     efc:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
     efe:	00 e0       	ldi	r16, 0x00	; 0
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	88 85       	ldd	r24, Y+8	; 0x08
     f0c:	99 85       	ldd	r25, Y+9	; 0x09
     f0e:	bc d5       	rcall	.+2936   	; 0x1a88 <xQueueGenericSend>
	return result;
}
     f10:	c7 01       	movw	r24, r14
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <temperatureSensor_create>:
void temperatureSensor_setReportInterval(temperatureSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	6b 01       	movw	r12, r22
     f2e:	7c 01       	movw	r14, r24
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	8c e0       	ldi	r24, 0x0C	; 12
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
     f3c:	ec 01       	movw	r28, r24
     f3e:	89 2b       	or	r24, r25
     f40:	c1 f0       	breq	.+48     	; 0xf72 <temperatureSensor_create+0x54>
     f42:	c8 82       	st	Y, r12
     f44:	d9 82       	std	Y+1, r13	; 0x01
     f46:	ea 82       	std	Y+2, r14	; 0x02
     f48:	fb 82       	std	Y+3, r15	; 0x03
     f4a:	1c 82       	std	Y+4, r1	; 0x04
     f4c:	1d 82       	std	Y+5, r1	; 0x05
     f4e:	1e 82       	std	Y+6, r1	; 0x06
     f50:	1f 82       	std	Y+7, r1	; 0x07
     f52:	39 d1       	rcall	.+626    	; 0x11c6 <myTime_create>
     f54:	9b 87       	std	Y+11, r25	; 0x0b
     f56:	8a 87       	std	Y+10, r24	; 0x0a
     f58:	43 e0       	ldi	r20, 0x03	; 3
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	73 d5       	rcall	.+2790   	; 0x1a46 <xQueueGenericCreate>
     f60:	99 87       	std	Y+9, r25	; 0x09
     f62:	88 87       	std	Y+8, r24	; 0x08
     f64:	00 e0       	ldi	r16, 0x00	; 0
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	a9 01       	movw	r20, r18
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	8b d5       	rcall	.+2838   	; 0x1a88 <xQueueGenericSend>
     f72:	ce 01       	movw	r24, r28
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	cf 90       	pop	r12
     f82:	08 95       	ret

00000f84 <temperatureSensor_setValue>:

void temperatureSensor_setValue(temperatureSensor_t self,float value)
{
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ec 01       	movw	r28, r24
     f94:	6a 01       	movw	r12, r20
     f96:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f98:	4f ef       	ldi	r20, 0xFF	; 255
     f9a:	5f ef       	ldi	r21, 0xFF	; 255
     f9c:	ba 01       	movw	r22, r20
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	99 85       	ldd	r25, Y+9	; 0x09
     fa2:	dd d6       	rcall	.+3514   	; 0x1d5e <xQueueSemaphoreTake>
	self->value = value;
     fa4:	cc 82       	std	Y+4, r12	; 0x04
     fa6:	dd 82       	std	Y+5, r13	; 0x05
     fa8:	ee 82       	std	Y+6, r14	; 0x06
     faa:	ff 82       	std	Y+7, r15	; 0x07
	myTime_updateToNowTime(self->updateTime);
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	22 d1       	rcall	.+580    	; 0x11f6 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     fb2:	00 e0       	ldi	r16, 0x00	; 0
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	88 85       	ldd	r24, Y+8	; 0x08
     fc0:	99 85       	ldd	r25, Y+9	; 0x09
     fc2:	62 d5       	rcall	.+2756   	; 0x1a88 <xQueueGenericSend>
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <temperatureSensor_getReportInterval>:

float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     fe4:	4f ef       	ldi	r20, 0xFF	; 255
     fe6:	5f ef       	ldi	r21, 0xFF	; 255
     fe8:	ba 01       	movw	r22, r20
     fea:	88 85       	ldd	r24, Y+8	; 0x08
     fec:	99 85       	ldd	r25, Y+9	; 0x09
     fee:	b7 d6       	rcall	.+3438   	; 0x1d5e <xQueueSemaphoreTake>
	float result = self->reportInterval;
     ff0:	c8 80       	ld	r12, Y
     ff2:	d9 80       	ldd	r13, Y+1	; 0x01
     ff4:	ea 80       	ldd	r14, Y+2	; 0x02
     ff6:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     ff8:	00 e0       	ldi	r16, 0x00	; 0
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	a9 01       	movw	r20, r18
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	99 85       	ldd	r25, Y+9	; 0x09
    1008:	3f d5       	rcall	.+2686   	; 0x1a88 <xQueueGenericSend>
	return result;
}
    100a:	c7 01       	movw	r24, r14
    100c:	b6 01       	movw	r22, r12
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	08 95       	ret

0000101e <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
    102e:	4f ef       	ldi	r20, 0xFF	; 255
    1030:	5f ef       	ldi	r21, 0xFF	; 255
    1032:	ba 01       	movw	r22, r20
    1034:	88 85       	ldd	r24, Y+8	; 0x08
    1036:	99 85       	ldd	r25, Y+9	; 0x09
    1038:	92 d6       	rcall	.+3364   	; 0x1d5e <xQueueSemaphoreTake>
	float result = self->value;
    103a:	cc 80       	ldd	r12, Y+4	; 0x04
    103c:	dd 80       	ldd	r13, Y+5	; 0x05
    103e:	ee 80       	ldd	r14, Y+6	; 0x06
    1040:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
    1042:	00 e0       	ldi	r16, 0x00	; 0
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	88 85       	ldd	r24, Y+8	; 0x08
    1050:	99 85       	ldd	r25, Y+9	; 0x09
    1052:	1a d5       	rcall	.+2612   	; 0x1a88 <xQueueGenericSend>
	return result;
}
    1054:	c7 01       	movw	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	08 95       	ret

00001068 <temperatureSensor_getUpdateTime>:

myTime_t temperatureSensor_getUpdateTime(temperatureSensor_t self)
{
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
    1074:	4f ef       	ldi	r20, 0xFF	; 255
    1076:	5f ef       	ldi	r21, 0xFF	; 255
    1078:	ba 01       	movw	r22, r20
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	99 85       	ldd	r25, Y+9	; 0x09
    107e:	6f d6       	rcall	.+3294   	; 0x1d5e <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
    1080:	ea 84       	ldd	r14, Y+10	; 0x0a
    1082:	fb 84       	ldd	r15, Y+11	; 0x0b
	xSemaphoreGive(self->readWriteSemaphore);
    1084:	00 e0       	ldi	r16, 0x00	; 0
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	88 85       	ldd	r24, Y+8	; 0x08
    1092:	99 85       	ldd	r25, Y+9	; 0x09
    1094:	f9 d4       	rcall	.+2546   	; 0x1a88 <xQueueGenericSend>
	return result;
}
    1096:	c7 01       	movw	r24, r14
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <sensorModelManager_create>:
void sensorModelManager_setReportInterval(float reportInterval)
{
	temperatureSensor_setReportInterval(temperatureSensor,reportInterval);
	humiditySensor_setReportInterval(humiditySensor,reportInterval);
	carbonDioxideSensor_setReportInterval(carbonDioxideSensor,reportInterval);
}
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	9f e3       	ldi	r25, 0x3F	; 63
    10ac:	b0 dc       	rcall	.-1696   	; 0xa0e <sevenSegmentDisplayController_create>
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e8       	ldi	r24, 0x80	; 128
    10b4:	9f e3       	ldi	r25, 0x3F	; 63
    10b6:	33 df       	rcall	.-410    	; 0xf1e <temperatureSensor_create>
    10b8:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <temperatureSensor+0x1>
    10bc:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <temperatureSensor>
    10c0:	89 dd       	rcall	.-1262   	; 0xbd4 <temperatureSensorController_create>
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 e8       	ldi	r24, 0x80	; 128
    10c8:	9f e3       	ldi	r25, 0x3F	; 63
    10ca:	66 de       	rcall	.-820    	; 0xd98 <humiditySensor_create>
    10cc:	90 93 39 0f 	sts	0x0F39, r25	; 0x800f39 <humiditySensor+0x1>
    10d0:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <humiditySensor>
    10d4:	af db       	rcall	.-2210   	; 0x834 <HumSensorController_create>
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	9f e3       	ldi	r25, 0x3F	; 63
    10de:	96 dd       	rcall	.-1236   	; 0xc0c <carbonDioxideSensor_create>
    10e0:	90 93 35 0f 	sts	0x0F35, r25	; 0x800f35 <carbonDioxideSensor+0x1>
    10e4:	80 93 34 0f 	sts	0x0F34, r24	; 0x800f34 <carbonDioxideSensor>
    10e8:	cc da       	rcall	.-2664   	; 0x682 <CO2SensorController_create>
    10ea:	0c 94 85 11 	jmp	0x230a	; 0x230a <vTaskStartScheduler>
    10ee:	08 95       	ret

000010f0 <sensorModelManager_getTemperatureSensor>:

temperatureSensor_t sensorModelManager_getTemperatureSensor()
{
	return temperatureSensor;
}
    10f0:	80 91 36 0f 	lds	r24, 0x0F36	; 0x800f36 <temperatureSensor>
    10f4:	90 91 37 0f 	lds	r25, 0x0F37	; 0x800f37 <temperatureSensor+0x1>
    10f8:	08 95       	ret

000010fa <sensorModelManager_getHumiditySensor>:

humiditySensor_t sensorModelManager_getHumiditySensor()
{
	return humiditySensor;
}
    10fa:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <humiditySensor>
    10fe:	90 91 39 0f 	lds	r25, 0x0F39	; 0x800f39 <humiditySensor+0x1>
    1102:	08 95       	ret

00001104 <sensorModelManager_getCarbonDioxideSensor>:

carbonDioxideSensor_t sensorModelManager_getCarbonDioxideSensor()
{
	return carbonDioxideSensor;
}
    1104:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <carbonDioxideSensor>
    1108:	90 91 35 0f 	lds	r25, 0x0F35	; 0x800f35 <carbonDioxideSensor+0x1>
    110c:	08 95       	ret

0000110e <nowTimeClockTask>:
}

int myTime_getDay(myTime_t self)
{
	return self->day;
}
    110e:	6e e3       	ldi	r22, 0x3E	; 62
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskDelay>
    111a:	e0 91 3a 0f 	lds	r30, 0x0F3A	; 0x800f3a <nowTime>
    111e:	f0 91 3b 0f 	lds	r31, 0x0F3B	; 0x800f3b <nowTime+0x1>
    1122:	82 85       	ldd	r24, Z+10	; 0x0a
    1124:	93 85       	ldd	r25, Z+11	; 0x0b
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	93 87       	std	Z+11, r25	; 0x0b
    112a:	82 87       	std	Z+10, r24	; 0x0a
    112c:	cc 97       	sbiw	r24, 0x3c	; 60
    112e:	7c f3       	brlt	.-34     	; 0x110e <nowTimeClockTask>
    1130:	80 85       	ldd	r24, Z+8	; 0x08
    1132:	91 85       	ldd	r25, Z+9	; 0x09
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	91 87       	std	Z+9, r25	; 0x09
    1138:	80 87       	std	Z+8, r24	; 0x08
    113a:	13 86       	std	Z+11, r1	; 0x0b
    113c:	12 86       	std	Z+10, r1	; 0x0a
    113e:	cc 97       	sbiw	r24, 0x3c	; 60
    1140:	34 f3       	brlt	.-52     	; 0x110e <nowTimeClockTask>
    1142:	86 81       	ldd	r24, Z+6	; 0x06
    1144:	97 81       	ldd	r25, Z+7	; 0x07
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	97 83       	std	Z+7, r25	; 0x07
    114a:	86 83       	std	Z+6, r24	; 0x06
    114c:	11 86       	std	Z+9, r1	; 0x09
    114e:	10 86       	std	Z+8, r1	; 0x08
    1150:	48 97       	sbiw	r24, 0x18	; 24
    1152:	ec f2       	brlt	.-70     	; 0x110e <nowTimeClockTask>
    1154:	17 82       	std	Z+7, r1	; 0x07
    1156:	16 82       	std	Z+6, r1	; 0x06
    1158:	da cf       	rjmp	.-76     	; 0x110e <nowTimeClockTask>

0000115a <mytime_tryCreateNowTime>:
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <nowTime>
    1164:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <nowTime+0x1>
    1168:	89 2b       	or	r24, r25
    116a:	49 f5       	brne	.+82     	; 0x11be <mytime_tryCreateNowTime+0x64>
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	8c e0       	ldi	r24, 0x0C	; 12
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
    1178:	fc 01       	movw	r30, r24
    117a:	90 93 3b 0f 	sts	0x0F3B, r25	; 0x800f3b <nowTime+0x1>
    117e:	80 93 3a 0f 	sts	0x0F3A, r24	; 0x800f3a <nowTime>
    1182:	89 2b       	or	r24, r25
    1184:	e1 f0       	breq	.+56     	; 0x11be <mytime_tryCreateNowTime+0x64>
    1186:	11 82       	std	Z+1, r1	; 0x01
    1188:	10 82       	st	Z, r1
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	12 82       	std	Z+2, r1	; 0x02
    118e:	15 82       	std	Z+5, r1	; 0x05
    1190:	14 82       	std	Z+4, r1	; 0x04
    1192:	17 82       	std	Z+7, r1	; 0x07
    1194:	16 82       	std	Z+6, r1	; 0x06
    1196:	11 86       	std	Z+9, r1	; 0x09
    1198:	10 86       	std	Z+8, r1	; 0x08
    119a:	13 86       	std	Z+11, r1	; 0x0b
    119c:	12 86       	std	Z+10, r1	; 0x0a
    119e:	88 ea       	ldi	r24, 0xA8	; 168
    11a0:	93 e0       	ldi	r25, 0x03	; 3
    11a2:	0e 94 2d 29 	call	0x525a	; 0x525a <puts>
    11a6:	e1 2c       	mov	r14, r1
    11a8:	f1 2c       	mov	r15, r1
    11aa:	01 e0       	ldi	r16, 0x01	; 1
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 ec       	ldi	r20, 0xC0	; 192
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	62 ec       	ldi	r22, 0xC2	; 194
    11b6:	73 e0       	ldi	r23, 0x03	; 3
    11b8:	87 e8       	ldi	r24, 0x87	; 135
    11ba:	98 e0       	ldi	r25, 0x08	; 8
    11bc:	79 d7       	rcall	.+3826   	; 0x20b0 <xTaskCreate>
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <myTime_create>:
    11c6:	c9 df       	rcall	.-110    	; 0x115a <mytime_tryCreateNowTime>
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	8c e0       	ldi	r24, 0x0C	; 12
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
    11d4:	fc 01       	movw	r30, r24
    11d6:	89 2b       	or	r24, r25
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <myTime_create+0x2c>
    11da:	11 82       	std	Z+1, r1	; 0x01
    11dc:	10 82       	st	Z, r1
    11de:	13 82       	std	Z+3, r1	; 0x03
    11e0:	12 82       	std	Z+2, r1	; 0x02
    11e2:	15 82       	std	Z+5, r1	; 0x05
    11e4:	14 82       	std	Z+4, r1	; 0x04
    11e6:	17 82       	std	Z+7, r1	; 0x07
    11e8:	16 82       	std	Z+6, r1	; 0x06
    11ea:	11 86       	std	Z+9, r1	; 0x09
    11ec:	10 86       	std	Z+8, r1	; 0x08
    11ee:	13 86       	std	Z+11, r1	; 0x0b
    11f0:	12 86       	std	Z+10, r1	; 0x0a
    11f2:	cf 01       	movw	r24, r30
    11f4:	08 95       	ret

000011f6 <myTime_updateToNowTime>:
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
    11fc:	ae df       	rcall	.-164    	; 0x115a <mytime_tryCreateNowTime>
    11fe:	e0 91 3a 0f 	lds	r30, 0x0F3A	; 0x800f3a <nowTime>
    1202:	f0 91 3b 0f 	lds	r31, 0x0F3B	; 0x800f3b <nowTime+0x1>
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	99 83       	std	Y+1, r25	; 0x01
    120c:	88 83       	st	Y, r24
    120e:	e0 91 3a 0f 	lds	r30, 0x0F3A	; 0x800f3a <nowTime>
    1212:	f0 91 3b 0f 	lds	r31, 0x0F3B	; 0x800f3b <nowTime+0x1>
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	9b 83       	std	Y+3, r25	; 0x03
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	84 81       	ldd	r24, Z+4	; 0x04
    1220:	95 81       	ldd	r25, Z+5	; 0x05
    1222:	9d 83       	std	Y+5, r25	; 0x05
    1224:	8c 83       	std	Y+4, r24	; 0x04
    1226:	86 81       	ldd	r24, Z+6	; 0x06
    1228:	97 81       	ldd	r25, Z+7	; 0x07
    122a:	9f 83       	std	Y+7, r25	; 0x07
    122c:	8e 83       	std	Y+6, r24	; 0x06
    122e:	80 85       	ldd	r24, Z+8	; 0x08
    1230:	91 85       	ldd	r25, Z+9	; 0x09
    1232:	99 87       	std	Y+9, r25	; 0x09
    1234:	88 87       	std	Y+8, r24	; 0x08
    1236:	82 85       	ldd	r24, Z+10	; 0x0a
    1238:	93 85       	ldd	r25, Z+11	; 0x0b
    123a:	9b 87       	std	Y+11, r25	; 0x0b
    123c:	8a 87       	std	Y+10, r24	; 0x0a
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <myTime_getNowTime>:
    1244:	8a df       	rcall	.-236    	; 0x115a <mytime_tryCreateNowTime>
    1246:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <nowTime>
    124a:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <nowTime+0x1>
    124e:	08 95       	ret

00001250 <myTime_getHour>:

int myTime_getHour(myTime_t self)
{
	return self->hour;
}
    1250:	fc 01       	movw	r30, r24
    1252:	86 81       	ldd	r24, Z+6	; 0x06
    1254:	97 81       	ldd	r25, Z+7	; 0x07
    1256:	08 95       	ret

00001258 <myTime_getMin>:

int myTime_getMin(myTime_t self)
{
	return self->min;
}
    1258:	fc 01       	movw	r30, r24
    125a:	80 85       	ldd	r24, Z+8	; 0x08
    125c:	91 85       	ldd	r25, Z+9	; 0x09
    125e:	08 95       	ret

00001260 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1266:	ee e1       	ldi	r30, 0x1E	; 30
    1268:	f4 e0       	ldi	r31, 0x04	; 4
    126a:	01 c0       	rjmp	.+2      	; 0x126e <prvInsertBlockIntoFreeList+0xe>
    126c:	f9 01       	movw	r30, r18
    126e:	20 81       	ld	r18, Z
    1270:	31 81       	ldd	r19, Z+1	; 0x01
    1272:	2a 17       	cp	r18, r26
    1274:	3b 07       	cpc	r19, r27
    1276:	d0 f3       	brcs	.-12     	; 0x126c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	af 01       	movw	r20, r30
    127e:	48 0f       	add	r20, r24
    1280:	59 1f       	adc	r21, r25
    1282:	a4 17       	cp	r26, r20
    1284:	b5 07       	cpc	r27, r21
    1286:	49 f4       	brne	.+18     	; 0x129a <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1288:	12 96       	adiw	r26, 0x02	; 2
    128a:	4d 91       	ld	r20, X+
    128c:	5c 91       	ld	r21, X
    128e:	13 97       	sbiw	r26, 0x03	; 3
    1290:	84 0f       	add	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	93 83       	std	Z+3, r25	; 0x03
    1296:	82 83       	std	Z+2, r24	; 0x02
    1298:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    129a:	12 96       	adiw	r26, 0x02	; 2
    129c:	8d 91       	ld	r24, X+
    129e:	9c 91       	ld	r25, X
    12a0:	13 97       	sbiw	r26, 0x03	; 3
    12a2:	ed 01       	movw	r28, r26
    12a4:	c8 0f       	add	r28, r24
    12a6:	d9 1f       	adc	r29, r25
    12a8:	2c 17       	cp	r18, r28
    12aa:	3d 07       	cpc	r19, r29
    12ac:	d9 f4       	brne	.+54     	; 0x12e4 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    12ae:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <pxEnd>
    12b2:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <pxEnd+0x1>
    12b6:	c2 17       	cp	r28, r18
    12b8:	d3 07       	cpc	r29, r19
    12ba:	81 f0       	breq	.+32     	; 0x12dc <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    12bc:	2a 81       	ldd	r18, Y+2	; 0x02
    12be:	3b 81       	ldd	r19, Y+3	; 0x03
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	9c 93       	st	X, r25
    12c8:	8e 93       	st	-X, r24
    12ca:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    12cc:	c0 81       	ld	r28, Z
    12ce:	d1 81       	ldd	r29, Z+1	; 0x01
    12d0:	88 81       	ld	r24, Y
    12d2:	99 81       	ldd	r25, Y+1	; 0x01
    12d4:	11 96       	adiw	r26, 0x01	; 1
    12d6:	9c 93       	st	X, r25
    12d8:	8e 93       	st	-X, r24
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	dc 93       	st	X, r29
    12e0:	ce 93       	st	-X, r28
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	3c 93       	st	X, r19
    12e8:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    12ea:	ae 17       	cp	r26, r30
    12ec:	bf 07       	cpc	r27, r31
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    12f0:	b1 83       	std	Z+1, r27	; 0x01
    12f2:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    130c:	0e 94 bb 11 	call	0x2376	; 0x2376 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    1310:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <pxEnd>
    1314:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <pxEnd+0x1>
    1318:	89 2b       	or	r24, r25
    131a:	41 f5       	brne	.+80     	; 0x136c <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    131c:	ee e1       	ldi	r30, 0x1E	; 30
    131e:	f4 e0       	ldi	r31, 0x04	; 4
    1320:	a2 e2       	ldi	r26, 0x22	; 34
    1322:	b4 e0       	ldi	r27, 0x04	; 4
    1324:	b1 83       	std	Z+1, r27	; 0x01
    1326:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1328:	13 82       	std	Z+3, r1	; 0x03
    132a:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    132c:	e2 ee       	ldi	r30, 0xE2	; 226
    132e:	fd e0       	ldi	r31, 0x0D	; 13
    1330:	f0 93 1d 04 	sts	0x041D, r31	; 0x80041d <pxEnd+0x1>
    1334:	e0 93 1c 04 	sts	0x041C, r30	; 0x80041c <pxEnd>
    pxEnd->xBlockSize = 0;
    1338:	13 82       	std	Z+3, r1	; 0x03
    133a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    133c:	11 82       	std	Z+1, r1	; 0x01
    133e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1340:	80 ec       	ldi	r24, 0xC0	; 192
    1342:	99 e0       	ldi	r25, 0x09	; 9
    1344:	13 96       	adiw	r26, 0x03	; 3
    1346:	9c 93       	st	X, r25
    1348:	8e 93       	st	-X, r24
    134a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    134c:	ed 93       	st	X+, r30
    134e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1350:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <xMinimumEverFreeBytesRemaining+0x1>
    1354:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1358:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <xFreeBytesRemaining+0x1>
    135c:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e8       	ldi	r25, 0x80	; 128
    1364:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <xBlockAllocatedBit+0x1>
    1368:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    136c:	e0 90 12 04 	lds	r14, 0x0412	; 0x800412 <xBlockAllocatedBit>
    1370:	f0 90 13 04 	lds	r15, 0x0413	; 0x800413 <xBlockAllocatedBit+0x1>
    1374:	c7 01       	movw	r24, r14
    1376:	8c 23       	and	r24, r28
    1378:	9d 23       	and	r25, r29
    137a:	89 2b       	or	r24, r25
    137c:	09 f0       	breq	.+2      	; 0x1380 <pvPortMalloc+0x86>
    137e:	75 c0       	rjmp	.+234    	; 0x146a <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1380:	20 97       	sbiw	r28, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <pvPortMalloc+0x8c>
    1384:	75 c0       	rjmp	.+234    	; 0x1470 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1386:	9e 01       	movw	r18, r28
    1388:	2c 5f       	subi	r18, 0xFC	; 252
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    138c:	c2 17       	cp	r28, r18
    138e:	d3 07       	cpc	r29, r19
    1390:	08 f0       	brcs	.+2      	; 0x1394 <pvPortMalloc+0x9a>
    1392:	6e c0       	rjmp	.+220    	; 0x1470 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1394:	21 15       	cp	r18, r1
    1396:	31 05       	cpc	r19, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <pvPortMalloc+0xa2>
    139a:	67 c0       	rjmp	.+206    	; 0x146a <pvPortMalloc+0x170>
    139c:	00 91 1a 04 	lds	r16, 0x041A	; 0x80041a <xFreeBytesRemaining>
    13a0:	10 91 1b 04 	lds	r17, 0x041B	; 0x80041b <xFreeBytesRemaining+0x1>
    13a4:	02 17       	cp	r16, r18
    13a6:	13 07       	cpc	r17, r19
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <pvPortMalloc+0xb2>
    13aa:	5f c0       	rjmp	.+190    	; 0x146a <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    13ac:	c0 91 1e 04 	lds	r28, 0x041E	; 0x80041e <xStart>
    13b0:	d0 91 1f 04 	lds	r29, 0x041F	; 0x80041f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    13b4:	ee e1       	ldi	r30, 0x1E	; 30
    13b6:	f4 e0       	ldi	r31, 0x04	; 4
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <pvPortMalloc+0xc4>
    13ba:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
    13bc:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	82 17       	cp	r24, r18
    13c4:	93 07       	cpc	r25, r19
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <pvPortMalloc+0xd6>
    13c8:	88 81       	ld	r24, Y
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	a9 f7       	brne	.-22     	; 0x13ba <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    13d0:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <pxEnd>
    13d4:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <pxEnd+0x1>
    13d8:	c8 17       	cp	r28, r24
    13da:	d9 07       	cpc	r29, r25
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <pvPortMalloc+0xe6>
    13de:	45 c0       	rjmp	.+138    	; 0x146a <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    13e0:	c0 80       	ld	r12, Z
    13e2:	d1 80       	ldd	r13, Z+1	; 0x01
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	c8 0e       	add	r12, r24
    13e8:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    13ea:	88 81       	ld	r24, Y
    13ec:	99 81       	ldd	r25, Y+1	; 0x01
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    13f2:	4a 81       	ldd	r20, Y+2	; 0x02
    13f4:	5b 81       	ldd	r21, Y+3	; 0x03
    13f6:	42 1b       	sub	r20, r18
    13f8:	53 0b       	sbc	r21, r19
    13fa:	49 30       	cpi	r20, 0x09	; 9
    13fc:	51 05       	cpc	r21, r1
    13fe:	48 f0       	brcs	.+18     	; 0x1412 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1400:	ce 01       	movw	r24, r28
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1406:	fc 01       	movw	r30, r24
    1408:	53 83       	std	Z+3, r21	; 0x03
    140a:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    140c:	3b 83       	std	Y+3, r19	; 0x03
    140e:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    1410:	27 df       	rcall	.-434    	; 0x1260 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	08 1b       	sub	r16, r24
    1418:	19 0b       	sbc	r17, r25
    141a:	10 93 1b 04 	sts	0x041B, r17	; 0x80041b <xFreeBytesRemaining+0x1>
    141e:	00 93 1a 04 	sts	0x041A, r16	; 0x80041a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1422:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <xMinimumEverFreeBytesRemaining>
    1426:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <xMinimumEverFreeBytesRemaining+0x1>
    142a:	02 17       	cp	r16, r18
    142c:	13 07       	cpc	r17, r19
    142e:	20 f4       	brcc	.+8      	; 0x1438 <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1430:	10 93 19 04 	sts	0x0419, r17	; 0x800419 <xMinimumEverFreeBytesRemaining+0x1>
    1434:	00 93 18 04 	sts	0x0418, r16	; 0x800418 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1438:	e8 2a       	or	r14, r24
    143a:	f9 2a       	or	r15, r25
    143c:	fb 82       	std	Y+3, r15	; 0x03
    143e:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    1444:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <xNumberOfSuccessfulAllocations>
    1448:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <xNumberOfSuccessfulAllocations+0x1>
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <xNumberOfSuccessfulAllocations+0x1>
    1452:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1456:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    145a:	c1 14       	cp	r12, r1
    145c:	d1 04       	cpc	r13, r1
    145e:	59 f4       	brne	.+22     	; 0x1476 <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    1460:	0e 94 db 18 	call	0x31b6	; 0x31b6 <vApplicationMallocFailedHook>
    1464:	c1 2c       	mov	r12, r1
    1466:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    146a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>
    146e:	f8 cf       	rjmp	.-16     	; 0x1460 <pvPortMalloc+0x166>
    1470:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>
    1474:	f5 cf       	rjmp	.-22     	; 0x1460 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    1476:	c6 01       	movw	r24, r12
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	91 f1       	breq	.+100    	; 0x14f6 <vPortFree+0x6c>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1492:	fc 01       	movw	r30, r24
    1494:	34 97       	sbiw	r30, 0x04	; 4
    1496:	22 81       	ldd	r18, Z+2	; 0x02
    1498:	33 81       	ldd	r19, Z+3	; 0x03
    149a:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <xBlockAllocatedBit>
    149e:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <xBlockAllocatedBit+0x1>
    14a2:	b9 01       	movw	r22, r18
    14a4:	64 23       	and	r22, r20
    14a6:	75 23       	and	r23, r21
    14a8:	67 2b       	or	r22, r23
    14aa:	29 f1       	breq	.+74     	; 0x14f6 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	67 2b       	or	r22, r23
    14b2:	09 f5       	brne	.+66     	; 0x14f6 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    14b4:	ef 01       	movw	r28, r30
    14b6:	40 95       	com	r20
    14b8:	50 95       	com	r21
    14ba:	24 23       	and	r18, r20
    14bc:	35 23       	and	r19, r21
    14be:	33 83       	std	Z+3, r19	; 0x03
    14c0:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
    14c2:	59 d7       	rcall	.+3762   	; 0x2376 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    14c4:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <xFreeBytesRemaining>
    14c8:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <xFreeBytesRemaining+0x1>
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	82 0f       	add	r24, r18
    14d2:	93 1f       	adc	r25, r19
    14d4:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <xFreeBytesRemaining+0x1>
    14d8:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    14dc:	ce 01       	movw	r24, r28
    14de:	c0 de       	rcall	.-640    	; 0x1260 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    14e0:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <xNumberOfSuccessfulFrees>
    14e4:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <xNumberOfSuccessfulFrees+0x1>
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <xNumberOfSuccessfulFrees+0x1>
    14ee:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    14f2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    14fc:	fc 01       	movw	r30, r24
    14fe:	03 96       	adiw	r24, 0x03	; 3
    1500:	92 83       	std	Z+2, r25	; 0x02
    1502:	81 83       	std	Z+1, r24	; 0x01
    1504:	4f ef       	ldi	r20, 0xFF	; 255
    1506:	5f ef       	ldi	r21, 0xFF	; 255
    1508:	ba 01       	movw	r22, r20
    150a:	43 83       	std	Z+3, r20	; 0x03
    150c:	54 83       	std	Z+4, r21	; 0x04
    150e:	65 83       	std	Z+5, r22	; 0x05
    1510:	76 83       	std	Z+6, r23	; 0x06
    1512:	90 87       	std	Z+8, r25	; 0x08
    1514:	87 83       	std	Z+7, r24	; 0x07
    1516:	92 87       	std	Z+10, r25	; 0x0a
    1518:	81 87       	std	Z+9, r24	; 0x09
    151a:	10 82       	st	Z, r1
    151c:	08 95       	ret

0000151e <vListInitialiseItem>:
    151e:	fc 01       	movw	r30, r24
    1520:	13 86       	std	Z+11, r1	; 0x0b
    1522:	12 86       	std	Z+10, r1	; 0x0a
    1524:	08 95       	ret

00001526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1530:	08 81       	ld	r16, Y
    1532:	19 81       	ldd	r17, Y+1	; 0x01
    1534:	2a 81       	ldd	r18, Y+2	; 0x02
    1536:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1538:	0f 3f       	cpi	r16, 0xFF	; 255
    153a:	4f ef       	ldi	r20, 0xFF	; 255
    153c:	14 07       	cpc	r17, r20
    153e:	24 07       	cpc	r18, r20
    1540:	34 07       	cpc	r19, r20
    1542:	21 f4       	brne	.+8      	; 0x154c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1544:	fc 01       	movw	r30, r24
    1546:	a1 85       	ldd	r26, Z+9	; 0x09
    1548:	b2 85       	ldd	r27, Z+10	; 0x0a
    154a:	11 c0       	rjmp	.+34     	; 0x156e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    154c:	dc 01       	movw	r26, r24
    154e:	13 96       	adiw	r26, 0x03	; 3
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <vListInsert+0x2e>
    1552:	df 01       	movw	r26, r30
    1554:	14 96       	adiw	r26, 0x04	; 4
    1556:	ed 91       	ld	r30, X+
    1558:	fc 91       	ld	r31, X
    155a:	15 97       	sbiw	r26, 0x05	; 5
    155c:	40 81       	ld	r20, Z
    155e:	51 81       	ldd	r21, Z+1	; 0x01
    1560:	62 81       	ldd	r22, Z+2	; 0x02
    1562:	73 81       	ldd	r23, Z+3	; 0x03
    1564:	04 17       	cp	r16, r20
    1566:	15 07       	cpc	r17, r21
    1568:	26 07       	cpc	r18, r22
    156a:	37 07       	cpc	r19, r23
    156c:	90 f7       	brcc	.-28     	; 0x1552 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    156e:	14 96       	adiw	r26, 0x04	; 4
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	15 97       	sbiw	r26, 0x05	; 5
    1576:	fd 83       	std	Y+5, r31	; 0x05
    1578:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    157a:	d7 83       	std	Z+7, r29	; 0x07
    157c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    157e:	bf 83       	std	Y+7, r27	; 0x07
    1580:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1582:	15 96       	adiw	r26, 0x05	; 5
    1584:	dc 93       	st	X, r29
    1586:	ce 93       	st	-X, r28
    1588:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    158a:	9b 87       	std	Y+11, r25	; 0x0b
    158c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    158e:	fc 01       	movw	r30, r24
    1590:	20 81       	ld	r18, Z
    1592:	2f 5f       	subi	r18, 0xFF	; 255
    1594:	20 83       	st	Z, r18
}
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    15a6:	a2 85       	ldd	r26, Z+10	; 0x0a
    15a8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    15aa:	c4 81       	ldd	r28, Z+4	; 0x04
    15ac:	d5 81       	ldd	r29, Z+5	; 0x05
    15ae:	86 81       	ldd	r24, Z+6	; 0x06
    15b0:	97 81       	ldd	r25, Z+7	; 0x07
    15b2:	9f 83       	std	Y+7, r25	; 0x07
    15b4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    15b6:	c6 81       	ldd	r28, Z+6	; 0x06
    15b8:	d7 81       	ldd	r29, Z+7	; 0x07
    15ba:	84 81       	ldd	r24, Z+4	; 0x04
    15bc:	95 81       	ldd	r25, Z+5	; 0x05
    15be:	9d 83       	std	Y+5, r25	; 0x05
    15c0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	8d 91       	ld	r24, X+
    15c6:	9c 91       	ld	r25, X
    15c8:	12 97       	sbiw	r26, 0x02	; 2
    15ca:	e8 17       	cp	r30, r24
    15cc:	f9 07       	cpc	r31, r25
    15ce:	31 f4       	brne	.+12     	; 0x15dc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    15d0:	86 81       	ldd	r24, Z+6	; 0x06
    15d2:	97 81       	ldd	r25, Z+7	; 0x07
    15d4:	12 96       	adiw	r26, 0x02	; 2
    15d6:	9c 93       	st	X, r25
    15d8:	8e 93       	st	-X, r24
    15da:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    15dc:	13 86       	std	Z+11, r1	; 0x0b
    15de:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    15e0:	8c 91       	ld	r24, X
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    15e6:	8c 91       	ld	r24, X
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    15ee:	fc 01       	movw	r30, r24
    15f0:	60 83       	st	Z, r22
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	70 83       	st	Z, r23
    15f6:	31 97       	sbiw	r30, 0x01	; 1
    15f8:	10 82       	st	Z, r1
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	10 82       	st	Z, r1
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	20 e8       	ldi	r18, 0x80	; 128
    1602:	20 83       	st	Z, r18
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	10 82       	st	Z, r1
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	10 82       	st	Z, r1
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	10 82       	st	Z, r1
    1610:	77 97       	sbiw	r30, 0x17	; 23
    1612:	40 83       	st	Z, r20
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	50 83       	st	Z, r21
    1618:	86 97       	sbiw	r24, 0x26	; 38
    161a:	08 95       	ret

0000161c <xPortStartScheduler>:
    161c:	a8 95       	wdr
    161e:	90 ec       	ldi	r25, 0xC0	; 192
    1620:	88 e1       	ldi	r24, 0x18	; 24
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	a8 95       	wdr
    1628:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1632:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    1636:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    163a:	cd 91       	ld	r28, X+
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	dd 91       	ld	r29, X+
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	bf 91       	pop	r27
    164c:	af 91       	pop	r26
    164e:	9f 91       	pop	r25
    1650:	8f 91       	pop	r24
    1652:	7f 91       	pop	r23
    1654:	6f 91       	pop	r22
    1656:	5f 91       	pop	r21
    1658:	4f 91       	pop	r20
    165a:	3f 91       	pop	r19
    165c:	2f 91       	pop	r18
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	af 90       	pop	r10
    166e:	9f 90       	pop	r9
    1670:	8f 90       	pop	r8
    1672:	7f 90       	pop	r7
    1674:	6f 90       	pop	r6
    1676:	5f 90       	pop	r5
    1678:	4f 90       	pop	r4
    167a:	3f 90       	pop	r3
    167c:	2f 90       	pop	r2
    167e:	1f 90       	pop	r1
    1680:	0f 90       	pop	r0
    1682:	0c be       	out	0x3c, r0	; 60
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	08 95       	ret
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	08 95       	ret

00001694 <vPortYield>:
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	0f 92       	push	r0
    169c:	0b b6       	in	r0, 0x3b	; 59
    169e:	0f 92       	push	r0
    16a0:	0c b6       	in	r0, 0x3c	; 60
    16a2:	0f 92       	push	r0
    16a4:	1f 92       	push	r1
    16a6:	11 24       	eor	r1, r1
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    16e8:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    16ec:	0d b6       	in	r0, 0x3d	; 61
    16ee:	0d 92       	st	X+, r0
    16f0:	0e b6       	in	r0, 0x3e	; 62
    16f2:	0d 92       	st	X+, r0
    16f4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <vTaskSwitchContext>
    16f8:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    16fc:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    1700:	cd 91       	ld	r28, X+
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	dd 91       	ld	r29, X+
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	bf 90       	pop	r11
    1732:	af 90       	pop	r10
    1734:	9f 90       	pop	r9
    1736:	8f 90       	pop	r8
    1738:	7f 90       	pop	r7
    173a:	6f 90       	pop	r6
    173c:	5f 90       	pop	r5
    173e:	4f 90       	pop	r4
    1740:	3f 90       	pop	r3
    1742:	2f 90       	pop	r2
    1744:	1f 90       	pop	r1
    1746:	0f 90       	pop	r0
    1748:	0c be       	out	0x3c, r0	; 60
    174a:	0f 90       	pop	r0
    174c:	0b be       	out	0x3b, r0	; 59
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	08 95       	ret

00001756 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1756:	0f 92       	push	r0
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	0f 92       	push	r0
    175e:	0b b6       	in	r0, 0x3b	; 59
    1760:	0f 92       	push	r0
    1762:	0c b6       	in	r0, 0x3c	; 60
    1764:	0f 92       	push	r0
    1766:	1f 92       	push	r1
    1768:	11 24       	eor	r1, r1
    176a:	2f 92       	push	r2
    176c:	3f 92       	push	r3
    176e:	4f 92       	push	r4
    1770:	5f 92       	push	r5
    1772:	6f 92       	push	r6
    1774:	7f 92       	push	r7
    1776:	8f 92       	push	r8
    1778:	9f 92       	push	r9
    177a:	af 92       	push	r10
    177c:	bf 92       	push	r11
    177e:	cf 92       	push	r12
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
    17a6:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    17aa:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    17ae:	0d b6       	in	r0, 0x3d	; 61
    17b0:	0d 92       	st	X+, r0
    17b2:	0e b6       	in	r0, 0x3e	; 62
    17b4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    17b6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    17b8:	f2 d5       	rcall	.+3044   	; 0x239e <xTaskIncrementTick>
    17ba:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    17bc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    17c0:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    17c4:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    17c8:	cd 91       	ld	r28, X+
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	dd 91       	ld	r29, X+
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	7f 90       	pop	r7
    1802:	6f 90       	pop	r6
    1804:	5f 90       	pop	r5
    1806:	4f 90       	pop	r4
    1808:	3f 90       	pop	r3
    180a:	2f 90       	pop	r2
    180c:	1f 90       	pop	r1
    180e:	0f 90       	pop	r0
    1810:	0c be       	out	0x3c, r0	; 60
    1812:	0f 90       	pop	r0
    1814:	0b be       	out	0x3b, r0	; 59
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    181c:	08 95       	ret

0000181e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    181e:	9b df       	rcall	.-202    	; 0x1756 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1820:	18 95       	reti

00001822 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	0f 92       	push	r0
    1828:	fc 01       	movw	r30, r24
    182a:	96 8d       	ldd	r25, Z+30	; 0x1e
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	91 11       	cpse	r25, r1
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	08 95       	ret

00001838 <prvCopyDataToQueue>:
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	04 2f       	mov	r16, r20
    1844:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1846:	48 a1       	ldd	r20, Y+32	; 0x20
    1848:	41 11       	cpse	r20, r1
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <prvCopyDataToQueue+0x2c>
    184c:	88 81       	ld	r24, Y
    184e:	99 81       	ldd	r25, Y+1	; 0x01
    1850:	89 2b       	or	r24, r25
    1852:	09 f0       	breq	.+2      	; 0x1856 <prvCopyDataToQueue+0x1e>
    1854:	42 c0       	rjmp	.+132    	; 0x18da <prvCopyDataToQueue+0xa2>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <xTaskPriorityDisinherit>
    185e:	1d 82       	std	Y+5, r1	; 0x05
    1860:	1c 82       	std	Y+4, r1	; 0x04
    1862:	42 c0       	rjmp	.+132    	; 0x18e8 <prvCopyDataToQueue+0xb0>
    1864:	01 11       	cpse	r16, r1
    1866:	17 c0       	rjmp	.+46     	; 0x1896 <prvCopyDataToQueue+0x5e>
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	0e 94 0a 29 	call	0x5214	; 0x5214 <memcpy>
    1872:	28 a1       	ldd	r18, Y+32	; 0x20
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	82 0f       	add	r24, r18
    187a:	91 1d       	adc	r25, r1
    187c:	9b 83       	std	Y+3, r25	; 0x03
    187e:	8a 83       	std	Y+2, r24	; 0x02
    1880:	2c 81       	ldd	r18, Y+4	; 0x04
    1882:	3d 81       	ldd	r19, Y+5	; 0x05
    1884:	82 17       	cp	r24, r18
    1886:	93 07       	cpc	r25, r19
    1888:	50 f1       	brcs	.+84     	; 0x18de <prvCopyDataToQueue+0xa6>
    188a:	88 81       	ld	r24, Y
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	9b 83       	std	Y+3, r25	; 0x03
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	29 c0       	rjmp	.+82     	; 0x18e8 <prvCopyDataToQueue+0xb0>
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	0e 94 0a 29 	call	0x5214	; 0x5214 <memcpy>
    18a0:	88 a1       	ldd	r24, Y+32	; 0x20
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	91 95       	neg	r25
    18a6:	81 95       	neg	r24
    18a8:	91 09       	sbc	r25, r1
    18aa:	2e 81       	ldd	r18, Y+6	; 0x06
    18ac:	3f 81       	ldd	r19, Y+7	; 0x07
    18ae:	28 0f       	add	r18, r24
    18b0:	39 1f       	adc	r19, r25
    18b2:	3f 83       	std	Y+7, r19	; 0x07
    18b4:	2e 83       	std	Y+6, r18	; 0x06
    18b6:	48 81       	ld	r20, Y
    18b8:	59 81       	ldd	r21, Y+1	; 0x01
    18ba:	24 17       	cp	r18, r20
    18bc:	35 07       	cpc	r19, r21
    18be:	30 f4       	brcc	.+12     	; 0x18cc <prvCopyDataToQueue+0x94>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	82 0f       	add	r24, r18
    18c6:	93 1f       	adc	r25, r19
    18c8:	9f 83       	std	Y+7, r25	; 0x07
    18ca:	8e 83       	std	Y+6, r24	; 0x06
    18cc:	02 30       	cpi	r16, 0x02	; 2
    18ce:	49 f4       	brne	.+18     	; 0x18e2 <prvCopyDataToQueue+0xaa>
    18d0:	11 23       	and	r17, r17
    18d2:	49 f0       	breq	.+18     	; 0x18e6 <prvCopyDataToQueue+0xae>
    18d4:	11 50       	subi	r17, 0x01	; 1
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <prvCopyDataToQueue+0xb0>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <prvCopyDataToQueue+0xb0>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <prvCopyDataToQueue+0xb0>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <prvCopyDataToQueue+0xb0>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	1f 5f       	subi	r17, 0xFF	; 255
    18ea:	1e 8f       	std	Y+30, r17	; 0x1e
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <prvCopyDataFromQueue>:
    18f6:	fc 01       	movw	r30, r24
    18f8:	40 a1       	ldd	r20, Z+32	; 0x20
    18fa:	44 23       	and	r20, r20
    18fc:	a9 f0       	breq	.+42     	; 0x1928 <prvCopyDataFromQueue+0x32>
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	26 81       	ldd	r18, Z+6	; 0x06
    1902:	37 81       	ldd	r19, Z+7	; 0x07
    1904:	24 0f       	add	r18, r20
    1906:	35 1f       	adc	r19, r21
    1908:	37 83       	std	Z+7, r19	; 0x07
    190a:	26 83       	std	Z+6, r18	; 0x06
    190c:	84 81       	ldd	r24, Z+4	; 0x04
    190e:	95 81       	ldd	r25, Z+5	; 0x05
    1910:	28 17       	cp	r18, r24
    1912:	39 07       	cpc	r19, r25
    1914:	20 f0       	brcs	.+8      	; 0x191e <prvCopyDataFromQueue+0x28>
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	97 83       	std	Z+7, r25	; 0x07
    191c:	86 83       	std	Z+6, r24	; 0x06
    191e:	cb 01       	movw	r24, r22
    1920:	66 81       	ldd	r22, Z+6	; 0x06
    1922:	77 81       	ldd	r23, Z+7	; 0x07
    1924:	0c 94 0a 29 	jmp	0x5214	; 0x5214 <memcpy>
    1928:	08 95       	ret

0000192a <prvUnlockQueue>:
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	8c 01       	movw	r16, r24
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	0f 92       	push	r0
    193c:	fc 01       	movw	r30, r24
    193e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1940:	1c 16       	cp	r1, r28
    1942:	ac f4       	brge	.+42     	; 0x196e <prvUnlockQueue+0x44>
    1944:	83 89       	ldd	r24, Z+19	; 0x13
    1946:	81 11       	cpse	r24, r1
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <prvUnlockQueue+0x2c>
    194a:	11 c0       	rjmp	.+34     	; 0x196e <prvUnlockQueue+0x44>
    194c:	f8 01       	movw	r30, r16
    194e:	83 89       	ldd	r24, Z+19	; 0x13
    1950:	81 11       	cpse	r24, r1
    1952:	05 c0       	rjmp	.+10     	; 0x195e <prvUnlockQueue+0x34>
    1954:	0c c0       	rjmp	.+24     	; 0x196e <prvUnlockQueue+0x44>
    1956:	78 01       	movw	r14, r16
    1958:	f3 e1       	ldi	r31, 0x13	; 19
    195a:	ef 0e       	add	r14, r31
    195c:	f1 1c       	adc	r15, r1
    195e:	c7 01       	movw	r24, r14
    1960:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskRemoveFromEventList>
    1964:	81 11       	cpse	r24, r1
    1966:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <vTaskMissedYield>
    196a:	c1 50       	subi	r28, 0x01	; 1
    196c:	79 f7       	brne	.-34     	; 0x194c <prvUnlockQueue+0x22>
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	f8 01       	movw	r30, r16
    1972:	82 a3       	std	Z+34, r24	; 0x22
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	0f 92       	push	r0
    197e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1980:	1c 16       	cp	r1, r28
    1982:	a4 f4       	brge	.+40     	; 0x19ac <prvUnlockQueue+0x82>
    1984:	80 85       	ldd	r24, Z+8	; 0x08
    1986:	81 11       	cpse	r24, r1
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <prvUnlockQueue+0x6c>
    198a:	10 c0       	rjmp	.+32     	; 0x19ac <prvUnlockQueue+0x82>
    198c:	f8 01       	movw	r30, r16
    198e:	80 85       	ldd	r24, Z+8	; 0x08
    1990:	81 11       	cpse	r24, r1
    1992:	05 c0       	rjmp	.+10     	; 0x199e <prvUnlockQueue+0x74>
    1994:	0b c0       	rjmp	.+22     	; 0x19ac <prvUnlockQueue+0x82>
    1996:	78 01       	movw	r14, r16
    1998:	f8 e0       	ldi	r31, 0x08	; 8
    199a:	ef 0e       	add	r14, r31
    199c:	f1 1c       	adc	r15, r1
    199e:	c7 01       	movw	r24, r14
    19a0:	f7 d7       	rcall	.+4078   	; 0x2990 <xTaskRemoveFromEventList>
    19a2:	81 11       	cpse	r24, r1
    19a4:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <vTaskMissedYield>
    19a8:	c1 50       	subi	r28, 0x01	; 1
    19aa:	81 f7       	brne	.-32     	; 0x198c <prvUnlockQueue+0x62>
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	f8 01       	movw	r30, r16
    19b0:	81 a3       	std	Z+33, r24	; 0x21
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret

000019c2 <xQueueGenericReset>:
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	0f 92       	push	r0
    19ce:	e8 81       	ld	r30, Y
    19d0:	f9 81       	ldd	r31, Y+1	; 0x01
    19d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d4:	28 a1       	ldd	r18, Y+32	; 0x20
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	82 9f       	mul	r24, r18
    19dc:	a0 01       	movw	r20, r0
    19de:	83 9f       	mul	r24, r19
    19e0:	50 0d       	add	r21, r0
    19e2:	92 9f       	mul	r25, r18
    19e4:	50 0d       	add	r21, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	4e 0f       	add	r20, r30
    19ea:	5f 1f       	adc	r21, r31
    19ec:	5d 83       	std	Y+5, r21	; 0x05
    19ee:	4c 83       	std	Y+4, r20	; 0x04
    19f0:	1e 8e       	std	Y+30, r1	; 0x1e
    19f2:	fb 83       	std	Y+3, r31	; 0x03
    19f4:	ea 83       	std	Y+2, r30	; 0x02
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	82 9f       	mul	r24, r18
    19fa:	a0 01       	movw	r20, r0
    19fc:	83 9f       	mul	r24, r19
    19fe:	50 0d       	add	r21, r0
    1a00:	92 9f       	mul	r25, r18
    1a02:	50 0d       	add	r21, r0
    1a04:	11 24       	eor	r1, r1
    1a06:	cf 01       	movw	r24, r30
    1a08:	84 0f       	add	r24, r20
    1a0a:	95 1f       	adc	r25, r21
    1a0c:	9f 83       	std	Y+7, r25	; 0x07
    1a0e:	8e 83       	std	Y+6, r24	; 0x06
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	89 a3       	std	Y+33, r24	; 0x21
    1a14:	8a a3       	std	Y+34, r24	; 0x22
    1a16:	61 11       	cpse	r22, r1
    1a18:	0a c0       	rjmp	.+20     	; 0x1a2e <xQueueGenericReset+0x6c>
    1a1a:	88 85       	ldd	r24, Y+8	; 0x08
    1a1c:	88 23       	and	r24, r24
    1a1e:	69 f0       	breq	.+26     	; 0x1a3a <xQueueGenericReset+0x78>
    1a20:	ce 01       	movw	r24, r28
    1a22:	08 96       	adiw	r24, 0x08	; 8
    1a24:	b5 d7       	rcall	.+3946   	; 0x2990 <xTaskRemoveFromEventList>
    1a26:	88 23       	and	r24, r24
    1a28:	41 f0       	breq	.+16     	; 0x1a3a <xQueueGenericReset+0x78>
    1a2a:	34 de       	rcall	.-920    	; 0x1694 <vPortYield>
    1a2c:	06 c0       	rjmp	.+12     	; 0x1a3a <xQueueGenericReset+0x78>
    1a2e:	ce 01       	movw	r24, r28
    1a30:	08 96       	adiw	r24, 0x08	; 8
    1a32:	64 dd       	rcall	.-1336   	; 0x14fc <vListInitialise>
    1a34:	ce 01       	movw	r24, r28
    1a36:	43 96       	adiw	r24, 0x13	; 19
    1a38:	61 dd       	rcall	.-1342   	; 0x14fc <vListInitialise>
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <xQueueGenericCreate>:
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	08 2f       	mov	r16, r24
    1a50:	16 2f       	mov	r17, r22
    1a52:	86 9f       	mul	r24, r22
    1a54:	c0 01       	movw	r24, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	83 96       	adiw	r24, 0x23	; 35
    1a5a:	4f dc       	rcall	.-1890   	; 0x12fa <pvPortMalloc>
    1a5c:	ec 01       	movw	r28, r24
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	69 f0       	breq	.+26     	; 0x1a7c <xQueueGenericCreate+0x36>
    1a62:	11 11       	cpse	r17, r1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <xQueueGenericCreate+0x26>
    1a66:	99 83       	std	Y+1, r25	; 0x01
    1a68:	88 83       	st	Y, r24
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <xQueueGenericCreate+0x2c>
    1a6c:	83 96       	adiw	r24, 0x23	; 35
    1a6e:	99 83       	std	Y+1, r25	; 0x01
    1a70:	88 83       	st	Y, r24
    1a72:	0f 8f       	std	Y+31, r16	; 0x1f
    1a74:	18 a3       	std	Y+32, r17	; 0x20
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	ce 01       	movw	r24, r28
    1a7a:	a3 df       	rcall	.-186    	; 0x19c2 <xQueueGenericReset>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	08 95       	ret

00001a88 <xQueueGenericSend>:
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	29 97       	sbiw	r28, 0x09	; 9
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	7c 01       	movw	r14, r24
    1ab0:	5b 01       	movw	r10, r22
    1ab2:	2e 83       	std	Y+6, r18	; 0x06
    1ab4:	3f 83       	std	Y+7, r19	; 0x07
    1ab6:	48 87       	std	Y+8, r20	; 0x08
    1ab8:	59 87       	std	Y+9, r21	; 0x09
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    1abc:	99 24       	eor	r9, r9
    1abe:	93 94       	inc	r9
    1ac0:	6c 01       	movw	r12, r24
    1ac2:	88 e0       	ldi	r24, 0x08	; 8
    1ac4:	c8 0e       	add	r12, r24
    1ac6:	d1 1c       	adc	r13, r1
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	0f 92       	push	r0
    1ace:	f7 01       	movw	r30, r14
    1ad0:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ad2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ad4:	98 17       	cp	r25, r24
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <xQueueGenericSend+0x54>
    1ad8:	02 30       	cpi	r16, 0x02	; 2
    1ada:	a9 f4       	brne	.+42     	; 0x1b06 <xQueueGenericSend+0x7e>
    1adc:	40 2f       	mov	r20, r16
    1ade:	b5 01       	movw	r22, r10
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	aa de       	rcall	.-684    	; 0x1838 <prvCopyDataToQueue>
    1ae4:	f7 01       	movw	r30, r14
    1ae6:	93 89       	ldd	r25, Z+19	; 0x13
    1ae8:	99 23       	and	r25, r25
    1aea:	39 f0       	breq	.+14     	; 0x1afa <xQueueGenericSend+0x72>
    1aec:	c7 01       	movw	r24, r14
    1aee:	43 96       	adiw	r24, 0x13	; 19
    1af0:	4f d7       	rcall	.+3742   	; 0x2990 <xTaskRemoveFromEventList>
    1af2:	88 23       	and	r24, r24
    1af4:	21 f0       	breq	.+8      	; 0x1afe <xQueueGenericSend+0x76>
    1af6:	ce dd       	rcall	.-1124   	; 0x1694 <vPortYield>
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <xQueueGenericSend+0x76>
    1afa:	81 11       	cpse	r24, r1
    1afc:	cb dd       	rcall	.-1130   	; 0x1694 <vPortYield>
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	4b c0       	rjmp	.+150    	; 0x1b9c <xQueueGenericSend+0x114>
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	a8 85       	ldd	r26, Y+8	; 0x08
    1b0c:	b9 85       	ldd	r27, Y+9	; 0x09
    1b0e:	89 2b       	or	r24, r25
    1b10:	8a 2b       	or	r24, r26
    1b12:	8b 2b       	or	r24, r27
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <xQueueGenericSend+0x96>
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <xQueueGenericSend+0x114>
    1b1e:	11 11       	cpse	r17, r1
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <xQueueGenericSend+0xa2>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	e4 d7       	rcall	.+4040   	; 0x2af0 <vTaskInternalSetTimeOutState>
    1b28:	19 2d       	mov	r17, r9
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	23 d4       	rcall	.+2118   	; 0x2376 <vTaskSuspendAll>
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	0f 92       	push	r0
    1b36:	f7 01       	movw	r30, r14
    1b38:	81 a1       	ldd	r24, Z+33	; 0x21
    1b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <xQueueGenericSend+0xb8>
    1b3e:	11 a2       	std	Z+33, r1	; 0x21
    1b40:	f7 01       	movw	r30, r14
    1b42:	82 a1       	ldd	r24, Z+34	; 0x22
    1b44:	8f 3f       	cpi	r24, 0xFF	; 255
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <xQueueGenericSend+0xc2>
    1b48:	12 a2       	std	Z+34, r1	; 0x22
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	be 01       	movw	r22, r28
    1b50:	6a 5f       	subi	r22, 0xFA	; 250
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	ce 01       	movw	r24, r28
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	dc d7       	rcall	.+4024   	; 0x2b12 <xTaskCheckForTimeOut>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	1b c0       	rjmp	.+54     	; 0x1b94 <xQueueGenericSend+0x10c>
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	0f 92       	push	r0
    1b64:	f7 01       	movw	r30, r14
    1b66:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b68:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	98 13       	cpse	r25, r24
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <xQueueGenericSend+0x104>
    1b72:	4e 81       	ldd	r20, Y+6	; 0x06
    1b74:	5f 81       	ldd	r21, Y+7	; 0x07
    1b76:	68 85       	ldd	r22, Y+8	; 0x08
    1b78:	79 85       	ldd	r23, Y+9	; 0x09
    1b7a:	c6 01       	movw	r24, r12
    1b7c:	b0 d6       	rcall	.+3424   	; 0x28de <vTaskPlaceOnEventList>
    1b7e:	c7 01       	movw	r24, r14
    1b80:	d4 de       	rcall	.-600    	; 0x192a <prvUnlockQueue>
    1b82:	3d d5       	rcall	.+2682   	; 0x25fe <xTaskResumeAll>
    1b84:	81 11       	cpse	r24, r1
    1b86:	a0 cf       	rjmp	.-192    	; 0x1ac8 <xQueueGenericSend+0x40>
    1b88:	85 dd       	rcall	.-1270   	; 0x1694 <vPortYield>
    1b8a:	9e cf       	rjmp	.-196    	; 0x1ac8 <xQueueGenericSend+0x40>
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	cd de       	rcall	.-614    	; 0x192a <prvUnlockQueue>
    1b90:	36 d5       	rcall	.+2668   	; 0x25fe <xTaskResumeAll>
    1b92:	9a cf       	rjmp	.-204    	; 0x1ac8 <xQueueGenericSend+0x40>
    1b94:	c7 01       	movw	r24, r14
    1b96:	c9 de       	rcall	.-622    	; 0x192a <prvUnlockQueue>
    1b98:	32 d5       	rcall	.+2660   	; 0x25fe <xTaskResumeAll>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	29 96       	adiw	r28, 0x09	; 9
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	bf 90       	pop	r11
    1bba:	af 90       	pop	r10
    1bbc:	9f 90       	pop	r9
    1bbe:	08 95       	ret

00001bc0 <xQueueGenericSendFromISR>:
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	8a 01       	movw	r16, r20
    1bce:	fc 01       	movw	r30, r24
    1bd0:	56 8d       	ldd	r21, Z+30	; 0x1e
    1bd2:	37 8d       	ldd	r19, Z+31	; 0x1f
    1bd4:	53 17       	cp	r21, r19
    1bd6:	10 f0       	brcs	.+4      	; 0x1bdc <xQueueGenericSendFromISR+0x1c>
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	f1 f4       	brne	.+60     	; 0x1c18 <xQueueGenericSendFromISR+0x58>
    1bdc:	42 2f       	mov	r20, r18
    1bde:	78 01       	movw	r14, r16
    1be0:	ec 01       	movw	r28, r24
    1be2:	1a a1       	ldd	r17, Y+34	; 0x22
    1be4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be6:	ce 01       	movw	r24, r28
    1be8:	27 de       	rcall	.-946    	; 0x1838 <prvCopyDataToQueue>
    1bea:	1f 3f       	cpi	r17, 0xFF	; 255
    1bec:	79 f4       	brne	.+30     	; 0x1c0c <xQueueGenericSendFromISR+0x4c>
    1bee:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf0:	88 23       	and	r24, r24
    1bf2:	a1 f0       	breq	.+40     	; 0x1c1c <xQueueGenericSendFromISR+0x5c>
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	43 96       	adiw	r24, 0x13	; 19
    1bf8:	cb d6       	rcall	.+3478   	; 0x2990 <xTaskRemoveFromEventList>
    1bfa:	88 23       	and	r24, r24
    1bfc:	89 f0       	breq	.+34     	; 0x1c20 <xQueueGenericSendFromISR+0x60>
    1bfe:	e1 14       	cp	r14, r1
    1c00:	f1 04       	cpc	r15, r1
    1c02:	81 f0       	breq	.+32     	; 0x1c24 <xQueueGenericSendFromISR+0x64>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	f7 01       	movw	r30, r14
    1c08:	80 83       	st	Z, r24
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <xQueueGenericSendFromISR+0x66>
    1c0c:	ff 24       	eor	r15, r15
    1c0e:	f3 94       	inc	r15
    1c10:	f1 0e       	add	r15, r17
    1c12:	fa a2       	std	Y+34, r15	; 0x22
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <xQueueGenericSendFromISR+0x66>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <xQueueGenericSendFromISR+0x66>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <xQueueGenericSendFromISR+0x66>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <xQueueGenericSendFromISR+0x66>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	08 95       	ret

00001c34 <xQueueReceive>:
    1c34:	9f 92       	push	r9
    1c36:	af 92       	push	r10
    1c38:	bf 92       	push	r11
    1c3a:	cf 92       	push	r12
    1c3c:	df 92       	push	r13
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	29 97       	sbiw	r28, 0x09	; 9
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	5b 01       	movw	r10, r22
    1c5e:	2e 83       	std	Y+6, r18	; 0x06
    1c60:	3f 83       	std	Y+7, r19	; 0x07
    1c62:	48 87       	std	Y+8, r20	; 0x08
    1c64:	59 87       	std	Y+9, r21	; 0x09
    1c66:	e1 2c       	mov	r14, r1
    1c68:	99 24       	eor	r9, r9
    1c6a:	93 94       	inc	r9
    1c6c:	6c 01       	movw	r12, r24
    1c6e:	83 e1       	ldi	r24, 0x13	; 19
    1c70:	c8 0e       	add	r12, r24
    1c72:	d1 1c       	adc	r13, r1
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	0f 92       	push	r0
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1c7e:	ff 20       	and	r15, r15
    1c80:	91 f0       	breq	.+36     	; 0x1ca6 <xQueueReceive+0x72>
    1c82:	b5 01       	movw	r22, r10
    1c84:	c8 01       	movw	r24, r16
    1c86:	37 de       	rcall	.-914    	; 0x18f6 <prvCopyDataFromQueue>
    1c88:	fa 94       	dec	r15
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	f6 8e       	std	Z+30, r15	; 0x1e
    1c8e:	80 85       	ldd	r24, Z+8	; 0x08
    1c90:	88 23       	and	r24, r24
    1c92:	29 f0       	breq	.+10     	; 0x1c9e <xQueueReceive+0x6a>
    1c94:	c8 01       	movw	r24, r16
    1c96:	08 96       	adiw	r24, 0x08	; 8
    1c98:	7b d6       	rcall	.+3318   	; 0x2990 <xTaskRemoveFromEventList>
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	fb dc       	rcall	.-1546   	; 0x1694 <vPortYield>
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	4a c0       	rjmp	.+148    	; 0x1d3a <xQueueReceive+0x106>
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	a8 85       	ldd	r26, Y+8	; 0x08
    1cac:	b9 85       	ldd	r27, Y+9	; 0x09
    1cae:	89 2b       	or	r24, r25
    1cb0:	8a 2b       	or	r24, r26
    1cb2:	8b 2b       	or	r24, r27
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <xQueueReceive+0x8a>
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	3e c0       	rjmp	.+124    	; 0x1d3a <xQueueReceive+0x106>
    1cbe:	e1 10       	cpse	r14, r1
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <xQueueReceive+0x96>
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	14 d7       	rcall	.+3624   	; 0x2af0 <vTaskInternalSetTimeOutState>
    1cc8:	e9 2c       	mov	r14, r9
    1cca:	0f 90       	pop	r0
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	53 d3       	rcall	.+1702   	; 0x2376 <vTaskSuspendAll>
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	0f 92       	push	r0
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	81 a1       	ldd	r24, Z+33	; 0x21
    1cda:	8f 3f       	cpi	r24, 0xFF	; 255
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <xQueueReceive+0xac>
    1cde:	11 a2       	std	Z+33, r1	; 0x21
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	82 a1       	ldd	r24, Z+34	; 0x22
    1ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <xQueueReceive+0xb6>
    1ce8:	12 a2       	std	Z+34, r1	; 0x22
    1cea:	0f 90       	pop	r0
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	be 01       	movw	r22, r28
    1cf0:	6a 5f       	subi	r22, 0xFA	; 250
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	0c d7       	rcall	.+3608   	; 0x2b12 <xTaskCheckForTimeOut>
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	15 c0       	rjmp	.+42     	; 0x1d28 <xQueueReceive+0xf4>
    1cfe:	c8 01       	movw	r24, r16
    1d00:	90 dd       	rcall	.-1248   	; 0x1822 <prvIsQueueEmpty>
    1d02:	88 23       	and	r24, r24
    1d04:	69 f0       	breq	.+26     	; 0x1d20 <xQueueReceive+0xec>
    1d06:	4e 81       	ldd	r20, Y+6	; 0x06
    1d08:	5f 81       	ldd	r21, Y+7	; 0x07
    1d0a:	68 85       	ldd	r22, Y+8	; 0x08
    1d0c:	79 85       	ldd	r23, Y+9	; 0x09
    1d0e:	c6 01       	movw	r24, r12
    1d10:	e6 d5       	rcall	.+3020   	; 0x28de <vTaskPlaceOnEventList>
    1d12:	c8 01       	movw	r24, r16
    1d14:	0a de       	rcall	.-1004   	; 0x192a <prvUnlockQueue>
    1d16:	73 d4       	rcall	.+2278   	; 0x25fe <xTaskResumeAll>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	ac cf       	rjmp	.-168    	; 0x1c74 <xQueueReceive+0x40>
    1d1c:	bb dc       	rcall	.-1674   	; 0x1694 <vPortYield>
    1d1e:	aa cf       	rjmp	.-172    	; 0x1c74 <xQueueReceive+0x40>
    1d20:	c8 01       	movw	r24, r16
    1d22:	03 de       	rcall	.-1018   	; 0x192a <prvUnlockQueue>
    1d24:	6c d4       	rcall	.+2264   	; 0x25fe <xTaskResumeAll>
    1d26:	a6 cf       	rjmp	.-180    	; 0x1c74 <xQueueReceive+0x40>
    1d28:	c8 01       	movw	r24, r16
    1d2a:	ff dd       	rcall	.-1026   	; 0x192a <prvUnlockQueue>
    1d2c:	68 d4       	rcall	.+2256   	; 0x25fe <xTaskResumeAll>
    1d2e:	c8 01       	movw	r24, r16
    1d30:	78 dd       	rcall	.-1296   	; 0x1822 <prvIsQueueEmpty>
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <xQueueReceive+0x104>
    1d36:	9e cf       	rjmp	.-196    	; 0x1c74 <xQueueReceive+0x40>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	29 96       	adiw	r28, 0x09	; 9
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	bf 90       	pop	r11
    1d58:	af 90       	pop	r10
    1d5a:	9f 90       	pop	r9
    1d5c:	08 95       	ret

00001d5e <xQueueSemaphoreTake>:
    1d5e:	bf 92       	push	r11
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	29 97       	sbiw	r28, 0x09	; 9
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	8c 01       	movw	r16, r24
    1d82:	4e 83       	std	Y+6, r20	; 0x06
    1d84:	5f 83       	std	Y+7, r21	; 0x07
    1d86:	68 87       	std	Y+8, r22	; 0x08
    1d88:	79 87       	std	Y+9, r23	; 0x09
    1d8a:	b1 2c       	mov	r11, r1
    1d8c:	d1 2c       	mov	r13, r1
    1d8e:	cc 24       	eor	r12, r12
    1d90:	c3 94       	inc	r12
    1d92:	7c 01       	movw	r14, r24
    1d94:	83 e1       	ldi	r24, 0x13	; 19
    1d96:	e8 0e       	add	r14, r24
    1d98:	f1 1c       	adc	r15, r1
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	0f 92       	push	r0
    1da0:	d8 01       	movw	r26, r16
    1da2:	5e 96       	adiw	r26, 0x1e	; 30
    1da4:	8c 91       	ld	r24, X
    1da6:	5e 97       	sbiw	r26, 0x1e	; 30
    1da8:	88 23       	and	r24, r24
    1daa:	d9 f0       	breq	.+54     	; 0x1de2 <xQueueSemaphoreTake+0x84>
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	5e 96       	adiw	r26, 0x1e	; 30
    1db0:	8c 93       	st	X, r24
    1db2:	5e 97       	sbiw	r26, 0x1e	; 30
    1db4:	8d 91       	ld	r24, X+
    1db6:	9c 91       	ld	r25, X
    1db8:	89 2b       	or	r24, r25
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <xQueueSemaphoreTake+0x68>
    1dbc:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <pvTaskIncrementMutexHeldCount>
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	95 83       	std	Z+5, r25	; 0x05
    1dc4:	84 83       	std	Z+4, r24	; 0x04
    1dc6:	d8 01       	movw	r26, r16
    1dc8:	18 96       	adiw	r26, 0x08	; 8
    1dca:	8c 91       	ld	r24, X
    1dcc:	88 23       	and	r24, r24
    1dce:	29 f0       	breq	.+10     	; 0x1dda <xQueueSemaphoreTake+0x7c>
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	08 96       	adiw	r24, 0x08	; 8
    1dd4:	dd d5       	rcall	.+3002   	; 0x2990 <xTaskRemoveFromEventList>
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	5d dc       	rcall	.-1862   	; 0x1694 <vPortYield>
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	76 c0       	rjmp	.+236    	; 0x1ece <xQueueSemaphoreTake+0x170>
    1de2:	8e 81       	ldd	r24, Y+6	; 0x06
    1de4:	9f 81       	ldd	r25, Y+7	; 0x07
    1de6:	a8 85       	ldd	r26, Y+8	; 0x08
    1de8:	b9 85       	ldd	r27, Y+9	; 0x09
    1dea:	89 2b       	or	r24, r25
    1dec:	8a 2b       	or	r24, r26
    1dee:	8b 2b       	or	r24, r27
    1df0:	21 f4       	brne	.+8      	; 0x1dfa <xQueueSemaphoreTake+0x9c>
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	6a c0       	rjmp	.+212    	; 0x1ece <xQueueSemaphoreTake+0x170>
    1dfa:	d1 10       	cpse	r13, r1
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <xQueueSemaphoreTake+0xa8>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	76 d6       	rcall	.+3308   	; 0x2af0 <vTaskInternalSetTimeOutState>
    1e04:	dc 2c       	mov	r13, r12
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	b5 d2       	rcall	.+1386   	; 0x2376 <vTaskSuspendAll>
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	0f 92       	push	r0
    1e12:	f8 01       	movw	r30, r16
    1e14:	81 a1       	ldd	r24, Z+33	; 0x21
    1e16:	8f 3f       	cpi	r24, 0xFF	; 255
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <xQueueSemaphoreTake+0xbe>
    1e1a:	11 a2       	std	Z+33, r1	; 0x21
    1e1c:	d8 01       	movw	r26, r16
    1e1e:	92 96       	adiw	r26, 0x22	; 34
    1e20:	8c 91       	ld	r24, X
    1e22:	92 97       	sbiw	r26, 0x22	; 34
    1e24:	8f 3f       	cpi	r24, 0xFF	; 255
    1e26:	11 f4       	brne	.+4      	; 0x1e2c <xQueueSemaphoreTake+0xce>
    1e28:	92 96       	adiw	r26, 0x22	; 34
    1e2a:	1c 92       	st	X, r1
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	be 01       	movw	r22, r28
    1e32:	6a 5f       	subi	r22, 0xFA	; 250
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	ce 01       	movw	r24, r28
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	6b d6       	rcall	.+3286   	; 0x2b12 <xTaskCheckForTimeOut>
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	23 c0       	rjmp	.+70     	; 0x1e86 <xQueueSemaphoreTake+0x128>
    1e40:	c8 01       	movw	r24, r16
    1e42:	ef dc       	rcall	.-1570   	; 0x1822 <prvIsQueueEmpty>
    1e44:	88 23       	and	r24, r24
    1e46:	d9 f0       	breq	.+54     	; 0x1e7e <xQueueSemaphoreTake+0x120>
    1e48:	f8 01       	movw	r30, r16
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	89 2b       	or	r24, r25
    1e50:	49 f4       	brne	.+18     	; 0x1e64 <xQueueSemaphoreTake+0x106>
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	0f 92       	push	r0
    1e58:	84 81       	ldd	r24, Z+4	; 0x04
    1e5a:	95 81       	ldd	r25, Z+5	; 0x05
    1e5c:	c5 d6       	rcall	.+3466   	; 0x2be8 <xTaskPriorityInherit>
    1e5e:	b8 2e       	mov	r11, r24
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	4e 81       	ldd	r20, Y+6	; 0x06
    1e66:	5f 81       	ldd	r21, Y+7	; 0x07
    1e68:	68 85       	ldd	r22, Y+8	; 0x08
    1e6a:	79 85       	ldd	r23, Y+9	; 0x09
    1e6c:	c7 01       	movw	r24, r14
    1e6e:	37 d5       	rcall	.+2670   	; 0x28de <vTaskPlaceOnEventList>
    1e70:	c8 01       	movw	r24, r16
    1e72:	5b dd       	rcall	.-1354   	; 0x192a <prvUnlockQueue>
    1e74:	c4 d3       	rcall	.+1928   	; 0x25fe <xTaskResumeAll>
    1e76:	81 11       	cpse	r24, r1
    1e78:	90 cf       	rjmp	.-224    	; 0x1d9a <xQueueSemaphoreTake+0x3c>
    1e7a:	0c dc       	rcall	.-2024   	; 0x1694 <vPortYield>
    1e7c:	8e cf       	rjmp	.-228    	; 0x1d9a <xQueueSemaphoreTake+0x3c>
    1e7e:	c8 01       	movw	r24, r16
    1e80:	54 dd       	rcall	.-1368   	; 0x192a <prvUnlockQueue>
    1e82:	bd d3       	rcall	.+1914   	; 0x25fe <xTaskResumeAll>
    1e84:	8a cf       	rjmp	.-236    	; 0x1d9a <xQueueSemaphoreTake+0x3c>
    1e86:	c8 01       	movw	r24, r16
    1e88:	50 dd       	rcall	.-1376   	; 0x192a <prvUnlockQueue>
    1e8a:	b9 d3       	rcall	.+1906   	; 0x25fe <xTaskResumeAll>
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	c9 dc       	rcall	.-1646   	; 0x1822 <prvIsQueueEmpty>
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <xQueueSemaphoreTake+0x138>
    1e94:	82 cf       	rjmp	.-252    	; 0x1d9a <xQueueSemaphoreTake+0x3c>
    1e96:	bb 20       	and	r11, r11
    1e98:	c9 f0       	breq	.+50     	; 0x1ecc <xQueueSemaphoreTake+0x16e>
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	0f 92       	push	r0
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	83 89       	ldd	r24, Z+19	; 0x13
    1ea4:	88 23       	and	r24, r24
    1ea6:	39 f0       	breq	.+14     	; 0x1eb6 <xQueueSemaphoreTake+0x158>
    1ea8:	02 8c       	ldd	r0, Z+26	; 0x1a
    1eaa:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1eac:	e0 2d       	mov	r30, r0
    1eae:	80 81       	ld	r24, Z
    1eb0:	6a e0       	ldi	r22, 0x0A	; 10
    1eb2:	68 1b       	sub	r22, r24
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <xQueueSemaphoreTake+0x15a>
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	d8 01       	movw	r26, r16
    1eba:	14 96       	adiw	r26, 0x04	; 4
    1ebc:	8d 91       	ld	r24, X+
    1ebe:	9c 91       	ld	r25, X
    1ec0:	15 97       	sbiw	r26, 0x05	; 5
    1ec2:	74 d7       	rcall	.+3816   	; 0x2dac <vTaskPriorityDisinheritAfterTimeout>
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <xQueueSemaphoreTake+0x170>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	29 96       	adiw	r28, 0x09	; 9
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	08 95       	ret

00001eee <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	0f 92       	push	r0
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	8f 3f       	cpi	r24, 0xFF	; 255
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <vQueueWaitForMessageRestricted+0x14>
    1f00:	19 a2       	std	Y+33, r1	; 0x21
    1f02:	8a a1       	ldd	r24, Y+34	; 0x22
    1f04:	8f 3f       	cpi	r24, 0xFF	; 255
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <vQueueWaitForMessageRestricted+0x1c>
    1f08:	1a a2       	std	Y+34, r1	; 0x22
    1f0a:	0f 90       	pop	r0
    1f0c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f10:	81 11       	cpse	r24, r1
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f14:	ce 01       	movw	r24, r28
    1f16:	43 96       	adiw	r24, 0x13	; 19
    1f18:	f9 d4       	rcall	.+2546   	; 0x290c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	06 dd       	rcall	.-1524   	; 0x192a <prvUnlockQueue>
    }
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	08 95       	ret

00001f24 <prvResetNextTaskUnblockTime>:
    1f24:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxDelayedTaskList>
    1f28:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxDelayedTaskList+0x1>
    1f2c:	80 81       	ld	r24, Z
    1f2e:	81 11       	cpse	r24, r1
    1f30:	0c c0       	rjmp	.+24     	; 0x1f4a <prvResetNextTaskUnblockTime+0x26>
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	dc 01       	movw	r26, r24
    1f38:	80 93 e9 0d 	sts	0x0DE9, r24	; 0x800de9 <xNextTaskUnblockTime>
    1f3c:	90 93 ea 0d 	sts	0x0DEA, r25	; 0x800dea <xNextTaskUnblockTime+0x1>
    1f40:	a0 93 eb 0d 	sts	0x0DEB, r26	; 0x800deb <xNextTaskUnblockTime+0x2>
    1f44:	b0 93 ec 0d 	sts	0x0DEC, r27	; 0x800dec <xNextTaskUnblockTime+0x3>
    1f48:	08 95       	ret
    1f4a:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxDelayedTaskList>
    1f4e:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxDelayedTaskList+0x1>
    1f52:	07 80       	ldd	r0, Z+7	; 0x07
    1f54:	f0 85       	ldd	r31, Z+8	; 0x08
    1f56:	e0 2d       	mov	r30, r0
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f5e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f60:	80 93 e9 0d 	sts	0x0DE9, r24	; 0x800de9 <xNextTaskUnblockTime>
    1f64:	90 93 ea 0d 	sts	0x0DEA, r25	; 0x800dea <xNextTaskUnblockTime+0x1>
    1f68:	a0 93 eb 0d 	sts	0x0DEB, r26	; 0x800deb <xNextTaskUnblockTime+0x2>
    1f6c:	b0 93 ec 0d 	sts	0x0DEC, r27	; 0x800dec <xNextTaskUnblockTime+0x3>
    1f70:	08 95       	ret

00001f72 <prvAddCurrentTaskToDelayedList>:
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	6b 01       	movw	r12, r22
    1f88:	7c 01       	movw	r14, r24
    1f8a:	c4 2f       	mov	r28, r20
    1f8c:	80 90 f6 0d 	lds	r8, 0x0DF6	; 0x800df6 <xTickCount>
    1f90:	90 90 f7 0d 	lds	r9, 0x0DF7	; 0x800df7 <xTickCount+0x1>
    1f94:	a0 90 f8 0d 	lds	r10, 0x0DF8	; 0x800df8 <xTickCount+0x2>
    1f98:	b0 90 f9 0d 	lds	r11, 0x0DF9	; 0x800df9 <xTickCount+0x3>
    1f9c:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    1fa0:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    1fa4:	02 96       	adiw	r24, 0x02	; 2
    1fa6:	fc da       	rcall	.-2568   	; 0x15a0 <uxListRemove>
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	c8 16       	cp	r12, r24
    1fac:	d8 06       	cpc	r13, r24
    1fae:	e8 06       	cpc	r14, r24
    1fb0:	f8 06       	cpc	r15, r24
    1fb2:	b1 f5       	brne	.+108    	; 0x2020 <prvAddCurrentTaskToDelayedList+0xae>
    1fb4:	cc 23       	and	r28, r28
    1fb6:	a1 f1       	breq	.+104    	; 0x2020 <prvAddCurrentTaskToDelayedList+0xae>
    1fb8:	eb ef       	ldi	r30, 0xFB	; 251
    1fba:	fd e0       	ldi	r31, 0x0D	; 13
    1fbc:	a1 81       	ldd	r26, Z+1	; 0x01
    1fbe:	b2 81       	ldd	r27, Z+2	; 0x02
    1fc0:	c0 91 a5 0e 	lds	r28, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    1fc4:	d0 91 a6 0e 	lds	r29, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    1fc8:	bf 83       	std	Y+7, r27	; 0x07
    1fca:	ae 83       	std	Y+6, r26	; 0x06
    1fcc:	c0 91 a5 0e 	lds	r28, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    1fd0:	d0 91 a6 0e 	lds	r29, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    1fd4:	16 96       	adiw	r26, 0x06	; 6
    1fd6:	8d 91       	ld	r24, X+
    1fd8:	9c 91       	ld	r25, X
    1fda:	17 97       	sbiw	r26, 0x07	; 7
    1fdc:	99 87       	std	Y+9, r25	; 0x09
    1fde:	88 87       	std	Y+8, r24	; 0x08
    1fe0:	16 96       	adiw	r26, 0x06	; 6
    1fe2:	cd 91       	ld	r28, X+
    1fe4:	dc 91       	ld	r29, X
    1fe6:	17 97       	sbiw	r26, 0x07	; 7
    1fe8:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    1fec:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    1ff0:	02 96       	adiw	r24, 0x02	; 2
    1ff2:	9d 83       	std	Y+5, r25	; 0x05
    1ff4:	8c 83       	std	Y+4, r24	; 0x04
    1ff6:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    1ffa:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    1ffe:	02 96       	adiw	r24, 0x02	; 2
    2000:	17 96       	adiw	r26, 0x07	; 7
    2002:	9c 93       	st	X, r25
    2004:	8e 93       	st	-X, r24
    2006:	16 97       	sbiw	r26, 0x06	; 6
    2008:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    200c:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2010:	1d 96       	adiw	r26, 0x0d	; 13
    2012:	fc 93       	st	X, r31
    2014:	ee 93       	st	-X, r30
    2016:	1c 97       	sbiw	r26, 0x0c	; 12
    2018:	80 81       	ld	r24, Z
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	80 83       	st	Z, r24
    201e:	3d c0       	rjmp	.+122    	; 0x209a <prvAddCurrentTaskToDelayedList+0x128>
    2020:	c8 0c       	add	r12, r8
    2022:	d9 1c       	adc	r13, r9
    2024:	ea 1c       	adc	r14, r10
    2026:	fb 1c       	adc	r15, r11
    2028:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    202c:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2030:	c2 82       	std	Z+2, r12	; 0x02
    2032:	d3 82       	std	Z+3, r13	; 0x03
    2034:	e4 82       	std	Z+4, r14	; 0x04
    2036:	f5 82       	std	Z+5, r15	; 0x05
    2038:	c8 14       	cp	r12, r8
    203a:	d9 04       	cpc	r13, r9
    203c:	ea 04       	cpc	r14, r10
    203e:	fb 04       	cpc	r15, r11
    2040:	60 f4       	brcc	.+24     	; 0x205a <prvAddCurrentTaskToDelayedList+0xe8>
    2042:	60 91 a5 0e 	lds	r22, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2046:	70 91 a6 0e 	lds	r23, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    204a:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxOverflowDelayedTaskList>
    204e:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxOverflowDelayedTaskList+0x1>
    2052:	6e 5f       	subi	r22, 0xFE	; 254
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	67 da       	rcall	.-2866   	; 0x1526 <vListInsert>
    2058:	20 c0       	rjmp	.+64     	; 0x209a <prvAddCurrentTaskToDelayedList+0x128>
    205a:	60 91 a5 0e 	lds	r22, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    205e:	70 91 a6 0e 	lds	r23, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2062:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <pxDelayedTaskList>
    2066:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <pxDelayedTaskList+0x1>
    206a:	6e 5f       	subi	r22, 0xFE	; 254
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	5b da       	rcall	.-2890   	; 0x1526 <vListInsert>
    2070:	80 91 e9 0d 	lds	r24, 0x0DE9	; 0x800de9 <xNextTaskUnblockTime>
    2074:	90 91 ea 0d 	lds	r25, 0x0DEA	; 0x800dea <xNextTaskUnblockTime+0x1>
    2078:	a0 91 eb 0d 	lds	r26, 0x0DEB	; 0x800deb <xNextTaskUnblockTime+0x2>
    207c:	b0 91 ec 0d 	lds	r27, 0x0DEC	; 0x800dec <xNextTaskUnblockTime+0x3>
    2080:	c8 16       	cp	r12, r24
    2082:	d9 06       	cpc	r13, r25
    2084:	ea 06       	cpc	r14, r26
    2086:	fb 06       	cpc	r15, r27
    2088:	40 f4       	brcc	.+16     	; 0x209a <prvAddCurrentTaskToDelayedList+0x128>
    208a:	c0 92 e9 0d 	sts	0x0DE9, r12	; 0x800de9 <xNextTaskUnblockTime>
    208e:	d0 92 ea 0d 	sts	0x0DEA, r13	; 0x800dea <xNextTaskUnblockTime+0x1>
    2092:	e0 92 eb 0d 	sts	0x0DEB, r14	; 0x800deb <xNextTaskUnblockTime+0x2>
    2096:	f0 92 ec 0d 	sts	0x0DEC, r15	; 0x800dec <xNextTaskUnblockTime+0x3>
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	8f 90       	pop	r8
    20ae:	08 95       	ret

000020b0 <xTaskCreate>:
    20b0:	4f 92       	push	r4
    20b2:	5f 92       	push	r5
    20b4:	6f 92       	push	r6
    20b6:	7f 92       	push	r7
    20b8:	8f 92       	push	r8
    20ba:	9f 92       	push	r9
    20bc:	af 92       	push	r10
    20be:	bf 92       	push	r11
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	4c 01       	movw	r8, r24
    20d2:	6b 01       	movw	r12, r22
    20d4:	5a 01       	movw	r10, r20
    20d6:	29 01       	movw	r4, r18
    20d8:	ca 01       	movw	r24, r20
    20da:	0f d9       	rcall	.-3554   	; 0x12fa <pvPortMalloc>
    20dc:	3c 01       	movw	r6, r24
    20de:	89 2b       	or	r24, r25
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <xTaskCreate+0x34>
    20e2:	01 c1       	rjmp	.+514    	; 0x22e6 <__stack+0xe7>
    20e4:	84 e3       	ldi	r24, 0x34	; 52
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	08 d9       	rcall	.-3568   	; 0x12fa <pvPortMalloc>
    20ea:	ec 01       	movw	r28, r24
    20ec:	89 2b       	or	r24, r25
    20ee:	99 f0       	breq	.+38     	; 0x2116 <xTaskCreate+0x66>
    20f0:	7c 8e       	std	Y+28, r7	; 0x1c
    20f2:	6b 8e       	std	Y+27, r6	; 0x1b
    20f4:	a5 01       	movw	r20, r10
    20f6:	65 ea       	ldi	r22, 0xA5	; 165
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	c3 01       	movw	r24, r6
    20fc:	0e 94 13 29 	call	0x5226	; 0x5226 <memset>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	a8 1a       	sub	r10, r24
    2104:	b1 08       	sbc	r11, r1
    2106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210a:	a8 0e       	add	r10, r24
    210c:	b9 1e       	adc	r11, r25
    210e:	c1 14       	cp	r12, r1
    2110:	d1 04       	cpc	r13, r1
    2112:	21 f4       	brne	.+8      	; 0x211c <xTaskCreate+0x6c>
    2114:	1f c0       	rjmp	.+62     	; 0x2154 <xTaskCreate+0xa4>
    2116:	c3 01       	movw	r24, r6
    2118:	b8 d9       	rcall	.-3216   	; 0x148a <vPortFree>
    211a:	e5 c0       	rjmp	.+458    	; 0x22e6 <__stack+0xe7>
    211c:	d6 01       	movw	r26, r12
    211e:	8c 91       	ld	r24, X
    2120:	8d 8f       	std	Y+29, r24	; 0x1d
    2122:	8c 91       	ld	r24, X
    2124:	88 23       	and	r24, r24
    2126:	a1 f0       	breq	.+40     	; 0x2150 <xTaskCreate+0xa0>
    2128:	ae 01       	movw	r20, r28
    212a:	42 5e       	subi	r20, 0xE2	; 226
    212c:	5f 4f       	sbci	r21, 0xFF	; 255
    212e:	f6 01       	movw	r30, r12
    2130:	31 96       	adiw	r30, 0x01	; 1
    2132:	b0 e1       	ldi	r27, 0x10	; 16
    2134:	cb 0e       	add	r12, r27
    2136:	d1 1c       	adc	r13, r1
    2138:	cf 01       	movw	r24, r30
    213a:	21 91       	ld	r18, Z+
    213c:	da 01       	movw	r26, r20
    213e:	2d 93       	st	X+, r18
    2140:	ad 01       	movw	r20, r26
    2142:	dc 01       	movw	r26, r24
    2144:	8c 91       	ld	r24, X
    2146:	88 23       	and	r24, r24
    2148:	19 f0       	breq	.+6      	; 0x2150 <xTaskCreate+0xa0>
    214a:	ce 16       	cp	r12, r30
    214c:	df 06       	cpc	r13, r31
    214e:	a1 f7       	brne	.-24     	; 0x2138 <xTaskCreate+0x88>
    2150:	1c a6       	std	Y+44, r1	; 0x2c
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <xTaskCreate+0xa6>
    2154:	1d 8e       	std	Y+29, r1	; 0x1d
    2156:	0a 30       	cpi	r16, 0x0A	; 10
    2158:	08 f0       	brcs	.+2      	; 0x215c <xTaskCreate+0xac>
    215a:	09 e0       	ldi	r16, 0x09	; 9
    215c:	0a 8f       	std	Y+26, r16	; 0x1a
    215e:	0d a7       	std	Y+45, r16	; 0x2d
    2160:	1e a6       	std	Y+46, r1	; 0x2e
    2162:	6e 01       	movw	r12, r28
    2164:	b2 e0       	ldi	r27, 0x02	; 2
    2166:	cb 0e       	add	r12, r27
    2168:	d1 1c       	adc	r13, r1
    216a:	c6 01       	movw	r24, r12
    216c:	d8 d9       	rcall	.-3152   	; 0x151e <vListInitialiseItem>
    216e:	ce 01       	movw	r24, r28
    2170:	0e 96       	adiw	r24, 0x0e	; 14
    2172:	d5 d9       	rcall	.-3158   	; 0x151e <vListInitialiseItem>
    2174:	db 87       	std	Y+11, r29	; 0x0b
    2176:	ca 87       	std	Y+10, r28	; 0x0a
    2178:	8a e0       	ldi	r24, 0x0A	; 10
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e0       	ldi	r26, 0x00	; 0
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	80 1b       	sub	r24, r16
    2182:	91 09       	sbc	r25, r1
    2184:	a1 09       	sbc	r26, r1
    2186:	b1 09       	sbc	r27, r1
    2188:	8e 87       	std	Y+14, r24	; 0x0e
    218a:	9f 87       	std	Y+15, r25	; 0x0f
    218c:	a8 8b       	std	Y+16, r26	; 0x10
    218e:	b9 8b       	std	Y+17, r27	; 0x11
    2190:	df 8b       	std	Y+23, r29	; 0x17
    2192:	ce 8b       	std	Y+22, r28	; 0x16
    2194:	84 e0       	ldi	r24, 0x04	; 4
    2196:	fe 01       	movw	r30, r28
    2198:	bf 96       	adiw	r30, 0x2f	; 47
    219a:	df 01       	movw	r26, r30
    219c:	1d 92       	st	X+, r1
    219e:	8a 95       	dec	r24
    21a0:	e9 f7       	brne	.-6      	; 0x219c <xTaskCreate+0xec>
    21a2:	1b aa       	std	Y+51, r1	; 0x33
    21a4:	a2 01       	movw	r20, r4
    21a6:	b4 01       	movw	r22, r8
    21a8:	c5 01       	movw	r24, r10
    21aa:	21 da       	rcall	.-3006   	; 0x15ee <pxPortInitialiseStack>
    21ac:	99 83       	std	Y+1, r25	; 0x01
    21ae:	88 83       	st	Y, r24
    21b0:	e1 14       	cp	r14, r1
    21b2:	f1 04       	cpc	r15, r1
    21b4:	19 f0       	breq	.+6      	; 0x21bc <xTaskCreate+0x10c>
    21b6:	f7 01       	movw	r30, r14
    21b8:	d1 83       	std	Z+1, r29	; 0x01
    21ba:	c0 83       	st	Z, r28
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	0f 92       	push	r0
    21c2:	80 91 fa 0d 	lds	r24, 0x0DFA	; 0x800dfa <uxCurrentNumberOfTasks>
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	80 93 fa 0d 	sts	0x0DFA, r24	; 0x800dfa <uxCurrentNumberOfTasks>
    21cc:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    21d0:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    21d4:	89 2b       	or	r24, r25
    21d6:	a1 f5       	brne	.+104    	; 0x2240 <__stack+0x41>
    21d8:	d0 93 a6 0e 	sts	0x0EA6, r29	; 0x800ea6 <pxCurrentTCB+0x1>
    21dc:	c0 93 a5 0e 	sts	0x0EA5, r28	; 0x800ea5 <pxCurrentTCB>
    21e0:	80 91 fa 0d 	lds	r24, 0x0DFA	; 0x800dfa <uxCurrentNumberOfTasks>
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	09 f0       	breq	.+2      	; 0x21ea <xTaskCreate+0x13a>
    21e8:	3b c0       	rjmp	.+118    	; 0x2260 <__stack+0x61>
    21ea:	07 e3       	ldi	r16, 0x37	; 55
    21ec:	1e e0       	ldi	r17, 0x0E	; 14
    21ee:	0f 2e       	mov	r0, r31
    21f0:	f5 ea       	ldi	r31, 0xA5	; 165
    21f2:	ef 2e       	mov	r14, r31
    21f4:	fe e0       	ldi	r31, 0x0E	; 14
    21f6:	ff 2e       	mov	r15, r31
    21f8:	f0 2d       	mov	r31, r0
    21fa:	c8 01       	movw	r24, r16
    21fc:	7f d9       	rcall	.-3330   	; 0x14fc <vListInitialise>
    21fe:	05 5f       	subi	r16, 0xF5	; 245
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	0e 15       	cp	r16, r14
    2204:	1f 05       	cpc	r17, r15
    2206:	c9 f7       	brne	.-14     	; 0x21fa <xTaskCreate+0x14a>
    2208:	8c e2       	ldi	r24, 0x2C	; 44
    220a:	9e e0       	ldi	r25, 0x0E	; 14
    220c:	77 d9       	rcall	.-3346   	; 0x14fc <vListInitialise>
    220e:	81 e2       	ldi	r24, 0x21	; 33
    2210:	9e e0       	ldi	r25, 0x0E	; 14
    2212:	74 d9       	rcall	.-3352   	; 0x14fc <vListInitialise>
    2214:	82 e1       	ldi	r24, 0x12	; 18
    2216:	9e e0       	ldi	r25, 0x0E	; 14
    2218:	71 d9       	rcall	.-3358   	; 0x14fc <vListInitialise>
    221a:	87 e0       	ldi	r24, 0x07	; 7
    221c:	9e e0       	ldi	r25, 0x0E	; 14
    221e:	6e d9       	rcall	.-3364   	; 0x14fc <vListInitialise>
    2220:	8b ef       	ldi	r24, 0xFB	; 251
    2222:	9d e0       	ldi	r25, 0x0D	; 13
    2224:	6b d9       	rcall	.-3370   	; 0x14fc <vListInitialise>
    2226:	8c e2       	ldi	r24, 0x2C	; 44
    2228:	9e e0       	ldi	r25, 0x0E	; 14
    222a:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <pxDelayedTaskList+0x1>
    222e:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <pxDelayedTaskList>
    2232:	81 e2       	ldi	r24, 0x21	; 33
    2234:	9e e0       	ldi	r25, 0x0E	; 14
    2236:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <pxOverflowDelayedTaskList+0x1>
    223a:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <pxOverflowDelayedTaskList>
    223e:	10 c0       	rjmp	.+32     	; 0x2260 <__stack+0x61>
    2240:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <xSchedulerRunning>
    2244:	81 11       	cpse	r24, r1
    2246:	0c c0       	rjmp	.+24     	; 0x2260 <__stack+0x61>
    2248:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    224c:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2250:	92 8d       	ldd	r25, Z+26	; 0x1a
    2252:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2254:	89 17       	cp	r24, r25
    2256:	20 f0       	brcs	.+8      	; 0x2260 <__stack+0x61>
    2258:	d0 93 a6 0e 	sts	0x0EA6, r29	; 0x800ea6 <pxCurrentTCB+0x1>
    225c:	c0 93 a5 0e 	sts	0x0EA5, r28	; 0x800ea5 <pxCurrentTCB>
    2260:	80 91 ed 0d 	lds	r24, 0x0DED	; 0x800ded <uxTaskNumber>
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <uxTaskNumber>
    226a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    226c:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    2270:	8e 17       	cp	r24, r30
    2272:	10 f4       	brcc	.+4      	; 0x2278 <__stack+0x79>
    2274:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <uxTopReadyPriority>
    2278:	8b e0       	ldi	r24, 0x0B	; 11
    227a:	8e 9f       	mul	r24, r30
    227c:	f0 01       	movw	r30, r0
    227e:	11 24       	eor	r1, r1
    2280:	e9 5c       	subi	r30, 0xC9	; 201
    2282:	f1 4f       	sbci	r31, 0xF1	; 241
    2284:	01 80       	ldd	r0, Z+1	; 0x01
    2286:	f2 81       	ldd	r31, Z+2	; 0x02
    2288:	e0 2d       	mov	r30, r0
    228a:	ff 83       	std	Y+7, r31	; 0x07
    228c:	ee 83       	std	Y+6, r30	; 0x06
    228e:	26 81       	ldd	r18, Z+6	; 0x06
    2290:	37 81       	ldd	r19, Z+7	; 0x07
    2292:	39 87       	std	Y+9, r19	; 0x09
    2294:	28 87       	std	Y+8, r18	; 0x08
    2296:	a6 81       	ldd	r26, Z+6	; 0x06
    2298:	b7 81       	ldd	r27, Z+7	; 0x07
    229a:	15 96       	adiw	r26, 0x05	; 5
    229c:	dc 92       	st	X, r13
    229e:	ce 92       	st	-X, r12
    22a0:	14 97       	sbiw	r26, 0x04	; 4
    22a2:	d7 82       	std	Z+7, r13	; 0x07
    22a4:	c6 82       	std	Z+6, r12	; 0x06
    22a6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    22a8:	8e 9f       	mul	r24, r30
    22aa:	f0 01       	movw	r30, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	e9 5c       	subi	r30, 0xC9	; 201
    22b0:	f1 4f       	sbci	r31, 0xF1	; 241
    22b2:	fd 87       	std	Y+13, r31	; 0x0d
    22b4:	ec 87       	std	Y+12, r30	; 0x0c
    22b6:	80 81       	ld	r24, Z
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 83       	st	Z, r24
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <xSchedulerRunning>
    22c4:	88 23       	and	r24, r24
    22c6:	59 f0       	breq	.+22     	; 0x22de <__stack+0xdf>
    22c8:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    22cc:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    22d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    22d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22d4:	98 17       	cp	r25, r24
    22d6:	28 f4       	brcc	.+10     	; 0x22e2 <__stack+0xe3>
    22d8:	dd d9       	rcall	.-3142   	; 0x1694 <vPortYield>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__stack+0xe9>
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <__stack+0xe9>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <__stack+0xe9>
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	7f 90       	pop	r7
    2302:	6f 90       	pop	r6
    2304:	5f 90       	pop	r5
    2306:	4f 90       	pop	r4
    2308:	08 95       	ret

0000230a <vTaskStartScheduler>:
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	0f 2e       	mov	r0, r31
    2312:	f7 ee       	ldi	r31, 0xE7	; 231
    2314:	ef 2e       	mov	r14, r31
    2316:	fd e0       	ldi	r31, 0x0D	; 13
    2318:	ff 2e       	mov	r15, r31
    231a:	f0 2d       	mov	r31, r0
    231c:	00 e0       	ldi	r16, 0x00	; 0
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 ec       	ldi	r20, 0xC0	; 192
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	63 ed       	ldi	r22, 0xD3	; 211
    2328:	73 e0       	ldi	r23, 0x03	; 3
    232a:	8e e0       	ldi	r24, 0x0E	; 14
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	c0 de       	rcall	.-640    	; 0x20b0 <xTaskCreate>
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	d9 f4       	brne	.+54     	; 0x236a <vTaskStartScheduler+0x60>
    2334:	26 d6       	rcall	.+3148   	; 0x2f82 <xTimerCreateTimerTask>
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	c1 f4       	brne	.+48     	; 0x236a <vTaskStartScheduler+0x60>
    233a:	f8 94       	cli
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	9f ef       	ldi	r25, 0xFF	; 255
    2340:	dc 01       	movw	r26, r24
    2342:	80 93 e9 0d 	sts	0x0DE9, r24	; 0x800de9 <xNextTaskUnblockTime>
    2346:	90 93 ea 0d 	sts	0x0DEA, r25	; 0x800dea <xNextTaskUnblockTime+0x1>
    234a:	a0 93 eb 0d 	sts	0x0DEB, r26	; 0x800deb <xNextTaskUnblockTime+0x2>
    234e:	b0 93 ec 0d 	sts	0x0DEC, r27	; 0x800dec <xNextTaskUnblockTime+0x3>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 f4 0d 	sts	0x0DF4, r24	; 0x800df4 <xSchedulerRunning>
    2358:	10 92 f6 0d 	sts	0x0DF6, r1	; 0x800df6 <xTickCount>
    235c:	10 92 f7 0d 	sts	0x0DF7, r1	; 0x800df7 <xTickCount+0x1>
    2360:	10 92 f8 0d 	sts	0x0DF8, r1	; 0x800df8 <xTickCount+0x2>
    2364:	10 92 f9 0d 	sts	0x0DF9, r1	; 0x800df9 <xTickCount+0x3>
    2368:	59 d9       	rcall	.-3406   	; 0x161c <xPortStartScheduler>
    236a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	08 95       	ret

00002376 <vTaskSuspendAll>:
    2376:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    237a:	8f 5f       	subi	r24, 0xFF	; 255
    237c:	80 93 e6 0d 	sts	0x0DE6, r24	; 0x800de6 <uxSchedulerSuspended>
    2380:	08 95       	ret

00002382 <xTaskGetTickCount>:
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	0f 92       	push	r0
    2388:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <xTickCount>
    238c:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <xTickCount+0x1>
    2390:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <xTickCount+0x2>
    2394:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <xTickCount+0x3>
    2398:	0f 90       	pop	r0
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	08 95       	ret

0000239e <xTaskIncrementTick>:
    239e:	cf 92       	push	r12
    23a0:	df 92       	push	r13
    23a2:	ef 92       	push	r14
    23a4:	ff 92       	push	r15
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    23b2:	81 11       	cpse	r24, r1
    23b4:	07 c1       	rjmp	.+526    	; 0x25c4 <xTaskIncrementTick+0x226>
    23b6:	c0 90 f6 0d 	lds	r12, 0x0DF6	; 0x800df6 <xTickCount>
    23ba:	d0 90 f7 0d 	lds	r13, 0x0DF7	; 0x800df7 <xTickCount+0x1>
    23be:	e0 90 f8 0d 	lds	r14, 0x0DF8	; 0x800df8 <xTickCount+0x2>
    23c2:	f0 90 f9 0d 	lds	r15, 0x0DF9	; 0x800df9 <xTickCount+0x3>
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	c8 1a       	sub	r12, r24
    23ca:	d8 0a       	sbc	r13, r24
    23cc:	e8 0a       	sbc	r14, r24
    23ce:	f8 0a       	sbc	r15, r24
    23d0:	c0 92 f6 0d 	sts	0x0DF6, r12	; 0x800df6 <xTickCount>
    23d4:	d0 92 f7 0d 	sts	0x0DF7, r13	; 0x800df7 <xTickCount+0x1>
    23d8:	e0 92 f8 0d 	sts	0x0DF8, r14	; 0x800df8 <xTickCount+0x2>
    23dc:	f0 92 f9 0d 	sts	0x0DF9, r15	; 0x800df9 <xTickCount+0x3>
    23e0:	c1 14       	cp	r12, r1
    23e2:	d1 04       	cpc	r13, r1
    23e4:	e1 04       	cpc	r14, r1
    23e6:	f1 04       	cpc	r15, r1
    23e8:	b1 f4       	brne	.+44     	; 0x2416 <xTaskIncrementTick+0x78>
    23ea:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <pxDelayedTaskList>
    23ee:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <pxDelayedTaskList+0x1>
    23f2:	20 91 1d 0e 	lds	r18, 0x0E1D	; 0x800e1d <pxOverflowDelayedTaskList>
    23f6:	30 91 1e 0e 	lds	r19, 0x0E1E	; 0x800e1e <pxOverflowDelayedTaskList+0x1>
    23fa:	30 93 20 0e 	sts	0x0E20, r19	; 0x800e20 <pxDelayedTaskList+0x1>
    23fe:	20 93 1f 0e 	sts	0x0E1F, r18	; 0x800e1f <pxDelayedTaskList>
    2402:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <pxOverflowDelayedTaskList+0x1>
    2406:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <pxOverflowDelayedTaskList>
    240a:	80 91 ee 0d 	lds	r24, 0x0DEE	; 0x800dee <xNumOfOverflows>
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <xNumOfOverflows>
    2414:	87 dd       	rcall	.-1266   	; 0x1f24 <prvResetNextTaskUnblockTime>
    2416:	80 91 e9 0d 	lds	r24, 0x0DE9	; 0x800de9 <xNextTaskUnblockTime>
    241a:	90 91 ea 0d 	lds	r25, 0x0DEA	; 0x800dea <xNextTaskUnblockTime+0x1>
    241e:	a0 91 eb 0d 	lds	r26, 0x0DEB	; 0x800deb <xNextTaskUnblockTime+0x2>
    2422:	b0 91 ec 0d 	lds	r27, 0x0DEC	; 0x800dec <xNextTaskUnblockTime+0x3>
    2426:	c8 16       	cp	r12, r24
    2428:	d9 06       	cpc	r13, r25
    242a:	ea 06       	cpc	r14, r26
    242c:	fb 06       	cpc	r15, r27
    242e:	10 f4       	brcc	.+4      	; 0x2434 <xTaskIncrementTick+0x96>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	b3 c0       	rjmp	.+358    	; 0x259a <xTaskIncrementTick+0x1fc>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	4b e0       	ldi	r20, 0x0B	; 11
    2438:	51 e0       	ldi	r21, 0x01	; 1
    243a:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxDelayedTaskList>
    243e:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxDelayedTaskList+0x1>
    2442:	90 81       	ld	r25, Z
    2444:	91 11       	cpse	r25, r1
    2446:	0c c0       	rjmp	.+24     	; 0x2460 <xTaskIncrementTick+0xc2>
    2448:	4f ef       	ldi	r20, 0xFF	; 255
    244a:	5f ef       	ldi	r21, 0xFF	; 255
    244c:	ba 01       	movw	r22, r20
    244e:	40 93 e9 0d 	sts	0x0DE9, r20	; 0x800de9 <xNextTaskUnblockTime>
    2452:	50 93 ea 0d 	sts	0x0DEA, r21	; 0x800dea <xNextTaskUnblockTime+0x1>
    2456:	60 93 eb 0d 	sts	0x0DEB, r22	; 0x800deb <xNextTaskUnblockTime+0x2>
    245a:	70 93 ec 0d 	sts	0x0DEC, r23	; 0x800dec <xNextTaskUnblockTime+0x3>
    245e:	9d c0       	rjmp	.+314    	; 0x259a <xTaskIncrementTick+0x1fc>
    2460:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxDelayedTaskList>
    2464:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxDelayedTaskList+0x1>
    2468:	07 80       	ldd	r0, Z+7	; 0x07
    246a:	f0 85       	ldd	r31, Z+8	; 0x08
    246c:	e0 2d       	mov	r30, r0
    246e:	00 84       	ldd	r0, Z+8	; 0x08
    2470:	f1 85       	ldd	r31, Z+9	; 0x09
    2472:	e0 2d       	mov	r30, r0
    2474:	02 81       	ldd	r16, Z+2	; 0x02
    2476:	13 81       	ldd	r17, Z+3	; 0x03
    2478:	24 81       	ldd	r18, Z+4	; 0x04
    247a:	35 81       	ldd	r19, Z+5	; 0x05
    247c:	c0 16       	cp	r12, r16
    247e:	d1 06       	cpc	r13, r17
    2480:	e2 06       	cpc	r14, r18
    2482:	f3 06       	cpc	r15, r19
    2484:	48 f4       	brcc	.+18     	; 0x2498 <xTaskIncrementTick+0xfa>
    2486:	00 93 e9 0d 	sts	0x0DE9, r16	; 0x800de9 <xNextTaskUnblockTime>
    248a:	10 93 ea 0d 	sts	0x0DEA, r17	; 0x800dea <xNextTaskUnblockTime+0x1>
    248e:	20 93 eb 0d 	sts	0x0DEB, r18	; 0x800deb <xNextTaskUnblockTime+0x2>
    2492:	30 93 ec 0d 	sts	0x0DEC, r19	; 0x800dec <xNextTaskUnblockTime+0x3>
    2496:	81 c0       	rjmp	.+258    	; 0x259a <xTaskIncrementTick+0x1fc>
    2498:	a4 85       	ldd	r26, Z+12	; 0x0c
    249a:	b5 85       	ldd	r27, Z+13	; 0x0d
    249c:	c6 81       	ldd	r28, Z+6	; 0x06
    249e:	d7 81       	ldd	r29, Z+7	; 0x07
    24a0:	20 85       	ldd	r18, Z+8	; 0x08
    24a2:	31 85       	ldd	r19, Z+9	; 0x09
    24a4:	3f 83       	std	Y+7, r19	; 0x07
    24a6:	2e 83       	std	Y+6, r18	; 0x06
    24a8:	c0 85       	ldd	r28, Z+8	; 0x08
    24aa:	d1 85       	ldd	r29, Z+9	; 0x09
    24ac:	26 81       	ldd	r18, Z+6	; 0x06
    24ae:	37 81       	ldd	r19, Z+7	; 0x07
    24b0:	3d 83       	std	Y+5, r19	; 0x05
    24b2:	2c 83       	std	Y+4, r18	; 0x04
    24b4:	9f 01       	movw	r18, r30
    24b6:	2e 5f       	subi	r18, 0xFE	; 254
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	11 96       	adiw	r26, 0x01	; 1
    24bc:	6d 91       	ld	r22, X+
    24be:	7c 91       	ld	r23, X
    24c0:	12 97       	sbiw	r26, 0x02	; 2
    24c2:	62 17       	cp	r22, r18
    24c4:	73 07       	cpc	r23, r19
    24c6:	31 f4       	brne	.+12     	; 0x24d4 <xTaskIncrementTick+0x136>
    24c8:	60 85       	ldd	r22, Z+8	; 0x08
    24ca:	71 85       	ldd	r23, Z+9	; 0x09
    24cc:	12 96       	adiw	r26, 0x02	; 2
    24ce:	7c 93       	st	X, r23
    24d0:	6e 93       	st	-X, r22
    24d2:	11 97       	sbiw	r26, 0x01	; 1
    24d4:	15 86       	std	Z+13, r1	; 0x0d
    24d6:	14 86       	std	Z+12, r1	; 0x0c
    24d8:	9c 91       	ld	r25, X
    24da:	91 50       	subi	r25, 0x01	; 1
    24dc:	9c 93       	st	X, r25
    24de:	a0 8d       	ldd	r26, Z+24	; 0x18
    24e0:	b1 8d       	ldd	r27, Z+25	; 0x19
    24e2:	10 97       	sbiw	r26, 0x00	; 0
    24e4:	09 f1       	breq	.+66     	; 0x2528 <xTaskIncrementTick+0x18a>
    24e6:	c2 89       	ldd	r28, Z+18	; 0x12
    24e8:	d3 89       	ldd	r29, Z+19	; 0x13
    24ea:	64 89       	ldd	r22, Z+20	; 0x14
    24ec:	75 89       	ldd	r23, Z+21	; 0x15
    24ee:	7f 83       	std	Y+7, r23	; 0x07
    24f0:	6e 83       	std	Y+6, r22	; 0x06
    24f2:	c4 89       	ldd	r28, Z+20	; 0x14
    24f4:	d5 89       	ldd	r29, Z+21	; 0x15
    24f6:	62 89       	ldd	r22, Z+18	; 0x12
    24f8:	73 89       	ldd	r23, Z+19	; 0x13
    24fa:	7d 83       	std	Y+5, r23	; 0x05
    24fc:	6c 83       	std	Y+4, r22	; 0x04
    24fe:	11 96       	adiw	r26, 0x01	; 1
    2500:	cd 91       	ld	r28, X+
    2502:	dc 91       	ld	r29, X
    2504:	12 97       	sbiw	r26, 0x02	; 2
    2506:	bf 01       	movw	r22, r30
    2508:	62 5f       	subi	r22, 0xF2	; 242
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	c6 17       	cp	r28, r22
    250e:	d7 07       	cpc	r29, r23
    2510:	31 f4       	brne	.+12     	; 0x251e <xTaskIncrementTick+0x180>
    2512:	64 89       	ldd	r22, Z+20	; 0x14
    2514:	75 89       	ldd	r23, Z+21	; 0x15
    2516:	12 96       	adiw	r26, 0x02	; 2
    2518:	7c 93       	st	X, r23
    251a:	6e 93       	st	-X, r22
    251c:	11 97       	sbiw	r26, 0x01	; 1
    251e:	11 8e       	std	Z+25, r1	; 0x19
    2520:	10 8e       	std	Z+24, r1	; 0x18
    2522:	9c 91       	ld	r25, X
    2524:	91 50       	subi	r25, 0x01	; 1
    2526:	9c 93       	st	X, r25
    2528:	a2 8d       	ldd	r26, Z+26	; 0x1a
    252a:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    252e:	9a 17       	cp	r25, r26
    2530:	10 f4       	brcc	.+4      	; 0x2536 <xTaskIncrementTick+0x198>
    2532:	a0 93 f5 0d 	sts	0x0DF5, r26	; 0x800df5 <uxTopReadyPriority>
    2536:	4a 9f       	mul	r20, r26
    2538:	d0 01       	movw	r26, r0
    253a:	11 24       	eor	r1, r1
    253c:	a9 5c       	subi	r26, 0xC9	; 201
    253e:	b1 4f       	sbci	r27, 0xF1	; 241
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	0d 90       	ld	r0, X+
    2544:	bc 91       	ld	r27, X
    2546:	a0 2d       	mov	r26, r0
    2548:	b7 83       	std	Z+7, r27	; 0x07
    254a:	a6 83       	std	Z+6, r26	; 0x06
    254c:	16 96       	adiw	r26, 0x06	; 6
    254e:	6d 91       	ld	r22, X+
    2550:	7c 91       	ld	r23, X
    2552:	17 97       	sbiw	r26, 0x07	; 7
    2554:	71 87       	std	Z+9, r23	; 0x09
    2556:	60 87       	std	Z+8, r22	; 0x08
    2558:	16 96       	adiw	r26, 0x06	; 6
    255a:	cd 91       	ld	r28, X+
    255c:	dc 91       	ld	r29, X
    255e:	17 97       	sbiw	r26, 0x07	; 7
    2560:	3d 83       	std	Y+5, r19	; 0x05
    2562:	2c 83       	std	Y+4, r18	; 0x04
    2564:	17 96       	adiw	r26, 0x07	; 7
    2566:	3c 93       	st	X, r19
    2568:	2e 93       	st	-X, r18
    256a:	16 97       	sbiw	r26, 0x06	; 6
    256c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    256e:	4a 9f       	mul	r20, r26
    2570:	d0 01       	movw	r26, r0
    2572:	11 24       	eor	r1, r1
    2574:	a9 5c       	subi	r26, 0xC9	; 201
    2576:	b1 4f       	sbci	r27, 0xF1	; 241
    2578:	b5 87       	std	Z+13, r27	; 0x0d
    257a:	a4 87       	std	Z+12, r26	; 0x0c
    257c:	9c 91       	ld	r25, X
    257e:	9f 5f       	subi	r25, 0xFF	; 255
    2580:	9c 93       	st	X, r25
    2582:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2586:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    258a:	22 8d       	ldd	r18, Z+26	; 0x1a
    258c:	5a 96       	adiw	r26, 0x1a	; 26
    258e:	9c 91       	ld	r25, X
    2590:	29 17       	cp	r18, r25
    2592:	08 f4       	brcc	.+2      	; 0x2596 <xTaskIncrementTick+0x1f8>
    2594:	52 cf       	rjmp	.-348    	; 0x243a <xTaskIncrementTick+0x9c>
    2596:	85 2f       	mov	r24, r21
    2598:	50 cf       	rjmp	.-352    	; 0x243a <xTaskIncrementTick+0x9c>
    259a:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    259e:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    25a2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    25a4:	9b e0       	ldi	r25, 0x0B	; 11
    25a6:	e9 9f       	mul	r30, r25
    25a8:	f0 01       	movw	r30, r0
    25aa:	11 24       	eor	r1, r1
    25ac:	e9 5c       	subi	r30, 0xC9	; 201
    25ae:	f1 4f       	sbci	r31, 0xF1	; 241
    25b0:	90 81       	ld	r25, Z
    25b2:	92 30       	cpi	r25, 0x02	; 2
    25b4:	08 f0       	brcs	.+2      	; 0x25b8 <xTaskIncrementTick+0x21a>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <xYieldPending>
    25bc:	99 23       	and	r25, r25
    25be:	b1 f0       	breq	.+44     	; 0x25ec <xTaskIncrementTick+0x24e>
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <xTaskIncrementTick+0x24e>
    25c4:	80 91 f0 0d 	lds	r24, 0x0DF0	; 0x800df0 <xPendedTicks>
    25c8:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <xPendedTicks+0x1>
    25cc:	a0 91 f2 0d 	lds	r26, 0x0DF2	; 0x800df2 <xPendedTicks+0x2>
    25d0:	b0 91 f3 0d 	lds	r27, 0x0DF3	; 0x800df3 <xPendedTicks+0x3>
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	b1 1d       	adc	r27, r1
    25da:	80 93 f0 0d 	sts	0x0DF0, r24	; 0x800df0 <xPendedTicks>
    25de:	90 93 f1 0d 	sts	0x0DF1, r25	; 0x800df1 <xPendedTicks+0x1>
    25e2:	a0 93 f2 0d 	sts	0x0DF2, r26	; 0x800df2 <xPendedTicks+0x2>
    25e6:	b0 93 f3 0d 	sts	0x0DF3, r27	; 0x800df3 <xPendedTicks+0x3>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	df 90       	pop	r13
    25fa:	cf 90       	pop	r12
    25fc:	08 95       	ret

000025fe <xTaskResumeAll>:
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	0f 92       	push	r0
    2614:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    2618:	81 50       	subi	r24, 0x01	; 1
    261a:	80 93 e6 0d 	sts	0x0DE6, r24	; 0x800de6 <uxSchedulerSuspended>
    261e:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    2622:	81 11       	cpse	r24, r1
    2624:	c4 c0       	rjmp	.+392    	; 0x27ae <xTaskResumeAll+0x1b0>
    2626:	80 91 fa 0d 	lds	r24, 0x0DFA	; 0x800dfa <uxCurrentNumberOfTasks>
    262a:	81 11       	cpse	r24, r1
    262c:	8b c0       	rjmp	.+278    	; 0x2744 <xTaskResumeAll+0x146>
    262e:	c2 c0       	rjmp	.+388    	; 0x27b4 <xTaskResumeAll+0x1b6>
    2630:	d8 01       	movw	r26, r16
    2632:	17 96       	adiw	r26, 0x07	; 7
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	18 97       	sbiw	r26, 0x08	; 8
    263a:	00 84       	ldd	r0, Z+8	; 0x08
    263c:	f1 85       	ldd	r31, Z+9	; 0x09
    263e:	e0 2d       	mov	r30, r0
    2640:	a0 8d       	ldd	r26, Z+24	; 0x18
    2642:	b1 8d       	ldd	r27, Z+25	; 0x19
    2644:	82 89       	ldd	r24, Z+18	; 0x12
    2646:	93 89       	ldd	r25, Z+19	; 0x13
    2648:	64 89       	ldd	r22, Z+20	; 0x14
    264a:	75 89       	ldd	r23, Z+21	; 0x15
    264c:	ec 01       	movw	r28, r24
    264e:	7f 83       	std	Y+7, r23	; 0x07
    2650:	6e 83       	std	Y+6, r22	; 0x06
    2652:	84 89       	ldd	r24, Z+20	; 0x14
    2654:	95 89       	ldd	r25, Z+21	; 0x15
    2656:	62 89       	ldd	r22, Z+18	; 0x12
    2658:	73 89       	ldd	r23, Z+19	; 0x13
    265a:	ec 01       	movw	r28, r24
    265c:	7d 83       	std	Y+5, r23	; 0x05
    265e:	6c 83       	std	Y+4, r22	; 0x04
    2660:	cf 01       	movw	r24, r30
    2662:	0e 96       	adiw	r24, 0x0e	; 14
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	6d 91       	ld	r22, X+
    2668:	7c 91       	ld	r23, X
    266a:	12 97       	sbiw	r26, 0x02	; 2
    266c:	68 17       	cp	r22, r24
    266e:	79 07       	cpc	r23, r25
    2670:	31 f4       	brne	.+12     	; 0x267e <xTaskResumeAll+0x80>
    2672:	84 89       	ldd	r24, Z+20	; 0x14
    2674:	95 89       	ldd	r25, Z+21	; 0x15
    2676:	12 96       	adiw	r26, 0x02	; 2
    2678:	9c 93       	st	X, r25
    267a:	8e 93       	st	-X, r24
    267c:	11 97       	sbiw	r26, 0x01	; 1
    267e:	11 8e       	std	Z+25, r1	; 0x19
    2680:	10 8e       	std	Z+24, r1	; 0x18
    2682:	8c 91       	ld	r24, X
    2684:	81 50       	subi	r24, 0x01	; 1
    2686:	8c 93       	st	X, r24
    2688:	a4 85       	ldd	r26, Z+12	; 0x0c
    268a:	b5 85       	ldd	r27, Z+13	; 0x0d
    268c:	86 81       	ldd	r24, Z+6	; 0x06
    268e:	97 81       	ldd	r25, Z+7	; 0x07
    2690:	60 85       	ldd	r22, Z+8	; 0x08
    2692:	71 85       	ldd	r23, Z+9	; 0x09
    2694:	ec 01       	movw	r28, r24
    2696:	7f 83       	std	Y+7, r23	; 0x07
    2698:	6e 83       	std	Y+6, r22	; 0x06
    269a:	80 85       	ldd	r24, Z+8	; 0x08
    269c:	91 85       	ldd	r25, Z+9	; 0x09
    269e:	66 81       	ldd	r22, Z+6	; 0x06
    26a0:	77 81       	ldd	r23, Z+7	; 0x07
    26a2:	ec 01       	movw	r28, r24
    26a4:	7d 83       	std	Y+5, r23	; 0x05
    26a6:	6c 83       	std	Y+4, r22	; 0x04
    26a8:	cf 01       	movw	r24, r30
    26aa:	02 96       	adiw	r24, 0x02	; 2
    26ac:	11 96       	adiw	r26, 0x01	; 1
    26ae:	6d 91       	ld	r22, X+
    26b0:	7c 91       	ld	r23, X
    26b2:	12 97       	sbiw	r26, 0x02	; 2
    26b4:	68 17       	cp	r22, r24
    26b6:	79 07       	cpc	r23, r25
    26b8:	31 f4       	brne	.+12     	; 0x26c6 <xTaskResumeAll+0xc8>
    26ba:	60 85       	ldd	r22, Z+8	; 0x08
    26bc:	71 85       	ldd	r23, Z+9	; 0x09
    26be:	12 96       	adiw	r26, 0x02	; 2
    26c0:	7c 93       	st	X, r23
    26c2:	6e 93       	st	-X, r22
    26c4:	11 97       	sbiw	r26, 0x01	; 1
    26c6:	15 86       	std	Z+13, r1	; 0x0d
    26c8:	14 86       	std	Z+12, r1	; 0x0c
    26ca:	2c 91       	ld	r18, X
    26cc:	21 50       	subi	r18, 0x01	; 1
    26ce:	2c 93       	st	X, r18
    26d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26d2:	20 91 f5 0d 	lds	r18, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    26d6:	2a 17       	cp	r18, r26
    26d8:	10 f4       	brcc	.+4      	; 0x26de <xTaskResumeAll+0xe0>
    26da:	a0 93 f5 0d 	sts	0x0DF5, r26	; 0x800df5 <uxTopReadyPriority>
    26de:	3a 9f       	mul	r19, r26
    26e0:	d0 01       	movw	r26, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	a9 5c       	subi	r26, 0xC9	; 201
    26e6:	b1 4f       	sbci	r27, 0xF1	; 241
    26e8:	11 96       	adiw	r26, 0x01	; 1
    26ea:	0d 90       	ld	r0, X+
    26ec:	bc 91       	ld	r27, X
    26ee:	a0 2d       	mov	r26, r0
    26f0:	b7 83       	std	Z+7, r27	; 0x07
    26f2:	a6 83       	std	Z+6, r26	; 0x06
    26f4:	16 96       	adiw	r26, 0x06	; 6
    26f6:	6d 91       	ld	r22, X+
    26f8:	7c 91       	ld	r23, X
    26fa:	17 97       	sbiw	r26, 0x07	; 7
    26fc:	71 87       	std	Z+9, r23	; 0x09
    26fe:	60 87       	std	Z+8, r22	; 0x08
    2700:	16 96       	adiw	r26, 0x06	; 6
    2702:	6d 91       	ld	r22, X+
    2704:	7c 91       	ld	r23, X
    2706:	17 97       	sbiw	r26, 0x07	; 7
    2708:	eb 01       	movw	r28, r22
    270a:	9d 83       	std	Y+5, r25	; 0x05
    270c:	8c 83       	std	Y+4, r24	; 0x04
    270e:	17 96       	adiw	r26, 0x07	; 7
    2710:	9c 93       	st	X, r25
    2712:	8e 93       	st	-X, r24
    2714:	16 97       	sbiw	r26, 0x06	; 6
    2716:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2718:	3a 9f       	mul	r19, r26
    271a:	d0 01       	movw	r26, r0
    271c:	11 24       	eor	r1, r1
    271e:	a9 5c       	subi	r26, 0xC9	; 201
    2720:	b1 4f       	sbci	r27, 0xF1	; 241
    2722:	b5 87       	std	Z+13, r27	; 0x0d
    2724:	a4 87       	std	Z+12, r26	; 0x0c
    2726:	8c 91       	ld	r24, X
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	8c 93       	st	X, r24
    272c:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2730:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2734:	92 8d       	ldd	r25, Z+26	; 0x1a
    2736:	5a 96       	adiw	r26, 0x1a	; 26
    2738:	8c 91       	ld	r24, X
    273a:	98 17       	cp	r25, r24
    273c:	48 f0       	brcs	.+18     	; 0x2750 <xTaskResumeAll+0x152>
    273e:	40 93 ef 0d 	sts	0x0DEF, r20	; 0x800def <xYieldPending>
    2742:	06 c0       	rjmp	.+12     	; 0x2750 <xTaskResumeAll+0x152>
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	02 e1       	ldi	r16, 0x12	; 18
    274a:	1e e0       	ldi	r17, 0x0E	; 14
    274c:	3b e0       	ldi	r19, 0x0B	; 11
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	d8 01       	movw	r26, r16
    2752:	8c 91       	ld	r24, X
    2754:	81 11       	cpse	r24, r1
    2756:	6c cf       	rjmp	.-296    	; 0x2630 <xTaskResumeAll+0x32>
    2758:	ef 2b       	or	r30, r31
    275a:	09 f0       	breq	.+2      	; 0x275e <xTaskResumeAll+0x160>
    275c:	e3 db       	rcall	.-2106   	; 0x1f24 <prvResetNextTaskUnblockTime>
    275e:	c0 90 f0 0d 	lds	r12, 0x0DF0	; 0x800df0 <xPendedTicks>
    2762:	d0 90 f1 0d 	lds	r13, 0x0DF1	; 0x800df1 <xPendedTicks+0x1>
    2766:	e0 90 f2 0d 	lds	r14, 0x0DF2	; 0x800df2 <xPendedTicks+0x2>
    276a:	f0 90 f3 0d 	lds	r15, 0x0DF3	; 0x800df3 <xPendedTicks+0x3>
    276e:	c1 14       	cp	r12, r1
    2770:	d1 04       	cpc	r13, r1
    2772:	e1 04       	cpc	r14, r1
    2774:	f1 04       	cpc	r15, r1
    2776:	99 f0       	breq	.+38     	; 0x279e <xTaskResumeAll+0x1a0>
    2778:	c1 e0       	ldi	r28, 0x01	; 1
    277a:	11 de       	rcall	.-990    	; 0x239e <xTaskIncrementTick>
    277c:	81 11       	cpse	r24, r1
    277e:	c0 93 ef 0d 	sts	0x0DEF, r28	; 0x800def <xYieldPending>
    2782:	b1 e0       	ldi	r27, 0x01	; 1
    2784:	cb 1a       	sub	r12, r27
    2786:	d1 08       	sbc	r13, r1
    2788:	e1 08       	sbc	r14, r1
    278a:	f1 08       	sbc	r15, r1
    278c:	b1 f7       	brne	.-20     	; 0x277a <xTaskResumeAll+0x17c>
    278e:	10 92 f0 0d 	sts	0x0DF0, r1	; 0x800df0 <xPendedTicks>
    2792:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <xPendedTicks+0x1>
    2796:	10 92 f2 0d 	sts	0x0DF2, r1	; 0x800df2 <xPendedTicks+0x2>
    279a:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <xPendedTicks+0x3>
    279e:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <xYieldPending>
    27a2:	88 23       	and	r24, r24
    27a4:	31 f0       	breq	.+12     	; 0x27b2 <xTaskResumeAll+0x1b4>
    27a6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <vPortYield>
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	03 c0       	rjmp	.+6      	; 0x27b4 <xTaskResumeAll+0x1b6>
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <xTaskResumeAll+0x1b6>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	08 95       	ret

000027ca <vTaskDelay>:
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	6b 01       	movw	r12, r22
    27d4:	7c 01       	movw	r14, r24
    27d6:	67 2b       	or	r22, r23
    27d8:	68 2b       	or	r22, r24
    27da:	69 2b       	or	r22, r25
    27dc:	41 f0       	breq	.+16     	; 0x27ee <vTaskDelay+0x24>
    27de:	cb dd       	rcall	.-1130   	; 0x2376 <vTaskSuspendAll>
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	c7 01       	movw	r24, r14
    27e4:	b6 01       	movw	r22, r12
    27e6:	c5 db       	rcall	.-2166   	; 0x1f72 <prvAddCurrentTaskToDelayedList>
    27e8:	0a df       	rcall	.-492    	; 0x25fe <xTaskResumeAll>
    27ea:	81 11       	cpse	r24, r1
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <vTaskDelay+0x28>
    27ee:	0e 94 4a 0b 	call	0x1694	; 0x1694 <vPortYield>
    27f2:	ff 90       	pop	r15
    27f4:	ef 90       	pop	r14
    27f6:	df 90       	pop	r13
    27f8:	cf 90       	pop	r12
    27fa:	08 95       	ret

000027fc <vTaskSwitchContext>:
    27fc:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    2800:	88 23       	and	r24, r24
    2802:	21 f0       	breq	.+8      	; 0x280c <vTaskSwitchContext+0x10>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 ef 0d 	sts	0x0DEF, r24	; 0x800def <xYieldPending>
    280a:	08 95       	ret
    280c:	10 92 ef 0d 	sts	0x0DEF, r1	; 0x800def <xYieldPending>
    2810:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2814:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2818:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    281c:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2820:	2d 91       	ld	r18, X+
    2822:	3c 91       	ld	r19, X
    2824:	83 8d       	ldd	r24, Z+27	; 0x1b
    2826:	94 8d       	ldd	r25, Z+28	; 0x1c
    2828:	82 17       	cp	r24, r18
    282a:	93 07       	cpc	r25, r19
    282c:	58 f0       	brcs	.+22     	; 0x2844 <vTaskSwitchContext+0x48>
    282e:	60 91 a5 0e 	lds	r22, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2832:	70 91 a6 0e 	lds	r23, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2836:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    283a:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    283e:	63 5e       	subi	r22, 0xE3	; 227
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	c5 d4       	rcall	.+2442   	; 0x31ce <vApplicationStackOverflowHook>
    2844:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	9b e0       	ldi	r25, 0x0B	; 11
    284e:	89 9f       	mul	r24, r25
    2850:	f0 01       	movw	r30, r0
    2852:	11 24       	eor	r1, r1
    2854:	e9 5c       	subi	r30, 0xC9	; 201
    2856:	f1 4f       	sbci	r31, 0xF1	; 241
    2858:	90 81       	ld	r25, Z
    285a:	91 11       	cpse	r25, r1
    285c:	0e c0       	rjmp	.+28     	; 0x287a <vTaskSwitchContext+0x7e>
    285e:	4b e0       	ldi	r20, 0x0B	; 11
    2860:	81 50       	subi	r24, 0x01	; 1
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	42 9f       	mul	r20, r18
    2868:	f0 01       	movw	r30, r0
    286a:	43 9f       	mul	r20, r19
    286c:	f0 0d       	add	r31, r0
    286e:	11 24       	eor	r1, r1
    2870:	e9 5c       	subi	r30, 0xC9	; 201
    2872:	f1 4f       	sbci	r31, 0xF1	; 241
    2874:	90 81       	ld	r25, Z
    2876:	99 23       	and	r25, r25
    2878:	99 f3       	breq	.-26     	; 0x2860 <vTaskSwitchContext+0x64>
    287a:	9b e0       	ldi	r25, 0x0B	; 11
    287c:	92 9f       	mul	r25, r18
    287e:	a0 01       	movw	r20, r0
    2880:	93 9f       	mul	r25, r19
    2882:	50 0d       	add	r21, r0
    2884:	11 24       	eor	r1, r1
    2886:	da 01       	movw	r26, r20
    2888:	a9 5c       	subi	r26, 0xC9	; 201
    288a:	b1 4f       	sbci	r27, 0xF1	; 241
    288c:	11 96       	adiw	r26, 0x01	; 1
    288e:	ed 91       	ld	r30, X+
    2890:	fc 91       	ld	r31, X
    2892:	12 97       	sbiw	r26, 0x02	; 2
    2894:	04 80       	ldd	r0, Z+4	; 0x04
    2896:	f5 81       	ldd	r31, Z+5	; 0x05
    2898:	e0 2d       	mov	r30, r0
    289a:	12 96       	adiw	r26, 0x02	; 2
    289c:	fc 93       	st	X, r31
    289e:	ee 93       	st	-X, r30
    28a0:	11 97       	sbiw	r26, 0x01	; 1
    28a2:	46 5c       	subi	r20, 0xC6	; 198
    28a4:	51 4f       	sbci	r21, 0xF1	; 241
    28a6:	e4 17       	cp	r30, r20
    28a8:	f5 07       	cpc	r31, r21
    28aa:	29 f4       	brne	.+10     	; 0x28b6 <vTaskSwitchContext+0xba>
    28ac:	44 81       	ldd	r20, Z+4	; 0x04
    28ae:	55 81       	ldd	r21, Z+5	; 0x05
    28b0:	fd 01       	movw	r30, r26
    28b2:	52 83       	std	Z+2, r21	; 0x02
    28b4:	41 83       	std	Z+1, r20	; 0x01
    28b6:	9b e0       	ldi	r25, 0x0B	; 11
    28b8:	92 9f       	mul	r25, r18
    28ba:	f0 01       	movw	r30, r0
    28bc:	93 9f       	mul	r25, r19
    28be:	f0 0d       	add	r31, r0
    28c0:	11 24       	eor	r1, r1
    28c2:	e9 5c       	subi	r30, 0xC9	; 201
    28c4:	f1 4f       	sbci	r31, 0xF1	; 241
    28c6:	01 80       	ldd	r0, Z+1	; 0x01
    28c8:	f2 81       	ldd	r31, Z+2	; 0x02
    28ca:	e0 2d       	mov	r30, r0
    28cc:	20 85       	ldd	r18, Z+8	; 0x08
    28ce:	31 85       	ldd	r19, Z+9	; 0x09
    28d0:	30 93 a6 0e 	sts	0x0EA6, r19	; 0x800ea6 <pxCurrentTCB+0x1>
    28d4:	20 93 a5 0e 	sts	0x0EA5, r18	; 0x800ea5 <pxCurrentTCB>
    28d8:	80 93 f5 0d 	sts	0x0DF5, r24	; 0x800df5 <uxTopReadyPriority>
    28dc:	08 95       	ret

000028de <vTaskPlaceOnEventList>:
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	6a 01       	movw	r12, r20
    28e8:	7b 01       	movw	r14, r22
    28ea:	60 91 a5 0e 	lds	r22, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    28ee:	70 91 a6 0e 	lds	r23, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    28f2:	62 5f       	subi	r22, 0xF2	; 242
    28f4:	7f 4f       	sbci	r23, 0xFF	; 255
    28f6:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	c7 01       	movw	r24, r14
    28fe:	b6 01       	movw	r22, r12
    2900:	38 db       	rcall	.-2448   	; 0x1f72 <prvAddCurrentTaskToDelayedList>
    2902:	ff 90       	pop	r15
    2904:	ef 90       	pop	r14
    2906:	df 90       	pop	r13
    2908:	cf 90       	pop	r12
    290a:	08 95       	ret

0000290c <vTaskPlaceOnEventListRestricted>:
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	fc 01       	movw	r30, r24
    2912:	cb 01       	movw	r24, r22
    2914:	ba 01       	movw	r22, r20
    2916:	a1 81       	ldd	r26, Z+1	; 0x01
    2918:	b2 81       	ldd	r27, Z+2	; 0x02
    291a:	c0 91 a5 0e 	lds	r28, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    291e:	d0 91 a6 0e 	lds	r29, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2922:	bb 8b       	std	Y+19, r27	; 0x13
    2924:	aa 8b       	std	Y+18, r26	; 0x12
    2926:	c0 91 a5 0e 	lds	r28, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    292a:	d0 91 a6 0e 	lds	r29, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    292e:	16 96       	adiw	r26, 0x06	; 6
    2930:	4d 91       	ld	r20, X+
    2932:	5c 91       	ld	r21, X
    2934:	17 97       	sbiw	r26, 0x07	; 7
    2936:	5d 8b       	std	Y+21, r21	; 0x15
    2938:	4c 8b       	std	Y+20, r20	; 0x14
    293a:	16 96       	adiw	r26, 0x06	; 6
    293c:	cd 91       	ld	r28, X+
    293e:	dc 91       	ld	r29, X
    2940:	17 97       	sbiw	r26, 0x07	; 7
    2942:	40 91 a5 0e 	lds	r20, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2946:	50 91 a6 0e 	lds	r21, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    294a:	42 5f       	subi	r20, 0xF2	; 242
    294c:	5f 4f       	sbci	r21, 0xFF	; 255
    294e:	5d 83       	std	Y+5, r21	; 0x05
    2950:	4c 83       	std	Y+4, r20	; 0x04
    2952:	40 91 a5 0e 	lds	r20, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2956:	50 91 a6 0e 	lds	r21, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    295a:	42 5f       	subi	r20, 0xF2	; 242
    295c:	5f 4f       	sbci	r21, 0xFF	; 255
    295e:	17 96       	adiw	r26, 0x07	; 7
    2960:	5c 93       	st	X, r21
    2962:	4e 93       	st	-X, r20
    2964:	16 97       	sbiw	r26, 0x06	; 6
    2966:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    296a:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    296e:	59 96       	adiw	r26, 0x19	; 25
    2970:	fc 93       	st	X, r31
    2972:	ee 93       	st	-X, r30
    2974:	58 97       	sbiw	r26, 0x18	; 24
    2976:	30 81       	ld	r19, Z
    2978:	3f 5f       	subi	r19, 0xFF	; 255
    297a:	30 83       	st	Z, r19
    297c:	22 23       	and	r18, r18
    297e:	19 f0       	breq	.+6      	; 0x2986 <vTaskPlaceOnEventListRestricted+0x7a>
    2980:	6f ef       	ldi	r22, 0xFF	; 255
    2982:	7f ef       	ldi	r23, 0xFF	; 255
    2984:	cb 01       	movw	r24, r22
    2986:	42 2f       	mov	r20, r18
    2988:	f4 da       	rcall	.-2584   	; 0x1f72 <prvAddCurrentTaskToDelayedList>
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

00002990 <xTaskRemoveFromEventList>:
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	dc 01       	movw	r26, r24
    2996:	17 96       	adiw	r26, 0x07	; 7
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	18 97       	sbiw	r26, 0x08	; 8
    299e:	00 84       	ldd	r0, Z+8	; 0x08
    29a0:	f1 85       	ldd	r31, Z+9	; 0x09
    29a2:	e0 2d       	mov	r30, r0
    29a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    29a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    29a8:	c2 89       	ldd	r28, Z+18	; 0x12
    29aa:	d3 89       	ldd	r29, Z+19	; 0x13
    29ac:	84 89       	ldd	r24, Z+20	; 0x14
    29ae:	95 89       	ldd	r25, Z+21	; 0x15
    29b0:	9f 83       	std	Y+7, r25	; 0x07
    29b2:	8e 83       	std	Y+6, r24	; 0x06
    29b4:	c4 89       	ldd	r28, Z+20	; 0x14
    29b6:	d5 89       	ldd	r29, Z+21	; 0x15
    29b8:	82 89       	ldd	r24, Z+18	; 0x12
    29ba:	93 89       	ldd	r25, Z+19	; 0x13
    29bc:	9d 83       	std	Y+5, r25	; 0x05
    29be:	8c 83       	std	Y+4, r24	; 0x04
    29c0:	9f 01       	movw	r18, r30
    29c2:	22 5f       	subi	r18, 0xF2	; 242
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	11 96       	adiw	r26, 0x01	; 1
    29c8:	8d 91       	ld	r24, X+
    29ca:	9c 91       	ld	r25, X
    29cc:	12 97       	sbiw	r26, 0x02	; 2
    29ce:	82 17       	cp	r24, r18
    29d0:	93 07       	cpc	r25, r19
    29d2:	31 f4       	brne	.+12     	; 0x29e0 <xTaskRemoveFromEventList+0x50>
    29d4:	84 89       	ldd	r24, Z+20	; 0x14
    29d6:	95 89       	ldd	r25, Z+21	; 0x15
    29d8:	12 96       	adiw	r26, 0x02	; 2
    29da:	9c 93       	st	X, r25
    29dc:	8e 93       	st	-X, r24
    29de:	11 97       	sbiw	r26, 0x01	; 1
    29e0:	11 8e       	std	Z+25, r1	; 0x19
    29e2:	10 8e       	std	Z+24, r1	; 0x18
    29e4:	8c 91       	ld	r24, X
    29e6:	81 50       	subi	r24, 0x01	; 1
    29e8:	8c 93       	st	X, r24
    29ea:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    29ee:	81 11       	cpse	r24, r1
    29f0:	52 c0       	rjmp	.+164    	; 0x2a96 <xTaskRemoveFromEventList+0x106>
    29f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    29f4:	b5 85       	ldd	r27, Z+13	; 0x0d
    29f6:	c6 81       	ldd	r28, Z+6	; 0x06
    29f8:	d7 81       	ldd	r29, Z+7	; 0x07
    29fa:	80 85       	ldd	r24, Z+8	; 0x08
    29fc:	91 85       	ldd	r25, Z+9	; 0x09
    29fe:	9f 83       	std	Y+7, r25	; 0x07
    2a00:	8e 83       	std	Y+6, r24	; 0x06
    2a02:	c0 85       	ldd	r28, Z+8	; 0x08
    2a04:	d1 85       	ldd	r29, Z+9	; 0x09
    2a06:	86 81       	ldd	r24, Z+6	; 0x06
    2a08:	97 81       	ldd	r25, Z+7	; 0x07
    2a0a:	9d 83       	std	Y+5, r25	; 0x05
    2a0c:	8c 83       	std	Y+4, r24	; 0x04
    2a0e:	9f 01       	movw	r18, r30
    2a10:	2e 5f       	subi	r18, 0xFE	; 254
    2a12:	3f 4f       	sbci	r19, 0xFF	; 255
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	8d 91       	ld	r24, X+
    2a18:	9c 91       	ld	r25, X
    2a1a:	12 97       	sbiw	r26, 0x02	; 2
    2a1c:	82 17       	cp	r24, r18
    2a1e:	93 07       	cpc	r25, r19
    2a20:	31 f4       	brne	.+12     	; 0x2a2e <xTaskRemoveFromEventList+0x9e>
    2a22:	80 85       	ldd	r24, Z+8	; 0x08
    2a24:	91 85       	ldd	r25, Z+9	; 0x09
    2a26:	12 96       	adiw	r26, 0x02	; 2
    2a28:	9c 93       	st	X, r25
    2a2a:	8e 93       	st	-X, r24
    2a2c:	11 97       	sbiw	r26, 0x01	; 1
    2a2e:	15 86       	std	Z+13, r1	; 0x0d
    2a30:	14 86       	std	Z+12, r1	; 0x0c
    2a32:	8c 91       	ld	r24, X
    2a34:	81 50       	subi	r24, 0x01	; 1
    2a36:	8c 93       	st	X, r24
    2a38:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a3a:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    2a3e:	8a 17       	cp	r24, r26
    2a40:	10 f4       	brcc	.+4      	; 0x2a46 <xTaskRemoveFromEventList+0xb6>
    2a42:	a0 93 f5 0d 	sts	0x0DF5, r26	; 0x800df5 <uxTopReadyPriority>
    2a46:	8b e0       	ldi	r24, 0x0B	; 11
    2a48:	8a 9f       	mul	r24, r26
    2a4a:	d0 01       	movw	r26, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	a9 5c       	subi	r26, 0xC9	; 201
    2a50:	b1 4f       	sbci	r27, 0xF1	; 241
    2a52:	11 96       	adiw	r26, 0x01	; 1
    2a54:	0d 90       	ld	r0, X+
    2a56:	bc 91       	ld	r27, X
    2a58:	a0 2d       	mov	r26, r0
    2a5a:	b7 83       	std	Z+7, r27	; 0x07
    2a5c:	a6 83       	std	Z+6, r26	; 0x06
    2a5e:	16 96       	adiw	r26, 0x06	; 6
    2a60:	4d 91       	ld	r20, X+
    2a62:	5c 91       	ld	r21, X
    2a64:	17 97       	sbiw	r26, 0x07	; 7
    2a66:	51 87       	std	Z+9, r21	; 0x09
    2a68:	40 87       	std	Z+8, r20	; 0x08
    2a6a:	16 96       	adiw	r26, 0x06	; 6
    2a6c:	cd 91       	ld	r28, X+
    2a6e:	dc 91       	ld	r29, X
    2a70:	17 97       	sbiw	r26, 0x07	; 7
    2a72:	3d 83       	std	Y+5, r19	; 0x05
    2a74:	2c 83       	std	Y+4, r18	; 0x04
    2a76:	17 96       	adiw	r26, 0x07	; 7
    2a78:	3c 93       	st	X, r19
    2a7a:	2e 93       	st	-X, r18
    2a7c:	16 97       	sbiw	r26, 0x06	; 6
    2a7e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a80:	8a 9f       	mul	r24, r26
    2a82:	d0 01       	movw	r26, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	a9 5c       	subi	r26, 0xC9	; 201
    2a88:	b1 4f       	sbci	r27, 0xF1	; 241
    2a8a:	b5 87       	std	Z+13, r27	; 0x0d
    2a8c:	a4 87       	std	Z+12, r26	; 0x0c
    2a8e:	8c 91       	ld	r24, X
    2a90:	8f 5f       	subi	r24, 0xFF	; 255
    2a92:	8c 93       	st	X, r24
    2a94:	1c c0       	rjmp	.+56     	; 0x2ace <xTaskRemoveFromEventList+0x13e>
    2a96:	42 e1       	ldi	r20, 0x12	; 18
    2a98:	5e e0       	ldi	r21, 0x0E	; 14
    2a9a:	da 01       	movw	r26, r20
    2a9c:	11 96       	adiw	r26, 0x01	; 1
    2a9e:	cd 91       	ld	r28, X+
    2aa0:	dc 91       	ld	r29, X
    2aa2:	12 97       	sbiw	r26, 0x02	; 2
    2aa4:	d3 8b       	std	Z+19, r29	; 0x13
    2aa6:	c2 8b       	std	Z+18, r28	; 0x12
    2aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2aac:	95 8b       	std	Z+21, r25	; 0x15
    2aae:	84 8b       	std	Z+20, r24	; 0x14
    2ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	15 96       	adiw	r26, 0x05	; 5
    2ab8:	3c 93       	st	X, r19
    2aba:	2e 93       	st	-X, r18
    2abc:	14 97       	sbiw	r26, 0x04	; 4
    2abe:	3f 83       	std	Y+7, r19	; 0x07
    2ac0:	2e 83       	std	Y+6, r18	; 0x06
    2ac2:	51 8f       	std	Z+25, r21	; 0x19
    2ac4:	40 8f       	std	Z+24, r20	; 0x18
    2ac6:	da 01       	movw	r26, r20
    2ac8:	8c 91       	ld	r24, X
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	8c 93       	st	X, r24
    2ace:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2ad2:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2ad6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ad8:	5a 96       	adiw	r26, 0x1a	; 26
    2ada:	8c 91       	ld	r24, X
    2adc:	89 17       	cp	r24, r25
    2ade:	20 f4       	brcc	.+8      	; 0x2ae8 <xTaskRemoveFromEventList+0x158>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	80 93 ef 0d 	sts	0x0DEF, r24	; 0x800def <xYieldPending>
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <xTaskRemoveFromEventList+0x15a>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	08 95       	ret

00002af0 <vTaskInternalSetTimeOutState>:
    2af0:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <xNumOfOverflows>
    2af4:	fc 01       	movw	r30, r24
    2af6:	20 83       	st	Z, r18
    2af8:	40 91 f6 0d 	lds	r20, 0x0DF6	; 0x800df6 <xTickCount>
    2afc:	50 91 f7 0d 	lds	r21, 0x0DF7	; 0x800df7 <xTickCount+0x1>
    2b00:	60 91 f8 0d 	lds	r22, 0x0DF8	; 0x800df8 <xTickCount+0x2>
    2b04:	70 91 f9 0d 	lds	r23, 0x0DF9	; 0x800df9 <xTickCount+0x3>
    2b08:	41 83       	std	Z+1, r20	; 0x01
    2b0a:	52 83       	std	Z+2, r21	; 0x02
    2b0c:	63 83       	std	Z+3, r22	; 0x03
    2b0e:	74 83       	std	Z+4, r23	; 0x04
    2b10:	08 95       	ret

00002b12 <xTaskCheckForTimeOut>:
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	fb 01       	movw	r30, r22
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	0f 92       	push	r0
    2b2a:	40 91 f6 0d 	lds	r20, 0x0DF6	; 0x800df6 <xTickCount>
    2b2e:	50 91 f7 0d 	lds	r21, 0x0DF7	; 0x800df7 <xTickCount+0x1>
    2b32:	60 91 f8 0d 	lds	r22, 0x0DF8	; 0x800df8 <xTickCount+0x2>
    2b36:	70 91 f9 0d 	lds	r23, 0x0DF9	; 0x800df9 <xTickCount+0x3>
    2b3a:	00 81       	ld	r16, Z
    2b3c:	11 81       	ldd	r17, Z+1	; 0x01
    2b3e:	22 81       	ldd	r18, Z+2	; 0x02
    2b40:	33 81       	ldd	r19, Z+3	; 0x03
    2b42:	0f 3f       	cpi	r16, 0xFF	; 255
    2b44:	af ef       	ldi	r26, 0xFF	; 255
    2b46:	1a 07       	cpc	r17, r26
    2b48:	2a 07       	cpc	r18, r26
    2b4a:	3a 07       	cpc	r19, r26
    2b4c:	79 f1       	breq	.+94     	; 0x2bac <xTaskCheckForTimeOut+0x9a>
    2b4e:	ec 01       	movw	r28, r24
    2b50:	c9 80       	ldd	r12, Y+1	; 0x01
    2b52:	da 80       	ldd	r13, Y+2	; 0x02
    2b54:	eb 80       	ldd	r14, Y+3	; 0x03
    2b56:	fc 80       	ldd	r15, Y+4	; 0x04
    2b58:	a0 91 ee 0d 	lds	r26, 0x0DEE	; 0x800dee <xNumOfOverflows>
    2b5c:	b8 81       	ld	r27, Y
    2b5e:	ba 17       	cp	r27, r26
    2b60:	59 f0       	breq	.+22     	; 0x2b78 <xTaskCheckForTimeOut+0x66>
    2b62:	4c 15       	cp	r20, r12
    2b64:	5d 05       	cpc	r21, r13
    2b66:	6e 05       	cpc	r22, r14
    2b68:	7f 05       	cpc	r23, r15
    2b6a:	30 f0       	brcs	.+12     	; 0x2b78 <xTaskCheckForTimeOut+0x66>
    2b6c:	10 82       	st	Z, r1
    2b6e:	11 82       	std	Z+1, r1	; 0x01
    2b70:	12 82       	std	Z+2, r1	; 0x02
    2b72:	13 82       	std	Z+3, r1	; 0x03
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	1b c0       	rjmp	.+54     	; 0x2bae <xTaskCheckForTimeOut+0x9c>
    2b78:	4c 19       	sub	r20, r12
    2b7a:	5d 09       	sbc	r21, r13
    2b7c:	6e 09       	sbc	r22, r14
    2b7e:	7f 09       	sbc	r23, r15
    2b80:	40 17       	cp	r20, r16
    2b82:	51 07       	cpc	r21, r17
    2b84:	62 07       	cpc	r22, r18
    2b86:	73 07       	cpc	r23, r19
    2b88:	58 f4       	brcc	.+22     	; 0x2ba0 <xTaskCheckForTimeOut+0x8e>
    2b8a:	04 1b       	sub	r16, r20
    2b8c:	15 0b       	sbc	r17, r21
    2b8e:	26 0b       	sbc	r18, r22
    2b90:	37 0b       	sbc	r19, r23
    2b92:	00 83       	st	Z, r16
    2b94:	11 83       	std	Z+1, r17	; 0x01
    2b96:	22 83       	std	Z+2, r18	; 0x02
    2b98:	33 83       	std	Z+3, r19	; 0x03
    2b9a:	aa df       	rcall	.-172    	; 0x2af0 <vTaskInternalSetTimeOutState>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <xTaskCheckForTimeOut+0x9c>
    2ba0:	10 82       	st	Z, r1
    2ba2:	11 82       	std	Z+1, r1	; 0x01
    2ba4:	12 82       	std	Z+2, r1	; 0x02
    2ba6:	13 82       	std	Z+3, r1	; 0x03
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <xTaskCheckForTimeOut+0x9c>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	08 95       	ret

00002bc4 <vTaskMissedYield>:
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 ef 0d 	sts	0x0DEF, r24	; 0x800def <xYieldPending>
    2bca:	08 95       	ret

00002bcc <xTaskGetSchedulerState>:
    2bcc:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <xSchedulerRunning>
    2bd0:	88 23       	and	r24, r24
    2bd2:	31 f0       	breq	.+12     	; 0x2be0 <xTaskGetSchedulerState+0x14>
    2bd4:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <uxSchedulerSuspended>
    2bd8:	88 23       	and	r24, r24
    2bda:	21 f0       	breq	.+8      	; 0x2be4 <xTaskGetSchedulerState+0x18>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	08 95       	ret
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	08 95       	ret
    2be4:	82 e0       	ldi	r24, 0x02	; 2
    2be6:	08 95       	ret

00002be8 <xTaskPriorityInherit>:
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	89 2b       	or	r24, r25
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <xTaskPriorityInherit+0x10>
    2bf6:	79 c0       	rjmp	.+242    	; 0x2cea <xTaskPriorityInherit+0x102>
    2bf8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bfa:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2bfe:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2c02:	5a 96       	adiw	r26, 0x1a	; 26
    2c04:	9c 91       	ld	r25, X
    2c06:	89 17       	cp	r24, r25
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <xTaskPriorityInherit+0x24>
    2c0a:	63 c0       	rjmp	.+198    	; 0x2cd2 <xTaskPriorityInherit+0xea>
    2c0c:	46 85       	ldd	r20, Z+14	; 0x0e
    2c0e:	57 85       	ldd	r21, Z+15	; 0x0f
    2c10:	60 89       	ldd	r22, Z+16	; 0x10
    2c12:	71 89       	ldd	r23, Z+17	; 0x11
    2c14:	77 23       	and	r23, r23
    2c16:	94 f0       	brlt	.+36     	; 0x2c3c <xTaskPriorityInherit+0x54>
    2c18:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2c1c:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2c20:	5a 96       	adiw	r26, 0x1a	; 26
    2c22:	9c 91       	ld	r25, X
    2c24:	4a e0       	ldi	r20, 0x0A	; 10
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	60 e0       	ldi	r22, 0x00	; 0
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	49 1b       	sub	r20, r25
    2c2e:	51 09       	sbc	r21, r1
    2c30:	61 09       	sbc	r22, r1
    2c32:	71 09       	sbc	r23, r1
    2c34:	46 87       	std	Z+14, r20	; 0x0e
    2c36:	57 87       	std	Z+15, r21	; 0x0f
    2c38:	60 8b       	std	Z+16, r22	; 0x10
    2c3a:	71 8b       	std	Z+17, r23	; 0x11
    2c3c:	2b e0       	ldi	r18, 0x0B	; 11
    2c3e:	82 9f       	mul	r24, r18
    2c40:	c0 01       	movw	r24, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	89 5c       	subi	r24, 0xC9	; 201
    2c46:	91 4f       	sbci	r25, 0xF1	; 241
    2c48:	24 85       	ldd	r18, Z+12	; 0x0c
    2c4a:	35 85       	ldd	r19, Z+13	; 0x0d
    2c4c:	28 17       	cp	r18, r24
    2c4e:	39 07       	cpc	r19, r25
    2c50:	b9 f5       	brne	.+110    	; 0x2cc0 <xTaskPriorityInherit+0xd8>
    2c52:	ef 01       	movw	r28, r30
    2c54:	8f 01       	movw	r16, r30
    2c56:	0e 5f       	subi	r16, 0xFE	; 254
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
    2c60:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2c64:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2c68:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c6a:	ea 8f       	std	Y+26, r30	; 0x1a
    2c6c:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    2c70:	8e 17       	cp	r24, r30
    2c72:	10 f4       	brcc	.+4      	; 0x2c78 <xTaskPriorityInherit+0x90>
    2c74:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <uxTopReadyPriority>
    2c78:	8b e0       	ldi	r24, 0x0B	; 11
    2c7a:	8e 9f       	mul	r24, r30
    2c7c:	f0 01       	movw	r30, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	e9 5c       	subi	r30, 0xC9	; 201
    2c82:	f1 4f       	sbci	r31, 0xF1	; 241
    2c84:	01 80       	ldd	r0, Z+1	; 0x01
    2c86:	f2 81       	ldd	r31, Z+2	; 0x02
    2c88:	e0 2d       	mov	r30, r0
    2c8a:	ff 83       	std	Y+7, r31	; 0x07
    2c8c:	ee 83       	std	Y+6, r30	; 0x06
    2c8e:	26 81       	ldd	r18, Z+6	; 0x06
    2c90:	37 81       	ldd	r19, Z+7	; 0x07
    2c92:	39 87       	std	Y+9, r19	; 0x09
    2c94:	28 87       	std	Y+8, r18	; 0x08
    2c96:	a6 81       	ldd	r26, Z+6	; 0x06
    2c98:	b7 81       	ldd	r27, Z+7	; 0x07
    2c9a:	15 96       	adiw	r26, 0x05	; 5
    2c9c:	1c 93       	st	X, r17
    2c9e:	0e 93       	st	-X, r16
    2ca0:	14 97       	sbiw	r26, 0x04	; 4
    2ca2:	17 83       	std	Z+7, r17	; 0x07
    2ca4:	06 83       	std	Z+6, r16	; 0x06
    2ca6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ca8:	8e 9f       	mul	r24, r30
    2caa:	f0 01       	movw	r30, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	e9 5c       	subi	r30, 0xC9	; 201
    2cb0:	f1 4f       	sbci	r31, 0xF1	; 241
    2cb2:	fd 87       	std	Y+13, r31	; 0x0d
    2cb4:	ec 87       	std	Y+12, r30	; 0x0c
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8f 5f       	subi	r24, 0xFF	; 255
    2cba:	80 83       	st	Z, r24
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	16 c0       	rjmp	.+44     	; 0x2cec <xTaskPriorityInherit+0x104>
    2cc0:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2cc4:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2cc8:	5a 96       	adiw	r26, 0x1a	; 26
    2cca:	8c 91       	ld	r24, X
    2ccc:	82 8f       	std	Z+26, r24	; 0x1a
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	0d c0       	rjmp	.+26     	; 0x2cec <xTaskPriorityInherit+0x104>
    2cd2:	a0 91 a5 0e 	lds	r26, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2cd6:	b0 91 a6 0e 	lds	r27, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	25 a5       	ldd	r18, Z+45	; 0x2d
    2cde:	5a 96       	adiw	r26, 0x1a	; 26
    2ce0:	9c 91       	ld	r25, X
    2ce2:	29 17       	cp	r18, r25
    2ce4:	18 f0       	brcs	.+6      	; 0x2cec <xTaskPriorityInherit+0x104>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <xTaskPriorityInherit+0x104>
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <xTaskPriorityDisinherit>:
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	fc 01       	movw	r30, r24
    2d00:	89 2b       	or	r24, r25
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <xTaskPriorityDisinherit+0x10>
    2d04:	49 c0       	rjmp	.+146    	; 0x2d98 <xTaskPriorityDisinherit+0xa2>
    2d06:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d08:	81 50       	subi	r24, 0x01	; 1
    2d0a:	86 a7       	std	Z+46, r24	; 0x2e
    2d0c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d0e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2d10:	29 17       	cp	r18, r25
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <xTaskPriorityDisinherit+0x20>
    2d14:	43 c0       	rjmp	.+134    	; 0x2d9c <xTaskPriorityDisinherit+0xa6>
    2d16:	81 11       	cpse	r24, r1
    2d18:	43 c0       	rjmp	.+134    	; 0x2da0 <xTaskPriorityDisinherit+0xaa>
    2d1a:	ef 01       	movw	r28, r30
    2d1c:	8f 01       	movw	r16, r30
    2d1e:	0e 5f       	subi	r16, 0xFE	; 254
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	c8 01       	movw	r24, r16
    2d24:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
    2d28:	ed a5       	ldd	r30, Y+45	; 0x2d
    2d2a:	ea 8f       	std	Y+26, r30	; 0x1a
    2d2c:	8a e0       	ldi	r24, 0x0A	; 10
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a0 e0       	ldi	r26, 0x00	; 0
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	8e 1b       	sub	r24, r30
    2d36:	91 09       	sbc	r25, r1
    2d38:	a1 09       	sbc	r26, r1
    2d3a:	b1 09       	sbc	r27, r1
    2d3c:	8e 87       	std	Y+14, r24	; 0x0e
    2d3e:	9f 87       	std	Y+15, r25	; 0x0f
    2d40:	a8 8b       	std	Y+16, r26	; 0x10
    2d42:	b9 8b       	std	Y+17, r27	; 0x11
    2d44:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    2d48:	8e 17       	cp	r24, r30
    2d4a:	10 f4       	brcc	.+4      	; 0x2d50 <xTaskPriorityDisinherit+0x5a>
    2d4c:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <uxTopReadyPriority>
    2d50:	8b e0       	ldi	r24, 0x0B	; 11
    2d52:	8e 9f       	mul	r24, r30
    2d54:	f0 01       	movw	r30, r0
    2d56:	11 24       	eor	r1, r1
    2d58:	e9 5c       	subi	r30, 0xC9	; 201
    2d5a:	f1 4f       	sbci	r31, 0xF1	; 241
    2d5c:	01 80       	ldd	r0, Z+1	; 0x01
    2d5e:	f2 81       	ldd	r31, Z+2	; 0x02
    2d60:	e0 2d       	mov	r30, r0
    2d62:	ff 83       	std	Y+7, r31	; 0x07
    2d64:	ee 83       	std	Y+6, r30	; 0x06
    2d66:	26 81       	ldd	r18, Z+6	; 0x06
    2d68:	37 81       	ldd	r19, Z+7	; 0x07
    2d6a:	39 87       	std	Y+9, r19	; 0x09
    2d6c:	28 87       	std	Y+8, r18	; 0x08
    2d6e:	a6 81       	ldd	r26, Z+6	; 0x06
    2d70:	b7 81       	ldd	r27, Z+7	; 0x07
    2d72:	15 96       	adiw	r26, 0x05	; 5
    2d74:	1c 93       	st	X, r17
    2d76:	0e 93       	st	-X, r16
    2d78:	14 97       	sbiw	r26, 0x04	; 4
    2d7a:	17 83       	std	Z+7, r17	; 0x07
    2d7c:	06 83       	std	Z+6, r16	; 0x06
    2d7e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d80:	8e 9f       	mul	r24, r30
    2d82:	f0 01       	movw	r30, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	e9 5c       	subi	r30, 0xC9	; 201
    2d88:	f1 4f       	sbci	r31, 0xF1	; 241
    2d8a:	fd 87       	std	Y+13, r31	; 0x0d
    2d8c:	ec 87       	std	Y+12, r30	; 0x0c
    2d8e:	80 81       	ld	r24, Z
    2d90:	8f 5f       	subi	r24, 0xFF	; 255
    2d92:	80 83       	st	Z, r24
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	05 c0       	rjmp	.+10     	; 0x2da2 <xTaskPriorityDisinherit+0xac>
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	03 c0       	rjmp	.+6      	; 0x2da2 <xTaskPriorityDisinherit+0xac>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <xTaskPriorityDisinherit+0xac>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	08 95       	ret

00002dac <vTaskPriorityDisinheritAfterTimeout>:
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	fc 01       	movw	r30, r24
    2db6:	89 2b       	or	r24, r25
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <vTaskPriorityDisinheritAfterTimeout+0x10>
    2dba:	5a c0       	rjmp	.+180    	; 0x2e70 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2dbc:	85 a5       	ldd	r24, Z+45	; 0x2d
    2dbe:	86 17       	cp	r24, r22
    2dc0:	08 f4       	brcc	.+2      	; 0x2dc4 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2dc2:	86 2f       	mov	r24, r22
    2dc4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dc6:	98 17       	cp	r25, r24
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <vTaskPriorityDisinheritAfterTimeout+0x20>
    2dca:	52 c0       	rjmp	.+164    	; 0x2e70 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2dcc:	26 a5       	ldd	r18, Z+46	; 0x2e
    2dce:	21 30       	cpi	r18, 0x01	; 1
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2dd2:	4e c0       	rjmp	.+156    	; 0x2e70 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2dd4:	82 8f       	std	Z+26, r24	; 0x1a
    2dd6:	46 85       	ldd	r20, Z+14	; 0x0e
    2dd8:	57 85       	ldd	r21, Z+15	; 0x0f
    2dda:	60 89       	ldd	r22, Z+16	; 0x10
    2ddc:	71 89       	ldd	r23, Z+17	; 0x11
    2dde:	77 23       	and	r23, r23
    2de0:	64 f0       	brlt	.+24     	; 0x2dfa <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2de2:	4a e0       	ldi	r20, 0x0A	; 10
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	60 e0       	ldi	r22, 0x00	; 0
    2de8:	70 e0       	ldi	r23, 0x00	; 0
    2dea:	48 1b       	sub	r20, r24
    2dec:	51 09       	sbc	r21, r1
    2dee:	61 09       	sbc	r22, r1
    2df0:	71 09       	sbc	r23, r1
    2df2:	46 87       	std	Z+14, r20	; 0x0e
    2df4:	57 87       	std	Z+15, r21	; 0x0f
    2df6:	60 8b       	std	Z+16, r22	; 0x10
    2df8:	71 8b       	std	Z+17, r23	; 0x11
    2dfa:	2b e0       	ldi	r18, 0x0B	; 11
    2dfc:	92 9f       	mul	r25, r18
    2dfe:	c0 01       	movw	r24, r0
    2e00:	11 24       	eor	r1, r1
    2e02:	89 5c       	subi	r24, 0xC9	; 201
    2e04:	91 4f       	sbci	r25, 0xF1	; 241
    2e06:	24 85       	ldd	r18, Z+12	; 0x0c
    2e08:	35 85       	ldd	r19, Z+13	; 0x0d
    2e0a:	28 17       	cp	r18, r24
    2e0c:	39 07       	cpc	r19, r25
    2e0e:	81 f5       	brne	.+96     	; 0x2e70 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e10:	ef 01       	movw	r28, r30
    2e12:	8f 01       	movw	r16, r30
    2e14:	0e 5f       	subi	r16, 0xFE	; 254
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	c8 01       	movw	r24, r16
    2e1a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
    2e1e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e20:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <uxTopReadyPriority>
    2e24:	8e 17       	cp	r24, r30
    2e26:	10 f4       	brcc	.+4      	; 0x2e2c <vTaskPriorityDisinheritAfterTimeout+0x80>
    2e28:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <uxTopReadyPriority>
    2e2c:	8b e0       	ldi	r24, 0x0B	; 11
    2e2e:	8e 9f       	mul	r24, r30
    2e30:	f0 01       	movw	r30, r0
    2e32:	11 24       	eor	r1, r1
    2e34:	e9 5c       	subi	r30, 0xC9	; 201
    2e36:	f1 4f       	sbci	r31, 0xF1	; 241
    2e38:	01 80       	ldd	r0, Z+1	; 0x01
    2e3a:	f2 81       	ldd	r31, Z+2	; 0x02
    2e3c:	e0 2d       	mov	r30, r0
    2e3e:	ff 83       	std	Y+7, r31	; 0x07
    2e40:	ee 83       	std	Y+6, r30	; 0x06
    2e42:	26 81       	ldd	r18, Z+6	; 0x06
    2e44:	37 81       	ldd	r19, Z+7	; 0x07
    2e46:	39 87       	std	Y+9, r19	; 0x09
    2e48:	28 87       	std	Y+8, r18	; 0x08
    2e4a:	a6 81       	ldd	r26, Z+6	; 0x06
    2e4c:	b7 81       	ldd	r27, Z+7	; 0x07
    2e4e:	15 96       	adiw	r26, 0x05	; 5
    2e50:	1c 93       	st	X, r17
    2e52:	0e 93       	st	-X, r16
    2e54:	14 97       	sbiw	r26, 0x04	; 4
    2e56:	17 83       	std	Z+7, r17	; 0x07
    2e58:	06 83       	std	Z+6, r16	; 0x06
    2e5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e5c:	8e 9f       	mul	r24, r30
    2e5e:	f0 01       	movw	r30, r0
    2e60:	11 24       	eor	r1, r1
    2e62:	e9 5c       	subi	r30, 0xC9	; 201
    2e64:	f1 4f       	sbci	r31, 0xF1	; 241
    2e66:	fd 87       	std	Y+13, r31	; 0x0d
    2e68:	ec 87       	std	Y+12, r30	; 0x0c
    2e6a:	80 81       	ld	r24, Z
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	80 83       	st	Z, r24
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	08 95       	ret

00002e7a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2e7a:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2e7e:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2e82:	89 2b       	or	r24, r25
    2e84:	39 f0       	breq	.+14     	; 0x2e94 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2e86:	e0 91 a5 0e 	lds	r30, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2e8a:	f0 91 a6 0e 	lds	r31, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    2e8e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e90:	8f 5f       	subi	r24, 0xFF	; 255
    2e92:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2e94:	80 91 a5 0e 	lds	r24, 0x0EA5	; 0x800ea5 <pxCurrentTCB>
    2e98:	90 91 a6 0e 	lds	r25, 0x0EA6	; 0x800ea6 <pxCurrentTCB+0x1>
    }
    2e9c:	08 95       	ret

00002e9e <prvInsertTimerInActiveList>:
    2e9e:	cf 92       	push	r12
    2ea0:	df 92       	push	r13
    2ea2:	ef 92       	push	r14
    2ea4:	ff 92       	push	r15
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	fc 01       	movw	r30, r24
    2eac:	42 83       	std	Z+2, r20	; 0x02
    2eae:	53 83       	std	Z+3, r21	; 0x03
    2eb0:	64 83       	std	Z+4, r22	; 0x04
    2eb2:	75 83       	std	Z+5, r23	; 0x05
    2eb4:	93 87       	std	Z+11, r25	; 0x0b
    2eb6:	82 87       	std	Z+10, r24	; 0x0a
    2eb8:	04 17       	cp	r16, r20
    2eba:	15 07       	cpc	r17, r21
    2ebc:	26 07       	cpc	r18, r22
    2ebe:	37 07       	cpc	r19, r23
    2ec0:	c0 f0       	brcs	.+48     	; 0x2ef2 <prvInsertTimerInActiveList+0x54>
    2ec2:	0c 19       	sub	r16, r12
    2ec4:	1d 09       	sbc	r17, r13
    2ec6:	2e 09       	sbc	r18, r14
    2ec8:	3f 09       	sbc	r19, r15
    2eca:	86 85       	ldd	r24, Z+14	; 0x0e
    2ecc:	97 85       	ldd	r25, Z+15	; 0x0f
    2ece:	a0 89       	ldd	r26, Z+16	; 0x10
    2ed0:	b1 89       	ldd	r27, Z+17	; 0x11
    2ed2:	08 17       	cp	r16, r24
    2ed4:	19 07       	cpc	r17, r25
    2ed6:	2a 07       	cpc	r18, r26
    2ed8:	3b 07       	cpc	r19, r27
    2eda:	00 f5       	brcc	.+64     	; 0x2f1c <prvInsertTimerInActiveList+0x7e>
    2edc:	bf 01       	movw	r22, r30
    2ede:	6e 5f       	subi	r22, 0xFE	; 254
    2ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee2:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <pxOverflowTimerList>
    2ee6:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <pxOverflowTimerList+0x1>
    2eea:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	18 c0       	rjmp	.+48     	; 0x2f22 <prvInsertTimerInActiveList+0x84>
    2ef2:	0c 15       	cp	r16, r12
    2ef4:	1d 05       	cpc	r17, r13
    2ef6:	2e 05       	cpc	r18, r14
    2ef8:	3f 05       	cpc	r19, r15
    2efa:	28 f4       	brcc	.+10     	; 0x2f06 <prvInsertTimerInActiveList+0x68>
    2efc:	4c 15       	cp	r20, r12
    2efe:	5d 05       	cpc	r21, r13
    2f00:	6e 05       	cpc	r22, r14
    2f02:	7f 05       	cpc	r23, r15
    2f04:	68 f4       	brcc	.+26     	; 0x2f20 <prvInsertTimerInActiveList+0x82>
    2f06:	bf 01       	movw	r22, r30
    2f08:	6e 5f       	subi	r22, 0xFE	; 254
    2f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0c:	80 91 b1 0e 	lds	r24, 0x0EB1	; 0x800eb1 <pxCurrentTimerList>
    2f10:	90 91 b2 0e 	lds	r25, 0x0EB2	; 0x800eb2 <pxCurrentTimerList+0x1>
    2f14:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <prvInsertTimerInActiveList+0x84>
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <prvInsertTimerInActiveList+0x84>
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	08 95       	ret

00002f30 <prvCheckForValidListAndQueue>:
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	0f 92       	push	r0
    2f36:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <xTimerQueue>
    2f3a:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
    2f3e:	89 2b       	or	r24, r25
    2f40:	e9 f4       	brne	.+58     	; 0x2f7c <prvCheckForValidListAndQueue+0x4c>
    2f42:	8e eb       	ldi	r24, 0xBE	; 190
    2f44:	9e e0       	ldi	r25, 0x0E	; 14
    2f46:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <vListInitialise>
    2f4a:	83 eb       	ldi	r24, 0xB3	; 179
    2f4c:	9e e0       	ldi	r25, 0x0E	; 14
    2f4e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <vListInitialise>
    2f52:	8e eb       	ldi	r24, 0xBE	; 190
    2f54:	9e e0       	ldi	r25, 0x0E	; 14
    2f56:	90 93 b2 0e 	sts	0x0EB2, r25	; 0x800eb2 <pxCurrentTimerList+0x1>
    2f5a:	80 93 b1 0e 	sts	0x0EB1, r24	; 0x800eb1 <pxCurrentTimerList>
    2f5e:	83 eb       	ldi	r24, 0xB3	; 179
    2f60:	9e e0       	ldi	r25, 0x0E	; 14
    2f62:	90 93 b0 0e 	sts	0x0EB0, r25	; 0x800eb0 <pxOverflowTimerList+0x1>
    2f66:	80 93 af 0e 	sts	0x0EAF, r24	; 0x800eaf <pxOverflowTimerList>
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	67 e0       	ldi	r22, 0x07	; 7
    2f6e:	8a e0       	ldi	r24, 0x0A	; 10
    2f70:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <xQueueGenericCreate>
    2f74:	90 93 ae 0e 	sts	0x0EAE, r25	; 0x800eae <xTimerQueue+0x1>
    2f78:	80 93 ad 0e 	sts	0x0EAD, r24	; 0x800ead <xTimerQueue>
    2f7c:	0f 90       	pop	r0
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	08 95       	ret

00002f82 <xTimerCreateTimerTask>:
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	0f 93       	push	r16
    2f88:	d3 df       	rcall	.-90     	; 0x2f30 <prvCheckForValidListAndQueue>
    2f8a:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <xTimerQueue>
    2f8e:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
    2f92:	89 2b       	or	r24, r25
    2f94:	89 f0       	breq	.+34     	; 0x2fb8 <xTimerCreateTimerTask+0x36>
    2f96:	0f 2e       	mov	r0, r31
    2f98:	fb ea       	ldi	r31, 0xAB	; 171
    2f9a:	ef 2e       	mov	r14, r31
    2f9c:	fe e0       	ldi	r31, 0x0E	; 14
    2f9e:	ff 2e       	mov	r15, r31
    2fa0:	f0 2d       	mov	r31, r0
    2fa2:	03 e0       	ldi	r16, 0x03	; 3
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 ec       	ldi	r20, 0xC0	; 192
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	68 ed       	ldi	r22, 0xD8	; 216
    2fae:	73 e0       	ldi	r23, 0x03	; 3
    2fb0:	88 e4       	ldi	r24, 0x48	; 72
    2fb2:	91 e0       	ldi	r25, 0x01	; 1
    2fb4:	7d d8       	rcall	.-3846   	; 0x20b0 <xTaskCreate>
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <xTimerCreateTimerTask+0x38>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	0f 91       	pop	r16
    2fbc:	ff 90       	pop	r15
    2fbe:	ef 90       	pop	r14
    2fc0:	08 95       	ret

00002fc2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2fc2:	8f 92       	push	r8
    2fc4:	9f 92       	push	r9
    2fc6:	af 92       	push	r10
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	27 97       	sbiw	r28, 0x07	; 7
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2fea:	e0 91 ad 0e 	lds	r30, 0x0EAD	; 0x800ead <xTimerQueue>
    2fee:	f0 91 ae 0e 	lds	r31, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
    2ff2:	30 97       	sbiw	r30, 0x00	; 0
    2ff4:	81 f1       	breq	.+96     	; 0x3056 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2ff6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ff8:	2a 83       	std	Y+2, r18	; 0x02
    2ffa:	3b 83       	std	Y+3, r19	; 0x03
    2ffc:	4c 83       	std	Y+4, r20	; 0x04
    2ffe:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3000:	9f 83       	std	Y+7, r25	; 0x07
    3002:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3004:	66 30       	cpi	r22, 0x06	; 6
    3006:	f4 f4       	brge	.+60     	; 0x3044 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3008:	e1 dd       	rcall	.-1086   	; 0x2bcc <xTaskGetSchedulerState>
    300a:	82 30       	cpi	r24, 0x02	; 2
    300c:	69 f4       	brne	.+26     	; 0x3028 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    300e:	00 e0       	ldi	r16, 0x00	; 0
    3010:	a7 01       	movw	r20, r14
    3012:	96 01       	movw	r18, r12
    3014:	be 01       	movw	r22, r28
    3016:	6f 5f       	subi	r22, 0xFF	; 255
    3018:	7f 4f       	sbci	r23, 0xFF	; 255
    301a:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <xTimerQueue>
    301e:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
    3022:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xQueueGenericSend>
    3026:	18 c0       	rjmp	.+48     	; 0x3058 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3028:	00 e0       	ldi	r16, 0x00	; 0
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	a9 01       	movw	r20, r18
    3030:	be 01       	movw	r22, r28
    3032:	6f 5f       	subi	r22, 0xFF	; 255
    3034:	7f 4f       	sbci	r23, 0xFF	; 255
    3036:	80 91 ad 0e 	lds	r24, 0x0EAD	; 0x800ead <xTimerQueue>
    303a:	90 91 ae 0e 	lds	r25, 0x0EAE	; 0x800eae <xTimerQueue+0x1>
    303e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xQueueGenericSend>
    3042:	0a c0       	rjmp	.+20     	; 0x3058 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	a8 01       	movw	r20, r16
    3048:	be 01       	movw	r22, r28
    304a:	6f 5f       	subi	r22, 0xFF	; 255
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	cf 01       	movw	r24, r30
    3050:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <xQueueGenericSendFromISR>
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3056:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3058:	27 96       	adiw	r28, 0x07	; 7
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	df 90       	pop	r13
    3072:	cf 90       	pop	r12
    3074:	bf 90       	pop	r11
    3076:	af 90       	pop	r10
    3078:	9f 90       	pop	r9
    307a:	8f 90       	pop	r8
    307c:	08 95       	ret

0000307e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    307e:	2f 92       	push	r2
    3080:	3f 92       	push	r3
    3082:	4f 92       	push	r4
    3084:	5f 92       	push	r5
    3086:	6f 92       	push	r6
    3088:	7f 92       	push	r7
    308a:	8f 92       	push	r8
    308c:	9f 92       	push	r9
    308e:	af 92       	push	r10
    3090:	bf 92       	push	r11
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    30a4:	6e d9       	rcall	.-3364   	; 0x2382 <xTaskGetTickCount>
    30a6:	2b 01       	movw	r4, r22
    30a8:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    30aa:	80 91 a7 0e 	lds	r24, 0x0EA7	; 0x800ea7 <xLastTime.2436>
    30ae:	90 91 a8 0e 	lds	r25, 0x0EA8	; 0x800ea8 <xLastTime.2436+0x1>
    30b2:	a0 91 a9 0e 	lds	r26, 0x0EA9	; 0x800ea9 <xLastTime.2436+0x2>
    30b6:	b0 91 aa 0e 	lds	r27, 0x0EAA	; 0x800eaa <xLastTime.2436+0x3>
    30ba:	48 16       	cp	r4, r24
    30bc:	59 06       	cpc	r5, r25
    30be:	6a 06       	cpc	r6, r26
    30c0:	7b 06       	cpc	r7, r27
    30c2:	08 f0       	brcs	.+2      	; 0x30c6 <prvSampleTimeNow+0x48>
    30c4:	53 c0       	rjmp	.+166    	; 0x316c <prvSampleTimeNow+0xee>
    30c6:	3b c0       	rjmp	.+118    	; 0x313e <prvSampleTimeNow+0xc0>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30c8:	07 80       	ldd	r0, Z+7	; 0x07
    30ca:	f0 85       	ldd	r31, Z+8	; 0x08
    30cc:	e0 2d       	mov	r30, r0
    30ce:	80 80       	ld	r8, Z
    30d0:	91 80       	ldd	r9, Z+1	; 0x01
    30d2:	a2 80       	ldd	r10, Z+2	; 0x02
    30d4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30d6:	c0 85       	ldd	r28, Z+8	; 0x08
    30d8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30da:	8e 01       	movw	r16, r28
    30dc:	0e 5f       	subi	r16, 0xFE	; 254
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	c8 01       	movw	r24, r16
    30e2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    30e6:	ec 89       	ldd	r30, Y+20	; 0x14
    30e8:	fd 89       	ldd	r31, Y+21	; 0x15
    30ea:	ce 01       	movw	r24, r28
    30ec:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30ee:	8e 89       	ldd	r24, Y+22	; 0x16
    30f0:	82 ff       	sbrs	r24, 2
    30f2:	25 c0       	rjmp	.+74     	; 0x313e <prvSampleTimeNow+0xc0>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    30f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    30f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    30f8:	a8 89       	ldd	r26, Y+16	; 0x10
    30fa:	b9 89       	ldd	r27, Y+17	; 0x11
    30fc:	88 0d       	add	r24, r8
    30fe:	99 1d       	adc	r25, r9
    3100:	aa 1d       	adc	r26, r10
    3102:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3104:	88 16       	cp	r8, r24
    3106:	99 06       	cpc	r9, r25
    3108:	aa 06       	cpc	r10, r26
    310a:	bb 06       	cpc	r11, r27
    310c:	70 f4       	brcc	.+28     	; 0x312a <prvSampleTimeNow+0xac>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    310e:	8a 83       	std	Y+2, r24	; 0x02
    3110:	9b 83       	std	Y+3, r25	; 0x03
    3112:	ac 83       	std	Y+4, r26	; 0x04
    3114:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3116:	db 87       	std	Y+11, r29	; 0x0b
    3118:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    311a:	b8 01       	movw	r22, r16
    311c:	80 91 b1 0e 	lds	r24, 0x0EB1	; 0x800eb1 <pxCurrentTimerList>
    3120:	90 91 b2 0e 	lds	r25, 0x0EB2	; 0x800eb2 <pxCurrentTimerList+0x1>
    3124:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
    3128:	0a c0       	rjmp	.+20     	; 0x313e <prvSampleTimeNow+0xc0>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    312a:	c1 2c       	mov	r12, r1
    312c:	d1 2c       	mov	r13, r1
    312e:	76 01       	movw	r14, r12
    3130:	00 e0       	ldi	r16, 0x00	; 0
    3132:	10 e0       	ldi	r17, 0x00	; 0
    3134:	a5 01       	movw	r20, r10
    3136:	94 01       	movw	r18, r8
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	ce 01       	movw	r24, r28
    313c:	42 df       	rcall	.-380    	; 0x2fc2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    313e:	e0 91 b1 0e 	lds	r30, 0x0EB1	; 0x800eb1 <pxCurrentTimerList>
    3142:	f0 91 b2 0e 	lds	r31, 0x0EB2	; 0x800eb2 <pxCurrentTimerList+0x1>
    3146:	80 81       	ld	r24, Z
    3148:	81 11       	cpse	r24, r1
    314a:	be cf       	rjmp	.-132    	; 0x30c8 <prvSampleTimeNow+0x4a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    314c:	80 91 af 0e 	lds	r24, 0x0EAF	; 0x800eaf <pxOverflowTimerList>
    3150:	90 91 b0 0e 	lds	r25, 0x0EB0	; 0x800eb0 <pxOverflowTimerList+0x1>
    3154:	90 93 b2 0e 	sts	0x0EB2, r25	; 0x800eb2 <pxCurrentTimerList+0x1>
    3158:	80 93 b1 0e 	sts	0x0EB1, r24	; 0x800eb1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    315c:	f0 93 b0 0e 	sts	0x0EB0, r31	; 0x800eb0 <pxOverflowTimerList+0x1>
    3160:	e0 93 af 0e 	sts	0x0EAF, r30	; 0x800eaf <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	f1 01       	movw	r30, r2
    3168:	80 83       	st	Z, r24
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <prvSampleTimeNow+0xf2>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    316c:	f1 01       	movw	r30, r2
    316e:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3170:	40 92 a7 0e 	sts	0x0EA7, r4	; 0x800ea7 <xLastTime.2436>
    3174:	50 92 a8 0e 	sts	0x0EA8, r5	; 0x800ea8 <xLastTime.2436+0x1>
    3178:	60 92 a9 0e 	sts	0x0EA9, r6	; 0x800ea9 <xLastTime.2436+0x2>
    317c:	70 92 aa 0e 	sts	0x0EAA, r7	; 0x800eaa <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3180:	c3 01       	movw	r24, r6
    3182:	b2 01       	movw	r22, r4
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	ff 90       	pop	r15
    318e:	ef 90       	pop	r14
    3190:	df 90       	pop	r13
    3192:	cf 90       	pop	r12
    3194:	bf 90       	pop	r11
    3196:	af 90       	pop	r10
    3198:	9f 90       	pop	r9
    319a:	8f 90       	pop	r8
    319c:	7f 90       	pop	r7
    319e:	6f 90       	pop	r6
    31a0:	5f 90       	pop	r5
    31a2:	4f 90       	pop	r4
    31a4:	3f 90       	pop	r3
    31a6:	2f 90       	pop	r2
    31a8:	08 95       	ret

000031aa <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    31aa:	08 95       	ret

000031ac <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    31ac:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    31ae:	2f 9a       	sbi	0x05, 7	; 5
    31b0:	08 95       	ret

000031b2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    31b2:	1f 9a       	sbi	0x03, 7	; 3
    31b4:	08 95       	ret

000031b6 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    31b6:	fa df       	rcall	.-12     	; 0x31ac <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31b8:	2f ef       	ldi	r18, 0xFF	; 255
    31ba:	80 e7       	ldi	r24, 0x70	; 112
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	21 50       	subi	r18, 0x01	; 1
    31c0:	80 40       	sbci	r24, 0x00	; 0
    31c2:	90 40       	sbci	r25, 0x00	; 0
    31c4:	e1 f7       	brne	.-8      	; 0x31be <vApplicationMallocFailedHook+0x8>
    31c6:	00 c0       	rjmp	.+0      	; 0x31c8 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    31c8:	00 00       	nop
    31ca:	f3 df       	rcall	.-26     	; 0x31b2 <prvBlinkMainLed>
    31cc:	f5 cf       	rjmp	.-22     	; 0x31b8 <vApplicationMallocFailedHook+0x2>

000031ce <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    31ce:	ee df       	rcall	.-36     	; 0x31ac <prvSetMainLedOn>
    31d0:	2f ef       	ldi	r18, 0xFF	; 255
    31d2:	87 ea       	ldi	r24, 0xA7	; 167
    31d4:	91 e6       	ldi	r25, 0x61	; 97
    31d6:	21 50       	subi	r18, 0x01	; 1
    31d8:	80 40       	sbci	r24, 0x00	; 0
    31da:	90 40       	sbci	r25, 0x00	; 0
    31dc:	e1 f7       	brne	.-8      	; 0x31d6 <vApplicationStackOverflowHook+0x8>
    31de:	00 c0       	rjmp	.+0      	; 0x31e0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    31e0:	00 00       	nop
    31e2:	e7 df       	rcall	.-50     	; 0x31b2 <prvBlinkMainLed>
    31e4:	f5 cf       	rjmp	.-22     	; 0x31d0 <vApplicationStackOverflowHook+0x2>

000031e6 <initialiseSystem>:
	// A3 for LoRaWAN
	// A4 means 7-segment Display is showing carbon dioxide
	// A5 means 7-segment Display is showing humidity
	// A6 means 7-segment Display is showing temperature
	// A7 means 7-segment Display is showing time(hh.mm)
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5) | _BV(DDA6) | _BV(DDA7);
    31e6:	81 b1       	in	r24, 0x01	; 1
    31e8:	8f ef       	ldi	r24, 0xFF	; 255
    31ea:	81 b9       	out	0x01, r24	; 1
	//Turn off all led
	PORTA ^= _BV(PA0);
    31ec:	92 b1       	in	r25, 0x02	; 2
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	89 27       	eor	r24, r25
    31f2:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA1);
    31f4:	92 b1       	in	r25, 0x02	; 2
    31f6:	82 e0       	ldi	r24, 0x02	; 2
    31f8:	89 27       	eor	r24, r25
    31fa:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA2);
    31fc:	92 b1       	in	r25, 0x02	; 2
    31fe:	84 e0       	ldi	r24, 0x04	; 4
    3200:	89 27       	eor	r24, r25
    3202:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA3);
    3204:	92 b1       	in	r25, 0x02	; 2
    3206:	88 e0       	ldi	r24, 0x08	; 8
    3208:	89 27       	eor	r24, r25
    320a:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA4);
    320c:	92 b1       	in	r25, 0x02	; 2
    320e:	80 e1       	ldi	r24, 0x10	; 16
    3210:	89 27       	eor	r24, r25
    3212:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA5);
    3214:	92 b1       	in	r25, 0x02	; 2
    3216:	80 e2       	ldi	r24, 0x20	; 32
    3218:	89 27       	eor	r24, r25
    321a:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA6);
    321c:	92 b1       	in	r25, 0x02	; 2
    321e:	80 e4       	ldi	r24, 0x40	; 64
    3220:	89 27       	eor	r24, r25
    3222:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA7);
    3224:	82 b1       	in	r24, 0x02	; 2
    3226:	80 58       	subi	r24, 0x80	; 128
    3228:	82 b9       	out	0x02, r24	; 2
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	0e 94 a0 21 	call	0x4340	; 0x4340 <stdio_initialise>
    mh_z19_initialise(ser_USART3);
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	69 d4       	rcall	.+2258   	; 0x3b08 <mh_z19_initialise>
	if ( HIH8120_OK == hih8120_initialise() )
    3236:	a9 c3       	rjmp	.+1874   	; 0x398a <hih8120_initialise>
    3238:	08 95       	ret

0000323a <main>:
    323a:	d5 df       	rcall	.-86     	; 0x31e6 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!!\n");
    323c:	80 ee       	ldi	r24, 0xE0	; 224
    323e:	93 e0       	ldi	r25, 0x03	; 3
    3240:	0e 94 2d 29 	call	0x525a	; 0x525a <puts>
	sensorModelManager_create();
    3244:	0e 94 52 08 	call	0x10a4	; 0x10a4 <sensorModelManager_create>
    3248:	ff cf       	rjmp	.-2      	; 0x3248 <main+0xe>

0000324a <__subsf3>:
    324a:	50 58       	subi	r21, 0x80	; 128

0000324c <__addsf3>:
    324c:	bb 27       	eor	r27, r27
    324e:	aa 27       	eor	r26, r26
    3250:	0e d0       	rcall	.+28     	; 0x326e <__addsf3x>
    3252:	4d c1       	rjmp	.+666    	; 0x34ee <__fp_round>
    3254:	3e d1       	rcall	.+636    	; 0x34d2 <__fp_pscA>
    3256:	30 f0       	brcs	.+12     	; 0x3264 <__addsf3+0x18>
    3258:	43 d1       	rcall	.+646    	; 0x34e0 <__fp_pscB>
    325a:	20 f0       	brcs	.+8      	; 0x3264 <__addsf3+0x18>
    325c:	31 f4       	brne	.+12     	; 0x326a <__addsf3+0x1e>
    325e:	9f 3f       	cpi	r25, 0xFF	; 255
    3260:	11 f4       	brne	.+4      	; 0x3266 <__addsf3+0x1a>
    3262:	1e f4       	brtc	.+6      	; 0x326a <__addsf3+0x1e>
    3264:	33 c1       	rjmp	.+614    	; 0x34cc <__fp_nan>
    3266:	0e f4       	brtc	.+2      	; 0x326a <__addsf3+0x1e>
    3268:	e0 95       	com	r30
    326a:	e7 fb       	bst	r30, 7
    326c:	29 c1       	rjmp	.+594    	; 0x34c0 <__fp_inf>

0000326e <__addsf3x>:
    326e:	e9 2f       	mov	r30, r25
    3270:	4f d1       	rcall	.+670    	; 0x3510 <__fp_split3>
    3272:	80 f3       	brcs	.-32     	; 0x3254 <__addsf3+0x8>
    3274:	ba 17       	cp	r27, r26
    3276:	62 07       	cpc	r22, r18
    3278:	73 07       	cpc	r23, r19
    327a:	84 07       	cpc	r24, r20
    327c:	95 07       	cpc	r25, r21
    327e:	18 f0       	brcs	.+6      	; 0x3286 <__addsf3x+0x18>
    3280:	71 f4       	brne	.+28     	; 0x329e <__addsf3x+0x30>
    3282:	9e f5       	brtc	.+102    	; 0x32ea <__addsf3x+0x7c>
    3284:	67 c1       	rjmp	.+718    	; 0x3554 <__fp_zero>
    3286:	0e f4       	brtc	.+2      	; 0x328a <__addsf3x+0x1c>
    3288:	e0 95       	com	r30
    328a:	0b 2e       	mov	r0, r27
    328c:	ba 2f       	mov	r27, r26
    328e:	a0 2d       	mov	r26, r0
    3290:	0b 01       	movw	r0, r22
    3292:	b9 01       	movw	r22, r18
    3294:	90 01       	movw	r18, r0
    3296:	0c 01       	movw	r0, r24
    3298:	ca 01       	movw	r24, r20
    329a:	a0 01       	movw	r20, r0
    329c:	11 24       	eor	r1, r1
    329e:	ff 27       	eor	r31, r31
    32a0:	59 1b       	sub	r21, r25
    32a2:	99 f0       	breq	.+38     	; 0x32ca <__addsf3x+0x5c>
    32a4:	59 3f       	cpi	r21, 0xF9	; 249
    32a6:	50 f4       	brcc	.+20     	; 0x32bc <__addsf3x+0x4e>
    32a8:	50 3e       	cpi	r21, 0xE0	; 224
    32aa:	68 f1       	brcs	.+90     	; 0x3306 <__addsf3x+0x98>
    32ac:	1a 16       	cp	r1, r26
    32ae:	f0 40       	sbci	r31, 0x00	; 0
    32b0:	a2 2f       	mov	r26, r18
    32b2:	23 2f       	mov	r18, r19
    32b4:	34 2f       	mov	r19, r20
    32b6:	44 27       	eor	r20, r20
    32b8:	58 5f       	subi	r21, 0xF8	; 248
    32ba:	f3 cf       	rjmp	.-26     	; 0x32a2 <__addsf3x+0x34>
    32bc:	46 95       	lsr	r20
    32be:	37 95       	ror	r19
    32c0:	27 95       	ror	r18
    32c2:	a7 95       	ror	r26
    32c4:	f0 40       	sbci	r31, 0x00	; 0
    32c6:	53 95       	inc	r21
    32c8:	c9 f7       	brne	.-14     	; 0x32bc <__addsf3x+0x4e>
    32ca:	7e f4       	brtc	.+30     	; 0x32ea <__addsf3x+0x7c>
    32cc:	1f 16       	cp	r1, r31
    32ce:	ba 0b       	sbc	r27, r26
    32d0:	62 0b       	sbc	r22, r18
    32d2:	73 0b       	sbc	r23, r19
    32d4:	84 0b       	sbc	r24, r20
    32d6:	ba f0       	brmi	.+46     	; 0x3306 <__addsf3x+0x98>
    32d8:	91 50       	subi	r25, 0x01	; 1
    32da:	a1 f0       	breq	.+40     	; 0x3304 <__addsf3x+0x96>
    32dc:	ff 0f       	add	r31, r31
    32de:	bb 1f       	adc	r27, r27
    32e0:	66 1f       	adc	r22, r22
    32e2:	77 1f       	adc	r23, r23
    32e4:	88 1f       	adc	r24, r24
    32e6:	c2 f7       	brpl	.-16     	; 0x32d8 <__addsf3x+0x6a>
    32e8:	0e c0       	rjmp	.+28     	; 0x3306 <__addsf3x+0x98>
    32ea:	ba 0f       	add	r27, r26
    32ec:	62 1f       	adc	r22, r18
    32ee:	73 1f       	adc	r23, r19
    32f0:	84 1f       	adc	r24, r20
    32f2:	48 f4       	brcc	.+18     	; 0x3306 <__addsf3x+0x98>
    32f4:	87 95       	ror	r24
    32f6:	77 95       	ror	r23
    32f8:	67 95       	ror	r22
    32fa:	b7 95       	ror	r27
    32fc:	f7 95       	ror	r31
    32fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3300:	08 f0       	brcs	.+2      	; 0x3304 <__addsf3x+0x96>
    3302:	b3 cf       	rjmp	.-154    	; 0x326a <__addsf3+0x1e>
    3304:	93 95       	inc	r25
    3306:	88 0f       	add	r24, r24
    3308:	08 f0       	brcs	.+2      	; 0x330c <__addsf3x+0x9e>
    330a:	99 27       	eor	r25, r25
    330c:	ee 0f       	add	r30, r30
    330e:	97 95       	ror	r25
    3310:	87 95       	ror	r24
    3312:	08 95       	ret

00003314 <__divsf3>:
    3314:	0c d0       	rcall	.+24     	; 0x332e <__divsf3x>
    3316:	eb c0       	rjmp	.+470    	; 0x34ee <__fp_round>
    3318:	e3 d0       	rcall	.+454    	; 0x34e0 <__fp_pscB>
    331a:	40 f0       	brcs	.+16     	; 0x332c <__divsf3+0x18>
    331c:	da d0       	rcall	.+436    	; 0x34d2 <__fp_pscA>
    331e:	30 f0       	brcs	.+12     	; 0x332c <__divsf3+0x18>
    3320:	21 f4       	brne	.+8      	; 0x332a <__divsf3+0x16>
    3322:	5f 3f       	cpi	r21, 0xFF	; 255
    3324:	19 f0       	breq	.+6      	; 0x332c <__divsf3+0x18>
    3326:	cc c0       	rjmp	.+408    	; 0x34c0 <__fp_inf>
    3328:	51 11       	cpse	r21, r1
    332a:	15 c1       	rjmp	.+554    	; 0x3556 <__fp_szero>
    332c:	cf c0       	rjmp	.+414    	; 0x34cc <__fp_nan>

0000332e <__divsf3x>:
    332e:	f0 d0       	rcall	.+480    	; 0x3510 <__fp_split3>
    3330:	98 f3       	brcs	.-26     	; 0x3318 <__divsf3+0x4>

00003332 <__divsf3_pse>:
    3332:	99 23       	and	r25, r25
    3334:	c9 f3       	breq	.-14     	; 0x3328 <__divsf3+0x14>
    3336:	55 23       	and	r21, r21
    3338:	b1 f3       	breq	.-20     	; 0x3326 <__divsf3+0x12>
    333a:	95 1b       	sub	r25, r21
    333c:	55 0b       	sbc	r21, r21
    333e:	bb 27       	eor	r27, r27
    3340:	aa 27       	eor	r26, r26
    3342:	62 17       	cp	r22, r18
    3344:	73 07       	cpc	r23, r19
    3346:	84 07       	cpc	r24, r20
    3348:	38 f0       	brcs	.+14     	; 0x3358 <__divsf3_pse+0x26>
    334a:	9f 5f       	subi	r25, 0xFF	; 255
    334c:	5f 4f       	sbci	r21, 0xFF	; 255
    334e:	22 0f       	add	r18, r18
    3350:	33 1f       	adc	r19, r19
    3352:	44 1f       	adc	r20, r20
    3354:	aa 1f       	adc	r26, r26
    3356:	a9 f3       	breq	.-22     	; 0x3342 <__divsf3_pse+0x10>
    3358:	33 d0       	rcall	.+102    	; 0x33c0 <__divsf3_pse+0x8e>
    335a:	0e 2e       	mov	r0, r30
    335c:	3a f0       	brmi	.+14     	; 0x336c <__divsf3_pse+0x3a>
    335e:	e0 e8       	ldi	r30, 0x80	; 128
    3360:	30 d0       	rcall	.+96     	; 0x33c2 <__divsf3_pse+0x90>
    3362:	91 50       	subi	r25, 0x01	; 1
    3364:	50 40       	sbci	r21, 0x00	; 0
    3366:	e6 95       	lsr	r30
    3368:	00 1c       	adc	r0, r0
    336a:	ca f7       	brpl	.-14     	; 0x335e <__divsf3_pse+0x2c>
    336c:	29 d0       	rcall	.+82     	; 0x33c0 <__divsf3_pse+0x8e>
    336e:	fe 2f       	mov	r31, r30
    3370:	27 d0       	rcall	.+78     	; 0x33c0 <__divsf3_pse+0x8e>
    3372:	66 0f       	add	r22, r22
    3374:	77 1f       	adc	r23, r23
    3376:	88 1f       	adc	r24, r24
    3378:	bb 1f       	adc	r27, r27
    337a:	26 17       	cp	r18, r22
    337c:	37 07       	cpc	r19, r23
    337e:	48 07       	cpc	r20, r24
    3380:	ab 07       	cpc	r26, r27
    3382:	b0 e8       	ldi	r27, 0x80	; 128
    3384:	09 f0       	breq	.+2      	; 0x3388 <__divsf3_pse+0x56>
    3386:	bb 0b       	sbc	r27, r27
    3388:	80 2d       	mov	r24, r0
    338a:	bf 01       	movw	r22, r30
    338c:	ff 27       	eor	r31, r31
    338e:	93 58       	subi	r25, 0x83	; 131
    3390:	5f 4f       	sbci	r21, 0xFF	; 255
    3392:	2a f0       	brmi	.+10     	; 0x339e <__divsf3_pse+0x6c>
    3394:	9e 3f       	cpi	r25, 0xFE	; 254
    3396:	51 05       	cpc	r21, r1
    3398:	68 f0       	brcs	.+26     	; 0x33b4 <__divsf3_pse+0x82>
    339a:	92 c0       	rjmp	.+292    	; 0x34c0 <__fp_inf>
    339c:	dc c0       	rjmp	.+440    	; 0x3556 <__fp_szero>
    339e:	5f 3f       	cpi	r21, 0xFF	; 255
    33a0:	ec f3       	brlt	.-6      	; 0x339c <__divsf3_pse+0x6a>
    33a2:	98 3e       	cpi	r25, 0xE8	; 232
    33a4:	dc f3       	brlt	.-10     	; 0x339c <__divsf3_pse+0x6a>
    33a6:	86 95       	lsr	r24
    33a8:	77 95       	ror	r23
    33aa:	67 95       	ror	r22
    33ac:	b7 95       	ror	r27
    33ae:	f7 95       	ror	r31
    33b0:	9f 5f       	subi	r25, 0xFF	; 255
    33b2:	c9 f7       	brne	.-14     	; 0x33a6 <__divsf3_pse+0x74>
    33b4:	88 0f       	add	r24, r24
    33b6:	91 1d       	adc	r25, r1
    33b8:	96 95       	lsr	r25
    33ba:	87 95       	ror	r24
    33bc:	97 f9       	bld	r25, 7
    33be:	08 95       	ret
    33c0:	e1 e0       	ldi	r30, 0x01	; 1
    33c2:	66 0f       	add	r22, r22
    33c4:	77 1f       	adc	r23, r23
    33c6:	88 1f       	adc	r24, r24
    33c8:	bb 1f       	adc	r27, r27
    33ca:	62 17       	cp	r22, r18
    33cc:	73 07       	cpc	r23, r19
    33ce:	84 07       	cpc	r24, r20
    33d0:	ba 07       	cpc	r27, r26
    33d2:	20 f0       	brcs	.+8      	; 0x33dc <__divsf3_pse+0xaa>
    33d4:	62 1b       	sub	r22, r18
    33d6:	73 0b       	sbc	r23, r19
    33d8:	84 0b       	sbc	r24, r20
    33da:	ba 0b       	sbc	r27, r26
    33dc:	ee 1f       	adc	r30, r30
    33de:	88 f7       	brcc	.-30     	; 0x33c2 <__divsf3_pse+0x90>
    33e0:	e0 95       	com	r30
    33e2:	08 95       	ret

000033e4 <__fixsfsi>:
    33e4:	04 d0       	rcall	.+8      	; 0x33ee <__fixunssfsi>
    33e6:	68 94       	set
    33e8:	b1 11       	cpse	r27, r1
    33ea:	b5 c0       	rjmp	.+362    	; 0x3556 <__fp_szero>
    33ec:	08 95       	ret

000033ee <__fixunssfsi>:
    33ee:	98 d0       	rcall	.+304    	; 0x3520 <__fp_splitA>
    33f0:	88 f0       	brcs	.+34     	; 0x3414 <__fixunssfsi+0x26>
    33f2:	9f 57       	subi	r25, 0x7F	; 127
    33f4:	90 f0       	brcs	.+36     	; 0x341a <__fixunssfsi+0x2c>
    33f6:	b9 2f       	mov	r27, r25
    33f8:	99 27       	eor	r25, r25
    33fa:	b7 51       	subi	r27, 0x17	; 23
    33fc:	a0 f0       	brcs	.+40     	; 0x3426 <__fixunssfsi+0x38>
    33fe:	d1 f0       	breq	.+52     	; 0x3434 <__fixunssfsi+0x46>
    3400:	66 0f       	add	r22, r22
    3402:	77 1f       	adc	r23, r23
    3404:	88 1f       	adc	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	1a f0       	brmi	.+6      	; 0x3410 <__fixunssfsi+0x22>
    340a:	ba 95       	dec	r27
    340c:	c9 f7       	brne	.-14     	; 0x3400 <__fixunssfsi+0x12>
    340e:	12 c0       	rjmp	.+36     	; 0x3434 <__fixunssfsi+0x46>
    3410:	b1 30       	cpi	r27, 0x01	; 1
    3412:	81 f0       	breq	.+32     	; 0x3434 <__fixunssfsi+0x46>
    3414:	9f d0       	rcall	.+318    	; 0x3554 <__fp_zero>
    3416:	b1 e0       	ldi	r27, 0x01	; 1
    3418:	08 95       	ret
    341a:	9c c0       	rjmp	.+312    	; 0x3554 <__fp_zero>
    341c:	67 2f       	mov	r22, r23
    341e:	78 2f       	mov	r23, r24
    3420:	88 27       	eor	r24, r24
    3422:	b8 5f       	subi	r27, 0xF8	; 248
    3424:	39 f0       	breq	.+14     	; 0x3434 <__fixunssfsi+0x46>
    3426:	b9 3f       	cpi	r27, 0xF9	; 249
    3428:	cc f3       	brlt	.-14     	; 0x341c <__fixunssfsi+0x2e>
    342a:	86 95       	lsr	r24
    342c:	77 95       	ror	r23
    342e:	67 95       	ror	r22
    3430:	b3 95       	inc	r27
    3432:	d9 f7       	brne	.-10     	; 0x342a <__fixunssfsi+0x3c>
    3434:	3e f4       	brtc	.+14     	; 0x3444 <__fixunssfsi+0x56>
    3436:	90 95       	com	r25
    3438:	80 95       	com	r24
    343a:	70 95       	com	r23
    343c:	61 95       	neg	r22
    343e:	7f 4f       	sbci	r23, 0xFF	; 255
    3440:	8f 4f       	sbci	r24, 0xFF	; 255
    3442:	9f 4f       	sbci	r25, 0xFF	; 255
    3444:	08 95       	ret

00003446 <__floatunsisf>:
    3446:	e8 94       	clt
    3448:	09 c0       	rjmp	.+18     	; 0x345c <__floatsisf+0x12>

0000344a <__floatsisf>:
    344a:	97 fb       	bst	r25, 7
    344c:	3e f4       	brtc	.+14     	; 0x345c <__floatsisf+0x12>
    344e:	90 95       	com	r25
    3450:	80 95       	com	r24
    3452:	70 95       	com	r23
    3454:	61 95       	neg	r22
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	8f 4f       	sbci	r24, 0xFF	; 255
    345a:	9f 4f       	sbci	r25, 0xFF	; 255
    345c:	99 23       	and	r25, r25
    345e:	a9 f0       	breq	.+42     	; 0x348a <__floatsisf+0x40>
    3460:	f9 2f       	mov	r31, r25
    3462:	96 e9       	ldi	r25, 0x96	; 150
    3464:	bb 27       	eor	r27, r27
    3466:	93 95       	inc	r25
    3468:	f6 95       	lsr	r31
    346a:	87 95       	ror	r24
    346c:	77 95       	ror	r23
    346e:	67 95       	ror	r22
    3470:	b7 95       	ror	r27
    3472:	f1 11       	cpse	r31, r1
    3474:	f8 cf       	rjmp	.-16     	; 0x3466 <__floatsisf+0x1c>
    3476:	fa f4       	brpl	.+62     	; 0x34b6 <__floatsisf+0x6c>
    3478:	bb 0f       	add	r27, r27
    347a:	11 f4       	brne	.+4      	; 0x3480 <__floatsisf+0x36>
    347c:	60 ff       	sbrs	r22, 0
    347e:	1b c0       	rjmp	.+54     	; 0x34b6 <__floatsisf+0x6c>
    3480:	6f 5f       	subi	r22, 0xFF	; 255
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	8f 4f       	sbci	r24, 0xFF	; 255
    3486:	9f 4f       	sbci	r25, 0xFF	; 255
    3488:	16 c0       	rjmp	.+44     	; 0x34b6 <__floatsisf+0x6c>
    348a:	88 23       	and	r24, r24
    348c:	11 f0       	breq	.+4      	; 0x3492 <__floatsisf+0x48>
    348e:	96 e9       	ldi	r25, 0x96	; 150
    3490:	11 c0       	rjmp	.+34     	; 0x34b4 <__floatsisf+0x6a>
    3492:	77 23       	and	r23, r23
    3494:	21 f0       	breq	.+8      	; 0x349e <__floatsisf+0x54>
    3496:	9e e8       	ldi	r25, 0x8E	; 142
    3498:	87 2f       	mov	r24, r23
    349a:	76 2f       	mov	r23, r22
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <__floatsisf+0x5e>
    349e:	66 23       	and	r22, r22
    34a0:	71 f0       	breq	.+28     	; 0x34be <__floatsisf+0x74>
    34a2:	96 e8       	ldi	r25, 0x86	; 134
    34a4:	86 2f       	mov	r24, r22
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	2a f0       	brmi	.+10     	; 0x34b6 <__floatsisf+0x6c>
    34ac:	9a 95       	dec	r25
    34ae:	66 0f       	add	r22, r22
    34b0:	77 1f       	adc	r23, r23
    34b2:	88 1f       	adc	r24, r24
    34b4:	da f7       	brpl	.-10     	; 0x34ac <__floatsisf+0x62>
    34b6:	88 0f       	add	r24, r24
    34b8:	96 95       	lsr	r25
    34ba:	87 95       	ror	r24
    34bc:	97 f9       	bld	r25, 7
    34be:	08 95       	ret

000034c0 <__fp_inf>:
    34c0:	97 f9       	bld	r25, 7
    34c2:	9f 67       	ori	r25, 0x7F	; 127
    34c4:	80 e8       	ldi	r24, 0x80	; 128
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	08 95       	ret

000034cc <__fp_nan>:
    34cc:	9f ef       	ldi	r25, 0xFF	; 255
    34ce:	80 ec       	ldi	r24, 0xC0	; 192
    34d0:	08 95       	ret

000034d2 <__fp_pscA>:
    34d2:	00 24       	eor	r0, r0
    34d4:	0a 94       	dec	r0
    34d6:	16 16       	cp	r1, r22
    34d8:	17 06       	cpc	r1, r23
    34da:	18 06       	cpc	r1, r24
    34dc:	09 06       	cpc	r0, r25
    34de:	08 95       	ret

000034e0 <__fp_pscB>:
    34e0:	00 24       	eor	r0, r0
    34e2:	0a 94       	dec	r0
    34e4:	12 16       	cp	r1, r18
    34e6:	13 06       	cpc	r1, r19
    34e8:	14 06       	cpc	r1, r20
    34ea:	05 06       	cpc	r0, r21
    34ec:	08 95       	ret

000034ee <__fp_round>:
    34ee:	09 2e       	mov	r0, r25
    34f0:	03 94       	inc	r0
    34f2:	00 0c       	add	r0, r0
    34f4:	11 f4       	brne	.+4      	; 0x34fa <__fp_round+0xc>
    34f6:	88 23       	and	r24, r24
    34f8:	52 f0       	brmi	.+20     	; 0x350e <__fp_round+0x20>
    34fa:	bb 0f       	add	r27, r27
    34fc:	40 f4       	brcc	.+16     	; 0x350e <__fp_round+0x20>
    34fe:	bf 2b       	or	r27, r31
    3500:	11 f4       	brne	.+4      	; 0x3506 <__fp_round+0x18>
    3502:	60 ff       	sbrs	r22, 0
    3504:	04 c0       	rjmp	.+8      	; 0x350e <__fp_round+0x20>
    3506:	6f 5f       	subi	r22, 0xFF	; 255
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	8f 4f       	sbci	r24, 0xFF	; 255
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	08 95       	ret

00003510 <__fp_split3>:
    3510:	57 fd       	sbrc	r21, 7
    3512:	90 58       	subi	r25, 0x80	; 128
    3514:	44 0f       	add	r20, r20
    3516:	55 1f       	adc	r21, r21
    3518:	59 f0       	breq	.+22     	; 0x3530 <__fp_splitA+0x10>
    351a:	5f 3f       	cpi	r21, 0xFF	; 255
    351c:	71 f0       	breq	.+28     	; 0x353a <__fp_splitA+0x1a>
    351e:	47 95       	ror	r20

00003520 <__fp_splitA>:
    3520:	88 0f       	add	r24, r24
    3522:	97 fb       	bst	r25, 7
    3524:	99 1f       	adc	r25, r25
    3526:	61 f0       	breq	.+24     	; 0x3540 <__fp_splitA+0x20>
    3528:	9f 3f       	cpi	r25, 0xFF	; 255
    352a:	79 f0       	breq	.+30     	; 0x354a <__fp_splitA+0x2a>
    352c:	87 95       	ror	r24
    352e:	08 95       	ret
    3530:	12 16       	cp	r1, r18
    3532:	13 06       	cpc	r1, r19
    3534:	14 06       	cpc	r1, r20
    3536:	55 1f       	adc	r21, r21
    3538:	f2 cf       	rjmp	.-28     	; 0x351e <__fp_split3+0xe>
    353a:	46 95       	lsr	r20
    353c:	f1 df       	rcall	.-30     	; 0x3520 <__fp_splitA>
    353e:	08 c0       	rjmp	.+16     	; 0x3550 <__fp_splitA+0x30>
    3540:	16 16       	cp	r1, r22
    3542:	17 06       	cpc	r1, r23
    3544:	18 06       	cpc	r1, r24
    3546:	99 1f       	adc	r25, r25
    3548:	f1 cf       	rjmp	.-30     	; 0x352c <__fp_splitA+0xc>
    354a:	86 95       	lsr	r24
    354c:	71 05       	cpc	r23, r1
    354e:	61 05       	cpc	r22, r1
    3550:	08 94       	sec
    3552:	08 95       	ret

00003554 <__fp_zero>:
    3554:	e8 94       	clt

00003556 <__fp_szero>:
    3556:	bb 27       	eor	r27, r27
    3558:	66 27       	eor	r22, r22
    355a:	77 27       	eor	r23, r23
    355c:	cb 01       	movw	r24, r22
    355e:	97 f9       	bld	r25, 7
    3560:	08 95       	ret

00003562 <__mulsf3>:
    3562:	0b d0       	rcall	.+22     	; 0x357a <__mulsf3x>
    3564:	c4 cf       	rjmp	.-120    	; 0x34ee <__fp_round>
    3566:	b5 df       	rcall	.-150    	; 0x34d2 <__fp_pscA>
    3568:	28 f0       	brcs	.+10     	; 0x3574 <__mulsf3+0x12>
    356a:	ba df       	rcall	.-140    	; 0x34e0 <__fp_pscB>
    356c:	18 f0       	brcs	.+6      	; 0x3574 <__mulsf3+0x12>
    356e:	95 23       	and	r25, r21
    3570:	09 f0       	breq	.+2      	; 0x3574 <__mulsf3+0x12>
    3572:	a6 cf       	rjmp	.-180    	; 0x34c0 <__fp_inf>
    3574:	ab cf       	rjmp	.-170    	; 0x34cc <__fp_nan>
    3576:	11 24       	eor	r1, r1
    3578:	ee cf       	rjmp	.-36     	; 0x3556 <__fp_szero>

0000357a <__mulsf3x>:
    357a:	ca df       	rcall	.-108    	; 0x3510 <__fp_split3>
    357c:	a0 f3       	brcs	.-24     	; 0x3566 <__mulsf3+0x4>

0000357e <__mulsf3_pse>:
    357e:	95 9f       	mul	r25, r21
    3580:	d1 f3       	breq	.-12     	; 0x3576 <__mulsf3+0x14>
    3582:	95 0f       	add	r25, r21
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	55 1f       	adc	r21, r21
    3588:	62 9f       	mul	r22, r18
    358a:	f0 01       	movw	r30, r0
    358c:	72 9f       	mul	r23, r18
    358e:	bb 27       	eor	r27, r27
    3590:	f0 0d       	add	r31, r0
    3592:	b1 1d       	adc	r27, r1
    3594:	63 9f       	mul	r22, r19
    3596:	aa 27       	eor	r26, r26
    3598:	f0 0d       	add	r31, r0
    359a:	b1 1d       	adc	r27, r1
    359c:	aa 1f       	adc	r26, r26
    359e:	64 9f       	mul	r22, r20
    35a0:	66 27       	eor	r22, r22
    35a2:	b0 0d       	add	r27, r0
    35a4:	a1 1d       	adc	r26, r1
    35a6:	66 1f       	adc	r22, r22
    35a8:	82 9f       	mul	r24, r18
    35aa:	22 27       	eor	r18, r18
    35ac:	b0 0d       	add	r27, r0
    35ae:	a1 1d       	adc	r26, r1
    35b0:	62 1f       	adc	r22, r18
    35b2:	73 9f       	mul	r23, r19
    35b4:	b0 0d       	add	r27, r0
    35b6:	a1 1d       	adc	r26, r1
    35b8:	62 1f       	adc	r22, r18
    35ba:	83 9f       	mul	r24, r19
    35bc:	a0 0d       	add	r26, r0
    35be:	61 1d       	adc	r22, r1
    35c0:	22 1f       	adc	r18, r18
    35c2:	74 9f       	mul	r23, r20
    35c4:	33 27       	eor	r19, r19
    35c6:	a0 0d       	add	r26, r0
    35c8:	61 1d       	adc	r22, r1
    35ca:	23 1f       	adc	r18, r19
    35cc:	84 9f       	mul	r24, r20
    35ce:	60 0d       	add	r22, r0
    35d0:	21 1d       	adc	r18, r1
    35d2:	82 2f       	mov	r24, r18
    35d4:	76 2f       	mov	r23, r22
    35d6:	6a 2f       	mov	r22, r26
    35d8:	11 24       	eor	r1, r1
    35da:	9f 57       	subi	r25, 0x7F	; 127
    35dc:	50 40       	sbci	r21, 0x00	; 0
    35de:	8a f0       	brmi	.+34     	; 0x3602 <__mulsf3_pse+0x84>
    35e0:	e1 f0       	breq	.+56     	; 0x361a <__mulsf3_pse+0x9c>
    35e2:	88 23       	and	r24, r24
    35e4:	4a f0       	brmi	.+18     	; 0x35f8 <__mulsf3_pse+0x7a>
    35e6:	ee 0f       	add	r30, r30
    35e8:	ff 1f       	adc	r31, r31
    35ea:	bb 1f       	adc	r27, r27
    35ec:	66 1f       	adc	r22, r22
    35ee:	77 1f       	adc	r23, r23
    35f0:	88 1f       	adc	r24, r24
    35f2:	91 50       	subi	r25, 0x01	; 1
    35f4:	50 40       	sbci	r21, 0x00	; 0
    35f6:	a9 f7       	brne	.-22     	; 0x35e2 <__mulsf3_pse+0x64>
    35f8:	9e 3f       	cpi	r25, 0xFE	; 254
    35fa:	51 05       	cpc	r21, r1
    35fc:	70 f0       	brcs	.+28     	; 0x361a <__mulsf3_pse+0x9c>
    35fe:	60 cf       	rjmp	.-320    	; 0x34c0 <__fp_inf>
    3600:	aa cf       	rjmp	.-172    	; 0x3556 <__fp_szero>
    3602:	5f 3f       	cpi	r21, 0xFF	; 255
    3604:	ec f3       	brlt	.-6      	; 0x3600 <__mulsf3_pse+0x82>
    3606:	98 3e       	cpi	r25, 0xE8	; 232
    3608:	dc f3       	brlt	.-10     	; 0x3600 <__mulsf3_pse+0x82>
    360a:	86 95       	lsr	r24
    360c:	77 95       	ror	r23
    360e:	67 95       	ror	r22
    3610:	b7 95       	ror	r27
    3612:	f7 95       	ror	r31
    3614:	e7 95       	ror	r30
    3616:	9f 5f       	subi	r25, 0xFF	; 255
    3618:	c1 f7       	brne	.-16     	; 0x360a <__mulsf3_pse+0x8c>
    361a:	fe 2b       	or	r31, r30
    361c:	88 0f       	add	r24, r24
    361e:	91 1d       	adc	r25, r1
    3620:	96 95       	lsr	r25
    3622:	87 95       	ror	r24
    3624:	97 f9       	bld	r25, 7
    3626:	08 95       	ret

00003628 <_spiCallBack>:
    3628:	81 b3       	in	r24, 0x11	; 17
    362a:	8f 60       	ori	r24, 0x0F	; 15
    362c:	81 bb       	out	0x11, r24	; 17
    362e:	28 98       	cbi	0x05, 0	; 5
    3630:	28 9a       	sbi	0x05, 0	; 5
    3632:	21 b3       	in	r18, 0x11	; 17
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	00 90 f9 0e 	lds	r0, 0x0EF9	; 0x800ef9 <_digitNo>
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <_spiCallBack+0x1a>
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	0a 94       	dec	r0
    3644:	e2 f7       	brpl	.-8      	; 0x363e <_spiCallBack+0x16>
    3646:	80 95       	com	r24
    3648:	82 23       	and	r24, r18
    364a:	81 bb       	out	0x11, r24	; 17
    364c:	e0 91 c9 0e 	lds	r30, 0x0EC9	; 0x800ec9 <_displayDoneCallBack>
    3650:	f0 91 ca 0e 	lds	r31, 0x0ECA	; 0x800eca <_displayDoneCallBack+0x1>
    3654:	30 97       	sbiw	r30, 0x00	; 0
    3656:	09 f0       	breq	.+2      	; 0x365a <_spiCallBack+0x32>
    3658:	19 95       	eicall
    365a:	08 95       	ret

0000365c <display_7seg_displayErr>:
    365c:	9f b7       	in	r25, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	e5 ef       	ldi	r30, 0xF5	; 245
    3662:	fe e0       	ldi	r31, 0x0E	; 14
    3664:	10 82       	st	Z, r1
    3666:	8e e9       	ldi	r24, 0x9E	; 158
    3668:	81 83       	std	Z+1, r24	; 0x01
    366a:	8a e0       	ldi	r24, 0x0A	; 10
    366c:	82 83       	std	Z+2, r24	; 0x02
    366e:	83 83       	std	Z+3, r24	; 0x03
    3670:	9f bf       	out	0x3f, r25	; 63
    3672:	08 95       	ret

00003674 <display_7seg_display>:
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	6b 01       	movw	r12, r22
    3688:	7c 01       	movw	r14, r24
    368a:	b4 2e       	mov	r11, r20
    368c:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <_maxHexSegmentindex>
    3690:	83 e0       	ldi	r24, 0x03	; 3
    3692:	84 17       	cp	r24, r20
    3694:	78 f1       	brcs	.+94     	; 0x36f4 <display_7seg_display+0x80>
    3696:	64 2f       	mov	r22, r20
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	d3 de       	rcall	.-602    	; 0x3446 <__floatunsisf>
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	60 e0       	ldi	r22, 0x00	; 0
    36a6:	70 e0       	ldi	r23, 0x00	; 0
    36a8:	80 e2       	ldi	r24, 0x20	; 32
    36aa:	91 e4       	ldi	r25, 0x41	; 65
    36ac:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pow>
    36b0:	a7 01       	movw	r20, r14
    36b2:	96 01       	movw	r18, r12
    36b4:	56 df       	rcall	.-340    	; 0x3562 <__mulsf3>
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	5f e3       	ldi	r21, 0x3F	; 63
    36be:	c6 dd       	rcall	.-1140   	; 0x324c <__addsf3>
    36c0:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <floor>
    36c4:	8f de       	rcall	.-738    	; 0x33e4 <__fixsfsi>
    36c6:	ab 01       	movw	r20, r22
    36c8:	77 23       	and	r23, r23
    36ca:	64 f4       	brge	.+24     	; 0x36e4 <display_7seg_display+0x70>
    36cc:	44 27       	eor	r20, r20
    36ce:	55 27       	eor	r21, r21
    36d0:	46 1b       	sub	r20, r22
    36d2:	57 0b       	sbc	r21, r23
    36d4:	21 e0       	ldi	r18, 0x01	; 1
    36d6:	48 3e       	cpi	r20, 0xE8	; 232
    36d8:	83 e0       	ldi	r24, 0x03	; 3
    36da:	58 07       	cpc	r21, r24
    36dc:	0c f4       	brge	.+2      	; 0x36e0 <display_7seg_display+0x6c>
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	11 e0       	ldi	r17, 0x01	; 1
    36e2:	0c c0       	rjmp	.+24     	; 0x36fc <display_7seg_display+0x88>
    36e4:	21 e0       	ldi	r18, 0x01	; 1
    36e6:	40 31       	cpi	r20, 0x10	; 16
    36e8:	87 e2       	ldi	r24, 0x27	; 39
    36ea:	58 07       	cpc	r21, r24
    36ec:	0c f4       	brge	.+2      	; 0x36f0 <display_7seg_display+0x7c>
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	10 e0       	ldi	r17, 0x00	; 0
    36f2:	04 c0       	rjmp	.+8      	; 0x36fc <display_7seg_display+0x88>
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	21 e0       	ldi	r18, 0x01	; 1
    36fa:	10 e0       	ldi	r17, 0x00	; 0
    36fc:	0f b7       	in	r16, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	22 23       	and	r18, r18
    3702:	11 f0       	breq	.+4      	; 0x3708 <display_7seg_display+0x94>
    3704:	ab df       	rcall	.-170    	; 0x365c <display_7seg_displayErr>
    3706:	51 c0       	rjmp	.+162    	; 0x37aa <display_7seg_display+0x136>
    3708:	c9 ef       	ldi	r28, 0xF9	; 249
    370a:	de e0       	ldi	r29, 0x0E	; 14
    370c:	0f 2e       	mov	r0, r31
    370e:	f5 ef       	ldi	r31, 0xF5	; 245
    3710:	cf 2e       	mov	r12, r31
    3712:	fe e0       	ldi	r31, 0x0E	; 14
    3714:	df 2e       	mov	r13, r31
    3716:	f0 2d       	mov	r31, r0
    3718:	0f 2e       	mov	r0, r31
    371a:	fa e0       	ldi	r31, 0x0A	; 10
    371c:	ef 2e       	mov	r14, r31
    371e:	f1 2c       	mov	r15, r1
    3720:	f0 2d       	mov	r31, r0
    3722:	ca 01       	movw	r24, r20
    3724:	b7 01       	movw	r22, r14
    3726:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <__divmodhi4>
    372a:	fc 01       	movw	r30, r24
    372c:	ed 50       	subi	r30, 0x0D	; 13
    372e:	fc 4f       	sbci	r31, 0xFC	; 252
    3730:	80 81       	ld	r24, Z
    3732:	8a 93       	st	-Y, r24
    3734:	46 2f       	mov	r20, r22
    3736:	57 2f       	mov	r21, r23
    3738:	cc 15       	cp	r28, r12
    373a:	dd 05       	cpc	r29, r13
    373c:	91 f7       	brne	.-28     	; 0x3722 <display_7seg_display+0xae>
    373e:	43 e0       	ldi	r20, 0x03	; 3
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	4b 19       	sub	r20, r11
    3744:	51 09       	sbc	r21, r1
    3746:	14 16       	cp	r1, r20
    3748:	15 06       	cpc	r1, r21
    374a:	f4 f4       	brge	.+60     	; 0x3788 <display_7seg_display+0x114>
    374c:	80 91 f5 0e 	lds	r24, 0x0EF5	; 0x800ef5 <_digitSegments>
    3750:	8c 3f       	cpi	r24, 0xFC	; 252
    3752:	49 f0       	breq	.+18     	; 0x3766 <display_7seg_display+0xf2>
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	19 c0       	rjmp	.+50     	; 0x378a <display_7seg_display+0x116>
    3758:	fc 01       	movw	r30, r24
    375a:	eb 50       	subi	r30, 0x0B	; 11
    375c:	f1 4f       	sbci	r31, 0xF1	; 241
    375e:	30 81       	ld	r19, Z
    3760:	3c 3f       	cpi	r19, 0xFC	; 252
    3762:	21 f0       	breq	.+8      	; 0x376c <display_7seg_display+0xf8>
    3764:	12 c0       	rjmp	.+36     	; 0x378a <display_7seg_display+0x116>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	fc 01       	movw	r30, r24
    376e:	eb 50       	subi	r30, 0x0B	; 11
    3770:	f1 4f       	sbci	r31, 0xF1	; 241
    3772:	10 82       	st	Z, r1
    3774:	62 2f       	mov	r22, r18
    3776:	2f 5f       	subi	r18, 0xFF	; 255
    3778:	82 2f       	mov	r24, r18
    377a:	02 2e       	mov	r0, r18
    377c:	00 0c       	add	r0, r0
    377e:	99 0b       	sbc	r25, r25
    3780:	84 17       	cp	r24, r20
    3782:	95 07       	cpc	r25, r21
    3784:	4c f3       	brlt	.-46     	; 0x3758 <display_7seg_display+0xe4>
    3786:	01 c0       	rjmp	.+2      	; 0x378a <display_7seg_display+0x116>
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	11 23       	and	r17, r17
    378c:	31 f0       	breq	.+12     	; 0x379a <display_7seg_display+0x126>
    378e:	e6 2f       	mov	r30, r22
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	eb 50       	subi	r30, 0x0B	; 11
    3794:	f1 4f       	sbci	r31, 0xF1	; 241
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	80 83       	st	Z, r24
    379a:	bb 20       	and	r11, r11
    379c:	31 f0       	breq	.+12     	; 0x37aa <display_7seg_display+0x136>
    379e:	fa 01       	movw	r30, r20
    37a0:	eb 50       	subi	r30, 0x0B	; 11
    37a2:	f1 4f       	sbci	r31, 0xF1	; 241
    37a4:	80 81       	ld	r24, Z
    37a6:	81 60       	ori	r24, 0x01	; 1
    37a8:	80 83       	st	Z, r24
    37aa:	0f bf       	out	0x3f, r16	; 63
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	08 95       	ret

000037c0 <display_7seg_powerUp>:
    37c0:	85 b5       	in	r24, 0x25	; 37
    37c2:	85 60       	ori	r24, 0x05	; 5
    37c4:	85 bd       	out	0x25, r24	; 37
    37c6:	08 95       	ret

000037c8 <display_7seg_powerDown>:
    37c8:	85 b5       	in	r24, 0x25	; 37
    37ca:	88 7f       	andi	r24, 0xF8	; 248
    37cc:	85 bd       	out	0x25, r24	; 37
    37ce:	81 b3       	in	r24, 0x11	; 17
    37d0:	8f 60       	ori	r24, 0x0F	; 15
    37d2:	81 bb       	out	0x11, r24	; 17
    37d4:	08 95       	ret

000037d6 <display_7seg_initialise>:
    37d6:	8f 92       	push	r8
    37d8:	af 92       	push	r10
    37da:	cf 92       	push	r12
    37dc:	ef 92       	push	r14
    37de:	0f 93       	push	r16
    37e0:	1f 93       	push	r17
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	ec 01       	movw	r28, r24
    37e8:	80 b3       	in	r24, 0x10	; 16
    37ea:	8f 60       	ori	r24, 0x0F	; 15
    37ec:	80 bb       	out	0x10, r24	; 16
    37ee:	81 b3       	in	r24, 0x11	; 17
    37f0:	8f 60       	ori	r24, 0x0F	; 15
    37f2:	81 bb       	out	0x11, r24	; 17
    37f4:	20 9a       	sbi	0x04, 0	; 4
    37f6:	84 e1       	ldi	r24, 0x14	; 20
    37f8:	9b e1       	ldi	r25, 0x1B	; 27
    37fa:	9f 93       	push	r25
    37fc:	8f 93       	push	r24
    37fe:	81 2c       	mov	r8, r1
    3800:	a1 2c       	mov	r10, r1
    3802:	c1 2c       	mov	r12, r1
    3804:	e1 2c       	mov	r14, r1
    3806:	00 e0       	ldi	r16, 0x00	; 0
    3808:	10 e0       	ldi	r17, 0x00	; 0
    380a:	20 e2       	ldi	r18, 0x20	; 32
    380c:	40 e0       	ldi	r20, 0x00	; 0
    380e:	63 e0       	ldi	r22, 0x03	; 3
    3810:	80 e1       	ldi	r24, 0x10	; 16
    3812:	f8 d5       	rcall	.+3056   	; 0x4404 <spi_create>
    3814:	90 93 fb 0e 	sts	0x0EFB, r25	; 0x800efb <_spi+0x1>
    3818:	80 93 fa 0e 	sts	0x0EFA, r24	; 0x800efa <_spi>
    381c:	89 e1       	ldi	r24, 0x19	; 25
    381e:	87 bd       	out	0x27, r24	; 39
    3820:	84 b5       	in	r24, 0x24	; 36
    3822:	82 60       	ori	r24, 0x02	; 2
    3824:	84 bd       	out	0x24, r24	; 36
    3826:	ee e6       	ldi	r30, 0x6E	; 110
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	80 81       	ld	r24, Z
    382c:	82 60       	ori	r24, 0x02	; 2
    382e:	80 83       	st	Z, r24
    3830:	cb df       	rcall	.-106    	; 0x37c8 <display_7seg_powerDown>
    3832:	d0 93 ca 0e 	sts	0x0ECA, r29	; 0x800eca <_displayDoneCallBack+0x1>
    3836:	c0 93 c9 0e 	sts	0x0EC9, r28	; 0x800ec9 <_displayDoneCallBack>
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	ef 90       	pop	r14
    3848:	cf 90       	pop	r12
    384a:	af 90       	pop	r10
    384c:	8f 90       	pop	r8
    384e:	08 95       	ret

00003850 <__vector_21>:
    3850:	1f 92       	push	r1
    3852:	0f 92       	push	r0
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	0f 92       	push	r0
    3858:	11 24       	eor	r1, r1
    385a:	0b b6       	in	r0, 0x3b	; 59
    385c:	0f 92       	push	r0
    385e:	2f 93       	push	r18
    3860:	3f 93       	push	r19
    3862:	4f 93       	push	r20
    3864:	5f 93       	push	r21
    3866:	6f 93       	push	r22
    3868:	7f 93       	push	r23
    386a:	8f 93       	push	r24
    386c:	9f 93       	push	r25
    386e:	af 93       	push	r26
    3870:	bf 93       	push	r27
    3872:	ef 93       	push	r30
    3874:	ff 93       	push	r31
    3876:	80 91 cc 0e 	lds	r24, 0x0ECC	; 0x800ecc <_maxHexSegmentindex>
    387a:	88 23       	and	r24, r24
    387c:	69 f1       	breq	.+90     	; 0x38d8 <__vector_21+0x88>
    387e:	20 91 cd 0e 	lds	r18, 0x0ECD	; 0x800ecd <_intCounter>
    3882:	30 91 ce 0e 	lds	r19, 0x0ECE	; 0x800ece <_intCounter+0x1>
    3886:	25 3f       	cpi	r18, 0xF5	; 245
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	39 07       	cpc	r19, r25
    388c:	38 f4       	brcc	.+14     	; 0x389c <__vector_21+0x4c>
    388e:	2f 5f       	subi	r18, 0xFF	; 255
    3890:	3f 4f       	sbci	r19, 0xFF	; 255
    3892:	30 93 ce 0e 	sts	0x0ECE, r19	; 0x800ece <_intCounter+0x1>
    3896:	20 93 cd 0e 	sts	0x0ECD, r18	; 0x800ecd <_intCounter>
    389a:	1e c0       	rjmp	.+60     	; 0x38d8 <__vector_21+0x88>
    389c:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <_intCounter+0x1>
    38a0:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <_intCounter>
    38a4:	e0 91 cb 0e 	lds	r30, 0x0ECB	; 0x800ecb <_scrollIndex>
    38a8:	2e 2f       	mov	r18, r30
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	04 97       	sbiw	r24, 0x04	; 4
    38b0:	28 17       	cp	r18, r24
    38b2:	39 07       	cpc	r19, r25
    38b4:	14 f4       	brge	.+4      	; 0x38ba <__vector_21+0x6a>
    38b6:	ef 5f       	subi	r30, 0xFF	; 255
    38b8:	01 c0       	rjmp	.+2      	; 0x38bc <__vector_21+0x6c>
    38ba:	e0 e0       	ldi	r30, 0x00	; 0
    38bc:	e0 93 cb 0e 	sts	0x0ECB, r30	; 0x800ecb <_scrollIndex>
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	e1 53       	subi	r30, 0x31	; 49
    38c4:	f1 4f       	sbci	r31, 0xF1	; 241
    38c6:	a5 ef       	ldi	r26, 0xF5	; 245
    38c8:	be e0       	ldi	r27, 0x0E	; 14
    38ca:	29 ef       	ldi	r18, 0xF9	; 249
    38cc:	3e e0       	ldi	r19, 0x0E	; 14
    38ce:	81 91       	ld	r24, Z+
    38d0:	8d 93       	st	X+, r24
    38d2:	a2 17       	cp	r26, r18
    38d4:	b3 07       	cpc	r27, r19
    38d6:	d9 f7       	brne	.-10     	; 0x38ce <__vector_21+0x7e>
    38d8:	80 91 f9 0e 	lds	r24, 0x0EF9	; 0x800ef9 <_digitNo>
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	83 70       	andi	r24, 0x03	; 3
    38e2:	90 78       	andi	r25, 0x80	; 128
    38e4:	99 23       	and	r25, r25
    38e6:	24 f4       	brge	.+8      	; 0x38f0 <__vector_21+0xa0>
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	8c 6f       	ori	r24, 0xFC	; 252
    38ec:	9f 6f       	ori	r25, 0xFF	; 255
    38ee:	01 96       	adiw	r24, 0x01	; 1
    38f0:	80 93 f9 0e 	sts	0x0EF9, r24	; 0x800ef9 <_digitNo>
    38f4:	99 27       	eor	r25, r25
    38f6:	fc 01       	movw	r30, r24
    38f8:	eb 50       	subi	r30, 0x0B	; 11
    38fa:	f1 4f       	sbci	r31, 0xF1	; 241
    38fc:	60 81       	ld	r22, Z
    38fe:	60 95       	com	r22
    3900:	80 91 fa 0e 	lds	r24, 0x0EFA	; 0x800efa <_spi>
    3904:	90 91 fb 0e 	lds	r25, 0x0EFB	; 0x800efb <_spi+0x1>
    3908:	4f d6       	rcall	.+3230   	; 0x45a8 <spi_sendByte>
    390a:	ff 91       	pop	r31
    390c:	ef 91       	pop	r30
    390e:	bf 91       	pop	r27
    3910:	af 91       	pop	r26
    3912:	9f 91       	pop	r25
    3914:	8f 91       	pop	r24
    3916:	7f 91       	pop	r23
    3918:	6f 91       	pop	r22
    391a:	5f 91       	pop	r21
    391c:	4f 91       	pop	r20
    391e:	3f 91       	pop	r19
    3920:	2f 91       	pop	r18
    3922:	0f 90       	pop	r0
    3924:	0b be       	out	0x3b, r0	; 59
    3926:	0f 90       	pop	r0
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	0f 90       	pop	r0
    392c:	1f 90       	pop	r1
    392e:	18 95       	reti

00003930 <_hihTwiCallback>:
    3930:	65 30       	cpi	r22, 0x05	; 5
    3932:	f1 f4       	brne	.+60     	; 0x3970 <_hihTwiCallback+0x40>
    3934:	fa 01       	movw	r30, r20
    3936:	80 81       	ld	r24, Z
    3938:	8f 73       	andi	r24, 0x3F	; 63
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	98 2f       	mov	r25, r24
    393e:	88 27       	eor	r24, r24
    3940:	21 81       	ldd	r18, Z+1	; 0x01
    3942:	82 2b       	or	r24, r18
    3944:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3948:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    394c:	82 81       	ldd	r24, Z+2	; 0x02
    394e:	f0 e4       	ldi	r31, 0x40	; 64
    3950:	8f 9f       	mul	r24, r31
    3952:	c0 01       	movw	r24, r0
    3954:	11 24       	eor	r1, r1
    3956:	fa 01       	movw	r30, r20
    3958:	23 81       	ldd	r18, Z+3	; 0x03
    395a:	26 95       	lsr	r18
    395c:	26 95       	lsr	r18
    395e:	82 2b       	or	r24, r18
    3960:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3964:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	80 93 fc 0e 	sts	0x0EFC, r24	; 0x800efc <_measuringIsReady>
    396e:	08 95       	ret
    3970:	64 30       	cpi	r22, 0x04	; 4
    3972:	51 f0       	breq	.+20     	; 0x3988 <_hihTwiCallback+0x58>
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	90 e4       	ldi	r25, 0x40	; 64
    3978:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    397c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3980:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3984:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3988:	08 95       	ret

0000398a <hih8120_initialise>:
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	08 e9       	ldi	r16, 0x98	; 152
    3990:	1c e1       	ldi	r17, 0x1C	; 28
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	34 e2       	ldi	r19, 0x24	; 36
    3996:	44 ef       	ldi	r20, 0xF4	; 244
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	60 e0       	ldi	r22, 0x00	; 0
    399c:	87 e2       	ldi	r24, 0x27	; 39
    399e:	25 d7       	rcall	.+3658   	; 0x47ea <twiCreate>
    39a0:	90 93 fe 0e 	sts	0x0EFE, r25	; 0x800efe <_hih8120Handler+0x1>
    39a4:	80 93 fd 0e 	sts	0x0EFD, r24	; 0x800efd <_hih8120Handler>
    39a8:	21 e0       	ldi	r18, 0x01	; 1
    39aa:	89 2b       	or	r24, r25
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <hih8120_initialise+0x26>
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	82 2f       	mov	r24, r18
    39b2:	1f 91       	pop	r17
    39b4:	0f 91       	pop	r16
    39b6:	08 95       	ret

000039b8 <hih8120_wakeup>:
    39b8:	80 91 fd 0e 	lds	r24, 0x0EFD	; 0x800efd <_hih8120Handler>
    39bc:	90 91 fe 0e 	lds	r25, 0x0EFE	; 0x800efe <_hih8120Handler+0x1>
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	51 f0       	breq	.+20     	; 0x39d8 <hih8120_wakeup+0x20>
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	70 e0       	ldi	r23, 0x00	; 0
    39ca:	60 d7       	rcall	.+3776   	; 0x488c <twiTransmit>
    39cc:	84 30       	cpi	r24, 0x04	; 4
    39ce:	31 f4       	brne	.+12     	; 0x39dc <hih8120_wakeup+0x24>
    39d0:	10 92 fc 0e 	sts	0x0EFC, r1	; 0x800efc <_measuringIsReady>
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	08 95       	ret
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	08 95       	ret
    39dc:	83 e0       	ldi	r24, 0x03	; 3
    39de:	08 95       	ret

000039e0 <hih8120_measure>:
    39e0:	80 91 fd 0e 	lds	r24, 0x0EFD	; 0x800efd <_hih8120Handler>
    39e4:	90 91 fe 0e 	lds	r25, 0x0EFE	; 0x800efe <_hih8120Handler+0x1>
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	31 f0       	breq	.+12     	; 0x39f8 <hih8120_measure+0x18>
    39ec:	64 e0       	ldi	r22, 0x04	; 4
    39ee:	9a d7       	rcall	.+3892   	; 0x4924 <twiReceive>
    39f0:	85 30       	cpi	r24, 0x05	; 5
    39f2:	21 f0       	breq	.+8      	; 0x39fc <hih8120_measure+0x1c>
    39f4:	83 e0       	ldi	r24, 0x03	; 3
    39f6:	08 95       	ret
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	08 95       	ret
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	08 95       	ret

00003a00 <hih8120_getHumidity>:
    3a00:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a04:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	1c dd       	rcall	.-1480   	; 0x3446 <__floatunsisf>
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	48 ec       	ldi	r20, 0xC8	; 200
    3a14:	52 e4       	ldi	r21, 0x42	; 66
    3a16:	a5 dd       	rcall	.-1206   	; 0x3562 <__mulsf3>
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	38 ef       	ldi	r19, 0xF8	; 248
    3a1c:	4f e7       	ldi	r20, 0x7F	; 127
    3a1e:	56 e4       	ldi	r21, 0x46	; 70
    3a20:	79 cc       	rjmp	.-1806   	; 0x3314 <__divsf3>
    3a22:	08 95       	ret

00003a24 <hih8120_getTemperature>:
    3a24:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a28:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0a dd       	rcall	.-1516   	; 0x3446 <__floatunsisf>
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	45 e2       	ldi	r20, 0x25	; 37
    3a38:	53 e4       	ldi	r21, 0x43	; 67
    3a3a:	93 dd       	rcall	.-1242   	; 0x3562 <__mulsf3>
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	38 ef       	ldi	r19, 0xF8	; 248
    3a40:	4f e7       	ldi	r20, 0x7F	; 127
    3a42:	56 e4       	ldi	r21, 0x46	; 70
    3a44:	67 dc       	rcall	.-1842   	; 0x3314 <__divsf3>
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e2       	ldi	r20, 0x20	; 32
    3a4c:	52 e4       	ldi	r21, 0x42	; 66
    3a4e:	fd cb       	rjmp	.-2054   	; 0x324a <__subsf3>
    3a50:	08 95       	ret

00003a52 <_serialCallBack>:
    3a52:	80 91 02 0f 	lds	r24, 0x0F02	; 0x800f02 <crc_sum.1945>
    3a56:	86 0f       	add	r24, r22
    3a58:	80 93 02 0f 	sts	0x0F02, r24	; 0x800f02 <crc_sum.1945>
    3a5c:	90 91 05 0f 	lds	r25, 0x0F05	; 0x800f05 <_mh_state>
    3a60:	91 30       	cpi	r25, 0x01	; 1
    3a62:	79 f0       	breq	.+30     	; 0x3a82 <_serialCallBack+0x30>
    3a64:	28 f0       	brcs	.+10     	; 0x3a70 <_serialCallBack+0x1e>
    3a66:	92 30       	cpi	r25, 0x02	; 2
    3a68:	a9 f0       	breq	.+42     	; 0x3a94 <_serialCallBack+0x42>
    3a6a:	93 30       	cpi	r25, 0x03	; 3
    3a6c:	19 f1       	breq	.+70     	; 0x3ab4 <_serialCallBack+0x62>
    3a6e:	08 95       	ret
    3a70:	6f 3f       	cpi	r22, 0xFF	; 255
    3a72:	09 f0       	breq	.+2      	; 0x3a76 <_serialCallBack+0x24>
    3a74:	48 c0       	rjmp	.+144    	; 0x3b06 <_serialCallBack+0xb4>
    3a76:	10 92 02 0f 	sts	0x0F02, r1	; 0x800f02 <crc_sum.1945>
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	80 93 05 0f 	sts	0x0F05, r24	; 0x800f05 <_mh_state>
    3a80:	08 95       	ret
    3a82:	66 38       	cpi	r22, 0x86	; 134
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <_serialCallBack+0x36>
    3a86:	3f c0       	rjmp	.+126    	; 0x3b06 <_serialCallBack+0xb4>
    3a88:	10 92 01 0f 	sts	0x0F01, r1	; 0x800f01 <inDex.1943>
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	80 93 05 0f 	sts	0x0F05, r24	; 0x800f05 <_mh_state>
    3a92:	08 95       	ret
    3a94:	e0 91 01 0f 	lds	r30, 0x0F01	; 0x800f01 <inDex.1943>
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	8e 0f       	add	r24, r30
    3a9c:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <inDex.1943>
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	e1 50       	subi	r30, 0x01	; 1
    3aa4:	f1 4f       	sbci	r31, 0xF1	; 241
    3aa6:	60 83       	st	Z, r22
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	69 f5       	brne	.+90     	; 0x3b06 <_serialCallBack+0xb4>
    3aac:	83 e0       	ldi	r24, 0x03	; 3
    3aae:	80 93 05 0f 	sts	0x0F05, r24	; 0x800f05 <_mh_state>
    3ab2:	08 95       	ret
    3ab4:	90 91 01 0f 	lds	r25, 0x0F01	; 0x800f01 <inDex.1943>
    3ab8:	21 e0       	ldi	r18, 0x01	; 1
    3aba:	29 0f       	add	r18, r25
    3abc:	20 93 01 0f 	sts	0x0F01, r18	; 0x800f01 <inDex.1943>
    3ac0:	96 30       	cpi	r25, 0x06	; 6
    3ac2:	09 f5       	brne	.+66     	; 0x3b06 <_serialCallBack+0xb4>
    3ac4:	81 11       	cpse	r24, r1
    3ac6:	0e c0       	rjmp	.+28     	; 0x3ae4 <_serialCallBack+0x92>
    3ac8:	ef ef       	ldi	r30, 0xFF	; 255
    3aca:	fe e0       	ldi	r31, 0x0E	; 14
    3acc:	80 81       	ld	r24, Z
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	98 2f       	mov	r25, r24
    3ad2:	88 27       	eor	r24, r24
    3ad4:	21 81       	ldd	r18, Z+1	; 0x01
    3ad6:	82 0f       	add	r24, r18
    3ad8:	91 1d       	adc	r25, r1
    3ada:	90 93 07 0f 	sts	0x0F07, r25	; 0x800f07 <_ppm+0x1>
    3ade:	80 93 06 0f 	sts	0x0F06, r24	; 0x800f06 <_ppm>
    3ae2:	04 c0       	rjmp	.+8      	; 0x3aec <_serialCallBack+0x9a>
    3ae4:	10 92 07 0f 	sts	0x0F07, r1	; 0x800f07 <_ppm+0x1>
    3ae8:	10 92 06 0f 	sts	0x0F06, r1	; 0x800f06 <_ppm>
    3aec:	10 92 05 0f 	sts	0x0F05, r1	; 0x800f05 <_mh_state>
    3af0:	e0 91 03 0f 	lds	r30, 0x0F03	; 0x800f03 <_appCallBack>
    3af4:	f0 91 04 0f 	lds	r31, 0x0F04	; 0x800f04 <_appCallBack+0x1>
    3af8:	30 97       	sbiw	r30, 0x00	; 0
    3afa:	29 f0       	breq	.+10     	; 0x3b06 <_serialCallBack+0xb4>
    3afc:	80 91 06 0f 	lds	r24, 0x0F06	; 0x800f06 <_ppm>
    3b00:	90 91 07 0f 	lds	r25, 0x0F07	; 0x800f07 <_ppm+0x1>
    3b04:	19 95       	eicall
    3b06:	08 95       	ret

00003b08 <mh_z19_initialise>:
    3b08:	8f 92       	push	r8
    3b0a:	9f 92       	push	r9
    3b0c:	af 92       	push	r10
    3b0e:	cf 92       	push	r12
    3b10:	ef 92       	push	r14
    3b12:	0f 93       	push	r16
    3b14:	0f 2e       	mov	r0, r31
    3b16:	f9 e2       	ldi	r31, 0x29	; 41
    3b18:	8f 2e       	mov	r8, r31
    3b1a:	fd e1       	ldi	r31, 0x1D	; 29
    3b1c:	9f 2e       	mov	r9, r31
    3b1e:	f0 2d       	mov	r31, r0
    3b20:	68 94       	set
    3b22:	aa 24       	eor	r10, r10
    3b24:	a4 f8       	bld	r10, 4
    3b26:	68 94       	set
    3b28:	cc 24       	eor	r12, r12
    3b2a:	c4 f8       	bld	r12, 4
    3b2c:	e1 2c       	mov	r14, r1
    3b2e:	00 e0       	ldi	r16, 0x00	; 0
    3b30:	23 e0       	ldi	r18, 0x03	; 3
    3b32:	40 e8       	ldi	r20, 0x80	; 128
    3b34:	55 e2       	ldi	r21, 0x25	; 37
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	4b d0       	rcall	.+150    	; 0x3bd2 <serial_create>
    3b3c:	90 93 09 0f 	sts	0x0F09, r25	; 0x800f09 <_serial+0x1>
    3b40:	80 93 08 0f 	sts	0x0F08, r24	; 0x800f08 <_serial>
    3b44:	0f 91       	pop	r16
    3b46:	ef 90       	pop	r14
    3b48:	cf 90       	pop	r12
    3b4a:	af 90       	pop	r10
    3b4c:	9f 90       	pop	r9
    3b4e:	8f 90       	pop	r8
    3b50:	08 95       	ret

00003b52 <mh_z19_takeMeassuring>:
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	29 97       	sbiw	r28, 0x09	; 9
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	89 e0       	ldi	r24, 0x09	; 9
    3b68:	e2 e2       	ldi	r30, 0x22	; 34
    3b6a:	f2 e0       	ldi	r31, 0x02	; 2
    3b6c:	9e 01       	movw	r18, r28
    3b6e:	2f 5f       	subi	r18, 0xFF	; 255
    3b70:	3f 4f       	sbci	r19, 0xFF	; 255
    3b72:	d9 01       	movw	r26, r18
    3b74:	01 90       	ld	r0, Z+
    3b76:	0d 92       	st	X+, r0
    3b78:	8a 95       	dec	r24
    3b7a:	e1 f7       	brne	.-8      	; 0x3b74 <mh_z19_takeMeassuring+0x22>
    3b7c:	10 92 07 0f 	sts	0x0F07, r1	; 0x800f07 <_ppm+0x1>
    3b80:	10 92 06 0f 	sts	0x0F06, r1	; 0x800f06 <_ppm>
    3b84:	80 91 08 0f 	lds	r24, 0x0F08	; 0x800f08 <_serial>
    3b88:	90 91 09 0f 	lds	r25, 0x0F09	; 0x800f09 <_serial+0x1>
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	31 f0       	breq	.+12     	; 0x3b9c <mh_z19_takeMeassuring+0x4a>
    3b90:	42 2f       	mov	r20, r18
    3b92:	53 2f       	mov	r21, r19
    3b94:	69 e0       	ldi	r22, 0x09	; 9
    3b96:	e9 d0       	rcall	.+466    	; 0x3d6a <serial_sendBytes>
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <mh_z19_takeMeassuring+0x4c>
    3b9c:	82 e0       	ldi	r24, 0x02	; 2
    3b9e:	29 96       	adiw	r28, 0x09	; 9
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    3bae:	08 95       	ret

00003bb0 <mh_z19_getCo2Ppm>:
    3bb0:	20 91 06 0f 	lds	r18, 0x0F06	; 0x800f06 <_ppm>
    3bb4:	30 91 07 0f 	lds	r19, 0x0F07	; 0x800f07 <_ppm+0x1>
    3bb8:	21 15       	cp	r18, r1
    3bba:	31 05       	cpc	r19, r1
    3bbc:	29 f4       	brne	.+10     	; 0x3bc8 <mh_z19_getCo2Ppm+0x18>
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	11 82       	std	Z+1, r1	; 0x01
    3bc2:	10 82       	st	Z, r1
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	08 95       	ret
    3bc8:	fc 01       	movw	r30, r24
    3bca:	31 83       	std	Z+1, r19	; 0x01
    3bcc:	20 83       	st	Z, r18
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	08 95       	ret

00003bd2 <serial_create>:
    3bd2:	2f 92       	push	r2
    3bd4:	3f 92       	push	r3
    3bd6:	4f 92       	push	r4
    3bd8:	5f 92       	push	r5
    3bda:	6f 92       	push	r6
    3bdc:	7f 92       	push	r7
    3bde:	8f 92       	push	r8
    3be0:	9f 92       	push	r9
    3be2:	af 92       	push	r10
    3be4:	cf 92       	push	r12
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	f8 2e       	mov	r15, r24
    3bf8:	2a 01       	movw	r4, r20
    3bfa:	3b 01       	movw	r6, r22
    3bfc:	88 e0       	ldi	r24, 0x08	; 8
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 e5 27 	call	0x4fca	; 0x4fca <malloc>
    3c04:	8c 01       	movw	r16, r24
    3c06:	8f 2d       	mov	r24, r15
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	ee 0f       	add	r30, r30
    3c0e:	ff 1f       	adc	r31, r31
    3c10:	e6 5f       	subi	r30, 0xF6	; 246
    3c12:	f0 4f       	sbci	r31, 0xF0	; 240
    3c14:	11 83       	std	Z+1, r17	; 0x01
    3c16:	00 83       	st	Z, r16
    3c18:	01 15       	cp	r16, r1
    3c1a:	11 05       	cpc	r17, r1
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <serial_create+0x4e>
    3c1e:	68 c0       	rjmp	.+208    	; 0x3cf0 <serial_create+0x11e>
    3c20:	88 0f       	add	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	fc 01       	movw	r30, r24
    3c26:	e5 5f       	subi	r30, 0xF5	; 245
    3c28:	fd 4f       	sbci	r31, 0xFD	; 253
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	d8 01       	movw	r26, r16
    3c30:	8d 93       	st	X+, r24
    3c32:	9c 93       	st	X, r25
    3c34:	6c 2d       	mov	r22, r12
    3c36:	70 e0       	ldi	r23, 0x00	; 0
    3c38:	84 e0       	ldi	r24, 0x04	; 4
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
    3c40:	1c 01       	movw	r2, r24
    3c42:	61 e0       	ldi	r22, 0x01	; 1
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	86 e0       	ldi	r24, 0x06	; 6
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
    3c4e:	7c 01       	movw	r14, r24
    3c50:	4c 2d       	mov	r20, r12
    3c52:	b1 01       	movw	r22, r2
    3c54:	57 d7       	rcall	.+3758   	; 0x4b04 <fifo_init>
    3c56:	f8 01       	movw	r30, r16
    3c58:	f5 82       	std	Z+5, r15	; 0x05
    3c5a:	e4 82       	std	Z+4, r14	; 0x04
    3c5c:	6a 2d       	mov	r22, r10
    3c5e:	70 e0       	ldi	r23, 0x00	; 0
    3c60:	84 e0       	ldi	r24, 0x04	; 4
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
    3c68:	1c 01       	movw	r2, r24
    3c6a:	61 e0       	ldi	r22, 0x01	; 1
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	86 e0       	ldi	r24, 0x06	; 6
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <calloc>
    3c76:	7c 01       	movw	r14, r24
    3c78:	4a 2d       	mov	r20, r10
    3c7a:	b1 01       	movw	r22, r2
    3c7c:	43 d7       	rcall	.+3718   	; 0x4b04 <fifo_init>
    3c7e:	d8 01       	movw	r26, r16
    3c80:	13 96       	adiw	r26, 0x03	; 3
    3c82:	fc 92       	st	X, r15
    3c84:	ee 92       	st	-X, r14
    3c86:	12 97       	sbiw	r26, 0x02	; 2
    3c88:	17 96       	adiw	r26, 0x07	; 7
    3c8a:	9c 92       	st	X, r9
    3c8c:	8e 92       	st	-X, r8
    3c8e:	16 97       	sbiw	r26, 0x06	; 6
    3c90:	ff b6       	in	r15, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	ed 91       	ld	r30, X+
    3c96:	fc 91       	ld	r31, X
    3c98:	11 97       	sbiw	r26, 0x01	; 1
    3c9a:	36 97       	sbiw	r30, 0x06	; 6
    3c9c:	80 81       	ld	r24, Z
    3c9e:	82 60       	ori	r24, 0x02	; 2
    3ca0:	80 83       	st	Z, r24
    3ca2:	8d 90       	ld	r8, X+
    3ca4:	9c 90       	ld	r9, X
    3ca6:	c3 01       	movw	r24, r6
    3ca8:	b2 01       	movw	r22, r4
    3caa:	cd db       	rcall	.-2150   	; 0x3446 <__floatunsisf>
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	51 e4       	ldi	r21, 0x41	; 65
    3cb4:	56 dc       	rcall	.-1876   	; 0x3562 <__mulsf3>
    3cb6:	9b 01       	movw	r18, r22
    3cb8:	ac 01       	movw	r20, r24
    3cba:	60 e0       	ldi	r22, 0x00	; 0
    3cbc:	74 e2       	ldi	r23, 0x24	; 36
    3cbe:	84 e7       	ldi	r24, 0x74	; 116
    3cc0:	9b e4       	ldi	r25, 0x4B	; 75
    3cc2:	28 db       	rcall	.-2480   	; 0x3314 <__divsf3>
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e8       	ldi	r20, 0x80	; 128
    3cca:	5f e3       	ldi	r21, 0x3F	; 63
    3ccc:	be da       	rcall	.-2692   	; 0x324a <__subsf3>
    3cce:	8f db       	rcall	.-2274   	; 0x33ee <__fixunssfsi>
    3cd0:	f4 01       	movw	r30, r8
    3cd2:	32 97       	sbiw	r30, 0x02	; 2
    3cd4:	60 83       	st	Z, r22
    3cd6:	d8 01       	movw	r26, r16
    3cd8:	ed 91       	ld	r30, X+
    3cda:	fc 91       	ld	r31, X
    3cdc:	11 97       	sbiw	r26, 0x01	; 1
    3cde:	35 97       	sbiw	r30, 0x05	; 5
    3ce0:	88 e9       	ldi	r24, 0x98	; 152
    3ce2:	80 83       	st	Z, r24
    3ce4:	ed 91       	ld	r30, X+
    3ce6:	fc 91       	ld	r31, X
    3ce8:	34 97       	sbiw	r30, 0x04	; 4
    3cea:	86 e0       	ldi	r24, 0x06	; 6
    3cec:	80 83       	st	Z, r24
    3cee:	ff be       	out	0x3f, r15	; 63
    3cf0:	c8 01       	movw	r24, r16
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	1f 91       	pop	r17
    3cf8:	0f 91       	pop	r16
    3cfa:	ff 90       	pop	r15
    3cfc:	ef 90       	pop	r14
    3cfe:	cf 90       	pop	r12
    3d00:	af 90       	pop	r10
    3d02:	9f 90       	pop	r9
    3d04:	8f 90       	pop	r8
    3d06:	7f 90       	pop	r7
    3d08:	6f 90       	pop	r6
    3d0a:	5f 90       	pop	r5
    3d0c:	4f 90       	pop	r4
    3d0e:	3f 90       	pop	r3
    3d10:	2f 90       	pop	r2
    3d12:	08 95       	ret

00003d14 <serial_sendByte>:
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	dc 01       	movw	r26, r24
    3d1a:	89 2b       	or	r24, r25
    3d1c:	01 f1       	breq	.+64     	; 0x3d5e <serial_sendByte+0x4a>
    3d1e:	12 96       	adiw	r26, 0x02	; 2
    3d20:	ed 91       	ld	r30, X+
    3d22:	fc 91       	ld	r31, X
    3d24:	13 97       	sbiw	r26, 0x03	; 3
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	82 81       	ldd	r24, Z+2	; 0x02
    3d2a:	25 81       	ldd	r18, Z+5	; 0x05
    3d2c:	98 1b       	sub	r25, r24
    3d2e:	92 23       	and	r25, r18
    3d30:	84 81       	ldd	r24, Z+4	; 0x04
    3d32:	98 17       	cp	r25, r24
    3d34:	b1 f0       	breq	.+44     	; 0x3d62 <serial_sendByte+0x4e>
    3d36:	83 81       	ldd	r24, Z+3	; 0x03
    3d38:	26 95       	lsr	r18
    3d3a:	28 23       	and	r18, r24
    3d3c:	c0 81       	ld	r28, Z
    3d3e:	d1 81       	ldd	r29, Z+1	; 0x01
    3d40:	c2 0f       	add	r28, r18
    3d42:	d1 1d       	adc	r29, r1
    3d44:	68 83       	st	Y, r22
    3d46:	8f 5f       	subi	r24, 0xFF	; 255
    3d48:	95 81       	ldd	r25, Z+5	; 0x05
    3d4a:	89 23       	and	r24, r25
    3d4c:	83 83       	std	Z+3, r24	; 0x03
    3d4e:	ed 91       	ld	r30, X+
    3d50:	fc 91       	ld	r31, X
    3d52:	35 97       	sbiw	r30, 0x05	; 5
    3d54:	80 81       	ld	r24, Z
    3d56:	80 62       	ori	r24, 0x20	; 32
    3d58:	80 83       	st	Z, r24
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	03 c0       	rjmp	.+6      	; 0x3d64 <serial_sendByte+0x50>
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	01 c0       	rjmp	.+2      	; 0x3d64 <serial_sendByte+0x50>
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	08 95       	ret

00003d6a <serial_sendBytes>:
    3d6a:	ef 92       	push	r14
    3d6c:	ff 92       	push	r15
    3d6e:	0f 93       	push	r16
    3d70:	1f 93       	push	r17
    3d72:	cf 93       	push	r28
    3d74:	df 93       	push	r29
    3d76:	7c 01       	movw	r14, r24
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <serial_sendBytes+0x14>
    3d7c:	41 c0       	rjmp	.+130    	; 0x3e00 <serial_sendBytes+0x96>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	12 96       	adiw	r26, 0x02	; 2
    3d82:	ed 91       	ld	r30, X+
    3d84:	fc 91       	ld	r31, X
    3d86:	13 97       	sbiw	r26, 0x03	; 3
    3d88:	93 81       	ldd	r25, Z+3	; 0x03
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	98 1b       	sub	r25, r24
    3d8e:	85 81       	ldd	r24, Z+5	; 0x05
    3d90:	98 23       	and	r25, r24
    3d92:	84 81       	ldd	r24, Z+4	; 0x04
    3d94:	89 1b       	sub	r24, r25
    3d96:	86 17       	cp	r24, r22
    3d98:	a8 f1       	brcs	.+106    	; 0x3e04 <serial_sendBytes+0x9a>
    3d9a:	66 23       	and	r22, r22
    3d9c:	41 f1       	breq	.+80     	; 0x3dee <serial_sendBytes+0x84>
    3d9e:	84 2f       	mov	r24, r20
    3da0:	95 2f       	mov	r25, r21
    3da2:	dc 01       	movw	r26, r24
    3da4:	61 50       	subi	r22, 0x01	; 1
    3da6:	46 2f       	mov	r20, r22
    3da8:	50 e0       	ldi	r21, 0x00	; 0
    3daa:	4f 5f       	subi	r20, 0xFF	; 255
    3dac:	5f 4f       	sbci	r21, 0xFF	; 255
    3dae:	48 0f       	add	r20, r24
    3db0:	59 1f       	adc	r21, r25
    3db2:	e7 01       	movw	r28, r14
    3db4:	ea 81       	ldd	r30, Y+2	; 0x02
    3db6:	fb 81       	ldd	r31, Y+3	; 0x03
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	25 81       	ldd	r18, Z+5	; 0x05
    3dbe:	98 1b       	sub	r25, r24
    3dc0:	92 23       	and	r25, r18
    3dc2:	84 81       	ldd	r24, Z+4	; 0x04
    3dc4:	98 17       	cp	r25, r24
    3dc6:	79 f0       	breq	.+30     	; 0x3de6 <serial_sendBytes+0x7c>
    3dc8:	8c 91       	ld	r24, X
    3dca:	93 81       	ldd	r25, Z+3	; 0x03
    3dcc:	26 95       	lsr	r18
    3dce:	29 23       	and	r18, r25
    3dd0:	60 81       	ld	r22, Z
    3dd2:	71 81       	ldd	r23, Z+1	; 0x01
    3dd4:	8b 01       	movw	r16, r22
    3dd6:	02 0f       	add	r16, r18
    3dd8:	11 1d       	adc	r17, r1
    3dda:	e8 01       	movw	r28, r16
    3ddc:	88 83       	st	Y, r24
    3dde:	9f 5f       	subi	r25, 0xFF	; 255
    3de0:	85 81       	ldd	r24, Z+5	; 0x05
    3de2:	98 23       	and	r25, r24
    3de4:	93 83       	std	Z+3, r25	; 0x03
    3de6:	11 96       	adiw	r26, 0x01	; 1
    3de8:	a4 17       	cp	r26, r20
    3dea:	b5 07       	cpc	r27, r21
    3dec:	11 f7       	brne	.-60     	; 0x3db2 <serial_sendBytes+0x48>
    3dee:	d7 01       	movw	r26, r14
    3df0:	ed 91       	ld	r30, X+
    3df2:	fc 91       	ld	r31, X
    3df4:	35 97       	sbiw	r30, 0x05	; 5
    3df6:	80 81       	ld	r24, Z
    3df8:	80 62       	ori	r24, 0x20	; 32
    3dfa:	80 83       	st	Z, r24
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	03 c0       	rjmp	.+6      	; 0x3e06 <serial_sendBytes+0x9c>
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <serial_sendBytes+0x9c>
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	1f 91       	pop	r17
    3e0c:	0f 91       	pop	r16
    3e0e:	ff 90       	pop	r15
    3e10:	ef 90       	pop	r14
    3e12:	08 95       	ret

00003e14 <serial_getByte>:
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	d1 f0       	breq	.+52     	; 0x3e4c <serial_getByte+0x38>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	14 96       	adiw	r26, 0x04	; 4
    3e1c:	ed 91       	ld	r30, X+
    3e1e:	fc 91       	ld	r31, X
    3e20:	15 97       	sbiw	r26, 0x05	; 5
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	98 17       	cp	r25, r24
    3e28:	99 f0       	breq	.+38     	; 0x3e50 <serial_getByte+0x3c>
    3e2a:	92 81       	ldd	r25, Z+2	; 0x02
    3e2c:	85 81       	ldd	r24, Z+5	; 0x05
    3e2e:	86 95       	lsr	r24
    3e30:	89 23       	and	r24, r25
    3e32:	a0 81       	ld	r26, Z
    3e34:	b1 81       	ldd	r27, Z+1	; 0x01
    3e36:	a8 0f       	add	r26, r24
    3e38:	b1 1d       	adc	r27, r1
    3e3a:	8c 91       	ld	r24, X
    3e3c:	db 01       	movw	r26, r22
    3e3e:	8c 93       	st	X, r24
    3e40:	9f 5f       	subi	r25, 0xFF	; 255
    3e42:	85 81       	ldd	r24, Z+5	; 0x05
    3e44:	98 23       	and	r25, r24
    3e46:	92 83       	std	Z+2, r25	; 0x02
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	08 95       	ret
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	08 95       	ret
    3e50:	83 e0       	ldi	r24, 0x03	; 3
    3e52:	08 95       	ret

00003e54 <__vector_25>:
    3e54:	1f 92       	push	r1
    3e56:	0f 92       	push	r0
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	0f 92       	push	r0
    3e5c:	11 24       	eor	r1, r1
    3e5e:	0b b6       	in	r0, 0x3b	; 59
    3e60:	0f 92       	push	r0
    3e62:	2f 93       	push	r18
    3e64:	3f 93       	push	r19
    3e66:	4f 93       	push	r20
    3e68:	5f 93       	push	r21
    3e6a:	6f 93       	push	r22
    3e6c:	7f 93       	push	r23
    3e6e:	8f 93       	push	r24
    3e70:	9f 93       	push	r25
    3e72:	af 93       	push	r26
    3e74:	bf 93       	push	r27
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
    3e7a:	ef 93       	push	r30
    3e7c:	ff 93       	push	r31
    3e7e:	a0 91 0a 0f 	lds	r26, 0x0F0A	; 0x800f0a <_ser_handle>
    3e82:	b0 91 0b 0f 	lds	r27, 0x0F0B	; 0x800f0b <_ser_handle+0x1>
    3e86:	10 97       	sbiw	r26, 0x00	; 0
    3e88:	11 f1       	breq	.+68     	; 0x3ece <__vector_25+0x7a>
    3e8a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3e8e:	14 96       	adiw	r26, 0x04	; 4
    3e90:	ed 91       	ld	r30, X+
    3e92:	fc 91       	ld	r31, X
    3e94:	15 97       	sbiw	r26, 0x05	; 5
    3e96:	93 81       	ldd	r25, Z+3	; 0x03
    3e98:	82 81       	ldd	r24, Z+2	; 0x02
    3e9a:	25 81       	ldd	r18, Z+5	; 0x05
    3e9c:	98 1b       	sub	r25, r24
    3e9e:	92 23       	and	r25, r18
    3ea0:	84 81       	ldd	r24, Z+4	; 0x04
    3ea2:	98 17       	cp	r25, r24
    3ea4:	61 f0       	breq	.+24     	; 0x3ebe <__vector_25+0x6a>
    3ea6:	83 81       	ldd	r24, Z+3	; 0x03
    3ea8:	26 95       	lsr	r18
    3eaa:	28 23       	and	r18, r24
    3eac:	c0 81       	ld	r28, Z
    3eae:	d1 81       	ldd	r29, Z+1	; 0x01
    3eb0:	c2 0f       	add	r28, r18
    3eb2:	d1 1d       	adc	r29, r1
    3eb4:	68 83       	st	Y, r22
    3eb6:	8f 5f       	subi	r24, 0xFF	; 255
    3eb8:	95 81       	ldd	r25, Z+5	; 0x05
    3eba:	89 23       	and	r24, r25
    3ebc:	83 83       	std	Z+3, r24	; 0x03
    3ebe:	16 96       	adiw	r26, 0x06	; 6
    3ec0:	ed 91       	ld	r30, X+
    3ec2:	fc 91       	ld	r31, X
    3ec4:	17 97       	sbiw	r26, 0x07	; 7
    3ec6:	30 97       	sbiw	r30, 0x00	; 0
    3ec8:	11 f0       	breq	.+4      	; 0x3ece <__vector_25+0x7a>
    3eca:	cd 01       	movw	r24, r26
    3ecc:	19 95       	eicall
    3ece:	ff 91       	pop	r31
    3ed0:	ef 91       	pop	r30
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	bf 91       	pop	r27
    3ed8:	af 91       	pop	r26
    3eda:	9f 91       	pop	r25
    3edc:	8f 91       	pop	r24
    3ede:	7f 91       	pop	r23
    3ee0:	6f 91       	pop	r22
    3ee2:	5f 91       	pop	r21
    3ee4:	4f 91       	pop	r20
    3ee6:	3f 91       	pop	r19
    3ee8:	2f 91       	pop	r18
    3eea:	0f 90       	pop	r0
    3eec:	0b be       	out	0x3b, r0	; 59
    3eee:	0f 90       	pop	r0
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	0f 90       	pop	r0
    3ef4:	1f 90       	pop	r1
    3ef6:	18 95       	reti

00003ef8 <__vector_26>:
    3ef8:	1f 92       	push	r1
    3efa:	0f 92       	push	r0
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	0f 92       	push	r0
    3f00:	11 24       	eor	r1, r1
    3f02:	0b b6       	in	r0, 0x3b	; 59
    3f04:	0f 92       	push	r0
    3f06:	2f 93       	push	r18
    3f08:	8f 93       	push	r24
    3f0a:	9f 93       	push	r25
    3f0c:	af 93       	push	r26
    3f0e:	bf 93       	push	r27
    3f10:	ef 93       	push	r30
    3f12:	ff 93       	push	r31
    3f14:	e0 91 0a 0f 	lds	r30, 0x0F0A	; 0x800f0a <_ser_handle>
    3f18:	f0 91 0b 0f 	lds	r31, 0x0F0B	; 0x800f0b <_ser_handle+0x1>
    3f1c:	30 97       	sbiw	r30, 0x00	; 0
    3f1e:	b9 f0       	breq	.+46     	; 0x3f4e <__vector_26+0x56>
    3f20:	02 80       	ldd	r0, Z+2	; 0x02
    3f22:	f3 81       	ldd	r31, Z+3	; 0x03
    3f24:	e0 2d       	mov	r30, r0
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	98 17       	cp	r25, r24
    3f2c:	b1 f0       	breq	.+44     	; 0x3f5a <__vector_26+0x62>
    3f2e:	92 81       	ldd	r25, Z+2	; 0x02
    3f30:	85 81       	ldd	r24, Z+5	; 0x05
    3f32:	28 2f       	mov	r18, r24
    3f34:	26 95       	lsr	r18
    3f36:	29 23       	and	r18, r25
    3f38:	a0 81       	ld	r26, Z
    3f3a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f3c:	a2 0f       	add	r26, r18
    3f3e:	b1 1d       	adc	r27, r1
    3f40:	2c 91       	ld	r18, X
    3f42:	9f 5f       	subi	r25, 0xFF	; 255
    3f44:	89 23       	and	r24, r25
    3f46:	82 83       	std	Z+2, r24	; 0x02
    3f48:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3f4c:	0b c0       	rjmp	.+22     	; 0x3f64 <__vector_26+0x6c>
    3f4e:	e1 ec       	ldi	r30, 0xC1	; 193
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	8f 7d       	andi	r24, 0xDF	; 223
    3f56:	80 83       	st	Z, r24
    3f58:	05 c0       	rjmp	.+10     	; 0x3f64 <__vector_26+0x6c>
    3f5a:	e1 ec       	ldi	r30, 0xC1	; 193
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	80 81       	ld	r24, Z
    3f60:	8f 7d       	andi	r24, 0xDF	; 223
    3f62:	80 83       	st	Z, r24
    3f64:	ff 91       	pop	r31
    3f66:	ef 91       	pop	r30
    3f68:	bf 91       	pop	r27
    3f6a:	af 91       	pop	r26
    3f6c:	9f 91       	pop	r25
    3f6e:	8f 91       	pop	r24
    3f70:	2f 91       	pop	r18
    3f72:	0f 90       	pop	r0
    3f74:	0b be       	out	0x3b, r0	; 59
    3f76:	0f 90       	pop	r0
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	0f 90       	pop	r0
    3f7c:	1f 90       	pop	r1
    3f7e:	18 95       	reti

00003f80 <__vector_36>:
    3f80:	1f 92       	push	r1
    3f82:	0f 92       	push	r0
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	0f 92       	push	r0
    3f88:	11 24       	eor	r1, r1
    3f8a:	0b b6       	in	r0, 0x3b	; 59
    3f8c:	0f 92       	push	r0
    3f8e:	2f 93       	push	r18
    3f90:	3f 93       	push	r19
    3f92:	4f 93       	push	r20
    3f94:	5f 93       	push	r21
    3f96:	6f 93       	push	r22
    3f98:	7f 93       	push	r23
    3f9a:	8f 93       	push	r24
    3f9c:	9f 93       	push	r25
    3f9e:	af 93       	push	r26
    3fa0:	bf 93       	push	r27
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	ef 93       	push	r30
    3fa8:	ff 93       	push	r31
    3faa:	a0 91 0c 0f 	lds	r26, 0x0F0C	; 0x800f0c <_ser_handle+0x2>
    3fae:	b0 91 0d 0f 	lds	r27, 0x0F0D	; 0x800f0d <_ser_handle+0x3>
    3fb2:	10 97       	sbiw	r26, 0x00	; 0
    3fb4:	11 f1       	breq	.+68     	; 0x3ffa <__vector_36+0x7a>
    3fb6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3fba:	14 96       	adiw	r26, 0x04	; 4
    3fbc:	ed 91       	ld	r30, X+
    3fbe:	fc 91       	ld	r31, X
    3fc0:	15 97       	sbiw	r26, 0x05	; 5
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	82 81       	ldd	r24, Z+2	; 0x02
    3fc6:	25 81       	ldd	r18, Z+5	; 0x05
    3fc8:	98 1b       	sub	r25, r24
    3fca:	92 23       	and	r25, r18
    3fcc:	84 81       	ldd	r24, Z+4	; 0x04
    3fce:	98 17       	cp	r25, r24
    3fd0:	61 f0       	breq	.+24     	; 0x3fea <__vector_36+0x6a>
    3fd2:	83 81       	ldd	r24, Z+3	; 0x03
    3fd4:	26 95       	lsr	r18
    3fd6:	28 23       	and	r18, r24
    3fd8:	c0 81       	ld	r28, Z
    3fda:	d1 81       	ldd	r29, Z+1	; 0x01
    3fdc:	c2 0f       	add	r28, r18
    3fde:	d1 1d       	adc	r29, r1
    3fe0:	68 83       	st	Y, r22
    3fe2:	8f 5f       	subi	r24, 0xFF	; 255
    3fe4:	95 81       	ldd	r25, Z+5	; 0x05
    3fe6:	89 23       	and	r24, r25
    3fe8:	83 83       	std	Z+3, r24	; 0x03
    3fea:	16 96       	adiw	r26, 0x06	; 6
    3fec:	ed 91       	ld	r30, X+
    3fee:	fc 91       	ld	r31, X
    3ff0:	17 97       	sbiw	r26, 0x07	; 7
    3ff2:	30 97       	sbiw	r30, 0x00	; 0
    3ff4:	11 f0       	breq	.+4      	; 0x3ffa <__vector_36+0x7a>
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	19 95       	eicall
    3ffa:	ff 91       	pop	r31
    3ffc:	ef 91       	pop	r30
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	bf 91       	pop	r27
    4004:	af 91       	pop	r26
    4006:	9f 91       	pop	r25
    4008:	8f 91       	pop	r24
    400a:	7f 91       	pop	r23
    400c:	6f 91       	pop	r22
    400e:	5f 91       	pop	r21
    4010:	4f 91       	pop	r20
    4012:	3f 91       	pop	r19
    4014:	2f 91       	pop	r18
    4016:	0f 90       	pop	r0
    4018:	0b be       	out	0x3b, r0	; 59
    401a:	0f 90       	pop	r0
    401c:	0f be       	out	0x3f, r0	; 63
    401e:	0f 90       	pop	r0
    4020:	1f 90       	pop	r1
    4022:	18 95       	reti

00004024 <__vector_37>:
    4024:	1f 92       	push	r1
    4026:	0f 92       	push	r0
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	0f 92       	push	r0
    402c:	11 24       	eor	r1, r1
    402e:	0b b6       	in	r0, 0x3b	; 59
    4030:	0f 92       	push	r0
    4032:	2f 93       	push	r18
    4034:	8f 93       	push	r24
    4036:	9f 93       	push	r25
    4038:	af 93       	push	r26
    403a:	bf 93       	push	r27
    403c:	ef 93       	push	r30
    403e:	ff 93       	push	r31
    4040:	e0 91 0c 0f 	lds	r30, 0x0F0C	; 0x800f0c <_ser_handle+0x2>
    4044:	f0 91 0d 0f 	lds	r31, 0x0F0D	; 0x800f0d <_ser_handle+0x3>
    4048:	30 97       	sbiw	r30, 0x00	; 0
    404a:	b9 f0       	breq	.+46     	; 0x407a <__vector_37+0x56>
    404c:	02 80       	ldd	r0, Z+2	; 0x02
    404e:	f3 81       	ldd	r31, Z+3	; 0x03
    4050:	e0 2d       	mov	r30, r0
    4052:	93 81       	ldd	r25, Z+3	; 0x03
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	98 17       	cp	r25, r24
    4058:	b1 f0       	breq	.+44     	; 0x4086 <__vector_37+0x62>
    405a:	92 81       	ldd	r25, Z+2	; 0x02
    405c:	85 81       	ldd	r24, Z+5	; 0x05
    405e:	28 2f       	mov	r18, r24
    4060:	26 95       	lsr	r18
    4062:	29 23       	and	r18, r25
    4064:	a0 81       	ld	r26, Z
    4066:	b1 81       	ldd	r27, Z+1	; 0x01
    4068:	a2 0f       	add	r26, r18
    406a:	b1 1d       	adc	r27, r1
    406c:	2c 91       	ld	r18, X
    406e:	9f 5f       	subi	r25, 0xFF	; 255
    4070:	89 23       	and	r24, r25
    4072:	82 83       	std	Z+2, r24	; 0x02
    4074:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4078:	0b c0       	rjmp	.+22     	; 0x4090 <__vector_37+0x6c>
    407a:	e9 ec       	ldi	r30, 0xC9	; 201
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	8f 7d       	andi	r24, 0xDF	; 223
    4082:	80 83       	st	Z, r24
    4084:	05 c0       	rjmp	.+10     	; 0x4090 <__vector_37+0x6c>
    4086:	e9 ec       	ldi	r30, 0xC9	; 201
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	8f 7d       	andi	r24, 0xDF	; 223
    408e:	80 83       	st	Z, r24
    4090:	ff 91       	pop	r31
    4092:	ef 91       	pop	r30
    4094:	bf 91       	pop	r27
    4096:	af 91       	pop	r26
    4098:	9f 91       	pop	r25
    409a:	8f 91       	pop	r24
    409c:	2f 91       	pop	r18
    409e:	0f 90       	pop	r0
    40a0:	0b be       	out	0x3b, r0	; 59
    40a2:	0f 90       	pop	r0
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	0f 90       	pop	r0
    40a8:	1f 90       	pop	r1
    40aa:	18 95       	reti

000040ac <__vector_51>:
    40ac:	1f 92       	push	r1
    40ae:	0f 92       	push	r0
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	0f 92       	push	r0
    40b4:	11 24       	eor	r1, r1
    40b6:	0b b6       	in	r0, 0x3b	; 59
    40b8:	0f 92       	push	r0
    40ba:	2f 93       	push	r18
    40bc:	3f 93       	push	r19
    40be:	4f 93       	push	r20
    40c0:	5f 93       	push	r21
    40c2:	6f 93       	push	r22
    40c4:	7f 93       	push	r23
    40c6:	8f 93       	push	r24
    40c8:	9f 93       	push	r25
    40ca:	af 93       	push	r26
    40cc:	bf 93       	push	r27
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	ef 93       	push	r30
    40d4:	ff 93       	push	r31
    40d6:	a0 91 0e 0f 	lds	r26, 0x0F0E	; 0x800f0e <_ser_handle+0x4>
    40da:	b0 91 0f 0f 	lds	r27, 0x0F0F	; 0x800f0f <_ser_handle+0x5>
    40de:	10 97       	sbiw	r26, 0x00	; 0
    40e0:	11 f1       	breq	.+68     	; 0x4126 <__vector_51+0x7a>
    40e2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    40e6:	14 96       	adiw	r26, 0x04	; 4
    40e8:	ed 91       	ld	r30, X+
    40ea:	fc 91       	ld	r31, X
    40ec:	15 97       	sbiw	r26, 0x05	; 5
    40ee:	93 81       	ldd	r25, Z+3	; 0x03
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	25 81       	ldd	r18, Z+5	; 0x05
    40f4:	98 1b       	sub	r25, r24
    40f6:	92 23       	and	r25, r18
    40f8:	84 81       	ldd	r24, Z+4	; 0x04
    40fa:	98 17       	cp	r25, r24
    40fc:	61 f0       	breq	.+24     	; 0x4116 <__vector_51+0x6a>
    40fe:	83 81       	ldd	r24, Z+3	; 0x03
    4100:	26 95       	lsr	r18
    4102:	28 23       	and	r18, r24
    4104:	c0 81       	ld	r28, Z
    4106:	d1 81       	ldd	r29, Z+1	; 0x01
    4108:	c2 0f       	add	r28, r18
    410a:	d1 1d       	adc	r29, r1
    410c:	68 83       	st	Y, r22
    410e:	8f 5f       	subi	r24, 0xFF	; 255
    4110:	95 81       	ldd	r25, Z+5	; 0x05
    4112:	89 23       	and	r24, r25
    4114:	83 83       	std	Z+3, r24	; 0x03
    4116:	16 96       	adiw	r26, 0x06	; 6
    4118:	ed 91       	ld	r30, X+
    411a:	fc 91       	ld	r31, X
    411c:	17 97       	sbiw	r26, 0x07	; 7
    411e:	30 97       	sbiw	r30, 0x00	; 0
    4120:	11 f0       	breq	.+4      	; 0x4126 <__vector_51+0x7a>
    4122:	cd 01       	movw	r24, r26
    4124:	19 95       	eicall
    4126:	ff 91       	pop	r31
    4128:	ef 91       	pop	r30
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	bf 91       	pop	r27
    4130:	af 91       	pop	r26
    4132:	9f 91       	pop	r25
    4134:	8f 91       	pop	r24
    4136:	7f 91       	pop	r23
    4138:	6f 91       	pop	r22
    413a:	5f 91       	pop	r21
    413c:	4f 91       	pop	r20
    413e:	3f 91       	pop	r19
    4140:	2f 91       	pop	r18
    4142:	0f 90       	pop	r0
    4144:	0b be       	out	0x3b, r0	; 59
    4146:	0f 90       	pop	r0
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	0f 90       	pop	r0
    414c:	1f 90       	pop	r1
    414e:	18 95       	reti

00004150 <__vector_52>:
    4150:	1f 92       	push	r1
    4152:	0f 92       	push	r0
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	0f 92       	push	r0
    4158:	11 24       	eor	r1, r1
    415a:	0b b6       	in	r0, 0x3b	; 59
    415c:	0f 92       	push	r0
    415e:	2f 93       	push	r18
    4160:	8f 93       	push	r24
    4162:	9f 93       	push	r25
    4164:	af 93       	push	r26
    4166:	bf 93       	push	r27
    4168:	ef 93       	push	r30
    416a:	ff 93       	push	r31
    416c:	e0 91 0e 0f 	lds	r30, 0x0F0E	; 0x800f0e <_ser_handle+0x4>
    4170:	f0 91 0f 0f 	lds	r31, 0x0F0F	; 0x800f0f <_ser_handle+0x5>
    4174:	30 97       	sbiw	r30, 0x00	; 0
    4176:	b9 f0       	breq	.+46     	; 0x41a6 <__vector_52+0x56>
    4178:	02 80       	ldd	r0, Z+2	; 0x02
    417a:	f3 81       	ldd	r31, Z+3	; 0x03
    417c:	e0 2d       	mov	r30, r0
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	98 17       	cp	r25, r24
    4184:	b1 f0       	breq	.+44     	; 0x41b2 <__vector_52+0x62>
    4186:	92 81       	ldd	r25, Z+2	; 0x02
    4188:	85 81       	ldd	r24, Z+5	; 0x05
    418a:	28 2f       	mov	r18, r24
    418c:	26 95       	lsr	r18
    418e:	29 23       	and	r18, r25
    4190:	a0 81       	ld	r26, Z
    4192:	b1 81       	ldd	r27, Z+1	; 0x01
    4194:	a2 0f       	add	r26, r18
    4196:	b1 1d       	adc	r27, r1
    4198:	2c 91       	ld	r18, X
    419a:	9f 5f       	subi	r25, 0xFF	; 255
    419c:	89 23       	and	r24, r25
    419e:	82 83       	std	Z+2, r24	; 0x02
    41a0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    41a4:	0b c0       	rjmp	.+22     	; 0x41bc <__vector_52+0x6c>
    41a6:	e1 ed       	ldi	r30, 0xD1	; 209
    41a8:	f0 e0       	ldi	r31, 0x00	; 0
    41aa:	80 81       	ld	r24, Z
    41ac:	8f 7d       	andi	r24, 0xDF	; 223
    41ae:	80 83       	st	Z, r24
    41b0:	05 c0       	rjmp	.+10     	; 0x41bc <__vector_52+0x6c>
    41b2:	e1 ed       	ldi	r30, 0xD1	; 209
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	8f 7d       	andi	r24, 0xDF	; 223
    41ba:	80 83       	st	Z, r24
    41bc:	ff 91       	pop	r31
    41be:	ef 91       	pop	r30
    41c0:	bf 91       	pop	r27
    41c2:	af 91       	pop	r26
    41c4:	9f 91       	pop	r25
    41c6:	8f 91       	pop	r24
    41c8:	2f 91       	pop	r18
    41ca:	0f 90       	pop	r0
    41cc:	0b be       	out	0x3b, r0	; 59
    41ce:	0f 90       	pop	r0
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	0f 90       	pop	r0
    41d4:	1f 90       	pop	r1
    41d6:	18 95       	reti

000041d8 <__vector_54>:
    41d8:	1f 92       	push	r1
    41da:	0f 92       	push	r0
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	0f 92       	push	r0
    41e0:	11 24       	eor	r1, r1
    41e2:	0b b6       	in	r0, 0x3b	; 59
    41e4:	0f 92       	push	r0
    41e6:	2f 93       	push	r18
    41e8:	3f 93       	push	r19
    41ea:	4f 93       	push	r20
    41ec:	5f 93       	push	r21
    41ee:	6f 93       	push	r22
    41f0:	7f 93       	push	r23
    41f2:	8f 93       	push	r24
    41f4:	9f 93       	push	r25
    41f6:	af 93       	push	r26
    41f8:	bf 93       	push	r27
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	ef 93       	push	r30
    4200:	ff 93       	push	r31
    4202:	a0 91 10 0f 	lds	r26, 0x0F10	; 0x800f10 <_ser_handle+0x6>
    4206:	b0 91 11 0f 	lds	r27, 0x0F11	; 0x800f11 <_ser_handle+0x7>
    420a:	10 97       	sbiw	r26, 0x00	; 0
    420c:	11 f1       	breq	.+68     	; 0x4252 <__vector_54+0x7a>
    420e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4212:	14 96       	adiw	r26, 0x04	; 4
    4214:	ed 91       	ld	r30, X+
    4216:	fc 91       	ld	r31, X
    4218:	15 97       	sbiw	r26, 0x05	; 5
    421a:	93 81       	ldd	r25, Z+3	; 0x03
    421c:	82 81       	ldd	r24, Z+2	; 0x02
    421e:	25 81       	ldd	r18, Z+5	; 0x05
    4220:	98 1b       	sub	r25, r24
    4222:	92 23       	and	r25, r18
    4224:	84 81       	ldd	r24, Z+4	; 0x04
    4226:	98 17       	cp	r25, r24
    4228:	61 f0       	breq	.+24     	; 0x4242 <__vector_54+0x6a>
    422a:	83 81       	ldd	r24, Z+3	; 0x03
    422c:	26 95       	lsr	r18
    422e:	28 23       	and	r18, r24
    4230:	c0 81       	ld	r28, Z
    4232:	d1 81       	ldd	r29, Z+1	; 0x01
    4234:	c2 0f       	add	r28, r18
    4236:	d1 1d       	adc	r29, r1
    4238:	68 83       	st	Y, r22
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	95 81       	ldd	r25, Z+5	; 0x05
    423e:	89 23       	and	r24, r25
    4240:	83 83       	std	Z+3, r24	; 0x03
    4242:	16 96       	adiw	r26, 0x06	; 6
    4244:	ed 91       	ld	r30, X+
    4246:	fc 91       	ld	r31, X
    4248:	17 97       	sbiw	r26, 0x07	; 7
    424a:	30 97       	sbiw	r30, 0x00	; 0
    424c:	11 f0       	breq	.+4      	; 0x4252 <__vector_54+0x7a>
    424e:	cd 01       	movw	r24, r26
    4250:	19 95       	eicall
    4252:	ff 91       	pop	r31
    4254:	ef 91       	pop	r30
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	bf 91       	pop	r27
    425c:	af 91       	pop	r26
    425e:	9f 91       	pop	r25
    4260:	8f 91       	pop	r24
    4262:	7f 91       	pop	r23
    4264:	6f 91       	pop	r22
    4266:	5f 91       	pop	r21
    4268:	4f 91       	pop	r20
    426a:	3f 91       	pop	r19
    426c:	2f 91       	pop	r18
    426e:	0f 90       	pop	r0
    4270:	0b be       	out	0x3b, r0	; 59
    4272:	0f 90       	pop	r0
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	0f 90       	pop	r0
    4278:	1f 90       	pop	r1
    427a:	18 95       	reti

0000427c <__vector_55>:
    427c:	1f 92       	push	r1
    427e:	0f 92       	push	r0
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	0f 92       	push	r0
    4284:	11 24       	eor	r1, r1
    4286:	0b b6       	in	r0, 0x3b	; 59
    4288:	0f 92       	push	r0
    428a:	2f 93       	push	r18
    428c:	8f 93       	push	r24
    428e:	9f 93       	push	r25
    4290:	af 93       	push	r26
    4292:	bf 93       	push	r27
    4294:	ef 93       	push	r30
    4296:	ff 93       	push	r31
    4298:	e0 91 10 0f 	lds	r30, 0x0F10	; 0x800f10 <_ser_handle+0x6>
    429c:	f0 91 11 0f 	lds	r31, 0x0F11	; 0x800f11 <_ser_handle+0x7>
    42a0:	30 97       	sbiw	r30, 0x00	; 0
    42a2:	b9 f0       	breq	.+46     	; 0x42d2 <__vector_55+0x56>
    42a4:	02 80       	ldd	r0, Z+2	; 0x02
    42a6:	f3 81       	ldd	r31, Z+3	; 0x03
    42a8:	e0 2d       	mov	r30, r0
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	98 17       	cp	r25, r24
    42b0:	b1 f0       	breq	.+44     	; 0x42de <__vector_55+0x62>
    42b2:	92 81       	ldd	r25, Z+2	; 0x02
    42b4:	85 81       	ldd	r24, Z+5	; 0x05
    42b6:	28 2f       	mov	r18, r24
    42b8:	26 95       	lsr	r18
    42ba:	29 23       	and	r18, r25
    42bc:	a0 81       	ld	r26, Z
    42be:	b1 81       	ldd	r27, Z+1	; 0x01
    42c0:	a2 0f       	add	r26, r18
    42c2:	b1 1d       	adc	r27, r1
    42c4:	2c 91       	ld	r18, X
    42c6:	9f 5f       	subi	r25, 0xFF	; 255
    42c8:	89 23       	and	r24, r25
    42ca:	82 83       	std	Z+2, r24	; 0x02
    42cc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    42d0:	0b c0       	rjmp	.+22     	; 0x42e8 <__vector_55+0x6c>
    42d2:	e1 e3       	ldi	r30, 0x31	; 49
    42d4:	f1 e0       	ldi	r31, 0x01	; 1
    42d6:	80 81       	ld	r24, Z
    42d8:	8f 7d       	andi	r24, 0xDF	; 223
    42da:	80 83       	st	Z, r24
    42dc:	05 c0       	rjmp	.+10     	; 0x42e8 <__vector_55+0x6c>
    42de:	e1 e3       	ldi	r30, 0x31	; 49
    42e0:	f1 e0       	ldi	r31, 0x01	; 1
    42e2:	80 81       	ld	r24, Z
    42e4:	8f 7d       	andi	r24, 0xDF	; 223
    42e6:	80 83       	st	Z, r24
    42e8:	ff 91       	pop	r31
    42ea:	ef 91       	pop	r30
    42ec:	bf 91       	pop	r27
    42ee:	af 91       	pop	r26
    42f0:	9f 91       	pop	r25
    42f2:	8f 91       	pop	r24
    42f4:	2f 91       	pop	r18
    42f6:	0f 90       	pop	r0
    42f8:	0b be       	out	0x3b, r0	; 59
    42fa:	0f 90       	pop	r0
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	0f 90       	pop	r0
    4300:	1f 90       	pop	r1
    4302:	18 95       	reti

00004304 <usart_getchar>:
    4304:	cf 93       	push	r28
    4306:	df 93       	push	r29
    4308:	1f 92       	push	r1
    430a:	cd b7       	in	r28, 0x3d	; 61
    430c:	de b7       	in	r29, 0x3e	; 62
    430e:	be 01       	movw	r22, r28
    4310:	6f 5f       	subi	r22, 0xFF	; 255
    4312:	7f 4f       	sbci	r23, 0xFF	; 255
    4314:	80 91 12 0f 	lds	r24, 0x0F12	; 0x800f12 <_com_serial_instance>
    4318:	90 91 13 0f 	lds	r25, 0x0F13	; 0x800f13 <_com_serial_instance+0x1>
    431c:	7b dd       	rcall	.-1290   	; 0x3e14 <serial_getByte>
    431e:	81 11       	cpse	r24, r1
    4320:	f6 cf       	rjmp	.-20     	; 0x430e <usart_getchar+0xa>
    4322:	89 81       	ldd	r24, Y+1	; 0x01
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	0f 90       	pop	r0
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	08 95       	ret

0000432e <usart_putchar>:
    432e:	68 2f       	mov	r22, r24
    4330:	80 91 12 0f 	lds	r24, 0x0F12	; 0x800f12 <_com_serial_instance>
    4334:	90 91 13 0f 	lds	r25, 0x0F13	; 0x800f13 <_com_serial_instance+0x1>
    4338:	ed dc       	rcall	.-1574   	; 0x3d14 <serial_sendByte>
    433a:	80 e0       	ldi	r24, 0x00	; 0
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	08 95       	ret

00004340 <stdio_initialise>:
    4340:	8f 92       	push	r8
    4342:	9f 92       	push	r9
    4344:	af 92       	push	r10
    4346:	cf 92       	push	r12
    4348:	ef 92       	push	r14
    434a:	0f 93       	push	r16
    434c:	81 2c       	mov	r8, r1
    434e:	91 2c       	mov	r9, r1
    4350:	68 94       	set
    4352:	aa 24       	eor	r10, r10
    4354:	a7 f8       	bld	r10, 7
    4356:	68 94       	set
    4358:	cc 24       	eor	r12, r12
    435a:	c7 f8       	bld	r12, 7
    435c:	e1 2c       	mov	r14, r1
    435e:	00 e0       	ldi	r16, 0x00	; 0
    4360:	23 e0       	ldi	r18, 0x03	; 3
    4362:	40 e0       	ldi	r20, 0x00	; 0
    4364:	51 ee       	ldi	r21, 0xE1	; 225
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	33 dc       	rcall	.-1946   	; 0x3bd2 <serial_create>
    436c:	90 93 13 0f 	sts	0x0F13, r25	; 0x800f13 <_com_serial_instance+0x1>
    4370:	80 93 12 0f 	sts	0x0F12, r24	; 0x800f12 <_com_serial_instance>
    4374:	e0 e4       	ldi	r30, 0x40	; 64
    4376:	ff e0       	ldi	r31, 0x0F	; 15
    4378:	83 e1       	ldi	r24, 0x13	; 19
    437a:	92 e0       	ldi	r25, 0x02	; 2
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	80 83       	st	Z, r24
    4380:	93 83       	std	Z+3, r25	; 0x03
    4382:	82 83       	std	Z+2, r24	; 0x02
    4384:	0f 91       	pop	r16
    4386:	ef 90       	pop	r14
    4388:	cf 90       	pop	r12
    438a:	af 90       	pop	r10
    438c:	9f 90       	pop	r9
    438e:	8f 90       	pop	r8
    4390:	08 95       	ret

00004392 <_select_instance>:
    4392:	e0 91 15 0f 	lds	r30, 0x0F15	; 0x800f15 <_this>
    4396:	f0 91 16 0f 	lds	r31, 0x0F16	; 0x800f16 <_this+0x1>
    439a:	30 97       	sbiw	r30, 0x00	; 0
    439c:	f9 f0       	breq	.+62     	; 0x43dc <_select_instance+0x4a>
    439e:	a0 81       	ld	r26, Z
    43a0:	b1 81       	ldd	r27, Z+1	; 0x01
    43a2:	10 97       	sbiw	r26, 0x00	; 0
    43a4:	d9 f0       	breq	.+54     	; 0x43dc <_select_instance+0x4a>
    43a6:	23 81       	ldd	r18, Z+3	; 0x03
    43a8:	21 30       	cpi	r18, 0x01	; 1
    43aa:	69 f4       	brne	.+26     	; 0x43c6 <_select_instance+0x34>
    43ac:	4c 91       	ld	r20, X
    43ae:	21 e0       	ldi	r18, 0x01	; 1
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	02 80       	ldd	r0, Z+2	; 0x02
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <_select_instance+0x28>
    43b6:	22 0f       	add	r18, r18
    43b8:	33 1f       	adc	r19, r19
    43ba:	0a 94       	dec	r0
    43bc:	e2 f7       	brpl	.-8      	; 0x43b6 <_select_instance+0x24>
    43be:	20 95       	com	r18
    43c0:	24 23       	and	r18, r20
    43c2:	2c 93       	st	X, r18
    43c4:	0b c0       	rjmp	.+22     	; 0x43dc <_select_instance+0x4a>
    43c6:	4c 91       	ld	r20, X
    43c8:	21 e0       	ldi	r18, 0x01	; 1
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	02 80       	ldd	r0, Z+2	; 0x02
    43ce:	02 c0       	rjmp	.+4      	; 0x43d4 <_select_instance+0x42>
    43d0:	22 0f       	add	r18, r18
    43d2:	33 1f       	adc	r19, r19
    43d4:	0a 94       	dec	r0
    43d6:	e2 f7       	brpl	.-8      	; 0x43d0 <_select_instance+0x3e>
    43d8:	24 2b       	or	r18, r20
    43da:	2c 93       	st	X, r18
    43dc:	90 93 16 0f 	sts	0x0F16, r25	; 0x800f16 <_this+0x1>
    43e0:	80 93 15 0f 	sts	0x0F15, r24	; 0x800f15 <_this>
    43e4:	00 97       	sbiw	r24, 0x00	; 0
    43e6:	69 f0       	breq	.+26     	; 0x4402 <_select_instance+0x70>
    43e8:	10 92 17 0f 	sts	0x0F17, r1	; 0x800f17 <_spi_active>
    43ec:	2c b5       	in	r18, 0x2c	; 44
    43ee:	2f 73       	andi	r18, 0x3F	; 63
    43f0:	2c bd       	out	0x2c, r18	; 44
    43f2:	fc 01       	movw	r30, r24
    43f4:	24 81       	ldd	r18, Z+4	; 0x04
    43f6:	2c bd       	out	0x2c, r18	; 44
    43f8:	85 81       	ldd	r24, Z+5	; 0x05
    43fa:	8d bd       	out	0x2d, r24	; 45
    43fc:	8c b5       	in	r24, 0x2c	; 44
    43fe:	80 64       	ori	r24, 0x40	; 64
    4400:	8c bd       	out	0x2c, r24	; 44
    4402:	08 95       	ret

00004404 <spi_create>:
    4404:	4f 92       	push	r4
    4406:	5f 92       	push	r5
    4408:	6f 92       	push	r6
    440a:	7f 92       	push	r7
    440c:	8f 92       	push	r8
    440e:	9f 92       	push	r9
    4410:	af 92       	push	r10
    4412:	bf 92       	push	r11
    4414:	cf 92       	push	r12
    4416:	df 92       	push	r13
    4418:	ef 92       	push	r14
    441a:	ff 92       	push	r15
    441c:	0f 93       	push	r16
    441e:	1f 93       	push	r17
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	cd b7       	in	r28, 0x3d	; 61
    4426:	de b7       	in	r29, 0x3e	; 62
    4428:	98 2e       	mov	r9, r24
    442a:	b6 2e       	mov	r11, r22
    442c:	d4 2e       	mov	r13, r20
    442e:	f2 2e       	mov	r15, r18
    4430:	80 91 14 0f 	lds	r24, 0x0F14	; 0x800f14 <_initialised>
    4434:	81 11       	cpse	r24, r1
    4436:	06 c0       	rjmp	.+12     	; 0x4444 <spi_create+0x40>
    4438:	84 b1       	in	r24, 0x04	; 4
    443a:	87 60       	ori	r24, 0x07	; 7
    443c:	84 b9       	out	0x04, r24	; 4
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	80 93 14 0f 	sts	0x0F14, r24	; 0x800f14 <_initialised>
    4444:	8c e0       	ldi	r24, 0x0C	; 12
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	c0 d5       	rcall	.+2944   	; 0x4fca <malloc>
    444a:	3c 01       	movw	r6, r24
    444c:	dc 01       	movw	r26, r24
    444e:	11 96       	adiw	r26, 0x01	; 1
    4450:	1c 93       	st	X, r17
    4452:	0e 93       	st	-X, r16
    4454:	12 96       	adiw	r26, 0x02	; 2
    4456:	ec 92       	st	X, r14
    4458:	12 97       	sbiw	r26, 0x02	; 2
    445a:	13 96       	adiw	r26, 0x03	; 3
    445c:	cc 92       	st	X, r12
    445e:	13 97       	sbiw	r26, 0x03	; 3
    4460:	8d 2d       	mov	r24, r13
    4462:	88 0f       	add	r24, r24
    4464:	88 0f       	add	r24, r24
    4466:	f8 2a       	or	r15, r24
    4468:	eb 2d       	mov	r30, r11
    446a:	f0 e0       	ldi	r31, 0x00	; 0
    446c:	ed 5f       	subi	r30, 0xFD	; 253
    446e:	fb 4f       	sbci	r31, 0xFB	; 251
    4470:	80 81       	ld	r24, Z
    4472:	98 2a       	or	r9, r24
    4474:	8f 2d       	mov	r24, r15
    4476:	89 29       	or	r24, r9
    4478:	14 96       	adiw	r26, 0x04	; 4
    447a:	8c 93       	st	X, r24
    447c:	b3 e0       	ldi	r27, 0x03	; 3
    447e:	bb 15       	cp	r27, r11
    4480:	18 f4       	brcc	.+6      	; 0x4488 <spi_create+0x84>
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	f3 01       	movw	r30, r6
    4486:	85 83       	std	Z+5, r24	; 0x05
    4488:	a1 10       	cpse	r10, r1
    448a:	06 c0       	rjmp	.+12     	; 0x4498 <spi_create+0x94>
    448c:	d3 01       	movw	r26, r6
    448e:	19 96       	adiw	r26, 0x09	; 9
    4490:	1c 92       	st	X, r1
    4492:	1e 92       	st	-X, r1
    4494:	18 97       	sbiw	r26, 0x08	; 8
    4496:	12 c0       	rjmp	.+36     	; 0x44bc <spi_create+0xb8>
    4498:	6a 2d       	mov	r22, r10
    449a:	70 e0       	ldi	r23, 0x00	; 0
    449c:	84 e0       	ldi	r24, 0x04	; 4
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	7a d5       	rcall	.+2804   	; 0x4f96 <calloc>
    44a2:	2c 01       	movw	r4, r24
    44a4:	61 e0       	ldi	r22, 0x01	; 1
    44a6:	70 e0       	ldi	r23, 0x00	; 0
    44a8:	86 e0       	ldi	r24, 0x06	; 6
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	74 d5       	rcall	.+2792   	; 0x4f96 <calloc>
    44ae:	6c 01       	movw	r12, r24
    44b0:	4a 2d       	mov	r20, r10
    44b2:	b2 01       	movw	r22, r4
    44b4:	27 d3       	rcall	.+1614   	; 0x4b04 <fifo_init>
    44b6:	f3 01       	movw	r30, r6
    44b8:	d1 86       	std	Z+9, r13	; 0x09
    44ba:	c0 86       	std	Z+8, r12	; 0x08
    44bc:	81 10       	cpse	r8, r1
    44be:	06 c0       	rjmp	.+12     	; 0x44cc <spi_create+0xc8>
    44c0:	d3 01       	movw	r26, r6
    44c2:	17 96       	adiw	r26, 0x07	; 7
    44c4:	1c 92       	st	X, r1
    44c6:	1e 92       	st	-X, r1
    44c8:	16 97       	sbiw	r26, 0x06	; 6
    44ca:	12 c0       	rjmp	.+36     	; 0x44f0 <spi_create+0xec>
    44cc:	68 2d       	mov	r22, r8
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	84 e0       	ldi	r24, 0x04	; 4
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	60 d5       	rcall	.+2752   	; 0x4f96 <calloc>
    44d6:	5c 01       	movw	r10, r24
    44d8:	61 e0       	ldi	r22, 0x01	; 1
    44da:	70 e0       	ldi	r23, 0x00	; 0
    44dc:	86 e0       	ldi	r24, 0x06	; 6
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	5a d5       	rcall	.+2740   	; 0x4f96 <calloc>
    44e2:	6c 01       	movw	r12, r24
    44e4:	48 2d       	mov	r20, r8
    44e6:	b5 01       	movw	r22, r10
    44e8:	0d d3       	rcall	.+1562   	; 0x4b04 <fifo_init>
    44ea:	f3 01       	movw	r30, r6
    44ec:	d7 82       	std	Z+7, r13	; 0x07
    44ee:	c6 82       	std	Z+6, r12	; 0x06
    44f0:	8c 89       	ldd	r24, Y+20	; 0x14
    44f2:	9d 89       	ldd	r25, Y+21	; 0x15
    44f4:	d3 01       	movw	r26, r6
    44f6:	1b 96       	adiw	r26, 0x0b	; 11
    44f8:	9c 93       	st	X, r25
    44fa:	8e 93       	st	-X, r24
    44fc:	1a 97       	sbiw	r26, 0x0a	; 10
    44fe:	01 15       	cp	r16, r1
    4500:	11 05       	cpc	r17, r1
    4502:	59 f0       	breq	.+22     	; 0x451a <spi_create+0x116>
    4504:	f8 01       	movw	r30, r16
    4506:	22 91       	ld	r18, -Z
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	02 c0       	rjmp	.+4      	; 0x4512 <spi_create+0x10e>
    450e:	88 0f       	add	r24, r24
    4510:	99 1f       	adc	r25, r25
    4512:	ea 94       	dec	r14
    4514:	e2 f7       	brpl	.-8      	; 0x450e <spi_create+0x10a>
    4516:	82 2b       	or	r24, r18
    4518:	80 83       	st	Z, r24
    451a:	2f b7       	in	r18, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	40 91 15 0f 	lds	r20, 0x0F15	; 0x800f15 <_this>
    4522:	50 91 16 0f 	lds	r21, 0x0F16	; 0x800f16 <_this+0x1>
    4526:	70 92 16 0f 	sts	0x0F16, r7	; 0x800f16 <_this+0x1>
    452a:	60 92 15 0f 	sts	0x0F15, r6	; 0x800f15 <_this>
    452e:	d3 01       	movw	r26, r6
    4530:	ed 91       	ld	r30, X+
    4532:	fc 91       	ld	r31, X
    4534:	11 97       	sbiw	r26, 0x01	; 1
    4536:	30 97       	sbiw	r30, 0x00	; 0
    4538:	01 f1       	breq	.+64     	; 0x457a <spi_create+0x176>
    453a:	13 96       	adiw	r26, 0x03	; 3
    453c:	8c 91       	ld	r24, X
    453e:	13 97       	sbiw	r26, 0x03	; 3
    4540:	81 30       	cpi	r24, 0x01	; 1
    4542:	71 f4       	brne	.+28     	; 0x4560 <spi_create+0x15c>
    4544:	30 81       	ld	r19, Z
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	12 96       	adiw	r26, 0x02	; 2
    454c:	0c 90       	ld	r0, X
    454e:	02 c0       	rjmp	.+4      	; 0x4554 <spi_create+0x150>
    4550:	88 0f       	add	r24, r24
    4552:	99 1f       	adc	r25, r25
    4554:	0a 94       	dec	r0
    4556:	e2 f7       	brpl	.-8      	; 0x4550 <spi_create+0x14c>
    4558:	80 95       	com	r24
    455a:	83 23       	and	r24, r19
    455c:	80 83       	st	Z, r24
    455e:	0d c0       	rjmp	.+26     	; 0x457a <spi_create+0x176>
    4560:	30 81       	ld	r19, Z
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	d3 01       	movw	r26, r6
    4568:	12 96       	adiw	r26, 0x02	; 2
    456a:	0c 90       	ld	r0, X
    456c:	02 c0       	rjmp	.+4      	; 0x4572 <spi_create+0x16e>
    456e:	88 0f       	add	r24, r24
    4570:	99 1f       	adc	r25, r25
    4572:	0a 94       	dec	r0
    4574:	e2 f7       	brpl	.-8      	; 0x456e <spi_create+0x16a>
    4576:	83 2b       	or	r24, r19
    4578:	80 83       	st	Z, r24
    457a:	50 93 16 0f 	sts	0x0F16, r21	; 0x800f16 <_this+0x1>
    457e:	40 93 15 0f 	sts	0x0F15, r20	; 0x800f15 <_this>
    4582:	2f bf       	out	0x3f, r18	; 63
    4584:	c3 01       	movw	r24, r6
    4586:	df 91       	pop	r29
    4588:	cf 91       	pop	r28
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	bf 90       	pop	r11
    4598:	af 90       	pop	r10
    459a:	9f 90       	pop	r9
    459c:	8f 90       	pop	r8
    459e:	7f 90       	pop	r7
    45a0:	6f 90       	pop	r6
    45a2:	5f 90       	pop	r5
    45a4:	4f 90       	pop	r4
    45a6:	08 95       	ret

000045a8 <spi_sendByte>:
    45a8:	1f 93       	push	r17
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <spi_sendByte+0xc>
    45b2:	6a c0       	rjmp	.+212    	; 0x4688 <spi_sendByte+0xe0>
    45b4:	16 2f       	mov	r17, r22
    45b6:	ec 01       	movw	r28, r24
    45b8:	80 91 15 0f 	lds	r24, 0x0F15	; 0x800f15 <_this>
    45bc:	90 91 16 0f 	lds	r25, 0x0F16	; 0x800f16 <_this+0x1>
    45c0:	c8 17       	cp	r28, r24
    45c2:	d9 07       	cpc	r29, r25
    45c4:	11 f0       	breq	.+4      	; 0x45ca <spi_sendByte+0x22>
    45c6:	ce 01       	movw	r24, r28
    45c8:	e4 de       	rcall	.-568    	; 0x4392 <_select_instance>
    45ca:	8f b7       	in	r24, 0x3f	; 63
    45cc:	2f b7       	in	r18, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	80 91 17 0f 	lds	r24, 0x0F17	; 0x800f17 <_spi_active>
    45d4:	81 11       	cpse	r24, r1
    45d6:	31 c0       	rjmp	.+98     	; 0x463a <spi_sendByte+0x92>
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	80 93 17 0f 	sts	0x0F17, r24	; 0x800f17 <_spi_active>
    45de:	a0 91 15 0f 	lds	r26, 0x0F15	; 0x800f15 <_this>
    45e2:	b0 91 16 0f 	lds	r27, 0x0F16	; 0x800f16 <_this+0x1>
    45e6:	ed 91       	ld	r30, X+
    45e8:	fc 91       	ld	r31, X
    45ea:	11 97       	sbiw	r26, 0x01	; 1
    45ec:	30 97       	sbiw	r30, 0x00	; 0
    45ee:	f9 f0       	breq	.+62     	; 0x462e <spi_sendByte+0x86>
    45f0:	13 96       	adiw	r26, 0x03	; 3
    45f2:	8c 91       	ld	r24, X
    45f4:	13 97       	sbiw	r26, 0x03	; 3
    45f6:	81 30       	cpi	r24, 0x01	; 1
    45f8:	69 f4       	brne	.+26     	; 0x4614 <spi_sendByte+0x6c>
    45fa:	30 81       	ld	r19, Z
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	12 96       	adiw	r26, 0x02	; 2
    4602:	0c 90       	ld	r0, X
    4604:	02 c0       	rjmp	.+4      	; 0x460a <spi_sendByte+0x62>
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	0a 94       	dec	r0
    460c:	e2 f7       	brpl	.-8      	; 0x4606 <spi_sendByte+0x5e>
    460e:	83 2b       	or	r24, r19
    4610:	80 83       	st	Z, r24
    4612:	0d c0       	rjmp	.+26     	; 0x462e <spi_sendByte+0x86>
    4614:	30 81       	ld	r19, Z
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	12 96       	adiw	r26, 0x02	; 2
    461c:	0c 90       	ld	r0, X
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <spi_sendByte+0x7c>
    4620:	88 0f       	add	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	0a 94       	dec	r0
    4626:	e2 f7       	brpl	.-8      	; 0x4620 <spi_sendByte+0x78>
    4628:	80 95       	com	r24
    462a:	83 23       	and	r24, r19
    462c:	80 83       	st	Z, r24
    462e:	8c b5       	in	r24, 0x2c	; 44
    4630:	80 68       	ori	r24, 0x80	; 128
    4632:	8c bd       	out	0x2c, r24	; 44
    4634:	1e bd       	out	0x2e, r17	; 46
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	25 c0       	rjmp	.+74     	; 0x4684 <spi_sendByte+0xdc>
    463a:	ee 81       	ldd	r30, Y+6	; 0x06
    463c:	ff 81       	ldd	r31, Y+7	; 0x07
    463e:	30 97       	sbiw	r30, 0x00	; 0
    4640:	e1 f0       	breq	.+56     	; 0x467a <spi_sendByte+0xd2>
    4642:	34 81       	ldd	r19, Z+4	; 0x04
    4644:	83 81       	ldd	r24, Z+3	; 0x03
    4646:	42 81       	ldd	r20, Z+2	; 0x02
    4648:	95 81       	ldd	r25, Z+5	; 0x05
    464a:	84 1b       	sub	r24, r20
    464c:	89 23       	and	r24, r25
    464e:	38 17       	cp	r19, r24
    4650:	b1 f0       	breq	.+44     	; 0x467e <spi_sendByte+0xd6>
    4652:	83 81       	ldd	r24, Z+3	; 0x03
    4654:	42 81       	ldd	r20, Z+2	; 0x02
    4656:	84 1b       	sub	r24, r20
    4658:	89 23       	and	r24, r25
    465a:	38 17       	cp	r19, r24
    465c:	91 f0       	breq	.+36     	; 0x4682 <spi_sendByte+0xda>
    465e:	83 81       	ldd	r24, Z+3	; 0x03
    4660:	96 95       	lsr	r25
    4662:	98 23       	and	r25, r24
    4664:	a0 81       	ld	r26, Z
    4666:	b1 81       	ldd	r27, Z+1	; 0x01
    4668:	a9 0f       	add	r26, r25
    466a:	b1 1d       	adc	r27, r1
    466c:	1c 93       	st	X, r17
    466e:	8f 5f       	subi	r24, 0xFF	; 255
    4670:	95 81       	ldd	r25, Z+5	; 0x05
    4672:	89 23       	and	r24, r25
    4674:	83 83       	std	Z+3, r24	; 0x03
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	05 c0       	rjmp	.+10     	; 0x4684 <spi_sendByte+0xdc>
    467a:	82 e0       	ldi	r24, 0x02	; 2
    467c:	03 c0       	rjmp	.+6      	; 0x4684 <spi_sendByte+0xdc>
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	01 c0       	rjmp	.+2      	; 0x4684 <spi_sendByte+0xdc>
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	2f bf       	out	0x3f, r18	; 63
    4686:	01 c0       	rjmp	.+2      	; 0x468a <spi_sendByte+0xe2>
    4688:	83 e0       	ldi	r24, 0x03	; 3
    468a:	df 91       	pop	r29
    468c:	cf 91       	pop	r28
    468e:	1f 91       	pop	r17
    4690:	08 95       	ret

00004692 <__vector_24>:
    4692:	1f 92       	push	r1
    4694:	0f 92       	push	r0
    4696:	0f b6       	in	r0, 0x3f	; 63
    4698:	0f 92       	push	r0
    469a:	11 24       	eor	r1, r1
    469c:	0b b6       	in	r0, 0x3b	; 59
    469e:	0f 92       	push	r0
    46a0:	2f 93       	push	r18
    46a2:	3f 93       	push	r19
    46a4:	4f 93       	push	r20
    46a6:	5f 93       	push	r21
    46a8:	6f 93       	push	r22
    46aa:	7f 93       	push	r23
    46ac:	8f 93       	push	r24
    46ae:	9f 93       	push	r25
    46b0:	af 93       	push	r26
    46b2:	bf 93       	push	r27
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	ef 93       	push	r30
    46ba:	ff 93       	push	r31
    46bc:	6e b5       	in	r22, 0x2e	; 46
    46be:	a0 91 15 0f 	lds	r26, 0x0F15	; 0x800f15 <_this>
    46c2:	b0 91 16 0f 	lds	r27, 0x0F16	; 0x800f16 <_this+0x1>
    46c6:	18 96       	adiw	r26, 0x08	; 8
    46c8:	ed 91       	ld	r30, X+
    46ca:	fc 91       	ld	r31, X
    46cc:	19 97       	sbiw	r26, 0x09	; 9
    46ce:	30 97       	sbiw	r30, 0x00	; 0
    46d0:	a1 f0       	breq	.+40     	; 0x46fa <__vector_24+0x68>
    46d2:	83 81       	ldd	r24, Z+3	; 0x03
    46d4:	22 81       	ldd	r18, Z+2	; 0x02
    46d6:	95 81       	ldd	r25, Z+5	; 0x05
    46d8:	82 1b       	sub	r24, r18
    46da:	89 23       	and	r24, r25
    46dc:	24 81       	ldd	r18, Z+4	; 0x04
    46de:	82 17       	cp	r24, r18
    46e0:	61 f0       	breq	.+24     	; 0x46fa <__vector_24+0x68>
    46e2:	83 81       	ldd	r24, Z+3	; 0x03
    46e4:	96 95       	lsr	r25
    46e6:	98 23       	and	r25, r24
    46e8:	c0 81       	ld	r28, Z
    46ea:	d1 81       	ldd	r29, Z+1	; 0x01
    46ec:	c9 0f       	add	r28, r25
    46ee:	d1 1d       	adc	r29, r1
    46f0:	68 83       	st	Y, r22
    46f2:	8f 5f       	subi	r24, 0xFF	; 255
    46f4:	95 81       	ldd	r25, Z+5	; 0x05
    46f6:	89 23       	and	r24, r25
    46f8:	83 83       	std	Z+3, r24	; 0x03
    46fa:	16 96       	adiw	r26, 0x06	; 6
    46fc:	ed 91       	ld	r30, X+
    46fe:	fc 91       	ld	r31, X
    4700:	17 97       	sbiw	r26, 0x07	; 7
    4702:	30 97       	sbiw	r30, 0x00	; 0
    4704:	99 f0       	breq	.+38     	; 0x472c <__vector_24+0x9a>
    4706:	93 81       	ldd	r25, Z+3	; 0x03
    4708:	82 81       	ldd	r24, Z+2	; 0x02
    470a:	98 17       	cp	r25, r24
    470c:	79 f0       	breq	.+30     	; 0x472c <__vector_24+0x9a>
    470e:	92 81       	ldd	r25, Z+2	; 0x02
    4710:	85 81       	ldd	r24, Z+5	; 0x05
    4712:	28 2f       	mov	r18, r24
    4714:	26 95       	lsr	r18
    4716:	29 23       	and	r18, r25
    4718:	a0 81       	ld	r26, Z
    471a:	b1 81       	ldd	r27, Z+1	; 0x01
    471c:	a2 0f       	add	r26, r18
    471e:	b1 1d       	adc	r27, r1
    4720:	2c 91       	ld	r18, X
    4722:	9f 5f       	subi	r25, 0xFF	; 255
    4724:	89 23       	and	r24, r25
    4726:	82 83       	std	Z+2, r24	; 0x02
    4728:	2e bd       	out	0x2e, r18	; 46
    472a:	2d c0       	rjmp	.+90     	; 0x4786 <__vector_24+0xf4>
    472c:	8c b5       	in	r24, 0x2c	; 44
    472e:	8f 77       	andi	r24, 0x7F	; 127
    4730:	8c bd       	out	0x2c, r24	; 44
    4732:	10 92 17 0f 	sts	0x0F17, r1	; 0x800f17 <_spi_active>
    4736:	a0 91 15 0f 	lds	r26, 0x0F15	; 0x800f15 <_this>
    473a:	b0 91 16 0f 	lds	r27, 0x0F16	; 0x800f16 <_this+0x1>
    473e:	ed 91       	ld	r30, X+
    4740:	fc 91       	ld	r31, X
    4742:	11 97       	sbiw	r26, 0x01	; 1
    4744:	30 97       	sbiw	r30, 0x00	; 0
    4746:	f9 f0       	breq	.+62     	; 0x4786 <__vector_24+0xf4>
    4748:	13 96       	adiw	r26, 0x03	; 3
    474a:	8c 91       	ld	r24, X
    474c:	13 97       	sbiw	r26, 0x03	; 3
    474e:	81 30       	cpi	r24, 0x01	; 1
    4750:	71 f4       	brne	.+28     	; 0x476e <__vector_24+0xdc>
    4752:	20 81       	ld	r18, Z
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	12 96       	adiw	r26, 0x02	; 2
    475a:	0c 90       	ld	r0, X
    475c:	02 c0       	rjmp	.+4      	; 0x4762 <__vector_24+0xd0>
    475e:	88 0f       	add	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	0a 94       	dec	r0
    4764:	e2 f7       	brpl	.-8      	; 0x475e <__vector_24+0xcc>
    4766:	80 95       	com	r24
    4768:	82 23       	and	r24, r18
    476a:	80 83       	st	Z, r24
    476c:	0c c0       	rjmp	.+24     	; 0x4786 <__vector_24+0xf4>
    476e:	20 81       	ld	r18, Z
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	12 96       	adiw	r26, 0x02	; 2
    4776:	0c 90       	ld	r0, X
    4778:	02 c0       	rjmp	.+4      	; 0x477e <__vector_24+0xec>
    477a:	88 0f       	add	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	0a 94       	dec	r0
    4780:	e2 f7       	brpl	.-8      	; 0x477a <__vector_24+0xe8>
    4782:	82 2b       	or	r24, r18
    4784:	80 83       	st	Z, r24
    4786:	80 91 15 0f 	lds	r24, 0x0F15	; 0x800f15 <_this>
    478a:	90 91 16 0f 	lds	r25, 0x0F16	; 0x800f16 <_this+0x1>
    478e:	dc 01       	movw	r26, r24
    4790:	1a 96       	adiw	r26, 0x0a	; 10
    4792:	ed 91       	ld	r30, X+
    4794:	fc 91       	ld	r31, X
    4796:	1b 97       	sbiw	r26, 0x0b	; 11
    4798:	30 97       	sbiw	r30, 0x00	; 0
    479a:	09 f0       	breq	.+2      	; 0x479e <__vector_24+0x10c>
    479c:	19 95       	eicall
    479e:	ff 91       	pop	r31
    47a0:	ef 91       	pop	r30
    47a2:	df 91       	pop	r29
    47a4:	cf 91       	pop	r28
    47a6:	bf 91       	pop	r27
    47a8:	af 91       	pop	r26
    47aa:	9f 91       	pop	r25
    47ac:	8f 91       	pop	r24
    47ae:	7f 91       	pop	r23
    47b0:	6f 91       	pop	r22
    47b2:	5f 91       	pop	r21
    47b4:	4f 91       	pop	r20
    47b6:	3f 91       	pop	r19
    47b8:	2f 91       	pop	r18
    47ba:	0f 90       	pop	r0
    47bc:	0b be       	out	0x3b, r0	; 59
    47be:	0f 90       	pop	r0
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <_initTwiInterface>:
    47c8:	80 91 26 0f 	lds	r24, 0x0F26	; 0x800f26 <_twiIsInitiated>
    47cc:	81 11       	cpse	r24, r1
    47ce:	0c c0       	rjmp	.+24     	; 0x47e8 <_initTwiInterface+0x20>
    47d0:	8c e0       	ldi	r24, 0x0C	; 12
    47d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    47d6:	8f ef       	ldi	r24, 0xFF	; 255
    47d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    47dc:	84 e0       	ldi	r24, 0x04	; 4
    47de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	80 93 26 0f 	sts	0x0F26, r24	; 0x800f26 <_twiIsInitiated>
    47e8:	08 95       	ret

000047ea <twiCreate>:
    47ea:	af 92       	push	r10
    47ec:	bf 92       	push	r11
    47ee:	cf 92       	push	r12
    47f0:	df 92       	push	r13
    47f2:	ef 92       	push	r14
    47f4:	ff 92       	push	r15
    47f6:	0f 93       	push	r16
    47f8:	1f 93       	push	r17
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	a8 2e       	mov	r10, r24
    4800:	b6 2e       	mov	r11, r22
    4802:	69 01       	movw	r12, r18
    4804:	7a 01       	movw	r14, r20
    4806:	84 e0       	ldi	r24, 0x04	; 4
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	df d3       	rcall	.+1982   	; 0x4fca <malloc>
    480c:	ec 01       	movw	r28, r24
    480e:	89 2b       	or	r24, r25
    4810:	61 f1       	breq	.+88     	; 0x486a <twiCreate+0x80>
    4812:	a8 82       	st	Y, r10
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	b8 12       	cpse	r11, r24
    4818:	12 c0       	rjmp	.+36     	; 0x483e <twiCreate+0x54>
    481a:	c7 01       	movw	r24, r14
    481c:	b6 01       	movw	r22, r12
    481e:	20 ea       	ldi	r18, 0xA0	; 160
    4820:	36 e8       	ldi	r19, 0x86	; 134
    4822:	41 e0       	ldi	r20, 0x01	; 1
    4824:	50 e0       	ldi	r21, 0x00	; 0
    4826:	60 d3       	rcall	.+1728   	; 0x4ee8 <__udivmodsi4>
    4828:	da 01       	movw	r26, r20
    482a:	c9 01       	movw	r24, r18
    482c:	40 97       	sbiw	r24, 0x10	; 16
    482e:	a1 09       	sbc	r26, r1
    4830:	b1 09       	sbc	r27, r1
    4832:	b6 95       	lsr	r27
    4834:	a7 95       	ror	r26
    4836:	97 95       	ror	r25
    4838:	87 95       	ror	r24
    483a:	89 83       	std	Y+1, r24	; 0x01
    483c:	11 c0       	rjmp	.+34     	; 0x4860 <twiCreate+0x76>
    483e:	c7 01       	movw	r24, r14
    4840:	b6 01       	movw	r22, r12
    4842:	20 e8       	ldi	r18, 0x80	; 128
    4844:	3a e1       	ldi	r19, 0x1A	; 26
    4846:	46 e0       	ldi	r20, 0x06	; 6
    4848:	50 e0       	ldi	r21, 0x00	; 0
    484a:	4e d3       	rcall	.+1692   	; 0x4ee8 <__udivmodsi4>
    484c:	da 01       	movw	r26, r20
    484e:	c9 01       	movw	r24, r18
    4850:	40 97       	sbiw	r24, 0x10	; 16
    4852:	a1 09       	sbc	r26, r1
    4854:	b1 09       	sbc	r27, r1
    4856:	b6 95       	lsr	r27
    4858:	a7 95       	ror	r26
    485a:	97 95       	ror	r25
    485c:	87 95       	ror	r24
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	1b 83       	std	Y+3, r17	; 0x03
    4862:	0a 83       	std	Y+2, r16	; 0x02
    4864:	8c 2f       	mov	r24, r28
    4866:	9d 2f       	mov	r25, r29
    4868:	02 c0       	rjmp	.+4      	; 0x486e <twiCreate+0x84>
    486a:	80 e0       	ldi	r24, 0x00	; 0
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	df 91       	pop	r29
    4870:	cf 91       	pop	r28
    4872:	1f 91       	pop	r17
    4874:	0f 91       	pop	r16
    4876:	ff 90       	pop	r15
    4878:	ef 90       	pop	r14
    487a:	df 90       	pop	r13
    487c:	cf 90       	pop	r12
    487e:	bf 90       	pop	r11
    4880:	af 90       	pop	r10
    4882:	08 95       	ret

00004884 <twiIsBusy>:
    4884:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4888:	81 70       	andi	r24, 0x01	; 1
    488a:	08 95       	ret

0000488c <twiTransmit>:
    488c:	ff 92       	push	r15
    488e:	0f 93       	push	r16
    4890:	1f 93       	push	r17
    4892:	cf 93       	push	r28
    4894:	df 93       	push	r29
    4896:	00 97       	sbiw	r24, 0x00	; 0
    4898:	d1 f1       	breq	.+116    	; 0x490e <twiTransmit+0x82>
    489a:	4a 30       	cpi	r20, 0x0A	; 10
    489c:	d0 f5       	brcc	.+116    	; 0x4912 <twiTransmit+0x86>
    489e:	f4 2e       	mov	r15, r20
    48a0:	8b 01       	movw	r16, r22
    48a2:	ec 01       	movw	r28, r24
    48a4:	ef df       	rcall	.-34     	; 0x4884 <twiIsBusy>
    48a6:	81 11       	cpse	r24, r1
    48a8:	36 c0       	rjmp	.+108    	; 0x4916 <twiTransmit+0x8a>
    48aa:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiCurrentHandler>
    48ae:	90 91 1a 0f 	lds	r25, 0x0F1A	; 0x800f1a <_twiCurrentHandler+0x1>
    48b2:	c8 17       	cp	r28, r24
    48b4:	d9 07       	cpc	r29, r25
    48b6:	41 f0       	breq	.+16     	; 0x48c8 <twiTransmit+0x3c>
    48b8:	87 df       	rcall	.-242    	; 0x47c8 <_initTwiInterface>
    48ba:	89 81       	ldd	r24, Y+1	; 0x01
    48bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    48c0:	d0 93 1a 0f 	sts	0x0F1A, r29	; 0x800f1a <_twiCurrentHandler+0x1>
    48c4:	c0 93 19 0f 	sts	0x0F19, r28	; 0x800f19 <_twiCurrentHandler>
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	8f 0d       	add	r24, r15
    48cc:	80 93 1b 0f 	sts	0x0F1B, r24	; 0x800f1b <_twiMessageLen>
    48d0:	88 81       	ld	r24, Y
    48d2:	88 0f       	add	r24, r24
    48d4:	80 93 1c 0f 	sts	0x0F1C, r24	; 0x800f1c <_twiMessageBuffer>
    48d8:	ff 20       	and	r15, r15
    48da:	89 f0       	breq	.+34     	; 0x48fe <twiTransmit+0x72>
    48dc:	f8 01       	movw	r30, r16
    48de:	ad e1       	ldi	r26, 0x1D	; 29
    48e0:	bf e0       	ldi	r27, 0x0F	; 15
    48e2:	4f ef       	ldi	r20, 0xFF	; 255
    48e4:	4f 0d       	add	r20, r15
    48e6:	64 2f       	mov	r22, r20
    48e8:	70 e0       	ldi	r23, 0x00	; 0
    48ea:	cb 01       	movw	r24, r22
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	b8 01       	movw	r22, r16
    48f0:	68 0f       	add	r22, r24
    48f2:	79 1f       	adc	r23, r25
    48f4:	81 91       	ld	r24, Z+
    48f6:	8d 93       	st	X+, r24
    48f8:	e6 17       	cp	r30, r22
    48fa:	f7 07       	cpc	r31, r23
    48fc:	d9 f7       	brne	.-10     	; 0x48f4 <twiTransmit+0x68>
    48fe:	88 ef       	ldi	r24, 0xF8	; 248
    4900:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4904:	85 ea       	ldi	r24, 0xA5	; 165
    4906:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    490a:	84 e0       	ldi	r24, 0x04	; 4
    490c:	05 c0       	rjmp	.+10     	; 0x4918 <twiTransmit+0x8c>
    490e:	86 e0       	ldi	r24, 0x06	; 6
    4910:	03 c0       	rjmp	.+6      	; 0x4918 <twiTransmit+0x8c>
    4912:	87 e0       	ldi	r24, 0x07	; 7
    4914:	01 c0       	rjmp	.+2      	; 0x4918 <twiTransmit+0x8c>
    4916:	82 e0       	ldi	r24, 0x02	; 2
    4918:	df 91       	pop	r29
    491a:	cf 91       	pop	r28
    491c:	1f 91       	pop	r17
    491e:	0f 91       	pop	r16
    4920:	ff 90       	pop	r15
    4922:	08 95       	ret

00004924 <twiReceive>:
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	00 97       	sbiw	r24, 0x00	; 0
    492c:	29 f1       	breq	.+74     	; 0x4978 <twiReceive+0x54>
    492e:	6b 30       	cpi	r22, 0x0B	; 11
    4930:	28 f5       	brcc	.+74     	; 0x497c <twiReceive+0x58>
    4932:	16 2f       	mov	r17, r22
    4934:	ec 01       	movw	r28, r24
    4936:	a6 df       	rcall	.-180    	; 0x4884 <twiIsBusy>
    4938:	81 11       	cpse	r24, r1
    493a:	22 c0       	rjmp	.+68     	; 0x4980 <twiReceive+0x5c>
    493c:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiCurrentHandler>
    4940:	90 91 1a 0f 	lds	r25, 0x0F1A	; 0x800f1a <_twiCurrentHandler+0x1>
    4944:	c8 17       	cp	r28, r24
    4946:	d9 07       	cpc	r29, r25
    4948:	41 f0       	breq	.+16     	; 0x495a <twiReceive+0x36>
    494a:	3e df       	rcall	.-388    	; 0x47c8 <_initTwiInterface>
    494c:	89 81       	ldd	r24, Y+1	; 0x01
    494e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4952:	d0 93 1a 0f 	sts	0x0F1A, r29	; 0x800f1a <_twiCurrentHandler+0x1>
    4956:	c0 93 19 0f 	sts	0x0F19, r28	; 0x800f19 <_twiCurrentHandler>
    495a:	10 93 1b 0f 	sts	0x0F1B, r17	; 0x800f1b <_twiMessageLen>
    495e:	88 81       	ld	r24, Y
    4960:	88 0f       	add	r24, r24
    4962:	81 60       	ori	r24, 0x01	; 1
    4964:	80 93 1c 0f 	sts	0x0F1C, r24	; 0x800f1c <_twiMessageBuffer>
    4968:	88 ef       	ldi	r24, 0xF8	; 248
    496a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    496e:	85 ea       	ldi	r24, 0xA5	; 165
    4970:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4974:	85 e0       	ldi	r24, 0x05	; 5
    4976:	05 c0       	rjmp	.+10     	; 0x4982 <twiReceive+0x5e>
    4978:	86 e0       	ldi	r24, 0x06	; 6
    497a:	03 c0       	rjmp	.+6      	; 0x4982 <twiReceive+0x5e>
    497c:	87 e0       	ldi	r24, 0x07	; 7
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <twiReceive+0x5e>
    4980:	82 e0       	ldi	r24, 0x02	; 2
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	1f 91       	pop	r17
    4988:	08 95       	ret

0000498a <__vector_39>:
    498a:	1f 92       	push	r1
    498c:	0f 92       	push	r0
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	0f 92       	push	r0
    4992:	11 24       	eor	r1, r1
    4994:	0b b6       	in	r0, 0x3b	; 59
    4996:	0f 92       	push	r0
    4998:	2f 93       	push	r18
    499a:	3f 93       	push	r19
    499c:	4f 93       	push	r20
    499e:	5f 93       	push	r21
    49a0:	6f 93       	push	r22
    49a2:	7f 93       	push	r23
    49a4:	8f 93       	push	r24
    49a6:	9f 93       	push	r25
    49a8:	af 93       	push	r26
    49aa:	bf 93       	push	r27
    49ac:	ef 93       	push	r30
    49ae:	ff 93       	push	r31
    49b0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    49b4:	8e 2f       	mov	r24, r30
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	fc 01       	movw	r30, r24
    49ba:	38 97       	sbiw	r30, 0x08	; 8
    49bc:	e1 35       	cpi	r30, 0x51	; 81
    49be:	f1 05       	cpc	r31, r1
    49c0:	08 f0       	brcs	.+2      	; 0x49c4 <__vector_39+0x3a>
    49c2:	75 c0       	rjmp	.+234    	; 0x4aae <__vector_39+0x124>
    49c4:	88 27       	eor	r24, r24
    49c6:	e4 58       	subi	r30, 0x84	; 132
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	8f 4f       	sbci	r24, 0xFF	; 255
    49cc:	af c2       	rjmp	.+1374   	; 0x4f2c <__tablejump2__>
    49ce:	10 92 18 0f 	sts	0x0F18, r1	; 0x800f18 <_index.1885>
    49d2:	e0 91 18 0f 	lds	r30, 0x0F18	; 0x800f18 <_index.1885>
    49d6:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiMessageLen>
    49da:	e8 17       	cp	r30, r24
    49dc:	70 f4       	brcc	.+28     	; 0x49fa <__vector_39+0x70>
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	8e 0f       	add	r24, r30
    49e2:	80 93 18 0f 	sts	0x0F18, r24	; 0x800f18 <_index.1885>
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	e4 5e       	subi	r30, 0xE4	; 228
    49ea:	f0 4f       	sbci	r31, 0xF0	; 240
    49ec:	80 81       	ld	r24, Z
    49ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49f2:	85 e8       	ldi	r24, 0x85	; 133
    49f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49f8:	72 c0       	rjmp	.+228    	; 0x4ade <__vector_39+0x154>
    49fa:	84 e9       	ldi	r24, 0x94	; 148
    49fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a00:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiCurrentHandler>
    4a04:	90 91 1a 0f 	lds	r25, 0x0F1A	; 0x800f1a <_twiCurrentHandler+0x1>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	12 96       	adiw	r26, 0x02	; 2
    4a0c:	ed 91       	ld	r30, X+
    4a0e:	fc 91       	ld	r31, X
    4a10:	13 97       	sbiw	r26, 0x03	; 3
    4a12:	30 97       	sbiw	r30, 0x00	; 0
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <__vector_39+0x8e>
    4a16:	63 c0       	rjmp	.+198    	; 0x4ade <__vector_39+0x154>
    4a18:	20 e0       	ldi	r18, 0x00	; 0
    4a1a:	40 e0       	ldi	r20, 0x00	; 0
    4a1c:	50 e0       	ldi	r21, 0x00	; 0
    4a1e:	64 e0       	ldi	r22, 0x04	; 4
    4a20:	19 95       	eicall
    4a22:	5d c0       	rjmp	.+186    	; 0x4ade <__vector_39+0x154>
    4a24:	e0 91 18 0f 	lds	r30, 0x0F18	; 0x800f18 <_index.1885>
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	8e 0f       	add	r24, r30
    4a2c:	80 93 18 0f 	sts	0x0F18, r24	; 0x800f18 <_index.1885>
    4a30:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4a34:	f0 e0       	ldi	r31, 0x00	; 0
    4a36:	e4 5e       	subi	r30, 0xE4	; 228
    4a38:	f0 4f       	sbci	r31, 0xF0	; 240
    4a3a:	80 83       	st	Z, r24
    4a3c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4a40:	80 34       	cpi	r24, 0x40	; 64
    4a42:	11 f4       	brne	.+4      	; 0x4a48 <__vector_39+0xbe>
    4a44:	10 92 18 0f 	sts	0x0F18, r1	; 0x800f18 <_index.1885>
    4a48:	20 91 18 0f 	lds	r18, 0x0F18	; 0x800f18 <_index.1885>
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <_twiMessageLen>
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	28 17       	cp	r18, r24
    4a58:	39 07       	cpc	r19, r25
    4a5a:	24 f4       	brge	.+8      	; 0x4a64 <__vector_39+0xda>
    4a5c:	85 ec       	ldi	r24, 0xC5	; 197
    4a5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a62:	3d c0       	rjmp	.+122    	; 0x4ade <__vector_39+0x154>
    4a64:	85 e8       	ldi	r24, 0x85	; 133
    4a66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a6a:	39 c0       	rjmp	.+114    	; 0x4ade <__vector_39+0x154>
    4a6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4a70:	e0 91 18 0f 	lds	r30, 0x0F18	; 0x800f18 <_index.1885>
    4a74:	f0 e0       	ldi	r31, 0x00	; 0
    4a76:	e4 5e       	subi	r30, 0xE4	; 228
    4a78:	f0 4f       	sbci	r31, 0xF0	; 240
    4a7a:	80 83       	st	Z, r24
    4a7c:	84 e9       	ldi	r24, 0x94	; 148
    4a7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a82:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiCurrentHandler>
    4a86:	90 91 1a 0f 	lds	r25, 0x0F1A	; 0x800f1a <_twiCurrentHandler+0x1>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	12 96       	adiw	r26, 0x02	; 2
    4a8e:	ed 91       	ld	r30, X+
    4a90:	fc 91       	ld	r31, X
    4a92:	13 97       	sbiw	r26, 0x03	; 3
    4a94:	30 97       	sbiw	r30, 0x00	; 0
    4a96:	19 f1       	breq	.+70     	; 0x4ade <__vector_39+0x154>
    4a98:	20 91 1b 0f 	lds	r18, 0x0F1B	; 0x800f1b <_twiMessageLen>
    4a9c:	4c e1       	ldi	r20, 0x1C	; 28
    4a9e:	5f e0       	ldi	r21, 0x0F	; 15
    4aa0:	65 e0       	ldi	r22, 0x05	; 5
    4aa2:	19 95       	eicall
    4aa4:	1c c0       	rjmp	.+56     	; 0x4ade <__vector_39+0x154>
    4aa6:	85 ea       	ldi	r24, 0xA5	; 165
    4aa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4aac:	18 c0       	rjmp	.+48     	; 0x4ade <__vector_39+0x154>
    4aae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4ab2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ab6:	84 e0       	ldi	r24, 0x04	; 4
    4ab8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4abc:	80 91 19 0f 	lds	r24, 0x0F19	; 0x800f19 <_twiCurrentHandler>
    4ac0:	90 91 1a 0f 	lds	r25, 0x0F1A	; 0x800f1a <_twiCurrentHandler+0x1>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	12 96       	adiw	r26, 0x02	; 2
    4ac8:	ed 91       	ld	r30, X+
    4aca:	fc 91       	ld	r31, X
    4acc:	13 97       	sbiw	r26, 0x03	; 3
    4ace:	30 97       	sbiw	r30, 0x00	; 0
    4ad0:	31 f0       	breq	.+12     	; 0x4ade <__vector_39+0x154>
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	40 e0       	ldi	r20, 0x00	; 0
    4ad6:	50 e0       	ldi	r21, 0x00	; 0
    4ad8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4adc:	19 95       	eicall
    4ade:	ff 91       	pop	r31
    4ae0:	ef 91       	pop	r30
    4ae2:	bf 91       	pop	r27
    4ae4:	af 91       	pop	r26
    4ae6:	9f 91       	pop	r25
    4ae8:	8f 91       	pop	r24
    4aea:	7f 91       	pop	r23
    4aec:	6f 91       	pop	r22
    4aee:	5f 91       	pop	r21
    4af0:	4f 91       	pop	r20
    4af2:	3f 91       	pop	r19
    4af4:	2f 91       	pop	r18
    4af6:	0f 90       	pop	r0
    4af8:	0b be       	out	0x3b, r0	; 59
    4afa:	0f 90       	pop	r0
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	0f 90       	pop	r0
    4b00:	1f 90       	pop	r1
    4b02:	18 95       	reti

00004b04 <fifo_init>:
    4b04:	fc 01       	movw	r30, r24
    4b06:	41 11       	cpse	r20, r1
    4b08:	01 c0       	rjmp	.+2      	; 0x4b0c <fifo_init+0x8>
    4b0a:	80 d3       	rcall	.+1792   	; 0x520c <abort>
    4b0c:	84 2f       	mov	r24, r20
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	9c 01       	movw	r18, r24
    4b12:	21 50       	subi	r18, 0x01	; 1
    4b14:	31 09       	sbc	r19, r1
    4b16:	82 23       	and	r24, r18
    4b18:	93 23       	and	r25, r19
    4b1a:	89 2b       	or	r24, r25
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <fifo_init+0x1c>
    4b1e:	76 d3       	rcall	.+1772   	; 0x520c <abort>
    4b20:	41 38       	cpi	r20, 0x81	; 129
    4b22:	08 f0       	brcs	.+2      	; 0x4b26 <fifo_init+0x22>
    4b24:	73 d3       	rcall	.+1766   	; 0x520c <abort>
    4b26:	12 82       	std	Z+2, r1	; 0x02
    4b28:	13 82       	std	Z+3, r1	; 0x03
    4b2a:	44 83       	std	Z+4, r20	; 0x04
    4b2c:	44 0f       	add	r20, r20
    4b2e:	41 50       	subi	r20, 0x01	; 1
    4b30:	45 83       	std	Z+5, r20	; 0x05
    4b32:	71 83       	std	Z+1, r23	; 0x01
    4b34:	60 83       	st	Z, r22
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	08 95       	ret

00004b3c <floor>:
    4b3c:	3c d0       	rcall	.+120    	; 0x4bb6 <__fp_trunc>
    4b3e:	88 f0       	brcs	.+34     	; 0x4b62 <floor+0x26>
    4b40:	9f 37       	cpi	r25, 0x7F	; 127
    4b42:	48 f4       	brcc	.+18     	; 0x4b56 <floor+0x1a>
    4b44:	91 11       	cpse	r25, r1
    4b46:	16 f0       	brts	.+4      	; 0x4b4c <floor+0x10>
    4b48:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__fp_szero>
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	80 e8       	ldi	r24, 0x80	; 128
    4b52:	9f eb       	ldi	r25, 0xBF	; 191
    4b54:	08 95       	ret
    4b56:	26 f4       	brtc	.+8      	; 0x4b60 <floor+0x24>
    4b58:	1b 16       	cp	r1, r27
    4b5a:	61 1d       	adc	r22, r1
    4b5c:	71 1d       	adc	r23, r1
    4b5e:	81 1d       	adc	r24, r1
    4b60:	01 c0       	rjmp	.+2      	; 0x4b64 <__fp_mintl>
    4b62:	1b c0       	rjmp	.+54     	; 0x4b9a <__fp_mpack>

00004b64 <__fp_mintl>:
    4b64:	88 23       	and	r24, r24
    4b66:	71 f4       	brne	.+28     	; 0x4b84 <__fp_mintl+0x20>
    4b68:	77 23       	and	r23, r23
    4b6a:	21 f0       	breq	.+8      	; 0x4b74 <__fp_mintl+0x10>
    4b6c:	98 50       	subi	r25, 0x08	; 8
    4b6e:	87 2b       	or	r24, r23
    4b70:	76 2f       	mov	r23, r22
    4b72:	07 c0       	rjmp	.+14     	; 0x4b82 <__fp_mintl+0x1e>
    4b74:	66 23       	and	r22, r22
    4b76:	11 f4       	brne	.+4      	; 0x4b7c <__fp_mintl+0x18>
    4b78:	99 27       	eor	r25, r25
    4b7a:	0d c0       	rjmp	.+26     	; 0x4b96 <__fp_mintl+0x32>
    4b7c:	90 51       	subi	r25, 0x10	; 16
    4b7e:	86 2b       	or	r24, r22
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	2a f0       	brmi	.+10     	; 0x4b90 <__fp_mintl+0x2c>
    4b86:	9a 95       	dec	r25
    4b88:	66 0f       	add	r22, r22
    4b8a:	77 1f       	adc	r23, r23
    4b8c:	88 1f       	adc	r24, r24
    4b8e:	da f7       	brpl	.-10     	; 0x4b86 <__fp_mintl+0x22>
    4b90:	88 0f       	add	r24, r24
    4b92:	96 95       	lsr	r25
    4b94:	87 95       	ror	r24
    4b96:	97 f9       	bld	r25, 7
    4b98:	08 95       	ret

00004b9a <__fp_mpack>:
    4b9a:	9f 3f       	cpi	r25, 0xFF	; 255
    4b9c:	31 f0       	breq	.+12     	; 0x4baa <__fp_mpack_finite+0xc>

00004b9e <__fp_mpack_finite>:
    4b9e:	91 50       	subi	r25, 0x01	; 1
    4ba0:	20 f4       	brcc	.+8      	; 0x4baa <__fp_mpack_finite+0xc>
    4ba2:	87 95       	ror	r24
    4ba4:	77 95       	ror	r23
    4ba6:	67 95       	ror	r22
    4ba8:	b7 95       	ror	r27
    4baa:	88 0f       	add	r24, r24
    4bac:	91 1d       	adc	r25, r1
    4bae:	96 95       	lsr	r25
    4bb0:	87 95       	ror	r24
    4bb2:	97 f9       	bld	r25, 7
    4bb4:	08 95       	ret

00004bb6 <__fp_trunc>:
    4bb6:	0e 94 90 1a 	call	0x3520	; 0x3520 <__fp_splitA>
    4bba:	a0 f0       	brcs	.+40     	; 0x4be4 <__fp_trunc+0x2e>
    4bbc:	be e7       	ldi	r27, 0x7E	; 126
    4bbe:	b9 17       	cp	r27, r25
    4bc0:	88 f4       	brcc	.+34     	; 0x4be4 <__fp_trunc+0x2e>
    4bc2:	bb 27       	eor	r27, r27
    4bc4:	9f 38       	cpi	r25, 0x8F	; 143
    4bc6:	60 f4       	brcc	.+24     	; 0x4be0 <__fp_trunc+0x2a>
    4bc8:	16 16       	cp	r1, r22
    4bca:	b1 1d       	adc	r27, r1
    4bcc:	67 2f       	mov	r22, r23
    4bce:	78 2f       	mov	r23, r24
    4bd0:	88 27       	eor	r24, r24
    4bd2:	98 5f       	subi	r25, 0xF8	; 248
    4bd4:	f7 cf       	rjmp	.-18     	; 0x4bc4 <__fp_trunc+0xe>
    4bd6:	86 95       	lsr	r24
    4bd8:	77 95       	ror	r23
    4bda:	67 95       	ror	r22
    4bdc:	b1 1d       	adc	r27, r1
    4bde:	93 95       	inc	r25
    4be0:	96 39       	cpi	r25, 0x96	; 150
    4be2:	c8 f3       	brcs	.-14     	; 0x4bd6 <__fp_trunc+0x20>
    4be4:	08 95       	ret

00004be6 <pow>:
    4be6:	fa 01       	movw	r30, r20
    4be8:	ee 0f       	add	r30, r30
    4bea:	ff 1f       	adc	r31, r31
    4bec:	30 96       	adiw	r30, 0x00	; 0
    4bee:	21 05       	cpc	r18, r1
    4bf0:	31 05       	cpc	r19, r1
    4bf2:	a1 f1       	breq	.+104    	; 0x4c5c <pow+0x76>
    4bf4:	61 15       	cp	r22, r1
    4bf6:	71 05       	cpc	r23, r1
    4bf8:	61 f4       	brne	.+24     	; 0x4c12 <pow+0x2c>
    4bfa:	80 38       	cpi	r24, 0x80	; 128
    4bfc:	bf e3       	ldi	r27, 0x3F	; 63
    4bfe:	9b 07       	cpc	r25, r27
    4c00:	49 f1       	breq	.+82     	; 0x4c54 <pow+0x6e>
    4c02:	68 94       	set
    4c04:	90 38       	cpi	r25, 0x80	; 128
    4c06:	81 05       	cpc	r24, r1
    4c08:	61 f0       	breq	.+24     	; 0x4c22 <pow+0x3c>
    4c0a:	80 38       	cpi	r24, 0x80	; 128
    4c0c:	bf ef       	ldi	r27, 0xFF	; 255
    4c0e:	9b 07       	cpc	r25, r27
    4c10:	41 f0       	breq	.+16     	; 0x4c22 <pow+0x3c>
    4c12:	99 23       	and	r25, r25
    4c14:	4a f5       	brpl	.+82     	; 0x4c68 <pow+0x82>
    4c16:	ff 3f       	cpi	r31, 0xFF	; 255
    4c18:	e1 05       	cpc	r30, r1
    4c1a:	31 05       	cpc	r19, r1
    4c1c:	21 05       	cpc	r18, r1
    4c1e:	19 f1       	breq	.+70     	; 0x4c66 <pow+0x80>
    4c20:	e8 94       	clt
    4c22:	08 94       	sec
    4c24:	e7 95       	ror	r30
    4c26:	d9 01       	movw	r26, r18
    4c28:	aa 23       	and	r26, r26
    4c2a:	29 f4       	brne	.+10     	; 0x4c36 <pow+0x50>
    4c2c:	ab 2f       	mov	r26, r27
    4c2e:	be 2f       	mov	r27, r30
    4c30:	f8 5f       	subi	r31, 0xF8	; 248
    4c32:	d0 f3       	brcs	.-12     	; 0x4c28 <pow+0x42>
    4c34:	10 c0       	rjmp	.+32     	; 0x4c56 <pow+0x70>
    4c36:	ff 5f       	subi	r31, 0xFF	; 255
    4c38:	70 f4       	brcc	.+28     	; 0x4c56 <pow+0x70>
    4c3a:	a6 95       	lsr	r26
    4c3c:	e0 f7       	brcc	.-8      	; 0x4c36 <pow+0x50>
    4c3e:	f7 39       	cpi	r31, 0x97	; 151
    4c40:	50 f0       	brcs	.+20     	; 0x4c56 <pow+0x70>
    4c42:	19 f0       	breq	.+6      	; 0x4c4a <pow+0x64>
    4c44:	ff 3a       	cpi	r31, 0xAF	; 175
    4c46:	38 f4       	brcc	.+14     	; 0x4c56 <pow+0x70>
    4c48:	9f 77       	andi	r25, 0x7F	; 127
    4c4a:	9f 93       	push	r25
    4c4c:	0d d0       	rcall	.+26     	; 0x4c68 <pow+0x82>
    4c4e:	0f 90       	pop	r0
    4c50:	07 fc       	sbrc	r0, 7
    4c52:	90 58       	subi	r25, 0x80	; 128
    4c54:	08 95       	ret
    4c56:	46 f0       	brts	.+16     	; 0x4c68 <pow+0x82>
    4c58:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_nan>
    4c5c:	60 e0       	ldi	r22, 0x00	; 0
    4c5e:	70 e0       	ldi	r23, 0x00	; 0
    4c60:	80 e8       	ldi	r24, 0x80	; 128
    4c62:	9f e3       	ldi	r25, 0x3F	; 63
    4c64:	08 95       	ret
    4c66:	4f e7       	ldi	r20, 0x7F	; 127
    4c68:	9f 77       	andi	r25, 0x7F	; 127
    4c6a:	5f 93       	push	r21
    4c6c:	4f 93       	push	r20
    4c6e:	3f 93       	push	r19
    4c70:	2f 93       	push	r18
    4c72:	ac d0       	rcall	.+344    	; 0x4dcc <log>
    4c74:	2f 91       	pop	r18
    4c76:	3f 91       	pop	r19
    4c78:	4f 91       	pop	r20
    4c7a:	5f 91       	pop	r21
    4c7c:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsf3>
    4c80:	08 c0       	rjmp	.+16     	; 0x4c92 <exp>
    4c82:	29 f4       	brne	.+10     	; 0x4c8e <pow+0xa8>
    4c84:	16 f0       	brts	.+4      	; 0x4c8a <pow+0xa4>
    4c86:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__fp_inf>
    4c8a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__fp_zero>
    4c8e:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_nan>

00004c92 <exp>:
    4c92:	0e 94 90 1a 	call	0x3520	; 0x3520 <__fp_splitA>
    4c96:	a8 f3       	brcs	.-22     	; 0x4c82 <pow+0x9c>
    4c98:	96 38       	cpi	r25, 0x86	; 134
    4c9a:	a0 f7       	brcc	.-24     	; 0x4c84 <pow+0x9e>
    4c9c:	07 f8       	bld	r0, 7
    4c9e:	0f 92       	push	r0
    4ca0:	e8 94       	clt
    4ca2:	2b e3       	ldi	r18, 0x3B	; 59
    4ca4:	3a ea       	ldi	r19, 0xAA	; 170
    4ca6:	48 eb       	ldi	r20, 0xB8	; 184
    4ca8:	5f e7       	ldi	r21, 0x7F	; 127
    4caa:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3_pse>
    4cae:	0f 92       	push	r0
    4cb0:	0f 92       	push	r0
    4cb2:	0f 92       	push	r0
    4cb4:	4d b7       	in	r20, 0x3d	; 61
    4cb6:	5e b7       	in	r21, 0x3e	; 62
    4cb8:	0f 92       	push	r0
    4cba:	cf d0       	rcall	.+414    	; 0x4e5a <modf>
    4cbc:	ea e9       	ldi	r30, 0x9A	; 154
    4cbe:	f1 e0       	ldi	r31, 0x01	; 1
    4cc0:	16 d0       	rcall	.+44     	; 0x4cee <__fp_powser>
    4cc2:	4f 91       	pop	r20
    4cc4:	5f 91       	pop	r21
    4cc6:	ef 91       	pop	r30
    4cc8:	ff 91       	pop	r31
    4cca:	e5 95       	asr	r30
    4ccc:	ee 1f       	adc	r30, r30
    4cce:	ff 1f       	adc	r31, r31
    4cd0:	49 f0       	breq	.+18     	; 0x4ce4 <exp+0x52>
    4cd2:	fe 57       	subi	r31, 0x7E	; 126
    4cd4:	e0 68       	ori	r30, 0x80	; 128
    4cd6:	44 27       	eor	r20, r20
    4cd8:	ee 0f       	add	r30, r30
    4cda:	44 1f       	adc	r20, r20
    4cdc:	fa 95       	dec	r31
    4cde:	e1 f7       	brne	.-8      	; 0x4cd8 <exp+0x46>
    4ce0:	41 95       	neg	r20
    4ce2:	55 0b       	sbc	r21, r21
    4ce4:	36 d0       	rcall	.+108    	; 0x4d52 <ldexp>
    4ce6:	0f 90       	pop	r0
    4ce8:	07 fe       	sbrs	r0, 7
    4cea:	28 c0       	rjmp	.+80     	; 0x4d3c <inverse>
    4cec:	08 95       	ret

00004cee <__fp_powser>:
    4cee:	df 93       	push	r29
    4cf0:	cf 93       	push	r28
    4cf2:	1f 93       	push	r17
    4cf4:	0f 93       	push	r16
    4cf6:	ff 92       	push	r15
    4cf8:	ef 92       	push	r14
    4cfa:	df 92       	push	r13
    4cfc:	7b 01       	movw	r14, r22
    4cfe:	8c 01       	movw	r16, r24
    4d00:	68 94       	set
    4d02:	06 c0       	rjmp	.+12     	; 0x4d10 <__fp_powser+0x22>
    4d04:	da 2e       	mov	r13, r26
    4d06:	ef 01       	movw	r28, r30
    4d08:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3x>
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	e8 94       	clt
    4d10:	a5 91       	lpm	r26, Z+
    4d12:	25 91       	lpm	r18, Z+
    4d14:	35 91       	lpm	r19, Z+
    4d16:	45 91       	lpm	r20, Z+
    4d18:	55 91       	lpm	r21, Z+
    4d1a:	a6 f3       	brts	.-24     	; 0x4d04 <__fp_powser+0x16>
    4d1c:	ef 01       	movw	r28, r30
    4d1e:	0e 94 37 19 	call	0x326e	; 0x326e <__addsf3x>
    4d22:	fe 01       	movw	r30, r28
    4d24:	97 01       	movw	r18, r14
    4d26:	a8 01       	movw	r20, r16
    4d28:	da 94       	dec	r13
    4d2a:	69 f7       	brne	.-38     	; 0x4d06 <__fp_powser+0x18>
    4d2c:	df 90       	pop	r13
    4d2e:	ef 90       	pop	r14
    4d30:	ff 90       	pop	r15
    4d32:	0f 91       	pop	r16
    4d34:	1f 91       	pop	r17
    4d36:	cf 91       	pop	r28
    4d38:	df 91       	pop	r29
    4d3a:	08 95       	ret

00004d3c <inverse>:
    4d3c:	9b 01       	movw	r18, r22
    4d3e:	ac 01       	movw	r20, r24
    4d40:	60 e0       	ldi	r22, 0x00	; 0
    4d42:	70 e0       	ldi	r23, 0x00	; 0
    4d44:	80 e8       	ldi	r24, 0x80	; 128
    4d46:	9f e3       	ldi	r25, 0x3F	; 63
    4d48:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__divsf3>
    4d4c:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__fp_inf>
    4d50:	24 cf       	rjmp	.-440    	; 0x4b9a <__fp_mpack>

00004d52 <ldexp>:
    4d52:	0e 94 90 1a 	call	0x3520	; 0x3520 <__fp_splitA>
    4d56:	e0 f3       	brcs	.-8      	; 0x4d50 <inverse+0x14>
    4d58:	99 23       	and	r25, r25
    4d5a:	d1 f3       	breq	.-12     	; 0x4d50 <inverse+0x14>
    4d5c:	94 0f       	add	r25, r20
    4d5e:	51 1d       	adc	r21, r1
    4d60:	ab f3       	brvs	.-22     	; 0x4d4c <inverse+0x10>
    4d62:	91 50       	subi	r25, 0x01	; 1
    4d64:	50 40       	sbci	r21, 0x00	; 0
    4d66:	94 f0       	brlt	.+36     	; 0x4d8c <ldexp+0x3a>
    4d68:	59 f0       	breq	.+22     	; 0x4d80 <ldexp+0x2e>
    4d6a:	88 23       	and	r24, r24
    4d6c:	32 f0       	brmi	.+12     	; 0x4d7a <ldexp+0x28>
    4d6e:	66 0f       	add	r22, r22
    4d70:	77 1f       	adc	r23, r23
    4d72:	88 1f       	adc	r24, r24
    4d74:	91 50       	subi	r25, 0x01	; 1
    4d76:	50 40       	sbci	r21, 0x00	; 0
    4d78:	c1 f7       	brne	.-16     	; 0x4d6a <ldexp+0x18>
    4d7a:	9e 3f       	cpi	r25, 0xFE	; 254
    4d7c:	51 05       	cpc	r21, r1
    4d7e:	34 f7       	brge	.-52     	; 0x4d4c <inverse+0x10>
    4d80:	88 0f       	add	r24, r24
    4d82:	91 1d       	adc	r25, r1
    4d84:	96 95       	lsr	r25
    4d86:	87 95       	ror	r24
    4d88:	97 f9       	bld	r25, 7
    4d8a:	08 95       	ret
    4d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d8e:	ac f0       	brlt	.+42     	; 0x4dba <ldexp+0x68>
    4d90:	98 3e       	cpi	r25, 0xE8	; 232
    4d92:	9c f0       	brlt	.+38     	; 0x4dba <ldexp+0x68>
    4d94:	bb 27       	eor	r27, r27
    4d96:	86 95       	lsr	r24
    4d98:	77 95       	ror	r23
    4d9a:	67 95       	ror	r22
    4d9c:	b7 95       	ror	r27
    4d9e:	08 f4       	brcc	.+2      	; 0x4da2 <ldexp+0x50>
    4da0:	b1 60       	ori	r27, 0x01	; 1
    4da2:	93 95       	inc	r25
    4da4:	c1 f7       	brne	.-16     	; 0x4d96 <ldexp+0x44>
    4da6:	bb 0f       	add	r27, r27
    4da8:	58 f7       	brcc	.-42     	; 0x4d80 <ldexp+0x2e>
    4daa:	11 f4       	brne	.+4      	; 0x4db0 <ldexp+0x5e>
    4dac:	60 ff       	sbrs	r22, 0
    4dae:	e8 cf       	rjmp	.-48     	; 0x4d80 <ldexp+0x2e>
    4db0:	6f 5f       	subi	r22, 0xFF	; 255
    4db2:	7f 4f       	sbci	r23, 0xFF	; 255
    4db4:	8f 4f       	sbci	r24, 0xFF	; 255
    4db6:	9f 4f       	sbci	r25, 0xFF	; 255
    4db8:	e3 cf       	rjmp	.-58     	; 0x4d80 <ldexp+0x2e>
    4dba:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__fp_szero>
    4dbe:	0e f0       	brts	.+2      	; 0x4dc2 <ldexp+0x70>
    4dc0:	ec ce       	rjmp	.-552    	; 0x4b9a <__fp_mpack>
    4dc2:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_nan>
    4dc6:	68 94       	set
    4dc8:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__fp_inf>

00004dcc <log>:
    4dcc:	0e 94 90 1a 	call	0x3520	; 0x3520 <__fp_splitA>
    4dd0:	b0 f3       	brcs	.-20     	; 0x4dbe <ldexp+0x6c>
    4dd2:	99 23       	and	r25, r25
    4dd4:	c1 f3       	breq	.-16     	; 0x4dc6 <ldexp+0x74>
    4dd6:	ae f3       	brts	.-22     	; 0x4dc2 <ldexp+0x70>
    4dd8:	df 93       	push	r29
    4dda:	cf 93       	push	r28
    4ddc:	1f 93       	push	r17
    4dde:	0f 93       	push	r16
    4de0:	ff 92       	push	r15
    4de2:	c9 2f       	mov	r28, r25
    4de4:	dd 27       	eor	r29, r29
    4de6:	88 23       	and	r24, r24
    4de8:	2a f0       	brmi	.+10     	; 0x4df4 <log+0x28>
    4dea:	21 97       	sbiw	r28, 0x01	; 1
    4dec:	66 0f       	add	r22, r22
    4dee:	77 1f       	adc	r23, r23
    4df0:	88 1f       	adc	r24, r24
    4df2:	da f7       	brpl	.-10     	; 0x4dea <log+0x1e>
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	40 e8       	ldi	r20, 0x80	; 128
    4dfa:	5f eb       	ldi	r21, 0xBF	; 191
    4dfc:	9f e3       	ldi	r25, 0x3F	; 63
    4dfe:	88 39       	cpi	r24, 0x98	; 152
    4e00:	20 f0       	brcs	.+8      	; 0x4e0a <log+0x3e>
    4e02:	80 3e       	cpi	r24, 0xE0	; 224
    4e04:	38 f0       	brcs	.+14     	; 0x4e14 <log+0x48>
    4e06:	21 96       	adiw	r28, 0x01	; 1
    4e08:	8f 77       	andi	r24, 0x7F	; 127
    4e0a:	0e 94 26 19 	call	0x324c	; 0x324c <__addsf3>
    4e0e:	e2 ec       	ldi	r30, 0xC2	; 194
    4e10:	f1 e0       	ldi	r31, 0x01	; 1
    4e12:	04 c0       	rjmp	.+8      	; 0x4e1c <log+0x50>
    4e14:	0e 94 26 19 	call	0x324c	; 0x324c <__addsf3>
    4e18:	ef ee       	ldi	r30, 0xEF	; 239
    4e1a:	f1 e0       	ldi	r31, 0x01	; 1
    4e1c:	68 df       	rcall	.-304    	; 0x4cee <__fp_powser>
    4e1e:	8b 01       	movw	r16, r22
    4e20:	be 01       	movw	r22, r28
    4e22:	ec 01       	movw	r28, r24
    4e24:	fb 2e       	mov	r15, r27
    4e26:	6f 57       	subi	r22, 0x7F	; 127
    4e28:	71 09       	sbc	r23, r1
    4e2a:	75 95       	asr	r23
    4e2c:	77 1f       	adc	r23, r23
    4e2e:	88 0b       	sbc	r24, r24
    4e30:	99 0b       	sbc	r25, r25
    4e32:	0e 94 25 1a 	call	0x344a	; 0x344a <__floatsisf>
    4e36:	28 e1       	ldi	r18, 0x18	; 24
    4e38:	32 e7       	ldi	r19, 0x72	; 114
    4e3a:	41 e3       	ldi	r20, 0x31	; 49
    4e3c:	5f e3       	ldi	r21, 0x3F	; 63
    4e3e:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3x>
    4e42:	af 2d       	mov	r26, r15
    4e44:	98 01       	movw	r18, r16
    4e46:	ae 01       	movw	r20, r28
    4e48:	ff 90       	pop	r15
    4e4a:	0f 91       	pop	r16
    4e4c:	1f 91       	pop	r17
    4e4e:	cf 91       	pop	r28
    4e50:	df 91       	pop	r29
    4e52:	0e 94 37 19 	call	0x326e	; 0x326e <__addsf3x>
    4e56:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__fp_round>

00004e5a <modf>:
    4e5a:	fa 01       	movw	r30, r20
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	aa 0f       	add	r26, r26
    4e60:	bb 1f       	adc	r27, r27
    4e62:	9b 01       	movw	r18, r22
    4e64:	ac 01       	movw	r20, r24
    4e66:	bf 57       	subi	r27, 0x7F	; 127
    4e68:	28 f4       	brcc	.+10     	; 0x4e74 <modf+0x1a>
    4e6a:	22 27       	eor	r18, r18
    4e6c:	33 27       	eor	r19, r19
    4e6e:	44 27       	eor	r20, r20
    4e70:	50 78       	andi	r21, 0x80	; 128
    4e72:	20 c0       	rjmp	.+64     	; 0x4eb4 <modf+0x5a>
    4e74:	b7 51       	subi	r27, 0x17	; 23
    4e76:	90 f4       	brcc	.+36     	; 0x4e9c <modf+0x42>
    4e78:	ab 2f       	mov	r26, r27
    4e7a:	00 24       	eor	r0, r0
    4e7c:	46 95       	lsr	r20
    4e7e:	37 95       	ror	r19
    4e80:	27 95       	ror	r18
    4e82:	01 1c       	adc	r0, r1
    4e84:	a3 95       	inc	r26
    4e86:	d2 f3       	brmi	.-12     	; 0x4e7c <modf+0x22>
    4e88:	00 20       	and	r0, r0
    4e8a:	71 f0       	breq	.+28     	; 0x4ea8 <modf+0x4e>
    4e8c:	22 0f       	add	r18, r18
    4e8e:	33 1f       	adc	r19, r19
    4e90:	44 1f       	adc	r20, r20
    4e92:	b3 95       	inc	r27
    4e94:	da f3       	brmi	.-10     	; 0x4e8c <modf+0x32>
    4e96:	0e d0       	rcall	.+28     	; 0x4eb4 <modf+0x5a>
    4e98:	0c 94 25 19 	jmp	0x324a	; 0x324a <__subsf3>
    4e9c:	61 30       	cpi	r22, 0x01	; 1
    4e9e:	71 05       	cpc	r23, r1
    4ea0:	a0 e8       	ldi	r26, 0x80	; 128
    4ea2:	8a 07       	cpc	r24, r26
    4ea4:	b9 46       	sbci	r27, 0x69	; 105
    4ea6:	30 f4       	brcc	.+12     	; 0x4eb4 <modf+0x5a>
    4ea8:	9b 01       	movw	r18, r22
    4eaa:	ac 01       	movw	r20, r24
    4eac:	66 27       	eor	r22, r22
    4eae:	77 27       	eor	r23, r23
    4eb0:	88 27       	eor	r24, r24
    4eb2:	90 78       	andi	r25, 0x80	; 128
    4eb4:	30 96       	adiw	r30, 0x00	; 0
    4eb6:	21 f0       	breq	.+8      	; 0x4ec0 <modf+0x66>
    4eb8:	20 83       	st	Z, r18
    4eba:	31 83       	std	Z+1, r19	; 0x01
    4ebc:	42 83       	std	Z+2, r20	; 0x02
    4ebe:	53 83       	std	Z+3, r21	; 0x03
    4ec0:	08 95       	ret

00004ec2 <__divmodhi4>:
    4ec2:	97 fb       	bst	r25, 7
    4ec4:	07 2e       	mov	r0, r23
    4ec6:	16 f4       	brtc	.+4      	; 0x4ecc <__divmodhi4+0xa>
    4ec8:	00 94       	com	r0
    4eca:	06 d0       	rcall	.+12     	; 0x4ed8 <__divmodhi4_neg1>
    4ecc:	77 fd       	sbrc	r23, 7
    4ece:	08 d0       	rcall	.+16     	; 0x4ee0 <__divmodhi4_neg2>
    4ed0:	3f d0       	rcall	.+126    	; 0x4f50 <__udivmodhi4>
    4ed2:	07 fc       	sbrc	r0, 7
    4ed4:	05 d0       	rcall	.+10     	; 0x4ee0 <__divmodhi4_neg2>
    4ed6:	3e f4       	brtc	.+14     	; 0x4ee6 <__divmodhi4_exit>

00004ed8 <__divmodhi4_neg1>:
    4ed8:	90 95       	com	r25
    4eda:	81 95       	neg	r24
    4edc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ede:	08 95       	ret

00004ee0 <__divmodhi4_neg2>:
    4ee0:	70 95       	com	r23
    4ee2:	61 95       	neg	r22
    4ee4:	7f 4f       	sbci	r23, 0xFF	; 255

00004ee6 <__divmodhi4_exit>:
    4ee6:	08 95       	ret

00004ee8 <__udivmodsi4>:
    4ee8:	a1 e2       	ldi	r26, 0x21	; 33
    4eea:	1a 2e       	mov	r1, r26
    4eec:	aa 1b       	sub	r26, r26
    4eee:	bb 1b       	sub	r27, r27
    4ef0:	fd 01       	movw	r30, r26
    4ef2:	0d c0       	rjmp	.+26     	; 0x4f0e <__udivmodsi4_ep>

00004ef4 <__udivmodsi4_loop>:
    4ef4:	aa 1f       	adc	r26, r26
    4ef6:	bb 1f       	adc	r27, r27
    4ef8:	ee 1f       	adc	r30, r30
    4efa:	ff 1f       	adc	r31, r31
    4efc:	a2 17       	cp	r26, r18
    4efe:	b3 07       	cpc	r27, r19
    4f00:	e4 07       	cpc	r30, r20
    4f02:	f5 07       	cpc	r31, r21
    4f04:	20 f0       	brcs	.+8      	; 0x4f0e <__udivmodsi4_ep>
    4f06:	a2 1b       	sub	r26, r18
    4f08:	b3 0b       	sbc	r27, r19
    4f0a:	e4 0b       	sbc	r30, r20
    4f0c:	f5 0b       	sbc	r31, r21

00004f0e <__udivmodsi4_ep>:
    4f0e:	66 1f       	adc	r22, r22
    4f10:	77 1f       	adc	r23, r23
    4f12:	88 1f       	adc	r24, r24
    4f14:	99 1f       	adc	r25, r25
    4f16:	1a 94       	dec	r1
    4f18:	69 f7       	brne	.-38     	; 0x4ef4 <__udivmodsi4_loop>
    4f1a:	60 95       	com	r22
    4f1c:	70 95       	com	r23
    4f1e:	80 95       	com	r24
    4f20:	90 95       	com	r25
    4f22:	9b 01       	movw	r18, r22
    4f24:	ac 01       	movw	r20, r24
    4f26:	bd 01       	movw	r22, r26
    4f28:	cf 01       	movw	r24, r30
    4f2a:	08 95       	ret

00004f2c <__tablejump2__>:
    4f2c:	ee 0f       	add	r30, r30
    4f2e:	ff 1f       	adc	r31, r31
    4f30:	88 1f       	adc	r24, r24
    4f32:	8b bf       	out	0x3b, r24	; 59
    4f34:	07 90       	elpm	r0, Z+
    4f36:	f6 91       	elpm	r31, Z
    4f38:	e0 2d       	mov	r30, r0
    4f3a:	19 94       	eijmp

00004f3c <__muluhisi3>:
    4f3c:	1d d0       	rcall	.+58     	; 0x4f78 <__umulhisi3>
    4f3e:	a5 9f       	mul	r26, r21
    4f40:	90 0d       	add	r25, r0
    4f42:	b4 9f       	mul	r27, r20
    4f44:	90 0d       	add	r25, r0
    4f46:	a4 9f       	mul	r26, r20
    4f48:	80 0d       	add	r24, r0
    4f4a:	91 1d       	adc	r25, r1
    4f4c:	11 24       	eor	r1, r1
    4f4e:	08 95       	ret

00004f50 <__udivmodhi4>:
    4f50:	aa 1b       	sub	r26, r26
    4f52:	bb 1b       	sub	r27, r27
    4f54:	51 e1       	ldi	r21, 0x11	; 17
    4f56:	07 c0       	rjmp	.+14     	; 0x4f66 <__udivmodhi4_ep>

00004f58 <__udivmodhi4_loop>:
    4f58:	aa 1f       	adc	r26, r26
    4f5a:	bb 1f       	adc	r27, r27
    4f5c:	a6 17       	cp	r26, r22
    4f5e:	b7 07       	cpc	r27, r23
    4f60:	10 f0       	brcs	.+4      	; 0x4f66 <__udivmodhi4_ep>
    4f62:	a6 1b       	sub	r26, r22
    4f64:	b7 0b       	sbc	r27, r23

00004f66 <__udivmodhi4_ep>:
    4f66:	88 1f       	adc	r24, r24
    4f68:	99 1f       	adc	r25, r25
    4f6a:	5a 95       	dec	r21
    4f6c:	a9 f7       	brne	.-22     	; 0x4f58 <__udivmodhi4_loop>
    4f6e:	80 95       	com	r24
    4f70:	90 95       	com	r25
    4f72:	bc 01       	movw	r22, r24
    4f74:	cd 01       	movw	r24, r26
    4f76:	08 95       	ret

00004f78 <__umulhisi3>:
    4f78:	a2 9f       	mul	r26, r18
    4f7a:	b0 01       	movw	r22, r0
    4f7c:	b3 9f       	mul	r27, r19
    4f7e:	c0 01       	movw	r24, r0
    4f80:	a3 9f       	mul	r26, r19
    4f82:	70 0d       	add	r23, r0
    4f84:	81 1d       	adc	r24, r1
    4f86:	11 24       	eor	r1, r1
    4f88:	91 1d       	adc	r25, r1
    4f8a:	b2 9f       	mul	r27, r18
    4f8c:	70 0d       	add	r23, r0
    4f8e:	81 1d       	adc	r24, r1
    4f90:	11 24       	eor	r1, r1
    4f92:	91 1d       	adc	r25, r1
    4f94:	08 95       	ret

00004f96 <calloc>:
    4f96:	0f 93       	push	r16
    4f98:	1f 93       	push	r17
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	86 9f       	mul	r24, r22
    4fa0:	80 01       	movw	r16, r0
    4fa2:	87 9f       	mul	r24, r23
    4fa4:	10 0d       	add	r17, r0
    4fa6:	96 9f       	mul	r25, r22
    4fa8:	10 0d       	add	r17, r0
    4faa:	11 24       	eor	r1, r1
    4fac:	c8 01       	movw	r24, r16
    4fae:	0d d0       	rcall	.+26     	; 0x4fca <malloc>
    4fb0:	ec 01       	movw	r28, r24
    4fb2:	00 97       	sbiw	r24, 0x00	; 0
    4fb4:	21 f0       	breq	.+8      	; 0x4fbe <calloc+0x28>
    4fb6:	a8 01       	movw	r20, r16
    4fb8:	60 e0       	ldi	r22, 0x00	; 0
    4fba:	70 e0       	ldi	r23, 0x00	; 0
    4fbc:	34 d1       	rcall	.+616    	; 0x5226 <memset>
    4fbe:	ce 01       	movw	r24, r28
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	1f 91       	pop	r17
    4fc6:	0f 91       	pop	r16
    4fc8:	08 95       	ret

00004fca <malloc>:
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	82 30       	cpi	r24, 0x02	; 2
    4fd4:	91 05       	cpc	r25, r1
    4fd6:	10 f4       	brcc	.+4      	; 0x4fdc <malloc+0x12>
    4fd8:	82 e0       	ldi	r24, 0x02	; 2
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	e0 91 3e 0f 	lds	r30, 0x0F3E	; 0x800f3e <__flp>
    4fe0:	f0 91 3f 0f 	lds	r31, 0x0F3F	; 0x800f3f <__flp+0x1>
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	a0 e0       	ldi	r26, 0x00	; 0
    4fea:	b0 e0       	ldi	r27, 0x00	; 0
    4fec:	30 97       	sbiw	r30, 0x00	; 0
    4fee:	19 f1       	breq	.+70     	; 0x5036 <malloc+0x6c>
    4ff0:	40 81       	ld	r20, Z
    4ff2:	51 81       	ldd	r21, Z+1	; 0x01
    4ff4:	02 81       	ldd	r16, Z+2	; 0x02
    4ff6:	13 81       	ldd	r17, Z+3	; 0x03
    4ff8:	48 17       	cp	r20, r24
    4ffa:	59 07       	cpc	r21, r25
    4ffc:	c8 f0       	brcs	.+50     	; 0x5030 <malloc+0x66>
    4ffe:	84 17       	cp	r24, r20
    5000:	95 07       	cpc	r25, r21
    5002:	69 f4       	brne	.+26     	; 0x501e <malloc+0x54>
    5004:	10 97       	sbiw	r26, 0x00	; 0
    5006:	31 f0       	breq	.+12     	; 0x5014 <malloc+0x4a>
    5008:	12 96       	adiw	r26, 0x02	; 2
    500a:	0c 93       	st	X, r16
    500c:	12 97       	sbiw	r26, 0x02	; 2
    500e:	13 96       	adiw	r26, 0x03	; 3
    5010:	1c 93       	st	X, r17
    5012:	27 c0       	rjmp	.+78     	; 0x5062 <malloc+0x98>
    5014:	00 93 3e 0f 	sts	0x0F3E, r16	; 0x800f3e <__flp>
    5018:	10 93 3f 0f 	sts	0x0F3F, r17	; 0x800f3f <__flp+0x1>
    501c:	22 c0       	rjmp	.+68     	; 0x5062 <malloc+0x98>
    501e:	21 15       	cp	r18, r1
    5020:	31 05       	cpc	r19, r1
    5022:	19 f0       	breq	.+6      	; 0x502a <malloc+0x60>
    5024:	42 17       	cp	r20, r18
    5026:	53 07       	cpc	r21, r19
    5028:	18 f4       	brcc	.+6      	; 0x5030 <malloc+0x66>
    502a:	9a 01       	movw	r18, r20
    502c:	bd 01       	movw	r22, r26
    502e:	ef 01       	movw	r28, r30
    5030:	df 01       	movw	r26, r30
    5032:	f8 01       	movw	r30, r16
    5034:	db cf       	rjmp	.-74     	; 0x4fec <malloc+0x22>
    5036:	21 15       	cp	r18, r1
    5038:	31 05       	cpc	r19, r1
    503a:	f9 f0       	breq	.+62     	; 0x507a <malloc+0xb0>
    503c:	28 1b       	sub	r18, r24
    503e:	39 0b       	sbc	r19, r25
    5040:	24 30       	cpi	r18, 0x04	; 4
    5042:	31 05       	cpc	r19, r1
    5044:	80 f4       	brcc	.+32     	; 0x5066 <malloc+0x9c>
    5046:	8a 81       	ldd	r24, Y+2	; 0x02
    5048:	9b 81       	ldd	r25, Y+3	; 0x03
    504a:	61 15       	cp	r22, r1
    504c:	71 05       	cpc	r23, r1
    504e:	21 f0       	breq	.+8      	; 0x5058 <malloc+0x8e>
    5050:	fb 01       	movw	r30, r22
    5052:	93 83       	std	Z+3, r25	; 0x03
    5054:	82 83       	std	Z+2, r24	; 0x02
    5056:	04 c0       	rjmp	.+8      	; 0x5060 <malloc+0x96>
    5058:	90 93 3f 0f 	sts	0x0F3F, r25	; 0x800f3f <__flp+0x1>
    505c:	80 93 3e 0f 	sts	0x0F3E, r24	; 0x800f3e <__flp>
    5060:	fe 01       	movw	r30, r28
    5062:	32 96       	adiw	r30, 0x02	; 2
    5064:	44 c0       	rjmp	.+136    	; 0x50ee <malloc+0x124>
    5066:	fe 01       	movw	r30, r28
    5068:	e2 0f       	add	r30, r18
    506a:	f3 1f       	adc	r31, r19
    506c:	81 93       	st	Z+, r24
    506e:	91 93       	st	Z+, r25
    5070:	22 50       	subi	r18, 0x02	; 2
    5072:	31 09       	sbc	r19, r1
    5074:	39 83       	std	Y+1, r19	; 0x01
    5076:	28 83       	st	Y, r18
    5078:	3a c0       	rjmp	.+116    	; 0x50ee <malloc+0x124>
    507a:	20 91 3c 0f 	lds	r18, 0x0F3C	; 0x800f3c <__brkval>
    507e:	30 91 3d 0f 	lds	r19, 0x0F3D	; 0x800f3d <__brkval+0x1>
    5082:	23 2b       	or	r18, r19
    5084:	41 f4       	brne	.+16     	; 0x5096 <malloc+0xcc>
    5086:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    508a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    508e:	30 93 3d 0f 	sts	0x0F3D, r19	; 0x800f3d <__brkval+0x1>
    5092:	20 93 3c 0f 	sts	0x0F3C, r18	; 0x800f3c <__brkval>
    5096:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    509a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    509e:	21 15       	cp	r18, r1
    50a0:	31 05       	cpc	r19, r1
    50a2:	41 f4       	brne	.+16     	; 0x50b4 <malloc+0xea>
    50a4:	2d b7       	in	r18, 0x3d	; 61
    50a6:	3e b7       	in	r19, 0x3e	; 62
    50a8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    50ac:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    50b0:	24 1b       	sub	r18, r20
    50b2:	35 0b       	sbc	r19, r21
    50b4:	e0 91 3c 0f 	lds	r30, 0x0F3C	; 0x800f3c <__brkval>
    50b8:	f0 91 3d 0f 	lds	r31, 0x0F3D	; 0x800f3d <__brkval+0x1>
    50bc:	e2 17       	cp	r30, r18
    50be:	f3 07       	cpc	r31, r19
    50c0:	a0 f4       	brcc	.+40     	; 0x50ea <malloc+0x120>
    50c2:	2e 1b       	sub	r18, r30
    50c4:	3f 0b       	sbc	r19, r31
    50c6:	28 17       	cp	r18, r24
    50c8:	39 07       	cpc	r19, r25
    50ca:	78 f0       	brcs	.+30     	; 0x50ea <malloc+0x120>
    50cc:	ac 01       	movw	r20, r24
    50ce:	4e 5f       	subi	r20, 0xFE	; 254
    50d0:	5f 4f       	sbci	r21, 0xFF	; 255
    50d2:	24 17       	cp	r18, r20
    50d4:	35 07       	cpc	r19, r21
    50d6:	48 f0       	brcs	.+18     	; 0x50ea <malloc+0x120>
    50d8:	4e 0f       	add	r20, r30
    50da:	5f 1f       	adc	r21, r31
    50dc:	50 93 3d 0f 	sts	0x0F3D, r21	; 0x800f3d <__brkval+0x1>
    50e0:	40 93 3c 0f 	sts	0x0F3C, r20	; 0x800f3c <__brkval>
    50e4:	81 93       	st	Z+, r24
    50e6:	91 93       	st	Z+, r25
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee <malloc+0x124>
    50ea:	e0 e0       	ldi	r30, 0x00	; 0
    50ec:	f0 e0       	ldi	r31, 0x00	; 0
    50ee:	cf 01       	movw	r24, r30
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	1f 91       	pop	r17
    50f6:	0f 91       	pop	r16
    50f8:	08 95       	ret

000050fa <free>:
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	09 f4       	brne	.+2      	; 0x5104 <free+0xa>
    5102:	81 c0       	rjmp	.+258    	; 0x5206 <free+0x10c>
    5104:	fc 01       	movw	r30, r24
    5106:	32 97       	sbiw	r30, 0x02	; 2
    5108:	13 82       	std	Z+3, r1	; 0x03
    510a:	12 82       	std	Z+2, r1	; 0x02
    510c:	a0 91 3e 0f 	lds	r26, 0x0F3E	; 0x800f3e <__flp>
    5110:	b0 91 3f 0f 	lds	r27, 0x0F3F	; 0x800f3f <__flp+0x1>
    5114:	10 97       	sbiw	r26, 0x00	; 0
    5116:	81 f4       	brne	.+32     	; 0x5138 <free+0x3e>
    5118:	20 81       	ld	r18, Z
    511a:	31 81       	ldd	r19, Z+1	; 0x01
    511c:	82 0f       	add	r24, r18
    511e:	93 1f       	adc	r25, r19
    5120:	20 91 3c 0f 	lds	r18, 0x0F3C	; 0x800f3c <__brkval>
    5124:	30 91 3d 0f 	lds	r19, 0x0F3D	; 0x800f3d <__brkval+0x1>
    5128:	28 17       	cp	r18, r24
    512a:	39 07       	cpc	r19, r25
    512c:	51 f5       	brne	.+84     	; 0x5182 <free+0x88>
    512e:	f0 93 3d 0f 	sts	0x0F3D, r31	; 0x800f3d <__brkval+0x1>
    5132:	e0 93 3c 0f 	sts	0x0F3C, r30	; 0x800f3c <__brkval>
    5136:	67 c0       	rjmp	.+206    	; 0x5206 <free+0x10c>
    5138:	ed 01       	movw	r28, r26
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	ce 17       	cp	r28, r30
    5140:	df 07       	cpc	r29, r31
    5142:	40 f4       	brcc	.+16     	; 0x5154 <free+0x5a>
    5144:	4a 81       	ldd	r20, Y+2	; 0x02
    5146:	5b 81       	ldd	r21, Y+3	; 0x03
    5148:	9e 01       	movw	r18, r28
    514a:	41 15       	cp	r20, r1
    514c:	51 05       	cpc	r21, r1
    514e:	f1 f0       	breq	.+60     	; 0x518c <free+0x92>
    5150:	ea 01       	movw	r28, r20
    5152:	f5 cf       	rjmp	.-22     	; 0x513e <free+0x44>
    5154:	d3 83       	std	Z+3, r29	; 0x03
    5156:	c2 83       	std	Z+2, r28	; 0x02
    5158:	40 81       	ld	r20, Z
    515a:	51 81       	ldd	r21, Z+1	; 0x01
    515c:	84 0f       	add	r24, r20
    515e:	95 1f       	adc	r25, r21
    5160:	c8 17       	cp	r28, r24
    5162:	d9 07       	cpc	r29, r25
    5164:	59 f4       	brne	.+22     	; 0x517c <free+0x82>
    5166:	88 81       	ld	r24, Y
    5168:	99 81       	ldd	r25, Y+1	; 0x01
    516a:	84 0f       	add	r24, r20
    516c:	95 1f       	adc	r25, r21
    516e:	02 96       	adiw	r24, 0x02	; 2
    5170:	91 83       	std	Z+1, r25	; 0x01
    5172:	80 83       	st	Z, r24
    5174:	8a 81       	ldd	r24, Y+2	; 0x02
    5176:	9b 81       	ldd	r25, Y+3	; 0x03
    5178:	93 83       	std	Z+3, r25	; 0x03
    517a:	82 83       	std	Z+2, r24	; 0x02
    517c:	21 15       	cp	r18, r1
    517e:	31 05       	cpc	r19, r1
    5180:	29 f4       	brne	.+10     	; 0x518c <free+0x92>
    5182:	f0 93 3f 0f 	sts	0x0F3F, r31	; 0x800f3f <__flp+0x1>
    5186:	e0 93 3e 0f 	sts	0x0F3E, r30	; 0x800f3e <__flp>
    518a:	3d c0       	rjmp	.+122    	; 0x5206 <free+0x10c>
    518c:	e9 01       	movw	r28, r18
    518e:	fb 83       	std	Y+3, r31	; 0x03
    5190:	ea 83       	std	Y+2, r30	; 0x02
    5192:	49 91       	ld	r20, Y+
    5194:	59 91       	ld	r21, Y+
    5196:	c4 0f       	add	r28, r20
    5198:	d5 1f       	adc	r29, r21
    519a:	ec 17       	cp	r30, r28
    519c:	fd 07       	cpc	r31, r29
    519e:	61 f4       	brne	.+24     	; 0x51b8 <free+0xbe>
    51a0:	80 81       	ld	r24, Z
    51a2:	91 81       	ldd	r25, Z+1	; 0x01
    51a4:	84 0f       	add	r24, r20
    51a6:	95 1f       	adc	r25, r21
    51a8:	02 96       	adiw	r24, 0x02	; 2
    51aa:	e9 01       	movw	r28, r18
    51ac:	99 83       	std	Y+1, r25	; 0x01
    51ae:	88 83       	st	Y, r24
    51b0:	82 81       	ldd	r24, Z+2	; 0x02
    51b2:	93 81       	ldd	r25, Z+3	; 0x03
    51b4:	9b 83       	std	Y+3, r25	; 0x03
    51b6:	8a 83       	std	Y+2, r24	; 0x02
    51b8:	e0 e0       	ldi	r30, 0x00	; 0
    51ba:	f0 e0       	ldi	r31, 0x00	; 0
    51bc:	12 96       	adiw	r26, 0x02	; 2
    51be:	8d 91       	ld	r24, X+
    51c0:	9c 91       	ld	r25, X
    51c2:	13 97       	sbiw	r26, 0x03	; 3
    51c4:	00 97       	sbiw	r24, 0x00	; 0
    51c6:	19 f0       	breq	.+6      	; 0x51ce <free+0xd4>
    51c8:	fd 01       	movw	r30, r26
    51ca:	dc 01       	movw	r26, r24
    51cc:	f7 cf       	rjmp	.-18     	; 0x51bc <free+0xc2>
    51ce:	8d 91       	ld	r24, X+
    51d0:	9c 91       	ld	r25, X
    51d2:	11 97       	sbiw	r26, 0x01	; 1
    51d4:	9d 01       	movw	r18, r26
    51d6:	2e 5f       	subi	r18, 0xFE	; 254
    51d8:	3f 4f       	sbci	r19, 0xFF	; 255
    51da:	82 0f       	add	r24, r18
    51dc:	93 1f       	adc	r25, r19
    51de:	20 91 3c 0f 	lds	r18, 0x0F3C	; 0x800f3c <__brkval>
    51e2:	30 91 3d 0f 	lds	r19, 0x0F3D	; 0x800f3d <__brkval+0x1>
    51e6:	28 17       	cp	r18, r24
    51e8:	39 07       	cpc	r19, r25
    51ea:	69 f4       	brne	.+26     	; 0x5206 <free+0x10c>
    51ec:	30 97       	sbiw	r30, 0x00	; 0
    51ee:	29 f4       	brne	.+10     	; 0x51fa <free+0x100>
    51f0:	10 92 3f 0f 	sts	0x0F3F, r1	; 0x800f3f <__flp+0x1>
    51f4:	10 92 3e 0f 	sts	0x0F3E, r1	; 0x800f3e <__flp>
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <free+0x104>
    51fa:	13 82       	std	Z+3, r1	; 0x03
    51fc:	12 82       	std	Z+2, r1	; 0x02
    51fe:	b0 93 3d 0f 	sts	0x0F3D, r27	; 0x800f3d <__brkval+0x1>
    5202:	a0 93 3c 0f 	sts	0x0F3C, r26	; 0x800f3c <__brkval>
    5206:	df 91       	pop	r29
    5208:	cf 91       	pop	r28
    520a:	08 95       	ret

0000520c <abort>:
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	f8 94       	cli
    5212:	00 c3       	rjmp	.+1536   	; 0x5814 <_exit>

00005214 <memcpy>:
    5214:	fb 01       	movw	r30, r22
    5216:	dc 01       	movw	r26, r24
    5218:	02 c0       	rjmp	.+4      	; 0x521e <memcpy+0xa>
    521a:	01 90       	ld	r0, Z+
    521c:	0d 92       	st	X+, r0
    521e:	41 50       	subi	r20, 0x01	; 1
    5220:	50 40       	sbci	r21, 0x00	; 0
    5222:	d8 f7       	brcc	.-10     	; 0x521a <memcpy+0x6>
    5224:	08 95       	ret

00005226 <memset>:
    5226:	dc 01       	movw	r26, r24
    5228:	01 c0       	rjmp	.+2      	; 0x522c <memset+0x6>
    522a:	6d 93       	st	X+, r22
    522c:	41 50       	subi	r20, 0x01	; 1
    522e:	50 40       	sbci	r21, 0x00	; 0
    5230:	e0 f7       	brcc	.-8      	; 0x522a <memset+0x4>
    5232:	08 95       	ret

00005234 <printf>:
    5234:	cf 93       	push	r28
    5236:	df 93       	push	r29
    5238:	cd b7       	in	r28, 0x3d	; 61
    523a:	de b7       	in	r29, 0x3e	; 62
    523c:	ae 01       	movw	r20, r28
    523e:	4a 5f       	subi	r20, 0xFA	; 250
    5240:	5f 4f       	sbci	r21, 0xFF	; 255
    5242:	fa 01       	movw	r30, r20
    5244:	61 91       	ld	r22, Z+
    5246:	71 91       	ld	r23, Z+
    5248:	af 01       	movw	r20, r30
    524a:	80 91 42 0f 	lds	r24, 0x0F42	; 0x800f42 <__iob+0x2>
    524e:	90 91 43 0f 	lds	r25, 0x0F43	; 0x800f43 <__iob+0x3>
    5252:	33 d0       	rcall	.+102    	; 0x52ba <vfprintf>
    5254:	df 91       	pop	r29
    5256:	cf 91       	pop	r28
    5258:	08 95       	ret

0000525a <puts>:
    525a:	0f 93       	push	r16
    525c:	1f 93       	push	r17
    525e:	cf 93       	push	r28
    5260:	df 93       	push	r29
    5262:	e0 91 42 0f 	lds	r30, 0x0F42	; 0x800f42 <__iob+0x2>
    5266:	f0 91 43 0f 	lds	r31, 0x0F43	; 0x800f43 <__iob+0x3>
    526a:	23 81       	ldd	r18, Z+3	; 0x03
    526c:	21 ff       	sbrs	r18, 1
    526e:	1b c0       	rjmp	.+54     	; 0x52a6 <puts+0x4c>
    5270:	8c 01       	movw	r16, r24
    5272:	d0 e0       	ldi	r29, 0x00	; 0
    5274:	c0 e0       	ldi	r28, 0x00	; 0
    5276:	f8 01       	movw	r30, r16
    5278:	81 91       	ld	r24, Z+
    527a:	8f 01       	movw	r16, r30
    527c:	60 91 42 0f 	lds	r22, 0x0F42	; 0x800f42 <__iob+0x2>
    5280:	70 91 43 0f 	lds	r23, 0x0F43	; 0x800f43 <__iob+0x3>
    5284:	db 01       	movw	r26, r22
    5286:	18 96       	adiw	r26, 0x08	; 8
    5288:	ed 91       	ld	r30, X+
    528a:	fc 91       	ld	r31, X
    528c:	19 97       	sbiw	r26, 0x09	; 9
    528e:	88 23       	and	r24, r24
    5290:	31 f0       	breq	.+12     	; 0x529e <puts+0x44>
    5292:	19 95       	eicall
    5294:	89 2b       	or	r24, r25
    5296:	79 f3       	breq	.-34     	; 0x5276 <puts+0x1c>
    5298:	df ef       	ldi	r29, 0xFF	; 255
    529a:	cf ef       	ldi	r28, 0xFF	; 255
    529c:	ec cf       	rjmp	.-40     	; 0x5276 <puts+0x1c>
    529e:	8a e0       	ldi	r24, 0x0A	; 10
    52a0:	19 95       	eicall
    52a2:	89 2b       	or	r24, r25
    52a4:	19 f0       	breq	.+6      	; 0x52ac <puts+0x52>
    52a6:	8f ef       	ldi	r24, 0xFF	; 255
    52a8:	9f ef       	ldi	r25, 0xFF	; 255
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <puts+0x56>
    52ac:	8d 2f       	mov	r24, r29
    52ae:	9c 2f       	mov	r25, r28
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	0f 91       	pop	r16
    52b8:	08 95       	ret

000052ba <vfprintf>:
    52ba:	2f 92       	push	r2
    52bc:	3f 92       	push	r3
    52be:	4f 92       	push	r4
    52c0:	5f 92       	push	r5
    52c2:	6f 92       	push	r6
    52c4:	7f 92       	push	r7
    52c6:	8f 92       	push	r8
    52c8:	9f 92       	push	r9
    52ca:	af 92       	push	r10
    52cc:	bf 92       	push	r11
    52ce:	cf 92       	push	r12
    52d0:	df 92       	push	r13
    52d2:	ef 92       	push	r14
    52d4:	ff 92       	push	r15
    52d6:	0f 93       	push	r16
    52d8:	1f 93       	push	r17
    52da:	cf 93       	push	r28
    52dc:	df 93       	push	r29
    52de:	cd b7       	in	r28, 0x3d	; 61
    52e0:	de b7       	in	r29, 0x3e	; 62
    52e2:	2b 97       	sbiw	r28, 0x0b	; 11
    52e4:	0f b6       	in	r0, 0x3f	; 63
    52e6:	f8 94       	cli
    52e8:	de bf       	out	0x3e, r29	; 62
    52ea:	0f be       	out	0x3f, r0	; 63
    52ec:	cd bf       	out	0x3d, r28	; 61
    52ee:	6c 01       	movw	r12, r24
    52f0:	7b 01       	movw	r14, r22
    52f2:	8a 01       	movw	r16, r20
    52f4:	fc 01       	movw	r30, r24
    52f6:	17 82       	std	Z+7, r1	; 0x07
    52f8:	16 82       	std	Z+6, r1	; 0x06
    52fa:	83 81       	ldd	r24, Z+3	; 0x03
    52fc:	81 ff       	sbrs	r24, 1
    52fe:	bf c1       	rjmp	.+894    	; 0x567e <vfprintf+0x3c4>
    5300:	ce 01       	movw	r24, r28
    5302:	01 96       	adiw	r24, 0x01	; 1
    5304:	3c 01       	movw	r6, r24
    5306:	f6 01       	movw	r30, r12
    5308:	93 81       	ldd	r25, Z+3	; 0x03
    530a:	f7 01       	movw	r30, r14
    530c:	93 fd       	sbrc	r25, 3
    530e:	85 91       	lpm	r24, Z+
    5310:	93 ff       	sbrs	r25, 3
    5312:	81 91       	ld	r24, Z+
    5314:	7f 01       	movw	r14, r30
    5316:	88 23       	and	r24, r24
    5318:	09 f4       	brne	.+2      	; 0x531c <vfprintf+0x62>
    531a:	ad c1       	rjmp	.+858    	; 0x5676 <vfprintf+0x3bc>
    531c:	85 32       	cpi	r24, 0x25	; 37
    531e:	39 f4       	brne	.+14     	; 0x532e <vfprintf+0x74>
    5320:	93 fd       	sbrc	r25, 3
    5322:	85 91       	lpm	r24, Z+
    5324:	93 ff       	sbrs	r25, 3
    5326:	81 91       	ld	r24, Z+
    5328:	7f 01       	movw	r14, r30
    532a:	85 32       	cpi	r24, 0x25	; 37
    532c:	21 f4       	brne	.+8      	; 0x5336 <vfprintf+0x7c>
    532e:	b6 01       	movw	r22, r12
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	d6 d1       	rcall	.+940    	; 0x56e0 <fputc>
    5334:	e8 cf       	rjmp	.-48     	; 0x5306 <vfprintf+0x4c>
    5336:	91 2c       	mov	r9, r1
    5338:	21 2c       	mov	r2, r1
    533a:	31 2c       	mov	r3, r1
    533c:	ff e1       	ldi	r31, 0x1F	; 31
    533e:	f3 15       	cp	r31, r3
    5340:	d8 f0       	brcs	.+54     	; 0x5378 <vfprintf+0xbe>
    5342:	8b 32       	cpi	r24, 0x2B	; 43
    5344:	79 f0       	breq	.+30     	; 0x5364 <vfprintf+0xaa>
    5346:	38 f4       	brcc	.+14     	; 0x5356 <vfprintf+0x9c>
    5348:	80 32       	cpi	r24, 0x20	; 32
    534a:	79 f0       	breq	.+30     	; 0x536a <vfprintf+0xb0>
    534c:	83 32       	cpi	r24, 0x23	; 35
    534e:	a1 f4       	brne	.+40     	; 0x5378 <vfprintf+0xbe>
    5350:	23 2d       	mov	r18, r3
    5352:	20 61       	ori	r18, 0x10	; 16
    5354:	1d c0       	rjmp	.+58     	; 0x5390 <vfprintf+0xd6>
    5356:	8d 32       	cpi	r24, 0x2D	; 45
    5358:	61 f0       	breq	.+24     	; 0x5372 <vfprintf+0xb8>
    535a:	80 33       	cpi	r24, 0x30	; 48
    535c:	69 f4       	brne	.+26     	; 0x5378 <vfprintf+0xbe>
    535e:	23 2d       	mov	r18, r3
    5360:	21 60       	ori	r18, 0x01	; 1
    5362:	16 c0       	rjmp	.+44     	; 0x5390 <vfprintf+0xd6>
    5364:	83 2d       	mov	r24, r3
    5366:	82 60       	ori	r24, 0x02	; 2
    5368:	38 2e       	mov	r3, r24
    536a:	e3 2d       	mov	r30, r3
    536c:	e4 60       	ori	r30, 0x04	; 4
    536e:	3e 2e       	mov	r3, r30
    5370:	2a c0       	rjmp	.+84     	; 0x53c6 <vfprintf+0x10c>
    5372:	f3 2d       	mov	r31, r3
    5374:	f8 60       	ori	r31, 0x08	; 8
    5376:	1d c0       	rjmp	.+58     	; 0x53b2 <vfprintf+0xf8>
    5378:	37 fc       	sbrc	r3, 7
    537a:	2d c0       	rjmp	.+90     	; 0x53d6 <vfprintf+0x11c>
    537c:	20 ed       	ldi	r18, 0xD0	; 208
    537e:	28 0f       	add	r18, r24
    5380:	2a 30       	cpi	r18, 0x0A	; 10
    5382:	40 f0       	brcs	.+16     	; 0x5394 <vfprintf+0xda>
    5384:	8e 32       	cpi	r24, 0x2E	; 46
    5386:	b9 f4       	brne	.+46     	; 0x53b6 <vfprintf+0xfc>
    5388:	36 fc       	sbrc	r3, 6
    538a:	75 c1       	rjmp	.+746    	; 0x5676 <vfprintf+0x3bc>
    538c:	23 2d       	mov	r18, r3
    538e:	20 64       	ori	r18, 0x40	; 64
    5390:	32 2e       	mov	r3, r18
    5392:	19 c0       	rjmp	.+50     	; 0x53c6 <vfprintf+0x10c>
    5394:	36 fe       	sbrs	r3, 6
    5396:	06 c0       	rjmp	.+12     	; 0x53a4 <vfprintf+0xea>
    5398:	8a e0       	ldi	r24, 0x0A	; 10
    539a:	98 9e       	mul	r9, r24
    539c:	20 0d       	add	r18, r0
    539e:	11 24       	eor	r1, r1
    53a0:	92 2e       	mov	r9, r18
    53a2:	11 c0       	rjmp	.+34     	; 0x53c6 <vfprintf+0x10c>
    53a4:	ea e0       	ldi	r30, 0x0A	; 10
    53a6:	2e 9e       	mul	r2, r30
    53a8:	20 0d       	add	r18, r0
    53aa:	11 24       	eor	r1, r1
    53ac:	22 2e       	mov	r2, r18
    53ae:	f3 2d       	mov	r31, r3
    53b0:	f0 62       	ori	r31, 0x20	; 32
    53b2:	3f 2e       	mov	r3, r31
    53b4:	08 c0       	rjmp	.+16     	; 0x53c6 <vfprintf+0x10c>
    53b6:	8c 36       	cpi	r24, 0x6C	; 108
    53b8:	21 f4       	brne	.+8      	; 0x53c2 <vfprintf+0x108>
    53ba:	83 2d       	mov	r24, r3
    53bc:	80 68       	ori	r24, 0x80	; 128
    53be:	38 2e       	mov	r3, r24
    53c0:	02 c0       	rjmp	.+4      	; 0x53c6 <vfprintf+0x10c>
    53c2:	88 36       	cpi	r24, 0x68	; 104
    53c4:	41 f4       	brne	.+16     	; 0x53d6 <vfprintf+0x11c>
    53c6:	f7 01       	movw	r30, r14
    53c8:	93 fd       	sbrc	r25, 3
    53ca:	85 91       	lpm	r24, Z+
    53cc:	93 ff       	sbrs	r25, 3
    53ce:	81 91       	ld	r24, Z+
    53d0:	7f 01       	movw	r14, r30
    53d2:	81 11       	cpse	r24, r1
    53d4:	b3 cf       	rjmp	.-154    	; 0x533c <vfprintf+0x82>
    53d6:	98 2f       	mov	r25, r24
    53d8:	9f 7d       	andi	r25, 0xDF	; 223
    53da:	95 54       	subi	r25, 0x45	; 69
    53dc:	93 30       	cpi	r25, 0x03	; 3
    53de:	28 f4       	brcc	.+10     	; 0x53ea <vfprintf+0x130>
    53e0:	0c 5f       	subi	r16, 0xFC	; 252
    53e2:	1f 4f       	sbci	r17, 0xFF	; 255
    53e4:	9f e3       	ldi	r25, 0x3F	; 63
    53e6:	99 83       	std	Y+1, r25	; 0x01
    53e8:	0d c0       	rjmp	.+26     	; 0x5404 <vfprintf+0x14a>
    53ea:	83 36       	cpi	r24, 0x63	; 99
    53ec:	31 f0       	breq	.+12     	; 0x53fa <vfprintf+0x140>
    53ee:	83 37       	cpi	r24, 0x73	; 115
    53f0:	71 f0       	breq	.+28     	; 0x540e <vfprintf+0x154>
    53f2:	83 35       	cpi	r24, 0x53	; 83
    53f4:	09 f0       	breq	.+2      	; 0x53f8 <vfprintf+0x13e>
    53f6:	55 c0       	rjmp	.+170    	; 0x54a2 <vfprintf+0x1e8>
    53f8:	20 c0       	rjmp	.+64     	; 0x543a <vfprintf+0x180>
    53fa:	f8 01       	movw	r30, r16
    53fc:	80 81       	ld	r24, Z
    53fe:	89 83       	std	Y+1, r24	; 0x01
    5400:	0e 5f       	subi	r16, 0xFE	; 254
    5402:	1f 4f       	sbci	r17, 0xFF	; 255
    5404:	88 24       	eor	r8, r8
    5406:	83 94       	inc	r8
    5408:	91 2c       	mov	r9, r1
    540a:	53 01       	movw	r10, r6
    540c:	12 c0       	rjmp	.+36     	; 0x5432 <vfprintf+0x178>
    540e:	28 01       	movw	r4, r16
    5410:	f2 e0       	ldi	r31, 0x02	; 2
    5412:	4f 0e       	add	r4, r31
    5414:	51 1c       	adc	r5, r1
    5416:	f8 01       	movw	r30, r16
    5418:	a0 80       	ld	r10, Z
    541a:	b1 80       	ldd	r11, Z+1	; 0x01
    541c:	36 fe       	sbrs	r3, 6
    541e:	03 c0       	rjmp	.+6      	; 0x5426 <vfprintf+0x16c>
    5420:	69 2d       	mov	r22, r9
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	02 c0       	rjmp	.+4      	; 0x542a <vfprintf+0x170>
    5426:	6f ef       	ldi	r22, 0xFF	; 255
    5428:	7f ef       	ldi	r23, 0xFF	; 255
    542a:	c5 01       	movw	r24, r10
    542c:	4e d1       	rcall	.+668    	; 0x56ca <strnlen>
    542e:	4c 01       	movw	r8, r24
    5430:	82 01       	movw	r16, r4
    5432:	f3 2d       	mov	r31, r3
    5434:	ff 77       	andi	r31, 0x7F	; 127
    5436:	3f 2e       	mov	r3, r31
    5438:	15 c0       	rjmp	.+42     	; 0x5464 <vfprintf+0x1aa>
    543a:	28 01       	movw	r4, r16
    543c:	22 e0       	ldi	r18, 0x02	; 2
    543e:	42 0e       	add	r4, r18
    5440:	51 1c       	adc	r5, r1
    5442:	f8 01       	movw	r30, r16
    5444:	a0 80       	ld	r10, Z
    5446:	b1 80       	ldd	r11, Z+1	; 0x01
    5448:	36 fe       	sbrs	r3, 6
    544a:	03 c0       	rjmp	.+6      	; 0x5452 <vfprintf+0x198>
    544c:	69 2d       	mov	r22, r9
    544e:	70 e0       	ldi	r23, 0x00	; 0
    5450:	02 c0       	rjmp	.+4      	; 0x5456 <vfprintf+0x19c>
    5452:	6f ef       	ldi	r22, 0xFF	; 255
    5454:	7f ef       	ldi	r23, 0xFF	; 255
    5456:	c5 01       	movw	r24, r10
    5458:	2d d1       	rcall	.+602    	; 0x56b4 <strnlen_P>
    545a:	4c 01       	movw	r8, r24
    545c:	f3 2d       	mov	r31, r3
    545e:	f0 68       	ori	r31, 0x80	; 128
    5460:	3f 2e       	mov	r3, r31
    5462:	82 01       	movw	r16, r4
    5464:	33 fc       	sbrc	r3, 3
    5466:	19 c0       	rjmp	.+50     	; 0x549a <vfprintf+0x1e0>
    5468:	82 2d       	mov	r24, r2
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	88 16       	cp	r8, r24
    546e:	99 06       	cpc	r9, r25
    5470:	a0 f4       	brcc	.+40     	; 0x549a <vfprintf+0x1e0>
    5472:	b6 01       	movw	r22, r12
    5474:	80 e2       	ldi	r24, 0x20	; 32
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	33 d1       	rcall	.+614    	; 0x56e0 <fputc>
    547a:	2a 94       	dec	r2
    547c:	f5 cf       	rjmp	.-22     	; 0x5468 <vfprintf+0x1ae>
    547e:	f5 01       	movw	r30, r10
    5480:	37 fc       	sbrc	r3, 7
    5482:	85 91       	lpm	r24, Z+
    5484:	37 fe       	sbrs	r3, 7
    5486:	81 91       	ld	r24, Z+
    5488:	5f 01       	movw	r10, r30
    548a:	b6 01       	movw	r22, r12
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	28 d1       	rcall	.+592    	; 0x56e0 <fputc>
    5490:	21 10       	cpse	r2, r1
    5492:	2a 94       	dec	r2
    5494:	21 e0       	ldi	r18, 0x01	; 1
    5496:	82 1a       	sub	r8, r18
    5498:	91 08       	sbc	r9, r1
    549a:	81 14       	cp	r8, r1
    549c:	91 04       	cpc	r9, r1
    549e:	79 f7       	brne	.-34     	; 0x547e <vfprintf+0x1c4>
    54a0:	e1 c0       	rjmp	.+450    	; 0x5664 <vfprintf+0x3aa>
    54a2:	84 36       	cpi	r24, 0x64	; 100
    54a4:	11 f0       	breq	.+4      	; 0x54aa <vfprintf+0x1f0>
    54a6:	89 36       	cpi	r24, 0x69	; 105
    54a8:	39 f5       	brne	.+78     	; 0x54f8 <vfprintf+0x23e>
    54aa:	f8 01       	movw	r30, r16
    54ac:	37 fe       	sbrs	r3, 7
    54ae:	07 c0       	rjmp	.+14     	; 0x54be <vfprintf+0x204>
    54b0:	60 81       	ld	r22, Z
    54b2:	71 81       	ldd	r23, Z+1	; 0x01
    54b4:	82 81       	ldd	r24, Z+2	; 0x02
    54b6:	93 81       	ldd	r25, Z+3	; 0x03
    54b8:	0c 5f       	subi	r16, 0xFC	; 252
    54ba:	1f 4f       	sbci	r17, 0xFF	; 255
    54bc:	08 c0       	rjmp	.+16     	; 0x54ce <vfprintf+0x214>
    54be:	60 81       	ld	r22, Z
    54c0:	71 81       	ldd	r23, Z+1	; 0x01
    54c2:	07 2e       	mov	r0, r23
    54c4:	00 0c       	add	r0, r0
    54c6:	88 0b       	sbc	r24, r24
    54c8:	99 0b       	sbc	r25, r25
    54ca:	0e 5f       	subi	r16, 0xFE	; 254
    54cc:	1f 4f       	sbci	r17, 0xFF	; 255
    54ce:	f3 2d       	mov	r31, r3
    54d0:	ff 76       	andi	r31, 0x6F	; 111
    54d2:	3f 2e       	mov	r3, r31
    54d4:	97 ff       	sbrs	r25, 7
    54d6:	09 c0       	rjmp	.+18     	; 0x54ea <vfprintf+0x230>
    54d8:	90 95       	com	r25
    54da:	80 95       	com	r24
    54dc:	70 95       	com	r23
    54de:	61 95       	neg	r22
    54e0:	7f 4f       	sbci	r23, 0xFF	; 255
    54e2:	8f 4f       	sbci	r24, 0xFF	; 255
    54e4:	9f 4f       	sbci	r25, 0xFF	; 255
    54e6:	f0 68       	ori	r31, 0x80	; 128
    54e8:	3f 2e       	mov	r3, r31
    54ea:	2a e0       	ldi	r18, 0x0A	; 10
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	a3 01       	movw	r20, r6
    54f0:	33 d1       	rcall	.+614    	; 0x5758 <__ultoa_invert>
    54f2:	88 2e       	mov	r8, r24
    54f4:	86 18       	sub	r8, r6
    54f6:	44 c0       	rjmp	.+136    	; 0x5580 <vfprintf+0x2c6>
    54f8:	85 37       	cpi	r24, 0x75	; 117
    54fa:	31 f4       	brne	.+12     	; 0x5508 <vfprintf+0x24e>
    54fc:	23 2d       	mov	r18, r3
    54fe:	2f 7e       	andi	r18, 0xEF	; 239
    5500:	b2 2e       	mov	r11, r18
    5502:	2a e0       	ldi	r18, 0x0A	; 10
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	25 c0       	rjmp	.+74     	; 0x5552 <vfprintf+0x298>
    5508:	93 2d       	mov	r25, r3
    550a:	99 7f       	andi	r25, 0xF9	; 249
    550c:	b9 2e       	mov	r11, r25
    550e:	8f 36       	cpi	r24, 0x6F	; 111
    5510:	c1 f0       	breq	.+48     	; 0x5542 <vfprintf+0x288>
    5512:	18 f4       	brcc	.+6      	; 0x551a <vfprintf+0x260>
    5514:	88 35       	cpi	r24, 0x58	; 88
    5516:	79 f0       	breq	.+30     	; 0x5536 <vfprintf+0x27c>
    5518:	ae c0       	rjmp	.+348    	; 0x5676 <vfprintf+0x3bc>
    551a:	80 37       	cpi	r24, 0x70	; 112
    551c:	19 f0       	breq	.+6      	; 0x5524 <vfprintf+0x26a>
    551e:	88 37       	cpi	r24, 0x78	; 120
    5520:	21 f0       	breq	.+8      	; 0x552a <vfprintf+0x270>
    5522:	a9 c0       	rjmp	.+338    	; 0x5676 <vfprintf+0x3bc>
    5524:	e9 2f       	mov	r30, r25
    5526:	e0 61       	ori	r30, 0x10	; 16
    5528:	be 2e       	mov	r11, r30
    552a:	b4 fe       	sbrs	r11, 4
    552c:	0d c0       	rjmp	.+26     	; 0x5548 <vfprintf+0x28e>
    552e:	fb 2d       	mov	r31, r11
    5530:	f4 60       	ori	r31, 0x04	; 4
    5532:	bf 2e       	mov	r11, r31
    5534:	09 c0       	rjmp	.+18     	; 0x5548 <vfprintf+0x28e>
    5536:	34 fe       	sbrs	r3, 4
    5538:	0a c0       	rjmp	.+20     	; 0x554e <vfprintf+0x294>
    553a:	29 2f       	mov	r18, r25
    553c:	26 60       	ori	r18, 0x06	; 6
    553e:	b2 2e       	mov	r11, r18
    5540:	06 c0       	rjmp	.+12     	; 0x554e <vfprintf+0x294>
    5542:	28 e0       	ldi	r18, 0x08	; 8
    5544:	30 e0       	ldi	r19, 0x00	; 0
    5546:	05 c0       	rjmp	.+10     	; 0x5552 <vfprintf+0x298>
    5548:	20 e1       	ldi	r18, 0x10	; 16
    554a:	30 e0       	ldi	r19, 0x00	; 0
    554c:	02 c0       	rjmp	.+4      	; 0x5552 <vfprintf+0x298>
    554e:	20 e1       	ldi	r18, 0x10	; 16
    5550:	32 e0       	ldi	r19, 0x02	; 2
    5552:	f8 01       	movw	r30, r16
    5554:	b7 fe       	sbrs	r11, 7
    5556:	07 c0       	rjmp	.+14     	; 0x5566 <vfprintf+0x2ac>
    5558:	60 81       	ld	r22, Z
    555a:	71 81       	ldd	r23, Z+1	; 0x01
    555c:	82 81       	ldd	r24, Z+2	; 0x02
    555e:	93 81       	ldd	r25, Z+3	; 0x03
    5560:	0c 5f       	subi	r16, 0xFC	; 252
    5562:	1f 4f       	sbci	r17, 0xFF	; 255
    5564:	06 c0       	rjmp	.+12     	; 0x5572 <vfprintf+0x2b8>
    5566:	60 81       	ld	r22, Z
    5568:	71 81       	ldd	r23, Z+1	; 0x01
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	0e 5f       	subi	r16, 0xFE	; 254
    5570:	1f 4f       	sbci	r17, 0xFF	; 255
    5572:	a3 01       	movw	r20, r6
    5574:	f1 d0       	rcall	.+482    	; 0x5758 <__ultoa_invert>
    5576:	88 2e       	mov	r8, r24
    5578:	86 18       	sub	r8, r6
    557a:	fb 2d       	mov	r31, r11
    557c:	ff 77       	andi	r31, 0x7F	; 127
    557e:	3f 2e       	mov	r3, r31
    5580:	36 fe       	sbrs	r3, 6
    5582:	0d c0       	rjmp	.+26     	; 0x559e <vfprintf+0x2e4>
    5584:	23 2d       	mov	r18, r3
    5586:	2e 7f       	andi	r18, 0xFE	; 254
    5588:	a2 2e       	mov	r10, r18
    558a:	89 14       	cp	r8, r9
    558c:	58 f4       	brcc	.+22     	; 0x55a4 <vfprintf+0x2ea>
    558e:	34 fe       	sbrs	r3, 4
    5590:	0b c0       	rjmp	.+22     	; 0x55a8 <vfprintf+0x2ee>
    5592:	32 fc       	sbrc	r3, 2
    5594:	09 c0       	rjmp	.+18     	; 0x55a8 <vfprintf+0x2ee>
    5596:	83 2d       	mov	r24, r3
    5598:	8e 7e       	andi	r24, 0xEE	; 238
    559a:	a8 2e       	mov	r10, r24
    559c:	05 c0       	rjmp	.+10     	; 0x55a8 <vfprintf+0x2ee>
    559e:	b8 2c       	mov	r11, r8
    55a0:	a3 2c       	mov	r10, r3
    55a2:	03 c0       	rjmp	.+6      	; 0x55aa <vfprintf+0x2f0>
    55a4:	b8 2c       	mov	r11, r8
    55a6:	01 c0       	rjmp	.+2      	; 0x55aa <vfprintf+0x2f0>
    55a8:	b9 2c       	mov	r11, r9
    55aa:	a4 fe       	sbrs	r10, 4
    55ac:	0f c0       	rjmp	.+30     	; 0x55cc <vfprintf+0x312>
    55ae:	fe 01       	movw	r30, r28
    55b0:	e8 0d       	add	r30, r8
    55b2:	f1 1d       	adc	r31, r1
    55b4:	80 81       	ld	r24, Z
    55b6:	80 33       	cpi	r24, 0x30	; 48
    55b8:	21 f4       	brne	.+8      	; 0x55c2 <vfprintf+0x308>
    55ba:	9a 2d       	mov	r25, r10
    55bc:	99 7e       	andi	r25, 0xE9	; 233
    55be:	a9 2e       	mov	r10, r25
    55c0:	09 c0       	rjmp	.+18     	; 0x55d4 <vfprintf+0x31a>
    55c2:	a2 fe       	sbrs	r10, 2
    55c4:	06 c0       	rjmp	.+12     	; 0x55d2 <vfprintf+0x318>
    55c6:	b3 94       	inc	r11
    55c8:	b3 94       	inc	r11
    55ca:	04 c0       	rjmp	.+8      	; 0x55d4 <vfprintf+0x31a>
    55cc:	8a 2d       	mov	r24, r10
    55ce:	86 78       	andi	r24, 0x86	; 134
    55d0:	09 f0       	breq	.+2      	; 0x55d4 <vfprintf+0x31a>
    55d2:	b3 94       	inc	r11
    55d4:	a3 fc       	sbrc	r10, 3
    55d6:	10 c0       	rjmp	.+32     	; 0x55f8 <vfprintf+0x33e>
    55d8:	a0 fe       	sbrs	r10, 0
    55da:	06 c0       	rjmp	.+12     	; 0x55e8 <vfprintf+0x32e>
    55dc:	b2 14       	cp	r11, r2
    55de:	80 f4       	brcc	.+32     	; 0x5600 <vfprintf+0x346>
    55e0:	28 0c       	add	r2, r8
    55e2:	92 2c       	mov	r9, r2
    55e4:	9b 18       	sub	r9, r11
    55e6:	0d c0       	rjmp	.+26     	; 0x5602 <vfprintf+0x348>
    55e8:	b2 14       	cp	r11, r2
    55ea:	58 f4       	brcc	.+22     	; 0x5602 <vfprintf+0x348>
    55ec:	b6 01       	movw	r22, r12
    55ee:	80 e2       	ldi	r24, 0x20	; 32
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	76 d0       	rcall	.+236    	; 0x56e0 <fputc>
    55f4:	b3 94       	inc	r11
    55f6:	f8 cf       	rjmp	.-16     	; 0x55e8 <vfprintf+0x32e>
    55f8:	b2 14       	cp	r11, r2
    55fa:	18 f4       	brcc	.+6      	; 0x5602 <vfprintf+0x348>
    55fc:	2b 18       	sub	r2, r11
    55fe:	02 c0       	rjmp	.+4      	; 0x5604 <vfprintf+0x34a>
    5600:	98 2c       	mov	r9, r8
    5602:	21 2c       	mov	r2, r1
    5604:	a4 fe       	sbrs	r10, 4
    5606:	0f c0       	rjmp	.+30     	; 0x5626 <vfprintf+0x36c>
    5608:	b6 01       	movw	r22, r12
    560a:	80 e3       	ldi	r24, 0x30	; 48
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	68 d0       	rcall	.+208    	; 0x56e0 <fputc>
    5610:	a2 fe       	sbrs	r10, 2
    5612:	16 c0       	rjmp	.+44     	; 0x5640 <vfprintf+0x386>
    5614:	a1 fc       	sbrc	r10, 1
    5616:	03 c0       	rjmp	.+6      	; 0x561e <vfprintf+0x364>
    5618:	88 e7       	ldi	r24, 0x78	; 120
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	02 c0       	rjmp	.+4      	; 0x5622 <vfprintf+0x368>
    561e:	88 e5       	ldi	r24, 0x58	; 88
    5620:	90 e0       	ldi	r25, 0x00	; 0
    5622:	b6 01       	movw	r22, r12
    5624:	0c c0       	rjmp	.+24     	; 0x563e <vfprintf+0x384>
    5626:	8a 2d       	mov	r24, r10
    5628:	86 78       	andi	r24, 0x86	; 134
    562a:	51 f0       	breq	.+20     	; 0x5640 <vfprintf+0x386>
    562c:	a1 fe       	sbrs	r10, 1
    562e:	02 c0       	rjmp	.+4      	; 0x5634 <vfprintf+0x37a>
    5630:	8b e2       	ldi	r24, 0x2B	; 43
    5632:	01 c0       	rjmp	.+2      	; 0x5636 <vfprintf+0x37c>
    5634:	80 e2       	ldi	r24, 0x20	; 32
    5636:	a7 fc       	sbrc	r10, 7
    5638:	8d e2       	ldi	r24, 0x2D	; 45
    563a:	b6 01       	movw	r22, r12
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	50 d0       	rcall	.+160    	; 0x56e0 <fputc>
    5640:	89 14       	cp	r8, r9
    5642:	30 f4       	brcc	.+12     	; 0x5650 <vfprintf+0x396>
    5644:	b6 01       	movw	r22, r12
    5646:	80 e3       	ldi	r24, 0x30	; 48
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	4a d0       	rcall	.+148    	; 0x56e0 <fputc>
    564c:	9a 94       	dec	r9
    564e:	f8 cf       	rjmp	.-16     	; 0x5640 <vfprintf+0x386>
    5650:	8a 94       	dec	r8
    5652:	f3 01       	movw	r30, r6
    5654:	e8 0d       	add	r30, r8
    5656:	f1 1d       	adc	r31, r1
    5658:	80 81       	ld	r24, Z
    565a:	b6 01       	movw	r22, r12
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	40 d0       	rcall	.+128    	; 0x56e0 <fputc>
    5660:	81 10       	cpse	r8, r1
    5662:	f6 cf       	rjmp	.-20     	; 0x5650 <vfprintf+0x396>
    5664:	22 20       	and	r2, r2
    5666:	09 f4       	brne	.+2      	; 0x566a <vfprintf+0x3b0>
    5668:	4e ce       	rjmp	.-868    	; 0x5306 <vfprintf+0x4c>
    566a:	b6 01       	movw	r22, r12
    566c:	80 e2       	ldi	r24, 0x20	; 32
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	37 d0       	rcall	.+110    	; 0x56e0 <fputc>
    5672:	2a 94       	dec	r2
    5674:	f7 cf       	rjmp	.-18     	; 0x5664 <vfprintf+0x3aa>
    5676:	f6 01       	movw	r30, r12
    5678:	86 81       	ldd	r24, Z+6	; 0x06
    567a:	97 81       	ldd	r25, Z+7	; 0x07
    567c:	02 c0       	rjmp	.+4      	; 0x5682 <vfprintf+0x3c8>
    567e:	8f ef       	ldi	r24, 0xFF	; 255
    5680:	9f ef       	ldi	r25, 0xFF	; 255
    5682:	2b 96       	adiw	r28, 0x0b	; 11
    5684:	0f b6       	in	r0, 0x3f	; 63
    5686:	f8 94       	cli
    5688:	de bf       	out	0x3e, r29	; 62
    568a:	0f be       	out	0x3f, r0	; 63
    568c:	cd bf       	out	0x3d, r28	; 61
    568e:	df 91       	pop	r29
    5690:	cf 91       	pop	r28
    5692:	1f 91       	pop	r17
    5694:	0f 91       	pop	r16
    5696:	ff 90       	pop	r15
    5698:	ef 90       	pop	r14
    569a:	df 90       	pop	r13
    569c:	cf 90       	pop	r12
    569e:	bf 90       	pop	r11
    56a0:	af 90       	pop	r10
    56a2:	9f 90       	pop	r9
    56a4:	8f 90       	pop	r8
    56a6:	7f 90       	pop	r7
    56a8:	6f 90       	pop	r6
    56aa:	5f 90       	pop	r5
    56ac:	4f 90       	pop	r4
    56ae:	3f 90       	pop	r3
    56b0:	2f 90       	pop	r2
    56b2:	08 95       	ret

000056b4 <strnlen_P>:
    56b4:	fc 01       	movw	r30, r24
    56b6:	05 90       	lpm	r0, Z+
    56b8:	61 50       	subi	r22, 0x01	; 1
    56ba:	70 40       	sbci	r23, 0x00	; 0
    56bc:	01 10       	cpse	r0, r1
    56be:	d8 f7       	brcc	.-10     	; 0x56b6 <strnlen_P+0x2>
    56c0:	80 95       	com	r24
    56c2:	90 95       	com	r25
    56c4:	8e 0f       	add	r24, r30
    56c6:	9f 1f       	adc	r25, r31
    56c8:	08 95       	ret

000056ca <strnlen>:
    56ca:	fc 01       	movw	r30, r24
    56cc:	61 50       	subi	r22, 0x01	; 1
    56ce:	70 40       	sbci	r23, 0x00	; 0
    56d0:	01 90       	ld	r0, Z+
    56d2:	01 10       	cpse	r0, r1
    56d4:	d8 f7       	brcc	.-10     	; 0x56cc <strnlen+0x2>
    56d6:	80 95       	com	r24
    56d8:	90 95       	com	r25
    56da:	8e 0f       	add	r24, r30
    56dc:	9f 1f       	adc	r25, r31
    56de:	08 95       	ret

000056e0 <fputc>:
    56e0:	0f 93       	push	r16
    56e2:	1f 93       	push	r17
    56e4:	cf 93       	push	r28
    56e6:	df 93       	push	r29
    56e8:	fb 01       	movw	r30, r22
    56ea:	23 81       	ldd	r18, Z+3	; 0x03
    56ec:	21 fd       	sbrc	r18, 1
    56ee:	03 c0       	rjmp	.+6      	; 0x56f6 <fputc+0x16>
    56f0:	8f ef       	ldi	r24, 0xFF	; 255
    56f2:	9f ef       	ldi	r25, 0xFF	; 255
    56f4:	2c c0       	rjmp	.+88     	; 0x574e <fputc+0x6e>
    56f6:	22 ff       	sbrs	r18, 2
    56f8:	16 c0       	rjmp	.+44     	; 0x5726 <fputc+0x46>
    56fa:	46 81       	ldd	r20, Z+6	; 0x06
    56fc:	57 81       	ldd	r21, Z+7	; 0x07
    56fe:	24 81       	ldd	r18, Z+4	; 0x04
    5700:	35 81       	ldd	r19, Z+5	; 0x05
    5702:	42 17       	cp	r20, r18
    5704:	53 07       	cpc	r21, r19
    5706:	44 f4       	brge	.+16     	; 0x5718 <fputc+0x38>
    5708:	a0 81       	ld	r26, Z
    570a:	b1 81       	ldd	r27, Z+1	; 0x01
    570c:	9d 01       	movw	r18, r26
    570e:	2f 5f       	subi	r18, 0xFF	; 255
    5710:	3f 4f       	sbci	r19, 0xFF	; 255
    5712:	31 83       	std	Z+1, r19	; 0x01
    5714:	20 83       	st	Z, r18
    5716:	8c 93       	st	X, r24
    5718:	26 81       	ldd	r18, Z+6	; 0x06
    571a:	37 81       	ldd	r19, Z+7	; 0x07
    571c:	2f 5f       	subi	r18, 0xFF	; 255
    571e:	3f 4f       	sbci	r19, 0xFF	; 255
    5720:	37 83       	std	Z+7, r19	; 0x07
    5722:	26 83       	std	Z+6, r18	; 0x06
    5724:	14 c0       	rjmp	.+40     	; 0x574e <fputc+0x6e>
    5726:	8b 01       	movw	r16, r22
    5728:	ec 01       	movw	r28, r24
    572a:	fb 01       	movw	r30, r22
    572c:	00 84       	ldd	r0, Z+8	; 0x08
    572e:	f1 85       	ldd	r31, Z+9	; 0x09
    5730:	e0 2d       	mov	r30, r0
    5732:	19 95       	eicall
    5734:	89 2b       	or	r24, r25
    5736:	e1 f6       	brne	.-72     	; 0x56f0 <fputc+0x10>
    5738:	d8 01       	movw	r26, r16
    573a:	16 96       	adiw	r26, 0x06	; 6
    573c:	8d 91       	ld	r24, X+
    573e:	9c 91       	ld	r25, X
    5740:	17 97       	sbiw	r26, 0x07	; 7
    5742:	01 96       	adiw	r24, 0x01	; 1
    5744:	17 96       	adiw	r26, 0x07	; 7
    5746:	9c 93       	st	X, r25
    5748:	8e 93       	st	-X, r24
    574a:	16 97       	sbiw	r26, 0x06	; 6
    574c:	ce 01       	movw	r24, r28
    574e:	df 91       	pop	r29
    5750:	cf 91       	pop	r28
    5752:	1f 91       	pop	r17
    5754:	0f 91       	pop	r16
    5756:	08 95       	ret

00005758 <__ultoa_invert>:
    5758:	fa 01       	movw	r30, r20
    575a:	aa 27       	eor	r26, r26
    575c:	28 30       	cpi	r18, 0x08	; 8
    575e:	51 f1       	breq	.+84     	; 0x57b4 <__ultoa_invert+0x5c>
    5760:	20 31       	cpi	r18, 0x10	; 16
    5762:	81 f1       	breq	.+96     	; 0x57c4 <__ultoa_invert+0x6c>
    5764:	e8 94       	clt
    5766:	6f 93       	push	r22
    5768:	6e 7f       	andi	r22, 0xFE	; 254
    576a:	6e 5f       	subi	r22, 0xFE	; 254
    576c:	7f 4f       	sbci	r23, 0xFF	; 255
    576e:	8f 4f       	sbci	r24, 0xFF	; 255
    5770:	9f 4f       	sbci	r25, 0xFF	; 255
    5772:	af 4f       	sbci	r26, 0xFF	; 255
    5774:	b1 e0       	ldi	r27, 0x01	; 1
    5776:	3e d0       	rcall	.+124    	; 0x57f4 <__ultoa_invert+0x9c>
    5778:	b4 e0       	ldi	r27, 0x04	; 4
    577a:	3c d0       	rcall	.+120    	; 0x57f4 <__ultoa_invert+0x9c>
    577c:	67 0f       	add	r22, r23
    577e:	78 1f       	adc	r23, r24
    5780:	89 1f       	adc	r24, r25
    5782:	9a 1f       	adc	r25, r26
    5784:	a1 1d       	adc	r26, r1
    5786:	68 0f       	add	r22, r24
    5788:	79 1f       	adc	r23, r25
    578a:	8a 1f       	adc	r24, r26
    578c:	91 1d       	adc	r25, r1
    578e:	a1 1d       	adc	r26, r1
    5790:	6a 0f       	add	r22, r26
    5792:	71 1d       	adc	r23, r1
    5794:	81 1d       	adc	r24, r1
    5796:	91 1d       	adc	r25, r1
    5798:	a1 1d       	adc	r26, r1
    579a:	20 d0       	rcall	.+64     	; 0x57dc <__ultoa_invert+0x84>
    579c:	09 f4       	brne	.+2      	; 0x57a0 <__ultoa_invert+0x48>
    579e:	68 94       	set
    57a0:	3f 91       	pop	r19
    57a2:	2a e0       	ldi	r18, 0x0A	; 10
    57a4:	26 9f       	mul	r18, r22
    57a6:	11 24       	eor	r1, r1
    57a8:	30 19       	sub	r19, r0
    57aa:	30 5d       	subi	r19, 0xD0	; 208
    57ac:	31 93       	st	Z+, r19
    57ae:	de f6       	brtc	.-74     	; 0x5766 <__ultoa_invert+0xe>
    57b0:	cf 01       	movw	r24, r30
    57b2:	08 95       	ret
    57b4:	46 2f       	mov	r20, r22
    57b6:	47 70       	andi	r20, 0x07	; 7
    57b8:	40 5d       	subi	r20, 0xD0	; 208
    57ba:	41 93       	st	Z+, r20
    57bc:	b3 e0       	ldi	r27, 0x03	; 3
    57be:	0f d0       	rcall	.+30     	; 0x57de <__ultoa_invert+0x86>
    57c0:	c9 f7       	brne	.-14     	; 0x57b4 <__ultoa_invert+0x5c>
    57c2:	f6 cf       	rjmp	.-20     	; 0x57b0 <__ultoa_invert+0x58>
    57c4:	46 2f       	mov	r20, r22
    57c6:	4f 70       	andi	r20, 0x0F	; 15
    57c8:	40 5d       	subi	r20, 0xD0	; 208
    57ca:	4a 33       	cpi	r20, 0x3A	; 58
    57cc:	18 f0       	brcs	.+6      	; 0x57d4 <__ultoa_invert+0x7c>
    57ce:	49 5d       	subi	r20, 0xD9	; 217
    57d0:	31 fd       	sbrc	r19, 1
    57d2:	40 52       	subi	r20, 0x20	; 32
    57d4:	41 93       	st	Z+, r20
    57d6:	02 d0       	rcall	.+4      	; 0x57dc <__ultoa_invert+0x84>
    57d8:	a9 f7       	brne	.-22     	; 0x57c4 <__ultoa_invert+0x6c>
    57da:	ea cf       	rjmp	.-44     	; 0x57b0 <__ultoa_invert+0x58>
    57dc:	b4 e0       	ldi	r27, 0x04	; 4
    57de:	a6 95       	lsr	r26
    57e0:	97 95       	ror	r25
    57e2:	87 95       	ror	r24
    57e4:	77 95       	ror	r23
    57e6:	67 95       	ror	r22
    57e8:	ba 95       	dec	r27
    57ea:	c9 f7       	brne	.-14     	; 0x57de <__ultoa_invert+0x86>
    57ec:	00 97       	sbiw	r24, 0x00	; 0
    57ee:	61 05       	cpc	r22, r1
    57f0:	71 05       	cpc	r23, r1
    57f2:	08 95       	ret
    57f4:	9b 01       	movw	r18, r22
    57f6:	ac 01       	movw	r20, r24
    57f8:	0a 2e       	mov	r0, r26
    57fa:	06 94       	lsr	r0
    57fc:	57 95       	ror	r21
    57fe:	47 95       	ror	r20
    5800:	37 95       	ror	r19
    5802:	27 95       	ror	r18
    5804:	ba 95       	dec	r27
    5806:	c9 f7       	brne	.-14     	; 0x57fa <__ultoa_invert+0xa2>
    5808:	62 0f       	add	r22, r18
    580a:	73 1f       	adc	r23, r19
    580c:	84 1f       	adc	r24, r20
    580e:	95 1f       	adc	r25, r21
    5810:	a0 1d       	adc	r26, r0
    5812:	08 95       	ret

00005814 <_exit>:
    5814:	f8 94       	cli

00005816 <__stop_program>:
    5816:	ff cf       	rjmp	.-2      	; 0x5816 <__stop_program>
