
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800200  000039f0  00003a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ae5  008002ac  008002ac  00003b30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000874b  00000000  00000000  00004254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026fe  00000000  00000000  0000c99f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044c9  00000000  00000000  0000f09d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001644  00000000  00000000  00013568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dbf  00000000  00000000  00014bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007671  00000000  00000000  0001796b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  0001efdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e6 c5       	rjmp	.+3020   	; 0xbfe <__vector_12>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__vector_25>
      68:	0c 94 af 13 	jmp	0x275e	; 0x275e <__vector_26>
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__vector_36>
      94:	0c 94 45 14 	jmp	0x288a	; 0x288a <__vector_37>
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__vector_39>
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__vector_51>
      d0:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__vector_52>
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_54>
      dc:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__vector_55>
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be 01       	movw	r22, r28
      e6:	be 01       	movw	r22, r28
      e8:	be 01       	movw	r22, r28
      ea:	f8 01       	movw	r30, r16
      ec:	00 02       	muls	r16, r16
      ee:	16 02       	muls	r17, r22
      f0:	be 01       	movw	r22, r28
      f2:	be 01       	movw	r22, r28
      f4:	f8 01       	movw	r30, r16
      f6:	00 02       	muls	r16, r16
      f8:	b3 16       	cp	r11, r19
      fa:	23 17       	cp	r18, r19
      fc:	23 17       	cp	r18, r19
      fe:	23 17       	cp	r18, r19
     100:	23 17       	cp	r18, r19
     102:	23 17       	cp	r18, r19
     104:	23 17       	cp	r18, r19
     106:	23 17       	cp	r18, r19
     108:	b3 16       	cp	r11, r19
     10a:	23 17       	cp	r18, r19
     10c:	23 17       	cp	r18, r19
     10e:	23 17       	cp	r18, r19
     110:	23 17       	cp	r18, r19
     112:	23 17       	cp	r18, r19
     114:	23 17       	cp	r18, r19
     116:	23 17       	cp	r18, r19
     118:	b5 16       	cp	r11, r21
     11a:	23 17       	cp	r18, r19
     11c:	23 17       	cp	r18, r19
     11e:	23 17       	cp	r18, r19
     120:	23 17       	cp	r18, r19
     122:	23 17       	cp	r18, r19
     124:	23 17       	cp	r18, r19
     126:	23 17       	cp	r18, r19
     128:	23 17       	cp	r18, r19
     12a:	23 17       	cp	r18, r19
     12c:	23 17       	cp	r18, r19
     12e:	23 17       	cp	r18, r19
     130:	23 17       	cp	r18, r19
     132:	23 17       	cp	r18, r19
     134:	23 17       	cp	r18, r19
     136:	23 17       	cp	r18, r19
     138:	b5 16       	cp	r11, r21
     13a:	23 17       	cp	r18, r19
     13c:	23 17       	cp	r18, r19
     13e:	23 17       	cp	r18, r19
     140:	23 17       	cp	r18, r19
     142:	23 17       	cp	r18, r19
     144:	23 17       	cp	r18, r19
     146:	23 17       	cp	r18, r19
     148:	23 17       	cp	r18, r19
     14a:	23 17       	cp	r18, r19
     14c:	23 17       	cp	r18, r19
     14e:	23 17       	cp	r18, r19
     150:	23 17       	cp	r18, r19
     152:	23 17       	cp	r18, r19
     154:	23 17       	cp	r18, r19
     156:	23 17       	cp	r18, r19
     158:	1f 17       	cp	r17, r31
     15a:	23 17       	cp	r18, r19
     15c:	23 17       	cp	r18, r19
     15e:	23 17       	cp	r18, r19
     160:	23 17       	cp	r18, r19
     162:	23 17       	cp	r18, r19
     164:	23 17       	cp	r18, r19
     166:	23 17       	cp	r18, r19
     168:	ea 16       	cp	r14, r26
     16a:	23 17       	cp	r18, r19
     16c:	23 17       	cp	r18, r19
     16e:	23 17       	cp	r18, r19
     170:	23 17       	cp	r18, r19
     172:	23 17       	cp	r18, r19
     174:	23 17       	cp	r18, r19
     176:	23 17       	cp	r18, r19
     178:	23 17       	cp	r18, r19
     17a:	23 17       	cp	r18, r19
     17c:	23 17       	cp	r18, r19
     17e:	23 17       	cp	r18, r19
     180:	23 17       	cp	r18, r19
     182:	23 17       	cp	r18, r19
     184:	23 17       	cp	r18, r19
     186:	23 17       	cp	r18, r19
     188:	de 16       	cp	r13, r30
     18a:	23 17       	cp	r18, r19
     18c:	23 17       	cp	r18, r19
     18e:	23 17       	cp	r18, r19
     190:	23 17       	cp	r18, r19
     192:	23 17       	cp	r18, r19
     194:	23 17       	cp	r18, r19
     196:	23 17       	cp	r18, r19
     198:	02 17       	cp	r16, r18

0000019a <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     19a:	05 ea       	ldi	r16, 0xA5	; 165
     19c:	1c e0       	ldi	r17, 0x0C	; 12
     19e:	0f 2e       	mov	r0, r31
     1a0:	f5 ed       	ldi	r31, 0xD5	; 213
     1a2:	ef 2e       	mov	r14, r31
     1a4:	fc e0       	ldi	r31, 0x0C	; 12
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	dc d3       	rcall	.+1976   	; 0x984 <uxListRemove>
     1cc:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 98 0c 	sts	0x0C98, r24	; 0x800c98 <uxCurrentNumberOfTasks>
     1d6:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 a4 0c 	sts	0x0CA4, r24	; 0x800ca4 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	43 d3       	rcall	.+1670   	; 0x870 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	41 d3       	rcall	.+1666   	; 0x870 <vPortFree>
     1ee:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	3c d4       	rcall	.+2168   	; 0xa78 <vPortYield>
     200:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 4f 0d 	lds	r30, 0x0D4F	; 0x800d4f <pxCurrentTimerList>
     232:	f0 91 50 0d 	lds	r31, 0x0D50	; 0x800d50 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0e c1       	rjmp	.+540    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 64 10 	call	0x20c8	; 0x20c8 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	64 c0       	rjmp	.+200    	; 0x32e <prvTimerTask+0x128>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskResumeAll>
     27e:	e0 91 4f 0d 	lds	r30, 0x0D4F	; 0x800d4f <pxCurrentTimerList>
     282:	f0 91 50 0d 	lds	r31, 0x0D50	; 0x800d50 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	75 d3       	rcall	.+1770   	; 0x984 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	86 89       	ldd	r24, Z+22	; 0x16
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 06 10 	call	0x200c	; 0x200c <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	56 96       	adiw	r26, 0x16	; 22
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9e c0       	rjmp	.+316    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <xTimerQueue>
     31c:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
     320:	0d d7       	rcall	.+3610   	; 0x113c <vQueueWaitForMessageRestricted>
     322:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskResumeAll>
     326:	81 11       	cpse	r24, r1
     328:	8a c0       	rjmp	.+276    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32a:	a6 d3       	rcall	.+1868   	; 0xa78 <vPortYield>
     32c:	88 c0       	rjmp	.+272    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32e:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskResumeAll>
     332:	85 c0       	rjmp	.+266    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	88 23       	and	r24, r24
     338:	0c f4       	brge	.+2      	; 0x33c <prvTimerTask+0x136>
     33a:	81 c0       	rjmp	.+258    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     33c:	4e 80       	ldd	r4, Y+6	; 0x06
     33e:	5f 80       	ldd	r5, Y+7	; 0x07
     340:	d2 01       	movw	r26, r4
     342:	1c 96       	adiw	r26, 0x0c	; 12
     344:	8d 91       	ld	r24, X+
     346:	9c 91       	ld	r25, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	89 2b       	or	r24, r25
     34c:	19 f0       	breq	.+6      	; 0x354 <prvTimerTask+0x14e>
     34e:	c2 01       	movw	r24, r4
     350:	02 96       	adiw	r24, 0x02	; 2
     352:	18 d3       	rcall	.+1584   	; 0x984 <uxListRemove>
     354:	ce 01       	movw	r24, r28
     356:	08 96       	adiw	r24, 0x08	; 8
     358:	0e 94 64 10 	call	0x20c8	; 0x20c8 <prvSampleTimeNow>
     35c:	8b 01       	movw	r16, r22
     35e:	9c 01       	movw	r18, r24
     360:	e9 81       	ldd	r30, Y+1	; 0x01
     362:	0e 2e       	mov	r0, r30
     364:	00 0c       	add	r0, r0
     366:	ff 0b       	sbc	r31, r31
     368:	ea 30       	cpi	r30, 0x0A	; 10
     36a:	f1 05       	cpc	r31, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <prvTimerTask+0x16a>
     36e:	67 c0       	rjmp	.+206    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     370:	88 27       	eor	r24, r24
     372:	ee 58       	subi	r30, 0x8E	; 142
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	8f 4f       	sbci	r24, 0xFF	; 255
     378:	0c 94 96 18 	jmp	0x312c	; 0x312c <__tablejump2__>
     37c:	f2 01       	movw	r30, r4
     37e:	86 89       	ldd	r24, Z+22	; 0x16
     380:	81 60       	ori	r24, 0x01	; 1
     382:	86 8b       	std	Z+22, r24	; 0x16
     384:	ca 80       	ldd	r12, Y+2	; 0x02
     386:	db 80       	ldd	r13, Y+3	; 0x03
     388:	ec 80       	ldd	r14, Y+4	; 0x04
     38a:	fd 80       	ldd	r15, Y+5	; 0x05
     38c:	46 85       	ldd	r20, Z+14	; 0x0e
     38e:	57 85       	ldd	r21, Z+15	; 0x0f
     390:	60 89       	ldd	r22, Z+16	; 0x10
     392:	71 89       	ldd	r23, Z+17	; 0x11
     394:	4c 0d       	add	r20, r12
     396:	5d 1d       	adc	r21, r13
     398:	6e 1d       	adc	r22, r14
     39a:	7f 1d       	adc	r23, r15
     39c:	c2 01       	movw	r24, r4
     39e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <prvInsertTimerInActiveList>
     3a2:	88 23       	and	r24, r24
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <prvTimerTask+0x1a2>
     3a6:	4b c0       	rjmp	.+150    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3a8:	d2 01       	movw	r26, r4
     3aa:	54 96       	adiw	r26, 0x14	; 20
     3ac:	ed 91       	ld	r30, X+
     3ae:	fc 91       	ld	r31, X
     3b0:	55 97       	sbiw	r26, 0x15	; 21
     3b2:	c2 01       	movw	r24, r4
     3b4:	19 95       	eicall
     3b6:	f2 01       	movw	r30, r4
     3b8:	86 89       	ldd	r24, Z+22	; 0x16
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	40 c0       	rjmp	.+128    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	6c 81       	ldd	r22, Y+4	; 0x04
     3c4:	7d 81       	ldd	r23, Y+5	; 0x05
     3c6:	86 85       	ldd	r24, Z+14	; 0x0e
     3c8:	97 85       	ldd	r25, Z+15	; 0x0f
     3ca:	a0 89       	ldd	r26, Z+16	; 0x10
     3cc:	b1 89       	ldd	r27, Z+17	; 0x11
     3ce:	9a 01       	movw	r18, r20
     3d0:	ab 01       	movw	r20, r22
     3d2:	28 0f       	add	r18, r24
     3d4:	39 1f       	adc	r19, r25
     3d6:	4a 1f       	adc	r20, r26
     3d8:	5b 1f       	adc	r21, r27
     3da:	c8 2c       	mov	r12, r8
     3dc:	d9 2c       	mov	r13, r9
     3de:	ea 2c       	mov	r14, r10
     3e0:	fb 2c       	mov	r15, r11
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	c2 01       	movw	r24, r4
     3ea:	0e 94 06 10 	call	0x200c	; 0x200c <xTimerGenericCommand>
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f0:	d2 01       	movw	r26, r4
     3f2:	56 96       	adiw	r26, 0x16	; 22
     3f4:	8c 91       	ld	r24, X
     3f6:	56 97       	sbiw	r26, 0x16	; 22
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	56 96       	adiw	r26, 0x16	; 22
     3fc:	8c 93       	st	X, r24
     3fe:	1f c0       	rjmp	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     400:	f2 01       	movw	r30, r4
     402:	86 89       	ldd	r24, Z+22	; 0x16
     404:	81 60       	ori	r24, 0x01	; 1
     406:	86 8b       	std	Z+22, r24	; 0x16
     408:	4a 81       	ldd	r20, Y+2	; 0x02
     40a:	5b 81       	ldd	r21, Y+3	; 0x03
     40c:	6c 81       	ldd	r22, Y+4	; 0x04
     40e:	7d 81       	ldd	r23, Y+5	; 0x05
     410:	46 87       	std	Z+14, r20	; 0x0e
     412:	57 87       	std	Z+15, r21	; 0x0f
     414:	60 8b       	std	Z+16, r22	; 0x10
     416:	71 8b       	std	Z+17, r23	; 0x11
     418:	40 0f       	add	r20, r16
     41a:	51 1f       	adc	r21, r17
     41c:	62 1f       	adc	r22, r18
     41e:	73 1f       	adc	r23, r19
     420:	68 01       	movw	r12, r16
     422:	79 01       	movw	r14, r18
     424:	c2 01       	movw	r24, r4
     426:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <prvInsertTimerInActiveList>
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	f2 01       	movw	r30, r4
     42e:	86 89       	ldd	r24, Z+22	; 0x16
     430:	81 fd       	sbrc	r24, 1
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	c2 01       	movw	r24, r4
     436:	1c d2       	rcall	.+1080   	; 0x870 <vPortFree>
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	86 8b       	std	Z+22, r24	; 0x16
     43e:	28 2d       	mov	r18, r8
     440:	39 2d       	mov	r19, r9
     442:	4a 2d       	mov	r20, r10
     444:	5b 2d       	mov	r21, r11
     446:	66 2d       	mov	r22, r6
     448:	77 2d       	mov	r23, r7
     44a:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <xTimerQueue>
     44e:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
     452:	df d5       	rcall	.+3006   	; 0x1012 <xQueueReceive>
     454:	81 11       	cpse	r24, r1
     456:	6e cf       	rjmp	.-292    	; 0x334 <prvTimerTask+0x12e>
     458:	ea ce       	rjmp	.-556    	; 0x22e <prvTimerTask+0x28>
     45a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <vTaskSuspendAll>
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 64 10 	call	0x20c8	; 0x20c8 <prvSampleTimeNow>
     466:	6b 87       	std	Y+11, r22	; 0x0b
     468:	7c 87       	std	Y+12, r23	; 0x0c
     46a:	8d 87       	std	Y+13, r24	; 0x0d
     46c:	9e 87       	std	Y+14, r25	; 0x0e
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	81 11       	cpse	r24, r1
     472:	5d cf       	rjmp	.-326    	; 0x32e <prvTimerTask+0x128>
     474:	e0 91 4d 0d 	lds	r30, 0x0D4D	; 0x800d4d <pxOverflowTimerList>
     478:	f0 91 4e 0d 	lds	r31, 0x0D4E	; 0x800d4e <pxOverflowTimerList+0x1>
     47c:	80 81       	ld	r24, Z
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	81 11       	cpse	r24, r1
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	28 2c       	mov	r2, r8
     486:	39 2c       	mov	r3, r9
     488:	4a 2c       	mov	r4, r10
     48a:	5b 2c       	mov	r5, r11
     48c:	3b cf       	rjmp	.-394    	; 0x304 <prvTimerTask+0xfe>

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	d1 e2       	ldi	r29, 0x21	; 33
     496:	de bf       	out	0x3e, r29	; 62
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	12 e0       	ldi	r17, 0x02	; 2
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	e0 ef       	ldi	r30, 0xF0	; 240
     4a6:	f9 e3       	ldi	r31, 0x39	; 57
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ac 3a       	cpi	r26, 0xAC	; 172
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	2d e0       	ldi	r18, 0x0D	; 13
     4ba:	ac ea       	ldi	r26, 0xAC	; 172
     4bc:	b2 e0       	ldi	r27, 0x02	; 2
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a1 39       	cpi	r26, 0x91	; 145
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 1e 11 	call	0x223c	; 0x223c <main>
     4cc:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <task>:
{
	for(;;)
	{
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("something wrong on temperature sensor");
     4d2:	02 e2       	ldi	r16, 0x22	; 34
     4d4:	12 e0       	ldi	r17, 0x02	; 2
			// Something went wrong
			// Investigate the return code further
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(sensor)*1000));
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f8 ee       	ldi	r31, 0xE8	; 232
     4da:	cf 2e       	mov	r12, r31
     4dc:	f3 e0       	ldi	r31, 0x03	; 3
     4de:	df 2e       	mov	r13, r31
     4e0:	e1 2c       	mov	r14, r1
     4e2:	f1 2c       	mov	r15, r1
     4e4:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA0);
     4e6:	bb 24       	eor	r11, r11
     4e8:	b3 94       	inc	r11
		//save new value
		temperature = hih8120_getTemperature();
		temperatureSensor_setValue(sensor,temperature);
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(sensor)*1000;
		printf("temperature:%d",a);
     4ea:	c8 e4       	ldi	r28, 0x48	; 72
     4ec:	d2 e0       	ldi	r29, 0x02	; 2

void task(void *pvParameters)
{
	for(;;)
	{
		if ( HIH8120_OK !=  hih8120_measure() )
     4ee:	0e 94 4f 12 	call	0x249e	; 0x249e <hih8120_measure>
     4f2:	88 23       	and	r24, r24
     4f4:	31 f0       	breq	.+12     	; 0x502 <task+0x30>
		{
			printf("something wrong on temperature sensor");
     4f6:	1f 93       	push	r17
     4f8:	0f 93       	push	r16
     4fa:	0e 94 06 1a 	call	0x340c	; 0x340c <printf>
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
			// Something went wrong
			// Investigate the return code further
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(temperatureSensor_getReportInterval(sensor)*1000));
     502:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <sensor>
     506:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <sensor+0x1>
     50a:	89 d0       	rcall	.+274    	; 0x61e <temperatureSensor_getReportInterval>
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4a e7       	ldi	r20, 0x7A	; 122
     512:	54 e4       	ldi	r21, 0x44	; 68
     514:	0e 94 80 11 	call	0x2300	; 0x2300 <__mulsf3>
     518:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fixunssfsi>
     51c:	9b 01       	movw	r18, r22
     51e:	ac 01       	movw	r20, r24
     520:	ae e3       	ldi	r26, 0x3E	; 62
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	0e 94 9e 18 	call	0x313c	; 0x313c <__muluhisi3>
     528:	a7 01       	movw	r20, r14
     52a:	96 01       	movw	r18, r12
     52c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__udivmodsi4>
     530:	ca 01       	movw	r24, r20
     532:	b9 01       	movw	r22, r18
     534:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <vTaskDelay>
		PORTA ^= _BV(PA0);
     538:	82 b1       	in	r24, 0x02	; 2
     53a:	8b 25       	eor	r24, r11
     53c:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     53e:	0e 94 5f 12 	call	0x24be	; 0x24be <hih8120_getTemperature>
     542:	ab 01       	movw	r20, r22
     544:	bc 01       	movw	r22, r24
     546:	40 93 ac 02 	sts	0x02AC, r20	; 0x8002ac <__data_end>
     54a:	50 93 ad 02 	sts	0x02AD, r21	; 0x8002ad <__data_end+0x1>
     54e:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <__data_end+0x2>
     552:	70 93 af 02 	sts	0x02AF, r23	; 0x8002af <__data_end+0x3>
		temperatureSensor_setValue(sensor,temperature);
     556:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <sensor>
     55a:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <sensor+0x1>
     55e:	59 d0       	rcall	.+178    	; 0x612 <temperatureSensor_setValue>
		//print temperature (the print of float is ?, so print it as int)
		int a = temperatureSensor_getValue(sensor)*1000;
     560:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <sensor>
     564:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <sensor+0x1>
     568:	60 d0       	rcall	.+192    	; 0x62a <temperatureSensor_getValue>
		printf("temperature:%d",a);
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	4a e7       	ldi	r20, 0x7A	; 122
     570:	54 e4       	ldi	r21, 0x44	; 68
     572:	0e 94 80 11 	call	0x2300	; 0x2300 <__mulsf3>
     576:	0e 94 26 11 	call	0x224c	; 0x224c <__fixsfsi>
     57a:	7f 93       	push	r23
     57c:	6f 93       	push	r22
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	0e 94 06 1a 	call	0x340c	; 0x340c <printf>
	}
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	af cf       	rjmp	.-162    	; 0x4ee <task+0x1c>

00000590 <temperatureSensorController_create>:
}

void temperatureSensorController_create(temperatureSensor_t temperatureSensor)
{
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
	if ( HIH8120_OK == hih8120_initialise() )
     59c:	0e 94 38 12 	call	0x2470	; 0x2470 <hih8120_initialise>
     5a0:	81 11       	cpse	r24, r1
     5a2:	15 c0       	rjmp	.+42     	; 0x5ce <temperatureSensorController_create+0x3e>
	{
		sensor = temperatureSensor;
     5a4:	d0 93 84 0d 	sts	0x0D84, r29	; 0x800d84 <sensor+0x1>
     5a8:	c0 93 83 0d 	sts	0x0D83, r28	; 0x800d83 <sensor>
		printf("Temperature sensor started!!!\n");
     5ac:	87 e5       	ldi	r24, 0x57	; 87
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 19 1a 	call	0x3432	; 0x3432 <puts>
		xTaskCreate(task, "TemperatureSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
     5b8:	01 e0       	ldi	r16, 0x01	; 1
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 ec       	ldi	r20, 0xC0	; 192
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	65 e7       	ldi	r22, 0x75	; 117
     5c4:	72 e0       	ldi	r23, 0x02	; 2
     5c6:	89 e6       	ldi	r24, 0x69	; 105
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	99 d6       	rcall	.+3378   	; 0x12fe <xTaskCreate>
		vTaskStartScheduler();
     5cc:	c5 d7       	rcall	.+3978   	; 0x1558 <vTaskStartScheduler>
     5ce:	df 91       	pop	r29
	}
     5d0:	cf 91       	pop	r28
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	08 95       	ret

000005da <temperatureSensor_create>:
     5da:	cf 92       	push	r12
	return newTemperatureSensor;
}

void temperatureSensor_setReportInterval(temperatureSensor_t self,float reportInterval)
{
	self->reportInterval = reportInterval;
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	6b 01       	movw	r12, r22
     5e4:	7c 01       	movw	r14, r24
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 b7 18 	call	0x316e	; 0x316e <calloc>
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	49 f0       	breq	.+18     	; 0x608 <temperatureSensor_create+0x2e>
     5f6:	fc 01       	movw	r30, r24
     5f8:	c0 82       	st	Z, r12
     5fa:	d1 82       	std	Z+1, r13	; 0x01
     5fc:	e2 82       	std	Z+2, r14	; 0x02
     5fe:	f3 82       	std	Z+3, r15	; 0x03
     600:	14 82       	std	Z+4, r1	; 0x04
     602:	15 82       	std	Z+5, r1	; 0x05
     604:	16 82       	std	Z+6, r1	; 0x06
     606:	17 82       	std	Z+7, r1	; 0x07
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	08 95       	ret

00000612 <temperatureSensor_setValue>:
}

void temperatureSensor_setValue(temperatureSensor_t self,float value)
{
	self->value = value;
     612:	fc 01       	movw	r30, r24
     614:	44 83       	std	Z+4, r20	; 0x04
     616:	55 83       	std	Z+5, r21	; 0x05
     618:	66 83       	std	Z+6, r22	; 0x06
     61a:	77 83       	std	Z+7, r23	; 0x07
     61c:	08 95       	ret

0000061e <temperatureSensor_getReportInterval>:
}

float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
	return self->reportInterval;
     61e:	fc 01       	movw	r30, r24
     620:	60 81       	ld	r22, Z
     622:	71 81       	ldd	r23, Z+1	; 0x01
     624:	82 81       	ldd	r24, Z+2	; 0x02
     626:	93 81       	ldd	r25, Z+3	; 0x03
}
     628:	08 95       	ret

0000062a <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
	return self->value;
     62a:	fc 01       	movw	r30, r24
     62c:	64 81       	ldd	r22, Z+4	; 0x04
     62e:	75 81       	ldd	r23, Z+5	; 0x05
     630:	86 81       	ldd	r24, Z+6	; 0x06
     632:	97 81       	ldd	r25, Z+7	; 0x07
}
     634:	08 95       	ret

00000636 <sensorModelManager_create>:

temperatureSensor_t temperatureSensor;

void sensorModelManager_create()
{
	temperatureSensor = temperatureSensor_create(1);
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	9f e3       	ldi	r25, 0x3F	; 63
     63e:	cd df       	rcall	.-102    	; 0x5da <temperatureSensor_create>
     640:	90 93 86 0d 	sts	0x0D86, r25	; 0x800d86 <temperatureSensor+0x1>
     644:	80 93 85 0d 	sts	0x0D85, r24	; 0x800d85 <temperatureSensor>
	temperatureSensorController_create(temperatureSensor);
     648:	a3 cf       	rjmp	.-186    	; 0x590 <temperatureSensorController_create>
     64a:	08 95       	ret

0000064c <prvInsertBlockIntoFreeList>:
     64c:	cf 93       	push	r28
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     64e:	df 93       	push	r29
     650:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     652:	ec eb       	ldi	r30, 0xBC	; 188
     654:	f2 e0       	ldi	r31, 0x02	; 2
     656:	01 c0       	rjmp	.+2      	; 0x65a <prvInsertBlockIntoFreeList+0xe>
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	31 81       	ldd	r19, Z+1	; 0x01
     65e:	2a 17       	cp	r18, r26
     660:	3b 07       	cpc	r19, r27
     662:	d0 f3       	brcs	.-12     	; 0x658 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	af 01       	movw	r20, r30
     66a:	48 0f       	add	r20, r24
     66c:	59 1f       	adc	r21, r25
     66e:	a4 17       	cp	r26, r20
     670:	b5 07       	cpc	r27, r21
     672:	49 f4       	brne	.+18     	; 0x686 <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     674:	12 96       	adiw	r26, 0x02	; 2
     676:	4d 91       	ld	r20, X+
     678:	5c 91       	ld	r21, X
     67a:	13 97       	sbiw	r26, 0x03	; 3
     67c:	84 0f       	add	r24, r20
     67e:	95 1f       	adc	r25, r21
     680:	93 83       	std	Z+3, r25	; 0x03
     682:	82 83       	std	Z+2, r24	; 0x02
     684:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     686:	12 96       	adiw	r26, 0x02	; 2
     688:	8d 91       	ld	r24, X+
     68a:	9c 91       	ld	r25, X
     68c:	13 97       	sbiw	r26, 0x03	; 3
     68e:	ed 01       	movw	r28, r26
     690:	c8 0f       	add	r28, r24
     692:	d9 1f       	adc	r29, r25
     694:	2c 17       	cp	r18, r28
     696:	3d 07       	cpc	r19, r29
     698:	d9 f4       	brne	.+54     	; 0x6d0 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     69a:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <pxEnd>
     69e:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <pxEnd+0x1>
     6a2:	c2 17       	cp	r28, r18
     6a4:	d3 07       	cpc	r29, r19
     6a6:	81 f0       	breq	.+32     	; 0x6c8 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     6a8:	2a 81       	ldd	r18, Y+2	; 0x02
     6aa:	3b 81       	ldd	r19, Y+3	; 0x03
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	13 96       	adiw	r26, 0x03	; 3
     6b2:	9c 93       	st	X, r25
     6b4:	8e 93       	st	-X, r24
     6b6:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6b8:	c0 81       	ld	r28, Z
     6ba:	d1 81       	ldd	r29, Z+1	; 0x01
     6bc:	88 81       	ld	r24, Y
     6be:	99 81       	ldd	r25, Y+1	; 0x01
     6c0:	11 96       	adiw	r26, 0x01	; 1
     6c2:	9c 93       	st	X, r25
     6c4:	8e 93       	st	-X, r24
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6c8:	11 96       	adiw	r26, 0x01	; 1
     6ca:	dc 93       	st	X, r29
     6cc:	ce 93       	st	-X, r28
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6d0:	11 96       	adiw	r26, 0x01	; 1
     6d2:	3c 93       	st	X, r19
     6d4:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6d6:	ae 17       	cp	r26, r30
     6d8:	bf 07       	cpc	r27, r31
     6da:	11 f0       	breq	.+4      	; 0x6e0 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     6dc:	b1 83       	std	Z+1, r27	; 0x01
     6de:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     6f8:	65 d7       	rcall	.+3786   	; 0x15c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     6fa:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <pxEnd>
     6fe:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <pxEnd+0x1>
     702:	89 2b       	or	r24, r25
     704:	41 f5       	brne	.+80     	; 0x756 <pvPortMalloc+0x70>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     706:	ec eb       	ldi	r30, 0xBC	; 188
     708:	f2 e0       	ldi	r31, 0x02	; 2
     70a:	a0 ec       	ldi	r26, 0xC0	; 192
     70c:	b2 e0       	ldi	r27, 0x02	; 2
     70e:	b1 83       	std	Z+1, r27	; 0x01
     710:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     712:	13 82       	std	Z+3, r1	; 0x03
     714:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     716:	e0 e8       	ldi	r30, 0x80	; 128
     718:	fc e0       	ldi	r31, 0x0C	; 12
     71a:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <pxEnd+0x1>
     71e:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <pxEnd>
    pxEnd->xBlockSize = 0;
     722:	13 82       	std	Z+3, r1	; 0x03
     724:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     726:	11 82       	std	Z+1, r1	; 0x01
     728:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     72a:	80 ec       	ldi	r24, 0xC0	; 192
     72c:	99 e0       	ldi	r25, 0x09	; 9
     72e:	13 96       	adiw	r26, 0x03	; 3
     730:	9c 93       	st	X, r25
     732:	8e 93       	st	-X, r24
     734:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     736:	ed 93       	st	X+, r30
     738:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     73a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <xMinimumEverFreeBytesRemaining+0x1>
     73e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     742:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <xFreeBytesRemaining+0x1>
     746:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e8       	ldi	r25, 0x80	; 128
     74e:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <xBlockAllocatedBit+0x1>
     752:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     756:	e0 90 b0 02 	lds	r14, 0x02B0	; 0x8002b0 <xBlockAllocatedBit>
     75a:	f0 90 b1 02 	lds	r15, 0x02B1	; 0x8002b1 <xBlockAllocatedBit+0x1>
     75e:	c7 01       	movw	r24, r14
     760:	8c 23       	and	r24, r28
     762:	9d 23       	and	r25, r29
     764:	89 2b       	or	r24, r25
     766:	09 f0       	breq	.+2      	; 0x76a <pvPortMalloc+0x84>
     768:	75 c0       	rjmp	.+234    	; 0x854 <pvPortMalloc+0x16e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     76a:	20 97       	sbiw	r28, 0x00	; 0
     76c:	09 f4       	brne	.+2      	; 0x770 <pvPortMalloc+0x8a>
     76e:	74 c0       	rjmp	.+232    	; 0x858 <pvPortMalloc+0x172>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     770:	9e 01       	movw	r18, r28
     772:	2c 5f       	subi	r18, 0xFC	; 252
     774:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     776:	c2 17       	cp	r28, r18
     778:	d3 07       	cpc	r29, r19
     77a:	08 f0       	brcs	.+2      	; 0x77e <pvPortMalloc+0x98>
     77c:	6d c0       	rjmp	.+218    	; 0x858 <pvPortMalloc+0x172>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     77e:	21 15       	cp	r18, r1
     780:	31 05       	cpc	r19, r1
     782:	09 f4       	brne	.+2      	; 0x786 <pvPortMalloc+0xa0>
     784:	67 c0       	rjmp	.+206    	; 0x854 <pvPortMalloc+0x16e>
     786:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <xFreeBytesRemaining>
     78a:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <xFreeBytesRemaining+0x1>
     78e:	02 17       	cp	r16, r18
     790:	13 07       	cpc	r17, r19
     792:	08 f4       	brcc	.+2      	; 0x796 <pvPortMalloc+0xb0>
     794:	5f c0       	rjmp	.+190    	; 0x854 <pvPortMalloc+0x16e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     796:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <xStart>
     79a:	d0 91 bd 02 	lds	r29, 0x02BD	; 0x8002bd <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     79e:	ec eb       	ldi	r30, 0xBC	; 188
     7a0:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <pvPortMalloc+0xc2>
     7a4:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     7a6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	9b 81       	ldd	r25, Y+3	; 0x03
     7ac:	82 17       	cp	r24, r18
     7ae:	93 07       	cpc	r25, r19
     7b0:	20 f4       	brcc	.+8      	; 0x7ba <pvPortMalloc+0xd4>
     7b2:	88 81       	ld	r24, Y
     7b4:	99 81       	ldd	r25, Y+1	; 0x01
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	a9 f7       	brne	.-22     	; 0x7a4 <pvPortMalloc+0xbe>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     7ba:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <pxEnd>
     7be:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <pxEnd+0x1>
     7c2:	c8 17       	cp	r28, r24
     7c4:	d9 07       	cpc	r29, r25
     7c6:	09 f4       	brne	.+2      	; 0x7ca <pvPortMalloc+0xe4>
     7c8:	45 c0       	rjmp	.+138    	; 0x854 <pvPortMalloc+0x16e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     7ca:	c0 80       	ld	r12, Z
     7cc:	d1 80       	ldd	r13, Z+1	; 0x01
     7ce:	84 e0       	ldi	r24, 0x04	; 4
     7d0:	c8 0e       	add	r12, r24
     7d2:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     7d4:	88 81       	ld	r24, Y
     7d6:	99 81       	ldd	r25, Y+1	; 0x01
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     7dc:	4a 81       	ldd	r20, Y+2	; 0x02
     7de:	5b 81       	ldd	r21, Y+3	; 0x03
     7e0:	42 1b       	sub	r20, r18
     7e2:	53 0b       	sbc	r21, r19
     7e4:	49 30       	cpi	r20, 0x09	; 9
     7e6:	51 05       	cpc	r21, r1
     7e8:	48 f0       	brcs	.+18     	; 0x7fc <pvPortMalloc+0x116>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7ea:	ce 01       	movw	r24, r28
     7ec:	82 0f       	add	r24, r18
     7ee:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7f0:	fc 01       	movw	r30, r24
     7f2:	53 83       	std	Z+3, r21	; 0x03
     7f4:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     7f6:	3b 83       	std	Y+3, r19	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     7f8:	2a 83       	std	Y+2, r18	; 0x02
     7fa:	28 df       	rcall	.-432    	; 0x64c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	9b 81       	ldd	r25, Y+3	; 0x03
     800:	08 1b       	sub	r16, r24
     802:	19 0b       	sbc	r17, r25
     804:	10 93 b9 02 	sts	0x02B9, r17	; 0x8002b9 <xFreeBytesRemaining+0x1>
     808:	00 93 b8 02 	sts	0x02B8, r16	; 0x8002b8 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     80c:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <xMinimumEverFreeBytesRemaining>
     810:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <xMinimumEverFreeBytesRemaining+0x1>
     814:	02 17       	cp	r16, r18
     816:	13 07       	cpc	r17, r19
     818:	20 f4       	brcc	.+8      	; 0x822 <pvPortMalloc+0x13c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     81a:	10 93 b7 02 	sts	0x02B7, r17	; 0x8002b7 <xMinimumEverFreeBytesRemaining+0x1>
     81e:	00 93 b6 02 	sts	0x02B6, r16	; 0x8002b6 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     822:	e8 2a       	or	r14, r24
     824:	f9 2a       	or	r15, r25
     826:	fb 82       	std	Y+3, r15	; 0x03
     828:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     82e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <xNumberOfSuccessfulAllocations>
     832:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <xNumberOfSuccessfulAllocations+0x1>
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <xNumberOfSuccessfulAllocations+0x1>
     83c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     840:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     844:	c1 14       	cp	r12, r1
     846:	d1 04       	cpc	r13, r1
     848:	49 f4       	brne	.+18     	; 0x85c <pvPortMalloc+0x176>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     84a:	0e 94 00 11 	call	0x2200	; 0x2200 <vApplicationMallocFailedHook>
     84e:	c1 2c       	mov	r12, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
     850:	d1 2c       	mov	r13, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     852:	04 c0       	rjmp	.+8      	; 0x85c <pvPortMalloc+0x176>
     854:	fb d7       	rcall	.+4086   	; 0x184c <xTaskResumeAll>
     856:	f9 cf       	rjmp	.-14     	; 0x84a <pvPortMalloc+0x164>
     858:	f9 d7       	rcall	.+4082   	; 0x184c <xTaskResumeAll>
     85a:	f7 cf       	rjmp	.-18     	; 0x84a <pvPortMalloc+0x164>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     85c:	c6 01       	movw	r24, r12
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	08 95       	ret

00000870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	89 f1       	breq	.+98     	; 0x8da <vPortFree+0x6a>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     878:	fc 01       	movw	r30, r24
     87a:	34 97       	sbiw	r30, 0x04	; 4
     87c:	22 81       	ldd	r18, Z+2	; 0x02
     87e:	33 81       	ldd	r19, Z+3	; 0x03
     880:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <xBlockAllocatedBit>
     884:	50 91 b1 02 	lds	r21, 0x02B1	; 0x8002b1 <xBlockAllocatedBit+0x1>
     888:	b9 01       	movw	r22, r18
     88a:	64 23       	and	r22, r20
     88c:	75 23       	and	r23, r21
     88e:	67 2b       	or	r22, r23
     890:	21 f1       	breq	.+72     	; 0x8da <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     892:	60 81       	ld	r22, Z
     894:	71 81       	ldd	r23, Z+1	; 0x01
     896:	67 2b       	or	r22, r23
     898:	01 f5       	brne	.+64     	; 0x8da <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     89a:	ef 01       	movw	r28, r30
     89c:	40 95       	com	r20
     89e:	50 95       	com	r21
     8a0:	24 23       	and	r18, r20
     8a2:	35 23       	and	r19, r21
     8a4:	33 83       	std	Z+3, r19	; 0x03
     8a6:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     8a8:	8d d6       	rcall	.+3354   	; 0x15c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     8aa:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <xFreeBytesRemaining>
     8ae:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <xFreeBytesRemaining+0x1>
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	9b 81       	ldd	r25, Y+3	; 0x03
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <xFreeBytesRemaining+0x1>
     8be:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     8c2:	ce 01       	movw	r24, r28
     8c4:	c3 de       	rcall	.-634    	; 0x64c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     8c6:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <xNumberOfSuccessfulFrees>
     8ca:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <xNumberOfSuccessfulFrees+0x1>
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <xNumberOfSuccessfulFrees+0x1>
     8d4:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     8d8:	b9 d7       	rcall	.+3954   	; 0x184c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     8e0:	fc 01       	movw	r30, r24
     8e2:	03 96       	adiw	r24, 0x03	; 3
     8e4:	92 83       	std	Z+2, r25	; 0x02
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	4f ef       	ldi	r20, 0xFF	; 255
     8ea:	5f ef       	ldi	r21, 0xFF	; 255
     8ec:	ba 01       	movw	r22, r20
     8ee:	43 83       	std	Z+3, r20	; 0x03
     8f0:	54 83       	std	Z+4, r21	; 0x04
     8f2:	65 83       	std	Z+5, r22	; 0x05
     8f4:	76 83       	std	Z+6, r23	; 0x06
     8f6:	90 87       	std	Z+8, r25	; 0x08
     8f8:	87 83       	std	Z+7, r24	; 0x07
     8fa:	92 87       	std	Z+10, r25	; 0x0a
     8fc:	81 87       	std	Z+9, r24	; 0x09
     8fe:	10 82       	st	Z, r1
     900:	08 95       	ret

00000902 <vListInitialiseItem>:
     902:	fc 01       	movw	r30, r24
     904:	13 86       	std	Z+11, r1	; 0x0b
     906:	12 86       	std	Z+10, r1	; 0x0a
     908:	08 95       	ret

0000090a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     914:	08 81       	ld	r16, Y
     916:	19 81       	ldd	r17, Y+1	; 0x01
     918:	2a 81       	ldd	r18, Y+2	; 0x02
     91a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     91c:	0f 3f       	cpi	r16, 0xFF	; 255
     91e:	4f ef       	ldi	r20, 0xFF	; 255
     920:	14 07       	cpc	r17, r20
     922:	24 07       	cpc	r18, r20
     924:	34 07       	cpc	r19, r20
     926:	21 f4       	brne	.+8      	; 0x930 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     928:	fc 01       	movw	r30, r24
     92a:	a1 85       	ldd	r26, Z+9	; 0x09
     92c:	b2 85       	ldd	r27, Z+10	; 0x0a
     92e:	11 c0       	rjmp	.+34     	; 0x952 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     930:	dc 01       	movw	r26, r24
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	01 c0       	rjmp	.+2      	; 0x938 <vListInsert+0x2e>
     936:	df 01       	movw	r26, r30
     938:	14 96       	adiw	r26, 0x04	; 4
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	15 97       	sbiw	r26, 0x05	; 5
     940:	40 81       	ld	r20, Z
     942:	51 81       	ldd	r21, Z+1	; 0x01
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	04 17       	cp	r16, r20
     94a:	15 07       	cpc	r17, r21
     94c:	26 07       	cpc	r18, r22
     94e:	37 07       	cpc	r19, r23
     950:	90 f7       	brcc	.-28     	; 0x936 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     952:	14 96       	adiw	r26, 0x04	; 4
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	15 97       	sbiw	r26, 0x05	; 5
     95a:	fd 83       	std	Y+5, r31	; 0x05
     95c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     95e:	d7 83       	std	Z+7, r29	; 0x07
     960:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     962:	bf 83       	std	Y+7, r27	; 0x07
     964:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     966:	15 96       	adiw	r26, 0x05	; 5
     968:	dc 93       	st	X, r29
     96a:	ce 93       	st	-X, r28
     96c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     96e:	9b 87       	std	Y+11, r25	; 0x0b
     970:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     972:	fc 01       	movw	r30, r24
     974:	20 81       	ld	r18, Z
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	20 83       	st	Z, r18
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     98a:	a2 85       	ldd	r26, Z+10	; 0x0a
     98c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     98e:	c4 81       	ldd	r28, Z+4	; 0x04
     990:	d5 81       	ldd	r29, Z+5	; 0x05
     992:	86 81       	ldd	r24, Z+6	; 0x06
     994:	97 81       	ldd	r25, Z+7	; 0x07
     996:	9f 83       	std	Y+7, r25	; 0x07
     998:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     99a:	c6 81       	ldd	r28, Z+6	; 0x06
     99c:	d7 81       	ldd	r29, Z+7	; 0x07
     99e:	84 81       	ldd	r24, Z+4	; 0x04
     9a0:	95 81       	ldd	r25, Z+5	; 0x05
     9a2:	9d 83       	std	Y+5, r25	; 0x05
     9a4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	8d 91       	ld	r24, X+
     9aa:	9c 91       	ld	r25, X
     9ac:	12 97       	sbiw	r26, 0x02	; 2
     9ae:	e8 17       	cp	r30, r24
     9b0:	f9 07       	cpc	r31, r25
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     9b4:	86 81       	ldd	r24, Z+6	; 0x06
     9b6:	97 81       	ldd	r25, Z+7	; 0x07
     9b8:	12 96       	adiw	r26, 0x02	; 2
     9ba:	9c 93       	st	X, r25
     9bc:	8e 93       	st	-X, r24
     9be:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     9c0:	13 86       	std	Z+11, r1	; 0x0b
     9c2:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     9c4:	8c 91       	ld	r24, X
     9c6:	81 50       	subi	r24, 0x01	; 1
     9c8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     9ca:	8c 91       	ld	r24, X
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     9d2:	fc 01       	movw	r30, r24
     9d4:	60 83       	st	Z, r22
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	70 83       	st	Z, r23
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	10 82       	st	Z, r1
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	10 82       	st	Z, r1
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	20 e8       	ldi	r18, 0x80	; 128
     9e6:	20 83       	st	Z, r18
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	10 82       	st	Z, r1
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	10 82       	st	Z, r1
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	10 82       	st	Z, r1
     9f4:	77 97       	sbiw	r30, 0x17	; 23
     9f6:	40 83       	st	Z, r20
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	50 83       	st	Z, r21
     9fc:	86 97       	sbiw	r24, 0x26	; 38
     9fe:	08 95       	ret

00000a00 <xPortStartScheduler>:
     a00:	a8 95       	wdr
     a02:	90 ec       	ldi	r25, 0xC0	; 192
     a04:	88 e1       	ldi	r24, 0x18	; 24
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	a8 95       	wdr
     a0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     a16:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
     a1a:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
     a1e:	cd 91       	ld	r28, X+
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	dd 91       	ld	r29, X+
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	9f 90       	pop	r9
     a54:	8f 90       	pop	r8
     a56:	7f 90       	pop	r7
     a58:	6f 90       	pop	r6
     a5a:	5f 90       	pop	r5
     a5c:	4f 90       	pop	r4
     a5e:	3f 90       	pop	r3
     a60:	2f 90       	pop	r2
     a62:	1f 90       	pop	r1
     a64:	0f 90       	pop	r0
     a66:	0c be       	out	0x3c, r0	; 60
     a68:	0f 90       	pop	r0
     a6a:	0b be       	out	0x3b, r0	; 59
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	08 95       	ret
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret

00000a78 <vPortYield>:
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	0f 92       	push	r0
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	0c b6       	in	r0, 0x3c	; 60
     a86:	0f 92       	push	r0
     a88:	1f 92       	push	r1
     a8a:	11 24       	eor	r1, r1
     a8c:	2f 92       	push	r2
     a8e:	3f 92       	push	r3
     a90:	4f 92       	push	r4
     a92:	5f 92       	push	r5
     a94:	6f 92       	push	r6
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
     ac8:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
     acc:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
     ad0:	0d b6       	in	r0, 0x3d	; 61
     ad2:	0d 92       	st	X+, r0
     ad4:	0e b6       	in	r0, 0x3e	; 62
     ad6:	0d 92       	st	X+, r0
     ad8:	b6 d7       	rcall	.+3948   	; 0x1a46 <vTaskSwitchContext>
     ada:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
     ade:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
     ae2:	cd 91       	ld	r28, X+
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	dd 91       	ld	r29, X+
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	7f 90       	pop	r7
     b1c:	6f 90       	pop	r6
     b1e:	5f 90       	pop	r5
     b20:	4f 90       	pop	r4
     b22:	3f 90       	pop	r3
     b24:	2f 90       	pop	r2
     b26:	1f 90       	pop	r1
     b28:	0f 90       	pop	r0
     b2a:	0c be       	out	0x3c, r0	; 60
     b2c:	0f 90       	pop	r0
     b2e:	0b be       	out	0x3b, r0	; 59
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	08 95       	ret

00000b38 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	0f 92       	push	r0
     b40:	0b b6       	in	r0, 0x3b	; 59
     b42:	0f 92       	push	r0
     b44:	0c b6       	in	r0, 0x3c	; 60
     b46:	0f 92       	push	r0
     b48:	1f 92       	push	r1
     b4a:	11 24       	eor	r1, r1
     b4c:	2f 92       	push	r2
     b4e:	3f 92       	push	r3
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
     b8c:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
     b90:	0d b6       	in	r0, 0x3d	; 61
     b92:	0d 92       	st	X+, r0
     b94:	0e b6       	in	r0, 0x3e	; 62
     b96:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b98:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     b9a:	28 d5       	rcall	.+2640   	; 0x15ec <xTaskIncrementTick>
     b9c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b9e:	53 d7       	rcall	.+3750   	; 0x1a46 <vTaskSwitchContext>
     ba0:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     ba4:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
     ba8:	cd 91       	ld	r28, X+
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	dd 91       	ld	r29, X+
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	9f 90       	pop	r9
     bde:	8f 90       	pop	r8
     be0:	7f 90       	pop	r7
     be2:	6f 90       	pop	r6
     be4:	5f 90       	pop	r5
     be6:	4f 90       	pop	r4
     be8:	3f 90       	pop	r3
     bea:	2f 90       	pop	r2
     bec:	1f 90       	pop	r1
     bee:	0f 90       	pop	r0
     bf0:	0c be       	out	0x3c, r0	; 60
     bf2:	0f 90       	pop	r0
     bf4:	0b be       	out	0x3b, r0	; 59
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	08 95       	ret

00000bfe <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     bfe:	9c df       	rcall	.-200    	; 0xb38 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     c00:	18 95       	reti

00000c02 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	fc 01       	movw	r30, r24
     c0a:	96 8d       	ldd	r25, Z+30	; 0x1e
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	91 11       	cpse	r25, r1
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	08 95       	ret

00000c18 <prvCopyDataToQueue>:
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
     c22:	04 2f       	mov	r16, r20
     c24:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c26:	48 a1       	ldd	r20, Y+32	; 0x20
     c28:	41 11       	cpse	r20, r1
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <prvCopyDataToQueue+0x2c>
     c2c:	88 81       	ld	r24, Y
     c2e:	99 81       	ldd	r25, Y+1	; 0x01
     c30:	89 2b       	or	r24, r25
     c32:	09 f0       	breq	.+2      	; 0xc36 <prvCopyDataToQueue+0x1e>
     c34:	42 c0       	rjmp	.+132    	; 0xcba <prvCopyDataToQueue+0xa2>
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	9d 81       	ldd	r25, Y+5	; 0x05
     c3a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskPriorityDisinherit>
     c3e:	1d 82       	std	Y+5, r1	; 0x05
     c40:	1c 82       	std	Y+4, r1	; 0x04
     c42:	42 c0       	rjmp	.+132    	; 0xcc8 <prvCopyDataToQueue+0xb0>
     c44:	01 11       	cpse	r16, r1
     c46:	17 c0       	rjmp	.+46     	; 0xc76 <prvCopyDataToQueue+0x5e>
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <memcpy>
     c52:	28 a1       	ldd	r18, Y+32	; 0x20
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	82 0f       	add	r24, r18
     c5a:	91 1d       	adc	r25, r1
     c5c:	9b 83       	std	Y+3, r25	; 0x03
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	2c 81       	ldd	r18, Y+4	; 0x04
     c62:	3d 81       	ldd	r19, Y+5	; 0x05
     c64:	82 17       	cp	r24, r18
     c66:	93 07       	cpc	r25, r19
     c68:	50 f1       	brcs	.+84     	; 0xcbe <prvCopyDataToQueue+0xa6>
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	9b 83       	std	Y+3, r25	; 0x03
     c70:	8a 83       	std	Y+2, r24	; 0x02
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	29 c0       	rjmp	.+82     	; 0xcc8 <prvCopyDataToQueue+0xb0>
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	8e 81       	ldd	r24, Y+6	; 0x06
     c7a:	9f 81       	ldd	r25, Y+7	; 0x07
     c7c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <memcpy>
     c80:	88 a1       	ldd	r24, Y+32	; 0x20
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	91 95       	neg	r25
     c86:	81 95       	neg	r24
     c88:	91 09       	sbc	r25, r1
     c8a:	2e 81       	ldd	r18, Y+6	; 0x06
     c8c:	3f 81       	ldd	r19, Y+7	; 0x07
     c8e:	28 0f       	add	r18, r24
     c90:	39 1f       	adc	r19, r25
     c92:	3f 83       	std	Y+7, r19	; 0x07
     c94:	2e 83       	std	Y+6, r18	; 0x06
     c96:	48 81       	ld	r20, Y
     c98:	59 81       	ldd	r21, Y+1	; 0x01
     c9a:	24 17       	cp	r18, r20
     c9c:	35 07       	cpc	r19, r21
     c9e:	30 f4       	brcc	.+12     	; 0xcac <prvCopyDataToQueue+0x94>
     ca0:	2c 81       	ldd	r18, Y+4	; 0x04
     ca2:	3d 81       	ldd	r19, Y+5	; 0x05
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	9f 83       	std	Y+7, r25	; 0x07
     caa:	8e 83       	std	Y+6, r24	; 0x06
     cac:	02 30       	cpi	r16, 0x02	; 2
     cae:	49 f4       	brne	.+18     	; 0xcc2 <prvCopyDataToQueue+0xaa>
     cb0:	11 23       	and	r17, r17
     cb2:	49 f0       	breq	.+18     	; 0xcc6 <prvCopyDataToQueue+0xae>
     cb4:	11 50       	subi	r17, 0x01	; 1
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <prvCopyDataToQueue+0xb0>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <prvCopyDataToQueue+0xb0>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <prvCopyDataToQueue+0xb0>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <prvCopyDataToQueue+0xb0>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	1f 5f       	subi	r17, 0xFF	; 255
     cca:	1e 8f       	std	Y+30, r17	; 0x1e
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <prvCopyDataFromQueue>:
     cd6:	fc 01       	movw	r30, r24
     cd8:	40 a1       	ldd	r20, Z+32	; 0x20
     cda:	44 23       	and	r20, r20
     cdc:	a9 f0       	breq	.+42     	; 0xd08 <prvCopyDataFromQueue+0x32>
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	26 81       	ldd	r18, Z+6	; 0x06
     ce2:	37 81       	ldd	r19, Z+7	; 0x07
     ce4:	24 0f       	add	r18, r20
     ce6:	35 1f       	adc	r19, r21
     ce8:	37 83       	std	Z+7, r19	; 0x07
     cea:	26 83       	std	Z+6, r18	; 0x06
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	95 81       	ldd	r25, Z+5	; 0x05
     cf0:	28 17       	cp	r18, r24
     cf2:	39 07       	cpc	r19, r25
     cf4:	20 f0       	brcs	.+8      	; 0xcfe <prvCopyDataFromQueue+0x28>
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	97 83       	std	Z+7, r25	; 0x07
     cfc:	86 83       	std	Z+6, r24	; 0x06
     cfe:	cb 01       	movw	r24, r22
     d00:	66 81       	ldd	r22, Z+6	; 0x06
     d02:	77 81       	ldd	r23, Z+7	; 0x07
     d04:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <memcpy>
     d08:	08 95       	ret

00000d0a <prvUnlockQueue>:
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	8c 01       	movw	r16, r24
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	0f 92       	push	r0
     d1c:	fc 01       	movw	r30, r24
     d1e:	c2 a1       	ldd	r28, Z+34	; 0x22
     d20:	1c 16       	cp	r1, r28
     d22:	a4 f4       	brge	.+40     	; 0xd4c <prvUnlockQueue+0x42>
     d24:	83 89       	ldd	r24, Z+19	; 0x13
     d26:	81 11       	cpse	r24, r1
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <prvUnlockQueue+0x2c>
     d2a:	10 c0       	rjmp	.+32     	; 0xd4c <prvUnlockQueue+0x42>
     d2c:	f8 01       	movw	r30, r16
     d2e:	83 89       	ldd	r24, Z+19	; 0x13
     d30:	81 11       	cpse	r24, r1
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <prvUnlockQueue+0x34>
     d34:	0b c0       	rjmp	.+22     	; 0xd4c <prvUnlockQueue+0x42>
     d36:	78 01       	movw	r14, r16
     d38:	f3 e1       	ldi	r31, 0x13	; 19
     d3a:	ef 0e       	add	r14, r31
     d3c:	f1 1c       	adc	r15, r1
     d3e:	c7 01       	movw	r24, r14
     d40:	4c d7       	rcall	.+3736   	; 0x1bda <xTaskRemoveFromEventList>
     d42:	81 11       	cpse	r24, r1
     d44:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <vTaskMissedYield>
     d48:	c1 50       	subi	r28, 0x01	; 1
     d4a:	81 f7       	brne	.-32     	; 0xd2c <prvUnlockQueue+0x22>
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	f8 01       	movw	r30, r16
     d50:	82 a3       	std	Z+34, r24	; 0x22
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	0f 92       	push	r0
     d5c:	c1 a1       	ldd	r28, Z+33	; 0x21
     d5e:	1c 16       	cp	r1, r28
     d60:	a4 f4       	brge	.+40     	; 0xd8a <prvUnlockQueue+0x80>
     d62:	80 85       	ldd	r24, Z+8	; 0x08
     d64:	81 11       	cpse	r24, r1
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <prvUnlockQueue+0x6a>
     d68:	10 c0       	rjmp	.+32     	; 0xd8a <prvUnlockQueue+0x80>
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 85       	ldd	r24, Z+8	; 0x08
     d6e:	81 11       	cpse	r24, r1
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <prvUnlockQueue+0x72>
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <prvUnlockQueue+0x80>
     d74:	78 01       	movw	r14, r16
     d76:	f8 e0       	ldi	r31, 0x08	; 8
     d78:	ef 0e       	add	r14, r31
     d7a:	f1 1c       	adc	r15, r1
     d7c:	c7 01       	movw	r24, r14
     d7e:	2d d7       	rcall	.+3674   	; 0x1bda <xTaskRemoveFromEventList>
     d80:	81 11       	cpse	r24, r1
     d82:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <vTaskMissedYield>
     d86:	c1 50       	subi	r28, 0x01	; 1
     d88:	81 f7       	brne	.-32     	; 0xd6a <prvUnlockQueue+0x60>
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	f8 01       	movw	r30, r16
     d8e:	81 a3       	std	Z+33, r24	; 0x21
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	08 95       	ret

00000da0 <xQueueGenericReset>:
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ec 01       	movw	r28, r24
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	0f 92       	push	r0
     dac:	e8 81       	ld	r30, Y
     dae:	f9 81       	ldd	r31, Y+1	; 0x01
     db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db2:	28 a1       	ldd	r18, Y+32	; 0x20
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	82 9f       	mul	r24, r18
     dba:	a0 01       	movw	r20, r0
     dbc:	83 9f       	mul	r24, r19
     dbe:	50 0d       	add	r21, r0
     dc0:	92 9f       	mul	r25, r18
     dc2:	50 0d       	add	r21, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	4e 0f       	add	r20, r30
     dc8:	5f 1f       	adc	r21, r31
     dca:	5d 83       	std	Y+5, r21	; 0x05
     dcc:	4c 83       	std	Y+4, r20	; 0x04
     dce:	1e 8e       	std	Y+30, r1	; 0x1e
     dd0:	fb 83       	std	Y+3, r31	; 0x03
     dd2:	ea 83       	std	Y+2, r30	; 0x02
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	82 9f       	mul	r24, r18
     dd8:	a0 01       	movw	r20, r0
     dda:	83 9f       	mul	r24, r19
     ddc:	50 0d       	add	r21, r0
     dde:	92 9f       	mul	r25, r18
     de0:	50 0d       	add	r21, r0
     de2:	11 24       	eor	r1, r1
     de4:	cf 01       	movw	r24, r30
     de6:	84 0f       	add	r24, r20
     de8:	95 1f       	adc	r25, r21
     dea:	9f 83       	std	Y+7, r25	; 0x07
     dec:	8e 83       	std	Y+6, r24	; 0x06
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	89 a3       	std	Y+33, r24	; 0x21
     df2:	8a a3       	std	Y+34, r24	; 0x22
     df4:	61 11       	cpse	r22, r1
     df6:	0a c0       	rjmp	.+20     	; 0xe0c <xQueueGenericReset+0x6c>
     df8:	88 85       	ldd	r24, Y+8	; 0x08
     dfa:	88 23       	and	r24, r24
     dfc:	69 f0       	breq	.+26     	; 0xe18 <xQueueGenericReset+0x78>
     dfe:	ce 01       	movw	r24, r28
     e00:	08 96       	adiw	r24, 0x08	; 8
     e02:	eb d6       	rcall	.+3542   	; 0x1bda <xTaskRemoveFromEventList>
     e04:	88 23       	and	r24, r24
     e06:	41 f0       	breq	.+16     	; 0xe18 <xQueueGenericReset+0x78>
     e08:	37 de       	rcall	.-914    	; 0xa78 <vPortYield>
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <xQueueGenericReset+0x78>
     e0c:	ce 01       	movw	r24, r28
     e0e:	08 96       	adiw	r24, 0x08	; 8
     e10:	67 dd       	rcall	.-1330   	; 0x8e0 <vListInitialise>
     e12:	ce 01       	movw	r24, r28
     e14:	43 96       	adiw	r24, 0x13	; 19
     e16:	64 dd       	rcall	.-1336   	; 0x8e0 <vListInitialise>
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <xQueueGenericCreate>:
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	08 2f       	mov	r16, r24
     e2e:	16 2f       	mov	r17, r22
     e30:	86 9f       	mul	r24, r22
     e32:	c0 01       	movw	r24, r0
     e34:	11 24       	eor	r1, r1
     e36:	83 96       	adiw	r24, 0x23	; 35
     e38:	56 dc       	rcall	.-1876   	; 0x6e6 <pvPortMalloc>
     e3a:	ec 01       	movw	r28, r24
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	69 f0       	breq	.+26     	; 0xe5a <xQueueGenericCreate+0x36>
     e40:	11 11       	cpse	r17, r1
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <xQueueGenericCreate+0x26>
     e44:	99 83       	std	Y+1, r25	; 0x01
     e46:	88 83       	st	Y, r24
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <xQueueGenericCreate+0x2c>
     e4a:	83 96       	adiw	r24, 0x23	; 35
     e4c:	99 83       	std	Y+1, r25	; 0x01
     e4e:	88 83       	st	Y, r24
     e50:	0f 8f       	std	Y+31, r16	; 0x1f
     e52:	18 a3       	std	Y+32, r17	; 0x20
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	ce 01       	movw	r24, r28
     e58:	a3 df       	rcall	.-186    	; 0xda0 <xQueueGenericReset>
     e5a:	ce 01       	movw	r24, r28
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <xQueueGenericSend>:
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	29 97       	sbiw	r28, 0x09	; 9
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	7c 01       	movw	r14, r24
     e8e:	5b 01       	movw	r10, r22
     e90:	2e 83       	std	Y+6, r18	; 0x06
     e92:	3f 83       	std	Y+7, r19	; 0x07
     e94:	48 87       	std	Y+8, r20	; 0x08
     e96:	59 87       	std	Y+9, r21	; 0x09
     e98:	10 e0       	ldi	r17, 0x00	; 0
     e9a:	99 24       	eor	r9, r9
     e9c:	93 94       	inc	r9
     e9e:	6c 01       	movw	r12, r24
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	c8 0e       	add	r12, r24
     ea4:	d1 1c       	adc	r13, r1
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	0f 92       	push	r0
     eac:	f7 01       	movw	r30, r14
     eae:	96 8d       	ldd	r25, Z+30	; 0x1e
     eb0:	87 8d       	ldd	r24, Z+31	; 0x1f
     eb2:	98 17       	cp	r25, r24
     eb4:	10 f0       	brcs	.+4      	; 0xeba <xQueueGenericSend+0x54>
     eb6:	02 30       	cpi	r16, 0x02	; 2
     eb8:	a9 f4       	brne	.+42     	; 0xee4 <xQueueGenericSend+0x7e>
     eba:	40 2f       	mov	r20, r16
     ebc:	b5 01       	movw	r22, r10
     ebe:	c7 01       	movw	r24, r14
     ec0:	ab de       	rcall	.-682    	; 0xc18 <prvCopyDataToQueue>
     ec2:	f7 01       	movw	r30, r14
     ec4:	93 89       	ldd	r25, Z+19	; 0x13
     ec6:	99 23       	and	r25, r25
     ec8:	39 f0       	breq	.+14     	; 0xed8 <xQueueGenericSend+0x72>
     eca:	c7 01       	movw	r24, r14
     ecc:	43 96       	adiw	r24, 0x13	; 19
     ece:	85 d6       	rcall	.+3338   	; 0x1bda <xTaskRemoveFromEventList>
     ed0:	88 23       	and	r24, r24
     ed2:	21 f0       	breq	.+8      	; 0xedc <xQueueGenericSend+0x76>
     ed4:	d1 dd       	rcall	.-1118   	; 0xa78 <vPortYield>
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <xQueueGenericSend+0x76>
     ed8:	81 11       	cpse	r24, r1
     eda:	ce dd       	rcall	.-1124   	; 0xa78 <vPortYield>
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	4b c0       	rjmp	.+150    	; 0xf7a <xQueueGenericSend+0x114>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	a8 85       	ldd	r26, Y+8	; 0x08
     eea:	b9 85       	ldd	r27, Y+9	; 0x09
     eec:	89 2b       	or	r24, r25
     eee:	8a 2b       	or	r24, r26
     ef0:	8b 2b       	or	r24, r27
     ef2:	21 f4       	brne	.+8      	; 0xefc <xQueueGenericSend+0x96>
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	3f c0       	rjmp	.+126    	; 0xf7a <xQueueGenericSend+0x114>
     efc:	11 11       	cpse	r17, r1
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <xQueueGenericSend+0xa2>
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	1a d7       	rcall	.+3636   	; 0x1d3a <vTaskInternalSetTimeOutState>
     f06:	19 2d       	mov	r17, r9
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	5b d3       	rcall	.+1718   	; 0x15c4 <vTaskSuspendAll>
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	0f 92       	push	r0
     f14:	f7 01       	movw	r30, r14
     f16:	81 a1       	ldd	r24, Z+33	; 0x21
     f18:	8f 3f       	cpi	r24, 0xFF	; 255
     f1a:	09 f4       	brne	.+2      	; 0xf1e <xQueueGenericSend+0xb8>
     f1c:	11 a2       	std	Z+33, r1	; 0x21
     f1e:	f7 01       	movw	r30, r14
     f20:	82 a1       	ldd	r24, Z+34	; 0x22
     f22:	8f 3f       	cpi	r24, 0xFF	; 255
     f24:	09 f4       	brne	.+2      	; 0xf28 <xQueueGenericSend+0xc2>
     f26:	12 a2       	std	Z+34, r1	; 0x22
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	be 01       	movw	r22, r28
     f2e:	6a 5f       	subi	r22, 0xFA	; 250
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	12 d7       	rcall	.+3620   	; 0x1d5c <xTaskCheckForTimeOut>
     f38:	81 11       	cpse	r24, r1
     f3a:	1b c0       	rjmp	.+54     	; 0xf72 <xQueueGenericSend+0x10c>
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	0f 92       	push	r0
     f42:	f7 01       	movw	r30, r14
     f44:	96 8d       	ldd	r25, Z+30	; 0x1e
     f46:	87 8d       	ldd	r24, Z+31	; 0x1f
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	98 13       	cpse	r25, r24
     f4e:	0d c0       	rjmp	.+26     	; 0xf6a <xQueueGenericSend+0x104>
     f50:	4e 81       	ldd	r20, Y+6	; 0x06
     f52:	5f 81       	ldd	r21, Y+7	; 0x07
     f54:	68 85       	ldd	r22, Y+8	; 0x08
     f56:	79 85       	ldd	r23, Y+9	; 0x09
     f58:	c6 01       	movw	r24, r12
     f5a:	e6 d5       	rcall	.+3020   	; 0x1b28 <vTaskPlaceOnEventList>
     f5c:	c7 01       	movw	r24, r14
     f5e:	d5 de       	rcall	.-598    	; 0xd0a <prvUnlockQueue>
     f60:	75 d4       	rcall	.+2282   	; 0x184c <xTaskResumeAll>
     f62:	81 11       	cpse	r24, r1
     f64:	a0 cf       	rjmp	.-192    	; 0xea6 <xQueueGenericSend+0x40>
     f66:	88 dd       	rcall	.-1264   	; 0xa78 <vPortYield>
     f68:	9e cf       	rjmp	.-196    	; 0xea6 <xQueueGenericSend+0x40>
     f6a:	c7 01       	movw	r24, r14
     f6c:	ce de       	rcall	.-612    	; 0xd0a <prvUnlockQueue>
     f6e:	6e d4       	rcall	.+2268   	; 0x184c <xTaskResumeAll>
     f70:	9a cf       	rjmp	.-204    	; 0xea6 <xQueueGenericSend+0x40>
     f72:	c7 01       	movw	r24, r14
     f74:	ca de       	rcall	.-620    	; 0xd0a <prvUnlockQueue>
     f76:	6a d4       	rcall	.+2260   	; 0x184c <xTaskResumeAll>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	29 96       	adiw	r28, 0x09	; 9
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	bf 90       	pop	r11
     f98:	af 90       	pop	r10
     f9a:	9f 90       	pop	r9
     f9c:	08 95       	ret

00000f9e <xQueueGenericSendFromISR>:
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	8a 01       	movw	r16, r20
     fac:	fc 01       	movw	r30, r24
     fae:	56 8d       	ldd	r21, Z+30	; 0x1e
     fb0:	37 8d       	ldd	r19, Z+31	; 0x1f
     fb2:	53 17       	cp	r21, r19
     fb4:	10 f0       	brcs	.+4      	; 0xfba <xQueueGenericSendFromISR+0x1c>
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	f1 f4       	brne	.+60     	; 0xff6 <xQueueGenericSendFromISR+0x58>
     fba:	42 2f       	mov	r20, r18
     fbc:	78 01       	movw	r14, r16
     fbe:	ec 01       	movw	r28, r24
     fc0:	1a a1       	ldd	r17, Y+34	; 0x22
     fc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc4:	ce 01       	movw	r24, r28
     fc6:	28 de       	rcall	.-944    	; 0xc18 <prvCopyDataToQueue>
     fc8:	1f 3f       	cpi	r17, 0xFF	; 255
     fca:	79 f4       	brne	.+30     	; 0xfea <xQueueGenericSendFromISR+0x4c>
     fcc:	8b 89       	ldd	r24, Y+19	; 0x13
     fce:	88 23       	and	r24, r24
     fd0:	a1 f0       	breq	.+40     	; 0xffa <xQueueGenericSendFromISR+0x5c>
     fd2:	ce 01       	movw	r24, r28
     fd4:	43 96       	adiw	r24, 0x13	; 19
     fd6:	01 d6       	rcall	.+3074   	; 0x1bda <xTaskRemoveFromEventList>
     fd8:	88 23       	and	r24, r24
     fda:	89 f0       	breq	.+34     	; 0xffe <xQueueGenericSendFromISR+0x60>
     fdc:	e1 14       	cp	r14, r1
     fde:	f1 04       	cpc	r15, r1
     fe0:	81 f0       	breq	.+32     	; 0x1002 <xQueueGenericSendFromISR+0x64>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	f7 01       	movw	r30, r14
     fe6:	80 83       	st	Z, r24
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <xQueueGenericSendFromISR+0x66>
     fea:	ff 24       	eor	r15, r15
     fec:	f3 94       	inc	r15
     fee:	f1 0e       	add	r15, r17
     ff0:	fa a2       	std	Y+34, r15	; 0x22
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <xQueueGenericSendFromISR+0x66>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <xQueueGenericSendFromISR+0x66>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <xQueueGenericSendFromISR+0x66>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <xQueueGenericSendFromISR+0x66>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	08 95       	ret

00001012 <xQueueReceive>:
    1012:	9f 92       	push	r9
    1014:	af 92       	push	r10
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	29 97       	sbiw	r28, 0x09	; 9
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	8c 01       	movw	r16, r24
    103a:	5b 01       	movw	r10, r22
    103c:	2e 83       	std	Y+6, r18	; 0x06
    103e:	3f 83       	std	Y+7, r19	; 0x07
    1040:	48 87       	std	Y+8, r20	; 0x08
    1042:	59 87       	std	Y+9, r21	; 0x09
    1044:	e1 2c       	mov	r14, r1
    1046:	99 24       	eor	r9, r9
    1048:	93 94       	inc	r9
    104a:	6c 01       	movw	r12, r24
    104c:	83 e1       	ldi	r24, 0x13	; 19
    104e:	c8 0e       	add	r12, r24
    1050:	d1 1c       	adc	r13, r1
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	0f 92       	push	r0
    1058:	f8 01       	movw	r30, r16
    105a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    105c:	ff 20       	and	r15, r15
    105e:	91 f0       	breq	.+36     	; 0x1084 <xQueueReceive+0x72>
    1060:	b5 01       	movw	r22, r10
    1062:	c8 01       	movw	r24, r16
    1064:	38 de       	rcall	.-912    	; 0xcd6 <prvCopyDataFromQueue>
    1066:	fa 94       	dec	r15
    1068:	f8 01       	movw	r30, r16
    106a:	f6 8e       	std	Z+30, r15	; 0x1e
    106c:	80 85       	ldd	r24, Z+8	; 0x08
    106e:	88 23       	and	r24, r24
    1070:	29 f0       	breq	.+10     	; 0x107c <xQueueReceive+0x6a>
    1072:	c8 01       	movw	r24, r16
    1074:	08 96       	adiw	r24, 0x08	; 8
    1076:	b1 d5       	rcall	.+2914   	; 0x1bda <xTaskRemoveFromEventList>
    1078:	81 11       	cpse	r24, r1
    107a:	fe dc       	rcall	.-1540   	; 0xa78 <vPortYield>
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	4a c0       	rjmp	.+148    	; 0x1118 <xQueueReceive+0x106>
    1084:	8e 81       	ldd	r24, Y+6	; 0x06
    1086:	9f 81       	ldd	r25, Y+7	; 0x07
    1088:	a8 85       	ldd	r26, Y+8	; 0x08
    108a:	b9 85       	ldd	r27, Y+9	; 0x09
    108c:	89 2b       	or	r24, r25
    108e:	8a 2b       	or	r24, r26
    1090:	8b 2b       	or	r24, r27
    1092:	21 f4       	brne	.+8      	; 0x109c <xQueueReceive+0x8a>
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	3e c0       	rjmp	.+124    	; 0x1118 <xQueueReceive+0x106>
    109c:	e1 10       	cpse	r14, r1
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <xQueueReceive+0x96>
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	4a d6       	rcall	.+3220   	; 0x1d3a <vTaskInternalSetTimeOutState>
    10a6:	e9 2c       	mov	r14, r9
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	8b d2       	rcall	.+1302   	; 0x15c4 <vTaskSuspendAll>
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	0f 92       	push	r0
    10b4:	f8 01       	movw	r30, r16
    10b6:	81 a1       	ldd	r24, Z+33	; 0x21
    10b8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ba:	09 f4       	brne	.+2      	; 0x10be <xQueueReceive+0xac>
    10bc:	11 a2       	std	Z+33, r1	; 0x21
    10be:	f8 01       	movw	r30, r16
    10c0:	82 a1       	ldd	r24, Z+34	; 0x22
    10c2:	8f 3f       	cpi	r24, 0xFF	; 255
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <xQueueReceive+0xb6>
    10c6:	12 a2       	std	Z+34, r1	; 0x22
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	be 01       	movw	r22, r28
    10ce:	6a 5f       	subi	r22, 0xFA	; 250
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	ce 01       	movw	r24, r28
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	42 d6       	rcall	.+3204   	; 0x1d5c <xTaskCheckForTimeOut>
    10d8:	81 11       	cpse	r24, r1
    10da:	15 c0       	rjmp	.+42     	; 0x1106 <xQueueReceive+0xf4>
    10dc:	c8 01       	movw	r24, r16
    10de:	91 dd       	rcall	.-1246   	; 0xc02 <prvIsQueueEmpty>
    10e0:	88 23       	and	r24, r24
    10e2:	69 f0       	breq	.+26     	; 0x10fe <xQueueReceive+0xec>
    10e4:	4e 81       	ldd	r20, Y+6	; 0x06
    10e6:	5f 81       	ldd	r21, Y+7	; 0x07
    10e8:	68 85       	ldd	r22, Y+8	; 0x08
    10ea:	79 85       	ldd	r23, Y+9	; 0x09
    10ec:	c6 01       	movw	r24, r12
    10ee:	1c d5       	rcall	.+2616   	; 0x1b28 <vTaskPlaceOnEventList>
    10f0:	c8 01       	movw	r24, r16
    10f2:	0b de       	rcall	.-1002   	; 0xd0a <prvUnlockQueue>
    10f4:	ab d3       	rcall	.+1878   	; 0x184c <xTaskResumeAll>
    10f6:	81 11       	cpse	r24, r1
    10f8:	ac cf       	rjmp	.-168    	; 0x1052 <xQueueReceive+0x40>
    10fa:	be dc       	rcall	.-1668   	; 0xa78 <vPortYield>
    10fc:	aa cf       	rjmp	.-172    	; 0x1052 <xQueueReceive+0x40>
    10fe:	c8 01       	movw	r24, r16
    1100:	04 de       	rcall	.-1016   	; 0xd0a <prvUnlockQueue>
    1102:	a4 d3       	rcall	.+1864   	; 0x184c <xTaskResumeAll>
    1104:	a6 cf       	rjmp	.-180    	; 0x1052 <xQueueReceive+0x40>
    1106:	c8 01       	movw	r24, r16
    1108:	00 de       	rcall	.-1024   	; 0xd0a <prvUnlockQueue>
    110a:	a0 d3       	rcall	.+1856   	; 0x184c <xTaskResumeAll>
    110c:	c8 01       	movw	r24, r16
    110e:	79 dd       	rcall	.-1294   	; 0xc02 <prvIsQueueEmpty>
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <xQueueReceive+0x104>
    1114:	9e cf       	rjmp	.-196    	; 0x1052 <xQueueReceive+0x40>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	29 96       	adiw	r28, 0x09	; 9
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	9f 90       	pop	r9
    113a:	08 95       	ret

0000113c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	0f 92       	push	r0
    1148:	89 a1       	ldd	r24, Y+33	; 0x21
    114a:	8f 3f       	cpi	r24, 0xFF	; 255
    114c:	09 f4       	brne	.+2      	; 0x1150 <vQueueWaitForMessageRestricted+0x14>
    114e:	19 a2       	std	Y+33, r1	; 0x21
    1150:	8a a1       	ldd	r24, Y+34	; 0x22
    1152:	8f 3f       	cpi	r24, 0xFF	; 255
    1154:	09 f4       	brne	.+2      	; 0x1158 <vQueueWaitForMessageRestricted+0x1c>
    1156:	1a a2       	std	Y+34, r1	; 0x22
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    115c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    115e:	81 11       	cpse	r24, r1
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1162:	ce 01       	movw	r24, r28
    1164:	43 96       	adiw	r24, 0x13	; 19
    1166:	f7 d4       	rcall	.+2542   	; 0x1b56 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1168:	ce 01       	movw	r24, r28
    116a:	cf dd       	rcall	.-1122   	; 0xd0a <prvUnlockQueue>
    }
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <prvResetNextTaskUnblockTime>:
    1172:	e0 91 bd 0c 	lds	r30, 0x0CBD	; 0x800cbd <pxDelayedTaskList>
    1176:	f0 91 be 0c 	lds	r31, 0x0CBE	; 0x800cbe <pxDelayedTaskList+0x1>
    117a:	80 81       	ld	r24, Z
    117c:	81 11       	cpse	r24, r1
    117e:	0c c0       	rjmp	.+24     	; 0x1198 <prvResetNextTaskUnblockTime+0x26>
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	dc 01       	movw	r26, r24
    1186:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <xNextTaskUnblockTime>
    118a:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <xNextTaskUnblockTime+0x1>
    118e:	a0 93 89 0c 	sts	0x0C89, r26	; 0x800c89 <xNextTaskUnblockTime+0x2>
    1192:	b0 93 8a 0c 	sts	0x0C8A, r27	; 0x800c8a <xNextTaskUnblockTime+0x3>
    1196:	08 95       	ret
    1198:	e0 91 bd 0c 	lds	r30, 0x0CBD	; 0x800cbd <pxDelayedTaskList>
    119c:	f0 91 be 0c 	lds	r31, 0x0CBE	; 0x800cbe <pxDelayedTaskList+0x1>
    11a0:	07 80       	ldd	r0, Z+7	; 0x07
    11a2:	f0 85       	ldd	r31, Z+8	; 0x08
    11a4:	e0 2d       	mov	r30, r0
    11a6:	80 81       	ld	r24, Z
    11a8:	91 81       	ldd	r25, Z+1	; 0x01
    11aa:	a2 81       	ldd	r26, Z+2	; 0x02
    11ac:	b3 81       	ldd	r27, Z+3	; 0x03
    11ae:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <xNextTaskUnblockTime>
    11b2:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <xNextTaskUnblockTime+0x1>
    11b6:	a0 93 89 0c 	sts	0x0C89, r26	; 0x800c89 <xNextTaskUnblockTime+0x2>
    11ba:	b0 93 8a 0c 	sts	0x0C8A, r27	; 0x800c8a <xNextTaskUnblockTime+0x3>
    11be:	08 95       	ret

000011c0 <prvAddCurrentTaskToDelayedList>:
    11c0:	8f 92       	push	r8
    11c2:	9f 92       	push	r9
    11c4:	af 92       	push	r10
    11c6:	bf 92       	push	r11
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	6b 01       	movw	r12, r22
    11d6:	7c 01       	movw	r14, r24
    11d8:	c4 2f       	mov	r28, r20
    11da:	80 90 94 0c 	lds	r8, 0x0C94	; 0x800c94 <xTickCount>
    11de:	90 90 95 0c 	lds	r9, 0x0C95	; 0x800c95 <xTickCount+0x1>
    11e2:	a0 90 96 0c 	lds	r10, 0x0C96	; 0x800c96 <xTickCount+0x2>
    11e6:	b0 90 97 0c 	lds	r11, 0x0C97	; 0x800c97 <xTickCount+0x3>
    11ea:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTCB>
    11ee:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    11f2:	02 96       	adiw	r24, 0x02	; 2
    11f4:	c7 db       	rcall	.-2162   	; 0x984 <uxListRemove>
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	c8 16       	cp	r12, r24
    11fa:	d8 06       	cpc	r13, r24
    11fc:	e8 06       	cpc	r14, r24
    11fe:	f8 06       	cpc	r15, r24
    1200:	b1 f5       	brne	.+108    	; 0x126e <prvAddCurrentTaskToDelayedList+0xae>
    1202:	cc 23       	and	r28, r28
    1204:	a1 f1       	breq	.+104    	; 0x126e <prvAddCurrentTaskToDelayedList+0xae>
    1206:	e9 e9       	ldi	r30, 0x99	; 153
    1208:	fc e0       	ldi	r31, 0x0C	; 12
    120a:	a1 81       	ldd	r26, Z+1	; 0x01
    120c:	b2 81       	ldd	r27, Z+2	; 0x02
    120e:	c0 91 43 0d 	lds	r28, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1212:	d0 91 44 0d 	lds	r29, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1216:	bf 83       	std	Y+7, r27	; 0x07
    1218:	ae 83       	std	Y+6, r26	; 0x06
    121a:	c0 91 43 0d 	lds	r28, 0x0D43	; 0x800d43 <pxCurrentTCB>
    121e:	d0 91 44 0d 	lds	r29, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1222:	16 96       	adiw	r26, 0x06	; 6
    1224:	8d 91       	ld	r24, X+
    1226:	9c 91       	ld	r25, X
    1228:	17 97       	sbiw	r26, 0x07	; 7
    122a:	99 87       	std	Y+9, r25	; 0x09
    122c:	88 87       	std	Y+8, r24	; 0x08
    122e:	16 96       	adiw	r26, 0x06	; 6
    1230:	cd 91       	ld	r28, X+
    1232:	dc 91       	ld	r29, X
    1234:	17 97       	sbiw	r26, 0x07	; 7
    1236:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTCB>
    123a:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    123e:	02 96       	adiw	r24, 0x02	; 2
    1240:	9d 83       	std	Y+5, r25	; 0x05
    1242:	8c 83       	std	Y+4, r24	; 0x04
    1244:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1248:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    124c:	02 96       	adiw	r24, 0x02	; 2
    124e:	17 96       	adiw	r26, 0x07	; 7
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
    1254:	16 97       	sbiw	r26, 0x06	; 6
    1256:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    125a:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    125e:	1d 96       	adiw	r26, 0x0d	; 13
    1260:	fc 93       	st	X, r31
    1262:	ee 93       	st	-X, r30
    1264:	1c 97       	sbiw	r26, 0x0c	; 12
    1266:	80 81       	ld	r24, Z
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	80 83       	st	Z, r24
    126c:	3d c0       	rjmp	.+122    	; 0x12e8 <prvAddCurrentTaskToDelayedList+0x128>
    126e:	c8 0c       	add	r12, r8
    1270:	d9 1c       	adc	r13, r9
    1272:	ea 1c       	adc	r14, r10
    1274:	fb 1c       	adc	r15, r11
    1276:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTCB>
    127a:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    127e:	c2 82       	std	Z+2, r12	; 0x02
    1280:	d3 82       	std	Z+3, r13	; 0x03
    1282:	e4 82       	std	Z+4, r14	; 0x04
    1284:	f5 82       	std	Z+5, r15	; 0x05
    1286:	c8 14       	cp	r12, r8
    1288:	d9 04       	cpc	r13, r9
    128a:	ea 04       	cpc	r14, r10
    128c:	fb 04       	cpc	r15, r11
    128e:	60 f4       	brcc	.+24     	; 0x12a8 <prvAddCurrentTaskToDelayedList+0xe8>
    1290:	60 91 43 0d 	lds	r22, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1294:	70 91 44 0d 	lds	r23, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1298:	80 91 bb 0c 	lds	r24, 0x0CBB	; 0x800cbb <pxOverflowDelayedTaskList>
    129c:	90 91 bc 0c 	lds	r25, 0x0CBC	; 0x800cbc <pxOverflowDelayedTaskList+0x1>
    12a0:	6e 5f       	subi	r22, 0xFE	; 254
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	32 db       	rcall	.-2460   	; 0x90a <vListInsert>
    12a6:	20 c0       	rjmp	.+64     	; 0x12e8 <prvAddCurrentTaskToDelayedList+0x128>
    12a8:	60 91 43 0d 	lds	r22, 0x0D43	; 0x800d43 <pxCurrentTCB>
    12ac:	70 91 44 0d 	lds	r23, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    12b0:	80 91 bd 0c 	lds	r24, 0x0CBD	; 0x800cbd <pxDelayedTaskList>
    12b4:	90 91 be 0c 	lds	r25, 0x0CBE	; 0x800cbe <pxDelayedTaskList+0x1>
    12b8:	6e 5f       	subi	r22, 0xFE	; 254
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	26 db       	rcall	.-2484   	; 0x90a <vListInsert>
    12be:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <xNextTaskUnblockTime>
    12c2:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <xNextTaskUnblockTime+0x1>
    12c6:	a0 91 89 0c 	lds	r26, 0x0C89	; 0x800c89 <xNextTaskUnblockTime+0x2>
    12ca:	b0 91 8a 0c 	lds	r27, 0x0C8A	; 0x800c8a <xNextTaskUnblockTime+0x3>
    12ce:	c8 16       	cp	r12, r24
    12d0:	d9 06       	cpc	r13, r25
    12d2:	ea 06       	cpc	r14, r26
    12d4:	fb 06       	cpc	r15, r27
    12d6:	40 f4       	brcc	.+16     	; 0x12e8 <prvAddCurrentTaskToDelayedList+0x128>
    12d8:	c0 92 87 0c 	sts	0x0C87, r12	; 0x800c87 <xNextTaskUnblockTime>
    12dc:	d0 92 88 0c 	sts	0x0C88, r13	; 0x800c88 <xNextTaskUnblockTime+0x1>
    12e0:	e0 92 89 0c 	sts	0x0C89, r14	; 0x800c89 <xNextTaskUnblockTime+0x2>
    12e4:	f0 92 8a 0c 	sts	0x0C8A, r15	; 0x800c8a <xNextTaskUnblockTime+0x3>
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	9f 90       	pop	r9
    12fa:	8f 90       	pop	r8
    12fc:	08 95       	ret

000012fe <xTaskCreate>:
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	4c 01       	movw	r8, r24
    1320:	6b 01       	movw	r12, r22
    1322:	5a 01       	movw	r10, r20
    1324:	29 01       	movw	r4, r18
    1326:	ca 01       	movw	r24, r20
    1328:	de d9       	rcall	.-3140   	; 0x6e6 <pvPortMalloc>
    132a:	3c 01       	movw	r6, r24
    132c:	89 2b       	or	r24, r25
    132e:	09 f4       	brne	.+2      	; 0x1332 <xTaskCreate+0x34>
    1330:	01 c1       	rjmp	.+514    	; 0x1534 <xTaskCreate+0x236>
    1332:	84 e3       	ldi	r24, 0x34	; 52
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	d7 d9       	rcall	.-3154   	; 0x6e6 <pvPortMalloc>
    1338:	ec 01       	movw	r28, r24
    133a:	89 2b       	or	r24, r25
    133c:	99 f0       	breq	.+38     	; 0x1364 <xTaskCreate+0x66>
    133e:	7c 8e       	std	Y+28, r7	; 0x1c
    1340:	6b 8e       	std	Y+27, r6	; 0x1b
    1342:	a5 01       	movw	r20, r10
    1344:	65 ea       	ldi	r22, 0xA5	; 165
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	c3 01       	movw	r24, r6
    134a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <memset>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	a8 1a       	sub	r10, r24
    1352:	b1 08       	sbc	r11, r1
    1354:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1356:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1358:	a8 0e       	add	r10, r24
    135a:	b9 1e       	adc	r11, r25
    135c:	c1 14       	cp	r12, r1
    135e:	d1 04       	cpc	r13, r1
    1360:	21 f4       	brne	.+8      	; 0x136a <xTaskCreate+0x6c>
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <xTaskCreate+0xa4>
    1364:	c3 01       	movw	r24, r6
    1366:	84 da       	rcall	.-2808   	; 0x870 <vPortFree>
    1368:	e5 c0       	rjmp	.+458    	; 0x1534 <xTaskCreate+0x236>
    136a:	d6 01       	movw	r26, r12
    136c:	8c 91       	ld	r24, X
    136e:	8d 8f       	std	Y+29, r24	; 0x1d
    1370:	8c 91       	ld	r24, X
    1372:	88 23       	and	r24, r24
    1374:	a1 f0       	breq	.+40     	; 0x139e <xTaskCreate+0xa0>
    1376:	ae 01       	movw	r20, r28
    1378:	42 5e       	subi	r20, 0xE2	; 226
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	f6 01       	movw	r30, r12
    137e:	31 96       	adiw	r30, 0x01	; 1
    1380:	b0 e1       	ldi	r27, 0x10	; 16
    1382:	cb 0e       	add	r12, r27
    1384:	d1 1c       	adc	r13, r1
    1386:	cf 01       	movw	r24, r30
    1388:	21 91       	ld	r18, Z+
    138a:	da 01       	movw	r26, r20
    138c:	2d 93       	st	X+, r18
    138e:	ad 01       	movw	r20, r26
    1390:	dc 01       	movw	r26, r24
    1392:	8c 91       	ld	r24, X
    1394:	88 23       	and	r24, r24
    1396:	19 f0       	breq	.+6      	; 0x139e <xTaskCreate+0xa0>
    1398:	ce 16       	cp	r12, r30
    139a:	df 06       	cpc	r13, r31
    139c:	a1 f7       	brne	.-24     	; 0x1386 <xTaskCreate+0x88>
    139e:	1c a6       	std	Y+44, r1	; 0x2c
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <xTaskCreate+0xa6>
    13a2:	1d 8e       	std	Y+29, r1	; 0x1d
    13a4:	0a 30       	cpi	r16, 0x0A	; 10
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <xTaskCreate+0xac>
    13a8:	09 e0       	ldi	r16, 0x09	; 9
    13aa:	0a 8f       	std	Y+26, r16	; 0x1a
    13ac:	0d a7       	std	Y+45, r16	; 0x2d
    13ae:	1e a6       	std	Y+46, r1	; 0x2e
    13b0:	6e 01       	movw	r12, r28
    13b2:	b2 e0       	ldi	r27, 0x02	; 2
    13b4:	cb 0e       	add	r12, r27
    13b6:	d1 1c       	adc	r13, r1
    13b8:	c6 01       	movw	r24, r12
    13ba:	a3 da       	rcall	.-2746   	; 0x902 <vListInitialiseItem>
    13bc:	ce 01       	movw	r24, r28
    13be:	0e 96       	adiw	r24, 0x0e	; 14
    13c0:	a0 da       	rcall	.-2752   	; 0x902 <vListInitialiseItem>
    13c2:	db 87       	std	Y+11, r29	; 0x0b
    13c4:	ca 87       	std	Y+10, r28	; 0x0a
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	80 1b       	sub	r24, r16
    13d0:	91 09       	sbc	r25, r1
    13d2:	a1 09       	sbc	r26, r1
    13d4:	b1 09       	sbc	r27, r1
    13d6:	8e 87       	std	Y+14, r24	; 0x0e
    13d8:	9f 87       	std	Y+15, r25	; 0x0f
    13da:	a8 8b       	std	Y+16, r26	; 0x10
    13dc:	b9 8b       	std	Y+17, r27	; 0x11
    13de:	df 8b       	std	Y+23, r29	; 0x17
    13e0:	ce 8b       	std	Y+22, r28	; 0x16
    13e2:	84 e0       	ldi	r24, 0x04	; 4
    13e4:	fe 01       	movw	r30, r28
    13e6:	bf 96       	adiw	r30, 0x2f	; 47
    13e8:	df 01       	movw	r26, r30
    13ea:	1d 92       	st	X+, r1
    13ec:	8a 95       	dec	r24
    13ee:	e9 f7       	brne	.-6      	; 0x13ea <xTaskCreate+0xec>
    13f0:	1b aa       	std	Y+51, r1	; 0x33
    13f2:	a2 01       	movw	r20, r4
    13f4:	b4 01       	movw	r22, r8
    13f6:	c5 01       	movw	r24, r10
    13f8:	ec da       	rcall	.-2600   	; 0x9d2 <pxPortInitialiseStack>
    13fa:	99 83       	std	Y+1, r25	; 0x01
    13fc:	88 83       	st	Y, r24
    13fe:	e1 14       	cp	r14, r1
    1400:	f1 04       	cpc	r15, r1
    1402:	19 f0       	breq	.+6      	; 0x140a <xTaskCreate+0x10c>
    1404:	f7 01       	movw	r30, r14
    1406:	d1 83       	std	Z+1, r29	; 0x01
    1408:	c0 83       	st	Z, r28
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	0f 92       	push	r0
    1410:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uxCurrentNumberOfTasks>
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	80 93 98 0c 	sts	0x0C98, r24	; 0x800c98 <uxCurrentNumberOfTasks>
    141a:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTCB>
    141e:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1422:	89 2b       	or	r24, r25
    1424:	a1 f5       	brne	.+104    	; 0x148e <xTaskCreate+0x190>
    1426:	d0 93 44 0d 	sts	0x0D44, r29	; 0x800d44 <pxCurrentTCB+0x1>
    142a:	c0 93 43 0d 	sts	0x0D43, r28	; 0x800d43 <pxCurrentTCB>
    142e:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uxCurrentNumberOfTasks>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	09 f0       	breq	.+2      	; 0x1438 <xTaskCreate+0x13a>
    1436:	3b c0       	rjmp	.+118    	; 0x14ae <xTaskCreate+0x1b0>
    1438:	05 ed       	ldi	r16, 0xD5	; 213
    143a:	1c e0       	ldi	r17, 0x0C	; 12
    143c:	0f 2e       	mov	r0, r31
    143e:	f3 e4       	ldi	r31, 0x43	; 67
    1440:	ef 2e       	mov	r14, r31
    1442:	fd e0       	ldi	r31, 0x0D	; 13
    1444:	ff 2e       	mov	r15, r31
    1446:	f0 2d       	mov	r31, r0
    1448:	c8 01       	movw	r24, r16
    144a:	4a da       	rcall	.-2924   	; 0x8e0 <vListInitialise>
    144c:	05 5f       	subi	r16, 0xF5	; 245
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	0e 15       	cp	r16, r14
    1452:	1f 05       	cpc	r17, r15
    1454:	c9 f7       	brne	.-14     	; 0x1448 <xTaskCreate+0x14a>
    1456:	8a ec       	ldi	r24, 0xCA	; 202
    1458:	9c e0       	ldi	r25, 0x0C	; 12
    145a:	42 da       	rcall	.-2940   	; 0x8e0 <vListInitialise>
    145c:	8f eb       	ldi	r24, 0xBF	; 191
    145e:	9c e0       	ldi	r25, 0x0C	; 12
    1460:	3f da       	rcall	.-2946   	; 0x8e0 <vListInitialise>
    1462:	80 eb       	ldi	r24, 0xB0	; 176
    1464:	9c e0       	ldi	r25, 0x0C	; 12
    1466:	3c da       	rcall	.-2952   	; 0x8e0 <vListInitialise>
    1468:	85 ea       	ldi	r24, 0xA5	; 165
    146a:	9c e0       	ldi	r25, 0x0C	; 12
    146c:	39 da       	rcall	.-2958   	; 0x8e0 <vListInitialise>
    146e:	89 e9       	ldi	r24, 0x99	; 153
    1470:	9c e0       	ldi	r25, 0x0C	; 12
    1472:	36 da       	rcall	.-2964   	; 0x8e0 <vListInitialise>
    1474:	8a ec       	ldi	r24, 0xCA	; 202
    1476:	9c e0       	ldi	r25, 0x0C	; 12
    1478:	90 93 be 0c 	sts	0x0CBE, r25	; 0x800cbe <pxDelayedTaskList+0x1>
    147c:	80 93 bd 0c 	sts	0x0CBD, r24	; 0x800cbd <pxDelayedTaskList>
    1480:	8f eb       	ldi	r24, 0xBF	; 191
    1482:	9c e0       	ldi	r25, 0x0C	; 12
    1484:	90 93 bc 0c 	sts	0x0CBC, r25	; 0x800cbc <pxOverflowDelayedTaskList+0x1>
    1488:	80 93 bb 0c 	sts	0x0CBB, r24	; 0x800cbb <pxOverflowDelayedTaskList>
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <xTaskCreate+0x1b0>
    148e:	80 91 92 0c 	lds	r24, 0x0C92	; 0x800c92 <xSchedulerRunning>
    1492:	81 11       	cpse	r24, r1
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <xTaskCreate+0x1b0>
    1496:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTCB>
    149a:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    149e:	92 8d       	ldd	r25, Z+26	; 0x1a
    14a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14a2:	89 17       	cp	r24, r25
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <xTaskCreate+0x1b0>
    14a6:	d0 93 44 0d 	sts	0x0D44, r29	; 0x800d44 <pxCurrentTCB+0x1>
    14aa:	c0 93 43 0d 	sts	0x0D43, r28	; 0x800d43 <pxCurrentTCB>
    14ae:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <uxTaskNumber>
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <uxTaskNumber>
    14b8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14ba:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <uxTopReadyPriority>
    14be:	8e 17       	cp	r24, r30
    14c0:	10 f4       	brcc	.+4      	; 0x14c6 <xTaskCreate+0x1c8>
    14c2:	e0 93 93 0c 	sts	0x0C93, r30	; 0x800c93 <uxTopReadyPriority>
    14c6:	8b e0       	ldi	r24, 0x0B	; 11
    14c8:	8e 9f       	mul	r24, r30
    14ca:	f0 01       	movw	r30, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	eb 52       	subi	r30, 0x2B	; 43
    14d0:	f3 4f       	sbci	r31, 0xF3	; 243
    14d2:	01 80       	ldd	r0, Z+1	; 0x01
    14d4:	f2 81       	ldd	r31, Z+2	; 0x02
    14d6:	e0 2d       	mov	r30, r0
    14d8:	ff 83       	std	Y+7, r31	; 0x07
    14da:	ee 83       	std	Y+6, r30	; 0x06
    14dc:	26 81       	ldd	r18, Z+6	; 0x06
    14de:	37 81       	ldd	r19, Z+7	; 0x07
    14e0:	39 87       	std	Y+9, r19	; 0x09
    14e2:	28 87       	std	Y+8, r18	; 0x08
    14e4:	a6 81       	ldd	r26, Z+6	; 0x06
    14e6:	b7 81       	ldd	r27, Z+7	; 0x07
    14e8:	15 96       	adiw	r26, 0x05	; 5
    14ea:	dc 92       	st	X, r13
    14ec:	ce 92       	st	-X, r12
    14ee:	14 97       	sbiw	r26, 0x04	; 4
    14f0:	d7 82       	std	Z+7, r13	; 0x07
    14f2:	c6 82       	std	Z+6, r12	; 0x06
    14f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14f6:	8e 9f       	mul	r24, r30
    14f8:	f0 01       	movw	r30, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	eb 52       	subi	r30, 0x2B	; 43
    14fe:	f3 4f       	sbci	r31, 0xF3	; 243
    1500:	fd 87       	std	Y+13, r31	; 0x0d
    1502:	ec 87       	std	Y+12, r30	; 0x0c
    1504:	80 81       	ld	r24, Z
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	80 83       	st	Z, r24
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	80 91 92 0c 	lds	r24, 0x0C92	; 0x800c92 <xSchedulerRunning>
    1512:	88 23       	and	r24, r24
    1514:	59 f0       	breq	.+22     	; 0x152c <xTaskCreate+0x22e>
    1516:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTCB>
    151a:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    151e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1520:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1522:	98 17       	cp	r25, r24
    1524:	28 f4       	brcc	.+10     	; 0x1530 <xTaskCreate+0x232>
    1526:	a8 da       	rcall	.-2736   	; 0xa78 <vPortYield>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <xTaskCreate+0x238>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <xTaskCreate+0x238>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <xTaskCreate+0x238>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	bf 90       	pop	r11
    1548:	af 90       	pop	r10
    154a:	9f 90       	pop	r9
    154c:	8f 90       	pop	r8
    154e:	7f 90       	pop	r7
    1550:	6f 90       	pop	r6
    1552:	5f 90       	pop	r5
    1554:	4f 90       	pop	r4
    1556:	08 95       	ret

00001558 <vTaskStartScheduler>:
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	0f 2e       	mov	r0, r31
    1560:	f5 e8       	ldi	r31, 0x85	; 133
    1562:	ef 2e       	mov	r14, r31
    1564:	fc e0       	ldi	r31, 0x0C	; 12
    1566:	ff 2e       	mov	r15, r31
    1568:	f0 2d       	mov	r31, r0
    156a:	00 e0       	ldi	r16, 0x00	; 0
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 ec       	ldi	r20, 0xC0	; 192
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	6b e8       	ldi	r22, 0x8B	; 139
    1576:	72 e0       	ldi	r23, 0x02	; 2
    1578:	8d ec       	ldi	r24, 0xCD	; 205
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	c0 de       	rcall	.-640    	; 0x12fe <xTaskCreate>
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	d9 f4       	brne	.+54     	; 0x15b8 <vTaskStartScheduler+0x60>
    1582:	24 d5       	rcall	.+2632   	; 0x1fcc <xTimerCreateTimerTask>
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	c1 f4       	brne	.+48     	; 0x15b8 <vTaskStartScheduler+0x60>
    1588:	f8 94       	cli
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	9f ef       	ldi	r25, 0xFF	; 255
    158e:	dc 01       	movw	r26, r24
    1590:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <xNextTaskUnblockTime>
    1594:	90 93 88 0c 	sts	0x0C88, r25	; 0x800c88 <xNextTaskUnblockTime+0x1>
    1598:	a0 93 89 0c 	sts	0x0C89, r26	; 0x800c89 <xNextTaskUnblockTime+0x2>
    159c:	b0 93 8a 0c 	sts	0x0C8A, r27	; 0x800c8a <xNextTaskUnblockTime+0x3>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 92 0c 	sts	0x0C92, r24	; 0x800c92 <xSchedulerRunning>
    15a6:	10 92 94 0c 	sts	0x0C94, r1	; 0x800c94 <xTickCount>
    15aa:	10 92 95 0c 	sts	0x0C95, r1	; 0x800c95 <xTickCount+0x1>
    15ae:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <xTickCount+0x2>
    15b2:	10 92 97 0c 	sts	0x0C97, r1	; 0x800c97 <xTickCount+0x3>
    15b6:	24 da       	rcall	.-3000   	; 0xa00 <xPortStartScheduler>
    15b8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	08 95       	ret

000015c4 <vTaskSuspendAll>:
    15c4:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	80 93 84 0c 	sts	0x0C84, r24	; 0x800c84 <uxSchedulerSuspended>
    15ce:	08 95       	ret

000015d0 <xTaskGetTickCount>:
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	0f 92       	push	r0
    15d6:	60 91 94 0c 	lds	r22, 0x0C94	; 0x800c94 <xTickCount>
    15da:	70 91 95 0c 	lds	r23, 0x0C95	; 0x800c95 <xTickCount+0x1>
    15de:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <xTickCount+0x2>
    15e2:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <xTickCount+0x3>
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	08 95       	ret

000015ec <xTaskIncrementTick>:
    15ec:	cf 92       	push	r12
    15ee:	df 92       	push	r13
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    1600:	81 11       	cpse	r24, r1
    1602:	07 c1       	rjmp	.+526    	; 0x1812 <xTaskIncrementTick+0x226>
    1604:	c0 90 94 0c 	lds	r12, 0x0C94	; 0x800c94 <xTickCount>
    1608:	d0 90 95 0c 	lds	r13, 0x0C95	; 0x800c95 <xTickCount+0x1>
    160c:	e0 90 96 0c 	lds	r14, 0x0C96	; 0x800c96 <xTickCount+0x2>
    1610:	f0 90 97 0c 	lds	r15, 0x0C97	; 0x800c97 <xTickCount+0x3>
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	c8 1a       	sub	r12, r24
    1618:	d8 0a       	sbc	r13, r24
    161a:	e8 0a       	sbc	r14, r24
    161c:	f8 0a       	sbc	r15, r24
    161e:	c0 92 94 0c 	sts	0x0C94, r12	; 0x800c94 <xTickCount>
    1622:	d0 92 95 0c 	sts	0x0C95, r13	; 0x800c95 <xTickCount+0x1>
    1626:	e0 92 96 0c 	sts	0x0C96, r14	; 0x800c96 <xTickCount+0x2>
    162a:	f0 92 97 0c 	sts	0x0C97, r15	; 0x800c97 <xTickCount+0x3>
    162e:	c1 14       	cp	r12, r1
    1630:	d1 04       	cpc	r13, r1
    1632:	e1 04       	cpc	r14, r1
    1634:	f1 04       	cpc	r15, r1
    1636:	b1 f4       	brne	.+44     	; 0x1664 <xTaskIncrementTick+0x78>
    1638:	80 91 bd 0c 	lds	r24, 0x0CBD	; 0x800cbd <pxDelayedTaskList>
    163c:	90 91 be 0c 	lds	r25, 0x0CBE	; 0x800cbe <pxDelayedTaskList+0x1>
    1640:	20 91 bb 0c 	lds	r18, 0x0CBB	; 0x800cbb <pxOverflowDelayedTaskList>
    1644:	30 91 bc 0c 	lds	r19, 0x0CBC	; 0x800cbc <pxOverflowDelayedTaskList+0x1>
    1648:	30 93 be 0c 	sts	0x0CBE, r19	; 0x800cbe <pxDelayedTaskList+0x1>
    164c:	20 93 bd 0c 	sts	0x0CBD, r18	; 0x800cbd <pxDelayedTaskList>
    1650:	90 93 bc 0c 	sts	0x0CBC, r25	; 0x800cbc <pxOverflowDelayedTaskList+0x1>
    1654:	80 93 bb 0c 	sts	0x0CBB, r24	; 0x800cbb <pxOverflowDelayedTaskList>
    1658:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <xNumOfOverflows>
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <xNumOfOverflows>
    1662:	87 dd       	rcall	.-1266   	; 0x1172 <prvResetNextTaskUnblockTime>
    1664:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <xNextTaskUnblockTime>
    1668:	90 91 88 0c 	lds	r25, 0x0C88	; 0x800c88 <xNextTaskUnblockTime+0x1>
    166c:	a0 91 89 0c 	lds	r26, 0x0C89	; 0x800c89 <xNextTaskUnblockTime+0x2>
    1670:	b0 91 8a 0c 	lds	r27, 0x0C8A	; 0x800c8a <xNextTaskUnblockTime+0x3>
    1674:	c8 16       	cp	r12, r24
    1676:	d9 06       	cpc	r13, r25
    1678:	ea 06       	cpc	r14, r26
    167a:	fb 06       	cpc	r15, r27
    167c:	10 f4       	brcc	.+4      	; 0x1682 <xTaskIncrementTick+0x96>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	b3 c0       	rjmp	.+358    	; 0x17e8 <xTaskIncrementTick+0x1fc>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	4b e0       	ldi	r20, 0x0B	; 11
    1686:	51 e0       	ldi	r21, 0x01	; 1
    1688:	e0 91 bd 0c 	lds	r30, 0x0CBD	; 0x800cbd <pxDelayedTaskList>
    168c:	f0 91 be 0c 	lds	r31, 0x0CBE	; 0x800cbe <pxDelayedTaskList+0x1>
    1690:	90 81       	ld	r25, Z
    1692:	91 11       	cpse	r25, r1
    1694:	0c c0       	rjmp	.+24     	; 0x16ae <xTaskIncrementTick+0xc2>
    1696:	4f ef       	ldi	r20, 0xFF	; 255
    1698:	5f ef       	ldi	r21, 0xFF	; 255
    169a:	ba 01       	movw	r22, r20
    169c:	40 93 87 0c 	sts	0x0C87, r20	; 0x800c87 <xNextTaskUnblockTime>
    16a0:	50 93 88 0c 	sts	0x0C88, r21	; 0x800c88 <xNextTaskUnblockTime+0x1>
    16a4:	60 93 89 0c 	sts	0x0C89, r22	; 0x800c89 <xNextTaskUnblockTime+0x2>
    16a8:	70 93 8a 0c 	sts	0x0C8A, r23	; 0x800c8a <xNextTaskUnblockTime+0x3>
    16ac:	9d c0       	rjmp	.+314    	; 0x17e8 <xTaskIncrementTick+0x1fc>
    16ae:	e0 91 bd 0c 	lds	r30, 0x0CBD	; 0x800cbd <pxDelayedTaskList>
    16b2:	f0 91 be 0c 	lds	r31, 0x0CBE	; 0x800cbe <pxDelayedTaskList+0x1>
    16b6:	07 80       	ldd	r0, Z+7	; 0x07
    16b8:	f0 85       	ldd	r31, Z+8	; 0x08
    16ba:	e0 2d       	mov	r30, r0
    16bc:	00 84       	ldd	r0, Z+8	; 0x08
    16be:	f1 85       	ldd	r31, Z+9	; 0x09
    16c0:	e0 2d       	mov	r30, r0
    16c2:	02 81       	ldd	r16, Z+2	; 0x02
    16c4:	13 81       	ldd	r17, Z+3	; 0x03
    16c6:	24 81       	ldd	r18, Z+4	; 0x04
    16c8:	35 81       	ldd	r19, Z+5	; 0x05
    16ca:	c0 16       	cp	r12, r16
    16cc:	d1 06       	cpc	r13, r17
    16ce:	e2 06       	cpc	r14, r18
    16d0:	f3 06       	cpc	r15, r19
    16d2:	48 f4       	brcc	.+18     	; 0x16e6 <xTaskIncrementTick+0xfa>
    16d4:	00 93 87 0c 	sts	0x0C87, r16	; 0x800c87 <xNextTaskUnblockTime>
    16d8:	10 93 88 0c 	sts	0x0C88, r17	; 0x800c88 <xNextTaskUnblockTime+0x1>
    16dc:	20 93 89 0c 	sts	0x0C89, r18	; 0x800c89 <xNextTaskUnblockTime+0x2>
    16e0:	30 93 8a 0c 	sts	0x0C8A, r19	; 0x800c8a <xNextTaskUnblockTime+0x3>
    16e4:	81 c0       	rjmp	.+258    	; 0x17e8 <xTaskIncrementTick+0x1fc>
    16e6:	a4 85       	ldd	r26, Z+12	; 0x0c
    16e8:	b5 85       	ldd	r27, Z+13	; 0x0d
    16ea:	c6 81       	ldd	r28, Z+6	; 0x06
    16ec:	d7 81       	ldd	r29, Z+7	; 0x07
    16ee:	20 85       	ldd	r18, Z+8	; 0x08
    16f0:	31 85       	ldd	r19, Z+9	; 0x09
    16f2:	3f 83       	std	Y+7, r19	; 0x07
    16f4:	2e 83       	std	Y+6, r18	; 0x06
    16f6:	c0 85       	ldd	r28, Z+8	; 0x08
    16f8:	d1 85       	ldd	r29, Z+9	; 0x09
    16fa:	26 81       	ldd	r18, Z+6	; 0x06
    16fc:	37 81       	ldd	r19, Z+7	; 0x07
    16fe:	3d 83       	std	Y+5, r19	; 0x05
    1700:	2c 83       	std	Y+4, r18	; 0x04
    1702:	9f 01       	movw	r18, r30
    1704:	2e 5f       	subi	r18, 0xFE	; 254
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	6d 91       	ld	r22, X+
    170c:	7c 91       	ld	r23, X
    170e:	12 97       	sbiw	r26, 0x02	; 2
    1710:	62 17       	cp	r22, r18
    1712:	73 07       	cpc	r23, r19
    1714:	31 f4       	brne	.+12     	; 0x1722 <xTaskIncrementTick+0x136>
    1716:	60 85       	ldd	r22, Z+8	; 0x08
    1718:	71 85       	ldd	r23, Z+9	; 0x09
    171a:	12 96       	adiw	r26, 0x02	; 2
    171c:	7c 93       	st	X, r23
    171e:	6e 93       	st	-X, r22
    1720:	11 97       	sbiw	r26, 0x01	; 1
    1722:	15 86       	std	Z+13, r1	; 0x0d
    1724:	14 86       	std	Z+12, r1	; 0x0c
    1726:	9c 91       	ld	r25, X
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	9c 93       	st	X, r25
    172c:	a0 8d       	ldd	r26, Z+24	; 0x18
    172e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1730:	10 97       	sbiw	r26, 0x00	; 0
    1732:	09 f1       	breq	.+66     	; 0x1776 <xTaskIncrementTick+0x18a>
    1734:	c2 89       	ldd	r28, Z+18	; 0x12
    1736:	d3 89       	ldd	r29, Z+19	; 0x13
    1738:	64 89       	ldd	r22, Z+20	; 0x14
    173a:	75 89       	ldd	r23, Z+21	; 0x15
    173c:	7f 83       	std	Y+7, r23	; 0x07
    173e:	6e 83       	std	Y+6, r22	; 0x06
    1740:	c4 89       	ldd	r28, Z+20	; 0x14
    1742:	d5 89       	ldd	r29, Z+21	; 0x15
    1744:	62 89       	ldd	r22, Z+18	; 0x12
    1746:	73 89       	ldd	r23, Z+19	; 0x13
    1748:	7d 83       	std	Y+5, r23	; 0x05
    174a:	6c 83       	std	Y+4, r22	; 0x04
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	cd 91       	ld	r28, X+
    1750:	dc 91       	ld	r29, X
    1752:	12 97       	sbiw	r26, 0x02	; 2
    1754:	bf 01       	movw	r22, r30
    1756:	62 5f       	subi	r22, 0xF2	; 242
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	c6 17       	cp	r28, r22
    175c:	d7 07       	cpc	r29, r23
    175e:	31 f4       	brne	.+12     	; 0x176c <xTaskIncrementTick+0x180>
    1760:	64 89       	ldd	r22, Z+20	; 0x14
    1762:	75 89       	ldd	r23, Z+21	; 0x15
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	7c 93       	st	X, r23
    1768:	6e 93       	st	-X, r22
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	11 8e       	std	Z+25, r1	; 0x19
    176e:	10 8e       	std	Z+24, r1	; 0x18
    1770:	9c 91       	ld	r25, X
    1772:	91 50       	subi	r25, 0x01	; 1
    1774:	9c 93       	st	X, r25
    1776:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1778:	90 91 93 0c 	lds	r25, 0x0C93	; 0x800c93 <uxTopReadyPriority>
    177c:	9a 17       	cp	r25, r26
    177e:	10 f4       	brcc	.+4      	; 0x1784 <xTaskIncrementTick+0x198>
    1780:	a0 93 93 0c 	sts	0x0C93, r26	; 0x800c93 <uxTopReadyPriority>
    1784:	4a 9f       	mul	r20, r26
    1786:	d0 01       	movw	r26, r0
    1788:	11 24       	eor	r1, r1
    178a:	ab 52       	subi	r26, 0x2B	; 43
    178c:	b3 4f       	sbci	r27, 0xF3	; 243
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	0d 90       	ld	r0, X+
    1792:	bc 91       	ld	r27, X
    1794:	a0 2d       	mov	r26, r0
    1796:	b7 83       	std	Z+7, r27	; 0x07
    1798:	a6 83       	std	Z+6, r26	; 0x06
    179a:	16 96       	adiw	r26, 0x06	; 6
    179c:	6d 91       	ld	r22, X+
    179e:	7c 91       	ld	r23, X
    17a0:	17 97       	sbiw	r26, 0x07	; 7
    17a2:	71 87       	std	Z+9, r23	; 0x09
    17a4:	60 87       	std	Z+8, r22	; 0x08
    17a6:	16 96       	adiw	r26, 0x06	; 6
    17a8:	cd 91       	ld	r28, X+
    17aa:	dc 91       	ld	r29, X
    17ac:	17 97       	sbiw	r26, 0x07	; 7
    17ae:	3d 83       	std	Y+5, r19	; 0x05
    17b0:	2c 83       	std	Y+4, r18	; 0x04
    17b2:	17 96       	adiw	r26, 0x07	; 7
    17b4:	3c 93       	st	X, r19
    17b6:	2e 93       	st	-X, r18
    17b8:	16 97       	sbiw	r26, 0x06	; 6
    17ba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17bc:	4a 9f       	mul	r20, r26
    17be:	d0 01       	movw	r26, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	ab 52       	subi	r26, 0x2B	; 43
    17c4:	b3 4f       	sbci	r27, 0xF3	; 243
    17c6:	b5 87       	std	Z+13, r27	; 0x0d
    17c8:	a4 87       	std	Z+12, r26	; 0x0c
    17ca:	9c 91       	ld	r25, X
    17cc:	9f 5f       	subi	r25, 0xFF	; 255
    17ce:	9c 93       	st	X, r25
    17d0:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    17d4:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    17d8:	22 8d       	ldd	r18, Z+26	; 0x1a
    17da:	5a 96       	adiw	r26, 0x1a	; 26
    17dc:	9c 91       	ld	r25, X
    17de:	29 17       	cp	r18, r25
    17e0:	08 f4       	brcc	.+2      	; 0x17e4 <xTaskIncrementTick+0x1f8>
    17e2:	52 cf       	rjmp	.-348    	; 0x1688 <xTaskIncrementTick+0x9c>
    17e4:	85 2f       	mov	r24, r21
    17e6:	50 cf       	rjmp	.-352    	; 0x1688 <xTaskIncrementTick+0x9c>
    17e8:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTCB>
    17ec:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    17f0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    17f2:	9b e0       	ldi	r25, 0x0B	; 11
    17f4:	e9 9f       	mul	r30, r25
    17f6:	f0 01       	movw	r30, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	eb 52       	subi	r30, 0x2B	; 43
    17fc:	f3 4f       	sbci	r31, 0xF3	; 243
    17fe:	90 81       	ld	r25, Z
    1800:	92 30       	cpi	r25, 0x02	; 2
    1802:	08 f0       	brcs	.+2      	; 0x1806 <xTaskIncrementTick+0x21a>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 91 8d 0c 	lds	r25, 0x0C8D	; 0x800c8d <xYieldPending>
    180a:	99 23       	and	r25, r25
    180c:	b1 f0       	breq	.+44     	; 0x183a <xTaskIncrementTick+0x24e>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	14 c0       	rjmp	.+40     	; 0x183a <xTaskIncrementTick+0x24e>
    1812:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <xPendedTicks>
    1816:	90 91 8f 0c 	lds	r25, 0x0C8F	; 0x800c8f <xPendedTicks+0x1>
    181a:	a0 91 90 0c 	lds	r26, 0x0C90	; 0x800c90 <xPendedTicks+0x2>
    181e:	b0 91 91 0c 	lds	r27, 0x0C91	; 0x800c91 <xPendedTicks+0x3>
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	a1 1d       	adc	r26, r1
    1826:	b1 1d       	adc	r27, r1
    1828:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <xPendedTicks>
    182c:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <xPendedTicks+0x1>
    1830:	a0 93 90 0c 	sts	0x0C90, r26	; 0x800c90 <xPendedTicks+0x2>
    1834:	b0 93 91 0c 	sts	0x0C91, r27	; 0x800c91 <xPendedTicks+0x3>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <xTaskResumeAll>:
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	0f 92       	push	r0
    1862:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    1866:	81 50       	subi	r24, 0x01	; 1
    1868:	80 93 84 0c 	sts	0x0C84, r24	; 0x800c84 <uxSchedulerSuspended>
    186c:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    1870:	81 11       	cpse	r24, r1
    1872:	c3 c0       	rjmp	.+390    	; 0x19fa <xTaskResumeAll+0x1ae>
    1874:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uxCurrentNumberOfTasks>
    1878:	81 11       	cpse	r24, r1
    187a:	8b c0       	rjmp	.+278    	; 0x1992 <xTaskResumeAll+0x146>
    187c:	c1 c0       	rjmp	.+386    	; 0x1a00 <xTaskResumeAll+0x1b4>
    187e:	d8 01       	movw	r26, r16
    1880:	17 96       	adiw	r26, 0x07	; 7
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	18 97       	sbiw	r26, 0x08	; 8
    1888:	00 84       	ldd	r0, Z+8	; 0x08
    188a:	f1 85       	ldd	r31, Z+9	; 0x09
    188c:	e0 2d       	mov	r30, r0
    188e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1890:	b1 8d       	ldd	r27, Z+25	; 0x19
    1892:	82 89       	ldd	r24, Z+18	; 0x12
    1894:	93 89       	ldd	r25, Z+19	; 0x13
    1896:	64 89       	ldd	r22, Z+20	; 0x14
    1898:	75 89       	ldd	r23, Z+21	; 0x15
    189a:	ec 01       	movw	r28, r24
    189c:	7f 83       	std	Y+7, r23	; 0x07
    189e:	6e 83       	std	Y+6, r22	; 0x06
    18a0:	84 89       	ldd	r24, Z+20	; 0x14
    18a2:	95 89       	ldd	r25, Z+21	; 0x15
    18a4:	62 89       	ldd	r22, Z+18	; 0x12
    18a6:	73 89       	ldd	r23, Z+19	; 0x13
    18a8:	ec 01       	movw	r28, r24
    18aa:	7d 83       	std	Y+5, r23	; 0x05
    18ac:	6c 83       	std	Y+4, r22	; 0x04
    18ae:	cf 01       	movw	r24, r30
    18b0:	0e 96       	adiw	r24, 0x0e	; 14
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	6d 91       	ld	r22, X+
    18b6:	7c 91       	ld	r23, X
    18b8:	12 97       	sbiw	r26, 0x02	; 2
    18ba:	68 17       	cp	r22, r24
    18bc:	79 07       	cpc	r23, r25
    18be:	31 f4       	brne	.+12     	; 0x18cc <xTaskResumeAll+0x80>
    18c0:	84 89       	ldd	r24, Z+20	; 0x14
    18c2:	95 89       	ldd	r25, Z+21	; 0x15
    18c4:	12 96       	adiw	r26, 0x02	; 2
    18c6:	9c 93       	st	X, r25
    18c8:	8e 93       	st	-X, r24
    18ca:	11 97       	sbiw	r26, 0x01	; 1
    18cc:	11 8e       	std	Z+25, r1	; 0x19
    18ce:	10 8e       	std	Z+24, r1	; 0x18
    18d0:	8c 91       	ld	r24, X
    18d2:	81 50       	subi	r24, 0x01	; 1
    18d4:	8c 93       	st	X, r24
    18d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    18d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    18da:	86 81       	ldd	r24, Z+6	; 0x06
    18dc:	97 81       	ldd	r25, Z+7	; 0x07
    18de:	60 85       	ldd	r22, Z+8	; 0x08
    18e0:	71 85       	ldd	r23, Z+9	; 0x09
    18e2:	ec 01       	movw	r28, r24
    18e4:	7f 83       	std	Y+7, r23	; 0x07
    18e6:	6e 83       	std	Y+6, r22	; 0x06
    18e8:	80 85       	ldd	r24, Z+8	; 0x08
    18ea:	91 85       	ldd	r25, Z+9	; 0x09
    18ec:	66 81       	ldd	r22, Z+6	; 0x06
    18ee:	77 81       	ldd	r23, Z+7	; 0x07
    18f0:	ec 01       	movw	r28, r24
    18f2:	7d 83       	std	Y+5, r23	; 0x05
    18f4:	6c 83       	std	Y+4, r22	; 0x04
    18f6:	cf 01       	movw	r24, r30
    18f8:	02 96       	adiw	r24, 0x02	; 2
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	6d 91       	ld	r22, X+
    18fe:	7c 91       	ld	r23, X
    1900:	12 97       	sbiw	r26, 0x02	; 2
    1902:	68 17       	cp	r22, r24
    1904:	79 07       	cpc	r23, r25
    1906:	31 f4       	brne	.+12     	; 0x1914 <xTaskResumeAll+0xc8>
    1908:	60 85       	ldd	r22, Z+8	; 0x08
    190a:	71 85       	ldd	r23, Z+9	; 0x09
    190c:	12 96       	adiw	r26, 0x02	; 2
    190e:	7c 93       	st	X, r23
    1910:	6e 93       	st	-X, r22
    1912:	11 97       	sbiw	r26, 0x01	; 1
    1914:	15 86       	std	Z+13, r1	; 0x0d
    1916:	14 86       	std	Z+12, r1	; 0x0c
    1918:	2c 91       	ld	r18, X
    191a:	21 50       	subi	r18, 0x01	; 1
    191c:	2c 93       	st	X, r18
    191e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1920:	20 91 93 0c 	lds	r18, 0x0C93	; 0x800c93 <uxTopReadyPriority>
    1924:	2a 17       	cp	r18, r26
    1926:	10 f4       	brcc	.+4      	; 0x192c <xTaskResumeAll+0xe0>
    1928:	a0 93 93 0c 	sts	0x0C93, r26	; 0x800c93 <uxTopReadyPriority>
    192c:	3a 9f       	mul	r19, r26
    192e:	d0 01       	movw	r26, r0
    1930:	11 24       	eor	r1, r1
    1932:	ab 52       	subi	r26, 0x2B	; 43
    1934:	b3 4f       	sbci	r27, 0xF3	; 243
    1936:	11 96       	adiw	r26, 0x01	; 1
    1938:	0d 90       	ld	r0, X+
    193a:	bc 91       	ld	r27, X
    193c:	a0 2d       	mov	r26, r0
    193e:	b7 83       	std	Z+7, r27	; 0x07
    1940:	a6 83       	std	Z+6, r26	; 0x06
    1942:	16 96       	adiw	r26, 0x06	; 6
    1944:	6d 91       	ld	r22, X+
    1946:	7c 91       	ld	r23, X
    1948:	17 97       	sbiw	r26, 0x07	; 7
    194a:	71 87       	std	Z+9, r23	; 0x09
    194c:	60 87       	std	Z+8, r22	; 0x08
    194e:	16 96       	adiw	r26, 0x06	; 6
    1950:	6d 91       	ld	r22, X+
    1952:	7c 91       	ld	r23, X
    1954:	17 97       	sbiw	r26, 0x07	; 7
    1956:	eb 01       	movw	r28, r22
    1958:	9d 83       	std	Y+5, r25	; 0x05
    195a:	8c 83       	std	Y+4, r24	; 0x04
    195c:	17 96       	adiw	r26, 0x07	; 7
    195e:	9c 93       	st	X, r25
    1960:	8e 93       	st	-X, r24
    1962:	16 97       	sbiw	r26, 0x06	; 6
    1964:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1966:	3a 9f       	mul	r19, r26
    1968:	d0 01       	movw	r26, r0
    196a:	11 24       	eor	r1, r1
    196c:	ab 52       	subi	r26, 0x2B	; 43
    196e:	b3 4f       	sbci	r27, 0xF3	; 243
    1970:	b5 87       	std	Z+13, r27	; 0x0d
    1972:	a4 87       	std	Z+12, r26	; 0x0c
    1974:	8c 91       	ld	r24, X
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	8c 93       	st	X, r24
    197a:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    197e:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1982:	92 8d       	ldd	r25, Z+26	; 0x1a
    1984:	5a 96       	adiw	r26, 0x1a	; 26
    1986:	8c 91       	ld	r24, X
    1988:	98 17       	cp	r25, r24
    198a:	48 f0       	brcs	.+18     	; 0x199e <xTaskResumeAll+0x152>
    198c:	40 93 8d 0c 	sts	0x0C8D, r20	; 0x800c8d <xYieldPending>
    1990:	06 c0       	rjmp	.+12     	; 0x199e <xTaskResumeAll+0x152>
    1992:	e0 e0       	ldi	r30, 0x00	; 0
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	00 eb       	ldi	r16, 0xB0	; 176
    1998:	1c e0       	ldi	r17, 0x0C	; 12
    199a:	3b e0       	ldi	r19, 0x0B	; 11
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	d8 01       	movw	r26, r16
    19a0:	8c 91       	ld	r24, X
    19a2:	81 11       	cpse	r24, r1
    19a4:	6c cf       	rjmp	.-296    	; 0x187e <xTaskResumeAll+0x32>
    19a6:	ef 2b       	or	r30, r31
    19a8:	09 f0       	breq	.+2      	; 0x19ac <xTaskResumeAll+0x160>
    19aa:	e3 db       	rcall	.-2106   	; 0x1172 <prvResetNextTaskUnblockTime>
    19ac:	c0 90 8e 0c 	lds	r12, 0x0C8E	; 0x800c8e <xPendedTicks>
    19b0:	d0 90 8f 0c 	lds	r13, 0x0C8F	; 0x800c8f <xPendedTicks+0x1>
    19b4:	e0 90 90 0c 	lds	r14, 0x0C90	; 0x800c90 <xPendedTicks+0x2>
    19b8:	f0 90 91 0c 	lds	r15, 0x0C91	; 0x800c91 <xPendedTicks+0x3>
    19bc:	c1 14       	cp	r12, r1
    19be:	d1 04       	cpc	r13, r1
    19c0:	e1 04       	cpc	r14, r1
    19c2:	f1 04       	cpc	r15, r1
    19c4:	99 f0       	breq	.+38     	; 0x19ec <xTaskResumeAll+0x1a0>
    19c6:	c1 e0       	ldi	r28, 0x01	; 1
    19c8:	11 de       	rcall	.-990    	; 0x15ec <xTaskIncrementTick>
    19ca:	81 11       	cpse	r24, r1
    19cc:	c0 93 8d 0c 	sts	0x0C8D, r28	; 0x800c8d <xYieldPending>
    19d0:	b1 e0       	ldi	r27, 0x01	; 1
    19d2:	cb 1a       	sub	r12, r27
    19d4:	d1 08       	sbc	r13, r1
    19d6:	e1 08       	sbc	r14, r1
    19d8:	f1 08       	sbc	r15, r1
    19da:	b1 f7       	brne	.-20     	; 0x19c8 <xTaskResumeAll+0x17c>
    19dc:	10 92 8e 0c 	sts	0x0C8E, r1	; 0x800c8e <xPendedTicks>
    19e0:	10 92 8f 0c 	sts	0x0C8F, r1	; 0x800c8f <xPendedTicks+0x1>
    19e4:	10 92 90 0c 	sts	0x0C90, r1	; 0x800c90 <xPendedTicks+0x2>
    19e8:	10 92 91 0c 	sts	0x0C91, r1	; 0x800c91 <xPendedTicks+0x3>
    19ec:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <xYieldPending>
    19f0:	88 23       	and	r24, r24
    19f2:	29 f0       	breq	.+10     	; 0x19fe <xTaskResumeAll+0x1b2>
    19f4:	41 d8       	rcall	.-3966   	; 0xa78 <vPortYield>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <xTaskResumeAll+0x1b4>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <xTaskResumeAll+0x1b4>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	08 95       	ret

00001a16 <vTaskDelay>:
    1a16:	cf 92       	push	r12
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	6b 01       	movw	r12, r22
    1a20:	7c 01       	movw	r14, r24
    1a22:	67 2b       	or	r22, r23
    1a24:	68 2b       	or	r22, r24
    1a26:	69 2b       	or	r22, r25
    1a28:	41 f0       	breq	.+16     	; 0x1a3a <vTaskDelay+0x24>
    1a2a:	cc dd       	rcall	.-1128   	; 0x15c4 <vTaskSuspendAll>
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	c7 01       	movw	r24, r14
    1a30:	b6 01       	movw	r22, r12
    1a32:	c6 db       	rcall	.-2164   	; 0x11c0 <prvAddCurrentTaskToDelayedList>
    1a34:	0b df       	rcall	.-490    	; 0x184c <xTaskResumeAll>
    1a36:	81 11       	cpse	r24, r1
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <vTaskDelay+0x26>
    1a3a:	1e d8       	rcall	.-4036   	; 0xa78 <vPortYield>
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	08 95       	ret

00001a46 <vTaskSwitchContext>:
    1a46:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    1a4a:	88 23       	and	r24, r24
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <vTaskSwitchContext+0x10>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <xYieldPending>
    1a54:	08 95       	ret
    1a56:	10 92 8d 0c 	sts	0x0C8D, r1	; 0x800c8d <xYieldPending>
    1a5a:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1a5e:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1a62:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1a66:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1a6a:	2d 91       	ld	r18, X+
    1a6c:	3c 91       	ld	r19, X
    1a6e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a70:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a72:	82 17       	cp	r24, r18
    1a74:	93 07       	cpc	r25, r19
    1a76:	58 f0       	brcs	.+22     	; 0x1a8e <vTaskSwitchContext+0x48>
    1a78:	60 91 43 0d 	lds	r22, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1a7c:	70 91 44 0d 	lds	r23, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1a80:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1a84:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1a88:	63 5e       	subi	r22, 0xE3	; 227
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	c5 d3       	rcall	.+1930   	; 0x2218 <vApplicationStackOverflowHook>
    1a8e:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <uxTopReadyPriority>
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	9b e0       	ldi	r25, 0x0B	; 11
    1a98:	89 9f       	mul	r24, r25
    1a9a:	f0 01       	movw	r30, r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	eb 52       	subi	r30, 0x2B	; 43
    1aa0:	f3 4f       	sbci	r31, 0xF3	; 243
    1aa2:	90 81       	ld	r25, Z
    1aa4:	91 11       	cpse	r25, r1
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <vTaskSwitchContext+0x7e>
    1aa8:	4b e0       	ldi	r20, 0x0B	; 11
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	42 9f       	mul	r20, r18
    1ab2:	f0 01       	movw	r30, r0
    1ab4:	43 9f       	mul	r20, r19
    1ab6:	f0 0d       	add	r31, r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	eb 52       	subi	r30, 0x2B	; 43
    1abc:	f3 4f       	sbci	r31, 0xF3	; 243
    1abe:	90 81       	ld	r25, Z
    1ac0:	99 23       	and	r25, r25
    1ac2:	99 f3       	breq	.-26     	; 0x1aaa <vTaskSwitchContext+0x64>
    1ac4:	9b e0       	ldi	r25, 0x0B	; 11
    1ac6:	92 9f       	mul	r25, r18
    1ac8:	a0 01       	movw	r20, r0
    1aca:	93 9f       	mul	r25, r19
    1acc:	50 0d       	add	r21, r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	da 01       	movw	r26, r20
    1ad2:	ab 52       	subi	r26, 0x2B	; 43
    1ad4:	b3 4f       	sbci	r27, 0xF3	; 243
    1ad6:	11 96       	adiw	r26, 0x01	; 1
    1ad8:	ed 91       	ld	r30, X+
    1ada:	fc 91       	ld	r31, X
    1adc:	12 97       	sbiw	r26, 0x02	; 2
    1ade:	04 80       	ldd	r0, Z+4	; 0x04
    1ae0:	f5 81       	ldd	r31, Z+5	; 0x05
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	12 96       	adiw	r26, 0x02	; 2
    1ae6:	fc 93       	st	X, r31
    1ae8:	ee 93       	st	-X, r30
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	48 52       	subi	r20, 0x28	; 40
    1aee:	53 4f       	sbci	r21, 0xF3	; 243
    1af0:	e4 17       	cp	r30, r20
    1af2:	f5 07       	cpc	r31, r21
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <vTaskSwitchContext+0xba>
    1af6:	44 81       	ldd	r20, Z+4	; 0x04
    1af8:	55 81       	ldd	r21, Z+5	; 0x05
    1afa:	fd 01       	movw	r30, r26
    1afc:	52 83       	std	Z+2, r21	; 0x02
    1afe:	41 83       	std	Z+1, r20	; 0x01
    1b00:	9b e0       	ldi	r25, 0x0B	; 11
    1b02:	92 9f       	mul	r25, r18
    1b04:	f0 01       	movw	r30, r0
    1b06:	93 9f       	mul	r25, r19
    1b08:	f0 0d       	add	r31, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	eb 52       	subi	r30, 0x2B	; 43
    1b0e:	f3 4f       	sbci	r31, 0xF3	; 243
    1b10:	01 80       	ldd	r0, Z+1	; 0x01
    1b12:	f2 81       	ldd	r31, Z+2	; 0x02
    1b14:	e0 2d       	mov	r30, r0
    1b16:	20 85       	ldd	r18, Z+8	; 0x08
    1b18:	31 85       	ldd	r19, Z+9	; 0x09
    1b1a:	30 93 44 0d 	sts	0x0D44, r19	; 0x800d44 <pxCurrentTCB+0x1>
    1b1e:	20 93 43 0d 	sts	0x0D43, r18	; 0x800d43 <pxCurrentTCB>
    1b22:	80 93 93 0c 	sts	0x0C93, r24	; 0x800c93 <uxTopReadyPriority>
    1b26:	08 95       	ret

00001b28 <vTaskPlaceOnEventList>:
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	6a 01       	movw	r12, r20
    1b32:	7b 01       	movw	r14, r22
    1b34:	60 91 43 0d 	lds	r22, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1b38:	70 91 44 0d 	lds	r23, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1b3c:	62 5f       	subi	r22, 0xF2	; 242
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	c7 01       	movw	r24, r14
    1b48:	b6 01       	movw	r22, r12
    1b4a:	3a db       	rcall	.-2444   	; 0x11c0 <prvAddCurrentTaskToDelayedList>
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	08 95       	ret

00001b56 <vTaskPlaceOnEventListRestricted>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	ba 01       	movw	r22, r20
    1b60:	a1 81       	ldd	r26, Z+1	; 0x01
    1b62:	b2 81       	ldd	r27, Z+2	; 0x02
    1b64:	c0 91 43 0d 	lds	r28, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1b68:	d0 91 44 0d 	lds	r29, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1b6c:	bb 8b       	std	Y+19, r27	; 0x13
    1b6e:	aa 8b       	std	Y+18, r26	; 0x12
    1b70:	c0 91 43 0d 	lds	r28, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1b74:	d0 91 44 0d 	lds	r29, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1b78:	16 96       	adiw	r26, 0x06	; 6
    1b7a:	4d 91       	ld	r20, X+
    1b7c:	5c 91       	ld	r21, X
    1b7e:	17 97       	sbiw	r26, 0x07	; 7
    1b80:	5d 8b       	std	Y+21, r21	; 0x15
    1b82:	4c 8b       	std	Y+20, r20	; 0x14
    1b84:	16 96       	adiw	r26, 0x06	; 6
    1b86:	cd 91       	ld	r28, X+
    1b88:	dc 91       	ld	r29, X
    1b8a:	17 97       	sbiw	r26, 0x07	; 7
    1b8c:	40 91 43 0d 	lds	r20, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1b90:	50 91 44 0d 	lds	r21, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1b94:	42 5f       	subi	r20, 0xF2	; 242
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	5d 83       	std	Y+5, r21	; 0x05
    1b9a:	4c 83       	std	Y+4, r20	; 0x04
    1b9c:	40 91 43 0d 	lds	r20, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1ba0:	50 91 44 0d 	lds	r21, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1ba4:	42 5f       	subi	r20, 0xF2	; 242
    1ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba8:	17 96       	adiw	r26, 0x07	; 7
    1baa:	5c 93       	st	X, r21
    1bac:	4e 93       	st	-X, r20
    1bae:	16 97       	sbiw	r26, 0x06	; 6
    1bb0:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1bb4:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1bb8:	59 96       	adiw	r26, 0x19	; 25
    1bba:	fc 93       	st	X, r31
    1bbc:	ee 93       	st	-X, r30
    1bbe:	58 97       	sbiw	r26, 0x18	; 24
    1bc0:	30 81       	ld	r19, Z
    1bc2:	3f 5f       	subi	r19, 0xFF	; 255
    1bc4:	30 83       	st	Z, r19
    1bc6:	22 23       	and	r18, r18
    1bc8:	19 f0       	breq	.+6      	; 0x1bd0 <vTaskPlaceOnEventListRestricted+0x7a>
    1bca:	6f ef       	ldi	r22, 0xFF	; 255
    1bcc:	7f ef       	ldi	r23, 0xFF	; 255
    1bce:	cb 01       	movw	r24, r22
    1bd0:	42 2f       	mov	r20, r18
    1bd2:	f6 da       	rcall	.-2580   	; 0x11c0 <prvAddCurrentTaskToDelayedList>
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <xTaskRemoveFromEventList>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	dc 01       	movw	r26, r24
    1be0:	17 96       	adiw	r26, 0x07	; 7
    1be2:	ed 91       	ld	r30, X+
    1be4:	fc 91       	ld	r31, X
    1be6:	18 97       	sbiw	r26, 0x08	; 8
    1be8:	00 84       	ldd	r0, Z+8	; 0x08
    1bea:	f1 85       	ldd	r31, Z+9	; 0x09
    1bec:	e0 2d       	mov	r30, r0
    1bee:	a0 8d       	ldd	r26, Z+24	; 0x18
    1bf0:	b1 8d       	ldd	r27, Z+25	; 0x19
    1bf2:	c2 89       	ldd	r28, Z+18	; 0x12
    1bf4:	d3 89       	ldd	r29, Z+19	; 0x13
    1bf6:	84 89       	ldd	r24, Z+20	; 0x14
    1bf8:	95 89       	ldd	r25, Z+21	; 0x15
    1bfa:	9f 83       	std	Y+7, r25	; 0x07
    1bfc:	8e 83       	std	Y+6, r24	; 0x06
    1bfe:	c4 89       	ldd	r28, Z+20	; 0x14
    1c00:	d5 89       	ldd	r29, Z+21	; 0x15
    1c02:	82 89       	ldd	r24, Z+18	; 0x12
    1c04:	93 89       	ldd	r25, Z+19	; 0x13
    1c06:	9d 83       	std	Y+5, r25	; 0x05
    1c08:	8c 83       	std	Y+4, r24	; 0x04
    1c0a:	9f 01       	movw	r18, r30
    1c0c:	22 5f       	subi	r18, 0xF2	; 242
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	11 96       	adiw	r26, 0x01	; 1
    1c12:	8d 91       	ld	r24, X+
    1c14:	9c 91       	ld	r25, X
    1c16:	12 97       	sbiw	r26, 0x02	; 2
    1c18:	82 17       	cp	r24, r18
    1c1a:	93 07       	cpc	r25, r19
    1c1c:	31 f4       	brne	.+12     	; 0x1c2a <xTaskRemoveFromEventList+0x50>
    1c1e:	84 89       	ldd	r24, Z+20	; 0x14
    1c20:	95 89       	ldd	r25, Z+21	; 0x15
    1c22:	12 96       	adiw	r26, 0x02	; 2
    1c24:	9c 93       	st	X, r25
    1c26:	8e 93       	st	-X, r24
    1c28:	11 97       	sbiw	r26, 0x01	; 1
    1c2a:	11 8e       	std	Z+25, r1	; 0x19
    1c2c:	10 8e       	std	Z+24, r1	; 0x18
    1c2e:	8c 91       	ld	r24, X
    1c30:	81 50       	subi	r24, 0x01	; 1
    1c32:	8c 93       	st	X, r24
    1c34:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    1c38:	81 11       	cpse	r24, r1
    1c3a:	52 c0       	rjmp	.+164    	; 0x1ce0 <xTaskRemoveFromEventList+0x106>
    1c3c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c3e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c40:	c6 81       	ldd	r28, Z+6	; 0x06
    1c42:	d7 81       	ldd	r29, Z+7	; 0x07
    1c44:	80 85       	ldd	r24, Z+8	; 0x08
    1c46:	91 85       	ldd	r25, Z+9	; 0x09
    1c48:	9f 83       	std	Y+7, r25	; 0x07
    1c4a:	8e 83       	std	Y+6, r24	; 0x06
    1c4c:	c0 85       	ldd	r28, Z+8	; 0x08
    1c4e:	d1 85       	ldd	r29, Z+9	; 0x09
    1c50:	86 81       	ldd	r24, Z+6	; 0x06
    1c52:	97 81       	ldd	r25, Z+7	; 0x07
    1c54:	9d 83       	std	Y+5, r25	; 0x05
    1c56:	8c 83       	std	Y+4, r24	; 0x04
    1c58:	9f 01       	movw	r18, r30
    1c5a:	2e 5f       	subi	r18, 0xFE	; 254
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	11 96       	adiw	r26, 0x01	; 1
    1c60:	8d 91       	ld	r24, X+
    1c62:	9c 91       	ld	r25, X
    1c64:	12 97       	sbiw	r26, 0x02	; 2
    1c66:	82 17       	cp	r24, r18
    1c68:	93 07       	cpc	r25, r19
    1c6a:	31 f4       	brne	.+12     	; 0x1c78 <xTaskRemoveFromEventList+0x9e>
    1c6c:	80 85       	ldd	r24, Z+8	; 0x08
    1c6e:	91 85       	ldd	r25, Z+9	; 0x09
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	15 86       	std	Z+13, r1	; 0x0d
    1c7a:	14 86       	std	Z+12, r1	; 0x0c
    1c7c:	8c 91       	ld	r24, X
    1c7e:	81 50       	subi	r24, 0x01	; 1
    1c80:	8c 93       	st	X, r24
    1c82:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c84:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <uxTopReadyPriority>
    1c88:	8a 17       	cp	r24, r26
    1c8a:	10 f4       	brcc	.+4      	; 0x1c90 <xTaskRemoveFromEventList+0xb6>
    1c8c:	a0 93 93 0c 	sts	0x0C93, r26	; 0x800c93 <uxTopReadyPriority>
    1c90:	8b e0       	ldi	r24, 0x0B	; 11
    1c92:	8a 9f       	mul	r24, r26
    1c94:	d0 01       	movw	r26, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	ab 52       	subi	r26, 0x2B	; 43
    1c9a:	b3 4f       	sbci	r27, 0xF3	; 243
    1c9c:	11 96       	adiw	r26, 0x01	; 1
    1c9e:	0d 90       	ld	r0, X+
    1ca0:	bc 91       	ld	r27, X
    1ca2:	a0 2d       	mov	r26, r0
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	a6 83       	std	Z+6, r26	; 0x06
    1ca8:	16 96       	adiw	r26, 0x06	; 6
    1caa:	4d 91       	ld	r20, X+
    1cac:	5c 91       	ld	r21, X
    1cae:	17 97       	sbiw	r26, 0x07	; 7
    1cb0:	51 87       	std	Z+9, r21	; 0x09
    1cb2:	40 87       	std	Z+8, r20	; 0x08
    1cb4:	16 96       	adiw	r26, 0x06	; 6
    1cb6:	cd 91       	ld	r28, X+
    1cb8:	dc 91       	ld	r29, X
    1cba:	17 97       	sbiw	r26, 0x07	; 7
    1cbc:	3d 83       	std	Y+5, r19	; 0x05
    1cbe:	2c 83       	std	Y+4, r18	; 0x04
    1cc0:	17 96       	adiw	r26, 0x07	; 7
    1cc2:	3c 93       	st	X, r19
    1cc4:	2e 93       	st	-X, r18
    1cc6:	16 97       	sbiw	r26, 0x06	; 6
    1cc8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cca:	8a 9f       	mul	r24, r26
    1ccc:	d0 01       	movw	r26, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	ab 52       	subi	r26, 0x2B	; 43
    1cd2:	b3 4f       	sbci	r27, 0xF3	; 243
    1cd4:	b5 87       	std	Z+13, r27	; 0x0d
    1cd6:	a4 87       	std	Z+12, r26	; 0x0c
    1cd8:	8c 91       	ld	r24, X
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	8c 93       	st	X, r24
    1cde:	1c c0       	rjmp	.+56     	; 0x1d18 <xTaskRemoveFromEventList+0x13e>
    1ce0:	40 eb       	ldi	r20, 0xB0	; 176
    1ce2:	5c e0       	ldi	r21, 0x0C	; 12
    1ce4:	da 01       	movw	r26, r20
    1ce6:	11 96       	adiw	r26, 0x01	; 1
    1ce8:	cd 91       	ld	r28, X+
    1cea:	dc 91       	ld	r29, X
    1cec:	12 97       	sbiw	r26, 0x02	; 2
    1cee:	d3 8b       	std	Z+19, r29	; 0x13
    1cf0:	c2 8b       	std	Z+18, r28	; 0x12
    1cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf6:	95 8b       	std	Z+21, r25	; 0x15
    1cf8:	84 8b       	std	Z+20, r24	; 0x14
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	dc 01       	movw	r26, r24
    1d00:	15 96       	adiw	r26, 0x05	; 5
    1d02:	3c 93       	st	X, r19
    1d04:	2e 93       	st	-X, r18
    1d06:	14 97       	sbiw	r26, 0x04	; 4
    1d08:	3f 83       	std	Y+7, r19	; 0x07
    1d0a:	2e 83       	std	Y+6, r18	; 0x06
    1d0c:	51 8f       	std	Z+25, r21	; 0x19
    1d0e:	40 8f       	std	Z+24, r20	; 0x18
    1d10:	da 01       	movw	r26, r20
    1d12:	8c 91       	ld	r24, X
    1d14:	8f 5f       	subi	r24, 0xFF	; 255
    1d16:	8c 93       	st	X, r24
    1d18:	a0 91 43 0d 	lds	r26, 0x0D43	; 0x800d43 <pxCurrentTCB>
    1d1c:	b0 91 44 0d 	lds	r27, 0x0D44	; 0x800d44 <pxCurrentTCB+0x1>
    1d20:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d22:	5a 96       	adiw	r26, 0x1a	; 26
    1d24:	8c 91       	ld	r24, X
    1d26:	89 17       	cp	r24, r25
    1d28:	20 f4       	brcc	.+8      	; 0x1d32 <xTaskRemoveFromEventList+0x158>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <xYieldPending>
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <xTaskRemoveFromEventList+0x15a>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <vTaskInternalSetTimeOutState>:
    1d3a:	20 91 8c 0c 	lds	r18, 0x0C8C	; 0x800c8c <xNumOfOverflows>
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
    1d42:	40 91 94 0c 	lds	r20, 0x0C94	; 0x800c94 <xTickCount>
    1d46:	50 91 95 0c 	lds	r21, 0x0C95	; 0x800c95 <xTickCount+0x1>
    1d4a:	60 91 96 0c 	lds	r22, 0x0C96	; 0x800c96 <xTickCount+0x2>
    1d4e:	70 91 97 0c 	lds	r23, 0x0C97	; 0x800c97 <xTickCount+0x3>
    1d52:	41 83       	std	Z+1, r20	; 0x01
    1d54:	52 83       	std	Z+2, r21	; 0x02
    1d56:	63 83       	std	Z+3, r22	; 0x03
    1d58:	74 83       	std	Z+4, r23	; 0x04
    1d5a:	08 95       	ret

00001d5c <xTaskCheckForTimeOut>:
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	fb 01       	movw	r30, r22
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	0f 92       	push	r0
    1d74:	40 91 94 0c 	lds	r20, 0x0C94	; 0x800c94 <xTickCount>
    1d78:	50 91 95 0c 	lds	r21, 0x0C95	; 0x800c95 <xTickCount+0x1>
    1d7c:	60 91 96 0c 	lds	r22, 0x0C96	; 0x800c96 <xTickCount+0x2>
    1d80:	70 91 97 0c 	lds	r23, 0x0C97	; 0x800c97 <xTickCount+0x3>
    1d84:	00 81       	ld	r16, Z
    1d86:	11 81       	ldd	r17, Z+1	; 0x01
    1d88:	22 81       	ldd	r18, Z+2	; 0x02
    1d8a:	33 81       	ldd	r19, Z+3	; 0x03
    1d8c:	0f 3f       	cpi	r16, 0xFF	; 255
    1d8e:	af ef       	ldi	r26, 0xFF	; 255
    1d90:	1a 07       	cpc	r17, r26
    1d92:	2a 07       	cpc	r18, r26
    1d94:	3a 07       	cpc	r19, r26
    1d96:	79 f1       	breq	.+94     	; 0x1df6 <xTaskCheckForTimeOut+0x9a>
    1d98:	ec 01       	movw	r28, r24
    1d9a:	c9 80       	ldd	r12, Y+1	; 0x01
    1d9c:	da 80       	ldd	r13, Y+2	; 0x02
    1d9e:	eb 80       	ldd	r14, Y+3	; 0x03
    1da0:	fc 80       	ldd	r15, Y+4	; 0x04
    1da2:	a0 91 8c 0c 	lds	r26, 0x0C8C	; 0x800c8c <xNumOfOverflows>
    1da6:	b8 81       	ld	r27, Y
    1da8:	ba 17       	cp	r27, r26
    1daa:	59 f0       	breq	.+22     	; 0x1dc2 <xTaskCheckForTimeOut+0x66>
    1dac:	4c 15       	cp	r20, r12
    1dae:	5d 05       	cpc	r21, r13
    1db0:	6e 05       	cpc	r22, r14
    1db2:	7f 05       	cpc	r23, r15
    1db4:	30 f0       	brcs	.+12     	; 0x1dc2 <xTaskCheckForTimeOut+0x66>
    1db6:	10 82       	st	Z, r1
    1db8:	11 82       	std	Z+1, r1	; 0x01
    1dba:	12 82       	std	Z+2, r1	; 0x02
    1dbc:	13 82       	std	Z+3, r1	; 0x03
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	1b c0       	rjmp	.+54     	; 0x1df8 <xTaskCheckForTimeOut+0x9c>
    1dc2:	4c 19       	sub	r20, r12
    1dc4:	5d 09       	sbc	r21, r13
    1dc6:	6e 09       	sbc	r22, r14
    1dc8:	7f 09       	sbc	r23, r15
    1dca:	40 17       	cp	r20, r16
    1dcc:	51 07       	cpc	r21, r17
    1dce:	62 07       	cpc	r22, r18
    1dd0:	73 07       	cpc	r23, r19
    1dd2:	58 f4       	brcc	.+22     	; 0x1dea <xTaskCheckForTimeOut+0x8e>
    1dd4:	04 1b       	sub	r16, r20
    1dd6:	15 0b       	sbc	r17, r21
    1dd8:	26 0b       	sbc	r18, r22
    1dda:	37 0b       	sbc	r19, r23
    1ddc:	00 83       	st	Z, r16
    1dde:	11 83       	std	Z+1, r17	; 0x01
    1de0:	22 83       	std	Z+2, r18	; 0x02
    1de2:	33 83       	std	Z+3, r19	; 0x03
    1de4:	aa df       	rcall	.-172    	; 0x1d3a <vTaskInternalSetTimeOutState>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <xTaskCheckForTimeOut+0x9c>
    1dea:	10 82       	st	Z, r1
    1dec:	11 82       	std	Z+1, r1	; 0x01
    1dee:	12 82       	std	Z+2, r1	; 0x02
    1df0:	13 82       	std	Z+3, r1	; 0x03
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <xTaskCheckForTimeOut+0x9c>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	08 95       	ret

00001e0e <vTaskMissedYield>:
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <xYieldPending>
    1e14:	08 95       	ret

00001e16 <xTaskGetSchedulerState>:
    1e16:	80 91 92 0c 	lds	r24, 0x0C92	; 0x800c92 <xSchedulerRunning>
    1e1a:	88 23       	and	r24, r24
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <xTaskGetSchedulerState+0x14>
    1e1e:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <uxSchedulerSuspended>
    1e22:	88 23       	and	r24, r24
    1e24:	21 f0       	breq	.+8      	; 0x1e2e <xTaskGetSchedulerState+0x18>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	08 95       	ret
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	08 95       	ret
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	08 95       	ret

00001e32 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1e3c:	89 2b       	or	r24, r25
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <xTaskPriorityDisinherit+0x10>
    1e40:	49 c0       	rjmp	.+146    	; 0x1ed4 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1e42:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e44:	81 50       	subi	r24, 0x01	; 1
    1e46:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1e48:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e4a:	95 a5       	ldd	r25, Z+45	; 0x2d
    1e4c:	29 17       	cp	r18, r25
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <xTaskPriorityDisinherit+0x20>
    1e50:	43 c0       	rjmp	.+134    	; 0x1ed8 <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1e52:	81 11       	cpse	r24, r1
    1e54:	43 c0       	rjmp	.+134    	; 0x1edc <xTaskPriorityDisinherit+0xaa>
    1e56:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1e58:	8f 01       	movw	r16, r30
    1e5a:	0e 5f       	subi	r16, 0xFE	; 254
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	c8 01       	movw	r24, r16
    1e60:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1e64:	ed a5       	ldd	r30, Y+45	; 0x2d
    1e66:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e68:	8a e0       	ldi	r24, 0x0A	; 10
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	8e 1b       	sub	r24, r30
    1e72:	91 09       	sbc	r25, r1
    1e74:	a1 09       	sbc	r26, r1
    1e76:	b1 09       	sbc	r27, r1
    1e78:	8e 87       	std	Y+14, r24	; 0x0e
    1e7a:	9f 87       	std	Y+15, r25	; 0x0f
    1e7c:	a8 8b       	std	Y+16, r26	; 0x10
    1e7e:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1e80:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <uxTopReadyPriority>
    1e84:	8e 17       	cp	r24, r30
    1e86:	10 f4       	brcc	.+4      	; 0x1e8c <xTaskPriorityDisinherit+0x5a>
    1e88:	e0 93 93 0c 	sts	0x0C93, r30	; 0x800c93 <uxTopReadyPriority>
    1e8c:	8b e0       	ldi	r24, 0x0B	; 11
    1e8e:	8e 9f       	mul	r24, r30
    1e90:	f0 01       	movw	r30, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	eb 52       	subi	r30, 0x2B	; 43
    1e96:	f3 4f       	sbci	r31, 0xF3	; 243
    1e98:	01 80       	ldd	r0, Z+1	; 0x01
    1e9a:	f2 81       	ldd	r31, Z+2	; 0x02
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	ff 83       	std	Y+7, r31	; 0x07
    1ea0:	ee 83       	std	Y+6, r30	; 0x06
    1ea2:	26 81       	ldd	r18, Z+6	; 0x06
    1ea4:	37 81       	ldd	r19, Z+7	; 0x07
    1ea6:	39 87       	std	Y+9, r19	; 0x09
    1ea8:	28 87       	std	Y+8, r18	; 0x08
    1eaa:	a6 81       	ldd	r26, Z+6	; 0x06
    1eac:	b7 81       	ldd	r27, Z+7	; 0x07
    1eae:	15 96       	adiw	r26, 0x05	; 5
    1eb0:	1c 93       	st	X, r17
    1eb2:	0e 93       	st	-X, r16
    1eb4:	14 97       	sbiw	r26, 0x04	; 4
    1eb6:	17 83       	std	Z+7, r17	; 0x07
    1eb8:	06 83       	std	Z+6, r16	; 0x06
    1eba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ebc:	8e 9f       	mul	r24, r30
    1ebe:	f0 01       	movw	r30, r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	eb 52       	subi	r30, 0x2B	; 43
    1ec4:	f3 4f       	sbci	r31, 0xF3	; 243
    1ec6:	fd 87       	std	Y+13, r31	; 0x0d
    1ec8:	ec 87       	std	Y+12, r30	; 0x0c
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	05 c0       	rjmp	.+10     	; 0x1ede <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	03 c0       	rjmp	.+6      	; 0x1ede <xTaskPriorityDisinherit+0xac>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <xTaskPriorityDisinherit+0xac>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	08 95       	ret

00001ee8 <prvInsertTimerInActiveList>:
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	42 83       	std	Z+2, r20	; 0x02
    1ef8:	53 83       	std	Z+3, r21	; 0x03
    1efa:	64 83       	std	Z+4, r22	; 0x04
    1efc:	75 83       	std	Z+5, r23	; 0x05
    1efe:	93 87       	std	Z+11, r25	; 0x0b
    1f00:	82 87       	std	Z+10, r24	; 0x0a
    1f02:	04 17       	cp	r16, r20
    1f04:	15 07       	cpc	r17, r21
    1f06:	26 07       	cpc	r18, r22
    1f08:	37 07       	cpc	r19, r23
    1f0a:	c0 f0       	brcs	.+48     	; 0x1f3c <prvInsertTimerInActiveList+0x54>
    1f0c:	0c 19       	sub	r16, r12
    1f0e:	1d 09       	sbc	r17, r13
    1f10:	2e 09       	sbc	r18, r14
    1f12:	3f 09       	sbc	r19, r15
    1f14:	86 85       	ldd	r24, Z+14	; 0x0e
    1f16:	97 85       	ldd	r25, Z+15	; 0x0f
    1f18:	a0 89       	ldd	r26, Z+16	; 0x10
    1f1a:	b1 89       	ldd	r27, Z+17	; 0x11
    1f1c:	08 17       	cp	r16, r24
    1f1e:	19 07       	cpc	r17, r25
    1f20:	2a 07       	cpc	r18, r26
    1f22:	3b 07       	cpc	r19, r27
    1f24:	00 f5       	brcc	.+64     	; 0x1f66 <prvInsertTimerInActiveList+0x7e>
    1f26:	bf 01       	movw	r22, r30
    1f28:	6e 5f       	subi	r22, 0xFE	; 254
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	80 91 4d 0d 	lds	r24, 0x0D4D	; 0x800d4d <pxOverflowTimerList>
    1f30:	90 91 4e 0d 	lds	r25, 0x0D4E	; 0x800d4e <pxOverflowTimerList+0x1>
    1f34:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	18 c0       	rjmp	.+48     	; 0x1f6c <prvInsertTimerInActiveList+0x84>
    1f3c:	0c 15       	cp	r16, r12
    1f3e:	1d 05       	cpc	r17, r13
    1f40:	2e 05       	cpc	r18, r14
    1f42:	3f 05       	cpc	r19, r15
    1f44:	28 f4       	brcc	.+10     	; 0x1f50 <prvInsertTimerInActiveList+0x68>
    1f46:	4c 15       	cp	r20, r12
    1f48:	5d 05       	cpc	r21, r13
    1f4a:	6e 05       	cpc	r22, r14
    1f4c:	7f 05       	cpc	r23, r15
    1f4e:	68 f4       	brcc	.+26     	; 0x1f6a <prvInsertTimerInActiveList+0x82>
    1f50:	bf 01       	movw	r22, r30
    1f52:	6e 5f       	subi	r22, 0xFE	; 254
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	80 91 4f 0d 	lds	r24, 0x0D4F	; 0x800d4f <pxCurrentTimerList>
    1f5a:	90 91 50 0d 	lds	r25, 0x0D50	; 0x800d50 <pxCurrentTimerList+0x1>
    1f5e:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <prvInsertTimerInActiveList+0x84>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <prvInsertTimerInActiveList+0x84>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	08 95       	ret

00001f7a <prvCheckForValidListAndQueue>:
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	0f 92       	push	r0
    1f80:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <xTimerQueue>
    1f84:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
    1f88:	89 2b       	or	r24, r25
    1f8a:	e9 f4       	brne	.+58     	; 0x1fc6 <prvCheckForValidListAndQueue+0x4c>
    1f8c:	8c e5       	ldi	r24, 0x5C	; 92
    1f8e:	9d e0       	ldi	r25, 0x0D	; 13
    1f90:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    1f94:	81 e5       	ldi	r24, 0x51	; 81
    1f96:	9d e0       	ldi	r25, 0x0D	; 13
    1f98:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vListInitialise>
    1f9c:	8c e5       	ldi	r24, 0x5C	; 92
    1f9e:	9d e0       	ldi	r25, 0x0D	; 13
    1fa0:	90 93 50 0d 	sts	0x0D50, r25	; 0x800d50 <pxCurrentTimerList+0x1>
    1fa4:	80 93 4f 0d 	sts	0x0D4F, r24	; 0x800d4f <pxCurrentTimerList>
    1fa8:	81 e5       	ldi	r24, 0x51	; 81
    1faa:	9d e0       	ldi	r25, 0x0D	; 13
    1fac:	90 93 4e 0d 	sts	0x0D4E, r25	; 0x800d4e <pxOverflowTimerList+0x1>
    1fb0:	80 93 4d 0d 	sts	0x0D4D, r24	; 0x800d4d <pxOverflowTimerList>
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	67 e0       	ldi	r22, 0x07	; 7
    1fb8:	8a e0       	ldi	r24, 0x0A	; 10
    1fba:	0e 94 12 07 	call	0xe24	; 0xe24 <xQueueGenericCreate>
    1fbe:	90 93 4c 0d 	sts	0x0D4C, r25	; 0x800d4c <xTimerQueue+0x1>
    1fc2:	80 93 4b 0d 	sts	0x0D4B, r24	; 0x800d4b <xTimerQueue>
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	08 95       	ret

00001fcc <xTimerCreateTimerTask>:
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	d3 df       	rcall	.-90     	; 0x1f7a <prvCheckForValidListAndQueue>
    1fd4:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <xTimerQueue>
    1fd8:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
    1fdc:	89 2b       	or	r24, r25
    1fde:	89 f0       	breq	.+34     	; 0x2002 <xTimerCreateTimerTask+0x36>
    1fe0:	0f 2e       	mov	r0, r31
    1fe2:	f9 e4       	ldi	r31, 0x49	; 73
    1fe4:	ef 2e       	mov	r14, r31
    1fe6:	fd e0       	ldi	r31, 0x0D	; 13
    1fe8:	ff 2e       	mov	r15, r31
    1fea:	f0 2d       	mov	r31, r0
    1fec:	03 e0       	ldi	r16, 0x03	; 3
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 ec       	ldi	r20, 0xC0	; 192
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	60 e9       	ldi	r22, 0x90	; 144
    1ff8:	72 e0       	ldi	r23, 0x02	; 2
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	91 e0       	ldi	r25, 0x01	; 1
    1ffe:	7f d9       	rcall	.-3330   	; 0x12fe <xTaskCreate>
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <xTimerCreateTimerTask+0x38>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	08 95       	ret

0000200c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    200c:	8f 92       	push	r8
    200e:	9f 92       	push	r9
    2010:	af 92       	push	r10
    2012:	bf 92       	push	r11
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	27 97       	sbiw	r28, 0x07	; 7
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2034:	e0 91 4b 0d 	lds	r30, 0x0D4B	; 0x800d4b <xTimerQueue>
    2038:	f0 91 4c 0d 	lds	r31, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
    203c:	30 97       	sbiw	r30, 0x00	; 0
    203e:	81 f1       	breq	.+96     	; 0x20a0 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2040:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2042:	2a 83       	std	Y+2, r18	; 0x02
    2044:	3b 83       	std	Y+3, r19	; 0x03
    2046:	4c 83       	std	Y+4, r20	; 0x04
    2048:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    204a:	9f 83       	std	Y+7, r25	; 0x07
    204c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    204e:	66 30       	cpi	r22, 0x06	; 6
    2050:	f4 f4       	brge	.+60     	; 0x208e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2052:	e1 de       	rcall	.-574    	; 0x1e16 <xTaskGetSchedulerState>
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	69 f4       	brne	.+26     	; 0x2072 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	a7 01       	movw	r20, r14
    205c:	96 01       	movw	r18, r12
    205e:	be 01       	movw	r22, r28
    2060:	6f 5f       	subi	r22, 0xFF	; 255
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <xTimerQueue>
    2068:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
    206c:	0e 94 33 07 	call	0xe66	; 0xe66 <xQueueGenericSend>
    2070:	18 c0       	rjmp	.+48     	; 0x20a2 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	a9 01       	movw	r20, r18
    207a:	be 01       	movw	r22, r28
    207c:	6f 5f       	subi	r22, 0xFF	; 255
    207e:	7f 4f       	sbci	r23, 0xFF	; 255
    2080:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <xTimerQueue>
    2084:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <xTimerQueue+0x1>
    2088:	0e 94 33 07 	call	0xe66	; 0xe66 <xQueueGenericSend>
    208c:	0a c0       	rjmp	.+20     	; 0x20a2 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	a8 01       	movw	r20, r16
    2092:	be 01       	movw	r22, r28
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	cf 01       	movw	r24, r30
    209a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <xQueueGenericSendFromISR>
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    20a0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    20a2:	27 96       	adiw	r28, 0x07	; 7
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	08 95       	ret

000020c8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    20c8:	2f 92       	push	r2
    20ca:	3f 92       	push	r3
    20cc:	4f 92       	push	r4
    20ce:	5f 92       	push	r5
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    20ee:	70 da       	rcall	.-2848   	; 0x15d0 <xTaskGetTickCount>
    20f0:	2b 01       	movw	r4, r22
    20f2:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    20f4:	80 91 45 0d 	lds	r24, 0x0D45	; 0x800d45 <xLastTime.2436>
    20f8:	90 91 46 0d 	lds	r25, 0x0D46	; 0x800d46 <xLastTime.2436+0x1>
    20fc:	a0 91 47 0d 	lds	r26, 0x0D47	; 0x800d47 <xLastTime.2436+0x2>
    2100:	b0 91 48 0d 	lds	r27, 0x0D48	; 0x800d48 <xLastTime.2436+0x3>
    2104:	48 16       	cp	r4, r24
    2106:	59 06       	cpc	r5, r25
    2108:	6a 06       	cpc	r6, r26
    210a:	7b 06       	cpc	r7, r27
    210c:	08 f0       	brcs	.+2      	; 0x2110 <prvSampleTimeNow+0x48>
    210e:	53 c0       	rjmp	.+166    	; 0x21b6 <prvSampleTimeNow+0xee>
    2110:	3b c0       	rjmp	.+118    	; 0x2188 <prvSampleTimeNow+0xc0>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2112:	07 80       	ldd	r0, Z+7	; 0x07
    2114:	f0 85       	ldd	r31, Z+8	; 0x08
    2116:	e0 2d       	mov	r30, r0
    2118:	80 80       	ld	r8, Z
    211a:	91 80       	ldd	r9, Z+1	; 0x01
    211c:	a2 80       	ldd	r10, Z+2	; 0x02
    211e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2120:	c0 85       	ldd	r28, Z+8	; 0x08
    2122:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2124:	8e 01       	movw	r16, r28
    2126:	0e 5f       	subi	r16, 0xFE	; 254
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	c8 01       	movw	r24, r16
    212c:	0e 94 c2 04 	call	0x984	; 0x984 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2130:	ec 89       	ldd	r30, Y+20	; 0x14
    2132:	fd 89       	ldd	r31, Y+21	; 0x15
    2134:	ce 01       	movw	r24, r28
    2136:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2138:	8e 89       	ldd	r24, Y+22	; 0x16
    213a:	82 ff       	sbrs	r24, 2
    213c:	25 c0       	rjmp	.+74     	; 0x2188 <prvSampleTimeNow+0xc0>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    213e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2140:	9f 85       	ldd	r25, Y+15	; 0x0f
    2142:	a8 89       	ldd	r26, Y+16	; 0x10
    2144:	b9 89       	ldd	r27, Y+17	; 0x11
    2146:	88 0d       	add	r24, r8
    2148:	99 1d       	adc	r25, r9
    214a:	aa 1d       	adc	r26, r10
    214c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    214e:	88 16       	cp	r8, r24
    2150:	99 06       	cpc	r9, r25
    2152:	aa 06       	cpc	r10, r26
    2154:	bb 06       	cpc	r11, r27
    2156:	70 f4       	brcc	.+28     	; 0x2174 <prvSampleTimeNow+0xac>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2158:	8a 83       	std	Y+2, r24	; 0x02
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	ac 83       	std	Y+4, r26	; 0x04
    215e:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2160:	db 87       	std	Y+11, r29	; 0x0b
    2162:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2164:	b8 01       	movw	r22, r16
    2166:	80 91 4f 0d 	lds	r24, 0x0D4F	; 0x800d4f <pxCurrentTimerList>
    216a:	90 91 50 0d 	lds	r25, 0x0D50	; 0x800d50 <pxCurrentTimerList+0x1>
    216e:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsert>
    2172:	0a c0       	rjmp	.+20     	; 0x2188 <prvSampleTimeNow+0xc0>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2174:	c1 2c       	mov	r12, r1
    2176:	d1 2c       	mov	r13, r1
    2178:	76 01       	movw	r14, r12
    217a:	00 e0       	ldi	r16, 0x00	; 0
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	a5 01       	movw	r20, r10
    2180:	94 01       	movw	r18, r8
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	ce 01       	movw	r24, r28
    2186:	42 df       	rcall	.-380    	; 0x200c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2188:	e0 91 4f 0d 	lds	r30, 0x0D4F	; 0x800d4f <pxCurrentTimerList>
    218c:	f0 91 50 0d 	lds	r31, 0x0D50	; 0x800d50 <pxCurrentTimerList+0x1>
    2190:	80 81       	ld	r24, Z
    2192:	81 11       	cpse	r24, r1
    2194:	be cf       	rjmp	.-132    	; 0x2112 <prvSampleTimeNow+0x4a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2196:	80 91 4d 0d 	lds	r24, 0x0D4D	; 0x800d4d <pxOverflowTimerList>
    219a:	90 91 4e 0d 	lds	r25, 0x0D4E	; 0x800d4e <pxOverflowTimerList+0x1>
    219e:	90 93 50 0d 	sts	0x0D50, r25	; 0x800d50 <pxCurrentTimerList+0x1>
    21a2:	80 93 4f 0d 	sts	0x0D4F, r24	; 0x800d4f <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    21a6:	f0 93 4e 0d 	sts	0x0D4E, r31	; 0x800d4e <pxOverflowTimerList+0x1>
    21aa:	e0 93 4d 0d 	sts	0x0D4D, r30	; 0x800d4d <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	f1 01       	movw	r30, r2
    21b2:	80 83       	st	Z, r24
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <prvSampleTimeNow+0xf2>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    21b6:	f1 01       	movw	r30, r2
    21b8:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    21ba:	40 92 45 0d 	sts	0x0D45, r4	; 0x800d45 <xLastTime.2436>
    21be:	50 92 46 0d 	sts	0x0D46, r5	; 0x800d46 <xLastTime.2436+0x1>
    21c2:	60 92 47 0d 	sts	0x0D47, r6	; 0x800d47 <xLastTime.2436+0x2>
    21c6:	70 92 48 0d 	sts	0x0D48, r7	; 0x800d48 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    21ca:	c3 01       	movw	r24, r6
    21cc:	b2 01       	movw	r22, r4
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	7f 90       	pop	r7
    21e8:	6f 90       	pop	r6
    21ea:	5f 90       	pop	r5
    21ec:	4f 90       	pop	r4
    21ee:	3f 90       	pop	r3
    21f0:	2f 90       	pop	r2
    21f2:	08 95       	ret

000021f4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    21f4:	08 95       	ret

000021f6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    21f6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    21f8:	2f 9a       	sbi	0x05, 7	; 5
    21fa:	08 95       	ret

000021fc <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    21fc:	1f 9a       	sbi	0x03, 7	; 3
    21fe:	08 95       	ret

00002200 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2200:	fa df       	rcall	.-12     	; 0x21f6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2202:	2f ef       	ldi	r18, 0xFF	; 255
    2204:	80 e7       	ldi	r24, 0x70	; 112
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	21 50       	subi	r18, 0x01	; 1
    220a:	80 40       	sbci	r24, 0x00	; 0
    220c:	90 40       	sbci	r25, 0x00	; 0
    220e:	e1 f7       	brne	.-8      	; 0x2208 <vApplicationMallocFailedHook+0x8>
    2210:	00 c0       	rjmp	.+0      	; 0x2212 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2212:	00 00       	nop
    2214:	f3 df       	rcall	.-26     	; 0x21fc <prvBlinkMainLed>
    2216:	f5 cf       	rjmp	.-22     	; 0x2202 <vApplicationMallocFailedHook+0x2>

00002218 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2218:	ee df       	rcall	.-36     	; 0x21f6 <prvSetMainLedOn>
    221a:	2f ef       	ldi	r18, 0xFF	; 255
    221c:	87 ea       	ldi	r24, 0xA7	; 167
    221e:	91 e6       	ldi	r25, 0x61	; 97
    2220:	21 50       	subi	r18, 0x01	; 1
    2222:	80 40       	sbci	r24, 0x00	; 0
    2224:	90 40       	sbci	r25, 0x00	; 0
    2226:	e1 f7       	brne	.-8      	; 0x2220 <vApplicationStackOverflowHook+0x8>
    2228:	00 c0       	rjmp	.+0      	; 0x222a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    222a:	00 00       	nop
    222c:	e7 df       	rcall	.-50     	; 0x21fc <prvBlinkMainLed>
    222e:	f5 cf       	rjmp	.-22     	; 0x221a <vApplicationStackOverflowHook+0x2>

00002230 <initialiseSystem>:
{
	// Set output ports for leds used in the example
	// A0 for temperature sensor
	// A1 for humidity sensor
	// A2 for carbon dioxide sensor
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA7);
    2230:	81 b1       	in	r24, 0x01	; 1
    2232:	87 68       	ori	r24, 0x87	; 135
    2234:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	b6 c4       	rjmp	.+2412   	; 0x2ba6 <stdio_initialise>
    223a:	08 95       	ret

0000223c <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    223c:	f9 df       	rcall	.-14     	; 0x2230 <initialiseSystem>
	printf("Program Started!!!\n");
    223e:	88 e9       	ldi	r24, 0x98	; 152
    2240:	92 e0       	ldi	r25, 0x02	; 2
    2242:	0e 94 19 1a 	call	0x3432	; 0x3432 <puts>
	sensorModelManager_create();
    2246:	0e 94 1b 03 	call	0x636	; 0x636 <sensorModelManager_create>
    224a:	ff cf       	rjmp	.-2      	; 0x224a <main+0xe>

0000224c <__fixsfsi>:
    224c:	04 d0       	rcall	.+8      	; 0x2256 <__fixunssfsi>
    224e:	68 94       	set
    2250:	b1 11       	cpse	r27, r1
    2252:	50 c0       	rjmp	.+160    	; 0x22f4 <__fp_szero>
    2254:	08 95       	ret

00002256 <__fixunssfsi>:
    2256:	33 d0       	rcall	.+102    	; 0x22be <__fp_splitA>
    2258:	88 f0       	brcs	.+34     	; 0x227c <__fixunssfsi+0x26>
    225a:	9f 57       	subi	r25, 0x7F	; 127
    225c:	90 f0       	brcs	.+36     	; 0x2282 <__fixunssfsi+0x2c>
    225e:	b9 2f       	mov	r27, r25
    2260:	99 27       	eor	r25, r25
    2262:	b7 51       	subi	r27, 0x17	; 23
    2264:	a0 f0       	brcs	.+40     	; 0x228e <__fixunssfsi+0x38>
    2266:	d1 f0       	breq	.+52     	; 0x229c <__fixunssfsi+0x46>
    2268:	66 0f       	add	r22, r22
    226a:	77 1f       	adc	r23, r23
    226c:	88 1f       	adc	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	1a f0       	brmi	.+6      	; 0x2278 <__fixunssfsi+0x22>
    2272:	ba 95       	dec	r27
    2274:	c9 f7       	brne	.-14     	; 0x2268 <__fixunssfsi+0x12>
    2276:	12 c0       	rjmp	.+36     	; 0x229c <__fixunssfsi+0x46>
    2278:	b1 30       	cpi	r27, 0x01	; 1
    227a:	81 f0       	breq	.+32     	; 0x229c <__fixunssfsi+0x46>
    227c:	3a d0       	rcall	.+116    	; 0x22f2 <__fp_zero>
    227e:	b1 e0       	ldi	r27, 0x01	; 1
    2280:	08 95       	ret
    2282:	37 c0       	rjmp	.+110    	; 0x22f2 <__fp_zero>
    2284:	67 2f       	mov	r22, r23
    2286:	78 2f       	mov	r23, r24
    2288:	88 27       	eor	r24, r24
    228a:	b8 5f       	subi	r27, 0xF8	; 248
    228c:	39 f0       	breq	.+14     	; 0x229c <__fixunssfsi+0x46>
    228e:	b9 3f       	cpi	r27, 0xF9	; 249
    2290:	cc f3       	brlt	.-14     	; 0x2284 <__fixunssfsi+0x2e>
    2292:	86 95       	lsr	r24
    2294:	77 95       	ror	r23
    2296:	67 95       	ror	r22
    2298:	b3 95       	inc	r27
    229a:	d9 f7       	brne	.-10     	; 0x2292 <__fixunssfsi+0x3c>
    229c:	3e f4       	brtc	.+14     	; 0x22ac <__fixunssfsi+0x56>
    229e:	90 95       	com	r25
    22a0:	80 95       	com	r24
    22a2:	70 95       	com	r23
    22a4:	61 95       	neg	r22
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	8f 4f       	sbci	r24, 0xFF	; 255
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	08 95       	ret

000022ae <__fp_split3>:
    22ae:	57 fd       	sbrc	r21, 7
    22b0:	90 58       	subi	r25, 0x80	; 128
    22b2:	44 0f       	add	r20, r20
    22b4:	55 1f       	adc	r21, r21
    22b6:	59 f0       	breq	.+22     	; 0x22ce <__fp_splitA+0x10>
    22b8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ba:	71 f0       	breq	.+28     	; 0x22d8 <__fp_splitA+0x1a>
    22bc:	47 95       	ror	r20

000022be <__fp_splitA>:
    22be:	88 0f       	add	r24, r24
    22c0:	97 fb       	bst	r25, 7
    22c2:	99 1f       	adc	r25, r25
    22c4:	61 f0       	breq	.+24     	; 0x22de <__fp_splitA+0x20>
    22c6:	9f 3f       	cpi	r25, 0xFF	; 255
    22c8:	79 f0       	breq	.+30     	; 0x22e8 <__fp_splitA+0x2a>
    22ca:	87 95       	ror	r24
    22cc:	08 95       	ret
    22ce:	12 16       	cp	r1, r18
    22d0:	13 06       	cpc	r1, r19
    22d2:	14 06       	cpc	r1, r20
    22d4:	55 1f       	adc	r21, r21
    22d6:	f2 cf       	rjmp	.-28     	; 0x22bc <__fp_split3+0xe>
    22d8:	46 95       	lsr	r20
    22da:	f1 df       	rcall	.-30     	; 0x22be <__fp_splitA>
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <__fp_splitA+0x30>
    22de:	16 16       	cp	r1, r22
    22e0:	17 06       	cpc	r1, r23
    22e2:	18 06       	cpc	r1, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	f1 cf       	rjmp	.-30     	; 0x22ca <__fp_splitA+0xc>
    22e8:	86 95       	lsr	r24
    22ea:	71 05       	cpc	r23, r1
    22ec:	61 05       	cpc	r22, r1
    22ee:	08 94       	sec
    22f0:	08 95       	ret

000022f2 <__fp_zero>:
    22f2:	e8 94       	clt

000022f4 <__fp_szero>:
    22f4:	bb 27       	eor	r27, r27
    22f6:	66 27       	eor	r22, r22
    22f8:	77 27       	eor	r23, r23
    22fa:	cb 01       	movw	r24, r22
    22fc:	97 f9       	bld	r25, 7
    22fe:	08 95       	ret

00002300 <__mulsf3>:
    2300:	0b d0       	rcall	.+22     	; 0x2318 <__mulsf3x>
    2302:	78 c0       	rjmp	.+240    	; 0x23f4 <__fp_round>
    2304:	69 d0       	rcall	.+210    	; 0x23d8 <__fp_pscA>
    2306:	28 f0       	brcs	.+10     	; 0x2312 <__mulsf3+0x12>
    2308:	6e d0       	rcall	.+220    	; 0x23e6 <__fp_pscB>
    230a:	18 f0       	brcs	.+6      	; 0x2312 <__mulsf3+0x12>
    230c:	95 23       	and	r25, r21
    230e:	09 f0       	breq	.+2      	; 0x2312 <__mulsf3+0x12>
    2310:	5a c0       	rjmp	.+180    	; 0x23c6 <__fp_inf>
    2312:	5f c0       	rjmp	.+190    	; 0x23d2 <__fp_nan>
    2314:	11 24       	eor	r1, r1
    2316:	ee cf       	rjmp	.-36     	; 0x22f4 <__fp_szero>

00002318 <__mulsf3x>:
    2318:	ca df       	rcall	.-108    	; 0x22ae <__fp_split3>
    231a:	a0 f3       	brcs	.-24     	; 0x2304 <__mulsf3+0x4>

0000231c <__mulsf3_pse>:
    231c:	95 9f       	mul	r25, r21
    231e:	d1 f3       	breq	.-12     	; 0x2314 <__mulsf3+0x14>
    2320:	95 0f       	add	r25, r21
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	55 1f       	adc	r21, r21
    2326:	62 9f       	mul	r22, r18
    2328:	f0 01       	movw	r30, r0
    232a:	72 9f       	mul	r23, r18
    232c:	bb 27       	eor	r27, r27
    232e:	f0 0d       	add	r31, r0
    2330:	b1 1d       	adc	r27, r1
    2332:	63 9f       	mul	r22, r19
    2334:	aa 27       	eor	r26, r26
    2336:	f0 0d       	add	r31, r0
    2338:	b1 1d       	adc	r27, r1
    233a:	aa 1f       	adc	r26, r26
    233c:	64 9f       	mul	r22, r20
    233e:	66 27       	eor	r22, r22
    2340:	b0 0d       	add	r27, r0
    2342:	a1 1d       	adc	r26, r1
    2344:	66 1f       	adc	r22, r22
    2346:	82 9f       	mul	r24, r18
    2348:	22 27       	eor	r18, r18
    234a:	b0 0d       	add	r27, r0
    234c:	a1 1d       	adc	r26, r1
    234e:	62 1f       	adc	r22, r18
    2350:	73 9f       	mul	r23, r19
    2352:	b0 0d       	add	r27, r0
    2354:	a1 1d       	adc	r26, r1
    2356:	62 1f       	adc	r22, r18
    2358:	83 9f       	mul	r24, r19
    235a:	a0 0d       	add	r26, r0
    235c:	61 1d       	adc	r22, r1
    235e:	22 1f       	adc	r18, r18
    2360:	74 9f       	mul	r23, r20
    2362:	33 27       	eor	r19, r19
    2364:	a0 0d       	add	r26, r0
    2366:	61 1d       	adc	r22, r1
    2368:	23 1f       	adc	r18, r19
    236a:	84 9f       	mul	r24, r20
    236c:	60 0d       	add	r22, r0
    236e:	21 1d       	adc	r18, r1
    2370:	82 2f       	mov	r24, r18
    2372:	76 2f       	mov	r23, r22
    2374:	6a 2f       	mov	r22, r26
    2376:	11 24       	eor	r1, r1
    2378:	9f 57       	subi	r25, 0x7F	; 127
    237a:	50 40       	sbci	r21, 0x00	; 0
    237c:	8a f0       	brmi	.+34     	; 0x23a0 <__mulsf3_pse+0x84>
    237e:	e1 f0       	breq	.+56     	; 0x23b8 <__mulsf3_pse+0x9c>
    2380:	88 23       	and	r24, r24
    2382:	4a f0       	brmi	.+18     	; 0x2396 <__mulsf3_pse+0x7a>
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	bb 1f       	adc	r27, r27
    238a:	66 1f       	adc	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	88 1f       	adc	r24, r24
    2390:	91 50       	subi	r25, 0x01	; 1
    2392:	50 40       	sbci	r21, 0x00	; 0
    2394:	a9 f7       	brne	.-22     	; 0x2380 <__mulsf3_pse+0x64>
    2396:	9e 3f       	cpi	r25, 0xFE	; 254
    2398:	51 05       	cpc	r21, r1
    239a:	70 f0       	brcs	.+28     	; 0x23b8 <__mulsf3_pse+0x9c>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <__fp_inf>
    239e:	aa cf       	rjmp	.-172    	; 0x22f4 <__fp_szero>
    23a0:	5f 3f       	cpi	r21, 0xFF	; 255
    23a2:	ec f3       	brlt	.-6      	; 0x239e <__mulsf3_pse+0x82>
    23a4:	98 3e       	cpi	r25, 0xE8	; 232
    23a6:	dc f3       	brlt	.-10     	; 0x239e <__mulsf3_pse+0x82>
    23a8:	86 95       	lsr	r24
    23aa:	77 95       	ror	r23
    23ac:	67 95       	ror	r22
    23ae:	b7 95       	ror	r27
    23b0:	f7 95       	ror	r31
    23b2:	e7 95       	ror	r30
    23b4:	9f 5f       	subi	r25, 0xFF	; 255
    23b6:	c1 f7       	brne	.-16     	; 0x23a8 <__mulsf3_pse+0x8c>
    23b8:	fe 2b       	or	r31, r30
    23ba:	88 0f       	add	r24, r24
    23bc:	91 1d       	adc	r25, r1
    23be:	96 95       	lsr	r25
    23c0:	87 95       	ror	r24
    23c2:	97 f9       	bld	r25, 7
    23c4:	08 95       	ret

000023c6 <__fp_inf>:
    23c6:	97 f9       	bld	r25, 7
    23c8:	9f 67       	ori	r25, 0x7F	; 127
    23ca:	80 e8       	ldi	r24, 0x80	; 128
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	08 95       	ret

000023d2 <__fp_nan>:
    23d2:	9f ef       	ldi	r25, 0xFF	; 255
    23d4:	80 ec       	ldi	r24, 0xC0	; 192
    23d6:	08 95       	ret

000023d8 <__fp_pscA>:
    23d8:	00 24       	eor	r0, r0
    23da:	0a 94       	dec	r0
    23dc:	16 16       	cp	r1, r22
    23de:	17 06       	cpc	r1, r23
    23e0:	18 06       	cpc	r1, r24
    23e2:	09 06       	cpc	r0, r25
    23e4:	08 95       	ret

000023e6 <__fp_pscB>:
    23e6:	00 24       	eor	r0, r0
    23e8:	0a 94       	dec	r0
    23ea:	12 16       	cp	r1, r18
    23ec:	13 06       	cpc	r1, r19
    23ee:	14 06       	cpc	r1, r20
    23f0:	05 06       	cpc	r0, r21
    23f2:	08 95       	ret

000023f4 <__fp_round>:
    23f4:	09 2e       	mov	r0, r25
    23f6:	03 94       	inc	r0
    23f8:	00 0c       	add	r0, r0
    23fa:	11 f4       	brne	.+4      	; 0x2400 <__fp_round+0xc>
    23fc:	88 23       	and	r24, r24
    23fe:	52 f0       	brmi	.+20     	; 0x2414 <__fp_round+0x20>
    2400:	bb 0f       	add	r27, r27
    2402:	40 f4       	brcc	.+16     	; 0x2414 <__fp_round+0x20>
    2404:	bf 2b       	or	r27, r31
    2406:	11 f4       	brne	.+4      	; 0x240c <__fp_round+0x18>
    2408:	60 ff       	sbrs	r22, 0
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <__fp_round+0x20>
    240c:	6f 5f       	subi	r22, 0xFF	; 255
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	8f 4f       	sbci	r24, 0xFF	; 255
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	08 95       	ret

00002416 <_hihTwiCallback>:
    2416:	65 30       	cpi	r22, 0x05	; 5
    2418:	f1 f4       	brne	.+60     	; 0x2456 <_hihTwiCallback+0x40>
    241a:	fa 01       	movw	r30, r20
    241c:	80 81       	ld	r24, Z
    241e:	8f 73       	andi	r24, 0x3F	; 63
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	98 2f       	mov	r25, r24
    2424:	88 27       	eor	r24, r24
    2426:	21 81       	ldd	r18, Z+1	; 0x01
    2428:	82 2b       	or	r24, r18
    242a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    242e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	f0 e4       	ldi	r31, 0x40	; 64
    2436:	8f 9f       	mul	r24, r31
    2438:	c0 01       	movw	r24, r0
    243a:	11 24       	eor	r1, r1
    243c:	fa 01       	movw	r30, r20
    243e:	23 81       	ldd	r18, Z+3	; 0x03
    2440:	26 95       	lsr	r18
    2442:	26 95       	lsr	r18
    2444:	82 2b       	or	r24, r18
    2446:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    244a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	80 93 67 0d 	sts	0x0D67, r24	; 0x800d67 <_measuringIsReady>
    2454:	08 95       	ret
    2456:	64 30       	cpi	r22, 0x04	; 4
    2458:	51 f0       	breq	.+20     	; 0x246e <_hihTwiCallback+0x58>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e4       	ldi	r25, 0x40	; 64
    245e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2462:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2466:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    246a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    246e:	08 95       	ret

00002470 <hih8120_initialise>:
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	0b e0       	ldi	r16, 0x0B	; 11
    2476:	12 e1       	ldi	r17, 0x12	; 18
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	34 e2       	ldi	r19, 0x24	; 36
    247c:	44 ef       	ldi	r20, 0xF4	; 244
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	87 e2       	ldi	r24, 0x27	; 39
    2484:	ca d3       	rcall	.+1940   	; 0x2c1a <twiCreate>
    2486:	90 93 69 0d 	sts	0x0D69, r25	; 0x800d69 <_hih8120Handler+0x1>
    248a:	80 93 68 0d 	sts	0x0D68, r24	; 0x800d68 <_hih8120Handler>
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	89 2b       	or	r24, r25
    2492:	09 f0       	breq	.+2      	; 0x2496 <hih8120_initialise+0x26>
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	82 2f       	mov	r24, r18
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <hih8120_measure>:
    249e:	80 91 68 0d 	lds	r24, 0x0D68	; 0x800d68 <_hih8120Handler>
    24a2:	90 91 69 0d 	lds	r25, 0x0D69	; 0x800d69 <_hih8120Handler+0x1>
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	31 f0       	breq	.+12     	; 0x24b6 <hih8120_measure+0x18>
    24aa:	64 e0       	ldi	r22, 0x04	; 4
    24ac:	07 d4       	rcall	.+2062   	; 0x2cbc <twiReceive>
    24ae:	85 30       	cpi	r24, 0x05	; 5
    24b0:	21 f0       	breq	.+8      	; 0x24ba <hih8120_measure+0x1c>
    24b2:	83 e0       	ldi	r24, 0x03	; 3
    24b4:	08 95       	ret
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	08 95       	ret
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	08 95       	ret

000024be <hih8120_getTemperature>:
    24be:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    24c2:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	d1 d5       	rcall	.+2978   	; 0x306e <__floatunsisf>
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	45 e2       	ldi	r20, 0x25	; 37
    24d2:	53 e4       	ldi	r21, 0x43	; 67
    24d4:	15 df       	rcall	.-470    	; 0x2300 <__mulsf3>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	38 ef       	ldi	r19, 0xF8	; 248
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	56 e4       	ldi	r21, 0x46	; 70
    24de:	5f d5       	rcall	.+2750   	; 0x2f9e <__divsf3>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	52 e4       	ldi	r21, 0x42	; 66
    24e8:	f5 c4       	rjmp	.+2538   	; 0x2ed4 <__subsf3>
    24ea:	08 95       	ret

000024ec <serial_create>:
    24ec:	2f 92       	push	r2
    24ee:	3f 92       	push	r3
    24f0:	4f 92       	push	r4
    24f2:	5f 92       	push	r5
    24f4:	6f 92       	push	r6
    24f6:	7f 92       	push	r7
    24f8:	8f 92       	push	r8
    24fa:	9f 92       	push	r9
    24fc:	af 92       	push	r10
    24fe:	cf 92       	push	r12
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	f8 2e       	mov	r15, r24
    2512:	2a 01       	movw	r4, r20
    2514:	3b 01       	movw	r6, r22
    2516:	88 e0       	ldi	r24, 0x08	; 8
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	43 d6       	rcall	.+3206   	; 0x31a2 <malloc>
    251c:	8c 01       	movw	r16, r24
    251e:	8f 2d       	mov	r24, r15
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	fc 01       	movw	r30, r24
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	e6 59       	subi	r30, 0x96	; 150
    252a:	f2 4f       	sbci	r31, 0xF2	; 242
    252c:	11 83       	std	Z+1, r17	; 0x01
    252e:	00 83       	st	Z, r16
    2530:	01 15       	cp	r16, r1
    2532:	11 05       	cpc	r17, r1
    2534:	09 f4       	brne	.+2      	; 0x2538 <serial_create+0x4c>
    2536:	64 c0       	rjmp	.+200    	; 0x2600 <serial_create+0x114>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	fc 01       	movw	r30, r24
    253e:	e5 5f       	subi	r30, 0xF5	; 245
    2540:	fd 4f       	sbci	r31, 0xFD	; 253
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	d8 01       	movw	r26, r16
    2548:	8d 93       	st	X+, r24
    254a:	9c 93       	st	X, r25
    254c:	6c 2d       	mov	r22, r12
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	84 e0       	ldi	r24, 0x04	; 4
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0c d6       	rcall	.+3096   	; 0x316e <calloc>
    2556:	1c 01       	movw	r2, r24
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	86 e0       	ldi	r24, 0x06	; 6
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	06 d6       	rcall	.+3084   	; 0x316e <calloc>
    2562:	7c 01       	movw	r14, r24
    2564:	4c 2d       	mov	r20, r12
    2566:	b1 01       	movw	r22, r2
    2568:	99 d4       	rcall	.+2354   	; 0x2e9c <fifo_init>
    256a:	f8 01       	movw	r30, r16
    256c:	f5 82       	std	Z+5, r15	; 0x05
    256e:	e4 82       	std	Z+4, r14	; 0x04
    2570:	6a 2d       	mov	r22, r10
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	84 e0       	ldi	r24, 0x04	; 4
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	fa d5       	rcall	.+3060   	; 0x316e <calloc>
    257a:	1c 01       	movw	r2, r24
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	86 e0       	ldi	r24, 0x06	; 6
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	f4 d5       	rcall	.+3048   	; 0x316e <calloc>
    2586:	7c 01       	movw	r14, r24
    2588:	4a 2d       	mov	r20, r10
    258a:	b1 01       	movw	r22, r2
    258c:	87 d4       	rcall	.+2318   	; 0x2e9c <fifo_init>
    258e:	d8 01       	movw	r26, r16
    2590:	13 96       	adiw	r26, 0x03	; 3
    2592:	fc 92       	st	X, r15
    2594:	ee 92       	st	-X, r14
    2596:	12 97       	sbiw	r26, 0x02	; 2
    2598:	17 96       	adiw	r26, 0x07	; 7
    259a:	9c 92       	st	X, r9
    259c:	8e 92       	st	-X, r8
    259e:	16 97       	sbiw	r26, 0x06	; 6
    25a0:	ff b6       	in	r15, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	ed 91       	ld	r30, X+
    25a6:	fc 91       	ld	r31, X
    25a8:	11 97       	sbiw	r26, 0x01	; 1
    25aa:	36 97       	sbiw	r30, 0x06	; 6
    25ac:	80 81       	ld	r24, Z
    25ae:	82 60       	ori	r24, 0x02	; 2
    25b0:	80 83       	st	Z, r24
    25b2:	8d 90       	ld	r8, X+
    25b4:	9c 90       	ld	r9, X
    25b6:	c3 01       	movw	r24, r6
    25b8:	b2 01       	movw	r22, r4
    25ba:	59 d5       	rcall	.+2738   	; 0x306e <__floatunsisf>
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	9d de       	rcall	.-710    	; 0x2300 <__mulsf3>
    25c6:	9b 01       	movw	r18, r22
    25c8:	ac 01       	movw	r20, r24
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	74 e2       	ldi	r23, 0x24	; 36
    25ce:	84 e7       	ldi	r24, 0x74	; 116
    25d0:	9b e4       	ldi	r25, 0x4B	; 75
    25d2:	e5 d4       	rcall	.+2506   	; 0x2f9e <__divsf3>
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	7b d4       	rcall	.+2294   	; 0x2ed4 <__subsf3>
    25de:	3b de       	rcall	.-906    	; 0x2256 <__fixunssfsi>
    25e0:	f4 01       	movw	r30, r8
    25e2:	32 97       	sbiw	r30, 0x02	; 2
    25e4:	60 83       	st	Z, r22
    25e6:	d8 01       	movw	r26, r16
    25e8:	ed 91       	ld	r30, X+
    25ea:	fc 91       	ld	r31, X
    25ec:	11 97       	sbiw	r26, 0x01	; 1
    25ee:	35 97       	sbiw	r30, 0x05	; 5
    25f0:	88 e9       	ldi	r24, 0x98	; 152
    25f2:	80 83       	st	Z, r24
    25f4:	ed 91       	ld	r30, X+
    25f6:	fc 91       	ld	r31, X
    25f8:	34 97       	sbiw	r30, 0x04	; 4
    25fa:	86 e0       	ldi	r24, 0x06	; 6
    25fc:	80 83       	st	Z, r24
    25fe:	ff be       	out	0x3f, r15	; 63
    2600:	c8 01       	movw	r24, r16
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	cf 90       	pop	r12
    2610:	af 90       	pop	r10
    2612:	9f 90       	pop	r9
    2614:	8f 90       	pop	r8
    2616:	7f 90       	pop	r7
    2618:	6f 90       	pop	r6
    261a:	5f 90       	pop	r5
    261c:	4f 90       	pop	r4
    261e:	3f 90       	pop	r3
    2620:	2f 90       	pop	r2
    2622:	08 95       	ret

00002624 <serial_sendByte>:
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	dc 01       	movw	r26, r24
    262a:	89 2b       	or	r24, r25
    262c:	01 f1       	breq	.+64     	; 0x266e <serial_sendByte+0x4a>
    262e:	12 96       	adiw	r26, 0x02	; 2
    2630:	ed 91       	ld	r30, X+
    2632:	fc 91       	ld	r31, X
    2634:	13 97       	sbiw	r26, 0x03	; 3
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	25 81       	ldd	r18, Z+5	; 0x05
    263c:	98 1b       	sub	r25, r24
    263e:	92 23       	and	r25, r18
    2640:	84 81       	ldd	r24, Z+4	; 0x04
    2642:	98 17       	cp	r25, r24
    2644:	b1 f0       	breq	.+44     	; 0x2672 <serial_sendByte+0x4e>
    2646:	83 81       	ldd	r24, Z+3	; 0x03
    2648:	26 95       	lsr	r18
    264a:	28 23       	and	r18, r24
    264c:	c0 81       	ld	r28, Z
    264e:	d1 81       	ldd	r29, Z+1	; 0x01
    2650:	c2 0f       	add	r28, r18
    2652:	d1 1d       	adc	r29, r1
    2654:	68 83       	st	Y, r22
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	95 81       	ldd	r25, Z+5	; 0x05
    265a:	89 23       	and	r24, r25
    265c:	83 83       	std	Z+3, r24	; 0x03
    265e:	ed 91       	ld	r30, X+
    2660:	fc 91       	ld	r31, X
    2662:	35 97       	sbiw	r30, 0x05	; 5
    2664:	80 81       	ld	r24, Z
    2666:	80 62       	ori	r24, 0x20	; 32
    2668:	80 83       	st	Z, r24
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	03 c0       	rjmp	.+6      	; 0x2674 <serial_sendByte+0x50>
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <serial_sendByte+0x50>
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <serial_getByte>:
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	d1 f0       	breq	.+52     	; 0x26b2 <serial_getByte+0x38>
    267e:	dc 01       	movw	r26, r24
    2680:	14 96       	adiw	r26, 0x04	; 4
    2682:	ed 91       	ld	r30, X+
    2684:	fc 91       	ld	r31, X
    2686:	15 97       	sbiw	r26, 0x05	; 5
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	98 17       	cp	r25, r24
    268e:	99 f0       	breq	.+38     	; 0x26b6 <serial_getByte+0x3c>
    2690:	92 81       	ldd	r25, Z+2	; 0x02
    2692:	85 81       	ldd	r24, Z+5	; 0x05
    2694:	86 95       	lsr	r24
    2696:	89 23       	and	r24, r25
    2698:	a0 81       	ld	r26, Z
    269a:	b1 81       	ldd	r27, Z+1	; 0x01
    269c:	a8 0f       	add	r26, r24
    269e:	b1 1d       	adc	r27, r1
    26a0:	8c 91       	ld	r24, X
    26a2:	db 01       	movw	r26, r22
    26a4:	8c 93       	st	X, r24
    26a6:	9f 5f       	subi	r25, 0xFF	; 255
    26a8:	85 81       	ldd	r24, Z+5	; 0x05
    26aa:	98 23       	and	r25, r24
    26ac:	92 83       	std	Z+2, r25	; 0x02
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	08 95       	ret
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	08 95       	ret
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	08 95       	ret

000026ba <__vector_25>:
    26ba:	1f 92       	push	r1
    26bc:	0f 92       	push	r0
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	0f 92       	push	r0
    26c2:	11 24       	eor	r1, r1
    26c4:	0b b6       	in	r0, 0x3b	; 59
    26c6:	0f 92       	push	r0
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	6f 93       	push	r22
    26d2:	7f 93       	push	r23
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	af 93       	push	r26
    26da:	bf 93       	push	r27
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	ef 93       	push	r30
    26e2:	ff 93       	push	r31
    26e4:	a0 91 6a 0d 	lds	r26, 0x0D6A	; 0x800d6a <_ser_handle>
    26e8:	b0 91 6b 0d 	lds	r27, 0x0D6B	; 0x800d6b <_ser_handle+0x1>
    26ec:	10 97       	sbiw	r26, 0x00	; 0
    26ee:	11 f1       	breq	.+68     	; 0x2734 <__vector_25+0x7a>
    26f0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    26f4:	14 96       	adiw	r26, 0x04	; 4
    26f6:	ed 91       	ld	r30, X+
    26f8:	fc 91       	ld	r31, X
    26fa:	15 97       	sbiw	r26, 0x05	; 5
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	25 81       	ldd	r18, Z+5	; 0x05
    2702:	98 1b       	sub	r25, r24
    2704:	92 23       	and	r25, r18
    2706:	84 81       	ldd	r24, Z+4	; 0x04
    2708:	98 17       	cp	r25, r24
    270a:	61 f0       	breq	.+24     	; 0x2724 <__vector_25+0x6a>
    270c:	83 81       	ldd	r24, Z+3	; 0x03
    270e:	26 95       	lsr	r18
    2710:	28 23       	and	r18, r24
    2712:	c0 81       	ld	r28, Z
    2714:	d1 81       	ldd	r29, Z+1	; 0x01
    2716:	c2 0f       	add	r28, r18
    2718:	d1 1d       	adc	r29, r1
    271a:	68 83       	st	Y, r22
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	95 81       	ldd	r25, Z+5	; 0x05
    2720:	89 23       	and	r24, r25
    2722:	83 83       	std	Z+3, r24	; 0x03
    2724:	16 96       	adiw	r26, 0x06	; 6
    2726:	ed 91       	ld	r30, X+
    2728:	fc 91       	ld	r31, X
    272a:	17 97       	sbiw	r26, 0x07	; 7
    272c:	30 97       	sbiw	r30, 0x00	; 0
    272e:	11 f0       	breq	.+4      	; 0x2734 <__vector_25+0x7a>
    2730:	cd 01       	movw	r24, r26
    2732:	19 95       	eicall
    2734:	ff 91       	pop	r31
    2736:	ef 91       	pop	r30
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	bf 91       	pop	r27
    273e:	af 91       	pop	r26
    2740:	9f 91       	pop	r25
    2742:	8f 91       	pop	r24
    2744:	7f 91       	pop	r23
    2746:	6f 91       	pop	r22
    2748:	5f 91       	pop	r21
    274a:	4f 91       	pop	r20
    274c:	3f 91       	pop	r19
    274e:	2f 91       	pop	r18
    2750:	0f 90       	pop	r0
    2752:	0b be       	out	0x3b, r0	; 59
    2754:	0f 90       	pop	r0
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	0f 90       	pop	r0
    275a:	1f 90       	pop	r1
    275c:	18 95       	reti

0000275e <__vector_26>:
    275e:	1f 92       	push	r1
    2760:	0f 92       	push	r0
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	0b b6       	in	r0, 0x3b	; 59
    276a:	0f 92       	push	r0
    276c:	2f 93       	push	r18
    276e:	8f 93       	push	r24
    2770:	9f 93       	push	r25
    2772:	af 93       	push	r26
    2774:	bf 93       	push	r27
    2776:	ef 93       	push	r30
    2778:	ff 93       	push	r31
    277a:	e0 91 6a 0d 	lds	r30, 0x0D6A	; 0x800d6a <_ser_handle>
    277e:	f0 91 6b 0d 	lds	r31, 0x0D6B	; 0x800d6b <_ser_handle+0x1>
    2782:	30 97       	sbiw	r30, 0x00	; 0
    2784:	b9 f0       	breq	.+46     	; 0x27b4 <__vector_26+0x56>
    2786:	02 80       	ldd	r0, Z+2	; 0x02
    2788:	f3 81       	ldd	r31, Z+3	; 0x03
    278a:	e0 2d       	mov	r30, r0
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	98 17       	cp	r25, r24
    2792:	b1 f0       	breq	.+44     	; 0x27c0 <__vector_26+0x62>
    2794:	92 81       	ldd	r25, Z+2	; 0x02
    2796:	85 81       	ldd	r24, Z+5	; 0x05
    2798:	28 2f       	mov	r18, r24
    279a:	26 95       	lsr	r18
    279c:	29 23       	and	r18, r25
    279e:	a0 81       	ld	r26, Z
    27a0:	b1 81       	ldd	r27, Z+1	; 0x01
    27a2:	a2 0f       	add	r26, r18
    27a4:	b1 1d       	adc	r27, r1
    27a6:	2c 91       	ld	r18, X
    27a8:	9f 5f       	subi	r25, 0xFF	; 255
    27aa:	89 23       	and	r24, r25
    27ac:	82 83       	std	Z+2, r24	; 0x02
    27ae:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    27b2:	0b c0       	rjmp	.+22     	; 0x27ca <__vector_26+0x6c>
    27b4:	e1 ec       	ldi	r30, 0xC1	; 193
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 7d       	andi	r24, 0xDF	; 223
    27bc:	80 83       	st	Z, r24
    27be:	05 c0       	rjmp	.+10     	; 0x27ca <__vector_26+0x6c>
    27c0:	e1 ec       	ldi	r30, 0xC1	; 193
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7d       	andi	r24, 0xDF	; 223
    27c8:	80 83       	st	Z, r24
    27ca:	ff 91       	pop	r31
    27cc:	ef 91       	pop	r30
    27ce:	bf 91       	pop	r27
    27d0:	af 91       	pop	r26
    27d2:	9f 91       	pop	r25
    27d4:	8f 91       	pop	r24
    27d6:	2f 91       	pop	r18
    27d8:	0f 90       	pop	r0
    27da:	0b be       	out	0x3b, r0	; 59
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <__vector_36>:
    27e6:	1f 92       	push	r1
    27e8:	0f 92       	push	r0
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	0f 92       	push	r0
    27ee:	11 24       	eor	r1, r1
    27f0:	0b b6       	in	r0, 0x3b	; 59
    27f2:	0f 92       	push	r0
    27f4:	2f 93       	push	r18
    27f6:	3f 93       	push	r19
    27f8:	4f 93       	push	r20
    27fa:	5f 93       	push	r21
    27fc:	6f 93       	push	r22
    27fe:	7f 93       	push	r23
    2800:	8f 93       	push	r24
    2802:	9f 93       	push	r25
    2804:	af 93       	push	r26
    2806:	bf 93       	push	r27
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	ef 93       	push	r30
    280e:	ff 93       	push	r31
    2810:	a0 91 6c 0d 	lds	r26, 0x0D6C	; 0x800d6c <_ser_handle+0x2>
    2814:	b0 91 6d 0d 	lds	r27, 0x0D6D	; 0x800d6d <_ser_handle+0x3>
    2818:	10 97       	sbiw	r26, 0x00	; 0
    281a:	11 f1       	breq	.+68     	; 0x2860 <__vector_36+0x7a>
    281c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2820:	14 96       	adiw	r26, 0x04	; 4
    2822:	ed 91       	ld	r30, X+
    2824:	fc 91       	ld	r31, X
    2826:	15 97       	sbiw	r26, 0x05	; 5
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	25 81       	ldd	r18, Z+5	; 0x05
    282e:	98 1b       	sub	r25, r24
    2830:	92 23       	and	r25, r18
    2832:	84 81       	ldd	r24, Z+4	; 0x04
    2834:	98 17       	cp	r25, r24
    2836:	61 f0       	breq	.+24     	; 0x2850 <__vector_36+0x6a>
    2838:	83 81       	ldd	r24, Z+3	; 0x03
    283a:	26 95       	lsr	r18
    283c:	28 23       	and	r18, r24
    283e:	c0 81       	ld	r28, Z
    2840:	d1 81       	ldd	r29, Z+1	; 0x01
    2842:	c2 0f       	add	r28, r18
    2844:	d1 1d       	adc	r29, r1
    2846:	68 83       	st	Y, r22
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	95 81       	ldd	r25, Z+5	; 0x05
    284c:	89 23       	and	r24, r25
    284e:	83 83       	std	Z+3, r24	; 0x03
    2850:	16 96       	adiw	r26, 0x06	; 6
    2852:	ed 91       	ld	r30, X+
    2854:	fc 91       	ld	r31, X
    2856:	17 97       	sbiw	r26, 0x07	; 7
    2858:	30 97       	sbiw	r30, 0x00	; 0
    285a:	11 f0       	breq	.+4      	; 0x2860 <__vector_36+0x7a>
    285c:	cd 01       	movw	r24, r26
    285e:	19 95       	eicall
    2860:	ff 91       	pop	r31
    2862:	ef 91       	pop	r30
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	bf 91       	pop	r27
    286a:	af 91       	pop	r26
    286c:	9f 91       	pop	r25
    286e:	8f 91       	pop	r24
    2870:	7f 91       	pop	r23
    2872:	6f 91       	pop	r22
    2874:	5f 91       	pop	r21
    2876:	4f 91       	pop	r20
    2878:	3f 91       	pop	r19
    287a:	2f 91       	pop	r18
    287c:	0f 90       	pop	r0
    287e:	0b be       	out	0x3b, r0	; 59
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	0f 90       	pop	r0
    2886:	1f 90       	pop	r1
    2888:	18 95       	reti

0000288a <__vector_37>:
    288a:	1f 92       	push	r1
    288c:	0f 92       	push	r0
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	0f 92       	push	r0
    2892:	11 24       	eor	r1, r1
    2894:	0b b6       	in	r0, 0x3b	; 59
    2896:	0f 92       	push	r0
    2898:	2f 93       	push	r18
    289a:	8f 93       	push	r24
    289c:	9f 93       	push	r25
    289e:	af 93       	push	r26
    28a0:	bf 93       	push	r27
    28a2:	ef 93       	push	r30
    28a4:	ff 93       	push	r31
    28a6:	e0 91 6c 0d 	lds	r30, 0x0D6C	; 0x800d6c <_ser_handle+0x2>
    28aa:	f0 91 6d 0d 	lds	r31, 0x0D6D	; 0x800d6d <_ser_handle+0x3>
    28ae:	30 97       	sbiw	r30, 0x00	; 0
    28b0:	b9 f0       	breq	.+46     	; 0x28e0 <__vector_37+0x56>
    28b2:	02 80       	ldd	r0, Z+2	; 0x02
    28b4:	f3 81       	ldd	r31, Z+3	; 0x03
    28b6:	e0 2d       	mov	r30, r0
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	98 17       	cp	r25, r24
    28be:	b1 f0       	breq	.+44     	; 0x28ec <__vector_37+0x62>
    28c0:	92 81       	ldd	r25, Z+2	; 0x02
    28c2:	85 81       	ldd	r24, Z+5	; 0x05
    28c4:	28 2f       	mov	r18, r24
    28c6:	26 95       	lsr	r18
    28c8:	29 23       	and	r18, r25
    28ca:	a0 81       	ld	r26, Z
    28cc:	b1 81       	ldd	r27, Z+1	; 0x01
    28ce:	a2 0f       	add	r26, r18
    28d0:	b1 1d       	adc	r27, r1
    28d2:	2c 91       	ld	r18, X
    28d4:	9f 5f       	subi	r25, 0xFF	; 255
    28d6:	89 23       	and	r24, r25
    28d8:	82 83       	std	Z+2, r24	; 0x02
    28da:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    28de:	0b c0       	rjmp	.+22     	; 0x28f6 <__vector_37+0x6c>
    28e0:	e9 ec       	ldi	r30, 0xC9	; 201
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8f 7d       	andi	r24, 0xDF	; 223
    28e8:	80 83       	st	Z, r24
    28ea:	05 c0       	rjmp	.+10     	; 0x28f6 <__vector_37+0x6c>
    28ec:	e9 ec       	ldi	r30, 0xC9	; 201
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	8f 7d       	andi	r24, 0xDF	; 223
    28f4:	80 83       	st	Z, r24
    28f6:	ff 91       	pop	r31
    28f8:	ef 91       	pop	r30
    28fa:	bf 91       	pop	r27
    28fc:	af 91       	pop	r26
    28fe:	9f 91       	pop	r25
    2900:	8f 91       	pop	r24
    2902:	2f 91       	pop	r18
    2904:	0f 90       	pop	r0
    2906:	0b be       	out	0x3b, r0	; 59
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0f 90       	pop	r0
    290e:	1f 90       	pop	r1
    2910:	18 95       	reti

00002912 <__vector_51>:
    2912:	1f 92       	push	r1
    2914:	0f 92       	push	r0
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	0f 92       	push	r0
    291a:	11 24       	eor	r1, r1
    291c:	0b b6       	in	r0, 0x3b	; 59
    291e:	0f 92       	push	r0
    2920:	2f 93       	push	r18
    2922:	3f 93       	push	r19
    2924:	4f 93       	push	r20
    2926:	5f 93       	push	r21
    2928:	6f 93       	push	r22
    292a:	7f 93       	push	r23
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	af 93       	push	r26
    2932:	bf 93       	push	r27
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ef 93       	push	r30
    293a:	ff 93       	push	r31
    293c:	a0 91 6e 0d 	lds	r26, 0x0D6E	; 0x800d6e <_ser_handle+0x4>
    2940:	b0 91 6f 0d 	lds	r27, 0x0D6F	; 0x800d6f <_ser_handle+0x5>
    2944:	10 97       	sbiw	r26, 0x00	; 0
    2946:	11 f1       	breq	.+68     	; 0x298c <__vector_51+0x7a>
    2948:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    294c:	14 96       	adiw	r26, 0x04	; 4
    294e:	ed 91       	ld	r30, X+
    2950:	fc 91       	ld	r31, X
    2952:	15 97       	sbiw	r26, 0x05	; 5
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	25 81       	ldd	r18, Z+5	; 0x05
    295a:	98 1b       	sub	r25, r24
    295c:	92 23       	and	r25, r18
    295e:	84 81       	ldd	r24, Z+4	; 0x04
    2960:	98 17       	cp	r25, r24
    2962:	61 f0       	breq	.+24     	; 0x297c <__vector_51+0x6a>
    2964:	83 81       	ldd	r24, Z+3	; 0x03
    2966:	26 95       	lsr	r18
    2968:	28 23       	and	r18, r24
    296a:	c0 81       	ld	r28, Z
    296c:	d1 81       	ldd	r29, Z+1	; 0x01
    296e:	c2 0f       	add	r28, r18
    2970:	d1 1d       	adc	r29, r1
    2972:	68 83       	st	Y, r22
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	95 81       	ldd	r25, Z+5	; 0x05
    2978:	89 23       	and	r24, r25
    297a:	83 83       	std	Z+3, r24	; 0x03
    297c:	16 96       	adiw	r26, 0x06	; 6
    297e:	ed 91       	ld	r30, X+
    2980:	fc 91       	ld	r31, X
    2982:	17 97       	sbiw	r26, 0x07	; 7
    2984:	30 97       	sbiw	r30, 0x00	; 0
    2986:	11 f0       	breq	.+4      	; 0x298c <__vector_51+0x7a>
    2988:	cd 01       	movw	r24, r26
    298a:	19 95       	eicall
    298c:	ff 91       	pop	r31
    298e:	ef 91       	pop	r30
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	bf 91       	pop	r27
    2996:	af 91       	pop	r26
    2998:	9f 91       	pop	r25
    299a:	8f 91       	pop	r24
    299c:	7f 91       	pop	r23
    299e:	6f 91       	pop	r22
    29a0:	5f 91       	pop	r21
    29a2:	4f 91       	pop	r20
    29a4:	3f 91       	pop	r19
    29a6:	2f 91       	pop	r18
    29a8:	0f 90       	pop	r0
    29aa:	0b be       	out	0x3b, r0	; 59
    29ac:	0f 90       	pop	r0
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	0f 90       	pop	r0
    29b2:	1f 90       	pop	r1
    29b4:	18 95       	reti

000029b6 <__vector_52>:
    29b6:	1f 92       	push	r1
    29b8:	0f 92       	push	r0
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	0f 92       	push	r0
    29be:	11 24       	eor	r1, r1
    29c0:	0b b6       	in	r0, 0x3b	; 59
    29c2:	0f 92       	push	r0
    29c4:	2f 93       	push	r18
    29c6:	8f 93       	push	r24
    29c8:	9f 93       	push	r25
    29ca:	af 93       	push	r26
    29cc:	bf 93       	push	r27
    29ce:	ef 93       	push	r30
    29d0:	ff 93       	push	r31
    29d2:	e0 91 6e 0d 	lds	r30, 0x0D6E	; 0x800d6e <_ser_handle+0x4>
    29d6:	f0 91 6f 0d 	lds	r31, 0x0D6F	; 0x800d6f <_ser_handle+0x5>
    29da:	30 97       	sbiw	r30, 0x00	; 0
    29dc:	b9 f0       	breq	.+46     	; 0x2a0c <__vector_52+0x56>
    29de:	02 80       	ldd	r0, Z+2	; 0x02
    29e0:	f3 81       	ldd	r31, Z+3	; 0x03
    29e2:	e0 2d       	mov	r30, r0
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	98 17       	cp	r25, r24
    29ea:	b1 f0       	breq	.+44     	; 0x2a18 <__vector_52+0x62>
    29ec:	92 81       	ldd	r25, Z+2	; 0x02
    29ee:	85 81       	ldd	r24, Z+5	; 0x05
    29f0:	28 2f       	mov	r18, r24
    29f2:	26 95       	lsr	r18
    29f4:	29 23       	and	r18, r25
    29f6:	a0 81       	ld	r26, Z
    29f8:	b1 81       	ldd	r27, Z+1	; 0x01
    29fa:	a2 0f       	add	r26, r18
    29fc:	b1 1d       	adc	r27, r1
    29fe:	2c 91       	ld	r18, X
    2a00:	9f 5f       	subi	r25, 0xFF	; 255
    2a02:	89 23       	and	r24, r25
    2a04:	82 83       	std	Z+2, r24	; 0x02
    2a06:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2a0a:	0b c0       	rjmp	.+22     	; 0x2a22 <__vector_52+0x6c>
    2a0c:	e1 ed       	ldi	r30, 0xD1	; 209
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8f 7d       	andi	r24, 0xDF	; 223
    2a14:	80 83       	st	Z, r24
    2a16:	05 c0       	rjmp	.+10     	; 0x2a22 <__vector_52+0x6c>
    2a18:	e1 ed       	ldi	r30, 0xD1	; 209
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8f 7d       	andi	r24, 0xDF	; 223
    2a20:	80 83       	st	Z, r24
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	2f 91       	pop	r18
    2a30:	0f 90       	pop	r0
    2a32:	0b be       	out	0x3b, r0	; 59
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	0f 90       	pop	r0
    2a3a:	1f 90       	pop	r1
    2a3c:	18 95       	reti

00002a3e <__vector_54>:
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	0b b6       	in	r0, 0x3b	; 59
    2a4a:	0f 92       	push	r0
    2a4c:	2f 93       	push	r18
    2a4e:	3f 93       	push	r19
    2a50:	4f 93       	push	r20
    2a52:	5f 93       	push	r21
    2a54:	6f 93       	push	r22
    2a56:	7f 93       	push	r23
    2a58:	8f 93       	push	r24
    2a5a:	9f 93       	push	r25
    2a5c:	af 93       	push	r26
    2a5e:	bf 93       	push	r27
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	ef 93       	push	r30
    2a66:	ff 93       	push	r31
    2a68:	a0 91 70 0d 	lds	r26, 0x0D70	; 0x800d70 <_ser_handle+0x6>
    2a6c:	b0 91 71 0d 	lds	r27, 0x0D71	; 0x800d71 <_ser_handle+0x7>
    2a70:	10 97       	sbiw	r26, 0x00	; 0
    2a72:	11 f1       	breq	.+68     	; 0x2ab8 <__vector_54+0x7a>
    2a74:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2a78:	14 96       	adiw	r26, 0x04	; 4
    2a7a:	ed 91       	ld	r30, X+
    2a7c:	fc 91       	ld	r31, X
    2a7e:	15 97       	sbiw	r26, 0x05	; 5
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	25 81       	ldd	r18, Z+5	; 0x05
    2a86:	98 1b       	sub	r25, r24
    2a88:	92 23       	and	r25, r18
    2a8a:	84 81       	ldd	r24, Z+4	; 0x04
    2a8c:	98 17       	cp	r25, r24
    2a8e:	61 f0       	breq	.+24     	; 0x2aa8 <__vector_54+0x6a>
    2a90:	83 81       	ldd	r24, Z+3	; 0x03
    2a92:	26 95       	lsr	r18
    2a94:	28 23       	and	r18, r24
    2a96:	c0 81       	ld	r28, Z
    2a98:	d1 81       	ldd	r29, Z+1	; 0x01
    2a9a:	c2 0f       	add	r28, r18
    2a9c:	d1 1d       	adc	r29, r1
    2a9e:	68 83       	st	Y, r22
    2aa0:	8f 5f       	subi	r24, 0xFF	; 255
    2aa2:	95 81       	ldd	r25, Z+5	; 0x05
    2aa4:	89 23       	and	r24, r25
    2aa6:	83 83       	std	Z+3, r24	; 0x03
    2aa8:	16 96       	adiw	r26, 0x06	; 6
    2aaa:	ed 91       	ld	r30, X+
    2aac:	fc 91       	ld	r31, X
    2aae:	17 97       	sbiw	r26, 0x07	; 7
    2ab0:	30 97       	sbiw	r30, 0x00	; 0
    2ab2:	11 f0       	breq	.+4      	; 0x2ab8 <__vector_54+0x7a>
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	19 95       	eicall
    2ab8:	ff 91       	pop	r31
    2aba:	ef 91       	pop	r30
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	bf 91       	pop	r27
    2ac2:	af 91       	pop	r26
    2ac4:	9f 91       	pop	r25
    2ac6:	8f 91       	pop	r24
    2ac8:	7f 91       	pop	r23
    2aca:	6f 91       	pop	r22
    2acc:	5f 91       	pop	r21
    2ace:	4f 91       	pop	r20
    2ad0:	3f 91       	pop	r19
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0b be       	out	0x3b, r0	; 59
    2ad8:	0f 90       	pop	r0
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	0f 90       	pop	r0
    2ade:	1f 90       	pop	r1
    2ae0:	18 95       	reti

00002ae2 <__vector_55>:
    2ae2:	1f 92       	push	r1
    2ae4:	0f 92       	push	r0
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	0f 92       	push	r0
    2aea:	11 24       	eor	r1, r1
    2aec:	0b b6       	in	r0, 0x3b	; 59
    2aee:	0f 92       	push	r0
    2af0:	2f 93       	push	r18
    2af2:	8f 93       	push	r24
    2af4:	9f 93       	push	r25
    2af6:	af 93       	push	r26
    2af8:	bf 93       	push	r27
    2afa:	ef 93       	push	r30
    2afc:	ff 93       	push	r31
    2afe:	e0 91 70 0d 	lds	r30, 0x0D70	; 0x800d70 <_ser_handle+0x6>
    2b02:	f0 91 71 0d 	lds	r31, 0x0D71	; 0x800d71 <_ser_handle+0x7>
    2b06:	30 97       	sbiw	r30, 0x00	; 0
    2b08:	b9 f0       	breq	.+46     	; 0x2b38 <__vector_55+0x56>
    2b0a:	02 80       	ldd	r0, Z+2	; 0x02
    2b0c:	f3 81       	ldd	r31, Z+3	; 0x03
    2b0e:	e0 2d       	mov	r30, r0
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	98 17       	cp	r25, r24
    2b16:	b1 f0       	breq	.+44     	; 0x2b44 <__vector_55+0x62>
    2b18:	92 81       	ldd	r25, Z+2	; 0x02
    2b1a:	85 81       	ldd	r24, Z+5	; 0x05
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	26 95       	lsr	r18
    2b20:	29 23       	and	r18, r25
    2b22:	a0 81       	ld	r26, Z
    2b24:	b1 81       	ldd	r27, Z+1	; 0x01
    2b26:	a2 0f       	add	r26, r18
    2b28:	b1 1d       	adc	r27, r1
    2b2a:	2c 91       	ld	r18, X
    2b2c:	9f 5f       	subi	r25, 0xFF	; 255
    2b2e:	89 23       	and	r24, r25
    2b30:	82 83       	std	Z+2, r24	; 0x02
    2b32:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2b36:	0b c0       	rjmp	.+22     	; 0x2b4e <__vector_55+0x6c>
    2b38:	e1 e3       	ldi	r30, 0x31	; 49
    2b3a:	f1 e0       	ldi	r31, 0x01	; 1
    2b3c:	80 81       	ld	r24, Z
    2b3e:	8f 7d       	andi	r24, 0xDF	; 223
    2b40:	80 83       	st	Z, r24
    2b42:	05 c0       	rjmp	.+10     	; 0x2b4e <__vector_55+0x6c>
    2b44:	e1 e3       	ldi	r30, 0x31	; 49
    2b46:	f1 e0       	ldi	r31, 0x01	; 1
    2b48:	80 81       	ld	r24, Z
    2b4a:	8f 7d       	andi	r24, 0xDF	; 223
    2b4c:	80 83       	st	Z, r24
    2b4e:	ff 91       	pop	r31
    2b50:	ef 91       	pop	r30
    2b52:	bf 91       	pop	r27
    2b54:	af 91       	pop	r26
    2b56:	9f 91       	pop	r25
    2b58:	8f 91       	pop	r24
    2b5a:	2f 91       	pop	r18
    2b5c:	0f 90       	pop	r0
    2b5e:	0b be       	out	0x3b, r0	; 59
    2b60:	0f 90       	pop	r0
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	0f 90       	pop	r0
    2b66:	1f 90       	pop	r1
    2b68:	18 95       	reti

00002b6a <usart_getchar>:
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	1f 92       	push	r1
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	be 01       	movw	r22, r28
    2b76:	6f 5f       	subi	r22, 0xFF	; 255
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	80 91 72 0d 	lds	r24, 0x0D72	; 0x800d72 <_com_serial_instance>
    2b7e:	90 91 73 0d 	lds	r25, 0x0D73	; 0x800d73 <_com_serial_instance+0x1>
    2b82:	7b dd       	rcall	.-1290   	; 0x267a <serial_getByte>
    2b84:	81 11       	cpse	r24, r1
    2b86:	f6 cf       	rjmp	.-20     	; 0x2b74 <usart_getchar+0xa>
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0f 90       	pop	r0
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	08 95       	ret

00002b94 <usart_putchar>:
    2b94:	68 2f       	mov	r22, r24
    2b96:	80 91 72 0d 	lds	r24, 0x0D72	; 0x800d72 <_com_serial_instance>
    2b9a:	90 91 73 0d 	lds	r25, 0x0D73	; 0x800d73 <_com_serial_instance+0x1>
    2b9e:	42 dd       	rcall	.-1404   	; 0x2624 <serial_sendByte>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	08 95       	ret

00002ba6 <stdio_initialise>:
    2ba6:	8f 92       	push	r8
    2ba8:	9f 92       	push	r9
    2baa:	af 92       	push	r10
    2bac:	cf 92       	push	r12
    2bae:	ef 92       	push	r14
    2bb0:	0f 93       	push	r16
    2bb2:	81 2c       	mov	r8, r1
    2bb4:	91 2c       	mov	r9, r1
    2bb6:	68 94       	set
    2bb8:	aa 24       	eor	r10, r10
    2bba:	a7 f8       	bld	r10, 7
    2bbc:	68 94       	set
    2bbe:	cc 24       	eor	r12, r12
    2bc0:	c7 f8       	bld	r12, 7
    2bc2:	e1 2c       	mov	r14, r1
    2bc4:	00 e0       	ldi	r16, 0x00	; 0
    2bc6:	23 e0       	ldi	r18, 0x03	; 3
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	51 ee       	ldi	r21, 0xE1	; 225
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	8d dc       	rcall	.-1766   	; 0x24ec <serial_create>
    2bd2:	90 93 73 0d 	sts	0x0D73, r25	; 0x800d73 <_com_serial_instance+0x1>
    2bd6:	80 93 72 0d 	sts	0x0D72, r24	; 0x800d72 <_com_serial_instance>
    2bda:	eb e8       	ldi	r30, 0x8B	; 139
    2bdc:	fd e0       	ldi	r31, 0x0D	; 13
    2bde:	83 e1       	ldi	r24, 0x13	; 19
    2be0:	92 e0       	ldi	r25, 0x02	; 2
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
    2be6:	93 83       	std	Z+3, r25	; 0x03
    2be8:	82 83       	std	Z+2, r24	; 0x02
    2bea:	0f 91       	pop	r16
    2bec:	ef 90       	pop	r14
    2bee:	cf 90       	pop	r12
    2bf0:	af 90       	pop	r10
    2bf2:	9f 90       	pop	r9
    2bf4:	8f 90       	pop	r8
    2bf6:	08 95       	ret

00002bf8 <_initTwiInterface>:
    2bf8:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <_twiIsInitiated>
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	0c c0       	rjmp	.+24     	; 0x2c18 <_initTwiInterface+0x20>
    2c00:	8c e0       	ldi	r24, 0x0C	; 12
    2c02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c0c:	84 e0       	ldi	r24, 0x04	; 4
    2c0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	80 93 82 0d 	sts	0x0D82, r24	; 0x800d82 <_twiIsInitiated>
    2c18:	08 95       	ret

00002c1a <twiCreate>:
    2c1a:	af 92       	push	r10
    2c1c:	bf 92       	push	r11
    2c1e:	cf 92       	push	r12
    2c20:	df 92       	push	r13
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	a8 2e       	mov	r10, r24
    2c30:	b6 2e       	mov	r11, r22
    2c32:	69 01       	movw	r12, r18
    2c34:	7a 01       	movw	r14, r20
    2c36:	84 e0       	ldi	r24, 0x04	; 4
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	b3 d2       	rcall	.+1382   	; 0x31a2 <malloc>
    2c3c:	ec 01       	movw	r28, r24
    2c3e:	89 2b       	or	r24, r25
    2c40:	61 f1       	breq	.+88     	; 0x2c9a <twiCreate+0x80>
    2c42:	a8 82       	st	Y, r10
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	b8 12       	cpse	r11, r24
    2c48:	12 c0       	rjmp	.+36     	; 0x2c6e <twiCreate+0x54>
    2c4a:	c7 01       	movw	r24, r14
    2c4c:	b6 01       	movw	r22, r12
    2c4e:	20 ea       	ldi	r18, 0xA0	; 160
    2c50:	36 e8       	ldi	r19, 0x86	; 134
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	48 d2       	rcall	.+1168   	; 0x30e8 <__udivmodsi4>
    2c58:	da 01       	movw	r26, r20
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	40 97       	sbiw	r24, 0x10	; 16
    2c5e:	a1 09       	sbc	r26, r1
    2c60:	b1 09       	sbc	r27, r1
    2c62:	b6 95       	lsr	r27
    2c64:	a7 95       	ror	r26
    2c66:	97 95       	ror	r25
    2c68:	87 95       	ror	r24
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	11 c0       	rjmp	.+34     	; 0x2c90 <twiCreate+0x76>
    2c6e:	c7 01       	movw	r24, r14
    2c70:	b6 01       	movw	r22, r12
    2c72:	20 e8       	ldi	r18, 0x80	; 128
    2c74:	3a e1       	ldi	r19, 0x1A	; 26
    2c76:	46 e0       	ldi	r20, 0x06	; 6
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	36 d2       	rcall	.+1132   	; 0x30e8 <__udivmodsi4>
    2c7c:	da 01       	movw	r26, r20
    2c7e:	c9 01       	movw	r24, r18
    2c80:	40 97       	sbiw	r24, 0x10	; 16
    2c82:	a1 09       	sbc	r26, r1
    2c84:	b1 09       	sbc	r27, r1
    2c86:	b6 95       	lsr	r27
    2c88:	a7 95       	ror	r26
    2c8a:	97 95       	ror	r25
    2c8c:	87 95       	ror	r24
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	1b 83       	std	Y+3, r17	; 0x03
    2c92:	0a 83       	std	Y+2, r16	; 0x02
    2c94:	8c 2f       	mov	r24, r28
    2c96:	9d 2f       	mov	r25, r29
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <twiCreate+0x84>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	bf 90       	pop	r11
    2cb0:	af 90       	pop	r10
    2cb2:	08 95       	ret

00002cb4 <twiIsBusy>:
    2cb4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2cb8:	81 70       	andi	r24, 0x01	; 1
    2cba:	08 95       	ret

00002cbc <twiReceive>:
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	29 f1       	breq	.+74     	; 0x2d10 <twiReceive+0x54>
    2cc6:	6b 30       	cpi	r22, 0x0B	; 11
    2cc8:	28 f5       	brcc	.+74     	; 0x2d14 <twiReceive+0x58>
    2cca:	16 2f       	mov	r17, r22
    2ccc:	ec 01       	movw	r28, r24
    2cce:	f2 df       	rcall	.-28     	; 0x2cb4 <twiIsBusy>
    2cd0:	81 11       	cpse	r24, r1
    2cd2:	22 c0       	rjmp	.+68     	; 0x2d18 <twiReceive+0x5c>
    2cd4:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <_twiCurrentHandler>
    2cd8:	90 91 76 0d 	lds	r25, 0x0D76	; 0x800d76 <_twiCurrentHandler+0x1>
    2cdc:	c8 17       	cp	r28, r24
    2cde:	d9 07       	cpc	r29, r25
    2ce0:	41 f0       	breq	.+16     	; 0x2cf2 <twiReceive+0x36>
    2ce2:	8a df       	rcall	.-236    	; 0x2bf8 <_initTwiInterface>
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2cea:	d0 93 76 0d 	sts	0x0D76, r29	; 0x800d76 <_twiCurrentHandler+0x1>
    2cee:	c0 93 75 0d 	sts	0x0D75, r28	; 0x800d75 <_twiCurrentHandler>
    2cf2:	10 93 77 0d 	sts	0x0D77, r17	; 0x800d77 <_twiMessageLen>
    2cf6:	88 81       	ld	r24, Y
    2cf8:	88 0f       	add	r24, r24
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	80 93 78 0d 	sts	0x0D78, r24	; 0x800d78 <_twiMessageBuffer>
    2d00:	88 ef       	ldi	r24, 0xF8	; 248
    2d02:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2d06:	85 ea       	ldi	r24, 0xA5	; 165
    2d08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d0c:	85 e0       	ldi	r24, 0x05	; 5
    2d0e:	05 c0       	rjmp	.+10     	; 0x2d1a <twiReceive+0x5e>
    2d10:	86 e0       	ldi	r24, 0x06	; 6
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <twiReceive+0x5e>
    2d14:	87 e0       	ldi	r24, 0x07	; 7
    2d16:	01 c0       	rjmp	.+2      	; 0x2d1a <twiReceive+0x5e>
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	08 95       	ret

00002d22 <__vector_39>:
    2d22:	1f 92       	push	r1
    2d24:	0f 92       	push	r0
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	0f 92       	push	r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	0b b6       	in	r0, 0x3b	; 59
    2d2e:	0f 92       	push	r0
    2d30:	2f 93       	push	r18
    2d32:	3f 93       	push	r19
    2d34:	4f 93       	push	r20
    2d36:	5f 93       	push	r21
    2d38:	6f 93       	push	r22
    2d3a:	7f 93       	push	r23
    2d3c:	8f 93       	push	r24
    2d3e:	9f 93       	push	r25
    2d40:	af 93       	push	r26
    2d42:	bf 93       	push	r27
    2d44:	ef 93       	push	r30
    2d46:	ff 93       	push	r31
    2d48:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2d4c:	8e 2f       	mov	r24, r30
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	fc 01       	movw	r30, r24
    2d52:	38 97       	sbiw	r30, 0x08	; 8
    2d54:	e1 35       	cpi	r30, 0x51	; 81
    2d56:	f1 05       	cpc	r31, r1
    2d58:	08 f0       	brcs	.+2      	; 0x2d5c <__vector_39+0x3a>
    2d5a:	75 c0       	rjmp	.+234    	; 0x2e46 <__vector_39+0x124>
    2d5c:	88 27       	eor	r24, r24
    2d5e:	e4 58       	subi	r30, 0x84	; 132
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	8f 4f       	sbci	r24, 0xFF	; 255
    2d64:	e3 c1       	rjmp	.+966    	; 0x312c <__tablejump2__>
    2d66:	10 92 74 0d 	sts	0x0D74, r1	; 0x800d74 <_index.1885>
    2d6a:	e0 91 74 0d 	lds	r30, 0x0D74	; 0x800d74 <_index.1885>
    2d6e:	80 91 77 0d 	lds	r24, 0x0D77	; 0x800d77 <_twiMessageLen>
    2d72:	e8 17       	cp	r30, r24
    2d74:	70 f4       	brcc	.+28     	; 0x2d92 <__vector_39+0x70>
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	8e 0f       	add	r24, r30
    2d7a:	80 93 74 0d 	sts	0x0D74, r24	; 0x800d74 <_index.1885>
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	e8 58       	subi	r30, 0x88	; 136
    2d82:	f2 4f       	sbci	r31, 0xF2	; 242
    2d84:	80 81       	ld	r24, Z
    2d86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2d8a:	85 e8       	ldi	r24, 0x85	; 133
    2d8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d90:	72 c0       	rjmp	.+228    	; 0x2e76 <__vector_39+0x154>
    2d92:	84 e9       	ldi	r24, 0x94	; 148
    2d94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d98:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <_twiCurrentHandler>
    2d9c:	90 91 76 0d 	lds	r25, 0x0D76	; 0x800d76 <_twiCurrentHandler+0x1>
    2da0:	dc 01       	movw	r26, r24
    2da2:	12 96       	adiw	r26, 0x02	; 2
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	13 97       	sbiw	r26, 0x03	; 3
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <__vector_39+0x8e>
    2dae:	63 c0       	rjmp	.+198    	; 0x2e76 <__vector_39+0x154>
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	64 e0       	ldi	r22, 0x04	; 4
    2db8:	19 95       	eicall
    2dba:	5d c0       	rjmp	.+186    	; 0x2e76 <__vector_39+0x154>
    2dbc:	e0 91 74 0d 	lds	r30, 0x0D74	; 0x800d74 <_index.1885>
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	8e 0f       	add	r24, r30
    2dc4:	80 93 74 0d 	sts	0x0D74, r24	; 0x800d74 <_index.1885>
    2dc8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	e8 58       	subi	r30, 0x88	; 136
    2dd0:	f2 4f       	sbci	r31, 0xF2	; 242
    2dd2:	80 83       	st	Z, r24
    2dd4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2dd8:	80 34       	cpi	r24, 0x40	; 64
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <__vector_39+0xbe>
    2ddc:	10 92 74 0d 	sts	0x0D74, r1	; 0x800d74 <_index.1885>
    2de0:	20 91 74 0d 	lds	r18, 0x0D74	; 0x800d74 <_index.1885>
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	80 91 77 0d 	lds	r24, 0x0D77	; 0x800d77 <_twiMessageLen>
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	28 17       	cp	r18, r24
    2df0:	39 07       	cpc	r19, r25
    2df2:	24 f4       	brge	.+8      	; 0x2dfc <__vector_39+0xda>
    2df4:	85 ec       	ldi	r24, 0xC5	; 197
    2df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2dfa:	3d c0       	rjmp	.+122    	; 0x2e76 <__vector_39+0x154>
    2dfc:	85 e8       	ldi	r24, 0x85	; 133
    2dfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e02:	39 c0       	rjmp	.+114    	; 0x2e76 <__vector_39+0x154>
    2e04:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e08:	e0 91 74 0d 	lds	r30, 0x0D74	; 0x800d74 <_index.1885>
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	e8 58       	subi	r30, 0x88	; 136
    2e10:	f2 4f       	sbci	r31, 0xF2	; 242
    2e12:	80 83       	st	Z, r24
    2e14:	84 e9       	ldi	r24, 0x94	; 148
    2e16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e1a:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <_twiCurrentHandler>
    2e1e:	90 91 76 0d 	lds	r25, 0x0D76	; 0x800d76 <_twiCurrentHandler+0x1>
    2e22:	dc 01       	movw	r26, r24
    2e24:	12 96       	adiw	r26, 0x02	; 2
    2e26:	ed 91       	ld	r30, X+
    2e28:	fc 91       	ld	r31, X
    2e2a:	13 97       	sbiw	r26, 0x03	; 3
    2e2c:	30 97       	sbiw	r30, 0x00	; 0
    2e2e:	19 f1       	breq	.+70     	; 0x2e76 <__vector_39+0x154>
    2e30:	20 91 77 0d 	lds	r18, 0x0D77	; 0x800d77 <_twiMessageLen>
    2e34:	48 e7       	ldi	r20, 0x78	; 120
    2e36:	5d e0       	ldi	r21, 0x0D	; 13
    2e38:	65 e0       	ldi	r22, 0x05	; 5
    2e3a:	19 95       	eicall
    2e3c:	1c c0       	rjmp	.+56     	; 0x2e76 <__vector_39+0x154>
    2e3e:	85 ea       	ldi	r24, 0xA5	; 165
    2e40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e44:	18 c0       	rjmp	.+48     	; 0x2e76 <__vector_39+0x154>
    2e46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2e4a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2e4e:	84 e0       	ldi	r24, 0x04	; 4
    2e50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e54:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <_twiCurrentHandler>
    2e58:	90 91 76 0d 	lds	r25, 0x0D76	; 0x800d76 <_twiCurrentHandler+0x1>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	12 96       	adiw	r26, 0x02	; 2
    2e60:	ed 91       	ld	r30, X+
    2e62:	fc 91       	ld	r31, X
    2e64:	13 97       	sbiw	r26, 0x03	; 3
    2e66:	30 97       	sbiw	r30, 0x00	; 0
    2e68:	31 f0       	breq	.+12     	; 0x2e76 <__vector_39+0x154>
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    2e74:	19 95       	eicall
    2e76:	ff 91       	pop	r31
    2e78:	ef 91       	pop	r30
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	0f 90       	pop	r0
    2e90:	0b be       	out	0x3b, r0	; 59
    2e92:	0f 90       	pop	r0
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	0f 90       	pop	r0
    2e98:	1f 90       	pop	r1
    2e9a:	18 95       	reti

00002e9c <fifo_init>:
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	41 11       	cpse	r20, r1
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <fifo_init+0x8>
    2ea2:	a0 d2       	rcall	.+1344   	; 0x33e4 <abort>
    2ea4:	84 2f       	mov	r24, r20
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	21 50       	subi	r18, 0x01	; 1
    2eac:	31 09       	sbc	r19, r1
    2eae:	82 23       	and	r24, r18
    2eb0:	93 23       	and	r25, r19
    2eb2:	89 2b       	or	r24, r25
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <fifo_init+0x1c>
    2eb6:	96 d2       	rcall	.+1324   	; 0x33e4 <abort>
    2eb8:	41 38       	cpi	r20, 0x81	; 129
    2eba:	08 f0       	brcs	.+2      	; 0x2ebe <fifo_init+0x22>
    2ebc:	93 d2       	rcall	.+1318   	; 0x33e4 <abort>
    2ebe:	12 82       	std	Z+2, r1	; 0x02
    2ec0:	13 82       	std	Z+3, r1	; 0x03
    2ec2:	44 83       	std	Z+4, r20	; 0x04
    2ec4:	44 0f       	add	r20, r20
    2ec6:	41 50       	subi	r20, 0x01	; 1
    2ec8:	45 83       	std	Z+5, r20	; 0x05
    2eca:	71 83       	std	Z+1, r23	; 0x01
    2ecc:	60 83       	st	Z, r22
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	08 95       	ret

00002ed4 <__subsf3>:
    2ed4:	50 58       	subi	r21, 0x80	; 128

00002ed6 <__addsf3>:
    2ed6:	bb 27       	eor	r27, r27
    2ed8:	aa 27       	eor	r26, r26
    2eda:	0e d0       	rcall	.+28     	; 0x2ef8 <__addsf3x>
    2edc:	8b ca       	rjmp	.-2794   	; 0x23f4 <__fp_round>
    2ede:	7c da       	rcall	.-2824   	; 0x23d8 <__fp_pscA>
    2ee0:	30 f0       	brcs	.+12     	; 0x2eee <__addsf3+0x18>
    2ee2:	81 da       	rcall	.-2814   	; 0x23e6 <__fp_pscB>
    2ee4:	20 f0       	brcs	.+8      	; 0x2eee <__addsf3+0x18>
    2ee6:	31 f4       	brne	.+12     	; 0x2ef4 <__addsf3+0x1e>
    2ee8:	9f 3f       	cpi	r25, 0xFF	; 255
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <__addsf3+0x1a>
    2eec:	1e f4       	brtc	.+6      	; 0x2ef4 <__addsf3+0x1e>
    2eee:	71 ca       	rjmp	.-2846   	; 0x23d2 <__fp_nan>
    2ef0:	0e f4       	brtc	.+2      	; 0x2ef4 <__addsf3+0x1e>
    2ef2:	e0 95       	com	r30
    2ef4:	e7 fb       	bst	r30, 7
    2ef6:	67 ca       	rjmp	.-2866   	; 0x23c6 <__fp_inf>

00002ef8 <__addsf3x>:
    2ef8:	e9 2f       	mov	r30, r25
    2efa:	d9 d9       	rcall	.-3150   	; 0x22ae <__fp_split3>
    2efc:	80 f3       	brcs	.-32     	; 0x2ede <__addsf3+0x8>
    2efe:	ba 17       	cp	r27, r26
    2f00:	62 07       	cpc	r22, r18
    2f02:	73 07       	cpc	r23, r19
    2f04:	84 07       	cpc	r24, r20
    2f06:	95 07       	cpc	r25, r21
    2f08:	18 f0       	brcs	.+6      	; 0x2f10 <__addsf3x+0x18>
    2f0a:	71 f4       	brne	.+28     	; 0x2f28 <__addsf3x+0x30>
    2f0c:	9e f5       	brtc	.+102    	; 0x2f74 <__addsf3x+0x7c>
    2f0e:	f1 c9       	rjmp	.-3102   	; 0x22f2 <__fp_zero>
    2f10:	0e f4       	brtc	.+2      	; 0x2f14 <__addsf3x+0x1c>
    2f12:	e0 95       	com	r30
    2f14:	0b 2e       	mov	r0, r27
    2f16:	ba 2f       	mov	r27, r26
    2f18:	a0 2d       	mov	r26, r0
    2f1a:	0b 01       	movw	r0, r22
    2f1c:	b9 01       	movw	r22, r18
    2f1e:	90 01       	movw	r18, r0
    2f20:	0c 01       	movw	r0, r24
    2f22:	ca 01       	movw	r24, r20
    2f24:	a0 01       	movw	r20, r0
    2f26:	11 24       	eor	r1, r1
    2f28:	ff 27       	eor	r31, r31
    2f2a:	59 1b       	sub	r21, r25
    2f2c:	99 f0       	breq	.+38     	; 0x2f54 <__addsf3x+0x5c>
    2f2e:	59 3f       	cpi	r21, 0xF9	; 249
    2f30:	50 f4       	brcc	.+20     	; 0x2f46 <__addsf3x+0x4e>
    2f32:	50 3e       	cpi	r21, 0xE0	; 224
    2f34:	68 f1       	brcs	.+90     	; 0x2f90 <__addsf3x+0x98>
    2f36:	1a 16       	cp	r1, r26
    2f38:	f0 40       	sbci	r31, 0x00	; 0
    2f3a:	a2 2f       	mov	r26, r18
    2f3c:	23 2f       	mov	r18, r19
    2f3e:	34 2f       	mov	r19, r20
    2f40:	44 27       	eor	r20, r20
    2f42:	58 5f       	subi	r21, 0xF8	; 248
    2f44:	f3 cf       	rjmp	.-26     	; 0x2f2c <__addsf3x+0x34>
    2f46:	46 95       	lsr	r20
    2f48:	37 95       	ror	r19
    2f4a:	27 95       	ror	r18
    2f4c:	a7 95       	ror	r26
    2f4e:	f0 40       	sbci	r31, 0x00	; 0
    2f50:	53 95       	inc	r21
    2f52:	c9 f7       	brne	.-14     	; 0x2f46 <__addsf3x+0x4e>
    2f54:	7e f4       	brtc	.+30     	; 0x2f74 <__addsf3x+0x7c>
    2f56:	1f 16       	cp	r1, r31
    2f58:	ba 0b       	sbc	r27, r26
    2f5a:	62 0b       	sbc	r22, r18
    2f5c:	73 0b       	sbc	r23, r19
    2f5e:	84 0b       	sbc	r24, r20
    2f60:	ba f0       	brmi	.+46     	; 0x2f90 <__addsf3x+0x98>
    2f62:	91 50       	subi	r25, 0x01	; 1
    2f64:	a1 f0       	breq	.+40     	; 0x2f8e <__addsf3x+0x96>
    2f66:	ff 0f       	add	r31, r31
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	66 1f       	adc	r22, r22
    2f6c:	77 1f       	adc	r23, r23
    2f6e:	88 1f       	adc	r24, r24
    2f70:	c2 f7       	brpl	.-16     	; 0x2f62 <__addsf3x+0x6a>
    2f72:	0e c0       	rjmp	.+28     	; 0x2f90 <__addsf3x+0x98>
    2f74:	ba 0f       	add	r27, r26
    2f76:	62 1f       	adc	r22, r18
    2f78:	73 1f       	adc	r23, r19
    2f7a:	84 1f       	adc	r24, r20
    2f7c:	48 f4       	brcc	.+18     	; 0x2f90 <__addsf3x+0x98>
    2f7e:	87 95       	ror	r24
    2f80:	77 95       	ror	r23
    2f82:	67 95       	ror	r22
    2f84:	b7 95       	ror	r27
    2f86:	f7 95       	ror	r31
    2f88:	9e 3f       	cpi	r25, 0xFE	; 254
    2f8a:	08 f0       	brcs	.+2      	; 0x2f8e <__addsf3x+0x96>
    2f8c:	b3 cf       	rjmp	.-154    	; 0x2ef4 <__addsf3+0x1e>
    2f8e:	93 95       	inc	r25
    2f90:	88 0f       	add	r24, r24
    2f92:	08 f0       	brcs	.+2      	; 0x2f96 <__addsf3x+0x9e>
    2f94:	99 27       	eor	r25, r25
    2f96:	ee 0f       	add	r30, r30
    2f98:	97 95       	ror	r25
    2f9a:	87 95       	ror	r24
    2f9c:	08 95       	ret

00002f9e <__divsf3>:
    2f9e:	0c d0       	rcall	.+24     	; 0x2fb8 <__divsf3x>
    2fa0:	29 ca       	rjmp	.-2990   	; 0x23f4 <__fp_round>
    2fa2:	21 da       	rcall	.-3006   	; 0x23e6 <__fp_pscB>
    2fa4:	40 f0       	brcs	.+16     	; 0x2fb6 <__divsf3+0x18>
    2fa6:	18 da       	rcall	.-3024   	; 0x23d8 <__fp_pscA>
    2fa8:	30 f0       	brcs	.+12     	; 0x2fb6 <__divsf3+0x18>
    2faa:	21 f4       	brne	.+8      	; 0x2fb4 <__divsf3+0x16>
    2fac:	5f 3f       	cpi	r21, 0xFF	; 255
    2fae:	19 f0       	breq	.+6      	; 0x2fb6 <__divsf3+0x18>
    2fb0:	0a ca       	rjmp	.-3052   	; 0x23c6 <__fp_inf>
    2fb2:	51 11       	cpse	r21, r1
    2fb4:	9f c9       	rjmp	.-3266   	; 0x22f4 <__fp_szero>
    2fb6:	0d ca       	rjmp	.-3046   	; 0x23d2 <__fp_nan>

00002fb8 <__divsf3x>:
    2fb8:	7a d9       	rcall	.-3340   	; 0x22ae <__fp_split3>
    2fba:	98 f3       	brcs	.-26     	; 0x2fa2 <__divsf3+0x4>

00002fbc <__divsf3_pse>:
    2fbc:	99 23       	and	r25, r25
    2fbe:	c9 f3       	breq	.-14     	; 0x2fb2 <__divsf3+0x14>
    2fc0:	55 23       	and	r21, r21
    2fc2:	b1 f3       	breq	.-20     	; 0x2fb0 <__divsf3+0x12>
    2fc4:	95 1b       	sub	r25, r21
    2fc6:	55 0b       	sbc	r21, r21
    2fc8:	bb 27       	eor	r27, r27
    2fca:	aa 27       	eor	r26, r26
    2fcc:	62 17       	cp	r22, r18
    2fce:	73 07       	cpc	r23, r19
    2fd0:	84 07       	cpc	r24, r20
    2fd2:	38 f0       	brcs	.+14     	; 0x2fe2 <__divsf3_pse+0x26>
    2fd4:	9f 5f       	subi	r25, 0xFF	; 255
    2fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd8:	22 0f       	add	r18, r18
    2fda:	33 1f       	adc	r19, r19
    2fdc:	44 1f       	adc	r20, r20
    2fde:	aa 1f       	adc	r26, r26
    2fe0:	a9 f3       	breq	.-22     	; 0x2fcc <__divsf3_pse+0x10>
    2fe2:	33 d0       	rcall	.+102    	; 0x304a <__divsf3_pse+0x8e>
    2fe4:	0e 2e       	mov	r0, r30
    2fe6:	3a f0       	brmi	.+14     	; 0x2ff6 <__divsf3_pse+0x3a>
    2fe8:	e0 e8       	ldi	r30, 0x80	; 128
    2fea:	30 d0       	rcall	.+96     	; 0x304c <__divsf3_pse+0x90>
    2fec:	91 50       	subi	r25, 0x01	; 1
    2fee:	50 40       	sbci	r21, 0x00	; 0
    2ff0:	e6 95       	lsr	r30
    2ff2:	00 1c       	adc	r0, r0
    2ff4:	ca f7       	brpl	.-14     	; 0x2fe8 <__divsf3_pse+0x2c>
    2ff6:	29 d0       	rcall	.+82     	; 0x304a <__divsf3_pse+0x8e>
    2ff8:	fe 2f       	mov	r31, r30
    2ffa:	27 d0       	rcall	.+78     	; 0x304a <__divsf3_pse+0x8e>
    2ffc:	66 0f       	add	r22, r22
    2ffe:	77 1f       	adc	r23, r23
    3000:	88 1f       	adc	r24, r24
    3002:	bb 1f       	adc	r27, r27
    3004:	26 17       	cp	r18, r22
    3006:	37 07       	cpc	r19, r23
    3008:	48 07       	cpc	r20, r24
    300a:	ab 07       	cpc	r26, r27
    300c:	b0 e8       	ldi	r27, 0x80	; 128
    300e:	09 f0       	breq	.+2      	; 0x3012 <__divsf3_pse+0x56>
    3010:	bb 0b       	sbc	r27, r27
    3012:	80 2d       	mov	r24, r0
    3014:	bf 01       	movw	r22, r30
    3016:	ff 27       	eor	r31, r31
    3018:	93 58       	subi	r25, 0x83	; 131
    301a:	5f 4f       	sbci	r21, 0xFF	; 255
    301c:	2a f0       	brmi	.+10     	; 0x3028 <__divsf3_pse+0x6c>
    301e:	9e 3f       	cpi	r25, 0xFE	; 254
    3020:	51 05       	cpc	r21, r1
    3022:	68 f0       	brcs	.+26     	; 0x303e <__divsf3_pse+0x82>
    3024:	d0 c9       	rjmp	.-3168   	; 0x23c6 <__fp_inf>
    3026:	66 c9       	rjmp	.-3380   	; 0x22f4 <__fp_szero>
    3028:	5f 3f       	cpi	r21, 0xFF	; 255
    302a:	ec f3       	brlt	.-6      	; 0x3026 <__divsf3_pse+0x6a>
    302c:	98 3e       	cpi	r25, 0xE8	; 232
    302e:	dc f3       	brlt	.-10     	; 0x3026 <__divsf3_pse+0x6a>
    3030:	86 95       	lsr	r24
    3032:	77 95       	ror	r23
    3034:	67 95       	ror	r22
    3036:	b7 95       	ror	r27
    3038:	f7 95       	ror	r31
    303a:	9f 5f       	subi	r25, 0xFF	; 255
    303c:	c9 f7       	brne	.-14     	; 0x3030 <__divsf3_pse+0x74>
    303e:	88 0f       	add	r24, r24
    3040:	91 1d       	adc	r25, r1
    3042:	96 95       	lsr	r25
    3044:	87 95       	ror	r24
    3046:	97 f9       	bld	r25, 7
    3048:	08 95       	ret
    304a:	e1 e0       	ldi	r30, 0x01	; 1
    304c:	66 0f       	add	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	bb 1f       	adc	r27, r27
    3054:	62 17       	cp	r22, r18
    3056:	73 07       	cpc	r23, r19
    3058:	84 07       	cpc	r24, r20
    305a:	ba 07       	cpc	r27, r26
    305c:	20 f0       	brcs	.+8      	; 0x3066 <__divsf3_pse+0xaa>
    305e:	62 1b       	sub	r22, r18
    3060:	73 0b       	sbc	r23, r19
    3062:	84 0b       	sbc	r24, r20
    3064:	ba 0b       	sbc	r27, r26
    3066:	ee 1f       	adc	r30, r30
    3068:	88 f7       	brcc	.-30     	; 0x304c <__divsf3_pse+0x90>
    306a:	e0 95       	com	r30
    306c:	08 95       	ret

0000306e <__floatunsisf>:
    306e:	e8 94       	clt
    3070:	09 c0       	rjmp	.+18     	; 0x3084 <__floatsisf+0x12>

00003072 <__floatsisf>:
    3072:	97 fb       	bst	r25, 7
    3074:	3e f4       	brtc	.+14     	; 0x3084 <__floatsisf+0x12>
    3076:	90 95       	com	r25
    3078:	80 95       	com	r24
    307a:	70 95       	com	r23
    307c:	61 95       	neg	r22
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	8f 4f       	sbci	r24, 0xFF	; 255
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	99 23       	and	r25, r25
    3086:	a9 f0       	breq	.+42     	; 0x30b2 <__floatsisf+0x40>
    3088:	f9 2f       	mov	r31, r25
    308a:	96 e9       	ldi	r25, 0x96	; 150
    308c:	bb 27       	eor	r27, r27
    308e:	93 95       	inc	r25
    3090:	f6 95       	lsr	r31
    3092:	87 95       	ror	r24
    3094:	77 95       	ror	r23
    3096:	67 95       	ror	r22
    3098:	b7 95       	ror	r27
    309a:	f1 11       	cpse	r31, r1
    309c:	f8 cf       	rjmp	.-16     	; 0x308e <__floatsisf+0x1c>
    309e:	fa f4       	brpl	.+62     	; 0x30de <__floatsisf+0x6c>
    30a0:	bb 0f       	add	r27, r27
    30a2:	11 f4       	brne	.+4      	; 0x30a8 <__floatsisf+0x36>
    30a4:	60 ff       	sbrs	r22, 0
    30a6:	1b c0       	rjmp	.+54     	; 0x30de <__floatsisf+0x6c>
    30a8:	6f 5f       	subi	r22, 0xFF	; 255
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	8f 4f       	sbci	r24, 0xFF	; 255
    30ae:	9f 4f       	sbci	r25, 0xFF	; 255
    30b0:	16 c0       	rjmp	.+44     	; 0x30de <__floatsisf+0x6c>
    30b2:	88 23       	and	r24, r24
    30b4:	11 f0       	breq	.+4      	; 0x30ba <__floatsisf+0x48>
    30b6:	96 e9       	ldi	r25, 0x96	; 150
    30b8:	11 c0       	rjmp	.+34     	; 0x30dc <__floatsisf+0x6a>
    30ba:	77 23       	and	r23, r23
    30bc:	21 f0       	breq	.+8      	; 0x30c6 <__floatsisf+0x54>
    30be:	9e e8       	ldi	r25, 0x8E	; 142
    30c0:	87 2f       	mov	r24, r23
    30c2:	76 2f       	mov	r23, r22
    30c4:	05 c0       	rjmp	.+10     	; 0x30d0 <__floatsisf+0x5e>
    30c6:	66 23       	and	r22, r22
    30c8:	71 f0       	breq	.+28     	; 0x30e6 <__floatsisf+0x74>
    30ca:	96 e8       	ldi	r25, 0x86	; 134
    30cc:	86 2f       	mov	r24, r22
    30ce:	70 e0       	ldi	r23, 0x00	; 0
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	2a f0       	brmi	.+10     	; 0x30de <__floatsisf+0x6c>
    30d4:	9a 95       	dec	r25
    30d6:	66 0f       	add	r22, r22
    30d8:	77 1f       	adc	r23, r23
    30da:	88 1f       	adc	r24, r24
    30dc:	da f7       	brpl	.-10     	; 0x30d4 <__floatsisf+0x62>
    30de:	88 0f       	add	r24, r24
    30e0:	96 95       	lsr	r25
    30e2:	87 95       	ror	r24
    30e4:	97 f9       	bld	r25, 7
    30e6:	08 95       	ret

000030e8 <__udivmodsi4>:
    30e8:	a1 e2       	ldi	r26, 0x21	; 33
    30ea:	1a 2e       	mov	r1, r26
    30ec:	aa 1b       	sub	r26, r26
    30ee:	bb 1b       	sub	r27, r27
    30f0:	fd 01       	movw	r30, r26
    30f2:	0d c0       	rjmp	.+26     	; 0x310e <__udivmodsi4_ep>

000030f4 <__udivmodsi4_loop>:
    30f4:	aa 1f       	adc	r26, r26
    30f6:	bb 1f       	adc	r27, r27
    30f8:	ee 1f       	adc	r30, r30
    30fa:	ff 1f       	adc	r31, r31
    30fc:	a2 17       	cp	r26, r18
    30fe:	b3 07       	cpc	r27, r19
    3100:	e4 07       	cpc	r30, r20
    3102:	f5 07       	cpc	r31, r21
    3104:	20 f0       	brcs	.+8      	; 0x310e <__udivmodsi4_ep>
    3106:	a2 1b       	sub	r26, r18
    3108:	b3 0b       	sbc	r27, r19
    310a:	e4 0b       	sbc	r30, r20
    310c:	f5 0b       	sbc	r31, r21

0000310e <__udivmodsi4_ep>:
    310e:	66 1f       	adc	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	88 1f       	adc	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	1a 94       	dec	r1
    3118:	69 f7       	brne	.-38     	; 0x30f4 <__udivmodsi4_loop>
    311a:	60 95       	com	r22
    311c:	70 95       	com	r23
    311e:	80 95       	com	r24
    3120:	90 95       	com	r25
    3122:	9b 01       	movw	r18, r22
    3124:	ac 01       	movw	r20, r24
    3126:	bd 01       	movw	r22, r26
    3128:	cf 01       	movw	r24, r30
    312a:	08 95       	ret

0000312c <__tablejump2__>:
    312c:	ee 0f       	add	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	88 1f       	adc	r24, r24
    3132:	8b bf       	out	0x3b, r24	; 59
    3134:	07 90       	elpm	r0, Z+
    3136:	f6 91       	elpm	r31, Z
    3138:	e0 2d       	mov	r30, r0
    313a:	19 94       	eijmp

0000313c <__muluhisi3>:
    313c:	09 d0       	rcall	.+18     	; 0x3150 <__umulhisi3>
    313e:	a5 9f       	mul	r26, r21
    3140:	90 0d       	add	r25, r0
    3142:	b4 9f       	mul	r27, r20
    3144:	90 0d       	add	r25, r0
    3146:	a4 9f       	mul	r26, r20
    3148:	80 0d       	add	r24, r0
    314a:	91 1d       	adc	r25, r1
    314c:	11 24       	eor	r1, r1
    314e:	08 95       	ret

00003150 <__umulhisi3>:
    3150:	a2 9f       	mul	r26, r18
    3152:	b0 01       	movw	r22, r0
    3154:	b3 9f       	mul	r27, r19
    3156:	c0 01       	movw	r24, r0
    3158:	a3 9f       	mul	r26, r19
    315a:	70 0d       	add	r23, r0
    315c:	81 1d       	adc	r24, r1
    315e:	11 24       	eor	r1, r1
    3160:	91 1d       	adc	r25, r1
    3162:	b2 9f       	mul	r27, r18
    3164:	70 0d       	add	r23, r0
    3166:	81 1d       	adc	r24, r1
    3168:	11 24       	eor	r1, r1
    316a:	91 1d       	adc	r25, r1
    316c:	08 95       	ret

0000316e <calloc>:
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	86 9f       	mul	r24, r22
    3178:	80 01       	movw	r16, r0
    317a:	87 9f       	mul	r24, r23
    317c:	10 0d       	add	r17, r0
    317e:	96 9f       	mul	r25, r22
    3180:	10 0d       	add	r17, r0
    3182:	11 24       	eor	r1, r1
    3184:	c8 01       	movw	r24, r16
    3186:	0d d0       	rcall	.+26     	; 0x31a2 <malloc>
    3188:	ec 01       	movw	r28, r24
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	21 f0       	breq	.+8      	; 0x3196 <calloc+0x28>
    318e:	a8 01       	movw	r20, r16
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	34 d1       	rcall	.+616    	; 0x33fe <memset>
    3196:	ce 01       	movw	r24, r28
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <malloc>:
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	82 30       	cpi	r24, 0x02	; 2
    31ac:	91 05       	cpc	r25, r1
    31ae:	10 f4       	brcc	.+4      	; 0x31b4 <malloc+0x12>
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	e0 91 89 0d 	lds	r30, 0x0D89	; 0x800d89 <__flp>
    31b8:	f0 91 8a 0d 	lds	r31, 0x0D8A	; 0x800d8a <__flp+0x1>
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	30 97       	sbiw	r30, 0x00	; 0
    31c6:	19 f1       	breq	.+70     	; 0x320e <malloc+0x6c>
    31c8:	40 81       	ld	r20, Z
    31ca:	51 81       	ldd	r21, Z+1	; 0x01
    31cc:	02 81       	ldd	r16, Z+2	; 0x02
    31ce:	13 81       	ldd	r17, Z+3	; 0x03
    31d0:	48 17       	cp	r20, r24
    31d2:	59 07       	cpc	r21, r25
    31d4:	c8 f0       	brcs	.+50     	; 0x3208 <malloc+0x66>
    31d6:	84 17       	cp	r24, r20
    31d8:	95 07       	cpc	r25, r21
    31da:	69 f4       	brne	.+26     	; 0x31f6 <malloc+0x54>
    31dc:	10 97       	sbiw	r26, 0x00	; 0
    31de:	31 f0       	breq	.+12     	; 0x31ec <malloc+0x4a>
    31e0:	12 96       	adiw	r26, 0x02	; 2
    31e2:	0c 93       	st	X, r16
    31e4:	12 97       	sbiw	r26, 0x02	; 2
    31e6:	13 96       	adiw	r26, 0x03	; 3
    31e8:	1c 93       	st	X, r17
    31ea:	27 c0       	rjmp	.+78     	; 0x323a <malloc+0x98>
    31ec:	00 93 89 0d 	sts	0x0D89, r16	; 0x800d89 <__flp>
    31f0:	10 93 8a 0d 	sts	0x0D8A, r17	; 0x800d8a <__flp+0x1>
    31f4:	22 c0       	rjmp	.+68     	; 0x323a <malloc+0x98>
    31f6:	21 15       	cp	r18, r1
    31f8:	31 05       	cpc	r19, r1
    31fa:	19 f0       	breq	.+6      	; 0x3202 <malloc+0x60>
    31fc:	42 17       	cp	r20, r18
    31fe:	53 07       	cpc	r21, r19
    3200:	18 f4       	brcc	.+6      	; 0x3208 <malloc+0x66>
    3202:	9a 01       	movw	r18, r20
    3204:	bd 01       	movw	r22, r26
    3206:	ef 01       	movw	r28, r30
    3208:	df 01       	movw	r26, r30
    320a:	f8 01       	movw	r30, r16
    320c:	db cf       	rjmp	.-74     	; 0x31c4 <malloc+0x22>
    320e:	21 15       	cp	r18, r1
    3210:	31 05       	cpc	r19, r1
    3212:	f9 f0       	breq	.+62     	; 0x3252 <malloc+0xb0>
    3214:	28 1b       	sub	r18, r24
    3216:	39 0b       	sbc	r19, r25
    3218:	24 30       	cpi	r18, 0x04	; 4
    321a:	31 05       	cpc	r19, r1
    321c:	80 f4       	brcc	.+32     	; 0x323e <malloc+0x9c>
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	61 15       	cp	r22, r1
    3224:	71 05       	cpc	r23, r1
    3226:	21 f0       	breq	.+8      	; 0x3230 <malloc+0x8e>
    3228:	fb 01       	movw	r30, r22
    322a:	93 83       	std	Z+3, r25	; 0x03
    322c:	82 83       	std	Z+2, r24	; 0x02
    322e:	04 c0       	rjmp	.+8      	; 0x3238 <malloc+0x96>
    3230:	90 93 8a 0d 	sts	0x0D8A, r25	; 0x800d8a <__flp+0x1>
    3234:	80 93 89 0d 	sts	0x0D89, r24	; 0x800d89 <__flp>
    3238:	fe 01       	movw	r30, r28
    323a:	32 96       	adiw	r30, 0x02	; 2
    323c:	44 c0       	rjmp	.+136    	; 0x32c6 <malloc+0x124>
    323e:	fe 01       	movw	r30, r28
    3240:	e2 0f       	add	r30, r18
    3242:	f3 1f       	adc	r31, r19
    3244:	81 93       	st	Z+, r24
    3246:	91 93       	st	Z+, r25
    3248:	22 50       	subi	r18, 0x02	; 2
    324a:	31 09       	sbc	r19, r1
    324c:	39 83       	std	Y+1, r19	; 0x01
    324e:	28 83       	st	Y, r18
    3250:	3a c0       	rjmp	.+116    	; 0x32c6 <malloc+0x124>
    3252:	20 91 87 0d 	lds	r18, 0x0D87	; 0x800d87 <__brkval>
    3256:	30 91 88 0d 	lds	r19, 0x0D88	; 0x800d88 <__brkval+0x1>
    325a:	23 2b       	or	r18, r19
    325c:	41 f4       	brne	.+16     	; 0x326e <malloc+0xcc>
    325e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3262:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3266:	30 93 88 0d 	sts	0x0D88, r19	; 0x800d88 <__brkval+0x1>
    326a:	20 93 87 0d 	sts	0x0D87, r18	; 0x800d87 <__brkval>
    326e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3272:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3276:	21 15       	cp	r18, r1
    3278:	31 05       	cpc	r19, r1
    327a:	41 f4       	brne	.+16     	; 0x328c <malloc+0xea>
    327c:	2d b7       	in	r18, 0x3d	; 61
    327e:	3e b7       	in	r19, 0x3e	; 62
    3280:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3284:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3288:	24 1b       	sub	r18, r20
    328a:	35 0b       	sbc	r19, r21
    328c:	e0 91 87 0d 	lds	r30, 0x0D87	; 0x800d87 <__brkval>
    3290:	f0 91 88 0d 	lds	r31, 0x0D88	; 0x800d88 <__brkval+0x1>
    3294:	e2 17       	cp	r30, r18
    3296:	f3 07       	cpc	r31, r19
    3298:	a0 f4       	brcc	.+40     	; 0x32c2 <malloc+0x120>
    329a:	2e 1b       	sub	r18, r30
    329c:	3f 0b       	sbc	r19, r31
    329e:	28 17       	cp	r18, r24
    32a0:	39 07       	cpc	r19, r25
    32a2:	78 f0       	brcs	.+30     	; 0x32c2 <malloc+0x120>
    32a4:	ac 01       	movw	r20, r24
    32a6:	4e 5f       	subi	r20, 0xFE	; 254
    32a8:	5f 4f       	sbci	r21, 0xFF	; 255
    32aa:	24 17       	cp	r18, r20
    32ac:	35 07       	cpc	r19, r21
    32ae:	48 f0       	brcs	.+18     	; 0x32c2 <malloc+0x120>
    32b0:	4e 0f       	add	r20, r30
    32b2:	5f 1f       	adc	r21, r31
    32b4:	50 93 88 0d 	sts	0x0D88, r21	; 0x800d88 <__brkval+0x1>
    32b8:	40 93 87 0d 	sts	0x0D87, r20	; 0x800d87 <__brkval>
    32bc:	81 93       	st	Z+, r24
    32be:	91 93       	st	Z+, r25
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <malloc+0x124>
    32c2:	e0 e0       	ldi	r30, 0x00	; 0
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	cf 01       	movw	r24, r30
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	1f 91       	pop	r17
    32ce:	0f 91       	pop	r16
    32d0:	08 95       	ret

000032d2 <free>:
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	09 f4       	brne	.+2      	; 0x32dc <free+0xa>
    32da:	81 c0       	rjmp	.+258    	; 0x33de <free+0x10c>
    32dc:	fc 01       	movw	r30, r24
    32de:	32 97       	sbiw	r30, 0x02	; 2
    32e0:	13 82       	std	Z+3, r1	; 0x03
    32e2:	12 82       	std	Z+2, r1	; 0x02
    32e4:	a0 91 89 0d 	lds	r26, 0x0D89	; 0x800d89 <__flp>
    32e8:	b0 91 8a 0d 	lds	r27, 0x0D8A	; 0x800d8a <__flp+0x1>
    32ec:	10 97       	sbiw	r26, 0x00	; 0
    32ee:	81 f4       	brne	.+32     	; 0x3310 <free+0x3e>
    32f0:	20 81       	ld	r18, Z
    32f2:	31 81       	ldd	r19, Z+1	; 0x01
    32f4:	82 0f       	add	r24, r18
    32f6:	93 1f       	adc	r25, r19
    32f8:	20 91 87 0d 	lds	r18, 0x0D87	; 0x800d87 <__brkval>
    32fc:	30 91 88 0d 	lds	r19, 0x0D88	; 0x800d88 <__brkval+0x1>
    3300:	28 17       	cp	r18, r24
    3302:	39 07       	cpc	r19, r25
    3304:	51 f5       	brne	.+84     	; 0x335a <free+0x88>
    3306:	f0 93 88 0d 	sts	0x0D88, r31	; 0x800d88 <__brkval+0x1>
    330a:	e0 93 87 0d 	sts	0x0D87, r30	; 0x800d87 <__brkval>
    330e:	67 c0       	rjmp	.+206    	; 0x33de <free+0x10c>
    3310:	ed 01       	movw	r28, r26
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	ce 17       	cp	r28, r30
    3318:	df 07       	cpc	r29, r31
    331a:	40 f4       	brcc	.+16     	; 0x332c <free+0x5a>
    331c:	4a 81       	ldd	r20, Y+2	; 0x02
    331e:	5b 81       	ldd	r21, Y+3	; 0x03
    3320:	9e 01       	movw	r18, r28
    3322:	41 15       	cp	r20, r1
    3324:	51 05       	cpc	r21, r1
    3326:	f1 f0       	breq	.+60     	; 0x3364 <free+0x92>
    3328:	ea 01       	movw	r28, r20
    332a:	f5 cf       	rjmp	.-22     	; 0x3316 <free+0x44>
    332c:	d3 83       	std	Z+3, r29	; 0x03
    332e:	c2 83       	std	Z+2, r28	; 0x02
    3330:	40 81       	ld	r20, Z
    3332:	51 81       	ldd	r21, Z+1	; 0x01
    3334:	84 0f       	add	r24, r20
    3336:	95 1f       	adc	r25, r21
    3338:	c8 17       	cp	r28, r24
    333a:	d9 07       	cpc	r29, r25
    333c:	59 f4       	brne	.+22     	; 0x3354 <free+0x82>
    333e:	88 81       	ld	r24, Y
    3340:	99 81       	ldd	r25, Y+1	; 0x01
    3342:	84 0f       	add	r24, r20
    3344:	95 1f       	adc	r25, r21
    3346:	02 96       	adiw	r24, 0x02	; 2
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	80 83       	st	Z, r24
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	9b 81       	ldd	r25, Y+3	; 0x03
    3350:	93 83       	std	Z+3, r25	; 0x03
    3352:	82 83       	std	Z+2, r24	; 0x02
    3354:	21 15       	cp	r18, r1
    3356:	31 05       	cpc	r19, r1
    3358:	29 f4       	brne	.+10     	; 0x3364 <free+0x92>
    335a:	f0 93 8a 0d 	sts	0x0D8A, r31	; 0x800d8a <__flp+0x1>
    335e:	e0 93 89 0d 	sts	0x0D89, r30	; 0x800d89 <__flp>
    3362:	3d c0       	rjmp	.+122    	; 0x33de <free+0x10c>
    3364:	e9 01       	movw	r28, r18
    3366:	fb 83       	std	Y+3, r31	; 0x03
    3368:	ea 83       	std	Y+2, r30	; 0x02
    336a:	49 91       	ld	r20, Y+
    336c:	59 91       	ld	r21, Y+
    336e:	c4 0f       	add	r28, r20
    3370:	d5 1f       	adc	r29, r21
    3372:	ec 17       	cp	r30, r28
    3374:	fd 07       	cpc	r31, r29
    3376:	61 f4       	brne	.+24     	; 0x3390 <free+0xbe>
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	84 0f       	add	r24, r20
    337e:	95 1f       	adc	r25, r21
    3380:	02 96       	adiw	r24, 0x02	; 2
    3382:	e9 01       	movw	r28, r18
    3384:	99 83       	std	Y+1, r25	; 0x01
    3386:	88 83       	st	Y, r24
    3388:	82 81       	ldd	r24, Z+2	; 0x02
    338a:	93 81       	ldd	r25, Z+3	; 0x03
    338c:	9b 83       	std	Y+3, r25	; 0x03
    338e:	8a 83       	std	Y+2, r24	; 0x02
    3390:	e0 e0       	ldi	r30, 0x00	; 0
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	12 96       	adiw	r26, 0x02	; 2
    3396:	8d 91       	ld	r24, X+
    3398:	9c 91       	ld	r25, X
    339a:	13 97       	sbiw	r26, 0x03	; 3
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	19 f0       	breq	.+6      	; 0x33a6 <free+0xd4>
    33a0:	fd 01       	movw	r30, r26
    33a2:	dc 01       	movw	r26, r24
    33a4:	f7 cf       	rjmp	.-18     	; 0x3394 <free+0xc2>
    33a6:	8d 91       	ld	r24, X+
    33a8:	9c 91       	ld	r25, X
    33aa:	11 97       	sbiw	r26, 0x01	; 1
    33ac:	9d 01       	movw	r18, r26
    33ae:	2e 5f       	subi	r18, 0xFE	; 254
    33b0:	3f 4f       	sbci	r19, 0xFF	; 255
    33b2:	82 0f       	add	r24, r18
    33b4:	93 1f       	adc	r25, r19
    33b6:	20 91 87 0d 	lds	r18, 0x0D87	; 0x800d87 <__brkval>
    33ba:	30 91 88 0d 	lds	r19, 0x0D88	; 0x800d88 <__brkval+0x1>
    33be:	28 17       	cp	r18, r24
    33c0:	39 07       	cpc	r19, r25
    33c2:	69 f4       	brne	.+26     	; 0x33de <free+0x10c>
    33c4:	30 97       	sbiw	r30, 0x00	; 0
    33c6:	29 f4       	brne	.+10     	; 0x33d2 <free+0x100>
    33c8:	10 92 8a 0d 	sts	0x0D8A, r1	; 0x800d8a <__flp+0x1>
    33cc:	10 92 89 0d 	sts	0x0D89, r1	; 0x800d89 <__flp>
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <free+0x104>
    33d2:	13 82       	std	Z+3, r1	; 0x03
    33d4:	12 82       	std	Z+2, r1	; 0x02
    33d6:	b0 93 88 0d 	sts	0x0D88, r27	; 0x800d88 <__brkval+0x1>
    33da:	a0 93 87 0d 	sts	0x0D87, r26	; 0x800d87 <__brkval>
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	08 95       	ret

000033e4 <abort>:
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	f8 94       	cli
    33ea:	00 c3       	rjmp	.+1536   	; 0x39ec <_exit>

000033ec <memcpy>:
    33ec:	fb 01       	movw	r30, r22
    33ee:	dc 01       	movw	r26, r24
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <memcpy+0xa>
    33f2:	01 90       	ld	r0, Z+
    33f4:	0d 92       	st	X+, r0
    33f6:	41 50       	subi	r20, 0x01	; 1
    33f8:	50 40       	sbci	r21, 0x00	; 0
    33fa:	d8 f7       	brcc	.-10     	; 0x33f2 <memcpy+0x6>
    33fc:	08 95       	ret

000033fe <memset>:
    33fe:	dc 01       	movw	r26, r24
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <memset+0x6>
    3402:	6d 93       	st	X+, r22
    3404:	41 50       	subi	r20, 0x01	; 1
    3406:	50 40       	sbci	r21, 0x00	; 0
    3408:	e0 f7       	brcc	.-8      	; 0x3402 <memset+0x4>
    340a:	08 95       	ret

0000340c <printf>:
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	ae 01       	movw	r20, r28
    3416:	4a 5f       	subi	r20, 0xFA	; 250
    3418:	5f 4f       	sbci	r21, 0xFF	; 255
    341a:	fa 01       	movw	r30, r20
    341c:	61 91       	ld	r22, Z+
    341e:	71 91       	ld	r23, Z+
    3420:	af 01       	movw	r20, r30
    3422:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <__iob+0x2>
    3426:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <__iob+0x3>
    342a:	33 d0       	rcall	.+102    	; 0x3492 <vfprintf>
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	08 95       	ret

00003432 <puts>:
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <__iob+0x2>
    343e:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <__iob+0x3>
    3442:	23 81       	ldd	r18, Z+3	; 0x03
    3444:	21 ff       	sbrs	r18, 1
    3446:	1b c0       	rjmp	.+54     	; 0x347e <puts+0x4c>
    3448:	8c 01       	movw	r16, r24
    344a:	d0 e0       	ldi	r29, 0x00	; 0
    344c:	c0 e0       	ldi	r28, 0x00	; 0
    344e:	f8 01       	movw	r30, r16
    3450:	81 91       	ld	r24, Z+
    3452:	8f 01       	movw	r16, r30
    3454:	60 91 8d 0d 	lds	r22, 0x0D8D	; 0x800d8d <__iob+0x2>
    3458:	70 91 8e 0d 	lds	r23, 0x0D8E	; 0x800d8e <__iob+0x3>
    345c:	db 01       	movw	r26, r22
    345e:	18 96       	adiw	r26, 0x08	; 8
    3460:	ed 91       	ld	r30, X+
    3462:	fc 91       	ld	r31, X
    3464:	19 97       	sbiw	r26, 0x09	; 9
    3466:	88 23       	and	r24, r24
    3468:	31 f0       	breq	.+12     	; 0x3476 <puts+0x44>
    346a:	19 95       	eicall
    346c:	89 2b       	or	r24, r25
    346e:	79 f3       	breq	.-34     	; 0x344e <puts+0x1c>
    3470:	df ef       	ldi	r29, 0xFF	; 255
    3472:	cf ef       	ldi	r28, 0xFF	; 255
    3474:	ec cf       	rjmp	.-40     	; 0x344e <puts+0x1c>
    3476:	8a e0       	ldi	r24, 0x0A	; 10
    3478:	19 95       	eicall
    347a:	89 2b       	or	r24, r25
    347c:	19 f0       	breq	.+6      	; 0x3484 <puts+0x52>
    347e:	8f ef       	ldi	r24, 0xFF	; 255
    3480:	9f ef       	ldi	r25, 0xFF	; 255
    3482:	02 c0       	rjmp	.+4      	; 0x3488 <puts+0x56>
    3484:	8d 2f       	mov	r24, r29
    3486:	9c 2f       	mov	r25, r28
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	08 95       	ret

00003492 <vfprintf>:
    3492:	2f 92       	push	r2
    3494:	3f 92       	push	r3
    3496:	4f 92       	push	r4
    3498:	5f 92       	push	r5
    349a:	6f 92       	push	r6
    349c:	7f 92       	push	r7
    349e:	8f 92       	push	r8
    34a0:	9f 92       	push	r9
    34a2:	af 92       	push	r10
    34a4:	bf 92       	push	r11
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	2b 97       	sbiw	r28, 0x0b	; 11
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	6c 01       	movw	r12, r24
    34c8:	7b 01       	movw	r14, r22
    34ca:	8a 01       	movw	r16, r20
    34cc:	fc 01       	movw	r30, r24
    34ce:	17 82       	std	Z+7, r1	; 0x07
    34d0:	16 82       	std	Z+6, r1	; 0x06
    34d2:	83 81       	ldd	r24, Z+3	; 0x03
    34d4:	81 ff       	sbrs	r24, 1
    34d6:	bf c1       	rjmp	.+894    	; 0x3856 <vfprintf+0x3c4>
    34d8:	ce 01       	movw	r24, r28
    34da:	01 96       	adiw	r24, 0x01	; 1
    34dc:	3c 01       	movw	r6, r24
    34de:	f6 01       	movw	r30, r12
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	f7 01       	movw	r30, r14
    34e4:	93 fd       	sbrc	r25, 3
    34e6:	85 91       	lpm	r24, Z+
    34e8:	93 ff       	sbrs	r25, 3
    34ea:	81 91       	ld	r24, Z+
    34ec:	7f 01       	movw	r14, r30
    34ee:	88 23       	and	r24, r24
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <vfprintf+0x62>
    34f2:	ad c1       	rjmp	.+858    	; 0x384e <vfprintf+0x3bc>
    34f4:	85 32       	cpi	r24, 0x25	; 37
    34f6:	39 f4       	brne	.+14     	; 0x3506 <vfprintf+0x74>
    34f8:	93 fd       	sbrc	r25, 3
    34fa:	85 91       	lpm	r24, Z+
    34fc:	93 ff       	sbrs	r25, 3
    34fe:	81 91       	ld	r24, Z+
    3500:	7f 01       	movw	r14, r30
    3502:	85 32       	cpi	r24, 0x25	; 37
    3504:	21 f4       	brne	.+8      	; 0x350e <vfprintf+0x7c>
    3506:	b6 01       	movw	r22, r12
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	d6 d1       	rcall	.+940    	; 0x38b8 <fputc>
    350c:	e8 cf       	rjmp	.-48     	; 0x34de <vfprintf+0x4c>
    350e:	91 2c       	mov	r9, r1
    3510:	21 2c       	mov	r2, r1
    3512:	31 2c       	mov	r3, r1
    3514:	ff e1       	ldi	r31, 0x1F	; 31
    3516:	f3 15       	cp	r31, r3
    3518:	d8 f0       	brcs	.+54     	; 0x3550 <vfprintf+0xbe>
    351a:	8b 32       	cpi	r24, 0x2B	; 43
    351c:	79 f0       	breq	.+30     	; 0x353c <vfprintf+0xaa>
    351e:	38 f4       	brcc	.+14     	; 0x352e <vfprintf+0x9c>
    3520:	80 32       	cpi	r24, 0x20	; 32
    3522:	79 f0       	breq	.+30     	; 0x3542 <vfprintf+0xb0>
    3524:	83 32       	cpi	r24, 0x23	; 35
    3526:	a1 f4       	brne	.+40     	; 0x3550 <vfprintf+0xbe>
    3528:	23 2d       	mov	r18, r3
    352a:	20 61       	ori	r18, 0x10	; 16
    352c:	1d c0       	rjmp	.+58     	; 0x3568 <vfprintf+0xd6>
    352e:	8d 32       	cpi	r24, 0x2D	; 45
    3530:	61 f0       	breq	.+24     	; 0x354a <vfprintf+0xb8>
    3532:	80 33       	cpi	r24, 0x30	; 48
    3534:	69 f4       	brne	.+26     	; 0x3550 <vfprintf+0xbe>
    3536:	23 2d       	mov	r18, r3
    3538:	21 60       	ori	r18, 0x01	; 1
    353a:	16 c0       	rjmp	.+44     	; 0x3568 <vfprintf+0xd6>
    353c:	83 2d       	mov	r24, r3
    353e:	82 60       	ori	r24, 0x02	; 2
    3540:	38 2e       	mov	r3, r24
    3542:	e3 2d       	mov	r30, r3
    3544:	e4 60       	ori	r30, 0x04	; 4
    3546:	3e 2e       	mov	r3, r30
    3548:	2a c0       	rjmp	.+84     	; 0x359e <vfprintf+0x10c>
    354a:	f3 2d       	mov	r31, r3
    354c:	f8 60       	ori	r31, 0x08	; 8
    354e:	1d c0       	rjmp	.+58     	; 0x358a <vfprintf+0xf8>
    3550:	37 fc       	sbrc	r3, 7
    3552:	2d c0       	rjmp	.+90     	; 0x35ae <vfprintf+0x11c>
    3554:	20 ed       	ldi	r18, 0xD0	; 208
    3556:	28 0f       	add	r18, r24
    3558:	2a 30       	cpi	r18, 0x0A	; 10
    355a:	40 f0       	brcs	.+16     	; 0x356c <vfprintf+0xda>
    355c:	8e 32       	cpi	r24, 0x2E	; 46
    355e:	b9 f4       	brne	.+46     	; 0x358e <vfprintf+0xfc>
    3560:	36 fc       	sbrc	r3, 6
    3562:	75 c1       	rjmp	.+746    	; 0x384e <vfprintf+0x3bc>
    3564:	23 2d       	mov	r18, r3
    3566:	20 64       	ori	r18, 0x40	; 64
    3568:	32 2e       	mov	r3, r18
    356a:	19 c0       	rjmp	.+50     	; 0x359e <vfprintf+0x10c>
    356c:	36 fe       	sbrs	r3, 6
    356e:	06 c0       	rjmp	.+12     	; 0x357c <vfprintf+0xea>
    3570:	8a e0       	ldi	r24, 0x0A	; 10
    3572:	98 9e       	mul	r9, r24
    3574:	20 0d       	add	r18, r0
    3576:	11 24       	eor	r1, r1
    3578:	92 2e       	mov	r9, r18
    357a:	11 c0       	rjmp	.+34     	; 0x359e <vfprintf+0x10c>
    357c:	ea e0       	ldi	r30, 0x0A	; 10
    357e:	2e 9e       	mul	r2, r30
    3580:	20 0d       	add	r18, r0
    3582:	11 24       	eor	r1, r1
    3584:	22 2e       	mov	r2, r18
    3586:	f3 2d       	mov	r31, r3
    3588:	f0 62       	ori	r31, 0x20	; 32
    358a:	3f 2e       	mov	r3, r31
    358c:	08 c0       	rjmp	.+16     	; 0x359e <vfprintf+0x10c>
    358e:	8c 36       	cpi	r24, 0x6C	; 108
    3590:	21 f4       	brne	.+8      	; 0x359a <vfprintf+0x108>
    3592:	83 2d       	mov	r24, r3
    3594:	80 68       	ori	r24, 0x80	; 128
    3596:	38 2e       	mov	r3, r24
    3598:	02 c0       	rjmp	.+4      	; 0x359e <vfprintf+0x10c>
    359a:	88 36       	cpi	r24, 0x68	; 104
    359c:	41 f4       	brne	.+16     	; 0x35ae <vfprintf+0x11c>
    359e:	f7 01       	movw	r30, r14
    35a0:	93 fd       	sbrc	r25, 3
    35a2:	85 91       	lpm	r24, Z+
    35a4:	93 ff       	sbrs	r25, 3
    35a6:	81 91       	ld	r24, Z+
    35a8:	7f 01       	movw	r14, r30
    35aa:	81 11       	cpse	r24, r1
    35ac:	b3 cf       	rjmp	.-154    	; 0x3514 <vfprintf+0x82>
    35ae:	98 2f       	mov	r25, r24
    35b0:	9f 7d       	andi	r25, 0xDF	; 223
    35b2:	95 54       	subi	r25, 0x45	; 69
    35b4:	93 30       	cpi	r25, 0x03	; 3
    35b6:	28 f4       	brcc	.+10     	; 0x35c2 <vfprintf+0x130>
    35b8:	0c 5f       	subi	r16, 0xFC	; 252
    35ba:	1f 4f       	sbci	r17, 0xFF	; 255
    35bc:	9f e3       	ldi	r25, 0x3F	; 63
    35be:	99 83       	std	Y+1, r25	; 0x01
    35c0:	0d c0       	rjmp	.+26     	; 0x35dc <vfprintf+0x14a>
    35c2:	83 36       	cpi	r24, 0x63	; 99
    35c4:	31 f0       	breq	.+12     	; 0x35d2 <vfprintf+0x140>
    35c6:	83 37       	cpi	r24, 0x73	; 115
    35c8:	71 f0       	breq	.+28     	; 0x35e6 <vfprintf+0x154>
    35ca:	83 35       	cpi	r24, 0x53	; 83
    35cc:	09 f0       	breq	.+2      	; 0x35d0 <vfprintf+0x13e>
    35ce:	55 c0       	rjmp	.+170    	; 0x367a <vfprintf+0x1e8>
    35d0:	20 c0       	rjmp	.+64     	; 0x3612 <vfprintf+0x180>
    35d2:	f8 01       	movw	r30, r16
    35d4:	80 81       	ld	r24, Z
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	0e 5f       	subi	r16, 0xFE	; 254
    35da:	1f 4f       	sbci	r17, 0xFF	; 255
    35dc:	88 24       	eor	r8, r8
    35de:	83 94       	inc	r8
    35e0:	91 2c       	mov	r9, r1
    35e2:	53 01       	movw	r10, r6
    35e4:	12 c0       	rjmp	.+36     	; 0x360a <vfprintf+0x178>
    35e6:	28 01       	movw	r4, r16
    35e8:	f2 e0       	ldi	r31, 0x02	; 2
    35ea:	4f 0e       	add	r4, r31
    35ec:	51 1c       	adc	r5, r1
    35ee:	f8 01       	movw	r30, r16
    35f0:	a0 80       	ld	r10, Z
    35f2:	b1 80       	ldd	r11, Z+1	; 0x01
    35f4:	36 fe       	sbrs	r3, 6
    35f6:	03 c0       	rjmp	.+6      	; 0x35fe <vfprintf+0x16c>
    35f8:	69 2d       	mov	r22, r9
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	02 c0       	rjmp	.+4      	; 0x3602 <vfprintf+0x170>
    35fe:	6f ef       	ldi	r22, 0xFF	; 255
    3600:	7f ef       	ldi	r23, 0xFF	; 255
    3602:	c5 01       	movw	r24, r10
    3604:	4e d1       	rcall	.+668    	; 0x38a2 <strnlen>
    3606:	4c 01       	movw	r8, r24
    3608:	82 01       	movw	r16, r4
    360a:	f3 2d       	mov	r31, r3
    360c:	ff 77       	andi	r31, 0x7F	; 127
    360e:	3f 2e       	mov	r3, r31
    3610:	15 c0       	rjmp	.+42     	; 0x363c <vfprintf+0x1aa>
    3612:	28 01       	movw	r4, r16
    3614:	22 e0       	ldi	r18, 0x02	; 2
    3616:	42 0e       	add	r4, r18
    3618:	51 1c       	adc	r5, r1
    361a:	f8 01       	movw	r30, r16
    361c:	a0 80       	ld	r10, Z
    361e:	b1 80       	ldd	r11, Z+1	; 0x01
    3620:	36 fe       	sbrs	r3, 6
    3622:	03 c0       	rjmp	.+6      	; 0x362a <vfprintf+0x198>
    3624:	69 2d       	mov	r22, r9
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	02 c0       	rjmp	.+4      	; 0x362e <vfprintf+0x19c>
    362a:	6f ef       	ldi	r22, 0xFF	; 255
    362c:	7f ef       	ldi	r23, 0xFF	; 255
    362e:	c5 01       	movw	r24, r10
    3630:	2d d1       	rcall	.+602    	; 0x388c <strnlen_P>
    3632:	4c 01       	movw	r8, r24
    3634:	f3 2d       	mov	r31, r3
    3636:	f0 68       	ori	r31, 0x80	; 128
    3638:	3f 2e       	mov	r3, r31
    363a:	82 01       	movw	r16, r4
    363c:	33 fc       	sbrc	r3, 3
    363e:	19 c0       	rjmp	.+50     	; 0x3672 <vfprintf+0x1e0>
    3640:	82 2d       	mov	r24, r2
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	88 16       	cp	r8, r24
    3646:	99 06       	cpc	r9, r25
    3648:	a0 f4       	brcc	.+40     	; 0x3672 <vfprintf+0x1e0>
    364a:	b6 01       	movw	r22, r12
    364c:	80 e2       	ldi	r24, 0x20	; 32
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	33 d1       	rcall	.+614    	; 0x38b8 <fputc>
    3652:	2a 94       	dec	r2
    3654:	f5 cf       	rjmp	.-22     	; 0x3640 <vfprintf+0x1ae>
    3656:	f5 01       	movw	r30, r10
    3658:	37 fc       	sbrc	r3, 7
    365a:	85 91       	lpm	r24, Z+
    365c:	37 fe       	sbrs	r3, 7
    365e:	81 91       	ld	r24, Z+
    3660:	5f 01       	movw	r10, r30
    3662:	b6 01       	movw	r22, r12
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	28 d1       	rcall	.+592    	; 0x38b8 <fputc>
    3668:	21 10       	cpse	r2, r1
    366a:	2a 94       	dec	r2
    366c:	21 e0       	ldi	r18, 0x01	; 1
    366e:	82 1a       	sub	r8, r18
    3670:	91 08       	sbc	r9, r1
    3672:	81 14       	cp	r8, r1
    3674:	91 04       	cpc	r9, r1
    3676:	79 f7       	brne	.-34     	; 0x3656 <vfprintf+0x1c4>
    3678:	e1 c0       	rjmp	.+450    	; 0x383c <vfprintf+0x3aa>
    367a:	84 36       	cpi	r24, 0x64	; 100
    367c:	11 f0       	breq	.+4      	; 0x3682 <vfprintf+0x1f0>
    367e:	89 36       	cpi	r24, 0x69	; 105
    3680:	39 f5       	brne	.+78     	; 0x36d0 <vfprintf+0x23e>
    3682:	f8 01       	movw	r30, r16
    3684:	37 fe       	sbrs	r3, 7
    3686:	07 c0       	rjmp	.+14     	; 0x3696 <vfprintf+0x204>
    3688:	60 81       	ld	r22, Z
    368a:	71 81       	ldd	r23, Z+1	; 0x01
    368c:	82 81       	ldd	r24, Z+2	; 0x02
    368e:	93 81       	ldd	r25, Z+3	; 0x03
    3690:	0c 5f       	subi	r16, 0xFC	; 252
    3692:	1f 4f       	sbci	r17, 0xFF	; 255
    3694:	08 c0       	rjmp	.+16     	; 0x36a6 <vfprintf+0x214>
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	07 2e       	mov	r0, r23
    369c:	00 0c       	add	r0, r0
    369e:	88 0b       	sbc	r24, r24
    36a0:	99 0b       	sbc	r25, r25
    36a2:	0e 5f       	subi	r16, 0xFE	; 254
    36a4:	1f 4f       	sbci	r17, 0xFF	; 255
    36a6:	f3 2d       	mov	r31, r3
    36a8:	ff 76       	andi	r31, 0x6F	; 111
    36aa:	3f 2e       	mov	r3, r31
    36ac:	97 ff       	sbrs	r25, 7
    36ae:	09 c0       	rjmp	.+18     	; 0x36c2 <vfprintf+0x230>
    36b0:	90 95       	com	r25
    36b2:	80 95       	com	r24
    36b4:	70 95       	com	r23
    36b6:	61 95       	neg	r22
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	8f 4f       	sbci	r24, 0xFF	; 255
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	f0 68       	ori	r31, 0x80	; 128
    36c0:	3f 2e       	mov	r3, r31
    36c2:	2a e0       	ldi	r18, 0x0A	; 10
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	a3 01       	movw	r20, r6
    36c8:	33 d1       	rcall	.+614    	; 0x3930 <__ultoa_invert>
    36ca:	88 2e       	mov	r8, r24
    36cc:	86 18       	sub	r8, r6
    36ce:	44 c0       	rjmp	.+136    	; 0x3758 <vfprintf+0x2c6>
    36d0:	85 37       	cpi	r24, 0x75	; 117
    36d2:	31 f4       	brne	.+12     	; 0x36e0 <vfprintf+0x24e>
    36d4:	23 2d       	mov	r18, r3
    36d6:	2f 7e       	andi	r18, 0xEF	; 239
    36d8:	b2 2e       	mov	r11, r18
    36da:	2a e0       	ldi	r18, 0x0A	; 10
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	25 c0       	rjmp	.+74     	; 0x372a <vfprintf+0x298>
    36e0:	93 2d       	mov	r25, r3
    36e2:	99 7f       	andi	r25, 0xF9	; 249
    36e4:	b9 2e       	mov	r11, r25
    36e6:	8f 36       	cpi	r24, 0x6F	; 111
    36e8:	c1 f0       	breq	.+48     	; 0x371a <vfprintf+0x288>
    36ea:	18 f4       	brcc	.+6      	; 0x36f2 <vfprintf+0x260>
    36ec:	88 35       	cpi	r24, 0x58	; 88
    36ee:	79 f0       	breq	.+30     	; 0x370e <vfprintf+0x27c>
    36f0:	ae c0       	rjmp	.+348    	; 0x384e <vfprintf+0x3bc>
    36f2:	80 37       	cpi	r24, 0x70	; 112
    36f4:	19 f0       	breq	.+6      	; 0x36fc <vfprintf+0x26a>
    36f6:	88 37       	cpi	r24, 0x78	; 120
    36f8:	21 f0       	breq	.+8      	; 0x3702 <vfprintf+0x270>
    36fa:	a9 c0       	rjmp	.+338    	; 0x384e <vfprintf+0x3bc>
    36fc:	e9 2f       	mov	r30, r25
    36fe:	e0 61       	ori	r30, 0x10	; 16
    3700:	be 2e       	mov	r11, r30
    3702:	b4 fe       	sbrs	r11, 4
    3704:	0d c0       	rjmp	.+26     	; 0x3720 <vfprintf+0x28e>
    3706:	fb 2d       	mov	r31, r11
    3708:	f4 60       	ori	r31, 0x04	; 4
    370a:	bf 2e       	mov	r11, r31
    370c:	09 c0       	rjmp	.+18     	; 0x3720 <vfprintf+0x28e>
    370e:	34 fe       	sbrs	r3, 4
    3710:	0a c0       	rjmp	.+20     	; 0x3726 <vfprintf+0x294>
    3712:	29 2f       	mov	r18, r25
    3714:	26 60       	ori	r18, 0x06	; 6
    3716:	b2 2e       	mov	r11, r18
    3718:	06 c0       	rjmp	.+12     	; 0x3726 <vfprintf+0x294>
    371a:	28 e0       	ldi	r18, 0x08	; 8
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	05 c0       	rjmp	.+10     	; 0x372a <vfprintf+0x298>
    3720:	20 e1       	ldi	r18, 0x10	; 16
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	02 c0       	rjmp	.+4      	; 0x372a <vfprintf+0x298>
    3726:	20 e1       	ldi	r18, 0x10	; 16
    3728:	32 e0       	ldi	r19, 0x02	; 2
    372a:	f8 01       	movw	r30, r16
    372c:	b7 fe       	sbrs	r11, 7
    372e:	07 c0       	rjmp	.+14     	; 0x373e <vfprintf+0x2ac>
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	0c 5f       	subi	r16, 0xFC	; 252
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	06 c0       	rjmp	.+12     	; 0x374a <vfprintf+0x2b8>
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 5f       	subi	r16, 0xFE	; 254
    3748:	1f 4f       	sbci	r17, 0xFF	; 255
    374a:	a3 01       	movw	r20, r6
    374c:	f1 d0       	rcall	.+482    	; 0x3930 <__ultoa_invert>
    374e:	88 2e       	mov	r8, r24
    3750:	86 18       	sub	r8, r6
    3752:	fb 2d       	mov	r31, r11
    3754:	ff 77       	andi	r31, 0x7F	; 127
    3756:	3f 2e       	mov	r3, r31
    3758:	36 fe       	sbrs	r3, 6
    375a:	0d c0       	rjmp	.+26     	; 0x3776 <vfprintf+0x2e4>
    375c:	23 2d       	mov	r18, r3
    375e:	2e 7f       	andi	r18, 0xFE	; 254
    3760:	a2 2e       	mov	r10, r18
    3762:	89 14       	cp	r8, r9
    3764:	58 f4       	brcc	.+22     	; 0x377c <vfprintf+0x2ea>
    3766:	34 fe       	sbrs	r3, 4
    3768:	0b c0       	rjmp	.+22     	; 0x3780 <vfprintf+0x2ee>
    376a:	32 fc       	sbrc	r3, 2
    376c:	09 c0       	rjmp	.+18     	; 0x3780 <vfprintf+0x2ee>
    376e:	83 2d       	mov	r24, r3
    3770:	8e 7e       	andi	r24, 0xEE	; 238
    3772:	a8 2e       	mov	r10, r24
    3774:	05 c0       	rjmp	.+10     	; 0x3780 <vfprintf+0x2ee>
    3776:	b8 2c       	mov	r11, r8
    3778:	a3 2c       	mov	r10, r3
    377a:	03 c0       	rjmp	.+6      	; 0x3782 <vfprintf+0x2f0>
    377c:	b8 2c       	mov	r11, r8
    377e:	01 c0       	rjmp	.+2      	; 0x3782 <vfprintf+0x2f0>
    3780:	b9 2c       	mov	r11, r9
    3782:	a4 fe       	sbrs	r10, 4
    3784:	0f c0       	rjmp	.+30     	; 0x37a4 <vfprintf+0x312>
    3786:	fe 01       	movw	r30, r28
    3788:	e8 0d       	add	r30, r8
    378a:	f1 1d       	adc	r31, r1
    378c:	80 81       	ld	r24, Z
    378e:	80 33       	cpi	r24, 0x30	; 48
    3790:	21 f4       	brne	.+8      	; 0x379a <vfprintf+0x308>
    3792:	9a 2d       	mov	r25, r10
    3794:	99 7e       	andi	r25, 0xE9	; 233
    3796:	a9 2e       	mov	r10, r25
    3798:	09 c0       	rjmp	.+18     	; 0x37ac <vfprintf+0x31a>
    379a:	a2 fe       	sbrs	r10, 2
    379c:	06 c0       	rjmp	.+12     	; 0x37aa <vfprintf+0x318>
    379e:	b3 94       	inc	r11
    37a0:	b3 94       	inc	r11
    37a2:	04 c0       	rjmp	.+8      	; 0x37ac <vfprintf+0x31a>
    37a4:	8a 2d       	mov	r24, r10
    37a6:	86 78       	andi	r24, 0x86	; 134
    37a8:	09 f0       	breq	.+2      	; 0x37ac <vfprintf+0x31a>
    37aa:	b3 94       	inc	r11
    37ac:	a3 fc       	sbrc	r10, 3
    37ae:	10 c0       	rjmp	.+32     	; 0x37d0 <vfprintf+0x33e>
    37b0:	a0 fe       	sbrs	r10, 0
    37b2:	06 c0       	rjmp	.+12     	; 0x37c0 <vfprintf+0x32e>
    37b4:	b2 14       	cp	r11, r2
    37b6:	80 f4       	brcc	.+32     	; 0x37d8 <vfprintf+0x346>
    37b8:	28 0c       	add	r2, r8
    37ba:	92 2c       	mov	r9, r2
    37bc:	9b 18       	sub	r9, r11
    37be:	0d c0       	rjmp	.+26     	; 0x37da <vfprintf+0x348>
    37c0:	b2 14       	cp	r11, r2
    37c2:	58 f4       	brcc	.+22     	; 0x37da <vfprintf+0x348>
    37c4:	b6 01       	movw	r22, r12
    37c6:	80 e2       	ldi	r24, 0x20	; 32
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	76 d0       	rcall	.+236    	; 0x38b8 <fputc>
    37cc:	b3 94       	inc	r11
    37ce:	f8 cf       	rjmp	.-16     	; 0x37c0 <vfprintf+0x32e>
    37d0:	b2 14       	cp	r11, r2
    37d2:	18 f4       	brcc	.+6      	; 0x37da <vfprintf+0x348>
    37d4:	2b 18       	sub	r2, r11
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <vfprintf+0x34a>
    37d8:	98 2c       	mov	r9, r8
    37da:	21 2c       	mov	r2, r1
    37dc:	a4 fe       	sbrs	r10, 4
    37de:	0f c0       	rjmp	.+30     	; 0x37fe <vfprintf+0x36c>
    37e0:	b6 01       	movw	r22, r12
    37e2:	80 e3       	ldi	r24, 0x30	; 48
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	68 d0       	rcall	.+208    	; 0x38b8 <fputc>
    37e8:	a2 fe       	sbrs	r10, 2
    37ea:	16 c0       	rjmp	.+44     	; 0x3818 <vfprintf+0x386>
    37ec:	a1 fc       	sbrc	r10, 1
    37ee:	03 c0       	rjmp	.+6      	; 0x37f6 <vfprintf+0x364>
    37f0:	88 e7       	ldi	r24, 0x78	; 120
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <vfprintf+0x368>
    37f6:	88 e5       	ldi	r24, 0x58	; 88
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	b6 01       	movw	r22, r12
    37fc:	0c c0       	rjmp	.+24     	; 0x3816 <vfprintf+0x384>
    37fe:	8a 2d       	mov	r24, r10
    3800:	86 78       	andi	r24, 0x86	; 134
    3802:	51 f0       	breq	.+20     	; 0x3818 <vfprintf+0x386>
    3804:	a1 fe       	sbrs	r10, 1
    3806:	02 c0       	rjmp	.+4      	; 0x380c <vfprintf+0x37a>
    3808:	8b e2       	ldi	r24, 0x2B	; 43
    380a:	01 c0       	rjmp	.+2      	; 0x380e <vfprintf+0x37c>
    380c:	80 e2       	ldi	r24, 0x20	; 32
    380e:	a7 fc       	sbrc	r10, 7
    3810:	8d e2       	ldi	r24, 0x2D	; 45
    3812:	b6 01       	movw	r22, r12
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	50 d0       	rcall	.+160    	; 0x38b8 <fputc>
    3818:	89 14       	cp	r8, r9
    381a:	30 f4       	brcc	.+12     	; 0x3828 <vfprintf+0x396>
    381c:	b6 01       	movw	r22, r12
    381e:	80 e3       	ldi	r24, 0x30	; 48
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	4a d0       	rcall	.+148    	; 0x38b8 <fputc>
    3824:	9a 94       	dec	r9
    3826:	f8 cf       	rjmp	.-16     	; 0x3818 <vfprintf+0x386>
    3828:	8a 94       	dec	r8
    382a:	f3 01       	movw	r30, r6
    382c:	e8 0d       	add	r30, r8
    382e:	f1 1d       	adc	r31, r1
    3830:	80 81       	ld	r24, Z
    3832:	b6 01       	movw	r22, r12
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	40 d0       	rcall	.+128    	; 0x38b8 <fputc>
    3838:	81 10       	cpse	r8, r1
    383a:	f6 cf       	rjmp	.-20     	; 0x3828 <vfprintf+0x396>
    383c:	22 20       	and	r2, r2
    383e:	09 f4       	brne	.+2      	; 0x3842 <vfprintf+0x3b0>
    3840:	4e ce       	rjmp	.-868    	; 0x34de <vfprintf+0x4c>
    3842:	b6 01       	movw	r22, r12
    3844:	80 e2       	ldi	r24, 0x20	; 32
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	37 d0       	rcall	.+110    	; 0x38b8 <fputc>
    384a:	2a 94       	dec	r2
    384c:	f7 cf       	rjmp	.-18     	; 0x383c <vfprintf+0x3aa>
    384e:	f6 01       	movw	r30, r12
    3850:	86 81       	ldd	r24, Z+6	; 0x06
    3852:	97 81       	ldd	r25, Z+7	; 0x07
    3854:	02 c0       	rjmp	.+4      	; 0x385a <vfprintf+0x3c8>
    3856:	8f ef       	ldi	r24, 0xFF	; 255
    3858:	9f ef       	ldi	r25, 0xFF	; 255
    385a:	2b 96       	adiw	r28, 0x0b	; 11
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	df 91       	pop	r29
    3868:	cf 91       	pop	r28
    386a:	1f 91       	pop	r17
    386c:	0f 91       	pop	r16
    386e:	ff 90       	pop	r15
    3870:	ef 90       	pop	r14
    3872:	df 90       	pop	r13
    3874:	cf 90       	pop	r12
    3876:	bf 90       	pop	r11
    3878:	af 90       	pop	r10
    387a:	9f 90       	pop	r9
    387c:	8f 90       	pop	r8
    387e:	7f 90       	pop	r7
    3880:	6f 90       	pop	r6
    3882:	5f 90       	pop	r5
    3884:	4f 90       	pop	r4
    3886:	3f 90       	pop	r3
    3888:	2f 90       	pop	r2
    388a:	08 95       	ret

0000388c <strnlen_P>:
    388c:	fc 01       	movw	r30, r24
    388e:	05 90       	lpm	r0, Z+
    3890:	61 50       	subi	r22, 0x01	; 1
    3892:	70 40       	sbci	r23, 0x00	; 0
    3894:	01 10       	cpse	r0, r1
    3896:	d8 f7       	brcc	.-10     	; 0x388e <strnlen_P+0x2>
    3898:	80 95       	com	r24
    389a:	90 95       	com	r25
    389c:	8e 0f       	add	r24, r30
    389e:	9f 1f       	adc	r25, r31
    38a0:	08 95       	ret

000038a2 <strnlen>:
    38a2:	fc 01       	movw	r30, r24
    38a4:	61 50       	subi	r22, 0x01	; 1
    38a6:	70 40       	sbci	r23, 0x00	; 0
    38a8:	01 90       	ld	r0, Z+
    38aa:	01 10       	cpse	r0, r1
    38ac:	d8 f7       	brcc	.-10     	; 0x38a4 <strnlen+0x2>
    38ae:	80 95       	com	r24
    38b0:	90 95       	com	r25
    38b2:	8e 0f       	add	r24, r30
    38b4:	9f 1f       	adc	r25, r31
    38b6:	08 95       	ret

000038b8 <fputc>:
    38b8:	0f 93       	push	r16
    38ba:	1f 93       	push	r17
    38bc:	cf 93       	push	r28
    38be:	df 93       	push	r29
    38c0:	fb 01       	movw	r30, r22
    38c2:	23 81       	ldd	r18, Z+3	; 0x03
    38c4:	21 fd       	sbrc	r18, 1
    38c6:	03 c0       	rjmp	.+6      	; 0x38ce <fputc+0x16>
    38c8:	8f ef       	ldi	r24, 0xFF	; 255
    38ca:	9f ef       	ldi	r25, 0xFF	; 255
    38cc:	2c c0       	rjmp	.+88     	; 0x3926 <fputc+0x6e>
    38ce:	22 ff       	sbrs	r18, 2
    38d0:	16 c0       	rjmp	.+44     	; 0x38fe <fputc+0x46>
    38d2:	46 81       	ldd	r20, Z+6	; 0x06
    38d4:	57 81       	ldd	r21, Z+7	; 0x07
    38d6:	24 81       	ldd	r18, Z+4	; 0x04
    38d8:	35 81       	ldd	r19, Z+5	; 0x05
    38da:	42 17       	cp	r20, r18
    38dc:	53 07       	cpc	r21, r19
    38de:	44 f4       	brge	.+16     	; 0x38f0 <fputc+0x38>
    38e0:	a0 81       	ld	r26, Z
    38e2:	b1 81       	ldd	r27, Z+1	; 0x01
    38e4:	9d 01       	movw	r18, r26
    38e6:	2f 5f       	subi	r18, 0xFF	; 255
    38e8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ea:	31 83       	std	Z+1, r19	; 0x01
    38ec:	20 83       	st	Z, r18
    38ee:	8c 93       	st	X, r24
    38f0:	26 81       	ldd	r18, Z+6	; 0x06
    38f2:	37 81       	ldd	r19, Z+7	; 0x07
    38f4:	2f 5f       	subi	r18, 0xFF	; 255
    38f6:	3f 4f       	sbci	r19, 0xFF	; 255
    38f8:	37 83       	std	Z+7, r19	; 0x07
    38fa:	26 83       	std	Z+6, r18	; 0x06
    38fc:	14 c0       	rjmp	.+40     	; 0x3926 <fputc+0x6e>
    38fe:	8b 01       	movw	r16, r22
    3900:	ec 01       	movw	r28, r24
    3902:	fb 01       	movw	r30, r22
    3904:	00 84       	ldd	r0, Z+8	; 0x08
    3906:	f1 85       	ldd	r31, Z+9	; 0x09
    3908:	e0 2d       	mov	r30, r0
    390a:	19 95       	eicall
    390c:	89 2b       	or	r24, r25
    390e:	e1 f6       	brne	.-72     	; 0x38c8 <fputc+0x10>
    3910:	d8 01       	movw	r26, r16
    3912:	16 96       	adiw	r26, 0x06	; 6
    3914:	8d 91       	ld	r24, X+
    3916:	9c 91       	ld	r25, X
    3918:	17 97       	sbiw	r26, 0x07	; 7
    391a:	01 96       	adiw	r24, 0x01	; 1
    391c:	17 96       	adiw	r26, 0x07	; 7
    391e:	9c 93       	st	X, r25
    3920:	8e 93       	st	-X, r24
    3922:	16 97       	sbiw	r26, 0x06	; 6
    3924:	ce 01       	movw	r24, r28
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	08 95       	ret

00003930 <__ultoa_invert>:
    3930:	fa 01       	movw	r30, r20
    3932:	aa 27       	eor	r26, r26
    3934:	28 30       	cpi	r18, 0x08	; 8
    3936:	51 f1       	breq	.+84     	; 0x398c <__ultoa_invert+0x5c>
    3938:	20 31       	cpi	r18, 0x10	; 16
    393a:	81 f1       	breq	.+96     	; 0x399c <__ultoa_invert+0x6c>
    393c:	e8 94       	clt
    393e:	6f 93       	push	r22
    3940:	6e 7f       	andi	r22, 0xFE	; 254
    3942:	6e 5f       	subi	r22, 0xFE	; 254
    3944:	7f 4f       	sbci	r23, 0xFF	; 255
    3946:	8f 4f       	sbci	r24, 0xFF	; 255
    3948:	9f 4f       	sbci	r25, 0xFF	; 255
    394a:	af 4f       	sbci	r26, 0xFF	; 255
    394c:	b1 e0       	ldi	r27, 0x01	; 1
    394e:	3e d0       	rcall	.+124    	; 0x39cc <__ultoa_invert+0x9c>
    3950:	b4 e0       	ldi	r27, 0x04	; 4
    3952:	3c d0       	rcall	.+120    	; 0x39cc <__ultoa_invert+0x9c>
    3954:	67 0f       	add	r22, r23
    3956:	78 1f       	adc	r23, r24
    3958:	89 1f       	adc	r24, r25
    395a:	9a 1f       	adc	r25, r26
    395c:	a1 1d       	adc	r26, r1
    395e:	68 0f       	add	r22, r24
    3960:	79 1f       	adc	r23, r25
    3962:	8a 1f       	adc	r24, r26
    3964:	91 1d       	adc	r25, r1
    3966:	a1 1d       	adc	r26, r1
    3968:	6a 0f       	add	r22, r26
    396a:	71 1d       	adc	r23, r1
    396c:	81 1d       	adc	r24, r1
    396e:	91 1d       	adc	r25, r1
    3970:	a1 1d       	adc	r26, r1
    3972:	20 d0       	rcall	.+64     	; 0x39b4 <__ultoa_invert+0x84>
    3974:	09 f4       	brne	.+2      	; 0x3978 <__ultoa_invert+0x48>
    3976:	68 94       	set
    3978:	3f 91       	pop	r19
    397a:	2a e0       	ldi	r18, 0x0A	; 10
    397c:	26 9f       	mul	r18, r22
    397e:	11 24       	eor	r1, r1
    3980:	30 19       	sub	r19, r0
    3982:	30 5d       	subi	r19, 0xD0	; 208
    3984:	31 93       	st	Z+, r19
    3986:	de f6       	brtc	.-74     	; 0x393e <__ultoa_invert+0xe>
    3988:	cf 01       	movw	r24, r30
    398a:	08 95       	ret
    398c:	46 2f       	mov	r20, r22
    398e:	47 70       	andi	r20, 0x07	; 7
    3990:	40 5d       	subi	r20, 0xD0	; 208
    3992:	41 93       	st	Z+, r20
    3994:	b3 e0       	ldi	r27, 0x03	; 3
    3996:	0f d0       	rcall	.+30     	; 0x39b6 <__ultoa_invert+0x86>
    3998:	c9 f7       	brne	.-14     	; 0x398c <__ultoa_invert+0x5c>
    399a:	f6 cf       	rjmp	.-20     	; 0x3988 <__ultoa_invert+0x58>
    399c:	46 2f       	mov	r20, r22
    399e:	4f 70       	andi	r20, 0x0F	; 15
    39a0:	40 5d       	subi	r20, 0xD0	; 208
    39a2:	4a 33       	cpi	r20, 0x3A	; 58
    39a4:	18 f0       	brcs	.+6      	; 0x39ac <__ultoa_invert+0x7c>
    39a6:	49 5d       	subi	r20, 0xD9	; 217
    39a8:	31 fd       	sbrc	r19, 1
    39aa:	40 52       	subi	r20, 0x20	; 32
    39ac:	41 93       	st	Z+, r20
    39ae:	02 d0       	rcall	.+4      	; 0x39b4 <__ultoa_invert+0x84>
    39b0:	a9 f7       	brne	.-22     	; 0x399c <__ultoa_invert+0x6c>
    39b2:	ea cf       	rjmp	.-44     	; 0x3988 <__ultoa_invert+0x58>
    39b4:	b4 e0       	ldi	r27, 0x04	; 4
    39b6:	a6 95       	lsr	r26
    39b8:	97 95       	ror	r25
    39ba:	87 95       	ror	r24
    39bc:	77 95       	ror	r23
    39be:	67 95       	ror	r22
    39c0:	ba 95       	dec	r27
    39c2:	c9 f7       	brne	.-14     	; 0x39b6 <__ultoa_invert+0x86>
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	61 05       	cpc	r22, r1
    39c8:	71 05       	cpc	r23, r1
    39ca:	08 95       	ret
    39cc:	9b 01       	movw	r18, r22
    39ce:	ac 01       	movw	r20, r24
    39d0:	0a 2e       	mov	r0, r26
    39d2:	06 94       	lsr	r0
    39d4:	57 95       	ror	r21
    39d6:	47 95       	ror	r20
    39d8:	37 95       	ror	r19
    39da:	27 95       	ror	r18
    39dc:	ba 95       	dec	r27
    39de:	c9 f7       	brne	.-14     	; 0x39d2 <__ultoa_invert+0xa2>
    39e0:	62 0f       	add	r22, r18
    39e2:	73 1f       	adc	r23, r19
    39e4:	84 1f       	adc	r24, r20
    39e6:	95 1f       	adc	r25, r21
    39e8:	a0 1d       	adc	r26, r0
    39ea:	08 95       	ret

000039ec <_exit>:
    39ec:	f8 94       	cli

000039ee <__stop_program>:
    39ee:	ff cf       	rjmp	.-2      	; 0x39ee <__stop_program>
