
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000486  00800200  00005268  000052fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c7c  00800686  00800686  00005782  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00005820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b539  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b23  00000000  00000000  00011549  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005488  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d28  00000000  00000000  000194f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000035c1  00000000  00000000  0001b21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a5a3  00000000  00000000  0001e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c1       	rjmp	.+1002   	; 0x3ec <__ctors_end>
       2:	00 00       	nop
       4:	14 c2       	rjmp	.+1064   	; 0x42e <__bad_interrupt>
       6:	00 00       	nop
       8:	12 c2       	rjmp	.+1060   	; 0x42e <__bad_interrupt>
       a:	00 00       	nop
       c:	10 c2       	rjmp	.+1056   	; 0x42e <__bad_interrupt>
       e:	00 00       	nop
      10:	0e c2       	rjmp	.+1052   	; 0x42e <__bad_interrupt>
      12:	00 00       	nop
      14:	0c c2       	rjmp	.+1048   	; 0x42e <__bad_interrupt>
      16:	00 00       	nop
      18:	0a c2       	rjmp	.+1044   	; 0x42e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	08 c2       	rjmp	.+1040   	; 0x42e <__bad_interrupt>
      1e:	00 00       	nop
      20:	06 c2       	rjmp	.+1036   	; 0x42e <__bad_interrupt>
      22:	00 00       	nop
      24:	04 c2       	rjmp	.+1032   	; 0x42e <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c2       	rjmp	.+1028   	; 0x42e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	00 c2       	rjmp	.+1024   	; 0x42e <__bad_interrupt>
      2e:	00 00       	nop
      30:	e0 c4       	rjmp	.+2496   	; 0x9f2 <__vector_12>
      32:	00 00       	nop
      34:	fc c1       	rjmp	.+1016   	; 0x42e <__bad_interrupt>
      36:	00 00       	nop
      38:	fa c1       	rjmp	.+1012   	; 0x42e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f8 c1       	rjmp	.+1008   	; 0x42e <__bad_interrupt>
      3e:	00 00       	nop
      40:	f6 c1       	rjmp	.+1004   	; 0x42e <__bad_interrupt>
      42:	00 00       	nop
      44:	f4 c1       	rjmp	.+1000   	; 0x42e <__bad_interrupt>
      46:	00 00       	nop
      48:	f2 c1       	rjmp	.+996    	; 0x42e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f0 c1       	rjmp	.+992    	; 0x42e <__bad_interrupt>
      4e:	00 00       	nop
      50:	ee c1       	rjmp	.+988    	; 0x42e <__bad_interrupt>
      52:	00 00       	nop
      54:	ec c1       	rjmp	.+984    	; 0x42e <__bad_interrupt>
      56:	00 00       	nop
      58:	ea c1       	rjmp	.+980    	; 0x42e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e8 c1       	rjmp	.+976    	; 0x42e <__bad_interrupt>
      5e:	00 00       	nop
      60:	e6 c1       	rjmp	.+972    	; 0x42e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__vector_25>
      68:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__vector_26>
      6c:	e0 c1       	rjmp	.+960    	; 0x42e <__bad_interrupt>
      6e:	00 00       	nop
      70:	de c1       	rjmp	.+956    	; 0x42e <__bad_interrupt>
      72:	00 00       	nop
      74:	dc c1       	rjmp	.+952    	; 0x42e <__bad_interrupt>
      76:	00 00       	nop
      78:	da c1       	rjmp	.+948    	; 0x42e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d8 c1       	rjmp	.+944    	; 0x42e <__bad_interrupt>
      7e:	00 00       	nop
      80:	d6 c1       	rjmp	.+940    	; 0x42e <__bad_interrupt>
      82:	00 00       	nop
      84:	d4 c1       	rjmp	.+936    	; 0x42e <__bad_interrupt>
      86:	00 00       	nop
      88:	d2 c1       	rjmp	.+932    	; 0x42e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d0 c1       	rjmp	.+928    	; 0x42e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__vector_36>
      94:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__vector_37>
      98:	ca c1       	rjmp	.+916    	; 0x42e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c8 c1       	rjmp	.+912    	; 0x42e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c6 c1       	rjmp	.+908    	; 0x42e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c4 c1       	rjmp	.+904    	; 0x42e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c2 c1       	rjmp	.+900    	; 0x42e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c0 c1       	rjmp	.+896    	; 0x42e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	be c1       	rjmp	.+892    	; 0x42e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bc c1       	rjmp	.+888    	; 0x42e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ba c1       	rjmp	.+884    	; 0x42e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b8 c1       	rjmp	.+880    	; 0x42e <__bad_interrupt>
      be:	00 00       	nop
      c0:	b6 c1       	rjmp	.+876    	; 0x42e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b4 c1       	rjmp	.+872    	; 0x42e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b2 c1       	rjmp	.+868    	; 0x42e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__vector_51>
      d0:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__vector_52>
      d4:	ac c1       	rjmp	.+856    	; 0x42e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__vector_54>
      dc:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__vector_55>
      e0:	a6 c1       	rjmp	.+844    	; 0x42e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6d 01       	movw	r12, r26
      e6:	6d 01       	movw	r12, r26
      e8:	6d 01       	movw	r12, r26
      ea:	a7 01       	movw	r20, r14
      ec:	af 01       	movw	r20, r30
      ee:	c5 01       	movw	r24, r10
      f0:	6d 01       	movw	r12, r26
      f2:	6d 01       	movw	r12, r26
      f4:	a7 01       	movw	r20, r14
      f6:	af 01       	movw	r20, r30

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0b e7       	ldi	r16, 0x7B	; 123
      fa:	10 e1       	ldi	r17, 0x10	; 16
      fc:	0f 2e       	mov	r0, r31
      fe:	fb ea       	ldi	r31, 0xAB	; 171
     100:	ef 2e       	mov	r14, r31
     102:	f0 e1       	ldi	r31, 0x10	; 16
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	17 96       	adiw	r26, 0x07	; 7
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	18 97       	sbiw	r26, 0x08	; 8
     120:	c0 85       	ldd	r28, Z+8	; 0x08
     122:	d1 85       	ldd	r29, Z+9	; 0x09
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	24 d3       	rcall	.+1608   	; 0x772 <uxListRemove>
     12a:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <uxCurrentNumberOfTasks>
     134:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 7a 10 	sts	0x107A, r24	; 0x80107a <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8b 8d       	ldd	r24, Y+27	; 0x1b
     144:	9c 8d       	ldd	r25, Y+28	; 0x1c
     146:	89 d2       	rcall	.+1298   	; 0x65a <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	87 d2       	rcall	.+1294   	; 0x65a <vPortFree>
     14c:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	84 d3       	rcall	.+1800   	; 0x866 <vPortYield>
     15e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	60 97       	sbiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	ce 01       	movw	r24, r28
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	81 2c       	mov	r8, r1
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
     186:	b1 2c       	mov	r11, r1
     188:	69 84       	ldd	r6, Y+9	; 0x09
     18a:	7a 84       	ldd	r7, Y+10	; 0x0a
     18c:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
     190:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	09 f4       	brne	.+2      	; 0x19c <prvTimerTask+0x38>
     19a:	0e c1       	rjmp	.+540    	; 0x3b8 <prvTimerTask+0x254>
     19c:	07 80       	ldd	r0, Z+7	; 0x07
     19e:	f0 85       	ldd	r31, Z+8	; 0x08
     1a0:	e0 2d       	mov	r30, r0
     1a2:	20 80       	ld	r2, Z
     1a4:	31 80       	ldd	r3, Z+1	; 0x01
     1a6:	42 80       	ldd	r4, Z+2	; 0x02
     1a8:	53 80       	ldd	r5, Z+3	; 0x03
     1aa:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vTaskSuspendAll>
     1ae:	ce 01       	movw	r24, r28
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <prvSampleTimeNow>
     1b6:	6b 87       	std	Y+11, r22	; 0x0b
     1b8:	7c 87       	std	Y+12, r23	; 0x0c
     1ba:	8d 87       	std	Y+13, r24	; 0x0d
     1bc:	9e 87       	std	Y+14, r25	; 0x0e
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	81 11       	cpse	r24, r1
     1c2:	64 c0       	rjmp	.+200    	; 0x28c <prvTimerTask+0x128>
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     1ca:	be 85       	ldd	r27, Y+14	; 0x0e
     1cc:	82 15       	cp	r24, r2
     1ce:	93 05       	cpc	r25, r3
     1d0:	a4 05       	cpc	r26, r4
     1d2:	b5 05       	cpc	r27, r5
     1d4:	08 f4       	brcc	.+2      	; 0x1d8 <prvTimerTask+0x74>
     1d6:	44 c0       	rjmp	.+136    	; 0x260 <prvTimerTask+0xfc>
     1d8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>
     1dc:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
     1e0:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
     1e4:	07 80       	ldd	r0, Z+7	; 0x07
     1e6:	f0 85       	ldd	r31, Z+8	; 0x08
     1e8:	e0 2d       	mov	r30, r0
     1ea:	a0 85       	ldd	r26, Z+8	; 0x08
     1ec:	b1 85       	ldd	r27, Z+9	; 0x09
     1ee:	b8 8b       	std	Y+16, r27	; 0x10
     1f0:	af 87       	std	Y+15, r26	; 0x0f
     1f2:	cd 01       	movw	r24, r26
     1f4:	02 96       	adiw	r24, 0x02	; 2
     1f6:	bd d2       	rcall	.+1402   	; 0x772 <uxListRemove>
     1f8:	ef 85       	ldd	r30, Y+15	; 0x0f
     1fa:	f8 89       	ldd	r31, Y+16	; 0x10
     1fc:	86 89       	ldd	r24, Z+22	; 0x16
     1fe:	82 ff       	sbrs	r24, 2
     200:	21 c0       	rjmp	.+66     	; 0x244 <prvTimerTask+0xe0>
     202:	46 85       	ldd	r20, Z+14	; 0x0e
     204:	57 85       	ldd	r21, Z+15	; 0x0f
     206:	60 89       	ldd	r22, Z+16	; 0x10
     208:	71 89       	ldd	r23, Z+17	; 0x11
     20a:	42 0d       	add	r20, r2
     20c:	53 1d       	adc	r21, r3
     20e:	64 1d       	adc	r22, r4
     210:	75 1d       	adc	r23, r5
     212:	72 01       	movw	r14, r4
     214:	61 01       	movw	r12, r2
     216:	0b 85       	ldd	r16, Y+11	; 0x0b
     218:	1c 85       	ldd	r17, Y+12	; 0x0c
     21a:	2d 85       	ldd	r18, Y+13	; 0x0d
     21c:	3e 85       	ldd	r19, Y+14	; 0x0e
     21e:	cf 01       	movw	r24, r30
     220:	0e 94 19 15 	call	0x2a32	; 0x2a32 <prvInsertTimerInActiveList>
     224:	88 23       	and	r24, r24
     226:	99 f0       	breq	.+38     	; 0x24e <prvTimerTask+0xea>
     228:	c8 2c       	mov	r12, r8
     22a:	d9 2c       	mov	r13, r9
     22c:	ea 2c       	mov	r14, r10
     22e:	fb 2c       	mov	r15, r11
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	a2 01       	movw	r20, r4
     236:	91 01       	movw	r18, r2
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	8f 85       	ldd	r24, Y+15	; 0x0f
     23c:	98 89       	ldd	r25, Y+16	; 0x10
     23e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTimerGenericCommand>
     242:	05 c0       	rjmp	.+10     	; 0x24e <prvTimerTask+0xea>
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	af 85       	ldd	r26, Y+15	; 0x0f
     248:	b8 89       	ldd	r27, Y+16	; 0x10
     24a:	56 96       	adiw	r26, 0x16	; 22
     24c:	8c 93       	st	X, r24
     24e:	af 85       	ldd	r26, Y+15	; 0x0f
     250:	b8 89       	ldd	r27, Y+16	; 0x10
     252:	54 96       	adiw	r26, 0x14	; 20
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	55 97       	sbiw	r26, 0x15	; 21
     25a:	cd 01       	movw	r24, r26
     25c:	19 95       	eicall
     25e:	9e c0       	rjmp	.+316    	; 0x39c <prvTimerTask+0x238>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	b2 01       	movw	r22, r4
     264:	a1 01       	movw	r20, r2
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	48 1b       	sub	r20, r24
     270:	59 0b       	sbc	r21, r25
     272:	6a 0b       	sbc	r22, r26
     274:	7b 0b       	sbc	r23, r27
     276:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
     27a:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
     27e:	7f d6       	rcall	.+3326   	; 0xf7e <vQueueWaitForMessageRestricted>
     280:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>
     284:	81 11       	cpse	r24, r1
     286:	8a c0       	rjmp	.+276    	; 0x39c <prvTimerTask+0x238>
     288:	ee d2       	rcall	.+1500   	; 0x866 <vPortYield>
     28a:	88 c0       	rjmp	.+272    	; 0x39c <prvTimerTask+0x238>
     28c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>
     290:	85 c0       	rjmp	.+266    	; 0x39c <prvTimerTask+0x238>
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	88 23       	and	r24, r24
     296:	0c f4       	brge	.+2      	; 0x29a <prvTimerTask+0x136>
     298:	81 c0       	rjmp	.+258    	; 0x39c <prvTimerTask+0x238>
     29a:	4e 80       	ldd	r4, Y+6	; 0x06
     29c:	5f 80       	ldd	r5, Y+7	; 0x07
     29e:	d2 01       	movw	r26, r4
     2a0:	1c 96       	adiw	r26, 0x0c	; 12
     2a2:	8d 91       	ld	r24, X+
     2a4:	9c 91       	ld	r25, X
     2a6:	1d 97       	sbiw	r26, 0x0d	; 13
     2a8:	89 2b       	or	r24, r25
     2aa:	19 f0       	breq	.+6      	; 0x2b2 <prvTimerTask+0x14e>
     2ac:	c2 01       	movw	r24, r4
     2ae:	02 96       	adiw	r24, 0x02	; 2
     2b0:	60 d2       	rcall	.+1216   	; 0x772 <uxListRemove>
     2b2:	ce 01       	movw	r24, r28
     2b4:	08 96       	adiw	r24, 0x08	; 8
     2b6:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <prvSampleTimeNow>
     2ba:	8b 01       	movw	r16, r22
     2bc:	9c 01       	movw	r18, r24
     2be:	e9 81       	ldd	r30, Y+1	; 0x01
     2c0:	0e 2e       	mov	r0, r30
     2c2:	00 0c       	add	r0, r0
     2c4:	ff 0b       	sbc	r31, r31
     2c6:	ea 30       	cpi	r30, 0x0A	; 10
     2c8:	f1 05       	cpc	r31, r1
     2ca:	08 f0       	brcs	.+2      	; 0x2ce <prvTimerTask+0x16a>
     2cc:	67 c0       	rjmp	.+206    	; 0x39c <prvTimerTask+0x238>
     2ce:	88 27       	eor	r24, r24
     2d0:	ee 58       	subi	r30, 0x8E	; 142
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	8f 4f       	sbci	r24, 0xFF	; 255
     2d6:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__tablejump2__>
     2da:	f2 01       	movw	r30, r4
     2dc:	86 89       	ldd	r24, Z+22	; 0x16
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	86 8b       	std	Z+22, r24	; 0x16
     2e2:	ca 80       	ldd	r12, Y+2	; 0x02
     2e4:	db 80       	ldd	r13, Y+3	; 0x03
     2e6:	ec 80       	ldd	r14, Y+4	; 0x04
     2e8:	fd 80       	ldd	r15, Y+5	; 0x05
     2ea:	46 85       	ldd	r20, Z+14	; 0x0e
     2ec:	57 85       	ldd	r21, Z+15	; 0x0f
     2ee:	60 89       	ldd	r22, Z+16	; 0x10
     2f0:	71 89       	ldd	r23, Z+17	; 0x11
     2f2:	4c 0d       	add	r20, r12
     2f4:	5d 1d       	adc	r21, r13
     2f6:	6e 1d       	adc	r22, r14
     2f8:	7f 1d       	adc	r23, r15
     2fa:	c2 01       	movw	r24, r4
     2fc:	0e 94 19 15 	call	0x2a32	; 0x2a32 <prvInsertTimerInActiveList>
     300:	88 23       	and	r24, r24
     302:	09 f4       	brne	.+2      	; 0x306 <prvTimerTask+0x1a2>
     304:	4b c0       	rjmp	.+150    	; 0x39c <prvTimerTask+0x238>
     306:	d2 01       	movw	r26, r4
     308:	54 96       	adiw	r26, 0x14	; 20
     30a:	ed 91       	ld	r30, X+
     30c:	fc 91       	ld	r31, X
     30e:	55 97       	sbiw	r26, 0x15	; 21
     310:	c2 01       	movw	r24, r4
     312:	19 95       	eicall
     314:	f2 01       	movw	r30, r4
     316:	86 89       	ldd	r24, Z+22	; 0x16
     318:	82 ff       	sbrs	r24, 2
     31a:	40 c0       	rjmp	.+128    	; 0x39c <prvTimerTask+0x238>
     31c:	4a 81       	ldd	r20, Y+2	; 0x02
     31e:	5b 81       	ldd	r21, Y+3	; 0x03
     320:	6c 81       	ldd	r22, Y+4	; 0x04
     322:	7d 81       	ldd	r23, Y+5	; 0x05
     324:	86 85       	ldd	r24, Z+14	; 0x0e
     326:	97 85       	ldd	r25, Z+15	; 0x0f
     328:	a0 89       	ldd	r26, Z+16	; 0x10
     32a:	b1 89       	ldd	r27, Z+17	; 0x11
     32c:	9a 01       	movw	r18, r20
     32e:	ab 01       	movw	r20, r22
     330:	28 0f       	add	r18, r24
     332:	39 1f       	adc	r19, r25
     334:	4a 1f       	adc	r20, r26
     336:	5b 1f       	adc	r21, r27
     338:	c8 2c       	mov	r12, r8
     33a:	d9 2c       	mov	r13, r9
     33c:	ea 2c       	mov	r14, r10
     33e:	fb 2c       	mov	r15, r11
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	c2 01       	movw	r24, r4
     348:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTimerGenericCommand>
     34c:	27 c0       	rjmp	.+78     	; 0x39c <prvTimerTask+0x238>
     34e:	d2 01       	movw	r26, r4
     350:	56 96       	adiw	r26, 0x16	; 22
     352:	8c 91       	ld	r24, X
     354:	56 97       	sbiw	r26, 0x16	; 22
     356:	8e 7f       	andi	r24, 0xFE	; 254
     358:	56 96       	adiw	r26, 0x16	; 22
     35a:	8c 93       	st	X, r24
     35c:	1f c0       	rjmp	.+62     	; 0x39c <prvTimerTask+0x238>
     35e:	f2 01       	movw	r30, r4
     360:	86 89       	ldd	r24, Z+22	; 0x16
     362:	81 60       	ori	r24, 0x01	; 1
     364:	86 8b       	std	Z+22, r24	; 0x16
     366:	4a 81       	ldd	r20, Y+2	; 0x02
     368:	5b 81       	ldd	r21, Y+3	; 0x03
     36a:	6c 81       	ldd	r22, Y+4	; 0x04
     36c:	7d 81       	ldd	r23, Y+5	; 0x05
     36e:	46 87       	std	Z+14, r20	; 0x0e
     370:	57 87       	std	Z+15, r21	; 0x0f
     372:	60 8b       	std	Z+16, r22	; 0x10
     374:	71 8b       	std	Z+17, r23	; 0x11
     376:	40 0f       	add	r20, r16
     378:	51 1f       	adc	r21, r17
     37a:	62 1f       	adc	r22, r18
     37c:	73 1f       	adc	r23, r19
     37e:	68 01       	movw	r12, r16
     380:	79 01       	movw	r14, r18
     382:	c2 01       	movw	r24, r4
     384:	0e 94 19 15 	call	0x2a32	; 0x2a32 <prvInsertTimerInActiveList>
     388:	09 c0       	rjmp	.+18     	; 0x39c <prvTimerTask+0x238>
     38a:	f2 01       	movw	r30, r4
     38c:	86 89       	ldd	r24, Z+22	; 0x16
     38e:	81 fd       	sbrc	r24, 1
     390:	03 c0       	rjmp	.+6      	; 0x398 <prvTimerTask+0x234>
     392:	c2 01       	movw	r24, r4
     394:	62 d1       	rcall	.+708    	; 0x65a <vPortFree>
     396:	02 c0       	rjmp	.+4      	; 0x39c <prvTimerTask+0x238>
     398:	8e 7f       	andi	r24, 0xFE	; 254
     39a:	86 8b       	std	Z+22, r24	; 0x16
     39c:	28 2d       	mov	r18, r8
     39e:	39 2d       	mov	r19, r9
     3a0:	4a 2d       	mov	r20, r10
     3a2:	5b 2d       	mov	r21, r11
     3a4:	66 2d       	mov	r22, r6
     3a6:	77 2d       	mov	r23, r7
     3a8:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
     3ac:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
     3b0:	4d d5       	rcall	.+2714   	; 0xe4c <xQueueReceive>
     3b2:	81 11       	cpse	r24, r1
     3b4:	6e cf       	rjmp	.-292    	; 0x292 <prvTimerTask+0x12e>
     3b6:	ea ce       	rjmp	.-556    	; 0x18c <prvTimerTask+0x28>
     3b8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vTaskSuspendAll>
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <prvSampleTimeNow>
     3c4:	6b 87       	std	Y+11, r22	; 0x0b
     3c6:	7c 87       	std	Y+12, r23	; 0x0c
     3c8:	8d 87       	std	Y+13, r24	; 0x0d
     3ca:	9e 87       	std	Y+14, r25	; 0x0e
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	81 11       	cpse	r24, r1
     3d0:	5d cf       	rjmp	.-326    	; 0x28c <prvTimerTask+0x128>
     3d2:	e0 91 23 11 	lds	r30, 0x1123	; 0x801123 <pxOverflowTimerList>
     3d6:	f0 91 24 11 	lds	r31, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
     3da:	80 81       	ld	r24, Z
     3dc:	21 e0       	ldi	r18, 0x01	; 1
     3de:	81 11       	cpse	r24, r1
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	28 2c       	mov	r2, r8
     3e4:	39 2c       	mov	r3, r9
     3e6:	4a 2c       	mov	r4, r10
     3e8:	5b 2c       	mov	r5, r11
     3ea:	3b cf       	rjmp	.-394    	; 0x262 <prvTimerTask+0xfe>

000003ec <__ctors_end>:
     3ec:	11 24       	eor	r1, r1
     3ee:	1f be       	out	0x3f, r1	; 63
     3f0:	cf ef       	ldi	r28, 0xFF	; 255
     3f2:	d1 e2       	ldi	r29, 0x21	; 33
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	00 e0       	ldi	r16, 0x00	; 0
     3fa:	0c bf       	out	0x3c, r16	; 60

000003fc <__do_copy_data>:
     3fc:	16 e0       	ldi	r17, 0x06	; 6
     3fe:	a0 e0       	ldi	r26, 0x00	; 0
     400:	b2 e0       	ldi	r27, 0x02	; 2
     402:	e8 e6       	ldi	r30, 0x68	; 104
     404:	f2 e5       	ldi	r31, 0x52	; 82
     406:	00 e0       	ldi	r16, 0x00	; 0
     408:	0b bf       	out	0x3b, r16	; 59
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	07 90       	elpm	r0, Z+
     40e:	0d 92       	st	X+, r0
     410:	a6 38       	cpi	r26, 0x86	; 134
     412:	b1 07       	cpc	r27, r17
     414:	d9 f7       	brne	.-10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

00000416 <__do_clear_bss>:
     416:	23 e1       	ldi	r18, 0x13	; 19
     418:	a6 e8       	ldi	r26, 0x86	; 134
     41a:	b6 e0       	ldi	r27, 0x06	; 6
     41c:	01 c0       	rjmp	.+2      	; 0x420 <.do_clear_bss_start>

0000041e <.do_clear_bss_loop>:
     41e:	1d 92       	st	X+, r1

00000420 <.do_clear_bss_start>:
     420:	a2 30       	cpi	r26, 0x02	; 2
     422:	b2 07       	cpc	r27, r18
     424:	e1 f7       	brne	.-8      	; 0x41e <.do_clear_bss_loop>
     426:	0e 94 66 18 	call	0x30cc	; 0x30cc <main>
     42a:	0c 94 32 29 	jmp	0x5264	; 0x5264 <_exit>

0000042e <__bad_interrupt>:
     42e:	e8 cd       	rjmp	.-1072   	; 0x0 <__vectors>

00000430 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     436:	e2 e9       	ldi	r30, 0x92	; 146
     438:	f6 e0       	ldi	r31, 0x06	; 6
     43a:	01 c0       	rjmp	.+2      	; 0x43e <prvInsertBlockIntoFreeList+0xe>
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	31 81       	ldd	r19, Z+1	; 0x01
     442:	2a 17       	cp	r18, r26
     444:	3b 07       	cpc	r19, r27
     446:	d0 f3       	brcs	.-12     	; 0x43c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     448:	82 81       	ldd	r24, Z+2	; 0x02
     44a:	93 81       	ldd	r25, Z+3	; 0x03
     44c:	af 01       	movw	r20, r30
     44e:	48 0f       	add	r20, r24
     450:	59 1f       	adc	r21, r25
     452:	a4 17       	cp	r26, r20
     454:	b5 07       	cpc	r27, r21
     456:	49 f4       	brne	.+18     	; 0x46a <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     458:	12 96       	adiw	r26, 0x02	; 2
     45a:	4d 91       	ld	r20, X+
     45c:	5c 91       	ld	r21, X
     45e:	13 97       	sbiw	r26, 0x03	; 3
     460:	84 0f       	add	r24, r20
     462:	95 1f       	adc	r25, r21
     464:	93 83       	std	Z+3, r25	; 0x03
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     46a:	12 96       	adiw	r26, 0x02	; 2
     46c:	8d 91       	ld	r24, X+
     46e:	9c 91       	ld	r25, X
     470:	13 97       	sbiw	r26, 0x03	; 3
     472:	ed 01       	movw	r28, r26
     474:	c8 0f       	add	r28, r24
     476:	d9 1f       	adc	r29, r25
     478:	2c 17       	cp	r18, r28
     47a:	3d 07       	cpc	r19, r29
     47c:	d9 f4       	brne	.+54     	; 0x4b4 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     47e:	20 91 90 06 	lds	r18, 0x0690	; 0x800690 <pxEnd>
     482:	30 91 91 06 	lds	r19, 0x0691	; 0x800691 <pxEnd+0x1>
     486:	c2 17       	cp	r28, r18
     488:	d3 07       	cpc	r29, r19
     48a:	81 f0       	breq	.+32     	; 0x4ac <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     48c:	2a 81       	ldd	r18, Y+2	; 0x02
     48e:	3b 81       	ldd	r19, Y+3	; 0x03
     490:	82 0f       	add	r24, r18
     492:	93 1f       	adc	r25, r19
     494:	13 96       	adiw	r26, 0x03	; 3
     496:	9c 93       	st	X, r25
     498:	8e 93       	st	-X, r24
     49a:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     49c:	c0 81       	ld	r28, Z
     49e:	d1 81       	ldd	r29, Z+1	; 0x01
     4a0:	88 81       	ld	r24, Y
     4a2:	99 81       	ldd	r25, Y+1	; 0x01
     4a4:	11 96       	adiw	r26, 0x01	; 1
     4a6:	9c 93       	st	X, r25
     4a8:	8e 93       	st	-X, r24
     4aa:	07 c0       	rjmp	.+14     	; 0x4ba <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	dc 93       	st	X, r29
     4b0:	ce 93       	st	-X, r28
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	3c 93       	st	X, r19
     4b8:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4ba:	ae 17       	cp	r26, r30
     4bc:	bf 07       	cpc	r27, r31
     4be:	11 f0       	breq	.+4      	; 0x4c4 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4c0:	b1 83       	std	Z+1, r27	; 0x01
     4c2:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4dc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4e0:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxEnd>
     4e4:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxEnd+0x1>
     4e8:	89 2b       	or	r24, r25
     4ea:	41 f5       	brne	.+80     	; 0x53c <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4ec:	e2 e9       	ldi	r30, 0x92	; 146
     4ee:	f6 e0       	ldi	r31, 0x06	; 6
     4f0:	a6 e9       	ldi	r26, 0x96	; 150
     4f2:	b6 e0       	ldi	r27, 0x06	; 6
     4f4:	b1 83       	std	Z+1, r27	; 0x01
     4f6:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4f8:	13 82       	std	Z+3, r1	; 0x03
     4fa:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4fc:	e6 e5       	ldi	r30, 0x56	; 86
     4fe:	f0 e1       	ldi	r31, 0x10	; 16
     500:	f0 93 91 06 	sts	0x0691, r31	; 0x800691 <pxEnd+0x1>
     504:	e0 93 90 06 	sts	0x0690, r30	; 0x800690 <pxEnd>
    pxEnd->xBlockSize = 0;
     508:	13 82       	std	Z+3, r1	; 0x03
     50a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     50c:	11 82       	std	Z+1, r1	; 0x01
     50e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     510:	80 ec       	ldi	r24, 0xC0	; 192
     512:	99 e0       	ldi	r25, 0x09	; 9
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	9c 93       	st	X, r25
     518:	8e 93       	st	-X, r24
     51a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     51c:	ed 93       	st	X+, r30
     51e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     520:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     524:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     528:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     52c:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e8       	ldi	r25, 0x80	; 128
     534:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <__data_end+0x1>
     538:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__data_end>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     53c:	e0 90 86 06 	lds	r14, 0x0686	; 0x800686 <__data_end>
     540:	f0 90 87 06 	lds	r15, 0x0687	; 0x800687 <__data_end+0x1>
     544:	c7 01       	movw	r24, r14
     546:	8c 23       	and	r24, r28
     548:	9d 23       	and	r25, r29
     54a:	89 2b       	or	r24, r25
     54c:	09 f0       	breq	.+2      	; 0x550 <pvPortMalloc+0x86>
     54e:	75 c0       	rjmp	.+234    	; 0x63a <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     550:	20 97       	sbiw	r28, 0x00	; 0
     552:	09 f4       	brne	.+2      	; 0x556 <pvPortMalloc+0x8c>
     554:	75 c0       	rjmp	.+234    	; 0x640 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     556:	9e 01       	movw	r18, r28
     558:	2c 5f       	subi	r18, 0xFC	; 252
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     55c:	c2 17       	cp	r28, r18
     55e:	d3 07       	cpc	r29, r19
     560:	08 f0       	brcs	.+2      	; 0x564 <pvPortMalloc+0x9a>
     562:	6e c0       	rjmp	.+220    	; 0x640 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     564:	21 15       	cp	r18, r1
     566:	31 05       	cpc	r19, r1
     568:	09 f4       	brne	.+2      	; 0x56c <pvPortMalloc+0xa2>
     56a:	67 c0       	rjmp	.+206    	; 0x63a <pvPortMalloc+0x170>
     56c:	00 91 8e 06 	lds	r16, 0x068E	; 0x80068e <xFreeBytesRemaining>
     570:	10 91 8f 06 	lds	r17, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     574:	02 17       	cp	r16, r18
     576:	13 07       	cpc	r17, r19
     578:	08 f4       	brcc	.+2      	; 0x57c <pvPortMalloc+0xb2>
     57a:	5f c0       	rjmp	.+190    	; 0x63a <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     57c:	c0 91 92 06 	lds	r28, 0x0692	; 0x800692 <xStart>
     580:	d0 91 93 06 	lds	r29, 0x0693	; 0x800693 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     584:	e2 e9       	ldi	r30, 0x92	; 146
     586:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     588:	02 c0       	rjmp	.+4      	; 0x58e <pvPortMalloc+0xc4>
     58a:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     58c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	9b 81       	ldd	r25, Y+3	; 0x03
     592:	82 17       	cp	r24, r18
     594:	93 07       	cpc	r25, r19
     596:	20 f4       	brcc	.+8      	; 0x5a0 <pvPortMalloc+0xd6>
     598:	88 81       	ld	r24, Y
     59a:	99 81       	ldd	r25, Y+1	; 0x01
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	a9 f7       	brne	.-22     	; 0x58a <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     5a0:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxEnd>
     5a4:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxEnd+0x1>
     5a8:	c8 17       	cp	r28, r24
     5aa:	d9 07       	cpc	r29, r25
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <pvPortMalloc+0xe6>
     5ae:	45 c0       	rjmp	.+138    	; 0x63a <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     5b0:	c0 80       	ld	r12, Z
     5b2:	d1 80       	ldd	r13, Z+1	; 0x01
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	c8 0e       	add	r12, r24
     5b8:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5ba:	88 81       	ld	r24, Y
     5bc:	99 81       	ldd	r25, Y+1	; 0x01
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5c2:	4a 81       	ldd	r20, Y+2	; 0x02
     5c4:	5b 81       	ldd	r21, Y+3	; 0x03
     5c6:	42 1b       	sub	r20, r18
     5c8:	53 0b       	sbc	r21, r19
     5ca:	49 30       	cpi	r20, 0x09	; 9
     5cc:	51 05       	cpc	r21, r1
     5ce:	48 f0       	brcs	.+18     	; 0x5e2 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5d0:	ce 01       	movw	r24, r28
     5d2:	82 0f       	add	r24, r18
     5d4:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5d6:	fc 01       	movw	r30, r24
     5d8:	53 83       	std	Z+3, r21	; 0x03
     5da:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5dc:	3b 83       	std	Y+3, r19	; 0x03
     5de:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5e0:	27 df       	rcall	.-434    	; 0x430 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	9b 81       	ldd	r25, Y+3	; 0x03
     5e6:	08 1b       	sub	r16, r24
     5e8:	19 0b       	sbc	r17, r25
     5ea:	10 93 8f 06 	sts	0x068F, r17	; 0x80068f <xFreeBytesRemaining+0x1>
     5ee:	00 93 8e 06 	sts	0x068E, r16	; 0x80068e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5f2:	20 91 8c 06 	lds	r18, 0x068C	; 0x80068c <xMinimumEverFreeBytesRemaining>
     5f6:	30 91 8d 06 	lds	r19, 0x068D	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     5fa:	02 17       	cp	r16, r18
     5fc:	13 07       	cpc	r17, r19
     5fe:	20 f4       	brcc	.+8      	; 0x608 <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     600:	10 93 8d 06 	sts	0x068D, r17	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     604:	00 93 8c 06 	sts	0x068C, r16	; 0x80068c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     608:	e8 2a       	or	r14, r24
     60a:	f9 2a       	or	r15, r25
     60c:	fb 82       	std	Y+3, r15	; 0x03
     60e:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     614:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <xNumberOfSuccessfulAllocations>
     618:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <xNumberOfSuccessfulAllocations+0x1>
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	90 93 8b 06 	sts	0x068B, r25	; 0x80068b <xNumberOfSuccessfulAllocations+0x1>
     622:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     626:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     62a:	c1 14       	cp	r12, r1
     62c:	d1 04       	cpc	r13, r1
     62e:	59 f4       	brne	.+22     	; 0x646 <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     630:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <vApplicationMallocFailedHook>
     634:	c1 2c       	mov	r12, r1
     636:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
     638:	06 c0       	rjmp	.+12     	; 0x646 <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     63a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>
     63e:	f8 cf       	rjmp	.-16     	; 0x630 <pvPortMalloc+0x166>
     640:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>
     644:	f5 cf       	rjmp	.-22     	; 0x630 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     646:	c6 01       	movw	r24, r12
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	08 95       	ret

0000065a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	99 f1       	breq	.+102    	; 0x6c8 <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     662:	fc 01       	movw	r30, r24
     664:	34 97       	sbiw	r30, 0x04	; 4
     666:	22 81       	ldd	r18, Z+2	; 0x02
     668:	33 81       	ldd	r19, Z+3	; 0x03
     66a:	40 91 86 06 	lds	r20, 0x0686	; 0x800686 <__data_end>
     66e:	50 91 87 06 	lds	r21, 0x0687	; 0x800687 <__data_end+0x1>
     672:	b9 01       	movw	r22, r18
     674:	64 23       	and	r22, r20
     676:	75 23       	and	r23, r21
     678:	67 2b       	or	r22, r23
     67a:	31 f1       	breq	.+76     	; 0x6c8 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     67c:	60 81       	ld	r22, Z
     67e:	71 81       	ldd	r23, Z+1	; 0x01
     680:	67 2b       	or	r22, r23
     682:	11 f5       	brne	.+68     	; 0x6c8 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     684:	ef 01       	movw	r28, r30
     686:	40 95       	com	r20
     688:	50 95       	com	r21
     68a:	24 23       	and	r18, r20
     68c:	35 23       	and	r19, r21
     68e:	33 83       	std	Z+3, r19	; 0x03
     690:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     692:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     696:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <xFreeBytesRemaining>
     69a:	30 91 8f 06 	lds	r19, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	9b 81       	ldd	r25, Y+3	; 0x03
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     6aa:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6ae:	ce 01       	movw	r24, r28
     6b0:	bf de       	rcall	.-642    	; 0x430 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     6b2:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <xNumberOfSuccessfulFrees>
     6b6:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <xNumberOfSuccessfulFrees+0x1>
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <xNumberOfSuccessfulFrees+0x1>
     6c0:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6c4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6ce:	fc 01       	movw	r30, r24
     6d0:	03 96       	adiw	r24, 0x03	; 3
     6d2:	92 83       	std	Z+2, r25	; 0x02
     6d4:	81 83       	std	Z+1, r24	; 0x01
     6d6:	4f ef       	ldi	r20, 0xFF	; 255
     6d8:	5f ef       	ldi	r21, 0xFF	; 255
     6da:	ba 01       	movw	r22, r20
     6dc:	43 83       	std	Z+3, r20	; 0x03
     6de:	54 83       	std	Z+4, r21	; 0x04
     6e0:	65 83       	std	Z+5, r22	; 0x05
     6e2:	76 83       	std	Z+6, r23	; 0x06
     6e4:	90 87       	std	Z+8, r25	; 0x08
     6e6:	87 83       	std	Z+7, r24	; 0x07
     6e8:	92 87       	std	Z+10, r25	; 0x0a
     6ea:	81 87       	std	Z+9, r24	; 0x09
     6ec:	10 82       	st	Z, r1
     6ee:	08 95       	ret

000006f0 <vListInitialiseItem>:
     6f0:	fc 01       	movw	r30, r24
     6f2:	13 86       	std	Z+11, r1	; 0x0b
     6f4:	12 86       	std	Z+10, r1	; 0x0a
     6f6:	08 95       	ret

000006f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     702:	08 81       	ld	r16, Y
     704:	19 81       	ldd	r17, Y+1	; 0x01
     706:	2a 81       	ldd	r18, Y+2	; 0x02
     708:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     70a:	0f 3f       	cpi	r16, 0xFF	; 255
     70c:	4f ef       	ldi	r20, 0xFF	; 255
     70e:	14 07       	cpc	r17, r20
     710:	24 07       	cpc	r18, r20
     712:	34 07       	cpc	r19, r20
     714:	21 f4       	brne	.+8      	; 0x71e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     716:	fc 01       	movw	r30, r24
     718:	a1 85       	ldd	r26, Z+9	; 0x09
     71a:	b2 85       	ldd	r27, Z+10	; 0x0a
     71c:	11 c0       	rjmp	.+34     	; 0x740 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     71e:	dc 01       	movw	r26, r24
     720:	13 96       	adiw	r26, 0x03	; 3
     722:	01 c0       	rjmp	.+2      	; 0x726 <vListInsert+0x2e>
     724:	df 01       	movw	r26, r30
     726:	14 96       	adiw	r26, 0x04	; 4
     728:	ed 91       	ld	r30, X+
     72a:	fc 91       	ld	r31, X
     72c:	15 97       	sbiw	r26, 0x05	; 5
     72e:	40 81       	ld	r20, Z
     730:	51 81       	ldd	r21, Z+1	; 0x01
     732:	62 81       	ldd	r22, Z+2	; 0x02
     734:	73 81       	ldd	r23, Z+3	; 0x03
     736:	04 17       	cp	r16, r20
     738:	15 07       	cpc	r17, r21
     73a:	26 07       	cpc	r18, r22
     73c:	37 07       	cpc	r19, r23
     73e:	90 f7       	brcc	.-28     	; 0x724 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     740:	14 96       	adiw	r26, 0x04	; 4
     742:	ed 91       	ld	r30, X+
     744:	fc 91       	ld	r31, X
     746:	15 97       	sbiw	r26, 0x05	; 5
     748:	fd 83       	std	Y+5, r31	; 0x05
     74a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     74c:	d7 83       	std	Z+7, r29	; 0x07
     74e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     750:	bf 83       	std	Y+7, r27	; 0x07
     752:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     754:	15 96       	adiw	r26, 0x05	; 5
     756:	dc 93       	st	X, r29
     758:	ce 93       	st	-X, r28
     75a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     75c:	9b 87       	std	Y+11, r25	; 0x0b
     75e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     760:	fc 01       	movw	r30, r24
     762:	20 81       	ld	r18, Z
     764:	2f 5f       	subi	r18, 0xFF	; 255
     766:	20 83       	st	Z, r18
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	08 95       	ret

00000772 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     778:	a2 85       	ldd	r26, Z+10	; 0x0a
     77a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     77c:	c4 81       	ldd	r28, Z+4	; 0x04
     77e:	d5 81       	ldd	r29, Z+5	; 0x05
     780:	86 81       	ldd	r24, Z+6	; 0x06
     782:	97 81       	ldd	r25, Z+7	; 0x07
     784:	9f 83       	std	Y+7, r25	; 0x07
     786:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     788:	c6 81       	ldd	r28, Z+6	; 0x06
     78a:	d7 81       	ldd	r29, Z+7	; 0x07
     78c:	84 81       	ldd	r24, Z+4	; 0x04
     78e:	95 81       	ldd	r25, Z+5	; 0x05
     790:	9d 83       	std	Y+5, r25	; 0x05
     792:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	8d 91       	ld	r24, X+
     798:	9c 91       	ld	r25, X
     79a:	12 97       	sbiw	r26, 0x02	; 2
     79c:	e8 17       	cp	r30, r24
     79e:	f9 07       	cpc	r31, r25
     7a0:	31 f4       	brne	.+12     	; 0x7ae <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     7a2:	86 81       	ldd	r24, Z+6	; 0x06
     7a4:	97 81       	ldd	r25, Z+7	; 0x07
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	9c 93       	st	X, r25
     7aa:	8e 93       	st	-X, r24
     7ac:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     7ae:	13 86       	std	Z+11, r1	; 0x0b
     7b0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     7b2:	8c 91       	ld	r24, X
     7b4:	81 50       	subi	r24, 0x01	; 1
     7b6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     7b8:	8c 91       	ld	r24, X
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     7c0:	fc 01       	movw	r30, r24
     7c2:	60 83       	st	Z, r22
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	70 83       	st	Z, r23
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	10 82       	st	Z, r1
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	10 82       	st	Z, r1
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	20 e8       	ldi	r18, 0x80	; 128
     7d4:	20 83       	st	Z, r18
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	10 82       	st	Z, r1
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	10 82       	st	Z, r1
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	10 82       	st	Z, r1
     7e2:	77 97       	sbiw	r30, 0x17	; 23
     7e4:	40 83       	st	Z, r20
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	50 83       	st	Z, r21
     7ea:	86 97       	sbiw	r24, 0x26	; 38
     7ec:	08 95       	ret

000007ee <xPortStartScheduler>:
     7ee:	a8 95       	wdr
     7f0:	90 ec       	ldi	r25, 0xC0	; 192
     7f2:	88 e1       	ldi	r24, 0x18	; 24
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	a8 95       	wdr
     7fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     804:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     808:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     80c:	cd 91       	ld	r28, X+
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	dd 91       	ld	r29, X+
     812:	de bf       	out	0x3e, r29	; 62
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	bf 91       	pop	r27
     81e:	af 91       	pop	r26
     820:	9f 91       	pop	r25
     822:	8f 91       	pop	r24
     824:	7f 91       	pop	r23
     826:	6f 91       	pop	r22
     828:	5f 91       	pop	r21
     82a:	4f 91       	pop	r20
     82c:	3f 91       	pop	r19
     82e:	2f 91       	pop	r18
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	af 90       	pop	r10
     840:	9f 90       	pop	r9
     842:	8f 90       	pop	r8
     844:	7f 90       	pop	r7
     846:	6f 90       	pop	r6
     848:	5f 90       	pop	r5
     84a:	4f 90       	pop	r4
     84c:	3f 90       	pop	r3
     84e:	2f 90       	pop	r2
     850:	1f 90       	pop	r1
     852:	0f 90       	pop	r0
     854:	0c be       	out	0x3c, r0	; 60
     856:	0f 90       	pop	r0
     858:	0b be       	out	0x3b, r0	; 59
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	08 95       	ret
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	08 95       	ret

00000866 <vPortYield>:
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	0f 92       	push	r0
     86e:	0b b6       	in	r0, 0x3b	; 59
     870:	0f 92       	push	r0
     872:	0c b6       	in	r0, 0x3c	; 60
     874:	0f 92       	push	r0
     876:	1f 92       	push	r1
     878:	11 24       	eor	r1, r1
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	2f 93       	push	r18
     89c:	3f 93       	push	r19
     89e:	4f 93       	push	r20
     8a0:	5f 93       	push	r21
     8a2:	6f 93       	push	r22
     8a4:	7f 93       	push	r23
     8a6:	8f 93       	push	r24
     8a8:	9f 93       	push	r25
     8aa:	af 93       	push	r26
     8ac:	bf 93       	push	r27
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
     8b6:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     8ba:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     8be:	0d b6       	in	r0, 0x3d	; 61
     8c0:	0d 92       	st	X+, r0
     8c2:	0e b6       	in	r0, 0x3e	; 62
     8c4:	0d 92       	st	X+, r0
     8c6:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <vTaskSwitchContext>
     8ca:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     8ce:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     8d2:	cd 91       	ld	r28, X+
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	dd 91       	ld	r29, X+
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	bf 91       	pop	r27
     8e4:	af 91       	pop	r26
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	7f 91       	pop	r23
     8ec:	6f 91       	pop	r22
     8ee:	5f 91       	pop	r21
     8f0:	4f 91       	pop	r20
     8f2:	3f 91       	pop	r19
     8f4:	2f 91       	pop	r18
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	3f 90       	pop	r3
     914:	2f 90       	pop	r2
     916:	1f 90       	pop	r1
     918:	0f 90       	pop	r0
     91a:	0c be       	out	0x3c, r0	; 60
     91c:	0f 90       	pop	r0
     91e:	0b be       	out	0x3b, r0	; 59
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	08 95       	ret

00000928 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	0f 92       	push	r0
     930:	0b b6       	in	r0, 0x3b	; 59
     932:	0f 92       	push	r0
     934:	0c b6       	in	r0, 0x3c	; 60
     936:	0f 92       	push	r0
     938:	1f 92       	push	r1
     93a:	11 24       	eor	r1, r1
     93c:	2f 92       	push	r2
     93e:	3f 92       	push	r3
     940:	4f 92       	push	r4
     942:	5f 92       	push	r5
     944:	6f 92       	push	r6
     946:	7f 92       	push	r7
     948:	8f 92       	push	r8
     94a:	9f 92       	push	r9
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ef 93       	push	r30
     976:	ff 93       	push	r31
     978:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     97c:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     980:	0d b6       	in	r0, 0x3d	; 61
     982:	0d 92       	st	X+, r0
     984:	0e b6       	in	r0, 0x3e	; 62
     986:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     988:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     98a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <xTaskIncrementTick>
     98e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     990:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     994:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     998:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     99c:	cd 91       	ld	r28, X+
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	dd 91       	ld	r29, X+
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	bf 91       	pop	r27
     9ae:	af 91       	pop	r26
     9b0:	9f 91       	pop	r25
     9b2:	8f 91       	pop	r24
     9b4:	7f 91       	pop	r23
     9b6:	6f 91       	pop	r22
     9b8:	5f 91       	pop	r21
     9ba:	4f 91       	pop	r20
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	5f 90       	pop	r5
     9da:	4f 90       	pop	r4
     9dc:	3f 90       	pop	r3
     9de:	2f 90       	pop	r2
     9e0:	1f 90       	pop	r1
     9e2:	0f 90       	pop	r0
     9e4:	0c be       	out	0x3c, r0	; 60
     9e6:	0f 90       	pop	r0
     9e8:	0b be       	out	0x3b, r0	; 59
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9f0:	08 95       	ret

000009f2 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     9f2:	9a df       	rcall	.-204    	; 0x928 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     9f4:	18 95       	reti

000009f6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	0f 92       	push	r0
     9fc:	fc 01       	movw	r30, r24
     9fe:	96 8d       	ldd	r25, Z+30	; 0x1e
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	91 11       	cpse	r25, r1
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret

00000a0c <prvCopyDataToQueue>:
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
     a16:	04 2f       	mov	r16, r20
     a18:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a1a:	48 a1       	ldd	r20, Y+32	; 0x20
     a1c:	41 11       	cpse	r20, r1
     a1e:	0c c0       	rjmp	.+24     	; 0xa38 <prvCopyDataToQueue+0x2c>
     a20:	88 81       	ld	r24, Y
     a22:	99 81       	ldd	r25, Y+1	; 0x01
     a24:	89 2b       	or	r24, r25
     a26:	09 f0       	breq	.+2      	; 0xa2a <prvCopyDataToQueue+0x1e>
     a28:	42 c0       	rjmp	.+132    	; 0xaae <prvCopyDataToQueue+0xa2>
     a2a:	8c 81       	ldd	r24, Y+4	; 0x04
     a2c:	9d 81       	ldd	r25, Y+5	; 0x05
     a2e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <xTaskPriorityDisinherit>
     a32:	1d 82       	std	Y+5, r1	; 0x05
     a34:	1c 82       	std	Y+4, r1	; 0x04
     a36:	42 c0       	rjmp	.+132    	; 0xabc <prvCopyDataToQueue+0xb0>
     a38:	01 11       	cpse	r16, r1
     a3a:	17 c0       	rjmp	.+46     	; 0xa6a <prvCopyDataToQueue+0x5e>
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	9b 81       	ldd	r25, Y+3	; 0x03
     a42:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <memcpy>
     a46:	28 a1       	ldd	r18, Y+32	; 0x20
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	9b 81       	ldd	r25, Y+3	; 0x03
     a4c:	82 0f       	add	r24, r18
     a4e:	91 1d       	adc	r25, r1
     a50:	9b 83       	std	Y+3, r25	; 0x03
     a52:	8a 83       	std	Y+2, r24	; 0x02
     a54:	2c 81       	ldd	r18, Y+4	; 0x04
     a56:	3d 81       	ldd	r19, Y+5	; 0x05
     a58:	82 17       	cp	r24, r18
     a5a:	93 07       	cpc	r25, r19
     a5c:	50 f1       	brcs	.+84     	; 0xab2 <prvCopyDataToQueue+0xa6>
     a5e:	88 81       	ld	r24, Y
     a60:	99 81       	ldd	r25, Y+1	; 0x01
     a62:	9b 83       	std	Y+3, r25	; 0x03
     a64:	8a 83       	std	Y+2, r24	; 0x02
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	29 c0       	rjmp	.+82     	; 0xabc <prvCopyDataToQueue+0xb0>
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	8e 81       	ldd	r24, Y+6	; 0x06
     a6e:	9f 81       	ldd	r25, Y+7	; 0x07
     a70:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <memcpy>
     a74:	88 a1       	ldd	r24, Y+32	; 0x20
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	91 95       	neg	r25
     a7a:	81 95       	neg	r24
     a7c:	91 09       	sbc	r25, r1
     a7e:	2e 81       	ldd	r18, Y+6	; 0x06
     a80:	3f 81       	ldd	r19, Y+7	; 0x07
     a82:	28 0f       	add	r18, r24
     a84:	39 1f       	adc	r19, r25
     a86:	3f 83       	std	Y+7, r19	; 0x07
     a88:	2e 83       	std	Y+6, r18	; 0x06
     a8a:	48 81       	ld	r20, Y
     a8c:	59 81       	ldd	r21, Y+1	; 0x01
     a8e:	24 17       	cp	r18, r20
     a90:	35 07       	cpc	r19, r21
     a92:	30 f4       	brcc	.+12     	; 0xaa0 <prvCopyDataToQueue+0x94>
     a94:	2c 81       	ldd	r18, Y+4	; 0x04
     a96:	3d 81       	ldd	r19, Y+5	; 0x05
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	9f 83       	std	Y+7, r25	; 0x07
     a9e:	8e 83       	std	Y+6, r24	; 0x06
     aa0:	02 30       	cpi	r16, 0x02	; 2
     aa2:	49 f4       	brne	.+18     	; 0xab6 <prvCopyDataToQueue+0xaa>
     aa4:	11 23       	and	r17, r17
     aa6:	49 f0       	breq	.+18     	; 0xaba <prvCopyDataToQueue+0xae>
     aa8:	11 50       	subi	r17, 0x01	; 1
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	07 c0       	rjmp	.+14     	; 0xabc <prvCopyDataToQueue+0xb0>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <prvCopyDataToQueue+0xb0>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <prvCopyDataToQueue+0xb0>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <prvCopyDataToQueue+0xb0>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	1f 5f       	subi	r17, 0xFF	; 255
     abe:	1e 8f       	std	Y+30, r17	; 0x1e
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <prvCopyDataFromQueue>:
     aca:	fc 01       	movw	r30, r24
     acc:	40 a1       	ldd	r20, Z+32	; 0x20
     ace:	44 23       	and	r20, r20
     ad0:	a9 f0       	breq	.+42     	; 0xafc <prvCopyDataFromQueue+0x32>
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	26 81       	ldd	r18, Z+6	; 0x06
     ad6:	37 81       	ldd	r19, Z+7	; 0x07
     ad8:	24 0f       	add	r18, r20
     ada:	35 1f       	adc	r19, r21
     adc:	37 83       	std	Z+7, r19	; 0x07
     ade:	26 83       	std	Z+6, r18	; 0x06
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	95 81       	ldd	r25, Z+5	; 0x05
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	20 f0       	brcs	.+8      	; 0xaf2 <prvCopyDataFromQueue+0x28>
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	97 83       	std	Z+7, r25	; 0x07
     af0:	86 83       	std	Z+6, r24	; 0x06
     af2:	cb 01       	movw	r24, r22
     af4:	66 81       	ldd	r22, Z+6	; 0x06
     af6:	77 81       	ldd	r23, Z+7	; 0x07
     af8:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <memcpy>
     afc:	08 95       	ret

00000afe <prvUnlockQueue>:
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	8c 01       	movw	r16, r24
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	0f 92       	push	r0
     b10:	fc 01       	movw	r30, r24
     b12:	c2 a1       	ldd	r28, Z+34	; 0x22
     b14:	1c 16       	cp	r1, r28
     b16:	ac f4       	brge	.+42     	; 0xb42 <prvUnlockQueue+0x44>
     b18:	83 89       	ldd	r24, Z+19	; 0x13
     b1a:	81 11       	cpse	r24, r1
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <prvUnlockQueue+0x2c>
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <prvUnlockQueue+0x44>
     b20:	f8 01       	movw	r30, r16
     b22:	83 89       	ldd	r24, Z+19	; 0x13
     b24:	81 11       	cpse	r24, r1
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <prvUnlockQueue+0x34>
     b28:	0c c0       	rjmp	.+24     	; 0xb42 <prvUnlockQueue+0x44>
     b2a:	78 01       	movw	r14, r16
     b2c:	f3 e1       	ldi	r31, 0x13	; 19
     b2e:	ef 0e       	add	r14, r31
     b30:	f1 1c       	adc	r15, r1
     b32:	c7 01       	movw	r24, r14
     b34:	0e 94 a4 10 	call	0x2148	; 0x2148 <xTaskRemoveFromEventList>
     b38:	81 11       	cpse	r24, r1
     b3a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskMissedYield>
     b3e:	c1 50       	subi	r28, 0x01	; 1
     b40:	79 f7       	brne	.-34     	; 0xb20 <prvUnlockQueue+0x22>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	f8 01       	movw	r30, r16
     b46:	82 a3       	std	Z+34, r24	; 0x22
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	0f 92       	push	r0
     b52:	c1 a1       	ldd	r28, Z+33	; 0x21
     b54:	1c 16       	cp	r1, r28
     b56:	ac f4       	brge	.+42     	; 0xb82 <prvUnlockQueue+0x84>
     b58:	80 85       	ldd	r24, Z+8	; 0x08
     b5a:	81 11       	cpse	r24, r1
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <prvUnlockQueue+0x6c>
     b5e:	11 c0       	rjmp	.+34     	; 0xb82 <prvUnlockQueue+0x84>
     b60:	f8 01       	movw	r30, r16
     b62:	80 85       	ldd	r24, Z+8	; 0x08
     b64:	81 11       	cpse	r24, r1
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <prvUnlockQueue+0x74>
     b68:	0c c0       	rjmp	.+24     	; 0xb82 <prvUnlockQueue+0x84>
     b6a:	78 01       	movw	r14, r16
     b6c:	f8 e0       	ldi	r31, 0x08	; 8
     b6e:	ef 0e       	add	r14, r31
     b70:	f1 1c       	adc	r15, r1
     b72:	c7 01       	movw	r24, r14
     b74:	0e 94 a4 10 	call	0x2148	; 0x2148 <xTaskRemoveFromEventList>
     b78:	81 11       	cpse	r24, r1
     b7a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskMissedYield>
     b7e:	c1 50       	subi	r28, 0x01	; 1
     b80:	79 f7       	brne	.-34     	; 0xb60 <prvUnlockQueue+0x62>
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	f8 01       	movw	r30, r16
     b86:	81 a3       	std	Z+33, r24	; 0x21
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	08 95       	ret

00000b98 <xQueueGenericReset>:
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	0f 92       	push	r0
     ba4:	e8 81       	ld	r30, Y
     ba6:	f9 81       	ldd	r31, Y+1	; 0x01
     ba8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     baa:	28 a1       	ldd	r18, Y+32	; 0x20
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	82 9f       	mul	r24, r18
     bb2:	a0 01       	movw	r20, r0
     bb4:	83 9f       	mul	r24, r19
     bb6:	50 0d       	add	r21, r0
     bb8:	92 9f       	mul	r25, r18
     bba:	50 0d       	add	r21, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	4e 0f       	add	r20, r30
     bc0:	5f 1f       	adc	r21, r31
     bc2:	5d 83       	std	Y+5, r21	; 0x05
     bc4:	4c 83       	std	Y+4, r20	; 0x04
     bc6:	1e 8e       	std	Y+30, r1	; 0x1e
     bc8:	fb 83       	std	Y+3, r31	; 0x03
     bca:	ea 83       	std	Y+2, r30	; 0x02
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	82 9f       	mul	r24, r18
     bd0:	a0 01       	movw	r20, r0
     bd2:	83 9f       	mul	r24, r19
     bd4:	50 0d       	add	r21, r0
     bd6:	92 9f       	mul	r25, r18
     bd8:	50 0d       	add	r21, r0
     bda:	11 24       	eor	r1, r1
     bdc:	cf 01       	movw	r24, r30
     bde:	84 0f       	add	r24, r20
     be0:	95 1f       	adc	r25, r21
     be2:	9f 83       	std	Y+7, r25	; 0x07
     be4:	8e 83       	std	Y+6, r24	; 0x06
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	89 a3       	std	Y+33, r24	; 0x21
     bea:	8a a3       	std	Y+34, r24	; 0x22
     bec:	61 11       	cpse	r22, r1
     bee:	0b c0       	rjmp	.+22     	; 0xc06 <xQueueGenericReset+0x6e>
     bf0:	88 85       	ldd	r24, Y+8	; 0x08
     bf2:	88 23       	and	r24, r24
     bf4:	71 f0       	breq	.+28     	; 0xc12 <xQueueGenericReset+0x7a>
     bf6:	ce 01       	movw	r24, r28
     bf8:	08 96       	adiw	r24, 0x08	; 8
     bfa:	0e 94 a4 10 	call	0x2148	; 0x2148 <xTaskRemoveFromEventList>
     bfe:	88 23       	and	r24, r24
     c00:	41 f0       	breq	.+16     	; 0xc12 <xQueueGenericReset+0x7a>
     c02:	31 de       	rcall	.-926    	; 0x866 <vPortYield>
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <xQueueGenericReset+0x7a>
     c06:	ce 01       	movw	r24, r28
     c08:	08 96       	adiw	r24, 0x08	; 8
     c0a:	61 dd       	rcall	.-1342   	; 0x6ce <vListInitialise>
     c0c:	ce 01       	movw	r24, r28
     c0e:	43 96       	adiw	r24, 0x13	; 19
     c10:	5e dd       	rcall	.-1348   	; 0x6ce <vListInitialise>
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <xQueueGenericCreate>:
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	08 2f       	mov	r16, r24
     c28:	16 2f       	mov	r17, r22
     c2a:	86 9f       	mul	r24, r22
     c2c:	c0 01       	movw	r24, r0
     c2e:	11 24       	eor	r1, r1
     c30:	83 96       	adiw	r24, 0x23	; 35
     c32:	4b dc       	rcall	.-1898   	; 0x4ca <pvPortMalloc>
     c34:	ec 01       	movw	r28, r24
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	69 f0       	breq	.+26     	; 0xc54 <xQueueGenericCreate+0x36>
     c3a:	11 11       	cpse	r17, r1
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <xQueueGenericCreate+0x26>
     c3e:	99 83       	std	Y+1, r25	; 0x01
     c40:	88 83       	st	Y, r24
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <xQueueGenericCreate+0x2c>
     c44:	83 96       	adiw	r24, 0x23	; 35
     c46:	99 83       	std	Y+1, r25	; 0x01
     c48:	88 83       	st	Y, r24
     c4a:	0f 8f       	std	Y+31, r16	; 0x1f
     c4c:	18 a3       	std	Y+32, r17	; 0x20
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	ce 01       	movw	r24, r28
     c52:	a2 df       	rcall	.-188    	; 0xb98 <xQueueGenericReset>
     c54:	ce 01       	movw	r24, r28
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <xQueueGenericSend>:
     c60:	9f 92       	push	r9
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	29 97       	sbiw	r28, 0x09	; 9
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	7c 01       	movw	r14, r24
     c88:	5b 01       	movw	r10, r22
     c8a:	2e 83       	std	Y+6, r18	; 0x06
     c8c:	3f 83       	std	Y+7, r19	; 0x07
     c8e:	48 87       	std	Y+8, r20	; 0x08
     c90:	59 87       	std	Y+9, r21	; 0x09
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	99 24       	eor	r9, r9
     c96:	93 94       	inc	r9
     c98:	6c 01       	movw	r12, r24
     c9a:	88 e0       	ldi	r24, 0x08	; 8
     c9c:	c8 0e       	add	r12, r24
     c9e:	d1 1c       	adc	r13, r1
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	0f 92       	push	r0
     ca6:	f7 01       	movw	r30, r14
     ca8:	96 8d       	ldd	r25, Z+30	; 0x1e
     caa:	87 8d       	ldd	r24, Z+31	; 0x1f
     cac:	98 17       	cp	r25, r24
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <xQueueGenericSend+0x54>
     cb0:	02 30       	cpi	r16, 0x02	; 2
     cb2:	b1 f4       	brne	.+44     	; 0xce0 <xQueueGenericSend+0x80>
     cb4:	40 2f       	mov	r20, r16
     cb6:	b5 01       	movw	r22, r10
     cb8:	c7 01       	movw	r24, r14
     cba:	a8 de       	rcall	.-688    	; 0xa0c <prvCopyDataToQueue>
     cbc:	f7 01       	movw	r30, r14
     cbe:	93 89       	ldd	r25, Z+19	; 0x13
     cc0:	99 23       	and	r25, r25
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <xQueueGenericSend+0x74>
     cc4:	c7 01       	movw	r24, r14
     cc6:	43 96       	adiw	r24, 0x13	; 19
     cc8:	0e 94 a4 10 	call	0x2148	; 0x2148 <xTaskRemoveFromEventList>
     ccc:	88 23       	and	r24, r24
     cce:	21 f0       	breq	.+8      	; 0xcd8 <xQueueGenericSend+0x78>
     cd0:	ca dd       	rcall	.-1132   	; 0x866 <vPortYield>
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <xQueueGenericSend+0x78>
     cd4:	81 11       	cpse	r24, r1
     cd6:	c7 dd       	rcall	.-1138   	; 0x866 <vPortYield>
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	4e c0       	rjmp	.+156    	; 0xd7c <xQueueGenericSend+0x11c>
     ce0:	8e 81       	ldd	r24, Y+6	; 0x06
     ce2:	9f 81       	ldd	r25, Y+7	; 0x07
     ce4:	a8 85       	ldd	r26, Y+8	; 0x08
     ce6:	b9 85       	ldd	r27, Y+9	; 0x09
     ce8:	89 2b       	or	r24, r25
     cea:	8a 2b       	or	r24, r26
     cec:	8b 2b       	or	r24, r27
     cee:	21 f4       	brne	.+8      	; 0xcf8 <xQueueGenericSend+0x98>
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	42 c0       	rjmp	.+132    	; 0xd7c <xQueueGenericSend+0x11c>
     cf8:	11 11       	cpse	r17, r1
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <xQueueGenericSend+0xa6>
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <vTaskInternalSetTimeOutState>
     d04:	19 2d       	mov	r17, r9
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	a7 d6       	rcall	.+3406   	; 0x1a5a <vTaskSuspendAll>
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	0f 92       	push	r0
     d12:	f7 01       	movw	r30, r14
     d14:	81 a1       	ldd	r24, Z+33	; 0x21
     d16:	8f 3f       	cpi	r24, 0xFF	; 255
     d18:	09 f4       	brne	.+2      	; 0xd1c <xQueueGenericSend+0xbc>
     d1a:	11 a2       	std	Z+33, r1	; 0x21
     d1c:	f7 01       	movw	r30, r14
     d1e:	82 a1       	ldd	r24, Z+34	; 0x22
     d20:	8f 3f       	cpi	r24, 0xFF	; 255
     d22:	09 f4       	brne	.+2      	; 0xd26 <xQueueGenericSend+0xc6>
     d24:	12 a2       	std	Z+34, r1	; 0x22
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	be 01       	movw	r22, r28
     d2c:	6a 5f       	subi	r22, 0xFA	; 250
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskCheckForTimeOut>
     d38:	81 11       	cpse	r24, r1
     d3a:	1c c0       	rjmp	.+56     	; 0xd74 <xQueueGenericSend+0x114>
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	0f 92       	push	r0
     d42:	f7 01       	movw	r30, r14
     d44:	96 8d       	ldd	r25, Z+30	; 0x1e
     d46:	87 8d       	ldd	r24, Z+31	; 0x1f
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	98 13       	cpse	r25, r24
     d4e:	0e c0       	rjmp	.+28     	; 0xd6c <xQueueGenericSend+0x10c>
     d50:	4e 81       	ldd	r20, Y+6	; 0x06
     d52:	5f 81       	ldd	r21, Y+7	; 0x07
     d54:	68 85       	ldd	r22, Y+8	; 0x08
     d56:	79 85       	ldd	r23, Y+9	; 0x09
     d58:	c6 01       	movw	r24, r12
     d5a:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskPlaceOnEventList>
     d5e:	c7 01       	movw	r24, r14
     d60:	ce de       	rcall	.-612    	; 0xafe <prvUnlockQueue>
     d62:	bf d7       	rcall	.+3966   	; 0x1ce2 <xTaskResumeAll>
     d64:	81 11       	cpse	r24, r1
     d66:	9c cf       	rjmp	.-200    	; 0xca0 <xQueueGenericSend+0x40>
     d68:	7e dd       	rcall	.-1284   	; 0x866 <vPortYield>
     d6a:	9a cf       	rjmp	.-204    	; 0xca0 <xQueueGenericSend+0x40>
     d6c:	c7 01       	movw	r24, r14
     d6e:	c7 de       	rcall	.-626    	; 0xafe <prvUnlockQueue>
     d70:	b8 d7       	rcall	.+3952   	; 0x1ce2 <xTaskResumeAll>
     d72:	96 cf       	rjmp	.-212    	; 0xca0 <xQueueGenericSend+0x40>
     d74:	c7 01       	movw	r24, r14
     d76:	c3 de       	rcall	.-634    	; 0xafe <prvUnlockQueue>
     d78:	b4 d7       	rcall	.+3944   	; 0x1ce2 <xTaskResumeAll>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	29 96       	adiw	r28, 0x09	; 9
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	bf 90       	pop	r11
     d9a:	af 90       	pop	r10
     d9c:	9f 90       	pop	r9
     d9e:	08 95       	ret

00000da0 <xQueueCreateMutex>:
     da0:	0f 93       	push	r16
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	48 2f       	mov	r20, r24
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	38 df       	rcall	.-400    	; 0xc1e <xQueueGenericCreate>
     dae:	ec 01       	movw	r28, r24
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	61 f0       	breq	.+24     	; 0xdcc <xQueueCreateMutex+0x2c>
     db4:	1d 82       	std	Y+5, r1	; 0x05
     db6:	1c 82       	std	Y+4, r1	; 0x04
     db8:	19 82       	std	Y+1, r1	; 0x01
     dba:	18 82       	st	Y, r1
     dbc:	1e 82       	std	Y+6, r1	; 0x06
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	a9 01       	movw	r20, r18
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	4a df       	rcall	.-364    	; 0xc60 <xQueueGenericSend>
     dcc:	ce 01       	movw	r24, r28
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <xQueueGenericSendFromISR>:
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	8a 01       	movw	r16, r20
     de4:	fc 01       	movw	r30, r24
     de6:	56 8d       	ldd	r21, Z+30	; 0x1e
     de8:	37 8d       	ldd	r19, Z+31	; 0x1f
     dea:	53 17       	cp	r21, r19
     dec:	10 f0       	brcs	.+4      	; 0xdf2 <xQueueGenericSendFromISR+0x1c>
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	f9 f4       	brne	.+62     	; 0xe30 <xQueueGenericSendFromISR+0x5a>
     df2:	42 2f       	mov	r20, r18
     df4:	78 01       	movw	r14, r16
     df6:	ec 01       	movw	r28, r24
     df8:	1a a1       	ldd	r17, Y+34	; 0x22
     dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfc:	ce 01       	movw	r24, r28
     dfe:	06 de       	rcall	.-1012   	; 0xa0c <prvCopyDataToQueue>
     e00:	1f 3f       	cpi	r17, 0xFF	; 255
     e02:	81 f4       	brne	.+32     	; 0xe24 <xQueueGenericSendFromISR+0x4e>
     e04:	8b 89       	ldd	r24, Y+19	; 0x13
     e06:	88 23       	and	r24, r24
     e08:	a9 f0       	breq	.+42     	; 0xe34 <xQueueGenericSendFromISR+0x5e>
     e0a:	ce 01       	movw	r24, r28
     e0c:	43 96       	adiw	r24, 0x13	; 19
     e0e:	0e 94 a4 10 	call	0x2148	; 0x2148 <xTaskRemoveFromEventList>
     e12:	88 23       	and	r24, r24
     e14:	89 f0       	breq	.+34     	; 0xe38 <xQueueGenericSendFromISR+0x62>
     e16:	e1 14       	cp	r14, r1
     e18:	f1 04       	cpc	r15, r1
     e1a:	81 f0       	breq	.+32     	; 0xe3c <xQueueGenericSendFromISR+0x66>
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	f7 01       	movw	r30, r14
     e20:	80 83       	st	Z, r24
     e22:	0d c0       	rjmp	.+26     	; 0xe3e <xQueueGenericSendFromISR+0x68>
     e24:	ff 24       	eor	r15, r15
     e26:	f3 94       	inc	r15
     e28:	f1 0e       	add	r15, r17
     e2a:	fa a2       	std	Y+34, r15	; 0x22
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <xQueueGenericSendFromISR+0x68>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <xQueueGenericSendFromISR+0x68>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <xQueueGenericSendFromISR+0x68>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <xQueueGenericSendFromISR+0x68>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <xQueueReceive>:
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	29 97       	sbiw	r28, 0x09	; 9
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	8c 01       	movw	r16, r24
     e74:	5b 01       	movw	r10, r22
     e76:	2e 83       	std	Y+6, r18	; 0x06
     e78:	3f 83       	std	Y+7, r19	; 0x07
     e7a:	48 87       	std	Y+8, r20	; 0x08
     e7c:	59 87       	std	Y+9, r21	; 0x09
     e7e:	e1 2c       	mov	r14, r1
     e80:	99 24       	eor	r9, r9
     e82:	93 94       	inc	r9
     e84:	6c 01       	movw	r12, r24
     e86:	83 e1       	ldi	r24, 0x13	; 19
     e88:	c8 0e       	add	r12, r24
     e8a:	d1 1c       	adc	r13, r1
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	0f 92       	push	r0
     e92:	f8 01       	movw	r30, r16
     e94:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e96:	ff 20       	and	r15, r15
     e98:	99 f0       	breq	.+38     	; 0xec0 <xQueueReceive+0x74>
     e9a:	b5 01       	movw	r22, r10
     e9c:	c8 01       	movw	r24, r16
     e9e:	15 de       	rcall	.-982    	; 0xaca <prvCopyDataFromQueue>
     ea0:	fa 94       	dec	r15
     ea2:	f8 01       	movw	r30, r16
     ea4:	f6 8e       	std	Z+30, r15	; 0x1e
     ea6:	80 85       	ldd	r24, Z+8	; 0x08
     ea8:	88 23       	and	r24, r24
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <xQueueReceive+0x6c>
     eac:	c8 01       	movw	r24, r16
     eae:	08 96       	adiw	r24, 0x08	; 8
     eb0:	0e 94 a4 10 	call	0x2148	; 0x2148 <xTaskRemoveFromEventList>
     eb4:	81 11       	cpse	r24, r1
     eb6:	d7 dc       	rcall	.-1618   	; 0x866 <vPortYield>
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	4d c0       	rjmp	.+154    	; 0xf5a <xQueueReceive+0x10e>
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	a8 85       	ldd	r26, Y+8	; 0x08
     ec6:	b9 85       	ldd	r27, Y+9	; 0x09
     ec8:	89 2b       	or	r24, r25
     eca:	8a 2b       	or	r24, r26
     ecc:	8b 2b       	or	r24, r27
     ece:	21 f4       	brne	.+8      	; 0xed8 <xQueueReceive+0x8c>
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	41 c0       	rjmp	.+130    	; 0xf5a <xQueueReceive+0x10e>
     ed8:	e1 10       	cpse	r14, r1
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <xQueueReceive+0x9a>
     edc:	ce 01       	movw	r24, r28
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <vTaskInternalSetTimeOutState>
     ee4:	e9 2c       	mov	r14, r9
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	b7 d5       	rcall	.+2926   	; 0x1a5a <vTaskSuspendAll>
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	0f 92       	push	r0
     ef2:	f8 01       	movw	r30, r16
     ef4:	81 a1       	ldd	r24, Z+33	; 0x21
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	09 f4       	brne	.+2      	; 0xefc <xQueueReceive+0xb0>
     efa:	11 a2       	std	Z+33, r1	; 0x21
     efc:	f8 01       	movw	r30, r16
     efe:	82 a1       	ldd	r24, Z+34	; 0x22
     f00:	8f 3f       	cpi	r24, 0xFF	; 255
     f02:	09 f4       	brne	.+2      	; 0xf06 <xQueueReceive+0xba>
     f04:	12 a2       	std	Z+34, r1	; 0x22
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	be 01       	movw	r22, r28
     f0c:	6a 5f       	subi	r22, 0xFA	; 250
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskCheckForTimeOut>
     f18:	81 11       	cpse	r24, r1
     f1a:	16 c0       	rjmp	.+44     	; 0xf48 <xQueueReceive+0xfc>
     f1c:	c8 01       	movw	r24, r16
     f1e:	6b dd       	rcall	.-1322   	; 0x9f6 <prvIsQueueEmpty>
     f20:	88 23       	and	r24, r24
     f22:	71 f0       	breq	.+28     	; 0xf40 <xQueueReceive+0xf4>
     f24:	4e 81       	ldd	r20, Y+6	; 0x06
     f26:	5f 81       	ldd	r21, Y+7	; 0x07
     f28:	68 85       	ldd	r22, Y+8	; 0x08
     f2a:	79 85       	ldd	r23, Y+9	; 0x09
     f2c:	c6 01       	movw	r24, r12
     f2e:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskPlaceOnEventList>
     f32:	c8 01       	movw	r24, r16
     f34:	e4 dd       	rcall	.-1080   	; 0xafe <prvUnlockQueue>
     f36:	d5 d6       	rcall	.+3498   	; 0x1ce2 <xTaskResumeAll>
     f38:	81 11       	cpse	r24, r1
     f3a:	a8 cf       	rjmp	.-176    	; 0xe8c <xQueueReceive+0x40>
     f3c:	94 dc       	rcall	.-1752   	; 0x866 <vPortYield>
     f3e:	a6 cf       	rjmp	.-180    	; 0xe8c <xQueueReceive+0x40>
     f40:	c8 01       	movw	r24, r16
     f42:	dd dd       	rcall	.-1094   	; 0xafe <prvUnlockQueue>
     f44:	ce d6       	rcall	.+3484   	; 0x1ce2 <xTaskResumeAll>
     f46:	a2 cf       	rjmp	.-188    	; 0xe8c <xQueueReceive+0x40>
     f48:	c8 01       	movw	r24, r16
     f4a:	d9 dd       	rcall	.-1102   	; 0xafe <prvUnlockQueue>
     f4c:	ca d6       	rcall	.+3476   	; 0x1ce2 <xTaskResumeAll>
     f4e:	c8 01       	movw	r24, r16
     f50:	52 dd       	rcall	.-1372   	; 0x9f6 <prvIsQueueEmpty>
     f52:	88 23       	and	r24, r24
     f54:	09 f4       	brne	.+2      	; 0xf58 <xQueueReceive+0x10c>
     f56:	9a cf       	rjmp	.-204    	; 0xe8c <xQueueReceive+0x40>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	29 96       	adiw	r28, 0x09	; 9
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	9f 90       	pop	r9
     f7c:	08 95       	ret

00000f7e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	0f 92       	push	r0
     f8a:	89 a1       	ldd	r24, Y+33	; 0x21
     f8c:	8f 3f       	cpi	r24, 0xFF	; 255
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vQueueWaitForMessageRestricted+0x14>
     f90:	19 a2       	std	Y+33, r1	; 0x21
     f92:	8a a1       	ldd	r24, Y+34	; 0x22
     f94:	8f 3f       	cpi	r24, 0xFF	; 255
     f96:	09 f4       	brne	.+2      	; 0xf9a <vQueueWaitForMessageRestricted+0x1c>
     f98:	1a a2       	std	Y+34, r1	; 0x22
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa0:	81 11       	cpse	r24, r1
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fa4:	ce 01       	movw	r24, r28
     fa6:	43 96       	adiw	r24, 0x13	; 19
     fa8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     fac:	ce 01       	movw	r24, r28
     fae:	a7 dd       	rcall	.-1202   	; 0xafe <prvUnlockQueue>
    }
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     fb6:	fc 01       	movw	r30, r24
     fb8:	44 81       	ldd	r20, Z+4	; 0x04
     fba:	55 81       	ldd	r21, Z+5	; 0x05
     fbc:	22 81       	ldd	r18, Z+2	; 0x02
     fbe:	33 81       	ldd	r19, Z+3	; 0x03
     fc0:	24 0f       	add	r18, r20
     fc2:	35 1f       	adc	r19, r21
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	b9 01       	movw	r22, r18
     fca:	68 1b       	sub	r22, r24
     fcc:	79 0b       	sbc	r23, r25
     fce:	cb 01       	movw	r24, r22
     fd0:	64 17       	cp	r22, r20
     fd2:	75 07       	cpc	r23, r21
     fd4:	10 f0       	brcs	.+4      	; 0xfda <prvBytesInBuffer+0x24>
     fd6:	84 1b       	sub	r24, r20
     fd8:	95 0b       	sbc	r25, r21
     fda:	08 95       	ret

00000fdc <prvWriteBytesToBuffer>:
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	6c 01       	movw	r12, r24
     ff2:	5b 01       	movw	r10, r22
     ff4:	7a 01       	movw	r14, r20
     ff6:	fc 01       	movw	r30, r24
     ff8:	c2 81       	ldd	r28, Z+2	; 0x02
     ffa:	d3 81       	ldd	r29, Z+3	; 0x03
     ffc:	04 81       	ldd	r16, Z+4	; 0x04
     ffe:	15 81       	ldd	r17, Z+5	; 0x05
    1000:	0c 1b       	sub	r16, r28
    1002:	1d 0b       	sbc	r17, r29
    1004:	40 17       	cp	r20, r16
    1006:	51 07       	cpc	r21, r17
    1008:	08 f4       	brcc	.+2      	; 0x100c <prvWriteBytesToBuffer+0x30>
    100a:	8a 01       	movw	r16, r20
    100c:	f6 01       	movw	r30, r12
    100e:	84 85       	ldd	r24, Z+12	; 0x0c
    1010:	95 85       	ldd	r25, Z+13	; 0x0d
    1012:	a8 01       	movw	r20, r16
    1014:	b5 01       	movw	r22, r10
    1016:	8c 0f       	add	r24, r28
    1018:	9d 1f       	adc	r25, r29
    101a:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <memcpy>
    101e:	0e 15       	cp	r16, r14
    1020:	1f 05       	cpc	r17, r15
    1022:	58 f4       	brcc	.+22     	; 0x103a <prvWriteBytesToBuffer+0x5e>
    1024:	a7 01       	movw	r20, r14
    1026:	40 1b       	sub	r20, r16
    1028:	51 0b       	sbc	r21, r17
    102a:	b5 01       	movw	r22, r10
    102c:	60 0f       	add	r22, r16
    102e:	71 1f       	adc	r23, r17
    1030:	f6 01       	movw	r30, r12
    1032:	84 85       	ldd	r24, Z+12	; 0x0c
    1034:	95 85       	ldd	r25, Z+13	; 0x0d
    1036:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <memcpy>
    103a:	ce 01       	movw	r24, r28
    103c:	8e 0d       	add	r24, r14
    103e:	9f 1d       	adc	r25, r15
    1040:	f6 01       	movw	r30, r12
    1042:	24 81       	ldd	r18, Z+4	; 0x04
    1044:	35 81       	ldd	r19, Z+5	; 0x05
    1046:	82 17       	cp	r24, r18
    1048:	93 07       	cpc	r25, r19
    104a:	10 f0       	brcs	.+4      	; 0x1050 <prvWriteBytesToBuffer+0x74>
    104c:	82 1b       	sub	r24, r18
    104e:	93 0b       	sbc	r25, r19
    1050:	f6 01       	movw	r30, r12
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	c7 01       	movw	r24, r14
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	08 95       	ret

0000106e <prvWriteMessageToBuffer>:
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	1f 92       	push	r1
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	5a 83       	std	Y+2, r21	; 0x02
    1088:	49 83       	std	Y+1, r20	; 0x01
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	c9 f0       	breq	.+50     	; 0x10c2 <prvWriteMessageToBuffer+0x54>
    1090:	6b 01       	movw	r12, r22
    1092:	7c 01       	movw	r14, r24
    1094:	fc 01       	movw	r30, r24
    1096:	86 85       	ldd	r24, Z+14	; 0x0e
    1098:	80 fd       	sbrc	r24, 0
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <prvWriteMessageToBuffer+0x3e>
    109c:	ca 01       	movw	r24, r20
    109e:	24 17       	cp	r18, r20
    10a0:	35 07       	cpc	r19, r21
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <prvWriteMessageToBuffer+0x38>
    10a4:	c9 01       	movw	r24, r18
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	11 c0       	rjmp	.+34     	; 0x10ce <prvWriteMessageToBuffer+0x60>
    10ac:	20 17       	cp	r18, r16
    10ae:	31 07       	cpc	r19, r17
    10b0:	58 f0       	brcs	.+22     	; 0x10c8 <prvWriteMessageToBuffer+0x5a>
    10b2:	42 e0       	ldi	r20, 0x02	; 2
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	c7 01       	movw	r24, r14
    10be:	8e df       	rcall	.-228    	; 0xfdc <prvWriteBytesToBuffer>
    10c0:	06 c0       	rjmp	.+12     	; 0x10ce <prvWriteMessageToBuffer+0x60>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <prvWriteMessageToBuffer+0x6a>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <prvWriteMessageToBuffer+0x6a>
    10ce:	49 81       	ldd	r20, Y+1	; 0x01
    10d0:	5a 81       	ldd	r21, Y+2	; 0x02
    10d2:	b6 01       	movw	r22, r12
    10d4:	c7 01       	movw	r24, r14
    10d6:	82 df       	rcall	.-252    	; 0xfdc <prvWriteBytesToBuffer>
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	08 95       	ret

000010ee <prvReadBytesFromBuffer>:
    10ee:	af 92       	push	r10
    10f0:	bf 92       	push	r11
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	7c 01       	movw	r14, r24
    1104:	5b 01       	movw	r10, r22
    1106:	e9 01       	movw	r28, r18
    1108:	42 17       	cp	r20, r18
    110a:	53 07       	cpc	r21, r19
    110c:	08 f4       	brcc	.+2      	; 0x1110 <prvReadBytesFromBuffer+0x22>
    110e:	ea 01       	movw	r28, r20
    1110:	20 97       	sbiw	r28, 0x00	; 0
    1112:	79 f1       	breq	.+94     	; 0x1172 <prvReadBytesFromBuffer+0x84>
    1114:	f7 01       	movw	r30, r14
    1116:	00 81       	ld	r16, Z
    1118:	11 81       	ldd	r17, Z+1	; 0x01
    111a:	c4 80       	ldd	r12, Z+4	; 0x04
    111c:	d5 80       	ldd	r13, Z+5	; 0x05
    111e:	c0 1a       	sub	r12, r16
    1120:	d1 0a       	sbc	r13, r17
    1122:	cc 15       	cp	r28, r12
    1124:	dd 05       	cpc	r29, r13
    1126:	08 f4       	brcc	.+2      	; 0x112a <prvReadBytesFromBuffer+0x3c>
    1128:	6e 01       	movw	r12, r28
    112a:	f7 01       	movw	r30, r14
    112c:	64 85       	ldd	r22, Z+12	; 0x0c
    112e:	75 85       	ldd	r23, Z+13	; 0x0d
    1130:	60 0f       	add	r22, r16
    1132:	71 1f       	adc	r23, r17
    1134:	a6 01       	movw	r20, r12
    1136:	c5 01       	movw	r24, r10
    1138:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <memcpy>
    113c:	cc 16       	cp	r12, r28
    113e:	dd 06       	cpc	r13, r29
    1140:	58 f4       	brcc	.+22     	; 0x1158 <prvReadBytesFromBuffer+0x6a>
    1142:	ae 01       	movw	r20, r28
    1144:	4c 19       	sub	r20, r12
    1146:	5d 09       	sbc	r21, r13
    1148:	f7 01       	movw	r30, r14
    114a:	64 85       	ldd	r22, Z+12	; 0x0c
    114c:	75 85       	ldd	r23, Z+13	; 0x0d
    114e:	c5 01       	movw	r24, r10
    1150:	8c 0d       	add	r24, r12
    1152:	9d 1d       	adc	r25, r13
    1154:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <memcpy>
    1158:	0c 0f       	add	r16, r28
    115a:	1d 1f       	adc	r17, r29
    115c:	f7 01       	movw	r30, r14
    115e:	84 81       	ldd	r24, Z+4	; 0x04
    1160:	95 81       	ldd	r25, Z+5	; 0x05
    1162:	08 17       	cp	r16, r24
    1164:	19 07       	cpc	r17, r25
    1166:	10 f0       	brcs	.+4      	; 0x116c <prvReadBytesFromBuffer+0x7e>
    1168:	08 1b       	sub	r16, r24
    116a:	19 0b       	sbc	r17, r25
    116c:	f7 01       	movw	r30, r14
    116e:	11 83       	std	Z+1, r17	; 0x01
    1170:	00 83       	st	Z, r16
    1172:	ce 01       	movw	r24, r28
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	08 95       	ret

0000118a <xStreamBufferGenericCreate>:
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	8b 01       	movw	r16, r22
    1196:	ff 24       	eor	r15, r15
    1198:	f3 94       	inc	r15
    119a:	41 30       	cpi	r20, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <xStreamBufferGenericCreate+0x16>
    119e:	f1 2c       	mov	r15, r1
    11a0:	01 15       	cp	r16, r1
    11a2:	11 05       	cpc	r17, r1
    11a4:	11 f4       	brne	.+4      	; 0x11aa <xStreamBufferGenericCreate+0x20>
    11a6:	01 e0       	ldi	r16, 0x01	; 1
    11a8:	10 e0       	ldi	r17, 0x00	; 0
    11aa:	9c 01       	movw	r18, r24
    11ac:	20 5f       	subi	r18, 0xF0	; 240
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	82 17       	cp	r24, r18
    11b2:	93 07       	cpc	r25, r19
    11b4:	b0 f4       	brcc	.+44     	; 0x11e2 <xStreamBufferGenericCreate+0x58>
    11b6:	ec 01       	movw	r28, r24
    11b8:	21 96       	adiw	r28, 0x01	; 1
    11ba:	c9 01       	movw	r24, r18
    11bc:	86 d9       	rcall	.-3316   	; 0x4ca <pvPortMalloc>
    11be:	fc 01       	movw	r30, r24
    11c0:	89 2b       	or	r24, r25
    11c2:	89 f0       	breq	.+34     	; 0x11e6 <xStreamBufferGenericCreate+0x5c>
    11c4:	8f e0       	ldi	r24, 0x0F	; 15
    11c6:	df 01       	movw	r26, r30
    11c8:	1d 92       	st	X+, r1
    11ca:	8a 95       	dec	r24
    11cc:	e9 f7       	brne	.-6      	; 0x11c8 <xStreamBufferGenericCreate+0x3e>
    11ce:	cf 01       	movw	r24, r30
    11d0:	0f 96       	adiw	r24, 0x0f	; 15
    11d2:	95 87       	std	Z+13, r25	; 0x0d
    11d4:	84 87       	std	Z+12, r24	; 0x0c
    11d6:	d5 83       	std	Z+5, r29	; 0x05
    11d8:	c4 83       	std	Z+4, r28	; 0x04
    11da:	17 83       	std	Z+7, r17	; 0x07
    11dc:	06 83       	std	Z+6, r16	; 0x06
    11de:	f6 86       	std	Z+14, r15	; 0x0e
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <xStreamBufferGenericCreate+0x5c>
    11e2:	e0 e0       	ldi	r30, 0x00	; 0
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	cf 01       	movw	r24, r30
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	08 95       	ret

000011f4 <xStreamBufferReset>:
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	0f 92       	push	r0
    11fa:	dc 01       	movw	r26, r24
    11fc:	18 96       	adiw	r26, 0x08	; 8
    11fe:	2d 91       	ld	r18, X+
    1200:	3c 91       	ld	r19, X
    1202:	19 97       	sbiw	r26, 0x09	; 9
    1204:	23 2b       	or	r18, r19
    1206:	51 f5       	brne	.+84     	; 0x125c <xStreamBufferReset+0x68>
    1208:	1a 96       	adiw	r26, 0x0a	; 10
    120a:	2d 91       	ld	r18, X+
    120c:	3c 91       	ld	r19, X
    120e:	1b 97       	sbiw	r26, 0x0b	; 11
    1210:	23 2b       	or	r18, r19
    1212:	31 f5       	brne	.+76     	; 0x1260 <xStreamBufferReset+0x6c>
    1214:	1e 96       	adiw	r26, 0x0e	; 14
    1216:	2c 91       	ld	r18, X
    1218:	1e 97       	sbiw	r26, 0x0e	; 14
    121a:	16 96       	adiw	r26, 0x06	; 6
    121c:	4d 91       	ld	r20, X+
    121e:	5c 91       	ld	r21, X
    1220:	17 97       	sbiw	r26, 0x07	; 7
    1222:	14 96       	adiw	r26, 0x04	; 4
    1224:	6d 91       	ld	r22, X+
    1226:	7c 91       	ld	r23, X
    1228:	15 97       	sbiw	r26, 0x05	; 5
    122a:	1c 96       	adiw	r26, 0x0c	; 12
    122c:	ed 91       	ld	r30, X+
    122e:	fc 91       	ld	r31, X
    1230:	1d 97       	sbiw	r26, 0x0d	; 13
    1232:	3f e0       	ldi	r19, 0x0F	; 15
    1234:	1d 92       	st	X+, r1
    1236:	3a 95       	dec	r19
    1238:	e9 f7       	brne	.-6      	; 0x1234 <xStreamBufferReset+0x40>
    123a:	dc 01       	movw	r26, r24
    123c:	1d 96       	adiw	r26, 0x0d	; 13
    123e:	fc 93       	st	X, r31
    1240:	ee 93       	st	-X, r30
    1242:	1c 97       	sbiw	r26, 0x0c	; 12
    1244:	15 96       	adiw	r26, 0x05	; 5
    1246:	7c 93       	st	X, r23
    1248:	6e 93       	st	-X, r22
    124a:	14 97       	sbiw	r26, 0x04	; 4
    124c:	17 96       	adiw	r26, 0x07	; 7
    124e:	5c 93       	st	X, r21
    1250:	4e 93       	st	-X, r20
    1252:	16 97       	sbiw	r26, 0x06	; 6
    1254:	1e 96       	adiw	r26, 0x0e	; 14
    1256:	2c 93       	st	X, r18
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <xStreamBufferReset+0x6e>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <xStreamBufferReset+0x6e>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	08 95       	ret

00001268 <xStreamBufferSpacesAvailable>:
    1268:	fc 01       	movw	r30, r24
    126a:	24 81       	ldd	r18, Z+4	; 0x04
    126c:	35 81       	ldd	r19, Z+5	; 0x05
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	42 81       	ldd	r20, Z+2	; 0x02
    1274:	53 81       	ldd	r21, Z+3	; 0x03
    1276:	82 0f       	add	r24, r18
    1278:	93 1f       	adc	r25, r19
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	84 1b       	sub	r24, r20
    127e:	95 0b       	sbc	r25, r21
    1280:	82 17       	cp	r24, r18
    1282:	93 07       	cpc	r25, r19
    1284:	10 f0       	brcs	.+4      	; 0x128a <xStreamBufferSpacesAvailable+0x22>
    1286:	82 1b       	sub	r24, r18
    1288:	93 0b       	sbc	r25, r19
    128a:	08 95       	ret

0000128c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    128c:	2f 92       	push	r2
    128e:	3f 92       	push	r3
    1290:	4f 92       	push	r4
    1292:	5f 92       	push	r5
    1294:	6f 92       	push	r6
    1296:	7f 92       	push	r7
    1298:	8f 92       	push	r8
    129a:	9f 92       	push	r9
    129c:	af 92       	push	r10
    129e:	bf 92       	push	r11
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	2b 97       	sbiw	r28, 0x0b	; 11
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	4c 01       	movw	r8, r24
    12c2:	7b 87       	std	Y+11, r23	; 0x0b
    12c4:	6a 87       	std	Y+10, r22	; 0x0a
    12c6:	1a 01       	movw	r2, r20
    12c8:	0e 83       	std	Y+6, r16	; 0x06
    12ca:	1f 83       	std	Y+7, r17	; 0x07
    12cc:	28 87       	std	Y+8, r18	; 0x08
    12ce:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    12d0:	fc 01       	movw	r30, r24
    12d2:	84 81       	ldd	r24, Z+4	; 0x04
    12d4:	95 81       	ldd	r25, Z+5	; 0x05
    12d6:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12d8:	26 85       	ldd	r18, Z+14	; 0x0e
    12da:	20 ff       	sbrs	r18, 0
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12de:	2a 01       	movw	r4, r20
    12e0:	f2 e0       	ldi	r31, 0x02	; 2
    12e2:	4f 0e       	add	r4, r31
    12e4:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    12e6:	84 15       	cp	r24, r4
    12e8:	95 05       	cpc	r25, r5
    12ea:	50 f4       	brcc	.+20     	; 0x1300 <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    12ec:	1e 82       	std	Y+6, r1	; 0x06
    12ee:	1f 82       	std	Y+7, r1	; 0x07
    12f0:	18 86       	std	Y+8, r1	; 0x08
    12f2:	19 86       	std	Y+9, r1	; 0x09
    12f4:	46 c0       	rjmp	.+140    	; 0x1382 <xStreamBufferSend+0xf6>
    12f6:	2a 01       	movw	r4, r20
    12f8:	84 17       	cp	r24, r20
    12fa:	95 07       	cpc	r25, r21
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <xStreamBufferSend+0x74>
    12fe:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	a8 85       	ldd	r26, Y+8	; 0x08
    1306:	b9 85       	ldd	r27, Y+9	; 0x09
    1308:	89 2b       	or	r24, r25
    130a:	8a 2b       	or	r24, r26
    130c:	8b 2b       	or	r24, r27
    130e:	09 f4       	brne	.+2      	; 0x1312 <xStreamBufferSend+0x86>
    1310:	38 c0       	rjmp	.+112    	; 0x1382 <xStreamBufferSend+0xf6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	c8 d7       	rcall	.+3984   	; 0x22a8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    131e:	c4 01       	movw	r24, r8
    1320:	a3 df       	rcall	.-186    	; 0x1268 <xStreamBufferSpacesAvailable>
    1322:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1324:	84 15       	cp	r24, r4
    1326:	95 05       	cpc	r25, r5
    1328:	38 f5       	brcc	.+78     	; 0x1378 <xStreamBufferSend+0xec>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1334:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <xTaskGetCurrentTaskHandle>
    1338:	f4 01       	movw	r30, r8
    133a:	93 87       	std	Z+11, r25	; 0x0b
    133c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1342:	ae 80       	ldd	r10, Y+6	; 0x06
    1344:	bf 80       	ldd	r11, Y+7	; 0x07
    1346:	c8 84       	ldd	r12, Y+8	; 0x08
    1348:	d9 84       	ldd	r13, Y+9	; 0x09
    134a:	e1 2c       	mov	r14, r1
    134c:	f1 2c       	mov	r15, r1
    134e:	00 e0       	ldi	r16, 0x00	; 0
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	98 01       	movw	r18, r16
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	ba 01       	movw	r22, r20
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 46 12 	call	0x248c	; 0x248c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1360:	f4 01       	movw	r30, r8
    1362:	13 86       	std	Z+11, r1	; 0x0b
    1364:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1366:	be 01       	movw	r22, r28
    1368:	6a 5f       	subi	r22, 0xFA	; 250
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	c2 d7       	rcall	.+3972   	; 0x22f6 <xTaskCheckForTimeOut>
    1372:	88 23       	and	r24, r24
    1374:	89 f2       	breq	.-94     	; 0x1318 <xStreamBufferSend+0x8c>
    1376:	02 c0       	rjmp	.+4      	; 0x137c <xStreamBufferSend+0xf0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    137c:	61 14       	cp	r6, r1
    137e:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1380:	19 f4       	brne	.+6      	; 0x1388 <xStreamBufferSend+0xfc>
    1382:	c4 01       	movw	r24, r8
    1384:	71 df       	rcall	.-286    	; 0x1268 <xStreamBufferSpacesAvailable>
    1386:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1388:	82 01       	movw	r16, r4
    138a:	93 01       	movw	r18, r6
    138c:	a1 01       	movw	r20, r2
    138e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1390:	7b 85       	ldd	r23, Y+11	; 0x0b
    1392:	c4 01       	movw	r24, r8
    1394:	6c de       	rcall	.-808    	; 0x106e <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1396:	6c 01       	movw	r12, r24
    1398:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    139a:	e9 f0       	breq	.+58     	; 0x13d6 <xStreamBufferSend+0x14a>
    139c:	c4 01       	movw	r24, r8
    139e:	0b de       	rcall	.-1002   	; 0xfb6 <prvBytesInBuffer>
    13a0:	f4 01       	movw	r30, r8
    13a2:	26 81       	ldd	r18, Z+6	; 0x06
    13a4:	37 81       	ldd	r19, Z+7	; 0x07
    13a6:	82 17       	cp	r24, r18
    13a8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    13aa:	a8 f0       	brcs	.+42     	; 0x13d6 <xStreamBufferSend+0x14a>
    13ac:	56 d3       	rcall	.+1708   	; 0x1a5a <vTaskSuspendAll>
    13ae:	f4 01       	movw	r30, r8
    13b0:	80 85       	ldd	r24, Z+8	; 0x08
    13b2:	91 85       	ldd	r25, Z+9	; 0x09
    13b4:	89 2b       	or	r24, r25
    13b6:	71 f0       	breq	.+28     	; 0x13d4 <xStreamBufferSend+0x148>
    13b8:	80 85       	ldd	r24, Z+8	; 0x08
    13ba:	91 85       	ldd	r25, Z+9	; 0x09
    13bc:	e1 2c       	mov	r14, r1
    13be:	f1 2c       	mov	r15, r1
    13c0:	00 e0       	ldi	r16, 0x00	; 0
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	0e 94 ed 12 	call	0x25da	; 0x25da <xTaskGenericNotify>
    13ce:	f4 01       	movw	r30, r8
    13d0:	11 86       	std	Z+9, r1	; 0x09
    13d2:	10 86       	std	Z+8, r1	; 0x08
    13d4:	86 d4       	rcall	.+2316   	; 0x1ce2 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    13d6:	c6 01       	movw	r24, r12
    13d8:	2b 96       	adiw	r28, 0x0b	; 11
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	bf 90       	pop	r11
    13f6:	af 90       	pop	r10
    13f8:	9f 90       	pop	r9
    13fa:	8f 90       	pop	r8
    13fc:	7f 90       	pop	r7
    13fe:	6f 90       	pop	r6
    1400:	5f 90       	pop	r5
    1402:	4f 90       	pop	r4
    1404:	3f 90       	pop	r3
    1406:	2f 90       	pop	r2
    1408:	08 95       	ret

0000140a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    140a:	af 92       	push	r10
    140c:	bf 92       	push	r11
    140e:	cf 92       	push	r12
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	7b 01       	movw	r14, r22
    1422:	5a 01       	movw	r10, r20
    1424:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1426:	8e 85       	ldd	r24, Y+14	; 0x0e
    1428:	80 ff       	sbrs	r24, 0
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    142c:	8a 01       	movw	r16, r20
    142e:	0e 5f       	subi	r16, 0xFE	; 254
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1434:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1436:	ce 01       	movw	r24, r28
    1438:	17 df       	rcall	.-466    	; 0x1268 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    143a:	9c 01       	movw	r18, r24
    143c:	a5 01       	movw	r20, r10
    143e:	b7 01       	movw	r22, r14
    1440:	ce 01       	movw	r24, r28
    1442:	15 de       	rcall	.-982    	; 0x106e <prvWriteMessageToBuffer>
    1444:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1446:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1448:	c1 f0       	breq	.+48     	; 0x147a <xStreamBufferSendFromISR+0x70>
    144a:	ce 01       	movw	r24, r28
    144c:	b4 dd       	rcall	.-1176   	; 0xfb6 <prvBytesInBuffer>
    144e:	2e 81       	ldd	r18, Y+6	; 0x06
    1450:	3f 81       	ldd	r19, Y+7	; 0x07
    1452:	82 17       	cp	r24, r18
    1454:	93 07       	cpc	r25, r19
    1456:	88 f0       	brcs	.+34     	; 0x147a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1458:	88 85       	ldd	r24, Y+8	; 0x08
    145a:	99 85       	ldd	r25, Y+9	; 0x09
    145c:	89 2b       	or	r24, r25
    145e:	69 f0       	breq	.+26     	; 0x147a <xStreamBufferSendFromISR+0x70>
    1460:	88 85       	ldd	r24, Y+8	; 0x08
    1462:	99 85       	ldd	r25, Y+9	; 0x09
    1464:	e1 2c       	mov	r14, r1
    1466:	f1 2c       	mov	r15, r1
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	a9 01       	movw	r20, r18
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <xTaskGenericNotifyFromISR>
    1476:	19 86       	std	Y+9, r1	; 0x09
    1478:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    147a:	c5 01       	movw	r24, r10
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	08 95       	ret

00001492 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1492:	2f 92       	push	r2
    1494:	3f 92       	push	r3
    1496:	4f 92       	push	r4
    1498:	5f 92       	push	r5
    149a:	6f 92       	push	r6
    149c:	7f 92       	push	r7
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	1f 92       	push	r1
    14b8:	1f 92       	push	r1
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	4c 01       	movw	r8, r24
    14c0:	1b 01       	movw	r2, r22
    14c2:	2a 01       	movw	r4, r20
    14c4:	58 01       	movw	r10, r16
    14c6:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14c8:	fc 01       	movw	r30, r24
    14ca:	86 85       	ldd	r24, Z+14	; 0x0e
    14cc:	80 fd       	sbrc	r24, 0
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    14d0:	61 2c       	mov	r6, r1
    14d2:	71 2c       	mov	r7, r1
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14d6:	68 94       	set
    14d8:	66 24       	eor	r6, r6
    14da:	61 f8       	bld	r6, 1
    14dc:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    14de:	a1 14       	cp	r10, r1
    14e0:	b1 04       	cpc	r11, r1
    14e2:	c1 04       	cpc	r12, r1
    14e4:	d1 04       	cpc	r13, r1
    14e6:	41 f1       	breq	.+80     	; 0x1538 <xStreamBufferReceive+0xa6>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14ee:	c4 01       	movw	r24, r8
    14f0:	62 dd       	rcall	.-1340   	; 0xfb6 <prvBytesInBuffer>
    14f2:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    14f4:	68 16       	cp	r6, r24
    14f6:	79 06       	cpc	r7, r25
    14f8:	48 f0       	brcs	.+18     	; 0x150c <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1504:	55 d7       	rcall	.+3754   	; 0x23b0 <xTaskGetCurrentTaskHandle>
    1506:	f4 01       	movw	r30, r8
    1508:	91 87       	std	Z+9, r25	; 0x09
    150a:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1510:	60 16       	cp	r6, r16
    1512:	71 06       	cpc	r7, r17
    1514:	b8 f0       	brcs	.+46     	; 0x1544 <xStreamBufferReceive+0xb2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1516:	e1 2c       	mov	r14, r1
    1518:	f1 2c       	mov	r15, r1
    151a:	00 e0       	ldi	r16, 0x00	; 0
    151c:	10 e0       	ldi	r17, 0x00	; 0
    151e:	98 01       	movw	r18, r16
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	ba 01       	movw	r22, r20
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	b1 d7       	rcall	.+3938   	; 0x248c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    152a:	f4 01       	movw	r30, r8
    152c:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    152e:	10 86       	std	Z+8, r1	; 0x08
    1530:	c4 01       	movw	r24, r8
    1532:	41 dd       	rcall	.-1406   	; 0xfb6 <prvBytesInBuffer>
    1534:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1536:	03 c0       	rjmp	.+6      	; 0x153e <xStreamBufferReceive+0xac>
    1538:	c4 01       	movw	r24, r8
    153a:	3d dd       	rcall	.-1414   	; 0xfb6 <prvBytesInBuffer>
    153c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    153e:	60 16       	cp	r6, r16
    1540:	71 06       	cpc	r7, r17
    1542:	c8 f5       	brcc	.+114    	; 0x15b6 <xStreamBufferReceive+0x124>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1544:	61 14       	cp	r6, r1
    1546:	71 04       	cpc	r7, r1
    1548:	c1 f0       	breq	.+48     	; 0x157a <xStreamBufferReceive+0xe8>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    154a:	f4 01       	movw	r30, r8
    154c:	c0 80       	ld	r12, Z
    154e:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1550:	98 01       	movw	r18, r16
    1552:	a3 01       	movw	r20, r6
    1554:	be 01       	movw	r22, r28
    1556:	6f 5f       	subi	r22, 0xFF	; 255
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	c4 01       	movw	r24, r8
    155c:	c8 dd       	rcall	.-1136   	; 0x10ee <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1562:	06 19       	sub	r16, r6
    1564:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1566:	48 16       	cp	r4, r24
    1568:	59 06       	cpc	r5, r25
    156a:	30 f4       	brcc	.+12     	; 0x1578 <xStreamBufferReceive+0xe6>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    156c:	f4 01       	movw	r30, r8
    156e:	d1 82       	std	Z+1, r13	; 0x01
    1570:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    1572:	41 2c       	mov	r4, r1
    1574:	51 2c       	mov	r5, r1
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1576:	01 c0       	rjmp	.+2      	; 0x157a <xStreamBufferReceive+0xe8>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1578:	2c 01       	movw	r4, r24
    157a:	98 01       	movw	r18, r16
    157c:	a2 01       	movw	r20, r4
    157e:	b1 01       	movw	r22, r2
    1580:	c4 01       	movw	r24, r8
    1582:	b5 dd       	rcall	.-1174   	; 0x10ee <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1584:	6c 01       	movw	r12, r24
    1586:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1588:	c1 f0       	breq	.+48     	; 0x15ba <xStreamBufferReceive+0x128>
    158a:	67 d2       	rcall	.+1230   	; 0x1a5a <vTaskSuspendAll>
    158c:	f4 01       	movw	r30, r8
    158e:	82 85       	ldd	r24, Z+10	; 0x0a
    1590:	93 85       	ldd	r25, Z+11	; 0x0b
    1592:	89 2b       	or	r24, r25
    1594:	71 f0       	breq	.+28     	; 0x15b2 <xStreamBufferReceive+0x120>
    1596:	82 85       	ldd	r24, Z+10	; 0x0a
    1598:	93 85       	ldd	r25, Z+11	; 0x0b
    159a:	e1 2c       	mov	r14, r1
    159c:	f1 2c       	mov	r15, r1
    159e:	00 e0       	ldi	r16, 0x00	; 0
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	a9 01       	movw	r20, r18
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	0e 94 ed 12 	call	0x25da	; 0x25da <xTaskGenericNotify>
    15ac:	f4 01       	movw	r30, r8
    15ae:	13 86       	std	Z+11, r1	; 0x0b
    15b0:	12 86       	std	Z+10, r1	; 0x0a
    15b2:	97 d3       	rcall	.+1838   	; 0x1ce2 <xTaskResumeAll>
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <xStreamBufferReceive+0x128>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15b6:	c1 2c       	mov	r12, r1
    15b8:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15ba:	c6 01       	movw	r24, r12
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	6f 90       	pop	r6
    15dc:	5f 90       	pop	r5
    15de:	4f 90       	pop	r4
    15e0:	3f 90       	pop	r3
    15e2:	2f 90       	pop	r2
    15e4:	08 95       	ret

000015e6 <prvResetNextTaskUnblockTime>:
    15e6:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    15ea:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    15ee:	80 81       	ld	r24, Z
    15f0:	81 11       	cpse	r24, r1
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <prvResetNextTaskUnblockTime+0x26>
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	dc 01       	movw	r26, r24
    15fa:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    15fe:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    1602:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    1606:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    160a:	08 95       	ret
    160c:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    1610:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1614:	07 80       	ldd	r0, Z+7	; 0x07
    1616:	f0 85       	ldd	r31, Z+8	; 0x08
    1618:	e0 2d       	mov	r30, r0
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	a2 81       	ldd	r26, Z+2	; 0x02
    1620:	b3 81       	ldd	r27, Z+3	; 0x03
    1622:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    1626:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    162a:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    162e:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1632:	08 95       	ret

00001634 <prvAddCurrentTaskToDelayedList>:
    1634:	8f 92       	push	r8
    1636:	9f 92       	push	r9
    1638:	af 92       	push	r10
    163a:	bf 92       	push	r11
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	6b 01       	movw	r12, r22
    164a:	7c 01       	movw	r14, r24
    164c:	c4 2f       	mov	r28, r20
    164e:	80 90 6a 10 	lds	r8, 0x106A	; 0x80106a <xTickCount>
    1652:	90 90 6b 10 	lds	r9, 0x106B	; 0x80106b <xTickCount+0x1>
    1656:	a0 90 6c 10 	lds	r10, 0x106C	; 0x80106c <xTickCount+0x2>
    165a:	b0 90 6d 10 	lds	r11, 0x106D	; 0x80106d <xTickCount+0x3>
    165e:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1662:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1666:	02 96       	adiw	r24, 0x02	; 2
    1668:	84 d8       	rcall	.-3832   	; 0x772 <uxListRemove>
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	c8 16       	cp	r12, r24
    166e:	d8 06       	cpc	r13, r24
    1670:	e8 06       	cpc	r14, r24
    1672:	f8 06       	cpc	r15, r24
    1674:	b1 f5       	brne	.+108    	; 0x16e2 <prvAddCurrentTaskToDelayedList+0xae>
    1676:	cc 23       	and	r28, r28
    1678:	a1 f1       	breq	.+104    	; 0x16e2 <prvAddCurrentTaskToDelayedList+0xae>
    167a:	ef e6       	ldi	r30, 0x6F	; 111
    167c:	f0 e1       	ldi	r31, 0x10	; 16
    167e:	a1 81       	ldd	r26, Z+1	; 0x01
    1680:	b2 81       	ldd	r27, Z+2	; 0x02
    1682:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1686:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    168a:	bf 83       	std	Y+7, r27	; 0x07
    168c:	ae 83       	std	Y+6, r26	; 0x06
    168e:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1692:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1696:	16 96       	adiw	r26, 0x06	; 6
    1698:	8d 91       	ld	r24, X+
    169a:	9c 91       	ld	r25, X
    169c:	17 97       	sbiw	r26, 0x07	; 7
    169e:	99 87       	std	Y+9, r25	; 0x09
    16a0:	88 87       	std	Y+8, r24	; 0x08
    16a2:	16 96       	adiw	r26, 0x06	; 6
    16a4:	cd 91       	ld	r28, X+
    16a6:	dc 91       	ld	r29, X
    16a8:	17 97       	sbiw	r26, 0x07	; 7
    16aa:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    16ae:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16b2:	02 96       	adiw	r24, 0x02	; 2
    16b4:	9d 83       	std	Y+5, r25	; 0x05
    16b6:	8c 83       	std	Y+4, r24	; 0x04
    16b8:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    16bc:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16c0:	02 96       	adiw	r24, 0x02	; 2
    16c2:	17 96       	adiw	r26, 0x07	; 7
    16c4:	9c 93       	st	X, r25
    16c6:	8e 93       	st	-X, r24
    16c8:	16 97       	sbiw	r26, 0x06	; 6
    16ca:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    16ce:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16d2:	1d 96       	adiw	r26, 0x0d	; 13
    16d4:	fc 93       	st	X, r31
    16d6:	ee 93       	st	-X, r30
    16d8:	1c 97       	sbiw	r26, 0x0c	; 12
    16da:	80 81       	ld	r24, Z
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	80 83       	st	Z, r24
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <prvAddCurrentTaskToDelayedList+0x12c>
    16e2:	c8 0c       	add	r12, r8
    16e4:	d9 1c       	adc	r13, r9
    16e6:	ea 1c       	adc	r14, r10
    16e8:	fb 1c       	adc	r15, r11
    16ea:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    16ee:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16f2:	c2 82       	std	Z+2, r12	; 0x02
    16f4:	d3 82       	std	Z+3, r13	; 0x03
    16f6:	e4 82       	std	Z+4, r14	; 0x04
    16f8:	f5 82       	std	Z+5, r15	; 0x05
    16fa:	c8 14       	cp	r12, r8
    16fc:	d9 04       	cpc	r13, r9
    16fe:	ea 04       	cpc	r14, r10
    1700:	fb 04       	cpc	r15, r11
    1702:	68 f4       	brcc	.+26     	; 0x171e <prvAddCurrentTaskToDelayedList+0xea>
    1704:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1708:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    170c:	80 91 91 10 	lds	r24, 0x1091	; 0x801091 <pxOverflowDelayedTaskList>
    1710:	90 91 92 10 	lds	r25, 0x1092	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    1714:	6e 5f       	subi	r22, 0xFE	; 254
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <vListInsert>
    171c:	21 c0       	rjmp	.+66     	; 0x1760 <prvAddCurrentTaskToDelayedList+0x12c>
    171e:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1722:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1726:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <pxDelayedTaskList>
    172a:	90 91 94 10 	lds	r25, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    172e:	6e 5f       	subi	r22, 0xFE	; 254
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <vListInsert>
    1736:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <xNextTaskUnblockTime>
    173a:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <xNextTaskUnblockTime+0x1>
    173e:	a0 91 5f 10 	lds	r26, 0x105F	; 0x80105f <xNextTaskUnblockTime+0x2>
    1742:	b0 91 60 10 	lds	r27, 0x1060	; 0x801060 <xNextTaskUnblockTime+0x3>
    1746:	c8 16       	cp	r12, r24
    1748:	d9 06       	cpc	r13, r25
    174a:	ea 06       	cpc	r14, r26
    174c:	fb 06       	cpc	r15, r27
    174e:	40 f4       	brcc	.+16     	; 0x1760 <prvAddCurrentTaskToDelayedList+0x12c>
    1750:	c0 92 5d 10 	sts	0x105D, r12	; 0x80105d <xNextTaskUnblockTime>
    1754:	d0 92 5e 10 	sts	0x105E, r13	; 0x80105e <xNextTaskUnblockTime+0x1>
    1758:	e0 92 5f 10 	sts	0x105F, r14	; 0x80105f <xNextTaskUnblockTime+0x2>
    175c:	f0 92 60 10 	sts	0x1060, r15	; 0x801060 <xNextTaskUnblockTime+0x3>
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	08 95       	ret

00001776 <xTaskCreate>:
    1776:	4f 92       	push	r4
    1778:	5f 92       	push	r5
    177a:	6f 92       	push	r6
    177c:	7f 92       	push	r7
    177e:	8f 92       	push	r8
    1780:	9f 92       	push	r9
    1782:	af 92       	push	r10
    1784:	bf 92       	push	r11
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	4c 01       	movw	r8, r24
    1798:	6b 01       	movw	r12, r22
    179a:	5a 01       	movw	r10, r20
    179c:	29 01       	movw	r4, r18
    179e:	ca 01       	movw	r24, r20
    17a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <pvPortMalloc>
    17a4:	3c 01       	movw	r6, r24
    17a6:	89 2b       	or	r24, r25
    17a8:	09 f4       	brne	.+2      	; 0x17ac <xTaskCreate+0x36>
    17aa:	0d c1       	rjmp	.+538    	; 0x19c6 <xTaskCreate+0x250>
    17ac:	84 e3       	ldi	r24, 0x34	; 52
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 65 02 	call	0x4ca	; 0x4ca <pvPortMalloc>
    17b4:	ec 01       	movw	r28, r24
    17b6:	89 2b       	or	r24, r25
    17b8:	99 f0       	breq	.+38     	; 0x17e0 <xTaskCreate+0x6a>
    17ba:	7c 8e       	std	Y+28, r7	; 0x1c
    17bc:	6b 8e       	std	Y+27, r6	; 0x1b
    17be:	a5 01       	movw	r20, r10
    17c0:	65 ea       	ldi	r22, 0xA5	; 165
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	c3 01       	movw	r24, r6
    17c6:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <memset>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	a8 1a       	sub	r10, r24
    17ce:	b1 08       	sbc	r11, r1
    17d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d4:	a8 0e       	add	r10, r24
    17d6:	b9 1e       	adc	r11, r25
    17d8:	c1 14       	cp	r12, r1
    17da:	d1 04       	cpc	r13, r1
    17dc:	29 f4       	brne	.+10     	; 0x17e8 <xTaskCreate+0x72>
    17de:	20 c0       	rjmp	.+64     	; 0x1820 <xTaskCreate+0xaa>
    17e0:	c3 01       	movw	r24, r6
    17e2:	0e 94 2d 03 	call	0x65a	; 0x65a <vPortFree>
    17e6:	ef c0       	rjmp	.+478    	; 0x19c6 <xTaskCreate+0x250>
    17e8:	d6 01       	movw	r26, r12
    17ea:	8c 91       	ld	r24, X
    17ec:	8d 8f       	std	Y+29, r24	; 0x1d
    17ee:	8c 91       	ld	r24, X
    17f0:	88 23       	and	r24, r24
    17f2:	a1 f0       	breq	.+40     	; 0x181c <xTaskCreate+0xa6>
    17f4:	ae 01       	movw	r20, r28
    17f6:	42 5e       	subi	r20, 0xE2	; 226
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	f6 01       	movw	r30, r12
    17fc:	31 96       	adiw	r30, 0x01	; 1
    17fe:	b0 e1       	ldi	r27, 0x10	; 16
    1800:	cb 0e       	add	r12, r27
    1802:	d1 1c       	adc	r13, r1
    1804:	cf 01       	movw	r24, r30
    1806:	21 91       	ld	r18, Z+
    1808:	da 01       	movw	r26, r20
    180a:	2d 93       	st	X+, r18
    180c:	ad 01       	movw	r20, r26
    180e:	dc 01       	movw	r26, r24
    1810:	8c 91       	ld	r24, X
    1812:	88 23       	and	r24, r24
    1814:	19 f0       	breq	.+6      	; 0x181c <xTaskCreate+0xa6>
    1816:	ce 16       	cp	r12, r30
    1818:	df 06       	cpc	r13, r31
    181a:	a1 f7       	brne	.-24     	; 0x1804 <xTaskCreate+0x8e>
    181c:	1c a6       	std	Y+44, r1	; 0x2c
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <xTaskCreate+0xac>
    1820:	1d 8e       	std	Y+29, r1	; 0x1d
    1822:	0a 30       	cpi	r16, 0x0A	; 10
    1824:	08 f0       	brcs	.+2      	; 0x1828 <xTaskCreate+0xb2>
    1826:	09 e0       	ldi	r16, 0x09	; 9
    1828:	0a 8f       	std	Y+26, r16	; 0x1a
    182a:	0d a7       	std	Y+45, r16	; 0x2d
    182c:	1e a6       	std	Y+46, r1	; 0x2e
    182e:	6e 01       	movw	r12, r28
    1830:	b2 e0       	ldi	r27, 0x02	; 2
    1832:	cb 0e       	add	r12, r27
    1834:	d1 1c       	adc	r13, r1
    1836:	c6 01       	movw	r24, r12
    1838:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vListInitialiseItem>
    183c:	ce 01       	movw	r24, r28
    183e:	0e 96       	adiw	r24, 0x0e	; 14
    1840:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vListInitialiseItem>
    1844:	db 87       	std	Y+11, r29	; 0x0b
    1846:	ca 87       	std	Y+10, r28	; 0x0a
    1848:	8a e0       	ldi	r24, 0x0A	; 10
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	80 1b       	sub	r24, r16
    1852:	91 09       	sbc	r25, r1
    1854:	a1 09       	sbc	r26, r1
    1856:	b1 09       	sbc	r27, r1
    1858:	8e 87       	std	Y+14, r24	; 0x0e
    185a:	9f 87       	std	Y+15, r25	; 0x0f
    185c:	a8 8b       	std	Y+16, r26	; 0x10
    185e:	b9 8b       	std	Y+17, r27	; 0x11
    1860:	df 8b       	std	Y+23, r29	; 0x17
    1862:	ce 8b       	std	Y+22, r28	; 0x16
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	fe 01       	movw	r30, r28
    1868:	bf 96       	adiw	r30, 0x2f	; 47
    186a:	df 01       	movw	r26, r30
    186c:	1d 92       	st	X+, r1
    186e:	8a 95       	dec	r24
    1870:	e9 f7       	brne	.-6      	; 0x186c <xTaskCreate+0xf6>
    1872:	1b aa       	std	Y+51, r1	; 0x33
    1874:	a2 01       	movw	r20, r4
    1876:	b4 01       	movw	r22, r8
    1878:	c5 01       	movw	r24, r10
    187a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <pxPortInitialiseStack>
    187e:	99 83       	std	Y+1, r25	; 0x01
    1880:	88 83       	st	Y, r24
    1882:	e1 14       	cp	r14, r1
    1884:	f1 04       	cpc	r15, r1
    1886:	19 f0       	breq	.+6      	; 0x188e <xTaskCreate+0x118>
    1888:	f7 01       	movw	r30, r14
    188a:	d1 83       	std	Z+1, r29	; 0x01
    188c:	c0 83       	st	Z, r28
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	0f 92       	push	r0
    1894:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <uxCurrentNumberOfTasks>
    189e:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    18a2:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    18a6:	89 2b       	or	r24, r25
    18a8:	d1 f5       	brne	.+116    	; 0x191e <xTaskCreate+0x1a8>
    18aa:	d0 93 1a 11 	sts	0x111A, r29	; 0x80111a <pxCurrentTCB+0x1>
    18ae:	c0 93 19 11 	sts	0x1119, r28	; 0x801119 <pxCurrentTCB>
    18b2:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	09 f0       	breq	.+2      	; 0x18bc <xTaskCreate+0x146>
    18ba:	41 c0       	rjmp	.+130    	; 0x193e <xTaskCreate+0x1c8>
    18bc:	0b ea       	ldi	r16, 0xAB	; 171
    18be:	10 e1       	ldi	r17, 0x10	; 16
    18c0:	0f 2e       	mov	r0, r31
    18c2:	f9 e1       	ldi	r31, 0x19	; 25
    18c4:	ef 2e       	mov	r14, r31
    18c6:	f1 e1       	ldi	r31, 0x11	; 17
    18c8:	ff 2e       	mov	r15, r31
    18ca:	f0 2d       	mov	r31, r0
    18cc:	c8 01       	movw	r24, r16
    18ce:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    18d2:	05 5f       	subi	r16, 0xF5	; 245
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	0e 15       	cp	r16, r14
    18d8:	1f 05       	cpc	r17, r15
    18da:	c1 f7       	brne	.-16     	; 0x18cc <xTaskCreate+0x156>
    18dc:	80 ea       	ldi	r24, 0xA0	; 160
    18de:	90 e1       	ldi	r25, 0x10	; 16
    18e0:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    18e4:	85 e9       	ldi	r24, 0x95	; 149
    18e6:	90 e1       	ldi	r25, 0x10	; 16
    18e8:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    18ec:	86 e8       	ldi	r24, 0x86	; 134
    18ee:	90 e1       	ldi	r25, 0x10	; 16
    18f0:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    18f4:	8b e7       	ldi	r24, 0x7B	; 123
    18f6:	90 e1       	ldi	r25, 0x10	; 16
    18f8:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    18fc:	8f e6       	ldi	r24, 0x6F	; 111
    18fe:	90 e1       	ldi	r25, 0x10	; 16
    1900:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    1904:	80 ea       	ldi	r24, 0xA0	; 160
    1906:	90 e1       	ldi	r25, 0x10	; 16
    1908:	90 93 94 10 	sts	0x1094, r25	; 0x801094 <pxDelayedTaskList+0x1>
    190c:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <pxDelayedTaskList>
    1910:	85 e9       	ldi	r24, 0x95	; 149
    1912:	90 e1       	ldi	r25, 0x10	; 16
    1914:	90 93 92 10 	sts	0x1092, r25	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    1918:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <pxOverflowDelayedTaskList>
    191c:	10 c0       	rjmp	.+32     	; 0x193e <xTaskCreate+0x1c8>
    191e:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    1922:	81 11       	cpse	r24, r1
    1924:	0c c0       	rjmp	.+24     	; 0x193e <xTaskCreate+0x1c8>
    1926:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    192a:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    192e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1930:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1932:	89 17       	cp	r24, r25
    1934:	20 f0       	brcs	.+8      	; 0x193e <xTaskCreate+0x1c8>
    1936:	d0 93 1a 11 	sts	0x111A, r29	; 0x80111a <pxCurrentTCB+0x1>
    193a:	c0 93 19 11 	sts	0x1119, r28	; 0x801119 <pxCurrentTCB>
    193e:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <uxTaskNumber>
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <uxTaskNumber>
    1948:	ea 8d       	ldd	r30, Y+26	; 0x1a
    194a:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    194e:	8e 17       	cp	r24, r30
    1950:	10 f4       	brcc	.+4      	; 0x1956 <xTaskCreate+0x1e0>
    1952:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    1956:	8b e0       	ldi	r24, 0x0B	; 11
    1958:	8e 9f       	mul	r24, r30
    195a:	f0 01       	movw	r30, r0
    195c:	11 24       	eor	r1, r1
    195e:	e5 55       	subi	r30, 0x55	; 85
    1960:	ff 4e       	sbci	r31, 0xEF	; 239
    1962:	01 80       	ldd	r0, Z+1	; 0x01
    1964:	f2 81       	ldd	r31, Z+2	; 0x02
    1966:	e0 2d       	mov	r30, r0
    1968:	ff 83       	std	Y+7, r31	; 0x07
    196a:	ee 83       	std	Y+6, r30	; 0x06
    196c:	26 81       	ldd	r18, Z+6	; 0x06
    196e:	37 81       	ldd	r19, Z+7	; 0x07
    1970:	39 87       	std	Y+9, r19	; 0x09
    1972:	28 87       	std	Y+8, r18	; 0x08
    1974:	a6 81       	ldd	r26, Z+6	; 0x06
    1976:	b7 81       	ldd	r27, Z+7	; 0x07
    1978:	15 96       	adiw	r26, 0x05	; 5
    197a:	dc 92       	st	X, r13
    197c:	ce 92       	st	-X, r12
    197e:	14 97       	sbiw	r26, 0x04	; 4
    1980:	d7 82       	std	Z+7, r13	; 0x07
    1982:	c6 82       	std	Z+6, r12	; 0x06
    1984:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1986:	8e 9f       	mul	r24, r30
    1988:	f0 01       	movw	r30, r0
    198a:	11 24       	eor	r1, r1
    198c:	e5 55       	subi	r30, 0x55	; 85
    198e:	ff 4e       	sbci	r31, 0xEF	; 239
    1990:	fd 87       	std	Y+13, r31	; 0x0d
    1992:	ec 87       	std	Y+12, r30	; 0x0c
    1994:	80 81       	ld	r24, Z
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	80 83       	st	Z, r24
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    19a2:	88 23       	and	r24, r24
    19a4:	61 f0       	breq	.+24     	; 0x19be <xTaskCreate+0x248>
    19a6:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    19aa:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    19ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    19b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19b2:	98 17       	cp	r25, r24
    19b4:	30 f4       	brcc	.+12     	; 0x19c2 <xTaskCreate+0x24c>
    19b6:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <xTaskCreate+0x252>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <xTaskCreate+0x252>
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <xTaskCreate+0x252>
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	7f 90       	pop	r7
    19e2:	6f 90       	pop	r6
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	08 95       	ret

000019ea <vTaskStartScheduler>:
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	0f 2e       	mov	r0, r31
    19f2:	fb e5       	ldi	r31, 0x5B	; 91
    19f4:	ef 2e       	mov	r14, r31
    19f6:	f0 e1       	ldi	r31, 0x10	; 16
    19f8:	ff 2e       	mov	r15, r31
    19fa:	f0 2d       	mov	r31, r0
    19fc:	00 e0       	ldi	r16, 0x00	; 0
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 ec       	ldi	r20, 0xC0	; 192
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	6d e3       	ldi	r22, 0x3D	; 61
    1a08:	72 e0       	ldi	r23, 0x02	; 2
    1a0a:	8c e7       	ldi	r24, 0x7C	; 124
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	b3 de       	rcall	.-666    	; 0x1776 <xTaskCreate>
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	e9 f4       	brne	.+58     	; 0x1a4e <vTaskStartScheduler+0x64>
    1a14:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <xTimerCreateTimerTask>
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	c9 f4       	brne	.+50     	; 0x1a4e <vTaskStartScheduler+0x64>
    1a1c:	f8 94       	cli
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
    1a22:	dc 01       	movw	r26, r24
    1a24:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    1a28:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    1a2c:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    1a30:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 93 68 10 	sts	0x1068, r24	; 0x801068 <xSchedulerRunning>
    1a3a:	10 92 6a 10 	sts	0x106A, r1	; 0x80106a <xTickCount>
    1a3e:	10 92 6b 10 	sts	0x106B, r1	; 0x80106b <xTickCount+0x1>
    1a42:	10 92 6c 10 	sts	0x106C, r1	; 0x80106c <xTickCount+0x2>
    1a46:	10 92 6d 10 	sts	0x106D, r1	; 0x80106d <xTickCount+0x3>
    1a4a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <xPortStartScheduler>
    1a4e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1a52:	0f 91       	pop	r16
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	08 95       	ret

00001a5a <vTaskSuspendAll>:
    1a5a:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <uxSchedulerSuspended>
    1a64:	08 95       	ret

00001a66 <xTaskGetTickCount>:
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	0f 92       	push	r0
    1a6c:	60 91 6a 10 	lds	r22, 0x106A	; 0x80106a <xTickCount>
    1a70:	70 91 6b 10 	lds	r23, 0x106B	; 0x80106b <xTickCount+0x1>
    1a74:	80 91 6c 10 	lds	r24, 0x106C	; 0x80106c <xTickCount+0x2>
    1a78:	90 91 6d 10 	lds	r25, 0x106D	; 0x80106d <xTickCount+0x3>
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	08 95       	ret

00001a82 <xTaskIncrementTick>:
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1a96:	81 11       	cpse	r24, r1
    1a98:	07 c1       	rjmp	.+526    	; 0x1ca8 <xTaskIncrementTick+0x226>
    1a9a:	c0 90 6a 10 	lds	r12, 0x106A	; 0x80106a <xTickCount>
    1a9e:	d0 90 6b 10 	lds	r13, 0x106B	; 0x80106b <xTickCount+0x1>
    1aa2:	e0 90 6c 10 	lds	r14, 0x106C	; 0x80106c <xTickCount+0x2>
    1aa6:	f0 90 6d 10 	lds	r15, 0x106D	; 0x80106d <xTickCount+0x3>
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	c8 1a       	sub	r12, r24
    1aae:	d8 0a       	sbc	r13, r24
    1ab0:	e8 0a       	sbc	r14, r24
    1ab2:	f8 0a       	sbc	r15, r24
    1ab4:	c0 92 6a 10 	sts	0x106A, r12	; 0x80106a <xTickCount>
    1ab8:	d0 92 6b 10 	sts	0x106B, r13	; 0x80106b <xTickCount+0x1>
    1abc:	e0 92 6c 10 	sts	0x106C, r14	; 0x80106c <xTickCount+0x2>
    1ac0:	f0 92 6d 10 	sts	0x106D, r15	; 0x80106d <xTickCount+0x3>
    1ac4:	c1 14       	cp	r12, r1
    1ac6:	d1 04       	cpc	r13, r1
    1ac8:	e1 04       	cpc	r14, r1
    1aca:	f1 04       	cpc	r15, r1
    1acc:	b1 f4       	brne	.+44     	; 0x1afa <xTaskIncrementTick+0x78>
    1ace:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <pxDelayedTaskList>
    1ad2:	90 91 94 10 	lds	r25, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1ad6:	20 91 91 10 	lds	r18, 0x1091	; 0x801091 <pxOverflowDelayedTaskList>
    1ada:	30 91 92 10 	lds	r19, 0x1092	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    1ade:	30 93 94 10 	sts	0x1094, r19	; 0x801094 <pxDelayedTaskList+0x1>
    1ae2:	20 93 93 10 	sts	0x1093, r18	; 0x801093 <pxDelayedTaskList>
    1ae6:	90 93 92 10 	sts	0x1092, r25	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    1aea:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <pxOverflowDelayedTaskList>
    1aee:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <xNumOfOverflows>
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	80 93 62 10 	sts	0x1062, r24	; 0x801062 <xNumOfOverflows>
    1af8:	76 dd       	rcall	.-1300   	; 0x15e6 <prvResetNextTaskUnblockTime>
    1afa:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <xNextTaskUnblockTime>
    1afe:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <xNextTaskUnblockTime+0x1>
    1b02:	a0 91 5f 10 	lds	r26, 0x105F	; 0x80105f <xNextTaskUnblockTime+0x2>
    1b06:	b0 91 60 10 	lds	r27, 0x1060	; 0x801060 <xNextTaskUnblockTime+0x3>
    1b0a:	c8 16       	cp	r12, r24
    1b0c:	d9 06       	cpc	r13, r25
    1b0e:	ea 06       	cpc	r14, r26
    1b10:	fb 06       	cpc	r15, r27
    1b12:	10 f4       	brcc	.+4      	; 0x1b18 <xTaskIncrementTick+0x96>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	b3 c0       	rjmp	.+358    	; 0x1c7e <xTaskIncrementTick+0x1fc>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	4b e0       	ldi	r20, 0x0B	; 11
    1b1c:	51 e0       	ldi	r21, 0x01	; 1
    1b1e:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    1b22:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1b26:	90 81       	ld	r25, Z
    1b28:	91 11       	cpse	r25, r1
    1b2a:	0c c0       	rjmp	.+24     	; 0x1b44 <xTaskIncrementTick+0xc2>
    1b2c:	4f ef       	ldi	r20, 0xFF	; 255
    1b2e:	5f ef       	ldi	r21, 0xFF	; 255
    1b30:	ba 01       	movw	r22, r20
    1b32:	40 93 5d 10 	sts	0x105D, r20	; 0x80105d <xNextTaskUnblockTime>
    1b36:	50 93 5e 10 	sts	0x105E, r21	; 0x80105e <xNextTaskUnblockTime+0x1>
    1b3a:	60 93 5f 10 	sts	0x105F, r22	; 0x80105f <xNextTaskUnblockTime+0x2>
    1b3e:	70 93 60 10 	sts	0x1060, r23	; 0x801060 <xNextTaskUnblockTime+0x3>
    1b42:	9d c0       	rjmp	.+314    	; 0x1c7e <xTaskIncrementTick+0x1fc>
    1b44:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    1b48:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1b4c:	07 80       	ldd	r0, Z+7	; 0x07
    1b4e:	f0 85       	ldd	r31, Z+8	; 0x08
    1b50:	e0 2d       	mov	r30, r0
    1b52:	00 84       	ldd	r0, Z+8	; 0x08
    1b54:	f1 85       	ldd	r31, Z+9	; 0x09
    1b56:	e0 2d       	mov	r30, r0
    1b58:	02 81       	ldd	r16, Z+2	; 0x02
    1b5a:	13 81       	ldd	r17, Z+3	; 0x03
    1b5c:	24 81       	ldd	r18, Z+4	; 0x04
    1b5e:	35 81       	ldd	r19, Z+5	; 0x05
    1b60:	c0 16       	cp	r12, r16
    1b62:	d1 06       	cpc	r13, r17
    1b64:	e2 06       	cpc	r14, r18
    1b66:	f3 06       	cpc	r15, r19
    1b68:	48 f4       	brcc	.+18     	; 0x1b7c <xTaskIncrementTick+0xfa>
    1b6a:	00 93 5d 10 	sts	0x105D, r16	; 0x80105d <xNextTaskUnblockTime>
    1b6e:	10 93 5e 10 	sts	0x105E, r17	; 0x80105e <xNextTaskUnblockTime+0x1>
    1b72:	20 93 5f 10 	sts	0x105F, r18	; 0x80105f <xNextTaskUnblockTime+0x2>
    1b76:	30 93 60 10 	sts	0x1060, r19	; 0x801060 <xNextTaskUnblockTime+0x3>
    1b7a:	81 c0       	rjmp	.+258    	; 0x1c7e <xTaskIncrementTick+0x1fc>
    1b7c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b7e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b80:	c6 81       	ldd	r28, Z+6	; 0x06
    1b82:	d7 81       	ldd	r29, Z+7	; 0x07
    1b84:	20 85       	ldd	r18, Z+8	; 0x08
    1b86:	31 85       	ldd	r19, Z+9	; 0x09
    1b88:	3f 83       	std	Y+7, r19	; 0x07
    1b8a:	2e 83       	std	Y+6, r18	; 0x06
    1b8c:	c0 85       	ldd	r28, Z+8	; 0x08
    1b8e:	d1 85       	ldd	r29, Z+9	; 0x09
    1b90:	26 81       	ldd	r18, Z+6	; 0x06
    1b92:	37 81       	ldd	r19, Z+7	; 0x07
    1b94:	3d 83       	std	Y+5, r19	; 0x05
    1b96:	2c 83       	std	Y+4, r18	; 0x04
    1b98:	9f 01       	movw	r18, r30
    1b9a:	2e 5f       	subi	r18, 0xFE	; 254
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	11 96       	adiw	r26, 0x01	; 1
    1ba0:	6d 91       	ld	r22, X+
    1ba2:	7c 91       	ld	r23, X
    1ba4:	12 97       	sbiw	r26, 0x02	; 2
    1ba6:	62 17       	cp	r22, r18
    1ba8:	73 07       	cpc	r23, r19
    1baa:	31 f4       	brne	.+12     	; 0x1bb8 <xTaskIncrementTick+0x136>
    1bac:	60 85       	ldd	r22, Z+8	; 0x08
    1bae:	71 85       	ldd	r23, Z+9	; 0x09
    1bb0:	12 96       	adiw	r26, 0x02	; 2
    1bb2:	7c 93       	st	X, r23
    1bb4:	6e 93       	st	-X, r22
    1bb6:	11 97       	sbiw	r26, 0x01	; 1
    1bb8:	15 86       	std	Z+13, r1	; 0x0d
    1bba:	14 86       	std	Z+12, r1	; 0x0c
    1bbc:	9c 91       	ld	r25, X
    1bbe:	91 50       	subi	r25, 0x01	; 1
    1bc0:	9c 93       	st	X, r25
    1bc2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1bc4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1bc6:	10 97       	sbiw	r26, 0x00	; 0
    1bc8:	09 f1       	breq	.+66     	; 0x1c0c <xTaskIncrementTick+0x18a>
    1bca:	c2 89       	ldd	r28, Z+18	; 0x12
    1bcc:	d3 89       	ldd	r29, Z+19	; 0x13
    1bce:	64 89       	ldd	r22, Z+20	; 0x14
    1bd0:	75 89       	ldd	r23, Z+21	; 0x15
    1bd2:	7f 83       	std	Y+7, r23	; 0x07
    1bd4:	6e 83       	std	Y+6, r22	; 0x06
    1bd6:	c4 89       	ldd	r28, Z+20	; 0x14
    1bd8:	d5 89       	ldd	r29, Z+21	; 0x15
    1bda:	62 89       	ldd	r22, Z+18	; 0x12
    1bdc:	73 89       	ldd	r23, Z+19	; 0x13
    1bde:	7d 83       	std	Y+5, r23	; 0x05
    1be0:	6c 83       	std	Y+4, r22	; 0x04
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	cd 91       	ld	r28, X+
    1be6:	dc 91       	ld	r29, X
    1be8:	12 97       	sbiw	r26, 0x02	; 2
    1bea:	bf 01       	movw	r22, r30
    1bec:	62 5f       	subi	r22, 0xF2	; 242
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	c6 17       	cp	r28, r22
    1bf2:	d7 07       	cpc	r29, r23
    1bf4:	31 f4       	brne	.+12     	; 0x1c02 <xTaskIncrementTick+0x180>
    1bf6:	64 89       	ldd	r22, Z+20	; 0x14
    1bf8:	75 89       	ldd	r23, Z+21	; 0x15
    1bfa:	12 96       	adiw	r26, 0x02	; 2
    1bfc:	7c 93       	st	X, r23
    1bfe:	6e 93       	st	-X, r22
    1c00:	11 97       	sbiw	r26, 0x01	; 1
    1c02:	11 8e       	std	Z+25, r1	; 0x19
    1c04:	10 8e       	std	Z+24, r1	; 0x18
    1c06:	9c 91       	ld	r25, X
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	9c 93       	st	X, r25
    1c0c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c0e:	90 91 69 10 	lds	r25, 0x1069	; 0x801069 <uxTopReadyPriority>
    1c12:	9a 17       	cp	r25, r26
    1c14:	10 f4       	brcc	.+4      	; 0x1c1a <xTaskIncrementTick+0x198>
    1c16:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1c1a:	4a 9f       	mul	r20, r26
    1c1c:	d0 01       	movw	r26, r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	a5 55       	subi	r26, 0x55	; 85
    1c22:	bf 4e       	sbci	r27, 0xEF	; 239
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	0d 90       	ld	r0, X+
    1c28:	bc 91       	ld	r27, X
    1c2a:	a0 2d       	mov	r26, r0
    1c2c:	b7 83       	std	Z+7, r27	; 0x07
    1c2e:	a6 83       	std	Z+6, r26	; 0x06
    1c30:	16 96       	adiw	r26, 0x06	; 6
    1c32:	6d 91       	ld	r22, X+
    1c34:	7c 91       	ld	r23, X
    1c36:	17 97       	sbiw	r26, 0x07	; 7
    1c38:	71 87       	std	Z+9, r23	; 0x09
    1c3a:	60 87       	std	Z+8, r22	; 0x08
    1c3c:	16 96       	adiw	r26, 0x06	; 6
    1c3e:	cd 91       	ld	r28, X+
    1c40:	dc 91       	ld	r29, X
    1c42:	17 97       	sbiw	r26, 0x07	; 7
    1c44:	3d 83       	std	Y+5, r19	; 0x05
    1c46:	2c 83       	std	Y+4, r18	; 0x04
    1c48:	17 96       	adiw	r26, 0x07	; 7
    1c4a:	3c 93       	st	X, r19
    1c4c:	2e 93       	st	-X, r18
    1c4e:	16 97       	sbiw	r26, 0x06	; 6
    1c50:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c52:	4a 9f       	mul	r20, r26
    1c54:	d0 01       	movw	r26, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	a5 55       	subi	r26, 0x55	; 85
    1c5a:	bf 4e       	sbci	r27, 0xEF	; 239
    1c5c:	b5 87       	std	Z+13, r27	; 0x0d
    1c5e:	a4 87       	std	Z+12, r26	; 0x0c
    1c60:	9c 91       	ld	r25, X
    1c62:	9f 5f       	subi	r25, 0xFF	; 255
    1c64:	9c 93       	st	X, r25
    1c66:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1c6a:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1c6e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c70:	5a 96       	adiw	r26, 0x1a	; 26
    1c72:	9c 91       	ld	r25, X
    1c74:	29 17       	cp	r18, r25
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <xTaskIncrementTick+0x1f8>
    1c78:	52 cf       	rjmp	.-348    	; 0x1b1e <xTaskIncrementTick+0x9c>
    1c7a:	85 2f       	mov	r24, r21
    1c7c:	50 cf       	rjmp	.-352    	; 0x1b1e <xTaskIncrementTick+0x9c>
    1c7e:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1c82:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1c86:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1c88:	9b e0       	ldi	r25, 0x0B	; 11
    1c8a:	e9 9f       	mul	r30, r25
    1c8c:	f0 01       	movw	r30, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	e5 55       	subi	r30, 0x55	; 85
    1c92:	ff 4e       	sbci	r31, 0xEF	; 239
    1c94:	90 81       	ld	r25, Z
    1c96:	92 30       	cpi	r25, 0x02	; 2
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <xTaskIncrementTick+0x21a>
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 91 63 10 	lds	r25, 0x1063	; 0x801063 <xYieldPending>
    1ca0:	99 23       	and	r25, r25
    1ca2:	b1 f0       	breq	.+44     	; 0x1cd0 <xTaskIncrementTick+0x24e>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <xTaskIncrementTick+0x24e>
    1ca8:	80 91 64 10 	lds	r24, 0x1064	; 0x801064 <xPendedTicks>
    1cac:	90 91 65 10 	lds	r25, 0x1065	; 0x801065 <xPendedTicks+0x1>
    1cb0:	a0 91 66 10 	lds	r26, 0x1066	; 0x801066 <xPendedTicks+0x2>
    1cb4:	b0 91 67 10 	lds	r27, 0x1067	; 0x801067 <xPendedTicks+0x3>
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	80 93 64 10 	sts	0x1064, r24	; 0x801064 <xPendedTicks>
    1cc2:	90 93 65 10 	sts	0x1065, r25	; 0x801065 <xPendedTicks+0x1>
    1cc6:	a0 93 66 10 	sts	0x1066, r26	; 0x801066 <xPendedTicks+0x2>
    1cca:	b0 93 67 10 	sts	0x1067, r27	; 0x801067 <xPendedTicks+0x3>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	08 95       	ret

00001ce2 <xTaskResumeAll>:
    1ce2:	cf 92       	push	r12
    1ce4:	df 92       	push	r13
    1ce6:	ef 92       	push	r14
    1ce8:	ff 92       	push	r15
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	0f 92       	push	r0
    1cf8:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1cfc:	81 50       	subi	r24, 0x01	; 1
    1cfe:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <uxSchedulerSuspended>
    1d02:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1d06:	81 11       	cpse	r24, r1
    1d08:	c4 c0       	rjmp	.+392    	; 0x1e92 <xTaskResumeAll+0x1b0>
    1d0a:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1d0e:	81 11       	cpse	r24, r1
    1d10:	8b c0       	rjmp	.+278    	; 0x1e28 <xTaskResumeAll+0x146>
    1d12:	c2 c0       	rjmp	.+388    	; 0x1e98 <xTaskResumeAll+0x1b6>
    1d14:	d8 01       	movw	r26, r16
    1d16:	17 96       	adiw	r26, 0x07	; 7
    1d18:	ed 91       	ld	r30, X+
    1d1a:	fc 91       	ld	r31, X
    1d1c:	18 97       	sbiw	r26, 0x08	; 8
    1d1e:	00 84       	ldd	r0, Z+8	; 0x08
    1d20:	f1 85       	ldd	r31, Z+9	; 0x09
    1d22:	e0 2d       	mov	r30, r0
    1d24:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d26:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d28:	82 89       	ldd	r24, Z+18	; 0x12
    1d2a:	93 89       	ldd	r25, Z+19	; 0x13
    1d2c:	64 89       	ldd	r22, Z+20	; 0x14
    1d2e:	75 89       	ldd	r23, Z+21	; 0x15
    1d30:	ec 01       	movw	r28, r24
    1d32:	7f 83       	std	Y+7, r23	; 0x07
    1d34:	6e 83       	std	Y+6, r22	; 0x06
    1d36:	84 89       	ldd	r24, Z+20	; 0x14
    1d38:	95 89       	ldd	r25, Z+21	; 0x15
    1d3a:	62 89       	ldd	r22, Z+18	; 0x12
    1d3c:	73 89       	ldd	r23, Z+19	; 0x13
    1d3e:	ec 01       	movw	r28, r24
    1d40:	7d 83       	std	Y+5, r23	; 0x05
    1d42:	6c 83       	std	Y+4, r22	; 0x04
    1d44:	cf 01       	movw	r24, r30
    1d46:	0e 96       	adiw	r24, 0x0e	; 14
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	6d 91       	ld	r22, X+
    1d4c:	7c 91       	ld	r23, X
    1d4e:	12 97       	sbiw	r26, 0x02	; 2
    1d50:	68 17       	cp	r22, r24
    1d52:	79 07       	cpc	r23, r25
    1d54:	31 f4       	brne	.+12     	; 0x1d62 <xTaskResumeAll+0x80>
    1d56:	84 89       	ldd	r24, Z+20	; 0x14
    1d58:	95 89       	ldd	r25, Z+21	; 0x15
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	9c 93       	st	X, r25
    1d5e:	8e 93       	st	-X, r24
    1d60:	11 97       	sbiw	r26, 0x01	; 1
    1d62:	11 8e       	std	Z+25, r1	; 0x19
    1d64:	10 8e       	std	Z+24, r1	; 0x18
    1d66:	8c 91       	ld	r24, X
    1d68:	81 50       	subi	r24, 0x01	; 1
    1d6a:	8c 93       	st	X, r24
    1d6c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d6e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d70:	86 81       	ldd	r24, Z+6	; 0x06
    1d72:	97 81       	ldd	r25, Z+7	; 0x07
    1d74:	60 85       	ldd	r22, Z+8	; 0x08
    1d76:	71 85       	ldd	r23, Z+9	; 0x09
    1d78:	ec 01       	movw	r28, r24
    1d7a:	7f 83       	std	Y+7, r23	; 0x07
    1d7c:	6e 83       	std	Y+6, r22	; 0x06
    1d7e:	80 85       	ldd	r24, Z+8	; 0x08
    1d80:	91 85       	ldd	r25, Z+9	; 0x09
    1d82:	66 81       	ldd	r22, Z+6	; 0x06
    1d84:	77 81       	ldd	r23, Z+7	; 0x07
    1d86:	ec 01       	movw	r28, r24
    1d88:	7d 83       	std	Y+5, r23	; 0x05
    1d8a:	6c 83       	std	Y+4, r22	; 0x04
    1d8c:	cf 01       	movw	r24, r30
    1d8e:	02 96       	adiw	r24, 0x02	; 2
    1d90:	11 96       	adiw	r26, 0x01	; 1
    1d92:	6d 91       	ld	r22, X+
    1d94:	7c 91       	ld	r23, X
    1d96:	12 97       	sbiw	r26, 0x02	; 2
    1d98:	68 17       	cp	r22, r24
    1d9a:	79 07       	cpc	r23, r25
    1d9c:	31 f4       	brne	.+12     	; 0x1daa <xTaskResumeAll+0xc8>
    1d9e:	60 85       	ldd	r22, Z+8	; 0x08
    1da0:	71 85       	ldd	r23, Z+9	; 0x09
    1da2:	12 96       	adiw	r26, 0x02	; 2
    1da4:	7c 93       	st	X, r23
    1da6:	6e 93       	st	-X, r22
    1da8:	11 97       	sbiw	r26, 0x01	; 1
    1daa:	15 86       	std	Z+13, r1	; 0x0d
    1dac:	14 86       	std	Z+12, r1	; 0x0c
    1dae:	2c 91       	ld	r18, X
    1db0:	21 50       	subi	r18, 0x01	; 1
    1db2:	2c 93       	st	X, r18
    1db4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1db6:	20 91 69 10 	lds	r18, 0x1069	; 0x801069 <uxTopReadyPriority>
    1dba:	2a 17       	cp	r18, r26
    1dbc:	10 f4       	brcc	.+4      	; 0x1dc2 <xTaskResumeAll+0xe0>
    1dbe:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1dc2:	3a 9f       	mul	r19, r26
    1dc4:	d0 01       	movw	r26, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	a5 55       	subi	r26, 0x55	; 85
    1dca:	bf 4e       	sbci	r27, 0xEF	; 239
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	0d 90       	ld	r0, X+
    1dd0:	bc 91       	ld	r27, X
    1dd2:	a0 2d       	mov	r26, r0
    1dd4:	b7 83       	std	Z+7, r27	; 0x07
    1dd6:	a6 83       	std	Z+6, r26	; 0x06
    1dd8:	16 96       	adiw	r26, 0x06	; 6
    1dda:	6d 91       	ld	r22, X+
    1ddc:	7c 91       	ld	r23, X
    1dde:	17 97       	sbiw	r26, 0x07	; 7
    1de0:	71 87       	std	Z+9, r23	; 0x09
    1de2:	60 87       	std	Z+8, r22	; 0x08
    1de4:	16 96       	adiw	r26, 0x06	; 6
    1de6:	6d 91       	ld	r22, X+
    1de8:	7c 91       	ld	r23, X
    1dea:	17 97       	sbiw	r26, 0x07	; 7
    1dec:	eb 01       	movw	r28, r22
    1dee:	9d 83       	std	Y+5, r25	; 0x05
    1df0:	8c 83       	std	Y+4, r24	; 0x04
    1df2:	17 96       	adiw	r26, 0x07	; 7
    1df4:	9c 93       	st	X, r25
    1df6:	8e 93       	st	-X, r24
    1df8:	16 97       	sbiw	r26, 0x06	; 6
    1dfa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dfc:	3a 9f       	mul	r19, r26
    1dfe:	d0 01       	movw	r26, r0
    1e00:	11 24       	eor	r1, r1
    1e02:	a5 55       	subi	r26, 0x55	; 85
    1e04:	bf 4e       	sbci	r27, 0xEF	; 239
    1e06:	b5 87       	std	Z+13, r27	; 0x0d
    1e08:	a4 87       	std	Z+12, r26	; 0x0c
    1e0a:	8c 91       	ld	r24, X
    1e0c:	8f 5f       	subi	r24, 0xFF	; 255
    1e0e:	8c 93       	st	X, r24
    1e10:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1e14:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1e18:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e1a:	5a 96       	adiw	r26, 0x1a	; 26
    1e1c:	8c 91       	ld	r24, X
    1e1e:	98 17       	cp	r25, r24
    1e20:	48 f0       	brcs	.+18     	; 0x1e34 <xTaskResumeAll+0x152>
    1e22:	40 93 63 10 	sts	0x1063, r20	; 0x801063 <xYieldPending>
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <xTaskResumeAll+0x152>
    1e28:	e0 e0       	ldi	r30, 0x00	; 0
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	06 e8       	ldi	r16, 0x86	; 134
    1e2e:	10 e1       	ldi	r17, 0x10	; 16
    1e30:	3b e0       	ldi	r19, 0x0B	; 11
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	d8 01       	movw	r26, r16
    1e36:	8c 91       	ld	r24, X
    1e38:	81 11       	cpse	r24, r1
    1e3a:	6c cf       	rjmp	.-296    	; 0x1d14 <xTaskResumeAll+0x32>
    1e3c:	ef 2b       	or	r30, r31
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <xTaskResumeAll+0x160>
    1e40:	d2 db       	rcall	.-2140   	; 0x15e6 <prvResetNextTaskUnblockTime>
    1e42:	c0 90 64 10 	lds	r12, 0x1064	; 0x801064 <xPendedTicks>
    1e46:	d0 90 65 10 	lds	r13, 0x1065	; 0x801065 <xPendedTicks+0x1>
    1e4a:	e0 90 66 10 	lds	r14, 0x1066	; 0x801066 <xPendedTicks+0x2>
    1e4e:	f0 90 67 10 	lds	r15, 0x1067	; 0x801067 <xPendedTicks+0x3>
    1e52:	c1 14       	cp	r12, r1
    1e54:	d1 04       	cpc	r13, r1
    1e56:	e1 04       	cpc	r14, r1
    1e58:	f1 04       	cpc	r15, r1
    1e5a:	99 f0       	breq	.+38     	; 0x1e82 <xTaskResumeAll+0x1a0>
    1e5c:	c1 e0       	ldi	r28, 0x01	; 1
    1e5e:	11 de       	rcall	.-990    	; 0x1a82 <xTaskIncrementTick>
    1e60:	81 11       	cpse	r24, r1
    1e62:	c0 93 63 10 	sts	0x1063, r28	; 0x801063 <xYieldPending>
    1e66:	b1 e0       	ldi	r27, 0x01	; 1
    1e68:	cb 1a       	sub	r12, r27
    1e6a:	d1 08       	sbc	r13, r1
    1e6c:	e1 08       	sbc	r14, r1
    1e6e:	f1 08       	sbc	r15, r1
    1e70:	b1 f7       	brne	.-20     	; 0x1e5e <xTaskResumeAll+0x17c>
    1e72:	10 92 64 10 	sts	0x1064, r1	; 0x801064 <xPendedTicks>
    1e76:	10 92 65 10 	sts	0x1065, r1	; 0x801065 <xPendedTicks+0x1>
    1e7a:	10 92 66 10 	sts	0x1066, r1	; 0x801066 <xPendedTicks+0x2>
    1e7e:	10 92 67 10 	sts	0x1067, r1	; 0x801067 <xPendedTicks+0x3>
    1e82:	80 91 63 10 	lds	r24, 0x1063	; 0x801063 <xYieldPending>
    1e86:	88 23       	and	r24, r24
    1e88:	31 f0       	breq	.+12     	; 0x1e96 <xTaskResumeAll+0x1b4>
    1e8a:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <xTaskResumeAll+0x1b6>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <xTaskResumeAll+0x1b6>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	df 90       	pop	r13
    1eaa:	cf 90       	pop	r12
    1eac:	08 95       	ret

00001eae <xTaskDelayUntil>:
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	ec 01       	movw	r28, r24
    1ec0:	6a 01       	movw	r12, r20
    1ec2:	7b 01       	movw	r14, r22
    1ec4:	ca dd       	rcall	.-1132   	; 0x1a5a <vTaskSuspendAll>
    1ec6:	00 91 6a 10 	lds	r16, 0x106A	; 0x80106a <xTickCount>
    1eca:	10 91 6b 10 	lds	r17, 0x106B	; 0x80106b <xTickCount+0x1>
    1ece:	20 91 6c 10 	lds	r18, 0x106C	; 0x80106c <xTickCount+0x2>
    1ed2:	30 91 6d 10 	lds	r19, 0x106D	; 0x80106d <xTickCount+0x3>
    1ed6:	88 81       	ld	r24, Y
    1ed8:	99 81       	ldd	r25, Y+1	; 0x01
    1eda:	aa 81       	ldd	r26, Y+2	; 0x02
    1edc:	bb 81       	ldd	r27, Y+3	; 0x03
    1ede:	ac 01       	movw	r20, r24
    1ee0:	bd 01       	movw	r22, r26
    1ee2:	4c 0d       	add	r20, r12
    1ee4:	5d 1d       	adc	r21, r13
    1ee6:	6e 1d       	adc	r22, r14
    1ee8:	7f 1d       	adc	r23, r15
    1eea:	08 17       	cp	r16, r24
    1eec:	19 07       	cpc	r17, r25
    1eee:	2a 07       	cpc	r18, r26
    1ef0:	3b 07       	cpc	r19, r27
    1ef2:	b8 f4       	brcc	.+46     	; 0x1f22 <xTaskDelayUntil+0x74>
    1ef4:	48 17       	cp	r20, r24
    1ef6:	59 07       	cpc	r21, r25
    1ef8:	6a 07       	cpc	r22, r26
    1efa:	7b 07       	cpc	r23, r27
    1efc:	90 f5       	brcc	.+100    	; 0x1f62 <xTaskDelayUntil+0xb4>
    1efe:	ff 24       	eor	r15, r15
    1f00:	f3 94       	inc	r15
    1f02:	04 17       	cp	r16, r20
    1f04:	15 07       	cpc	r17, r21
    1f06:	26 07       	cpc	r18, r22
    1f08:	37 07       	cpc	r19, r23
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <xTaskDelayUntil+0x60>
    1f0c:	f1 2c       	mov	r15, r1
    1f0e:	48 83       	st	Y, r20
    1f10:	59 83       	std	Y+1, r21	; 0x01
    1f12:	6a 83       	std	Y+2, r22	; 0x02
    1f14:	7b 83       	std	Y+3, r23	; 0x03
    1f16:	04 17       	cp	r16, r20
    1f18:	15 07       	cpc	r17, r21
    1f1a:	26 07       	cpc	r18, r22
    1f1c:	37 07       	cpc	r19, r23
    1f1e:	a0 f4       	brcc	.+40     	; 0x1f48 <xTaskDelayUntil+0x9a>
    1f20:	0b c0       	rjmp	.+22     	; 0x1f38 <xTaskDelayUntil+0x8a>
    1f22:	48 17       	cp	r20, r24
    1f24:	59 07       	cpc	r21, r25
    1f26:	6a 07       	cpc	r22, r26
    1f28:	7b 07       	cpc	r23, r27
    1f2a:	a0 f0       	brcs	.+40     	; 0x1f54 <xTaskDelayUntil+0xa6>
    1f2c:	04 17       	cp	r16, r20
    1f2e:	15 07       	cpc	r17, r21
    1f30:	26 07       	cpc	r18, r22
    1f32:	37 07       	cpc	r19, r23
    1f34:	78 f0       	brcs	.+30     	; 0x1f54 <xTaskDelayUntil+0xa6>
    1f36:	15 c0       	rjmp	.+42     	; 0x1f62 <xTaskDelayUntil+0xb4>
    1f38:	cb 01       	movw	r24, r22
    1f3a:	ba 01       	movw	r22, r20
    1f3c:	60 1b       	sub	r22, r16
    1f3e:	71 0b       	sbc	r23, r17
    1f40:	82 0b       	sbc	r24, r18
    1f42:	93 0b       	sbc	r25, r19
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	76 db       	rcall	.-2324   	; 0x1634 <prvAddCurrentTaskToDelayedList>
    1f48:	cc de       	rcall	.-616    	; 0x1ce2 <xTaskResumeAll>
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	10 c0       	rjmp	.+32     	; 0x1f6e <xTaskDelayUntil+0xc0>
    1f4e:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    1f52:	0d c0       	rjmp	.+26     	; 0x1f6e <xTaskDelayUntil+0xc0>
    1f54:	48 83       	st	Y, r20
    1f56:	59 83       	std	Y+1, r21	; 0x01
    1f58:	6a 83       	std	Y+2, r22	; 0x02
    1f5a:	7b 83       	std	Y+3, r23	; 0x03
    1f5c:	ff 24       	eor	r15, r15
    1f5e:	f3 94       	inc	r15
    1f60:	eb cf       	rjmp	.-42     	; 0x1f38 <xTaskDelayUntil+0x8a>
    1f62:	48 83       	st	Y, r20
    1f64:	59 83       	std	Y+1, r21	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
    1f68:	7b 83       	std	Y+3, r23	; 0x03
    1f6a:	f1 2c       	mov	r15, r1
    1f6c:	ed cf       	rjmp	.-38     	; 0x1f48 <xTaskDelayUntil+0x9a>
    1f6e:	8f 2d       	mov	r24, r15
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	08 95       	ret

00001f82 <vTaskDelay>:
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	6b 01       	movw	r12, r22
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	67 2b       	or	r22, r23
    1f90:	68 2b       	or	r22, r24
    1f92:	69 2b       	or	r22, r25
    1f94:	41 f0       	breq	.+16     	; 0x1fa6 <vTaskDelay+0x24>
    1f96:	61 dd       	rcall	.-1342   	; 0x1a5a <vTaskSuspendAll>
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	b6 01       	movw	r22, r12
    1f9e:	4a db       	rcall	.-2412   	; 0x1634 <prvAddCurrentTaskToDelayedList>
    1fa0:	a0 de       	rcall	.-704    	; 0x1ce2 <xTaskResumeAll>
    1fa2:	81 11       	cpse	r24, r1
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <vTaskDelay+0x28>
    1fa6:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	df 90       	pop	r13
    1fb0:	cf 90       	pop	r12
    1fb2:	08 95       	ret

00001fb4 <vTaskSwitchContext>:
    1fb4:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1fb8:	88 23       	and	r24, r24
    1fba:	21 f0       	breq	.+8      	; 0x1fc4 <vTaskSwitchContext+0x10>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1fc2:	08 95       	ret
    1fc4:	10 92 63 10 	sts	0x1063, r1	; 0x801063 <xYieldPending>
    1fc8:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1fcc:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1fd0:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1fd4:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1fd8:	2d 91       	ld	r18, X+
    1fda:	3c 91       	ld	r19, X
    1fdc:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fde:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fe0:	82 17       	cp	r24, r18
    1fe2:	93 07       	cpc	r25, r19
    1fe4:	58 f0       	brcs	.+22     	; 0x1ffc <vTaskSwitchContext+0x48>
    1fe6:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1fea:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1fee:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1ff2:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1ff6:	63 5e       	subi	r22, 0xE3	; 227
    1ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffa:	b5 d6       	rcall	.+3434   	; 0x2d66 <vApplicationStackOverflowHook>
    1ffc:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	9b e0       	ldi	r25, 0x0B	; 11
    2006:	89 9f       	mul	r24, r25
    2008:	f0 01       	movw	r30, r0
    200a:	11 24       	eor	r1, r1
    200c:	e5 55       	subi	r30, 0x55	; 85
    200e:	ff 4e       	sbci	r31, 0xEF	; 239
    2010:	90 81       	ld	r25, Z
    2012:	91 11       	cpse	r25, r1
    2014:	0e c0       	rjmp	.+28     	; 0x2032 <vTaskSwitchContext+0x7e>
    2016:	4b e0       	ldi	r20, 0x0B	; 11
    2018:	81 50       	subi	r24, 0x01	; 1
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	42 9f       	mul	r20, r18
    2020:	f0 01       	movw	r30, r0
    2022:	43 9f       	mul	r20, r19
    2024:	f0 0d       	add	r31, r0
    2026:	11 24       	eor	r1, r1
    2028:	e5 55       	subi	r30, 0x55	; 85
    202a:	ff 4e       	sbci	r31, 0xEF	; 239
    202c:	90 81       	ld	r25, Z
    202e:	99 23       	and	r25, r25
    2030:	99 f3       	breq	.-26     	; 0x2018 <vTaskSwitchContext+0x64>
    2032:	9b e0       	ldi	r25, 0x0B	; 11
    2034:	92 9f       	mul	r25, r18
    2036:	a0 01       	movw	r20, r0
    2038:	93 9f       	mul	r25, r19
    203a:	50 0d       	add	r21, r0
    203c:	11 24       	eor	r1, r1
    203e:	da 01       	movw	r26, r20
    2040:	a5 55       	subi	r26, 0x55	; 85
    2042:	bf 4e       	sbci	r27, 0xEF	; 239
    2044:	11 96       	adiw	r26, 0x01	; 1
    2046:	ed 91       	ld	r30, X+
    2048:	fc 91       	ld	r31, X
    204a:	12 97       	sbiw	r26, 0x02	; 2
    204c:	04 80       	ldd	r0, Z+4	; 0x04
    204e:	f5 81       	ldd	r31, Z+5	; 0x05
    2050:	e0 2d       	mov	r30, r0
    2052:	12 96       	adiw	r26, 0x02	; 2
    2054:	fc 93       	st	X, r31
    2056:	ee 93       	st	-X, r30
    2058:	11 97       	sbiw	r26, 0x01	; 1
    205a:	42 55       	subi	r20, 0x52	; 82
    205c:	5f 4e       	sbci	r21, 0xEF	; 239
    205e:	e4 17       	cp	r30, r20
    2060:	f5 07       	cpc	r31, r21
    2062:	29 f4       	brne	.+10     	; 0x206e <vTaskSwitchContext+0xba>
    2064:	44 81       	ldd	r20, Z+4	; 0x04
    2066:	55 81       	ldd	r21, Z+5	; 0x05
    2068:	fd 01       	movw	r30, r26
    206a:	52 83       	std	Z+2, r21	; 0x02
    206c:	41 83       	std	Z+1, r20	; 0x01
    206e:	9b e0       	ldi	r25, 0x0B	; 11
    2070:	92 9f       	mul	r25, r18
    2072:	f0 01       	movw	r30, r0
    2074:	93 9f       	mul	r25, r19
    2076:	f0 0d       	add	r31, r0
    2078:	11 24       	eor	r1, r1
    207a:	e5 55       	subi	r30, 0x55	; 85
    207c:	ff 4e       	sbci	r31, 0xEF	; 239
    207e:	01 80       	ldd	r0, Z+1	; 0x01
    2080:	f2 81       	ldd	r31, Z+2	; 0x02
    2082:	e0 2d       	mov	r30, r0
    2084:	20 85       	ldd	r18, Z+8	; 0x08
    2086:	31 85       	ldd	r19, Z+9	; 0x09
    2088:	30 93 1a 11 	sts	0x111A, r19	; 0x80111a <pxCurrentTCB+0x1>
    208c:	20 93 19 11 	sts	0x1119, r18	; 0x801119 <pxCurrentTCB>
    2090:	80 93 69 10 	sts	0x1069, r24	; 0x801069 <uxTopReadyPriority>
    2094:	08 95       	ret

00002096 <vTaskPlaceOnEventList>:
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	6a 01       	movw	r12, r20
    20a0:	7b 01       	movw	r14, r22
    20a2:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    20a6:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    20aa:	62 5f       	subi	r22, 0xF2	; 242
    20ac:	7f 4f       	sbci	r23, 0xFF	; 255
    20ae:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <vListInsert>
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	c7 01       	movw	r24, r14
    20b6:	b6 01       	movw	r22, r12
    20b8:	bd da       	rcall	.-2694   	; 0x1634 <prvAddCurrentTaskToDelayedList>
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	08 95       	ret

000020c4 <vTaskPlaceOnEventListRestricted>:
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	fc 01       	movw	r30, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	ba 01       	movw	r22, r20
    20ce:	a1 81       	ldd	r26, Z+1	; 0x01
    20d0:	b2 81       	ldd	r27, Z+2	; 0x02
    20d2:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    20d6:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    20da:	bb 8b       	std	Y+19, r27	; 0x13
    20dc:	aa 8b       	std	Y+18, r26	; 0x12
    20de:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    20e2:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    20e6:	16 96       	adiw	r26, 0x06	; 6
    20e8:	4d 91       	ld	r20, X+
    20ea:	5c 91       	ld	r21, X
    20ec:	17 97       	sbiw	r26, 0x07	; 7
    20ee:	5d 8b       	std	Y+21, r21	; 0x15
    20f0:	4c 8b       	std	Y+20, r20	; 0x14
    20f2:	16 96       	adiw	r26, 0x06	; 6
    20f4:	cd 91       	ld	r28, X+
    20f6:	dc 91       	ld	r29, X
    20f8:	17 97       	sbiw	r26, 0x07	; 7
    20fa:	40 91 19 11 	lds	r20, 0x1119	; 0x801119 <pxCurrentTCB>
    20fe:	50 91 1a 11 	lds	r21, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2102:	42 5f       	subi	r20, 0xF2	; 242
    2104:	5f 4f       	sbci	r21, 0xFF	; 255
    2106:	5d 83       	std	Y+5, r21	; 0x05
    2108:	4c 83       	std	Y+4, r20	; 0x04
    210a:	40 91 19 11 	lds	r20, 0x1119	; 0x801119 <pxCurrentTCB>
    210e:	50 91 1a 11 	lds	r21, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2112:	42 5f       	subi	r20, 0xF2	; 242
    2114:	5f 4f       	sbci	r21, 0xFF	; 255
    2116:	17 96       	adiw	r26, 0x07	; 7
    2118:	5c 93       	st	X, r21
    211a:	4e 93       	st	-X, r20
    211c:	16 97       	sbiw	r26, 0x06	; 6
    211e:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    2122:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2126:	59 96       	adiw	r26, 0x19	; 25
    2128:	fc 93       	st	X, r31
    212a:	ee 93       	st	-X, r30
    212c:	58 97       	sbiw	r26, 0x18	; 24
    212e:	30 81       	ld	r19, Z
    2130:	3f 5f       	subi	r19, 0xFF	; 255
    2132:	30 83       	st	Z, r19
    2134:	22 23       	and	r18, r18
    2136:	19 f0       	breq	.+6      	; 0x213e <vTaskPlaceOnEventListRestricted+0x7a>
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	7f ef       	ldi	r23, 0xFF	; 255
    213c:	cb 01       	movw	r24, r22
    213e:	42 2f       	mov	r20, r18
    2140:	79 da       	rcall	.-2830   	; 0x1634 <prvAddCurrentTaskToDelayedList>
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

00002148 <xTaskRemoveFromEventList>:
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	dc 01       	movw	r26, r24
    214e:	17 96       	adiw	r26, 0x07	; 7
    2150:	ed 91       	ld	r30, X+
    2152:	fc 91       	ld	r31, X
    2154:	18 97       	sbiw	r26, 0x08	; 8
    2156:	00 84       	ldd	r0, Z+8	; 0x08
    2158:	f1 85       	ldd	r31, Z+9	; 0x09
    215a:	e0 2d       	mov	r30, r0
    215c:	a0 8d       	ldd	r26, Z+24	; 0x18
    215e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2160:	c2 89       	ldd	r28, Z+18	; 0x12
    2162:	d3 89       	ldd	r29, Z+19	; 0x13
    2164:	84 89       	ldd	r24, Z+20	; 0x14
    2166:	95 89       	ldd	r25, Z+21	; 0x15
    2168:	9f 83       	std	Y+7, r25	; 0x07
    216a:	8e 83       	std	Y+6, r24	; 0x06
    216c:	c4 89       	ldd	r28, Z+20	; 0x14
    216e:	d5 89       	ldd	r29, Z+21	; 0x15
    2170:	82 89       	ldd	r24, Z+18	; 0x12
    2172:	93 89       	ldd	r25, Z+19	; 0x13
    2174:	9d 83       	std	Y+5, r25	; 0x05
    2176:	8c 83       	std	Y+4, r24	; 0x04
    2178:	9f 01       	movw	r18, r30
    217a:	22 5f       	subi	r18, 0xF2	; 242
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	11 96       	adiw	r26, 0x01	; 1
    2180:	8d 91       	ld	r24, X+
    2182:	9c 91       	ld	r25, X
    2184:	12 97       	sbiw	r26, 0x02	; 2
    2186:	82 17       	cp	r24, r18
    2188:	93 07       	cpc	r25, r19
    218a:	31 f4       	brne	.+12     	; 0x2198 <xTaskRemoveFromEventList+0x50>
    218c:	84 89       	ldd	r24, Z+20	; 0x14
    218e:	95 89       	ldd	r25, Z+21	; 0x15
    2190:	12 96       	adiw	r26, 0x02	; 2
    2192:	9c 93       	st	X, r25
    2194:	8e 93       	st	-X, r24
    2196:	11 97       	sbiw	r26, 0x01	; 1
    2198:	11 8e       	std	Z+25, r1	; 0x19
    219a:	10 8e       	std	Z+24, r1	; 0x18
    219c:	8c 91       	ld	r24, X
    219e:	81 50       	subi	r24, 0x01	; 1
    21a0:	8c 93       	st	X, r24
    21a2:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    21a6:	81 11       	cpse	r24, r1
    21a8:	52 c0       	rjmp	.+164    	; 0x224e <__stack+0x4f>
    21aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    21ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    21ae:	c6 81       	ldd	r28, Z+6	; 0x06
    21b0:	d7 81       	ldd	r29, Z+7	; 0x07
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	91 85       	ldd	r25, Z+9	; 0x09
    21b6:	9f 83       	std	Y+7, r25	; 0x07
    21b8:	8e 83       	std	Y+6, r24	; 0x06
    21ba:	c0 85       	ldd	r28, Z+8	; 0x08
    21bc:	d1 85       	ldd	r29, Z+9	; 0x09
    21be:	86 81       	ldd	r24, Z+6	; 0x06
    21c0:	97 81       	ldd	r25, Z+7	; 0x07
    21c2:	9d 83       	std	Y+5, r25	; 0x05
    21c4:	8c 83       	std	Y+4, r24	; 0x04
    21c6:	9f 01       	movw	r18, r30
    21c8:	2e 5f       	subi	r18, 0xFE	; 254
    21ca:	3f 4f       	sbci	r19, 0xFF	; 255
    21cc:	11 96       	adiw	r26, 0x01	; 1
    21ce:	8d 91       	ld	r24, X+
    21d0:	9c 91       	ld	r25, X
    21d2:	12 97       	sbiw	r26, 0x02	; 2
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	31 f4       	brne	.+12     	; 0x21e6 <xTaskRemoveFromEventList+0x9e>
    21da:	80 85       	ldd	r24, Z+8	; 0x08
    21dc:	91 85       	ldd	r25, Z+9	; 0x09
    21de:	12 96       	adiw	r26, 0x02	; 2
    21e0:	9c 93       	st	X, r25
    21e2:	8e 93       	st	-X, r24
    21e4:	11 97       	sbiw	r26, 0x01	; 1
    21e6:	15 86       	std	Z+13, r1	; 0x0d
    21e8:	14 86       	std	Z+12, r1	; 0x0c
    21ea:	8c 91       	ld	r24, X
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	8c 93       	st	X, r24
    21f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21f2:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    21f6:	8a 17       	cp	r24, r26
    21f8:	10 f4       	brcc	.+4      	; 0x21fe <xTaskRemoveFromEventList+0xb6>
    21fa:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    21fe:	8b e0       	ldi	r24, 0x0B	; 11
    2200:	8a 9f       	mul	r24, r26
    2202:	d0 01       	movw	r26, r0
    2204:	11 24       	eor	r1, r1
    2206:	a5 55       	subi	r26, 0x55	; 85
    2208:	bf 4e       	sbci	r27, 0xEF	; 239
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	0d 90       	ld	r0, X+
    220e:	bc 91       	ld	r27, X
    2210:	a0 2d       	mov	r26, r0
    2212:	b7 83       	std	Z+7, r27	; 0x07
    2214:	a6 83       	std	Z+6, r26	; 0x06
    2216:	16 96       	adiw	r26, 0x06	; 6
    2218:	4d 91       	ld	r20, X+
    221a:	5c 91       	ld	r21, X
    221c:	17 97       	sbiw	r26, 0x07	; 7
    221e:	51 87       	std	Z+9, r21	; 0x09
    2220:	40 87       	std	Z+8, r20	; 0x08
    2222:	16 96       	adiw	r26, 0x06	; 6
    2224:	cd 91       	ld	r28, X+
    2226:	dc 91       	ld	r29, X
    2228:	17 97       	sbiw	r26, 0x07	; 7
    222a:	3d 83       	std	Y+5, r19	; 0x05
    222c:	2c 83       	std	Y+4, r18	; 0x04
    222e:	17 96       	adiw	r26, 0x07	; 7
    2230:	3c 93       	st	X, r19
    2232:	2e 93       	st	-X, r18
    2234:	16 97       	sbiw	r26, 0x06	; 6
    2236:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2238:	8a 9f       	mul	r24, r26
    223a:	d0 01       	movw	r26, r0
    223c:	11 24       	eor	r1, r1
    223e:	a5 55       	subi	r26, 0x55	; 85
    2240:	bf 4e       	sbci	r27, 0xEF	; 239
    2242:	b5 87       	std	Z+13, r27	; 0x0d
    2244:	a4 87       	std	Z+12, r26	; 0x0c
    2246:	8c 91       	ld	r24, X
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	8c 93       	st	X, r24
    224c:	1c c0       	rjmp	.+56     	; 0x2286 <__stack+0x87>
    224e:	46 e8       	ldi	r20, 0x86	; 134
    2250:	50 e1       	ldi	r21, 0x10	; 16
    2252:	da 01       	movw	r26, r20
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	cd 91       	ld	r28, X+
    2258:	dc 91       	ld	r29, X
    225a:	12 97       	sbiw	r26, 0x02	; 2
    225c:	d3 8b       	std	Z+19, r29	; 0x13
    225e:	c2 8b       	std	Z+18, r28	; 0x12
    2260:	8e 81       	ldd	r24, Y+6	; 0x06
    2262:	9f 81       	ldd	r25, Y+7	; 0x07
    2264:	95 8b       	std	Z+21, r25	; 0x15
    2266:	84 8b       	std	Z+20, r24	; 0x14
    2268:	8e 81       	ldd	r24, Y+6	; 0x06
    226a:	9f 81       	ldd	r25, Y+7	; 0x07
    226c:	dc 01       	movw	r26, r24
    226e:	15 96       	adiw	r26, 0x05	; 5
    2270:	3c 93       	st	X, r19
    2272:	2e 93       	st	-X, r18
    2274:	14 97       	sbiw	r26, 0x04	; 4
    2276:	3f 83       	std	Y+7, r19	; 0x07
    2278:	2e 83       	std	Y+6, r18	; 0x06
    227a:	51 8f       	std	Z+25, r21	; 0x19
    227c:	40 8f       	std	Z+24, r20	; 0x18
    227e:	da 01       	movw	r26, r20
    2280:	8c 91       	ld	r24, X
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	8c 93       	st	X, r24
    2286:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    228a:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    228e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2290:	5a 96       	adiw	r26, 0x1a	; 26
    2292:	8c 91       	ld	r24, X
    2294:	89 17       	cp	r24, r25
    2296:	20 f4       	brcc	.+8      	; 0x22a0 <__stack+0xa1>
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <vTaskSetTimeOutState>:
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	0f 92       	push	r0
    22ae:	20 91 62 10 	lds	r18, 0x1062	; 0x801062 <xNumOfOverflows>
    22b2:	fc 01       	movw	r30, r24
    22b4:	20 83       	st	Z, r18
    22b6:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    22ba:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    22be:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    22c2:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    22c6:	41 83       	std	Z+1, r20	; 0x01
    22c8:	52 83       	std	Z+2, r21	; 0x02
    22ca:	63 83       	std	Z+3, r22	; 0x03
    22cc:	74 83       	std	Z+4, r23	; 0x04
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	08 95       	ret

000022d4 <vTaskInternalSetTimeOutState>:
    22d4:	20 91 62 10 	lds	r18, 0x1062	; 0x801062 <xNumOfOverflows>
    22d8:	fc 01       	movw	r30, r24
    22da:	20 83       	st	Z, r18
    22dc:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    22e0:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    22e4:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    22e8:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    22ec:	41 83       	std	Z+1, r20	; 0x01
    22ee:	52 83       	std	Z+2, r21	; 0x02
    22f0:	63 83       	std	Z+3, r22	; 0x03
    22f2:	74 83       	std	Z+4, r23	; 0x04
    22f4:	08 95       	ret

000022f6 <xTaskCheckForTimeOut>:
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	fb 01       	movw	r30, r22
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	0f 92       	push	r0
    230e:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    2312:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    2316:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    231a:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    231e:	00 81       	ld	r16, Z
    2320:	11 81       	ldd	r17, Z+1	; 0x01
    2322:	22 81       	ldd	r18, Z+2	; 0x02
    2324:	33 81       	ldd	r19, Z+3	; 0x03
    2326:	0f 3f       	cpi	r16, 0xFF	; 255
    2328:	af ef       	ldi	r26, 0xFF	; 255
    232a:	1a 07       	cpc	r17, r26
    232c:	2a 07       	cpc	r18, r26
    232e:	3a 07       	cpc	r19, r26
    2330:	79 f1       	breq	.+94     	; 0x2390 <xTaskCheckForTimeOut+0x9a>
    2332:	ec 01       	movw	r28, r24
    2334:	c9 80       	ldd	r12, Y+1	; 0x01
    2336:	da 80       	ldd	r13, Y+2	; 0x02
    2338:	eb 80       	ldd	r14, Y+3	; 0x03
    233a:	fc 80       	ldd	r15, Y+4	; 0x04
    233c:	a0 91 62 10 	lds	r26, 0x1062	; 0x801062 <xNumOfOverflows>
    2340:	b8 81       	ld	r27, Y
    2342:	ba 17       	cp	r27, r26
    2344:	59 f0       	breq	.+22     	; 0x235c <xTaskCheckForTimeOut+0x66>
    2346:	4c 15       	cp	r20, r12
    2348:	5d 05       	cpc	r21, r13
    234a:	6e 05       	cpc	r22, r14
    234c:	7f 05       	cpc	r23, r15
    234e:	30 f0       	brcs	.+12     	; 0x235c <xTaskCheckForTimeOut+0x66>
    2350:	10 82       	st	Z, r1
    2352:	11 82       	std	Z+1, r1	; 0x01
    2354:	12 82       	std	Z+2, r1	; 0x02
    2356:	13 82       	std	Z+3, r1	; 0x03
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	1b c0       	rjmp	.+54     	; 0x2392 <xTaskCheckForTimeOut+0x9c>
    235c:	4c 19       	sub	r20, r12
    235e:	5d 09       	sbc	r21, r13
    2360:	6e 09       	sbc	r22, r14
    2362:	7f 09       	sbc	r23, r15
    2364:	40 17       	cp	r20, r16
    2366:	51 07       	cpc	r21, r17
    2368:	62 07       	cpc	r22, r18
    236a:	73 07       	cpc	r23, r19
    236c:	58 f4       	brcc	.+22     	; 0x2384 <xTaskCheckForTimeOut+0x8e>
    236e:	04 1b       	sub	r16, r20
    2370:	15 0b       	sbc	r17, r21
    2372:	26 0b       	sbc	r18, r22
    2374:	37 0b       	sbc	r19, r23
    2376:	00 83       	st	Z, r16
    2378:	11 83       	std	Z+1, r17	; 0x01
    237a:	22 83       	std	Z+2, r18	; 0x02
    237c:	33 83       	std	Z+3, r19	; 0x03
    237e:	aa df       	rcall	.-172    	; 0x22d4 <vTaskInternalSetTimeOutState>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	07 c0       	rjmp	.+14     	; 0x2392 <xTaskCheckForTimeOut+0x9c>
    2384:	10 82       	st	Z, r1
    2386:	11 82       	std	Z+1, r1	; 0x01
    2388:	12 82       	std	Z+2, r1	; 0x02
    238a:	13 82       	std	Z+3, r1	; 0x03
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <xTaskCheckForTimeOut+0x9c>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	0f 90       	pop	r0
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	df 90       	pop	r13
    23a4:	cf 90       	pop	r12
    23a6:	08 95       	ret

000023a8 <vTaskMissedYield>:
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    23ae:	08 95       	ret

000023b0 <xTaskGetCurrentTaskHandle>:
    23b0:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    23b4:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    23b8:	08 95       	ret

000023ba <xTaskGetSchedulerState>:
    23ba:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    23be:	88 23       	and	r24, r24
    23c0:	31 f0       	breq	.+12     	; 0x23ce <xTaskGetSchedulerState+0x14>
    23c2:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    23c6:	88 23       	and	r24, r24
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <xTaskGetSchedulerState+0x18>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	08 95       	ret
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	08 95       	ret
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	08 95       	ret

000023d6 <xTaskPriorityDisinherit>:
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	fc 01       	movw	r30, r24
    23e0:	89 2b       	or	r24, r25
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <xTaskPriorityDisinherit+0x10>
    23e4:	49 c0       	rjmp	.+146    	; 0x2478 <xTaskPriorityDisinherit+0xa2>
    23e6:	86 a5       	ldd	r24, Z+46	; 0x2e
    23e8:	81 50       	subi	r24, 0x01	; 1
    23ea:	86 a7       	std	Z+46, r24	; 0x2e
    23ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    23ee:	95 a5       	ldd	r25, Z+45	; 0x2d
    23f0:	29 17       	cp	r18, r25
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <xTaskPriorityDisinherit+0x20>
    23f4:	43 c0       	rjmp	.+134    	; 0x247c <xTaskPriorityDisinherit+0xa6>
    23f6:	81 11       	cpse	r24, r1
    23f8:	43 c0       	rjmp	.+134    	; 0x2480 <xTaskPriorityDisinherit+0xaa>
    23fa:	ef 01       	movw	r28, r30
    23fc:	8f 01       	movw	r16, r30
    23fe:	0e 5f       	subi	r16, 0xFE	; 254
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	c8 01       	movw	r24, r16
    2404:	0e 94 b9 03 	call	0x772	; 0x772 <uxListRemove>
    2408:	ed a5       	ldd	r30, Y+45	; 0x2d
    240a:	ea 8f       	std	Y+26, r30	; 0x1a
    240c:	8a e0       	ldi	r24, 0x0A	; 10
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e0       	ldi	r26, 0x00	; 0
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	8e 1b       	sub	r24, r30
    2416:	91 09       	sbc	r25, r1
    2418:	a1 09       	sbc	r26, r1
    241a:	b1 09       	sbc	r27, r1
    241c:	8e 87       	std	Y+14, r24	; 0x0e
    241e:	9f 87       	std	Y+15, r25	; 0x0f
    2420:	a8 8b       	std	Y+16, r26	; 0x10
    2422:	b9 8b       	std	Y+17, r27	; 0x11
    2424:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    2428:	8e 17       	cp	r24, r30
    242a:	10 f4       	brcc	.+4      	; 0x2430 <xTaskPriorityDisinherit+0x5a>
    242c:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    2430:	8b e0       	ldi	r24, 0x0B	; 11
    2432:	8e 9f       	mul	r24, r30
    2434:	f0 01       	movw	r30, r0
    2436:	11 24       	eor	r1, r1
    2438:	e5 55       	subi	r30, 0x55	; 85
    243a:	ff 4e       	sbci	r31, 0xEF	; 239
    243c:	01 80       	ldd	r0, Z+1	; 0x01
    243e:	f2 81       	ldd	r31, Z+2	; 0x02
    2440:	e0 2d       	mov	r30, r0
    2442:	ff 83       	std	Y+7, r31	; 0x07
    2444:	ee 83       	std	Y+6, r30	; 0x06
    2446:	26 81       	ldd	r18, Z+6	; 0x06
    2448:	37 81       	ldd	r19, Z+7	; 0x07
    244a:	39 87       	std	Y+9, r19	; 0x09
    244c:	28 87       	std	Y+8, r18	; 0x08
    244e:	a6 81       	ldd	r26, Z+6	; 0x06
    2450:	b7 81       	ldd	r27, Z+7	; 0x07
    2452:	15 96       	adiw	r26, 0x05	; 5
    2454:	1c 93       	st	X, r17
    2456:	0e 93       	st	-X, r16
    2458:	14 97       	sbiw	r26, 0x04	; 4
    245a:	17 83       	std	Z+7, r17	; 0x07
    245c:	06 83       	std	Z+6, r16	; 0x06
    245e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2460:	8e 9f       	mul	r24, r30
    2462:	f0 01       	movw	r30, r0
    2464:	11 24       	eor	r1, r1
    2466:	e5 55       	subi	r30, 0x55	; 85
    2468:	ff 4e       	sbci	r31, 0xEF	; 239
    246a:	fd 87       	std	Y+13, r31	; 0x0d
    246c:	ec 87       	std	Y+12, r30	; 0x0c
    246e:	80 81       	ld	r24, Z
    2470:	8f 5f       	subi	r24, 0xFF	; 255
    2472:	80 83       	st	Z, r24
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	05 c0       	rjmp	.+10     	; 0x2482 <xTaskPriorityDisinherit+0xac>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <xTaskPriorityDisinherit+0xac>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <xTaskPriorityDisinherit+0xac>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <xTaskGenericNotifyWait>:
    248c:	4f 92       	push	r4
    248e:	5f 92       	push	r5
    2490:	6f 92       	push	r6
    2492:	7f 92       	push	r7
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	28 01       	movw	r4, r16
    24aa:	39 01       	movw	r6, r18
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	0f 92       	push	r0
    24b2:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    24b6:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    24ba:	c8 2f       	mov	r28, r24
    24bc:	d0 e0       	ldi	r29, 0x00	; 0
    24be:	ec 0f       	add	r30, r28
    24c0:	fd 1f       	adc	r31, r29
    24c2:	83 a9       	ldd	r24, Z+51	; 0x33
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	71 f1       	breq	.+92     	; 0x2524 <xTaskGenericNotifyWait+0x98>
    24c8:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    24cc:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    24d0:	ce 01       	movw	r24, r28
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	e8 0f       	add	r30, r24
    24dc:	f9 1f       	adc	r31, r25
    24de:	87 a5       	ldd	r24, Z+47	; 0x2f
    24e0:	90 a9       	ldd	r25, Z+48	; 0x30
    24e2:	a1 a9       	ldd	r26, Z+49	; 0x31
    24e4:	b2 a9       	ldd	r27, Z+50	; 0x32
    24e6:	40 95       	com	r20
    24e8:	50 95       	com	r21
    24ea:	60 95       	com	r22
    24ec:	70 95       	com	r23
    24ee:	48 23       	and	r20, r24
    24f0:	59 23       	and	r21, r25
    24f2:	6a 23       	and	r22, r26
    24f4:	7b 23       	and	r23, r27
    24f6:	47 a7       	std	Z+47, r20	; 0x2f
    24f8:	50 ab       	std	Z+48, r21	; 0x30
    24fa:	61 ab       	std	Z+49, r22	; 0x31
    24fc:	72 ab       	std	Z+50, r23	; 0x32
    24fe:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2502:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2506:	ec 0f       	add	r30, r28
    2508:	fd 1f       	adc	r31, r29
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	83 ab       	std	Z+51, r24	; 0x33
    250e:	a1 14       	cp	r10, r1
    2510:	b1 04       	cpc	r11, r1
    2512:	c1 04       	cpc	r12, r1
    2514:	d1 04       	cpc	r13, r1
    2516:	31 f0       	breq	.+12     	; 0x2524 <xTaskGenericNotifyWait+0x98>
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	c6 01       	movw	r24, r12
    251c:	b5 01       	movw	r22, r10
    251e:	8a d8       	rcall	.-3820   	; 0x1634 <prvAddCurrentTaskToDelayedList>
    2520:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	0f 92       	push	r0
    252e:	e1 14       	cp	r14, r1
    2530:	f1 04       	cpc	r15, r1
    2532:	a1 f0       	breq	.+40     	; 0x255c <xTaskGenericNotifyWait+0xd0>
    2534:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2538:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    253c:	ce 01       	movw	r24, r28
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	e8 0f       	add	r30, r24
    2548:	f9 1f       	adc	r31, r25
    254a:	87 a5       	ldd	r24, Z+47	; 0x2f
    254c:	90 a9       	ldd	r25, Z+48	; 0x30
    254e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2550:	b2 a9       	ldd	r27, Z+50	; 0x32
    2552:	f7 01       	movw	r30, r14
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
    255c:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2560:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2564:	ec 0f       	add	r30, r28
    2566:	fd 1f       	adc	r31, r29
    2568:	83 a9       	ldd	r24, Z+51	; 0x33
    256a:	82 30       	cpi	r24, 0x02	; 2
    256c:	e9 f4       	brne	.+58     	; 0x25a8 <xTaskGenericNotifyWait+0x11c>
    256e:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2572:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2576:	ce 01       	movw	r24, r28
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	e8 0f       	add	r30, r24
    2582:	f9 1f       	adc	r31, r25
    2584:	87 a5       	ldd	r24, Z+47	; 0x2f
    2586:	90 a9       	ldd	r25, Z+48	; 0x30
    2588:	a1 a9       	ldd	r26, Z+49	; 0x31
    258a:	b2 a9       	ldd	r27, Z+50	; 0x32
    258c:	40 94       	com	r4
    258e:	50 94       	com	r5
    2590:	60 94       	com	r6
    2592:	70 94       	com	r7
    2594:	48 22       	and	r4, r24
    2596:	59 22       	and	r5, r25
    2598:	6a 22       	and	r6, r26
    259a:	7b 22       	and	r7, r27
    259c:	47 a6       	std	Z+47, r4	; 0x2f
    259e:	50 aa       	std	Z+48, r5	; 0x30
    25a0:	61 aa       	std	Z+49, r6	; 0x31
    25a2:	72 aa       	std	Z+50, r7	; 0x32
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <xTaskGenericNotifyWait+0x11e>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	20 91 19 11 	lds	r18, 0x1119	; 0x801119 <pxCurrentTCB>
    25ae:	30 91 1a 11 	lds	r19, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    25b2:	c2 0f       	add	r28, r18
    25b4:	d3 1f       	adc	r29, r19
    25b6:	1b aa       	std	Y+51, r1	; 0x33
    25b8:	0f 90       	pop	r0
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	bf 90       	pop	r11
    25ce:	af 90       	pop	r10
    25d0:	7f 90       	pop	r7
    25d2:	6f 90       	pop	r6
    25d4:	5f 90       	pop	r5
    25d6:	4f 90       	pop	r4
    25d8:	08 95       	ret

000025da <xTaskGenericNotify>:
    25da:	8f 92       	push	r8
    25dc:	9f 92       	push	r9
    25de:	af 92       	push	r10
    25e0:	bf 92       	push	r11
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	dc 01       	movw	r26, r24
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	0f 92       	push	r0
    25f4:	e1 14       	cp	r14, r1
    25f6:	f1 04       	cpc	r15, r1
    25f8:	79 f0       	breq	.+30     	; 0x2618 <xTaskGenericNotify+0x3e>
    25fa:	fc 01       	movw	r30, r24
    25fc:	84 e0       	ldi	r24, 0x04	; 4
    25fe:	68 9f       	mul	r22, r24
    2600:	e0 0d       	add	r30, r0
    2602:	f1 1d       	adc	r31, r1
    2604:	11 24       	eor	r1, r1
    2606:	87 a4       	ldd	r8, Z+47	; 0x2f
    2608:	90 a8       	ldd	r9, Z+48	; 0x30
    260a:	a1 a8       	ldd	r10, Z+49	; 0x31
    260c:	b2 a8       	ldd	r11, Z+50	; 0x32
    260e:	f7 01       	movw	r30, r14
    2610:	80 82       	st	Z, r8
    2612:	91 82       	std	Z+1, r9	; 0x01
    2614:	a2 82       	std	Z+2, r10	; 0x02
    2616:	b3 82       	std	Z+3, r11	; 0x03
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	fd 01       	movw	r30, r26
    261c:	e6 0f       	add	r30, r22
    261e:	f7 1f       	adc	r31, r23
    2620:	83 a9       	ldd	r24, Z+51	; 0x33
    2622:	92 e0       	ldi	r25, 0x02	; 2
    2624:	93 ab       	std	Z+51, r25	; 0x33
    2626:	02 30       	cpi	r16, 0x02	; 2
    2628:	f9 f0       	breq	.+62     	; 0x2668 <xTaskGenericNotify+0x8e>
    262a:	18 f4       	brcc	.+6      	; 0x2632 <xTaskGenericNotify+0x58>
    262c:	01 30       	cpi	r16, 0x01	; 1
    262e:	31 f0       	breq	.+12     	; 0x263c <xTaskGenericNotify+0x62>
    2630:	49 c0       	rjmp	.+146    	; 0x26c4 <xTaskGenericNotify+0xea>
    2632:	03 30       	cpi	r16, 0x03	; 3
    2634:	69 f1       	breq	.+90     	; 0x2690 <xTaskGenericNotify+0xb6>
    2636:	04 30       	cpi	r16, 0x04	; 4
    2638:	b9 f1       	breq	.+110    	; 0x26a8 <xTaskGenericNotify+0xce>
    263a:	44 c0       	rjmp	.+136    	; 0x26c4 <xTaskGenericNotify+0xea>
    263c:	66 0f       	add	r22, r22
    263e:	77 1f       	adc	r23, r23
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	fd 01       	movw	r30, r26
    2646:	e6 0f       	add	r30, r22
    2648:	f7 1f       	adc	r31, r23
    264a:	87 a4       	ldd	r8, Z+47	; 0x2f
    264c:	90 a8       	ldd	r9, Z+48	; 0x30
    264e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2650:	b2 a8       	ldd	r11, Z+50	; 0x32
    2652:	ba 01       	movw	r22, r20
    2654:	a9 01       	movw	r20, r18
    2656:	48 29       	or	r20, r8
    2658:	59 29       	or	r21, r9
    265a:	6a 29       	or	r22, r10
    265c:	7b 29       	or	r23, r11
    265e:	47 a7       	std	Z+47, r20	; 0x2f
    2660:	50 ab       	std	Z+48, r21	; 0x30
    2662:	61 ab       	std	Z+49, r22	; 0x31
    2664:	72 ab       	std	Z+50, r23	; 0x32
    2666:	2e c0       	rjmp	.+92     	; 0x26c4 <xTaskGenericNotify+0xea>
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	66 0f       	add	r22, r22
    266e:	77 1f       	adc	r23, r23
    2670:	fd 01       	movw	r30, r26
    2672:	e6 0f       	add	r30, r22
    2674:	f7 1f       	adc	r31, r23
    2676:	47 a5       	ldd	r20, Z+47	; 0x2f
    2678:	50 a9       	ldd	r21, Z+48	; 0x30
    267a:	61 a9       	ldd	r22, Z+49	; 0x31
    267c:	72 a9       	ldd	r23, Z+50	; 0x32
    267e:	4f 5f       	subi	r20, 0xFF	; 255
    2680:	5f 4f       	sbci	r21, 0xFF	; 255
    2682:	6f 4f       	sbci	r22, 0xFF	; 255
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	47 a7       	std	Z+47, r20	; 0x2f
    2688:	50 ab       	std	Z+48, r21	; 0x30
    268a:	61 ab       	std	Z+49, r22	; 0x31
    268c:	72 ab       	std	Z+50, r23	; 0x32
    268e:	1a c0       	rjmp	.+52     	; 0x26c4 <xTaskGenericNotify+0xea>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	66 0f       	add	r22, r22
    2696:	77 1f       	adc	r23, r23
    2698:	fd 01       	movw	r30, r26
    269a:	e6 0f       	add	r30, r22
    269c:	f7 1f       	adc	r31, r23
    269e:	27 a7       	std	Z+47, r18	; 0x2f
    26a0:	30 ab       	std	Z+48, r19	; 0x30
    26a2:	41 ab       	std	Z+49, r20	; 0x31
    26a4:	52 ab       	std	Z+50, r21	; 0x32
    26a6:	0e c0       	rjmp	.+28     	; 0x26c4 <xTaskGenericNotify+0xea>
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	09 f4       	brne	.+2      	; 0x26ae <xTaskGenericNotify+0xd4>
    26ac:	79 c0       	rjmp	.+242    	; 0x27a0 <xTaskGenericNotify+0x1c6>
    26ae:	66 0f       	add	r22, r22
    26b0:	77 1f       	adc	r23, r23
    26b2:	66 0f       	add	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	fd 01       	movw	r30, r26
    26b8:	e6 0f       	add	r30, r22
    26ba:	f7 1f       	adc	r31, r23
    26bc:	27 a7       	std	Z+47, r18	; 0x2f
    26be:	30 ab       	std	Z+48, r19	; 0x30
    26c0:	41 ab       	std	Z+49, r20	; 0x31
    26c2:	52 ab       	std	Z+50, r21	; 0x32
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	09 f0       	breq	.+2      	; 0x26ca <xTaskGenericNotify+0xf0>
    26c8:	6d c0       	rjmp	.+218    	; 0x27a4 <xTaskGenericNotify+0x1ca>
    26ca:	1c 96       	adiw	r26, 0x0c	; 12
    26cc:	ed 91       	ld	r30, X+
    26ce:	fc 91       	ld	r31, X
    26d0:	1d 97       	sbiw	r26, 0x0d	; 13
    26d2:	16 96       	adiw	r26, 0x06	; 6
    26d4:	cd 91       	ld	r28, X+
    26d6:	dc 91       	ld	r29, X
    26d8:	17 97       	sbiw	r26, 0x07	; 7
    26da:	18 96       	adiw	r26, 0x08	; 8
    26dc:	8d 91       	ld	r24, X+
    26de:	9c 91       	ld	r25, X
    26e0:	19 97       	sbiw	r26, 0x09	; 9
    26e2:	9f 83       	std	Y+7, r25	; 0x07
    26e4:	8e 83       	std	Y+6, r24	; 0x06
    26e6:	18 96       	adiw	r26, 0x08	; 8
    26e8:	cd 91       	ld	r28, X+
    26ea:	dc 91       	ld	r29, X
    26ec:	19 97       	sbiw	r26, 0x09	; 9
    26ee:	16 96       	adiw	r26, 0x06	; 6
    26f0:	8d 91       	ld	r24, X+
    26f2:	9c 91       	ld	r25, X
    26f4:	17 97       	sbiw	r26, 0x07	; 7
    26f6:	9d 83       	std	Y+5, r25	; 0x05
    26f8:	8c 83       	std	Y+4, r24	; 0x04
    26fa:	9d 01       	movw	r18, r26
    26fc:	2e 5f       	subi	r18, 0xFE	; 254
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	81 81       	ldd	r24, Z+1	; 0x01
    2702:	92 81       	ldd	r25, Z+2	; 0x02
    2704:	82 17       	cp	r24, r18
    2706:	93 07       	cpc	r25, r19
    2708:	31 f4       	brne	.+12     	; 0x2716 <xTaskGenericNotify+0x13c>
    270a:	18 96       	adiw	r26, 0x08	; 8
    270c:	8d 91       	ld	r24, X+
    270e:	9c 91       	ld	r25, X
    2710:	19 97       	sbiw	r26, 0x09	; 9
    2712:	92 83       	std	Z+2, r25	; 0x02
    2714:	81 83       	std	Z+1, r24	; 0x01
    2716:	1d 96       	adiw	r26, 0x0d	; 13
    2718:	1c 92       	st	X, r1
    271a:	1e 92       	st	-X, r1
    271c:	1c 97       	sbiw	r26, 0x0c	; 12
    271e:	80 81       	ld	r24, Z
    2720:	81 50       	subi	r24, 0x01	; 1
    2722:	80 83       	st	Z, r24
    2724:	5a 96       	adiw	r26, 0x1a	; 26
    2726:	ec 91       	ld	r30, X
    2728:	5a 97       	sbiw	r26, 0x1a	; 26
    272a:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    272e:	8e 17       	cp	r24, r30
    2730:	10 f4       	brcc	.+4      	; 0x2736 <xTaskGenericNotify+0x15c>
    2732:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    2736:	8b e0       	ldi	r24, 0x0B	; 11
    2738:	8e 9f       	mul	r24, r30
    273a:	f0 01       	movw	r30, r0
    273c:	11 24       	eor	r1, r1
    273e:	e5 55       	subi	r30, 0x55	; 85
    2740:	ff 4e       	sbci	r31, 0xEF	; 239
    2742:	01 80       	ldd	r0, Z+1	; 0x01
    2744:	f2 81       	ldd	r31, Z+2	; 0x02
    2746:	e0 2d       	mov	r30, r0
    2748:	17 96       	adiw	r26, 0x07	; 7
    274a:	fc 93       	st	X, r31
    274c:	ee 93       	st	-X, r30
    274e:	16 97       	sbiw	r26, 0x06	; 6
    2750:	46 81       	ldd	r20, Z+6	; 0x06
    2752:	57 81       	ldd	r21, Z+7	; 0x07
    2754:	19 96       	adiw	r26, 0x09	; 9
    2756:	5c 93       	st	X, r21
    2758:	4e 93       	st	-X, r20
    275a:	18 97       	sbiw	r26, 0x08	; 8
    275c:	c6 81       	ldd	r28, Z+6	; 0x06
    275e:	d7 81       	ldd	r29, Z+7	; 0x07
    2760:	3d 83       	std	Y+5, r19	; 0x05
    2762:	2c 83       	std	Y+4, r18	; 0x04
    2764:	37 83       	std	Z+7, r19	; 0x07
    2766:	26 83       	std	Z+6, r18	; 0x06
    2768:	5a 96       	adiw	r26, 0x1a	; 26
    276a:	ec 91       	ld	r30, X
    276c:	5a 97       	sbiw	r26, 0x1a	; 26
    276e:	8e 9f       	mul	r24, r30
    2770:	f0 01       	movw	r30, r0
    2772:	11 24       	eor	r1, r1
    2774:	e5 55       	subi	r30, 0x55	; 85
    2776:	ff 4e       	sbci	r31, 0xEF	; 239
    2778:	1d 96       	adiw	r26, 0x0d	; 13
    277a:	fc 93       	st	X, r31
    277c:	ee 93       	st	-X, r30
    277e:	1c 97       	sbiw	r26, 0x0c	; 12
    2780:	80 81       	ld	r24, Z
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	80 83       	st	Z, r24
    2786:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    278a:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    278e:	5a 96       	adiw	r26, 0x1a	; 26
    2790:	9c 91       	ld	r25, X
    2792:	82 8d       	ldd	r24, Z+26	; 0x1a
    2794:	89 17       	cp	r24, r25
    2796:	40 f4       	brcc	.+16     	; 0x27a8 <xTaskGenericNotify+0x1ce>
    2798:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	05 c0       	rjmp	.+10     	; 0x27aa <xTaskGenericNotify+0x1d0>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	03 c0       	rjmp	.+6      	; 0x27aa <xTaskGenericNotify+0x1d0>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <xTaskGenericNotify+0x1d0>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0f 90       	pop	r0
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	bf 90       	pop	r11
    27ba:	af 90       	pop	r10
    27bc:	9f 90       	pop	r9
    27be:	8f 90       	pop	r8
    27c0:	08 95       	ret

000027c2 <xTaskGenericNotifyFromISR>:
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	dc 01       	movw	r26, r24
    27da:	e1 14       	cp	r14, r1
    27dc:	f1 04       	cpc	r15, r1
    27de:	79 f0       	breq	.+30     	; 0x27fe <xTaskGenericNotifyFromISR+0x3c>
    27e0:	fc 01       	movw	r30, r24
    27e2:	84 e0       	ldi	r24, 0x04	; 4
    27e4:	68 9f       	mul	r22, r24
    27e6:	e0 0d       	add	r30, r0
    27e8:	f1 1d       	adc	r31, r1
    27ea:	11 24       	eor	r1, r1
    27ec:	87 a4       	ldd	r8, Z+47	; 0x2f
    27ee:	90 a8       	ldd	r9, Z+48	; 0x30
    27f0:	a1 a8       	ldd	r10, Z+49	; 0x31
    27f2:	b2 a8       	ldd	r11, Z+50	; 0x32
    27f4:	f7 01       	movw	r30, r14
    27f6:	80 82       	st	Z, r8
    27f8:	91 82       	std	Z+1, r9	; 0x01
    27fa:	a2 82       	std	Z+2, r10	; 0x02
    27fc:	b3 82       	std	Z+3, r11	; 0x03
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	fd 01       	movw	r30, r26
    2802:	e6 0f       	add	r30, r22
    2804:	f7 1f       	adc	r31, r23
    2806:	83 a9       	ldd	r24, Z+51	; 0x33
    2808:	92 e0       	ldi	r25, 0x02	; 2
    280a:	93 ab       	std	Z+51, r25	; 0x33
    280c:	02 30       	cpi	r16, 0x02	; 2
    280e:	f9 f0       	breq	.+62     	; 0x284e <xTaskGenericNotifyFromISR+0x8c>
    2810:	18 f4       	brcc	.+6      	; 0x2818 <xTaskGenericNotifyFromISR+0x56>
    2812:	01 30       	cpi	r16, 0x01	; 1
    2814:	31 f0       	breq	.+12     	; 0x2822 <xTaskGenericNotifyFromISR+0x60>
    2816:	49 c0       	rjmp	.+146    	; 0x28aa <xTaskGenericNotifyFromISR+0xe8>
    2818:	03 30       	cpi	r16, 0x03	; 3
    281a:	69 f1       	breq	.+90     	; 0x2876 <xTaskGenericNotifyFromISR+0xb4>
    281c:	04 30       	cpi	r16, 0x04	; 4
    281e:	b9 f1       	breq	.+110    	; 0x288e <xTaskGenericNotifyFromISR+0xcc>
    2820:	44 c0       	rjmp	.+136    	; 0x28aa <xTaskGenericNotifyFromISR+0xe8>
    2822:	66 0f       	add	r22, r22
    2824:	77 1f       	adc	r23, r23
    2826:	66 0f       	add	r22, r22
    2828:	77 1f       	adc	r23, r23
    282a:	fd 01       	movw	r30, r26
    282c:	e6 0f       	add	r30, r22
    282e:	f7 1f       	adc	r31, r23
    2830:	87 a4       	ldd	r8, Z+47	; 0x2f
    2832:	90 a8       	ldd	r9, Z+48	; 0x30
    2834:	a1 a8       	ldd	r10, Z+49	; 0x31
    2836:	b2 a8       	ldd	r11, Z+50	; 0x32
    2838:	ba 01       	movw	r22, r20
    283a:	a9 01       	movw	r20, r18
    283c:	48 29       	or	r20, r8
    283e:	59 29       	or	r21, r9
    2840:	6a 29       	or	r22, r10
    2842:	7b 29       	or	r23, r11
    2844:	47 a7       	std	Z+47, r20	; 0x2f
    2846:	50 ab       	std	Z+48, r21	; 0x30
    2848:	61 ab       	std	Z+49, r22	; 0x31
    284a:	72 ab       	std	Z+50, r23	; 0x32
    284c:	2e c0       	rjmp	.+92     	; 0x28aa <xTaskGenericNotifyFromISR+0xe8>
    284e:	66 0f       	add	r22, r22
    2850:	77 1f       	adc	r23, r23
    2852:	66 0f       	add	r22, r22
    2854:	77 1f       	adc	r23, r23
    2856:	fd 01       	movw	r30, r26
    2858:	e6 0f       	add	r30, r22
    285a:	f7 1f       	adc	r31, r23
    285c:	47 a5       	ldd	r20, Z+47	; 0x2f
    285e:	50 a9       	ldd	r21, Z+48	; 0x30
    2860:	61 a9       	ldd	r22, Z+49	; 0x31
    2862:	72 a9       	ldd	r23, Z+50	; 0x32
    2864:	4f 5f       	subi	r20, 0xFF	; 255
    2866:	5f 4f       	sbci	r21, 0xFF	; 255
    2868:	6f 4f       	sbci	r22, 0xFF	; 255
    286a:	7f 4f       	sbci	r23, 0xFF	; 255
    286c:	47 a7       	std	Z+47, r20	; 0x2f
    286e:	50 ab       	std	Z+48, r21	; 0x30
    2870:	61 ab       	std	Z+49, r22	; 0x31
    2872:	72 ab       	std	Z+50, r23	; 0x32
    2874:	1a c0       	rjmp	.+52     	; 0x28aa <xTaskGenericNotifyFromISR+0xe8>
    2876:	66 0f       	add	r22, r22
    2878:	77 1f       	adc	r23, r23
    287a:	66 0f       	add	r22, r22
    287c:	77 1f       	adc	r23, r23
    287e:	fd 01       	movw	r30, r26
    2880:	e6 0f       	add	r30, r22
    2882:	f7 1f       	adc	r31, r23
    2884:	27 a7       	std	Z+47, r18	; 0x2f
    2886:	30 ab       	std	Z+48, r19	; 0x30
    2888:	41 ab       	std	Z+49, r20	; 0x31
    288a:	52 ab       	std	Z+50, r21	; 0x32
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <xTaskGenericNotifyFromISR+0xe8>
    288e:	82 30       	cpi	r24, 0x02	; 2
    2890:	09 f4       	brne	.+2      	; 0x2894 <xTaskGenericNotifyFromISR+0xd2>
    2892:	a4 c0       	rjmp	.+328    	; 0x29dc <xTaskGenericNotifyFromISR+0x21a>
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	66 0f       	add	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	fd 01       	movw	r30, r26
    289e:	e6 0f       	add	r30, r22
    28a0:	f7 1f       	adc	r31, r23
    28a2:	27 a7       	std	Z+47, r18	; 0x2f
    28a4:	30 ab       	std	Z+48, r19	; 0x30
    28a6:	41 ab       	std	Z+49, r20	; 0x31
    28a8:	52 ab       	std	Z+50, r21	; 0x32
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <xTaskGenericNotifyFromISR+0xee>
    28ae:	98 c0       	rjmp	.+304    	; 0x29e0 <xTaskGenericNotifyFromISR+0x21e>
    28b0:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    28b4:	81 11       	cpse	r24, r1
    28b6:	5f c0       	rjmp	.+190    	; 0x2976 <xTaskGenericNotifyFromISR+0x1b4>
    28b8:	1c 96       	adiw	r26, 0x0c	; 12
    28ba:	ed 91       	ld	r30, X+
    28bc:	fc 91       	ld	r31, X
    28be:	1d 97       	sbiw	r26, 0x0d	; 13
    28c0:	16 96       	adiw	r26, 0x06	; 6
    28c2:	cd 91       	ld	r28, X+
    28c4:	dc 91       	ld	r29, X
    28c6:	17 97       	sbiw	r26, 0x07	; 7
    28c8:	18 96       	adiw	r26, 0x08	; 8
    28ca:	8d 91       	ld	r24, X+
    28cc:	9c 91       	ld	r25, X
    28ce:	19 97       	sbiw	r26, 0x09	; 9
    28d0:	9f 83       	std	Y+7, r25	; 0x07
    28d2:	8e 83       	std	Y+6, r24	; 0x06
    28d4:	18 96       	adiw	r26, 0x08	; 8
    28d6:	cd 91       	ld	r28, X+
    28d8:	dc 91       	ld	r29, X
    28da:	19 97       	sbiw	r26, 0x09	; 9
    28dc:	16 96       	adiw	r26, 0x06	; 6
    28de:	8d 91       	ld	r24, X+
    28e0:	9c 91       	ld	r25, X
    28e2:	17 97       	sbiw	r26, 0x07	; 7
    28e4:	9d 83       	std	Y+5, r25	; 0x05
    28e6:	8c 83       	std	Y+4, r24	; 0x04
    28e8:	9d 01       	movw	r18, r26
    28ea:	2e 5f       	subi	r18, 0xFE	; 254
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	81 81       	ldd	r24, Z+1	; 0x01
    28f0:	92 81       	ldd	r25, Z+2	; 0x02
    28f2:	82 17       	cp	r24, r18
    28f4:	93 07       	cpc	r25, r19
    28f6:	31 f4       	brne	.+12     	; 0x2904 <xTaskGenericNotifyFromISR+0x142>
    28f8:	18 96       	adiw	r26, 0x08	; 8
    28fa:	8d 91       	ld	r24, X+
    28fc:	9c 91       	ld	r25, X
    28fe:	19 97       	sbiw	r26, 0x09	; 9
    2900:	92 83       	std	Z+2, r25	; 0x02
    2902:	81 83       	std	Z+1, r24	; 0x01
    2904:	1d 96       	adiw	r26, 0x0d	; 13
    2906:	1c 92       	st	X, r1
    2908:	1e 92       	st	-X, r1
    290a:	1c 97       	sbiw	r26, 0x0c	; 12
    290c:	80 81       	ld	r24, Z
    290e:	81 50       	subi	r24, 0x01	; 1
    2910:	80 83       	st	Z, r24
    2912:	5a 96       	adiw	r26, 0x1a	; 26
    2914:	ec 91       	ld	r30, X
    2916:	5a 97       	sbiw	r26, 0x1a	; 26
    2918:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    291c:	8e 17       	cp	r24, r30
    291e:	10 f4       	brcc	.+4      	; 0x2924 <xTaskGenericNotifyFromISR+0x162>
    2920:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    2924:	8b e0       	ldi	r24, 0x0B	; 11
    2926:	8e 9f       	mul	r24, r30
    2928:	f0 01       	movw	r30, r0
    292a:	11 24       	eor	r1, r1
    292c:	e5 55       	subi	r30, 0x55	; 85
    292e:	ff 4e       	sbci	r31, 0xEF	; 239
    2930:	01 80       	ldd	r0, Z+1	; 0x01
    2932:	f2 81       	ldd	r31, Z+2	; 0x02
    2934:	e0 2d       	mov	r30, r0
    2936:	17 96       	adiw	r26, 0x07	; 7
    2938:	fc 93       	st	X, r31
    293a:	ee 93       	st	-X, r30
    293c:	16 97       	sbiw	r26, 0x06	; 6
    293e:	46 81       	ldd	r20, Z+6	; 0x06
    2940:	57 81       	ldd	r21, Z+7	; 0x07
    2942:	19 96       	adiw	r26, 0x09	; 9
    2944:	5c 93       	st	X, r21
    2946:	4e 93       	st	-X, r20
    2948:	18 97       	sbiw	r26, 0x08	; 8
    294a:	c6 81       	ldd	r28, Z+6	; 0x06
    294c:	d7 81       	ldd	r29, Z+7	; 0x07
    294e:	3d 83       	std	Y+5, r19	; 0x05
    2950:	2c 83       	std	Y+4, r18	; 0x04
    2952:	37 83       	std	Z+7, r19	; 0x07
    2954:	26 83       	std	Z+6, r18	; 0x06
    2956:	5a 96       	adiw	r26, 0x1a	; 26
    2958:	ec 91       	ld	r30, X
    295a:	5a 97       	sbiw	r26, 0x1a	; 26
    295c:	8e 9f       	mul	r24, r30
    295e:	f0 01       	movw	r30, r0
    2960:	11 24       	eor	r1, r1
    2962:	e5 55       	subi	r30, 0x55	; 85
    2964:	ff 4e       	sbci	r31, 0xEF	; 239
    2966:	1d 96       	adiw	r26, 0x0d	; 13
    2968:	fc 93       	st	X, r31
    296a:	ee 93       	st	-X, r30
    296c:	1c 97       	sbiw	r26, 0x0c	; 12
    296e:	80 81       	ld	r24, Z
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	80 83       	st	Z, r24
    2974:	20 c0       	rjmp	.+64     	; 0x29b6 <xTaskGenericNotifyFromISR+0x1f4>
    2976:	46 e8       	ldi	r20, 0x86	; 134
    2978:	50 e1       	ldi	r21, 0x10	; 16
    297a:	fa 01       	movw	r30, r20
    297c:	c1 81       	ldd	r28, Z+1	; 0x01
    297e:	d2 81       	ldd	r29, Z+2	; 0x02
    2980:	53 96       	adiw	r26, 0x13	; 19
    2982:	dc 93       	st	X, r29
    2984:	ce 93       	st	-X, r28
    2986:	52 97       	sbiw	r26, 0x12	; 18
    2988:	8e 81       	ldd	r24, Y+6	; 0x06
    298a:	9f 81       	ldd	r25, Y+7	; 0x07
    298c:	55 96       	adiw	r26, 0x15	; 21
    298e:	9c 93       	st	X, r25
    2990:	8e 93       	st	-X, r24
    2992:	54 97       	sbiw	r26, 0x14	; 20
    2994:	2e 81       	ldd	r18, Y+6	; 0x06
    2996:	3f 81       	ldd	r19, Y+7	; 0x07
    2998:	cd 01       	movw	r24, r26
    299a:	0e 96       	adiw	r24, 0x0e	; 14
    299c:	f9 01       	movw	r30, r18
    299e:	95 83       	std	Z+5, r25	; 0x05
    29a0:	84 83       	std	Z+4, r24	; 0x04
    29a2:	9f 83       	std	Y+7, r25	; 0x07
    29a4:	8e 83       	std	Y+6, r24	; 0x06
    29a6:	59 96       	adiw	r26, 0x19	; 25
    29a8:	5c 93       	st	X, r21
    29aa:	4e 93       	st	-X, r20
    29ac:	58 97       	sbiw	r26, 0x18	; 24
    29ae:	fa 01       	movw	r30, r20
    29b0:	80 81       	ld	r24, Z
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	80 83       	st	Z, r24
    29b6:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    29ba:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    29be:	5a 96       	adiw	r26, 0x1a	; 26
    29c0:	9c 91       	ld	r25, X
    29c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    29c4:	89 17       	cp	r24, r25
    29c6:	70 f4       	brcc	.+28     	; 0x29e4 <xTaskGenericNotifyFromISR+0x222>
    29c8:	c1 14       	cp	r12, r1
    29ca:	d1 04       	cpc	r13, r1
    29cc:	19 f0       	breq	.+6      	; 0x29d4 <xTaskGenericNotifyFromISR+0x212>
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	f6 01       	movw	r30, r12
    29d2:	80 83       	st	Z, r24
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    29da:	05 c0       	rjmp	.+10     	; 0x29e6 <xTaskGenericNotifyFromISR+0x224>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	03 c0       	rjmp	.+6      	; 0x29e6 <xTaskGenericNotifyFromISR+0x224>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	01 c0       	rjmp	.+2      	; 0x29e6 <xTaskGenericNotifyFromISR+0x224>
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	0f 91       	pop	r16
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	df 90       	pop	r13
    29f2:	cf 90       	pop	r12
    29f4:	bf 90       	pop	r11
    29f6:	af 90       	pop	r10
    29f8:	9f 90       	pop	r9
    29fa:	8f 90       	pop	r8
    29fc:	08 95       	ret

000029fe <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	21 f4       	brne	.+8      	; 0x2a0a <xTaskGenericNotifyStateClear+0xc>
    2a02:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    2a06:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	fc 01       	movw	r30, r24
    2a14:	e6 0f       	add	r30, r22
    2a16:	f7 1f       	adc	r31, r23
    2a18:	23 a9       	ldd	r18, Z+51	; 0x33
    2a1a:	22 30       	cpi	r18, 0x02	; 2
    2a1c:	31 f4       	brne	.+12     	; 0x2a2a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2a1e:	fc 01       	movw	r30, r24
    2a20:	e6 0f       	add	r30, r22
    2a22:	f7 1f       	adc	r31, r23
    2a24:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2a2c:	0f 90       	pop	r0
    2a2e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2a30:	08 95       	ret

00002a32 <prvInsertTimerInActiveList>:
    2a32:	cf 92       	push	r12
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	fc 01       	movw	r30, r24
    2a40:	42 83       	std	Z+2, r20	; 0x02
    2a42:	53 83       	std	Z+3, r21	; 0x03
    2a44:	64 83       	std	Z+4, r22	; 0x04
    2a46:	75 83       	std	Z+5, r23	; 0x05
    2a48:	93 87       	std	Z+11, r25	; 0x0b
    2a4a:	82 87       	std	Z+10, r24	; 0x0a
    2a4c:	04 17       	cp	r16, r20
    2a4e:	15 07       	cpc	r17, r21
    2a50:	26 07       	cpc	r18, r22
    2a52:	37 07       	cpc	r19, r23
    2a54:	c0 f0       	brcs	.+48     	; 0x2a86 <prvInsertTimerInActiveList+0x54>
    2a56:	0c 19       	sub	r16, r12
    2a58:	1d 09       	sbc	r17, r13
    2a5a:	2e 09       	sbc	r18, r14
    2a5c:	3f 09       	sbc	r19, r15
    2a5e:	86 85       	ldd	r24, Z+14	; 0x0e
    2a60:	97 85       	ldd	r25, Z+15	; 0x0f
    2a62:	a0 89       	ldd	r26, Z+16	; 0x10
    2a64:	b1 89       	ldd	r27, Z+17	; 0x11
    2a66:	08 17       	cp	r16, r24
    2a68:	19 07       	cpc	r17, r25
    2a6a:	2a 07       	cpc	r18, r26
    2a6c:	3b 07       	cpc	r19, r27
    2a6e:	00 f5       	brcc	.+64     	; 0x2ab0 <prvInsertTimerInActiveList+0x7e>
    2a70:	bf 01       	movw	r22, r30
    2a72:	6e 5f       	subi	r22, 0xFE	; 254
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255
    2a76:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowTimerList>
    2a7a:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2a7e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <vListInsert>
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	18 c0       	rjmp	.+48     	; 0x2ab6 <prvInsertTimerInActiveList+0x84>
    2a86:	0c 15       	cp	r16, r12
    2a88:	1d 05       	cpc	r17, r13
    2a8a:	2e 05       	cpc	r18, r14
    2a8c:	3f 05       	cpc	r19, r15
    2a8e:	28 f4       	brcc	.+10     	; 0x2a9a <prvInsertTimerInActiveList+0x68>
    2a90:	4c 15       	cp	r20, r12
    2a92:	5d 05       	cpc	r21, r13
    2a94:	6e 05       	cpc	r22, r14
    2a96:	7f 05       	cpc	r23, r15
    2a98:	68 f4       	brcc	.+26     	; 0x2ab4 <prvInsertTimerInActiveList+0x82>
    2a9a:	bf 01       	movw	r22, r30
    2a9c:	6e 5f       	subi	r22, 0xFE	; 254
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxCurrentTimerList>
    2aa4:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2aa8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <vListInsert>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <prvInsertTimerInActiveList+0x84>
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <prvInsertTimerInActiveList+0x84>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	df 90       	pop	r13
    2ac0:	cf 90       	pop	r12
    2ac2:	08 95       	ret

00002ac4 <prvCheckForValidListAndQueue>:
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	0f 92       	push	r0
    2aca:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2ace:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2ad2:	89 2b       	or	r24, r25
    2ad4:	e9 f4       	brne	.+58     	; 0x2b10 <prvCheckForValidListAndQueue+0x4c>
    2ad6:	82 e3       	ldi	r24, 0x32	; 50
    2ad8:	91 e1       	ldi	r25, 0x11	; 17
    2ada:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    2ade:	87 e2       	ldi	r24, 0x27	; 39
    2ae0:	91 e1       	ldi	r25, 0x11	; 17
    2ae2:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInitialise>
    2ae6:	82 e3       	ldi	r24, 0x32	; 50
    2ae8:	91 e1       	ldi	r25, 0x11	; 17
    2aea:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxCurrentTimerList+0x1>
    2aee:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxCurrentTimerList>
    2af2:	87 e2       	ldi	r24, 0x27	; 39
    2af4:	91 e1       	ldi	r25, 0x11	; 17
    2af6:	90 93 24 11 	sts	0x1124, r25	; 0x801124 <pxOverflowTimerList+0x1>
    2afa:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <pxOverflowTimerList>
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	67 e0       	ldi	r22, 0x07	; 7
    2b02:	8a e0       	ldi	r24, 0x0A	; 10
    2b04:	0e 94 0f 06 	call	0xc1e	; 0xc1e <xQueueGenericCreate>
    2b08:	90 93 22 11 	sts	0x1122, r25	; 0x801122 <xTimerQueue+0x1>
    2b0c:	80 93 21 11 	sts	0x1121, r24	; 0x801121 <xTimerQueue>
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	08 95       	ret

00002b16 <xTimerCreateTimerTask>:
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	d3 df       	rcall	.-90     	; 0x2ac4 <prvCheckForValidListAndQueue>
    2b1e:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2b22:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2b26:	89 2b       	or	r24, r25
    2b28:	91 f0       	breq	.+36     	; 0x2b4e <xTimerCreateTimerTask+0x38>
    2b2a:	0f 2e       	mov	r0, r31
    2b2c:	ff e1       	ldi	r31, 0x1F	; 31
    2b2e:	ef 2e       	mov	r14, r31
    2b30:	f1 e1       	ldi	r31, 0x11	; 17
    2b32:	ff 2e       	mov	r15, r31
    2b34:	f0 2d       	mov	r31, r0
    2b36:	03 e0       	ldi	r16, 0x03	; 3
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 ec       	ldi	r20, 0xC0	; 192
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	62 e4       	ldi	r22, 0x42	; 66
    2b42:	72 e0       	ldi	r23, 0x02	; 2
    2b44:	82 eb       	ldi	r24, 0xB2	; 178
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xTaskCreate>
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <xTimerCreateTimerTask+0x3a>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	0f 91       	pop	r16
    2b52:	ff 90       	pop	r15
    2b54:	ef 90       	pop	r14
    2b56:	08 95       	ret

00002b58 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b58:	8f 92       	push	r8
    2b5a:	9f 92       	push	r9
    2b5c:	af 92       	push	r10
    2b5e:	bf 92       	push	r11
    2b60:	cf 92       	push	r12
    2b62:	df 92       	push	r13
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	27 97       	sbiw	r28, 0x07	; 7
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b80:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <xTimerQueue>
    2b84:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2b88:	30 97       	sbiw	r30, 0x00	; 0
    2b8a:	81 f1       	breq	.+96     	; 0x2bec <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b8c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b8e:	2a 83       	std	Y+2, r18	; 0x02
    2b90:	3b 83       	std	Y+3, r19	; 0x03
    2b92:	4c 83       	std	Y+4, r20	; 0x04
    2b94:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b96:	9f 83       	std	Y+7, r25	; 0x07
    2b98:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b9a:	66 30       	cpi	r22, 0x06	; 6
    2b9c:	f4 f4       	brge	.+60     	; 0x2bda <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b9e:	0d dc       	rcall	.-2022   	; 0x23ba <xTaskGetSchedulerState>
    2ba0:	82 30       	cpi	r24, 0x02	; 2
    2ba2:	69 f4       	brne	.+26     	; 0x2bbe <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ba4:	00 e0       	ldi	r16, 0x00	; 0
    2ba6:	a7 01       	movw	r20, r14
    2ba8:	96 01       	movw	r18, r12
    2baa:	be 01       	movw	r22, r28
    2bac:	6f 5f       	subi	r22, 0xFF	; 255
    2bae:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb0:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2bb4:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2bb8:	0e 94 30 06 	call	0xc60	; 0xc60 <xQueueGenericSend>
    2bbc:	18 c0       	rjmp	.+48     	; 0x2bee <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2bbe:	00 e0       	ldi	r16, 0x00	; 0
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	a9 01       	movw	r20, r18
    2bc6:	be 01       	movw	r22, r28
    2bc8:	6f 5f       	subi	r22, 0xFF	; 255
    2bca:	7f 4f       	sbci	r23, 0xFF	; 255
    2bcc:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2bd0:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2bd4:	0e 94 30 06 	call	0xc60	; 0xc60 <xQueueGenericSend>
    2bd8:	0a c0       	rjmp	.+20     	; 0x2bee <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	a8 01       	movw	r20, r16
    2bde:	be 01       	movw	r22, r28
    2be0:	6f 5f       	subi	r22, 0xFF	; 255
    2be2:	7f 4f       	sbci	r23, 0xFF	; 255
    2be4:	cf 01       	movw	r24, r30
    2be6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <xQueueGenericSendFromISR>
    2bea:	01 c0       	rjmp	.+2      	; 0x2bee <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2bee:	27 96       	adiw	r28, 0x07	; 7
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
    2c0a:	bf 90       	pop	r11
    2c0c:	af 90       	pop	r10
    2c0e:	9f 90       	pop	r9
    2c10:	8f 90       	pop	r8
    2c12:	08 95       	ret

00002c14 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c14:	2f 92       	push	r2
    2c16:	3f 92       	push	r3
    2c18:	4f 92       	push	r4
    2c1a:	5f 92       	push	r5
    2c1c:	6f 92       	push	r6
    2c1e:	7f 92       	push	r7
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c3a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <xTaskGetTickCount>
    2c3e:	2b 01       	movw	r4, r22
    2c40:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    2c42:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <xLastTime.2436>
    2c46:	90 91 1c 11 	lds	r25, 0x111C	; 0x80111c <xLastTime.2436+0x1>
    2c4a:	a0 91 1d 11 	lds	r26, 0x111D	; 0x80111d <xLastTime.2436+0x2>
    2c4e:	b0 91 1e 11 	lds	r27, 0x111E	; 0x80111e <xLastTime.2436+0x3>
    2c52:	48 16       	cp	r4, r24
    2c54:	59 06       	cpc	r5, r25
    2c56:	6a 06       	cpc	r6, r26
    2c58:	7b 06       	cpc	r7, r27
    2c5a:	08 f0       	brcs	.+2      	; 0x2c5e <prvSampleTimeNow+0x4a>
    2c5c:	53 c0       	rjmp	.+166    	; 0x2d04 <prvSampleTimeNow+0xf0>
    2c5e:	3b c0       	rjmp	.+118    	; 0x2cd6 <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c60:	07 80       	ldd	r0, Z+7	; 0x07
    2c62:	f0 85       	ldd	r31, Z+8	; 0x08
    2c64:	e0 2d       	mov	r30, r0
    2c66:	80 80       	ld	r8, Z
    2c68:	91 80       	ldd	r9, Z+1	; 0x01
    2c6a:	a2 80       	ldd	r10, Z+2	; 0x02
    2c6c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c6e:	c0 85       	ldd	r28, Z+8	; 0x08
    2c70:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c72:	8e 01       	movw	r16, r28
    2c74:	0e 5f       	subi	r16, 0xFE	; 254
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	c8 01       	movw	r24, r16
    2c7a:	0e 94 b9 03 	call	0x772	; 0x772 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c7e:	ec 89       	ldd	r30, Y+20	; 0x14
    2c80:	fd 89       	ldd	r31, Y+21	; 0x15
    2c82:	ce 01       	movw	r24, r28
    2c84:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c86:	8e 89       	ldd	r24, Y+22	; 0x16
    2c88:	82 ff       	sbrs	r24, 2
    2c8a:	25 c0       	rjmp	.+74     	; 0x2cd6 <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c90:	a8 89       	ldd	r26, Y+16	; 0x10
    2c92:	b9 89       	ldd	r27, Y+17	; 0x11
    2c94:	88 0d       	add	r24, r8
    2c96:	99 1d       	adc	r25, r9
    2c98:	aa 1d       	adc	r26, r10
    2c9a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2c9c:	88 16       	cp	r8, r24
    2c9e:	99 06       	cpc	r9, r25
    2ca0:	aa 06       	cpc	r10, r26
    2ca2:	bb 06       	cpc	r11, r27
    2ca4:	70 f4       	brcc	.+28     	; 0x2cc2 <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ca6:	8a 83       	std	Y+2, r24	; 0x02
    2ca8:	9b 83       	std	Y+3, r25	; 0x03
    2caa:	ac 83       	std	Y+4, r26	; 0x04
    2cac:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2cae:	db 87       	std	Y+11, r29	; 0x0b
    2cb0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2cb2:	b8 01       	movw	r22, r16
    2cb4:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxCurrentTimerList>
    2cb8:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2cbc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <vListInsert>
    2cc0:	0a c0       	rjmp	.+20     	; 0x2cd6 <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cc2:	c1 2c       	mov	r12, r1
    2cc4:	d1 2c       	mov	r13, r1
    2cc6:	76 01       	movw	r14, r12
    2cc8:	00 e0       	ldi	r16, 0x00	; 0
    2cca:	10 e0       	ldi	r17, 0x00	; 0
    2ccc:	a5 01       	movw	r20, r10
    2cce:	94 01       	movw	r18, r8
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	41 df       	rcall	.-382    	; 0x2b58 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2cd6:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    2cda:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2cde:	80 81       	ld	r24, Z
    2ce0:	81 11       	cpse	r24, r1
    2ce2:	be cf       	rjmp	.-132    	; 0x2c60 <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ce4:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowTimerList>
    2ce8:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2cec:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxCurrentTimerList+0x1>
    2cf0:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2cf4:	f0 93 24 11 	sts	0x1124, r31	; 0x801124 <pxOverflowTimerList+0x1>
    2cf8:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	f1 01       	movw	r30, r2
    2d00:	80 83       	st	Z, r24
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2d04:	f1 01       	movw	r30, r2
    2d06:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    2d08:	40 92 1b 11 	sts	0x111B, r4	; 0x80111b <xLastTime.2436>
    2d0c:	50 92 1c 11 	sts	0x111C, r5	; 0x80111c <xLastTime.2436+0x1>
    2d10:	60 92 1d 11 	sts	0x111D, r6	; 0x80111d <xLastTime.2436+0x2>
    2d14:	70 92 1e 11 	sts	0x111E, r7	; 0x80111e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2d18:	c3 01       	movw	r24, r6
    2d1a:	b2 01       	movw	r22, r4
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	df 90       	pop	r13
    2d2a:	cf 90       	pop	r12
    2d2c:	bf 90       	pop	r11
    2d2e:	af 90       	pop	r10
    2d30:	9f 90       	pop	r9
    2d32:	8f 90       	pop	r8
    2d34:	7f 90       	pop	r7
    2d36:	6f 90       	pop	r6
    2d38:	5f 90       	pop	r5
    2d3a:	4f 90       	pop	r4
    2d3c:	3f 90       	pop	r3
    2d3e:	2f 90       	pop	r2
    2d40:	08 95       	ret

00002d42 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2d42:	08 95       	ret

00002d44 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2d44:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2d46:	2f 9a       	sbi	0x05, 7	; 5
    2d48:	08 95       	ret

00002d4a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2d4a:	1f 9a       	sbi	0x03, 7	; 3
    2d4c:	08 95       	ret

00002d4e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2d4e:	fa df       	rcall	.-12     	; 0x2d44 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d50:	2f ef       	ldi	r18, 0xFF	; 255
    2d52:	80 e7       	ldi	r24, 0x70	; 112
    2d54:	92 e0       	ldi	r25, 0x02	; 2
    2d56:	21 50       	subi	r18, 0x01	; 1
    2d58:	80 40       	sbci	r24, 0x00	; 0
    2d5a:	90 40       	sbci	r25, 0x00	; 0
    2d5c:	e1 f7       	brne	.-8      	; 0x2d56 <vApplicationMallocFailedHook+0x8>
    2d5e:	00 c0       	rjmp	.+0      	; 0x2d60 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2d60:	00 00       	nop
    2d62:	f3 df       	rcall	.-26     	; 0x2d4a <prvBlinkMainLed>
    2d64:	f5 cf       	rjmp	.-22     	; 0x2d50 <vApplicationMallocFailedHook+0x2>

00002d66 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2d66:	ee df       	rcall	.-36     	; 0x2d44 <prvSetMainLedOn>
    2d68:	2f ef       	ldi	r18, 0xFF	; 255
    2d6a:	87 ea       	ldi	r24, 0xA7	; 167
    2d6c:	91 e6       	ldi	r25, 0x61	; 97
    2d6e:	21 50       	subi	r18, 0x01	; 1
    2d70:	80 40       	sbci	r24, 0x00	; 0
    2d72:	90 40       	sbci	r25, 0x00	; 0
    2d74:	e1 f7       	brne	.-8      	; 0x2d6e <vApplicationStackOverflowHook+0x8>
    2d76:	00 c0       	rjmp	.+0      	; 0x2d78 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2d78:	00 00       	nop
    2d7a:	e7 df       	rcall	.-50     	; 0x2d4a <prvBlinkMainLed>
    2d7c:	f5 cf       	rjmp	.-22     	; 0x2d68 <vApplicationStackOverflowHook+0x2>

00002d7e <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <lora_handler_task+0x6>
    2d84:	1f 92       	push	r1
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	06 d3       	rcall	.+1548   	; 0x339a <lora_driver_resetRn2483>
	vTaskDelay(2);
    2d8e:	62 e0       	ldi	r22, 0x02	; 2
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	f5 d8       	rcall	.-3606   	; 0x1f82 <vTaskDelay>
	lora_driver_resetRn2483(0);
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	ff d2       	rcall	.+1534   	; 0x339a <lora_driver_resetRn2483>
    2d9c:	66 e9       	ldi	r22, 0x96	; 150
	// Give it a chance to wakeup
	vTaskDelay(150);
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	ee d8       	rcall	.-3620   	; 0x1f82 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    2da6:	b2 d2       	rcall	.+1380   	; 0x330c <lora_driver_flushBuffers>
}

static void _lora_setup(void)
{
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2dae:	03 d3       	rcall	.+1542   	; 0x33b6 <lora_driver_rn2483FactoryReset>
    2db0:	7f d5       	rcall	.+2814   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2db2:	9f 93       	push	r25
    2db4:	8f 93       	push	r24
    2db6:	8a e4       	ldi	r24, 0x4A	; 74
    2db8:	92 e0       	ldi	r25, 0x02	; 2
    2dba:	9f 93       	push	r25
    2dbc:	8f 93       	push	r24
    2dbe:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2dc2:	77 d4       	rcall	.+2286   	; 0x36b2 <lora_driver_configureToEu868>
    2dc4:	75 d5       	rcall	.+2794   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2dc6:	9f 93       	push	r25
    2dc8:	8f 93       	push	r24
    2dca:	8d e5       	ldi	r24, 0x5D	; 93
    2dcc:	92 e0       	ldi	r25, 0x02	; 2
    2dce:	9f 93       	push	r25
    2dd0:	8f 93       	push	r24
    2dd2:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2dd6:	83 e5       	ldi	r24, 0x53	; 83
    2dd8:	91 e1       	ldi	r25, 0x11	; 17
    2dda:	ff d2       	rcall	.+1534   	; 0x33da <lora_driver_getRn2483Hweui>
    2ddc:	69 d5       	rcall	.+2770   	; 0x38b0 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2dde:	03 e5       	ldi	r16, 0x53	; 83
    2de0:	11 e1       	ldi	r17, 0x11	; 17
    2de2:	1f 93       	push	r17
    2de4:	0f 93       	push	r16
    2de6:	9f 93       	push	r25
    2de8:	8f 93       	push	r24
    2dea:	86 e7       	ldi	r24, 0x76	; 118
    2dec:	92 e0       	ldi	r25, 0x02	; 2
    2dee:	9f 93       	push	r25
    2df0:	8f 93       	push	r24
    2df2:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    2df6:	c8 01       	movw	r24, r16
    2df8:	0c d3       	rcall	.+1560   	; 0x3412 <lora_driver_setDeviceIdentifier>
    2dfa:	5a d5       	rcall	.+2740   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2dfc:	9f 93       	push	r25
    2dfe:	8f 93       	push	r24
    2e00:	1f 93       	push	r17
    2e02:	0f 93       	push	r16
    2e04:	8a e8       	ldi	r24, 0x8A	; 138
    2e06:	92 e0       	ldi	r25, 0x02	; 2
    2e08:	9f 93       	push	r25
    2e0a:	8f 93       	push	r24
    2e0c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2e10:	a8 01       	movw	r20, r16
    2e12:	6f e9       	ldi	r22, 0x9F	; 159
    2e14:	72 e0       	ldi	r23, 0x02	; 2
    2e16:	82 ec       	ldi	r24, 0xC2	; 194
    2e18:	92 e0       	ldi	r25, 0x02	; 2
    2e1a:	29 d5       	rcall	.+2642   	; 0x386e <lora_driver_setOtaaIdentity>
    2e1c:	49 d5       	rcall	.+2706   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2e1e:	9f 93       	push	r25
    2e20:	8f 93       	push	r24
    2e22:	1f 93       	push	r17
    2e24:	0f 93       	push	r16
    2e26:	8f e9       	ldi	r24, 0x9F	; 159
    2e28:	92 e0       	ldi	r25, 0x02	; 2
    2e2a:	9f 93       	push	r25
    2e2c:	8f 93       	push	r24
    2e2e:	82 ec       	ldi	r24, 0xC2	; 194
    2e30:	92 e0       	ldi	r25, 0x02	; 2
    2e32:	9f 93       	push	r25
    2e34:	8f 93       	push	r24
    2e36:	82 ed       	ldi	r24, 0xD2	; 210
    2e38:	92 e0       	ldi	r25, 0x02	; 2
    2e3a:	9f 93       	push	r25
    2e3c:	8f 93       	push	r24
    2e3e:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    2e42:	1a d3       	rcall	.+1588   	; 0x3478 <lora_driver_saveMac>
    2e44:	35 d5       	rcall	.+2666   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2e46:	9f 93       	push	r25
    2e48:	8f 93       	push	r24
    2e4a:	88 e0       	ldi	r24, 0x08	; 8
    2e4c:	93 e0       	ldi	r25, 0x03	; 3
    2e4e:	9f 93       	push	r25
    2e50:	8f 93       	push	r24
    2e52:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	04 d4       	rcall	.+2056   	; 0x366c <lora_driver_setAdaptiveDataRate>
    2e64:	25 d5       	rcall	.+2634   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2e66:	9f 93       	push	r25
    2e68:	8f 93       	push	r24
    2e6a:	87 e1       	ldi	r24, 0x17	; 23
    2e6c:	93 e0       	ldi	r25, 0x03	; 3
    2e6e:	9f 93       	push	r25
    2e70:	8f 93       	push	r24
    2e72:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    2e76:	84 ef       	ldi	r24, 0xF4	; 244
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	03 d4       	rcall	.+2054   	; 0x3682 <lora_driver_setReceiveDelay>
    2e7c:	19 d5       	rcall	.+2610   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2e7e:	9f 93       	push	r25
    2e80:	8f 93       	push	r24
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	8f 93       	push	r24
    2e86:	84 ef       	ldi	r24, 0xF4	; 244
    2e88:	8f 93       	push	r24
    2e8a:	88 e3       	ldi	r24, 0x38	; 56
    2e8c:	93 e0       	ldi	r25, 0x03	; 3
    2e8e:	9f 93       	push	r25
    2e90:	8f 93       	push	r24
    2e92:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	0a e0       	ldi	r16, 0x0A	; 10
    2ea2:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    2ea4:	0f 2e       	mov	r0, r31
    2ea6:	f8 e5       	ldi	r31, 0x58	; 88
    2ea8:	ef 2e       	mov	r14, r31
    2eaa:	f3 e0       	ldi	r31, 0x03	; 3
    2eac:	ff 2e       	mov	r15, r31
    2eae:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	e8 d2       	rcall	.+1488   	; 0x3484 <lora_driver_join>
    2eb4:	d8 2e       	mov	r13, r24
    2eb6:	fc d4       	rcall	.+2552   	; 0x38b0 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    2eb8:	9f 93       	push	r25
    2eba:	8f 93       	push	r24
    2ebc:	1f 93       	push	r17
    2ebe:	0f 93       	push	r16
    2ec0:	ff 92       	push	r15
    2ec2:	ef 92       	push	r14
    2ec4:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    2ec8:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	f8 e0       	ldi	r31, 0x08	; 8
    2ed6:	df 16       	cp	r13, r31
    2ed8:	b9 f1       	breq	.+110    	; 0x2f48 <lora_handler_task+0x1ca>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    2edc:	0e 94 44 22 	call	0x4488	; 0x4488 <status_leds_longPuls>
    2ee0:	66 e3       	ldi	r22, 0x36	; 54
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    2ee2:	71 e0       	ldi	r23, 0x01	; 1
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	4c d8       	rcall	.-3944   	; 0x1f82 <vTaskDelay>
    2eea:	01 50       	subi	r16, 0x01	; 1
    2eec:	11 09       	sbc	r17, r1
    2eee:	01 f7       	brne	.-64     	; 0x2eb0 <lora_handler_task+0x132>
    2ef0:	24 c0       	rjmp	.+72     	; 0x2f3a <lora_handler_task+0x1bc>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    2ef2:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    2ef6:	fd cf       	rjmp	.-6      	; 0x2ef2 <lora_handler_task+0x174>
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2ef8:	48 ea       	ldi	r20, 0xA8	; 168
    2efa:	58 e4       	ldi	r21, 0x48	; 72
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	70 e0       	ldi	r23, 0x00	; 0
    2f00:	ce 01       	movw	r24, r28
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskDelayUntil>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    2f08:	f8 01       	movw	r30, r16
    2f0a:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
    2f0c:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
    2f0e:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
    2f10:	b5 82       	std	Z+5, r11	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    2f12:	c6 82       	std	Z+6, r12	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    2f14:	d7 82       	std	Z+7, r13	; 0x07

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    2f16:	83 e0       	ldi	r24, 0x03	; 3
    2f18:	0e 94 56 22 	call	0x44ac	; 0x44ac <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    2f1c:	b8 01       	movw	r22, r16
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	da d2       	rcall	.+1460   	; 0x34d6 <lora_driver_sendUploadMessage>
    2f22:	c6 d4       	rcall	.+2444   	; 0x38b0 <lora_driver_mapReturnCodeToText>
    2f24:	9f 93       	push	r25
    2f26:	8f 93       	push	r24
    2f28:	ff 92       	push	r15
    2f2a:	ef 92       	push	r14
    2f2c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	df cf       	rjmp	.-66     	; 0x2ef8 <lora_handler_task+0x17a>
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	0e 94 35 22 	call	0x446a	; 0x446a <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	0e 94 03 22 	call	0x4406	; 0x4406 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    2f46:	d5 cf       	rjmp	.-86     	; 0x2ef2 <lora_handler_task+0x174>
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	0e 94 26 22 	call	0x444c	; 0x444c <status_leds_ledOn>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    2f4e:	ed e3       	ldi	r30, 0x3D	; 61
    2f50:	f1 e1       	ldi	r31, 0x11	; 17

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    2f52:	86 e0       	ldi	r24, 0x06	; 6
    2f54:	81 83       	std	Z+1, r24	; 0x01
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	80 83       	st	Z, r24
	_uplink_payload.portNo = 2;
    2f5a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    2f5e:	69 83       	std	Y+1, r22	; 0x01
    2f60:	7a 83       	std	Y+2, r23	; 0x02
    2f62:	8b 83       	std	Y+3, r24	; 0x03
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	0d e3       	ldi	r16, 0x3D	; 61
    2f68:	11 e1       	ldi	r17, 0x11	; 17
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    2f6a:	0f 2e       	mov	r0, r31
    2f6c:	f0 e3       	ldi	r31, 0x30	; 48
    2f6e:	8f 2e       	mov	r8, r31
    2f70:	f0 2d       	mov	r31, r0
    2f72:	0f 2e       	mov	r0, r31
    2f74:	f9 e3       	ldi	r31, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    2f76:	9f 2e       	mov	r9, r31
    2f78:	f0 2d       	mov	r31, r0
    2f7a:	68 94       	set
    2f7c:	aa 24       	eor	r10, r10
		_uplink_payload.bytes[2] = temp >> 8;
    2f7e:	a1 f8       	bld	r10, 1
    2f80:	0f 2e       	mov	r0, r31
    2f82:	f3 ea       	ldi	r31, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    2f84:	bf 2e       	mov	r11, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	68 94       	set
    2f8a:	cc 24       	eor	r12, r12
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    2f8c:	c2 f8       	bld	r12, 2
    2f8e:	0f 2e       	mov	r0, r31
    2f90:	fa e1       	ldi	r31, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    2f92:	df 2e       	mov	r13, r31
    2f94:	f0 2d       	mov	r31, r0
    2f96:	0f 2e       	mov	r0, r31
    2f98:	f8 e7       	ldi	r31, 0x78	; 120

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    2f9a:	ef 2e       	mov	r14, r31
    2f9c:	f3 e0       	ldi	r31, 0x03	; 3
    2f9e:	ff 2e       	mov	r15, r31
    2fa0:	f0 2d       	mov	r31, r0
    2fa2:	aa cf       	rjmp	.-172    	; 0x2ef8 <lora_handler_task+0x17a>

00002fa4 <lora_handler_initialise>:
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    2fa8:	0f 93       	push	r16
	xTaskCreate(
    2faa:	e1 2c       	mov	r14, r1
    2fac:	f1 2c       	mov	r15, r1
    2fae:	08 2f       	mov	r16, r24
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	48 e8       	ldi	r20, 0x88	; 136
    2fb6:	51 e0       	ldi	r21, 0x01	; 1
    2fb8:	6d e8       	ldi	r22, 0x8D	; 141
    2fba:	73 e0       	ldi	r23, 0x03	; 3
    2fbc:	8f eb       	ldi	r24, 0xBF	; 191
    2fbe:	96 e1       	ldi	r25, 0x16	; 22
    2fc0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	08 95       	ret

00002fcc <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <task1+0x6>
    2fd2:	1f 92       	push	r1
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2fd8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <xTaskGetTickCount>
    2fdc:	69 83       	std	Y+1, r22	; 0x01
    2fde:	7a 83       	std	Y+2, r23	; 0x02
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2fe4:	11 e0       	ldi	r17, 0x01	; 1
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2fe6:	4f e1       	ldi	r20, 0x1F	; 31
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	ce 01       	movw	r24, r28
    2ff0:	01 96       	adiw	r24, 0x01	; 1
    2ff2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2ff6:	84 e9       	ldi	r24, 0x94	; 148
    2ff8:	93 e0       	ldi	r25, 0x03	; 3
    2ffa:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <puts>
		PORTA ^= _BV(PA0);
    2ffe:	82 b1       	in	r24, 0x02	; 2
    3000:	81 27       	eor	r24, r17
    3002:	82 b9       	out	0x02, r24	; 2
    3004:	f0 cf       	rjmp	.-32     	; 0x2fe6 <task1+0x1a>

00003006 <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	00 d0       	rcall	.+0      	; 0x300c <task2+0x6>
    300c:	1f 92       	push	r1
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3012:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <xTaskGetTickCount>
    3016:	69 83       	std	Y+1, r22	; 0x01
    3018:	7a 83       	std	Y+2, r23	; 0x02
    301a:	8b 83       	std	Y+3, r24	; 0x03
    301c:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    301e:	4e e3       	ldi	r20, 0x3E	; 62
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    302e:	8a e9       	ldi	r24, 0x9A	; 154
    3030:	93 e0       	ldi	r25, 0x03	; 3
    3032:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <puts>
		PORTA ^= _BV(PA7);
    3036:	82 b1       	in	r24, 0x02	; 2
    3038:	80 58       	subi	r24, 0x80	; 128
    303a:	82 b9       	out	0x02, r24	; 2
    303c:	f0 cf       	rjmp	.-32     	; 0x301e <task2+0x18>

0000303e <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3044:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <xTestSemaphore>
    3048:	90 91 f7 12 	lds	r25, 0x12F7	; 0x8012f7 <xTestSemaphore+0x1>
    304c:	89 2b       	or	r24, r25
    304e:	89 f4       	brne	.+34     	; 0x3072 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	0e 94 d0 06 	call	0xda0	; 0xda0 <xQueueCreateMutex>
    3056:	90 93 f7 12 	sts	0x12F7, r25	; 0x8012f7 <xTestSemaphore+0x1>
    305a:	80 93 f6 12 	sts	0x12F6, r24	; 0x8012f6 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	41 f0       	breq	.+16     	; 0x3072 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3062:	00 e0       	ldi	r16, 0x00	; 0
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	a9 01       	movw	r20, r18
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	0e 94 30 06 	call	0xc60	; 0xc60 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    3072:	e1 2c       	mov	r14, r1
    3074:	f1 2c       	mov	r15, r1
    3076:	02 e0       	ldi	r16, 0x02	; 2
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 ec       	ldi	r20, 0xC0	; 192
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	64 e9       	ldi	r22, 0x94	; 148
    3082:	73 e0       	ldi	r23, 0x03	; 3
    3084:	86 ee       	ldi	r24, 0xE6	; 230
    3086:	97 e1       	ldi	r25, 0x17	; 23
    3088:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    308c:	01 e0       	ldi	r16, 0x01	; 1
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 ec       	ldi	r20, 0xC0	; 192
    3094:	50 e0       	ldi	r21, 0x00	; 0
    3096:	6a e9       	ldi	r22, 0x9A	; 154
    3098:	73 e0       	ldi	r23, 0x03	; 3
    309a:	83 e0       	ldi	r24, 0x03	; 3
    309c:	98 e1       	ldi	r25, 0x18	; 24
    309e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xTaskCreate>
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	08 95       	ret

000030aa <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    30aa:	81 b1       	in	r24, 0x01	; 1
    30ac:	81 68       	ori	r24, 0x81	; 129
    30ae:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	0e 94 8b 20 	call	0x4116	; 0x4116 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    30b6:	c3 df       	rcall	.-122    	; 0x303e <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    30b8:	85 e0       	ldi	r24, 0x05	; 5
    30ba:	0e 94 92 21 	call	0x4324	; 0x4324 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	2a d1       	rcall	.+596    	; 0x331a <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    30c6:	83 e0       	ldi	r24, 0x03	; 3
    30c8:	6d cf       	rjmp	.-294    	; 0x2fa4 <lora_handler_initialise>
    30ca:	08 95       	ret

000030cc <main>:
    30cc:	ee df       	rcall	.-36     	; 0x30aa <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    30ce:	80 ea       	ldi	r24, 0xA0	; 160
    30d0:	93 e0       	ldi	r25, 0x03	; 3
    30d2:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    30d6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <vTaskStartScheduler>
    30da:	ff cf       	rjmp	.-2      	; 0x30da <main+0xe>

000030dc <_serialCallBack>:
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	1f 92       	push	r1
    30e6:	1f 92       	push	r1
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	8c 01       	movw	r16, r24
    30ee:	19 82       	std	Y+1, r1	; 0x01
    30f0:	2d c0       	rjmp	.+90     	; 0x314c <_serialCallBack+0x70>
    30f2:	e0 91 1b 12 	lds	r30, 0x121B	; 0x80121b <rec_buf_inp.2878>
    30f6:	ec 32       	cpi	r30, 0x2C	; 44
    30f8:	50 f4       	brcc	.+20     	; 0x310e <_serialCallBack+0x32>
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	8e 0f       	add	r24, r30
    30fe:	80 93 1b 12 	sts	0x121B, r24	; 0x80121b <rec_buf_inp.2878>
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	e3 5b       	subi	r30, 0xB3	; 179
    3106:	fd 4e       	sbci	r31, 0xED	; 237
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	80 83       	st	Z, r24
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <_serialCallBack+0x36>
    310e:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <rec_buf_inp.2878>
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	8a 30       	cpi	r24, 0x0A	; 10
    3116:	d1 f4       	brne	.+52     	; 0x314c <_serialCallBack+0x70>
    3118:	40 91 1b 12 	lds	r20, 0x121B	; 0x80121b <rec_buf_inp.2878>
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	fa 01       	movw	r30, r20
    3120:	e5 5b       	subi	r30, 0xB5	; 181
    3122:	fd 4e       	sbci	r31, 0xED	; 237
    3124:	10 82       	st	Z, r1
    3126:	41 50       	subi	r20, 0x01	; 1
    3128:	51 09       	sbc	r21, r1
    312a:	9e 01       	movw	r18, r28
    312c:	2f 5f       	subi	r18, 0xFF	; 255
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	6d e4       	ldi	r22, 0x4D	; 77
    3132:	72 e1       	ldi	r23, 0x12	; 18
    3134:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    3138:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    313c:	0e 94 05 0a 	call	0x140a	; 0x140a <xStreamBufferSendFromISR>
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	81 11       	cpse	r24, r1
    3144:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    3148:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <rec_buf_inp.2878>
    314c:	be 01       	movw	r22, r28
    314e:	6e 5f       	subi	r22, 0xFE	; 254
    3150:	7f 4f       	sbci	r23, 0xFF	; 255
    3152:	c8 01       	movw	r24, r16
    3154:	4a d5       	rcall	.+2708   	; 0x3bea <serial_getByte>
    3156:	88 23       	and	r24, r24
    3158:	61 f2       	breq	.-104    	; 0x30f2 <_serialCallBack+0x16>
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	08 95       	ret

00003168 <_uploadMessage>:
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	8c 01       	movw	r16, r24
    3172:	eb 01       	movw	r28, r22
    3174:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    3178:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    317c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <xStreamBufferReset>
    3180:	b8 01       	movw	r22, r16
    3182:	87 eb       	ldi	r24, 0xB7	; 183
    3184:	91 e1       	ldi	r25, 0x11	; 17
    3186:	0e 94 f5 25 	call	0x4bea	; 0x4bea <strcpy>
    318a:	20 97       	sbiw	r28, 0x00	; 0
    318c:	79 f0       	breq	.+30     	; 0x31ac <_uploadMessage+0x44>
    318e:	e7 eb       	ldi	r30, 0xB7	; 183
    3190:	f1 e1       	ldi	r31, 0x11	; 17
    3192:	01 90       	ld	r0, Z+
    3194:	00 20       	and	r0, r0
    3196:	e9 f7       	brne	.-6      	; 0x3192 <_uploadMessage+0x2a>
    3198:	31 97       	sbiw	r30, 0x01	; 1
    319a:	80 e2       	ldi	r24, 0x20	; 32
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	80 83       	st	Z, r24
    31a2:	be 01       	movw	r22, r28
    31a4:	87 eb       	ldi	r24, 0xB7	; 183
    31a6:	91 e1       	ldi	r25, 0x11	; 17
    31a8:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <strcat>
    31ac:	e7 eb       	ldi	r30, 0xB7	; 183
    31ae:	f1 e1       	ldi	r31, 0x11	; 17
    31b0:	df 01       	movw	r26, r30
    31b2:	0d 90       	ld	r0, X+
    31b4:	00 20       	and	r0, r0
    31b6:	e9 f7       	brne	.-6      	; 0x31b2 <_uploadMessage+0x4a>
    31b8:	11 97       	sbiw	r26, 0x01	; 1
    31ba:	8d e0       	ldi	r24, 0x0D	; 13
    31bc:	9a e0       	ldi	r25, 0x0A	; 10
    31be:	11 96       	adiw	r26, 0x01	; 1
    31c0:	9c 93       	st	X, r25
    31c2:	8e 93       	st	-X, r24
    31c4:	12 96       	adiw	r26, 0x02	; 2
    31c6:	1c 92       	st	X, r1
    31c8:	01 90       	ld	r0, Z+
    31ca:	00 20       	and	r0, r0
    31cc:	e9 f7       	brne	.-6      	; 0x31c8 <_uploadMessage+0x60>
    31ce:	31 97       	sbiw	r30, 0x01	; 1
    31d0:	e7 5b       	subi	r30, 0xB7	; 183
    31d2:	f1 41       	sbci	r31, 0x11	; 17
    31d4:	ae 2f       	mov	r26, r30
    31d6:	87 eb       	ldi	r24, 0xB7	; 183
    31d8:	91 e1       	ldi	r25, 0x11	; 17
    31da:	ac 01       	movw	r20, r24
    31dc:	6a 2f       	mov	r22, r26
    31de:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <_rn2483_serial>
    31e2:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <_rn2483_serial+0x1>
    31e6:	ac d4       	rcall	.+2392   	; 0x3b40 <serial_sendBytes>
    31e8:	81 11       	cpse	r24, r1
    31ea:	11 c0       	rjmp	.+34     	; 0x320e <_uploadMessage+0xa6>
    31ec:	08 e2       	ldi	r16, 0x28	; 40
    31ee:	15 e0       	ldi	r17, 0x05	; 5
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	4d e2       	ldi	r20, 0x2D	; 45
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	67 ea       	ldi	r22, 0xA7	; 167
    31fa:	72 e1       	ldi	r23, 0x12	; 18
    31fc:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    3200:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    3204:	0e 94 49 0a 	call	0x1492	; 0x1492 <xStreamBufferReceive>
    3208:	87 ea       	ldi	r24, 0xA7	; 167
    320a:	92 e1       	ldi	r25, 0x12	; 18
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <_uploadMessage+0xaa>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	1f 91       	pop	r17
    3218:	0f 91       	pop	r16
    321a:	08 95       	ret

0000321c <_reply2ReturnCode>:
    321c:	2f 92       	push	r2
    321e:	3f 92       	push	r3
    3220:	4f 92       	push	r4
    3222:	5f 92       	push	r5
    3224:	6f 92       	push	r6
    3226:	7f 92       	push	r7
    3228:	8f 92       	push	r8
    322a:	9f 92       	push	r9
    322c:	af 92       	push	r10
    322e:	bf 92       	push	r11
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	5c 01       	movw	r10, r24
    3242:	fc 01       	movw	r30, r24
    3244:	01 90       	ld	r0, Z+
    3246:	00 20       	and	r0, r0
    3248:	e9 f7       	brne	.-6      	; 0x3244 <_reply2ReturnCode+0x28>
    324a:	31 97       	sbiw	r30, 0x01	; 1
    324c:	6f 01       	movw	r12, r30
    324e:	c8 1a       	sub	r12, r24
    3250:	d9 0a       	sbc	r13, r25
    3252:	5c 2c       	mov	r5, r12
    3254:	0f 2e       	mov	r0, r31
    3256:	fb e4       	ldi	r31, 0x4B	; 75
    3258:	8f 2e       	mov	r8, r31
    325a:	f6 e0       	ldi	r31, 0x06	; 6
    325c:	9f 2e       	mov	r9, r31
    325e:	f0 2d       	mov	r31, r0
    3260:	e1 2c       	mov	r14, r1
    3262:	f1 2c       	mov	r15, r1
    3264:	4c 2c       	mov	r4, r12
    3266:	37 01       	movw	r6, r14
    3268:	f4 01       	movw	r30, r8
    326a:	01 81       	ldd	r16, Z+1	; 0x01
    326c:	12 81       	ldd	r17, Z+2	; 0x02
    326e:	e8 01       	movw	r28, r16
    3270:	09 90       	ld	r0, Y+
    3272:	00 20       	and	r0, r0
    3274:	e9 f7       	brne	.-6      	; 0x3270 <_reply2ReturnCode+0x54>
    3276:	21 97       	sbiw	r28, 0x01	; 1
    3278:	c0 1b       	sub	r28, r16
    327a:	d1 0b       	sbc	r29, r17
    327c:	3c 2e       	mov	r3, r28
    327e:	f9 e0       	ldi	r31, 0x09	; 9
    3280:	cf 16       	cp	r12, r31
    3282:	d1 04       	cpc	r13, r1
    3284:	58 f0       	brcs	.+22     	; 0x329c <_reply2ReturnCode+0x80>
    3286:	f4 01       	movw	r30, r8
    3288:	20 80       	ld	r2, Z
    328a:	fe e0       	ldi	r31, 0x0E	; 14
    328c:	2f 12       	cpse	r2, r31
    328e:	06 c0       	rjmp	.+12     	; 0x329c <_reply2ReturnCode+0x80>
    3290:	b8 01       	movw	r22, r16
    3292:	c5 01       	movw	r24, r10
    3294:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <strcasestr>
    3298:	89 2b       	or	r24, r25
    329a:	09 f5       	brne	.+66     	; 0x32de <_reply2ReturnCode+0xc2>
    329c:	44 2d       	mov	r20, r4
    329e:	35 14       	cp	r3, r5
    32a0:	08 f4       	brcc	.+2      	; 0x32a4 <_reply2ReturnCode+0x88>
    32a2:	4c 2f       	mov	r20, r28
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	b8 01       	movw	r22, r16
    32a8:	c5 01       	movw	r24, r10
    32aa:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <strncasecmp>
    32ae:	89 2b       	or	r24, r25
    32b0:	49 f4       	brne	.+18     	; 0x32c4 <_reply2ReturnCode+0xa8>
    32b2:	f3 01       	movw	r30, r6
    32b4:	ee 0f       	add	r30, r30
    32b6:	ff 1f       	adc	r31, r31
    32b8:	e6 0d       	add	r30, r6
    32ba:	f7 1d       	adc	r31, r7
    32bc:	e5 5b       	subi	r30, 0xB5	; 181
    32be:	f9 4f       	sbci	r31, 0xF9	; 249
    32c0:	20 80       	ld	r2, Z
    32c2:	0d c0       	rjmp	.+26     	; 0x32de <_reply2ReturnCode+0xc2>
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	e8 1a       	sub	r14, r24
    32c8:	f8 0a       	sbc	r15, r24
    32ca:	e3 e0       	ldi	r30, 0x03	; 3
    32cc:	8e 0e       	add	r8, r30
    32ce:	91 1c       	adc	r9, r1
    32d0:	f1 e1       	ldi	r31, 0x11	; 17
    32d2:	ef 16       	cp	r14, r31
    32d4:	f1 04       	cpc	r15, r1
    32d6:	39 f6       	brne	.-114    	; 0x3266 <_reply2ReturnCode+0x4a>
    32d8:	68 94       	set
    32da:	22 24       	eor	r2, r2
    32dc:	24 f8       	bld	r2, 4
    32de:	82 2d       	mov	r24, r2
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	df 90       	pop	r13
    32ee:	cf 90       	pop	r12
    32f0:	bf 90       	pop	r11
    32f2:	af 90       	pop	r10
    32f4:	9f 90       	pop	r9
    32f6:	8f 90       	pop	r8
    32f8:	7f 90       	pop	r7
    32fa:	6f 90       	pop	r6
    32fc:	5f 90       	pop	r5
    32fe:	4f 90       	pop	r4
    3300:	3f 90       	pop	r3
    3302:	2f 90       	pop	r2
    3304:	08 95       	ret

00003306 <_uploadMessageRc>:
    3306:	30 df       	rcall	.-416    	; 0x3168 <_uploadMessage>
    3308:	89 cf       	rjmp	.-238    	; 0x321c <_reply2ReturnCode>
    330a:	08 95       	ret

0000330c <lora_driver_flushBuffers>:
    330c:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    3310:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    3314:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <xStreamBufferReset>
    3318:	08 95       	ret

0000331a <lora_driver_initialise>:
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	cf 92       	push	r12
    3322:	ef 92       	push	r14
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	c8 2f       	mov	r28, r24
    332c:	8b 01       	movw	r16, r22
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	88 ec       	ldi	r24, 0xC8	; 200
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	0e 94 c5 08 	call	0x118a	; 0x118a <xStreamBufferGenericCreate>
    333c:	90 93 1f 12 	sts	0x121F, r25	; 0x80121f <_serialReplyBufferHandle+0x1>
    3340:	80 93 1e 12 	sts	0x121E, r24	; 0x80121e <_serialReplyBufferHandle>
    3344:	10 93 1d 12 	sts	0x121D, r17	; 0x80121d <_downlinkMessageBuffer+0x1>
    3348:	00 93 1c 12 	sts	0x121C, r16	; 0x80121c <_downlinkMessageBuffer>
    334c:	0f 2e       	mov	r0, r31
    334e:	fe e6       	ldi	r31, 0x6E	; 110
    3350:	8f 2e       	mov	r8, r31
    3352:	f8 e1       	ldi	r31, 0x18	; 24
    3354:	9f 2e       	mov	r9, r31
    3356:	f0 2d       	mov	r31, r0
    3358:	68 94       	set
    335a:	aa 24       	eor	r10, r10
    335c:	a6 f8       	bld	r10, 6
    335e:	68 94       	set
    3360:	cc 24       	eor	r12, r12
    3362:	c6 f8       	bld	r12, 6
    3364:	e1 2c       	mov	r14, r1
    3366:	00 e0       	ldi	r16, 0x00	; 0
    3368:	23 e0       	ldi	r18, 0x03	; 3
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	51 ee       	ldi	r21, 0xE1	; 225
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	70 e0       	ldi	r23, 0x00	; 0
    3372:	8c 2f       	mov	r24, r28
    3374:	1e d3       	rcall	.+1596   	; 0x39b2 <serial_create>
    3376:	90 93 21 12 	sts	0x1221, r25	; 0x801221 <_rn2483_serial+0x1>
    337a:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <_rn2483_serial>
    337e:	e7 e0       	ldi	r30, 0x07	; 7
    3380:	f1 e0       	ldi	r31, 0x01	; 1
    3382:	80 81       	ld	r24, Z
    3384:	80 61       	ori	r24, 0x10	; 16
    3386:	80 83       	st	Z, r24
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ef 90       	pop	r14
    3390:	cf 90       	pop	r12
    3392:	af 90       	pop	r10
    3394:	9f 90       	pop	r9
    3396:	8f 90       	pop	r8
    3398:	08 95       	ret

0000339a <lora_driver_resetRn2483>:
    339a:	88 23       	and	r24, r24
    339c:	31 f0       	breq	.+12     	; 0x33aa <lora_driver_resetRn2483+0x10>
    339e:	e8 e0       	ldi	r30, 0x08	; 8
    33a0:	f1 e0       	ldi	r31, 0x01	; 1
    33a2:	80 81       	ld	r24, Z
    33a4:	8f 7e       	andi	r24, 0xEF	; 239
    33a6:	80 83       	st	Z, r24
    33a8:	08 95       	ret
    33aa:	e8 e0       	ldi	r30, 0x08	; 8
    33ac:	f1 e0       	ldi	r31, 0x01	; 1
    33ae:	80 81       	ld	r24, Z
    33b0:	80 61       	ori	r24, 0x10	; 16
    33b2:	80 83       	st	Z, r24
    33b4:	08 95       	ret

000033b6 <lora_driver_rn2483FactoryReset>:
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	81 ed       	ldi	r24, 0xD1	; 209
    33bc:	93 e0       	ldi	r25, 0x03	; 3
    33be:	d4 de       	rcall	.-600    	; 0x3168 <_uploadMessage>
    33c0:	e7 ea       	ldi	r30, 0xA7	; 167
    33c2:	f2 e1       	ldi	r31, 0x12	; 18
    33c4:	01 90       	ld	r0, Z+
    33c6:	00 20       	and	r0, r0
    33c8:	e9 f7       	brne	.-6      	; 0x33c4 <lora_driver_rn2483FactoryReset+0xe>
    33ca:	31 97       	sbiw	r30, 0x01	; 1
    33cc:	e7 5a       	subi	r30, 0xA7	; 167
    33ce:	f2 41       	sbci	r31, 0x12	; 18
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	75 97       	sbiw	r30, 0x15	; 21
    33d4:	08 f0       	brcs	.+2      	; 0x33d8 <lora_driver_rn2483FactoryReset+0x22>
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	08 95       	ret

000033da <lora_driver_getRn2483Hweui>:
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	ec 01       	movw	r28, r24
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	70 e0       	ldi	r23, 0x00	; 0
    33e4:	82 ee       	ldi	r24, 0xE2	; 226
    33e6:	93 e0       	ldi	r25, 0x03	; 3
    33e8:	bf de       	rcall	.-642    	; 0x3168 <_uploadMessage>
    33ea:	e7 ea       	ldi	r30, 0xA7	; 167
    33ec:	f2 e1       	ldi	r31, 0x12	; 18
    33ee:	01 90       	ld	r0, Z+
    33f0:	00 20       	and	r0, r0
    33f2:	e9 f7       	brne	.-6      	; 0x33ee <lora_driver_getRn2483Hweui+0x14>
    33f4:	e8 5b       	subi	r30, 0xB8	; 184
    33f6:	f2 41       	sbci	r31, 0x12	; 18
    33f8:	39 f4       	brne	.+14     	; 0x3408 <lora_driver_getRn2483Hweui+0x2e>
    33fa:	67 ea       	ldi	r22, 0xA7	; 167
    33fc:	72 e1       	ldi	r23, 0x12	; 18
    33fe:	ce 01       	movw	r24, r28
    3400:	0e 94 f5 25 	call	0x4bea	; 0x4bea <strcpy>
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	02 c0       	rjmp	.+4      	; 0x340c <lora_driver_getRn2483Hweui+0x32>
    3408:	18 82       	st	Y, r1
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	08 95       	ret

00003412 <lora_driver_setDeviceIdentifier>:
    3412:	fc 01       	movw	r30, r24
    3414:	01 90       	ld	r0, Z+
    3416:	00 20       	and	r0, r0
    3418:	e9 f7       	brne	.-6      	; 0x3414 <lora_driver_setDeviceIdentifier+0x2>
    341a:	9f 01       	movw	r18, r30
    341c:	21 51       	subi	r18, 0x11	; 17
    341e:	31 09       	sbc	r19, r1
    3420:	28 17       	cp	r18, r24
    3422:	39 07       	cpc	r19, r25
    3424:	29 f4       	brne	.+10     	; 0x3430 <lora_driver_setDeviceIdentifier+0x1e>
    3426:	bc 01       	movw	r22, r24
    3428:	80 e1       	ldi	r24, 0x10	; 16
    342a:	94 e0       	ldi	r25, 0x04	; 4
    342c:	6c cf       	rjmp	.-296    	; 0x3306 <_uploadMessageRc>
    342e:	08 95       	ret
    3430:	89 e0       	ldi	r24, 0x09	; 9
    3432:	08 95       	ret

00003434 <lora_driver_setApplicationIdentifier>:
    3434:	fc 01       	movw	r30, r24
    3436:	01 90       	ld	r0, Z+
    3438:	00 20       	and	r0, r0
    343a:	e9 f7       	brne	.-6      	; 0x3436 <lora_driver_setApplicationIdentifier+0x2>
    343c:	9f 01       	movw	r18, r30
    343e:	21 51       	subi	r18, 0x11	; 17
    3440:	31 09       	sbc	r19, r1
    3442:	28 17       	cp	r18, r24
    3444:	39 07       	cpc	r19, r25
    3446:	29 f4       	brne	.+10     	; 0x3452 <lora_driver_setApplicationIdentifier+0x1e>
    3448:	bc 01       	movw	r22, r24
    344a:	8f e1       	ldi	r24, 0x1F	; 31
    344c:	94 e0       	ldi	r25, 0x04	; 4
    344e:	5b cf       	rjmp	.-330    	; 0x3306 <_uploadMessageRc>
    3450:	08 95       	ret
    3452:	89 e0       	ldi	r24, 0x09	; 9
    3454:	08 95       	ret

00003456 <lora_driver_setApplicationKey>:
    3456:	fc 01       	movw	r30, r24
    3458:	01 90       	ld	r0, Z+
    345a:	00 20       	and	r0, r0
    345c:	e9 f7       	brne	.-6      	; 0x3458 <lora_driver_setApplicationKey+0x2>
    345e:	9f 01       	movw	r18, r30
    3460:	21 52       	subi	r18, 0x21	; 33
    3462:	31 09       	sbc	r19, r1
    3464:	28 17       	cp	r18, r24
    3466:	39 07       	cpc	r19, r25
    3468:	29 f4       	brne	.+10     	; 0x3474 <lora_driver_setApplicationKey+0x1e>
    346a:	bc 01       	movw	r22, r24
    346c:	8e e2       	ldi	r24, 0x2E	; 46
    346e:	94 e0       	ldi	r25, 0x04	; 4
    3470:	4a cf       	rjmp	.-364    	; 0x3306 <_uploadMessageRc>
    3472:	08 95       	ret
    3474:	89 e0       	ldi	r24, 0x09	; 9
    3476:	08 95       	ret

00003478 <lora_driver_saveMac>:
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	8d e6       	ldi	r24, 0x6D	; 109
    347e:	94 e0       	ldi	r25, 0x04	; 4
    3480:	42 cf       	rjmp	.-380    	; 0x3306 <_uploadMessageRc>
    3482:	08 95       	ret

00003484 <lora_driver_join>:
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	e8 2f       	mov	r30, r24
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	ee 0f       	add	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	e9 5b       	subi	r30, 0xB9	; 185
    3492:	f9 4f       	sbci	r31, 0xF9	; 249
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	86 e7       	ldi	r24, 0x76	; 118
    349a:	94 e0       	ldi	r25, 0x04	; 4
    349c:	34 df       	rcall	.-408    	; 0x3306 <_uploadMessageRc>
    349e:	81 11       	cpse	r24, r1
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <lora_driver_join+0x46>
    34a2:	08 e2       	ldi	r16, 0x28	; 40
    34a4:	15 e0       	ldi	r17, 0x05	; 5
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	4d e2       	ldi	r20, 0x2D	; 45
    34ac:	50 e0       	ldi	r21, 0x00	; 0
    34ae:	67 ea       	ldi	r22, 0xA7	; 167
    34b0:	72 e1       	ldi	r23, 0x12	; 18
    34b2:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    34b6:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    34ba:	0e 94 49 0a 	call	0x1492	; 0x1492 <xStreamBufferReceive>
    34be:	88 23       	and	r24, r24
    34c0:	21 f0       	breq	.+8      	; 0x34ca <lora_driver_join+0x46>
    34c2:	87 ea       	ldi	r24, 0xA7	; 167
    34c4:	92 e1       	ldi	r25, 0x12	; 18
    34c6:	aa de       	rcall	.-684    	; 0x321c <_reply2ReturnCode>
    34c8:	03 c0       	rjmp	.+6      	; 0x34d0 <lora_driver_join+0x4c>
    34ca:	87 ea       	ldi	r24, 0xA7	; 167
    34cc:	92 e1       	ldi	r25, 0x12	; 18
    34ce:	a6 de       	rcall	.-692    	; 0x321c <_reply2ReturnCode>
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	08 95       	ret

000034d6 <lora_driver_sendUploadMessage>:
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	1f 92       	push	r1
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	db 01       	movw	r26, r22
    34e6:	11 96       	adiw	r26, 0x01	; 1
    34e8:	9c 91       	ld	r25, X
    34ea:	11 97       	sbiw	r26, 0x01	; 1
    34ec:	95 31       	cpi	r25, 0x15	; 21
    34ee:	08 f0       	brcs	.+2      	; 0x34f2 <lora_driver_sendUploadMessage+0x1c>
    34f0:	b4 c0       	rjmp	.+360    	; 0x365a <lora_driver_sendUploadMessage+0x184>
    34f2:	99 23       	and	r25, r25
    34f4:	81 f1       	breq	.+96     	; 0x3556 <lora_driver_sendUploadMessage+0x80>
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	27 2f       	mov	r18, r23
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	46 2f       	mov	r20, r22
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	fd 01       	movw	r30, r26
    3504:	e4 0f       	add	r30, r20
    3506:	f5 1f       	adc	r31, r21
    3508:	92 81       	ldd	r25, Z+2	; 0x02
    350a:	92 95       	swap	r25
    350c:	9f 70       	andi	r25, 0x0F	; 15
    350e:	9a 30       	cpi	r25, 0x0A	; 10
    3510:	10 f0       	brcs	.+4      	; 0x3516 <lora_driver_sendUploadMessage+0x40>
    3512:	99 5c       	subi	r25, 0xC9	; 201
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <lora_driver_sendUploadMessage+0x42>
    3516:	90 5d       	subi	r25, 0xD0	; 208
    3518:	f9 01       	movw	r30, r18
    351a:	e8 5c       	subi	r30, 0xC8	; 200
    351c:	fd 4e       	sbci	r31, 0xED	; 237
    351e:	90 83       	st	Z, r25
    3520:	2f 5f       	subi	r18, 0xFF	; 255
    3522:	3f 4f       	sbci	r19, 0xFF	; 255
    3524:	fd 01       	movw	r30, r26
    3526:	e4 0f       	add	r30, r20
    3528:	f5 1f       	adc	r31, r21
    352a:	92 81       	ldd	r25, Z+2	; 0x02
    352c:	9f 70       	andi	r25, 0x0F	; 15
    352e:	49 2f       	mov	r20, r25
    3530:	50 e0       	ldi	r21, 0x00	; 0
    3532:	4a 30       	cpi	r20, 0x0A	; 10
    3534:	51 05       	cpc	r21, r1
    3536:	14 f0       	brlt	.+4      	; 0x353c <lora_driver_sendUploadMessage+0x66>
    3538:	99 5c       	subi	r25, 0xC9	; 201
    353a:	01 c0       	rjmp	.+2      	; 0x353e <lora_driver_sendUploadMessage+0x68>
    353c:	90 5d       	subi	r25, 0xD0	; 208
    353e:	f9 01       	movw	r30, r18
    3540:	e8 5c       	subi	r30, 0xC8	; 200
    3542:	fd 4e       	sbci	r31, 0xED	; 237
    3544:	90 83       	st	Z, r25
    3546:	7e 5f       	subi	r23, 0xFE	; 254
    3548:	6f 5f       	subi	r22, 0xFF	; 255
    354a:	11 96       	adiw	r26, 0x01	; 1
    354c:	9c 91       	ld	r25, X
    354e:	11 97       	sbiw	r26, 0x01	; 1
    3550:	69 17       	cp	r22, r25
    3552:	98 f2       	brcs	.-90     	; 0x34fa <lora_driver_sendUploadMessage+0x24>
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <lora_driver_sendUploadMessage+0x82>
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	e7 2f       	mov	r30, r23
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	e8 5c       	subi	r30, 0xC8	; 200
    355e:	fd 4e       	sbci	r31, 0xED	; 237
    3560:	10 82       	st	Z, r1
    3562:	4c 91       	ld	r20, X
    3564:	81 11       	cpse	r24, r1
    3566:	03 c0       	rjmp	.+6      	; 0x356e <lora_driver_sendUploadMessage+0x98>
    3568:	8f e7       	ldi	r24, 0x7F	; 127
    356a:	94 e0       	ldi	r25, 0x04	; 4
    356c:	02 c0       	rjmp	.+4      	; 0x3572 <lora_driver_sendUploadMessage+0x9c>
    356e:	81 e8       	ldi	r24, 0x81	; 129
    3570:	94 e0       	ldi	r25, 0x04	; 4
    3572:	28 e3       	ldi	r18, 0x38	; 56
    3574:	32 e1       	ldi	r19, 0x12	; 18
    3576:	3f 93       	push	r19
    3578:	2f 93       	push	r18
    357a:	1f 92       	push	r1
    357c:	4f 93       	push	r20
    357e:	9f 93       	push	r25
    3580:	8f 93       	push	r24
    3582:	85 e8       	ldi	r24, 0x85	; 133
    3584:	94 e0       	ldi	r25, 0x04	; 4
    3586:	9f 93       	push	r25
    3588:	8f 93       	push	r24
    358a:	8a e7       	ldi	r24, 0x7A	; 122
    358c:	92 e1       	ldi	r25, 0x12	; 18
    358e:	9f 93       	push	r25
    3590:	8f 93       	push	r24
    3592:	0e 94 57 26 	call	0x4cae	; 0x4cae <sprintf>
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	8a e7       	ldi	r24, 0x7A	; 122
    359c:	92 e1       	ldi	r25, 0x12	; 18
    359e:	b3 de       	rcall	.-666    	; 0x3306 <_uploadMessageRc>
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	81 11       	cpse	r24, r1
    35ac:	59 c0       	rjmp	.+178    	; 0x3660 <lora_driver_sendUploadMessage+0x18a>
    35ae:	08 e2       	ldi	r16, 0x28	; 40
    35b0:	15 e0       	ldi	r17, 0x05	; 5
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4d e2       	ldi	r20, 0x2D	; 45
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	67 ea       	ldi	r22, 0xA7	; 167
    35bc:	72 e1       	ldi	r23, 0x12	; 18
    35be:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    35c2:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    35c6:	0e 94 49 0a 	call	0x1492	; 0x1492 <xStreamBufferReceive>
    35ca:	88 23       	and	r24, r24
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <lora_driver_sendUploadMessage+0xfa>
    35ce:	47 c0       	rjmp	.+142    	; 0x365e <lora_driver_sendUploadMessage+0x188>
    35d0:	87 ea       	ldi	r24, 0xA7	; 167
    35d2:	92 e1       	ldi	r25, 0x12	; 18
    35d4:	23 de       	rcall	.-954    	; 0x321c <_reply2ReturnCode>
    35d6:	8e 30       	cpi	r24, 0x0E	; 14
    35d8:	09 f0       	breq	.+2      	; 0x35dc <lora_driver_sendUploadMessage+0x106>
    35da:	42 c0       	rjmp	.+132    	; 0x3660 <lora_driver_sendUploadMessage+0x18a>
    35dc:	87 e0       	ldi	r24, 0x07	; 7
    35de:	89 83       	std	Y+1, r24	; 0x01
    35e0:	80 91 1c 12 	lds	r24, 0x121C	; 0x80121c <_downlinkMessageBuffer>
    35e4:	90 91 1d 12 	lds	r25, 0x121D	; 0x80121d <_downlinkMessageBuffer+0x1>
    35e8:	89 2b       	or	r24, r25
    35ea:	a9 f1       	breq	.+106    	; 0x3656 <lora_driver_sendUploadMessage+0x180>
    35ec:	be 01       	movw	r22, r28
    35ee:	6f 5f       	subi	r22, 0xFF	; 255
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	87 ea       	ldi	r24, 0xA7	; 167
    35f4:	92 e1       	ldi	r25, 0x12	; 18
    35f6:	68 d1       	rcall	.+720    	; 0x38c8 <decode_port_no>
    35f8:	80 93 22 12 	sts	0x1222, r24	; 0x801222 <_downlinkPayload>
    35fc:	e9 81       	ldd	r30, Y+1	; 0x01
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	e9 55       	subi	r30, 0x59	; 89
    3602:	fd 4e       	sbci	r31, 0xED	; 237
    3604:	df 01       	movw	r26, r30
    3606:	0d 90       	ld	r0, X+
    3608:	00 20       	and	r0, r0
    360a:	e9 f7       	brne	.-6      	; 0x3606 <lora_driver_sendUploadMessage+0x130>
    360c:	11 97       	sbiw	r26, 0x01	; 1
    360e:	ae 1b       	sub	r26, r30
    3610:	bf 0b       	sbc	r27, r31
    3612:	aa 23       	and	r26, r26
    3614:	91 f0       	breq	.+36     	; 0x363a <lora_driver_sendUploadMessage+0x164>
    3616:	bb 27       	eor	r27, r27
    3618:	cd 01       	movw	r24, r26
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	9c 01       	movw	r18, r24
    361e:	12 f4       	brpl	.+4      	; 0x3624 <lora_driver_sendUploadMessage+0x14e>
    3620:	2f 5f       	subi	r18, 0xFF	; 255
    3622:	3f 4f       	sbci	r19, 0xFF	; 255
    3624:	35 95       	asr	r19
    3626:	27 95       	ror	r18
    3628:	20 93 23 12 	sts	0x1223, r18	; 0x801223 <_downlinkPayload+0x1>
    362c:	af 01       	movw	r20, r30
    362e:	4f 5f       	subi	r20, 0xFF	; 255
    3630:	5f 4f       	sbci	r21, 0xFF	; 255
    3632:	64 e1       	ldi	r22, 0x14	; 20
    3634:	84 e2       	ldi	r24, 0x24	; 36
    3636:	92 e1       	ldi	r25, 0x12	; 18
    3638:	73 d1       	rcall	.+742    	; 0x3920 <decode_hexadecimal_string_bytes>
    363a:	01 e0       	ldi	r16, 0x01	; 1
    363c:	10 e0       	ldi	r17, 0x00	; 0
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	46 e1       	ldi	r20, 0x16	; 22
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	62 e2       	ldi	r22, 0x22	; 34
    3648:	72 e1       	ldi	r23, 0x12	; 18
    364a:	80 91 1c 12 	lds	r24, 0x121C	; 0x80121c <_downlinkMessageBuffer>
    364e:	90 91 1d 12 	lds	r25, 0x121D	; 0x80121d <_downlinkMessageBuffer+0x1>
    3652:	0e 94 46 09 	call	0x128c	; 0x128c <xStreamBufferSend>
    3656:	8e e0       	ldi	r24, 0x0E	; 14
    3658:	03 c0       	rjmp	.+6      	; 0x3660 <lora_driver_sendUploadMessage+0x18a>
    365a:	84 e1       	ldi	r24, 0x14	; 20
    365c:	01 c0       	rjmp	.+2      	; 0x3660 <lora_driver_sendUploadMessage+0x18a>
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	0f 90       	pop	r0
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	08 95       	ret

0000366c <lora_driver_setAdaptiveDataRate>:
    366c:	81 30       	cpi	r24, 0x01	; 1
    366e:	19 f0       	breq	.+6      	; 0x3676 <lora_driver_setAdaptiveDataRate+0xa>
    3670:	65 e9       	ldi	r22, 0x95	; 149
    3672:	74 e0       	ldi	r23, 0x04	; 4
    3674:	02 c0       	rjmp	.+4      	; 0x367a <lora_driver_setAdaptiveDataRate+0xe>
    3676:	6e e6       	ldi	r22, 0x6E	; 110
    3678:	75 e0       	ldi	r23, 0x05	; 5
    367a:	89 e9       	ldi	r24, 0x99	; 153
    367c:	94 e0       	ldi	r25, 0x04	; 4
    367e:	43 ce       	rjmp	.-890    	; 0x3306 <_uploadMessageRc>
    3680:	08 95       	ret

00003682 <lora_driver_setReceiveDelay>:
    3682:	9f 93       	push	r25
    3684:	8f 93       	push	r24
    3686:	8a ec       	ldi	r24, 0xCA	; 202
    3688:	94 e0       	ldi	r25, 0x04	; 4
    368a:	9f 93       	push	r25
    368c:	8f 93       	push	r24
    368e:	8a e7       	ldi	r24, 0x7A	; 122
    3690:	92 e1       	ldi	r25, 0x12	; 18
    3692:	9f 93       	push	r25
    3694:	8f 93       	push	r24
    3696:	0e 94 57 26 	call	0x4cae	; 0x4cae <sprintf>
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	70 e0       	ldi	r23, 0x00	; 0
    369e:	8a e7       	ldi	r24, 0x7A	; 122
    36a0:	92 e1       	ldi	r25, 0x12	; 18
    36a2:	31 de       	rcall	.-926    	; 0x3306 <_uploadMessageRc>
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	08 95       	ret

000036b2 <lora_driver_configureToEu868>:
    36b2:	2f 92       	push	r2
    36b4:	3f 92       	push	r3
    36b6:	4f 92       	push	r4
    36b8:	5f 92       	push	r5
    36ba:	6f 92       	push	r6
    36bc:	7f 92       	push	r7
    36be:	8f 92       	push	r8
    36c0:	9f 92       	push	r9
    36c2:	af 92       	push	r10
    36c4:	bf 92       	push	r11
    36c6:	cf 92       	push	r12
    36c8:	df 92       	push	r13
    36ca:	ef 92       	push	r14
    36cc:	ff 92       	push	r15
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	a0 97       	sbiw	r28, 0x20	; 32
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	67 ef       	ldi	r22, 0xF7	; 247
    36e8:	74 e0       	ldi	r23, 0x04	; 4
    36ea:	83 e0       	ldi	r24, 0x03	; 3
    36ec:	95 e0       	ldi	r25, 0x05	; 5
    36ee:	3c dd       	rcall	.-1416   	; 0x3168 <_uploadMessage>
    36f0:	95 dd       	rcall	.-1238   	; 0x321c <_reply2ReturnCode>
    36f2:	81 11       	cpse	r24, r1
    36f4:	a3 c0       	rjmp	.+326    	; 0x383c <lora_driver_configureToEu868+0x18a>
    36f6:	80 e2       	ldi	r24, 0x20	; 32
    36f8:	ed e1       	ldi	r30, 0x1D	; 29
    36fa:	f2 e0       	ldi	r31, 0x02	; 2
    36fc:	de 01       	movw	r26, r28
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	01 90       	ld	r0, Z+
    3702:	0d 92       	st	X+, r0
    3704:	8a 95       	dec	r24
    3706:	e1 f7       	brne	.-8      	; 0x3700 <lora_driver_configureToEu868+0x4e>
    3708:	9e 01       	movw	r18, r28
    370a:	2f 5f       	subi	r18, 0xFF	; 255
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
    370e:	69 01       	movw	r12, r18
    3710:	e1 2c       	mov	r14, r1
    3712:	f1 2c       	mov	r15, r1
    3714:	0f 2e       	mov	r0, r31
    3716:	ff e0       	ldi	r31, 0x0F	; 15
    3718:	af 2e       	mov	r10, r31
    371a:	f5 e0       	ldi	r31, 0x05	; 5
    371c:	bf 2e       	mov	r11, r31
    371e:	f0 2d       	mov	r31, r0
    3720:	0a e7       	ldi	r16, 0x7A	; 122
    3722:	12 e1       	ldi	r17, 0x12	; 18
    3724:	0f 2e       	mov	r0, r31
    3726:	f8 e2       	ldi	r31, 0x28	; 40
    3728:	4f 2e       	mov	r4, r31
    372a:	f5 e0       	ldi	r31, 0x05	; 5
    372c:	5f 2e       	mov	r5, r31
    372e:	f0 2d       	mov	r31, r0
    3730:	0f 2e       	mov	r0, r31
    3732:	ff e3       	ldi	r31, 0x3F	; 63
    3734:	8f 2e       	mov	r8, r31
    3736:	f5 e0       	ldi	r31, 0x05	; 5
    3738:	9f 2e       	mov	r9, r31
    373a:	f0 2d       	mov	r31, r0
    373c:	0f 2e       	mov	r0, r31
    373e:	f9 e5       	ldi	r31, 0x59	; 89
    3740:	6f 2e       	mov	r6, r31
    3742:	f5 e0       	ldi	r31, 0x05	; 5
    3744:	7f 2e       	mov	r7, r31
    3746:	f0 2d       	mov	r31, r0
    3748:	3e 2c       	mov	r3, r14
    374a:	2f 2c       	mov	r2, r15
    374c:	ff 92       	push	r15
    374e:	ef 92       	push	r14
    3750:	bf 92       	push	r11
    3752:	af 92       	push	r10
    3754:	1f 93       	push	r17
    3756:	0f 93       	push	r16
    3758:	0e 94 57 26 	call	0x4cae	; 0x4cae <sprintf>
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	c8 01       	movw	r24, r16
    3762:	02 dd       	rcall	.-1532   	; 0x3168 <_uploadMessage>
    3764:	5b dd       	rcall	.-1354   	; 0x321c <_reply2ReturnCode>
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	81 11       	cpse	r24, r1
    3774:	63 c0       	rjmp	.+198    	; 0x383c <lora_driver_configureToEu868+0x18a>
    3776:	32 e0       	ldi	r19, 0x02	; 2
    3778:	3e 15       	cp	r19, r14
    377a:	e8 f4       	brcc	.+58     	; 0x37b6 <lora_driver_configureToEu868+0x104>
    377c:	f6 01       	movw	r30, r12
    377e:	83 81       	ldd	r24, Z+3	; 0x03
    3780:	8f 93       	push	r24
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	8f 93       	push	r24
    3786:	81 81       	ldd	r24, Z+1	; 0x01
    3788:	8f 93       	push	r24
    378a:	80 81       	ld	r24, Z
    378c:	8f 93       	push	r24
    378e:	ff 92       	push	r15
    3790:	ef 92       	push	r14
    3792:	5f 92       	push	r5
    3794:	4f 92       	push	r4
    3796:	1f 93       	push	r17
    3798:	0f 93       	push	r16
    379a:	0e 94 57 26 	call	0x4cae	; 0x4cae <sprintf>
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	c8 01       	movw	r24, r16
    37a4:	e1 dc       	rcall	.-1598   	; 0x3168 <_uploadMessage>
    37a6:	3a dd       	rcall	.-1420   	; 0x321c <_reply2ReturnCode>
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	81 11       	cpse	r24, r1
    37b4:	43 c0       	rjmp	.+134    	; 0x383c <lora_driver_configureToEu868+0x18a>
    37b6:	2f 92       	push	r2
    37b8:	3f 92       	push	r3
    37ba:	9f 92       	push	r9
    37bc:	8f 92       	push	r8
    37be:	1f 93       	push	r17
    37c0:	0f 93       	push	r16
    37c2:	0e 94 57 26 	call	0x4cae	; 0x4cae <sprintf>
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	c8 01       	movw	r24, r16
    37cc:	cd dc       	rcall	.-1638   	; 0x3168 <_uploadMessage>
    37ce:	26 dd       	rcall	.-1460   	; 0x321c <_reply2ReturnCode>
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	81 11       	cpse	r24, r1
    37de:	2e c0       	rjmp	.+92     	; 0x383c <lora_driver_configureToEu868+0x18a>
    37e0:	2f 92       	push	r2
    37e2:	3f 92       	push	r3
    37e4:	7f 92       	push	r7
    37e6:	6f 92       	push	r6
    37e8:	1f 93       	push	r17
    37ea:	0f 93       	push	r16
    37ec:	0e 94 57 26 	call	0x4cae	; 0x4cae <sprintf>
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	c8 01       	movw	r24, r16
    37f6:	b8 dc       	rcall	.-1680   	; 0x3168 <_uploadMessage>
    37f8:	11 dd       	rcall	.-1502   	; 0x321c <_reply2ReturnCode>
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	81 11       	cpse	r24, r1
    3808:	19 c0       	rjmp	.+50     	; 0x383c <lora_driver_configureToEu868+0x18a>
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	e3 1a       	sub	r14, r19
    380e:	f3 0a       	sbc	r15, r19
    3810:	84 e0       	ldi	r24, 0x04	; 4
    3812:	c8 0e       	add	r12, r24
    3814:	d1 1c       	adc	r13, r1
    3816:	98 e0       	ldi	r25, 0x08	; 8
    3818:	e9 16       	cp	r14, r25
    381a:	f1 04       	cpc	r15, r1
    381c:	09 f0       	breq	.+2      	; 0x3820 <lora_driver_configureToEu868+0x16e>
    381e:	94 cf       	rjmp	.-216    	; 0x3748 <lora_driver_configureToEu868+0x96>
    3820:	60 e0       	ldi	r22, 0x00	; 0
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	81 e7       	ldi	r24, 0x71	; 113
    3826:	95 e0       	ldi	r25, 0x05	; 5
    3828:	9f dc       	rcall	.-1730   	; 0x3168 <_uploadMessage>
    382a:	f8 dc       	rcall	.-1552   	; 0x321c <_reply2ReturnCode>
    382c:	81 11       	cpse	r24, r1
    382e:	06 c0       	rjmp	.+12     	; 0x383c <lora_driver_configureToEu868+0x18a>
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	70 e0       	ldi	r23, 0x00	; 0
    3834:	82 e8       	ldi	r24, 0x82	; 130
    3836:	95 e0       	ldi	r25, 0x05	; 5
    3838:	97 dc       	rcall	.-1746   	; 0x3168 <_uploadMessage>
    383a:	f0 dc       	rcall	.-1568   	; 0x321c <_reply2ReturnCode>
    383c:	a0 96       	adiw	r28, 0x20	; 32
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	df 91       	pop	r29
    384a:	cf 91       	pop	r28
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ff 90       	pop	r15
    3852:	ef 90       	pop	r14
    3854:	df 90       	pop	r13
    3856:	cf 90       	pop	r12
    3858:	bf 90       	pop	r11
    385a:	af 90       	pop	r10
    385c:	9f 90       	pop	r9
    385e:	8f 90       	pop	r8
    3860:	7f 90       	pop	r7
    3862:	6f 90       	pop	r6
    3864:	5f 90       	pop	r5
    3866:	4f 90       	pop	r4
    3868:	3f 90       	pop	r3
    386a:	2f 90       	pop	r2
    386c:	08 95       	ret

0000386e <lora_driver_setOtaaIdentity>:
    386e:	ef 92       	push	r14
    3870:	ff 92       	push	r15
    3872:	0f 93       	push	r16
    3874:	1f 93       	push	r17
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
    387a:	ec 01       	movw	r28, r24
    387c:	8b 01       	movw	r16, r22
    387e:	7a 01       	movw	r14, r20
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	f4 de       	rcall	.-536    	; 0x366c <lora_driver_setAdaptiveDataRate>
    3884:	81 11       	cpse	r24, r1
    3886:	0d c0       	rjmp	.+26     	; 0x38a2 <lora_driver_setOtaaIdentity+0x34>
    3888:	ce 01       	movw	r24, r28
    388a:	d4 dd       	rcall	.-1112   	; 0x3434 <lora_driver_setApplicationIdentifier>
    388c:	81 11       	cpse	r24, r1
    388e:	09 c0       	rjmp	.+18     	; 0x38a2 <lora_driver_setOtaaIdentity+0x34>
    3890:	c8 01       	movw	r24, r16
    3892:	e1 dd       	rcall	.-1086   	; 0x3456 <lora_driver_setApplicationKey>
    3894:	81 11       	cpse	r24, r1
    3896:	05 c0       	rjmp	.+10     	; 0x38a2 <lora_driver_setOtaaIdentity+0x34>
    3898:	c7 01       	movw	r24, r14
    389a:	bb dd       	rcall	.-1162   	; 0x3412 <lora_driver_setDeviceIdentifier>
    389c:	81 11       	cpse	r24, r1
    389e:	01 c0       	rjmp	.+2      	; 0x38a2 <lora_driver_setOtaaIdentity+0x34>
    38a0:	eb dd       	rcall	.-1066   	; 0x3478 <lora_driver_saveMac>
    38a2:	df 91       	pop	r29
    38a4:	cf 91       	pop	r28
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	ff 90       	pop	r15
    38ac:	ef 90       	pop	r14
    38ae:	08 95       	ret

000038b0 <lora_driver_mapReturnCodeToText>:
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	fc 01       	movw	r30, r24
    38b4:	ee 0f       	add	r30, r30
    38b6:	ff 1f       	adc	r31, r31
    38b8:	8e 0f       	add	r24, r30
    38ba:	9f 1f       	adc	r25, r31
    38bc:	fc 01       	movw	r30, r24
    38be:	e5 5b       	subi	r30, 0xB5	; 181
    38c0:	f9 4f       	sbci	r31, 0xF9	; 249
    38c2:	81 81       	ldd	r24, Z+1	; 0x01
    38c4:	92 81       	ldd	r25, Z+2	; 0x02
    38c6:	08 95       	ret

000038c8 <decode_port_no>:
    38c8:	dc 01       	movw	r26, r24
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	29 f1       	breq	.+74     	; 0x3918 <decode_port_no+0x50>
    38ce:	fb 01       	movw	r30, r22
    38d0:	20 81       	ld	r18, Z
    38d2:	fc 01       	movw	r30, r24
    38d4:	01 90       	ld	r0, Z+
    38d6:	00 20       	and	r0, r0
    38d8:	e9 f7       	brne	.-6      	; 0x38d4 <decode_port_no+0xc>
    38da:	31 97       	sbiw	r30, 0x01	; 1
    38dc:	e8 1b       	sub	r30, r24
    38de:	f9 0b       	sbc	r31, r25
    38e0:	82 2f       	mov	r24, r18
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	e8 17       	cp	r30, r24
    38e6:	f9 07       	cpc	r31, r25
    38e8:	c8 f0       	brcs	.+50     	; 0x391c <decode_port_no+0x54>
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	08 c0       	rjmp	.+16     	; 0x38fe <decode_port_no+0x36>
    38ee:	88 0f       	add	r24, r24
    38f0:	38 2f       	mov	r19, r24
    38f2:	33 0f       	add	r19, r19
    38f4:	33 0f       	add	r19, r19
    38f6:	83 0f       	add	r24, r19
    38f8:	80 53       	subi	r24, 0x30	; 48
    38fa:	89 0f       	add	r24, r25
    38fc:	2f 5f       	subi	r18, 0xFF	; 255
    38fe:	fd 01       	movw	r30, r26
    3900:	e2 0f       	add	r30, r18
    3902:	f1 1d       	adc	r31, r1
    3904:	90 81       	ld	r25, Z
    3906:	30 ed       	ldi	r19, 0xD0	; 208
    3908:	39 0f       	add	r19, r25
    390a:	3a 30       	cpi	r19, 0x0A	; 10
    390c:	10 f4       	brcc	.+4      	; 0x3912 <decode_port_no+0x4a>
    390e:	91 11       	cpse	r25, r1
    3910:	ee cf       	rjmp	.-36     	; 0x38ee <decode_port_no+0x26>
    3912:	fb 01       	movw	r30, r22
    3914:	20 83       	st	Z, r18
    3916:	08 95       	ret
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	08 95       	ret
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	08 95       	ret

00003920 <decode_hexadecimal_string_bytes>:
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	dc 01       	movw	r26, r24
    392a:	ea 01       	movw	r28, r20
    392c:	20 97       	sbiw	r28, 0x00	; 0
    392e:	e1 f1       	breq	.+120    	; 0x39a8 <decode_hexadecimal_string_bytes+0x88>
    3930:	fa 01       	movw	r30, r20
    3932:	01 90       	ld	r0, Z+
    3934:	00 20       	and	r0, r0
    3936:	e9 f7       	brne	.-6      	; 0x3932 <decode_hexadecimal_string_bytes+0x12>
    3938:	31 97       	sbiw	r30, 0x01	; 1
    393a:	e4 1b       	sub	r30, r20
    393c:	f5 0b       	sbc	r31, r21
    393e:	32 97       	sbiw	r30, 0x02	; 2
    3940:	10 f5       	brcc	.+68     	; 0x3986 <decode_hexadecimal_string_bytes+0x66>
    3942:	32 c0       	rjmp	.+100    	; 0x39a8 <decode_hexadecimal_string_bytes+0x88>
    3944:	8d 01       	movw	r16, r26
    3946:	04 0f       	add	r16, r20
    3948:	15 1f       	adc	r17, r21
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	ae 01       	movw	r20, r28
    394e:	42 0f       	add	r20, r18
    3950:	53 1f       	adc	r21, r19
    3952:	fa 01       	movw	r30, r20
    3954:	90 81       	ld	r25, Z
    3956:	91 34       	cpi	r25, 0x41	; 65
    3958:	28 f0       	brcs	.+10     	; 0x3964 <decode_hexadecimal_string_bytes+0x44>
    395a:	97 53       	subi	r25, 0x37	; 55
    395c:	59 2f       	mov	r21, r25
    395e:	52 95       	swap	r21
    3960:	50 7f       	andi	r21, 0xF0	; 240
    3962:	03 c0       	rjmp	.+6      	; 0x396a <decode_hexadecimal_string_bytes+0x4a>
    3964:	59 2f       	mov	r21, r25
    3966:	52 95       	swap	r21
    3968:	50 7f       	andi	r21, 0xF0	; 240
    396a:	2c 0f       	add	r18, r28
    396c:	3d 1f       	adc	r19, r29
    396e:	f9 01       	movw	r30, r18
    3970:	91 81       	ldd	r25, Z+1	; 0x01
    3972:	91 34       	cpi	r25, 0x41	; 65
    3974:	10 f0       	brcs	.+4      	; 0x397a <decode_hexadecimal_string_bytes+0x5a>
    3976:	97 53       	subi	r25, 0x37	; 55
    3978:	01 c0       	rjmp	.+2      	; 0x397c <decode_hexadecimal_string_bytes+0x5c>
    397a:	90 53       	subi	r25, 0x30	; 48
    397c:	95 0f       	add	r25, r21
    397e:	f8 01       	movw	r30, r16
    3980:	90 83       	st	Z, r25
    3982:	8f 5f       	subi	r24, 0xFF	; 255
    3984:	01 c0       	rjmp	.+2      	; 0x3988 <decode_hexadecimal_string_bytes+0x68>
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	28 2f       	mov	r18, r24
    398a:	22 0f       	add	r18, r18
    398c:	48 2f       	mov	r20, r24
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	fe 01       	movw	r30, r28
    3992:	01 90       	ld	r0, Z+
    3994:	00 20       	and	r0, r0
    3996:	e9 f7       	brne	.-6      	; 0x3992 <decode_hexadecimal_string_bytes+0x72>
    3998:	31 97       	sbiw	r30, 0x01	; 1
    399a:	ec 1b       	sub	r30, r28
    399c:	fd 0b       	sbc	r31, r29
    399e:	4e 17       	cp	r20, r30
    39a0:	5f 07       	cpc	r21, r31
    39a2:	10 f4       	brcc	.+4      	; 0x39a8 <decode_hexadecimal_string_bytes+0x88>
    39a4:	86 13       	cpse	r24, r22
    39a6:	ce cf       	rjmp	.-100    	; 0x3944 <decode_hexadecimal_string_bytes+0x24>
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	08 95       	ret

000039b2 <serial_create>:
    39b2:	2f 92       	push	r2
    39b4:	3f 92       	push	r3
    39b6:	4f 92       	push	r4
    39b8:	5f 92       	push	r5
    39ba:	6f 92       	push	r6
    39bc:	7f 92       	push	r7
    39be:	8f 92       	push	r8
    39c0:	9f 92       	push	r9
    39c2:	af 92       	push	r10
    39c4:	cf 92       	push	r12
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	f8 2e       	mov	r15, r24
    39d8:	2a 01       	movw	r4, r20
    39da:	3b 01       	movw	r6, r22
    39dc:	88 e0       	ldi	r24, 0x08	; 8
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	9f d7       	rcall	.+3902   	; 0x4920 <malloc>
    39e2:	8c 01       	movw	r16, r24
    39e4:	8f 2d       	mov	r24, r15
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	fc 01       	movw	r30, r24
    39ea:	ee 0f       	add	r30, r30
    39ec:	ff 1f       	adc	r31, r31
    39ee:	ec 52       	subi	r30, 0x2C	; 44
    39f0:	fd 4e       	sbci	r31, 0xED	; 237
    39f2:	11 83       	std	Z+1, r17	; 0x01
    39f4:	00 83       	st	Z, r16
    39f6:	01 15       	cp	r16, r1
    39f8:	11 05       	cpc	r17, r1
    39fa:	09 f4       	brne	.+2      	; 0x39fe <serial_create+0x4c>
    39fc:	64 c0       	rjmp	.+200    	; 0x3ac6 <serial_create+0x114>
    39fe:	88 0f       	add	r24, r24
    3a00:	99 1f       	adc	r25, r25
    3a02:	fc 01       	movw	r30, r24
    3a04:	e9 5f       	subi	r30, 0xF9	; 249
    3a06:	fd 4f       	sbci	r31, 0xFD	; 253
    3a08:	80 81       	ld	r24, Z
    3a0a:	91 81       	ldd	r25, Z+1	; 0x01
    3a0c:	d8 01       	movw	r26, r16
    3a0e:	8d 93       	st	X+, r24
    3a10:	9c 93       	st	X, r25
    3a12:	6c 2d       	mov	r22, r12
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	84 e0       	ldi	r24, 0x04	; 4
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	68 d7       	rcall	.+3792   	; 0x48ec <calloc>
    3a1c:	1c 01       	movw	r2, r24
    3a1e:	61 e0       	ldi	r22, 0x01	; 1
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	86 e0       	ldi	r24, 0x06	; 6
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	62 d7       	rcall	.+3780   	; 0x48ec <calloc>
    3a28:	7c 01       	movw	r14, r24
    3a2a:	4c 2d       	mov	r20, r12
    3a2c:	b1 01       	movw	r22, r2
    3a2e:	50 d5       	rcall	.+2720   	; 0x44d0 <fifo_init>
    3a30:	f8 01       	movw	r30, r16
    3a32:	f5 82       	std	Z+5, r15	; 0x05
    3a34:	e4 82       	std	Z+4, r14	; 0x04
    3a36:	6a 2d       	mov	r22, r10
    3a38:	70 e0       	ldi	r23, 0x00	; 0
    3a3a:	84 e0       	ldi	r24, 0x04	; 4
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	56 d7       	rcall	.+3756   	; 0x48ec <calloc>
    3a40:	1c 01       	movw	r2, r24
    3a42:	61 e0       	ldi	r22, 0x01	; 1
    3a44:	70 e0       	ldi	r23, 0x00	; 0
    3a46:	86 e0       	ldi	r24, 0x06	; 6
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	50 d7       	rcall	.+3744   	; 0x48ec <calloc>
    3a4c:	7c 01       	movw	r14, r24
    3a4e:	4a 2d       	mov	r20, r10
    3a50:	b1 01       	movw	r22, r2
    3a52:	3e d5       	rcall	.+2684   	; 0x44d0 <fifo_init>
    3a54:	d8 01       	movw	r26, r16
    3a56:	13 96       	adiw	r26, 0x03	; 3
    3a58:	fc 92       	st	X, r15
    3a5a:	ee 92       	st	-X, r14
    3a5c:	12 97       	sbiw	r26, 0x02	; 2
    3a5e:	17 96       	adiw	r26, 0x07	; 7
    3a60:	9c 92       	st	X, r9
    3a62:	8e 92       	st	-X, r8
    3a64:	16 97       	sbiw	r26, 0x06	; 6
    3a66:	ff b6       	in	r15, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	11 97       	sbiw	r26, 0x01	; 1
    3a70:	36 97       	sbiw	r30, 0x06	; 6
    3a72:	80 81       	ld	r24, Z
    3a74:	82 60       	ori	r24, 0x02	; 2
    3a76:	80 83       	st	Z, r24
    3a78:	8d 90       	ld	r8, X+
    3a7a:	9c 90       	ld	r9, X
    3a7c:	c3 01       	movw	r24, r6
    3a7e:	b2 01       	movw	r22, r4
    3a80:	3c d6       	rcall	.+3192   	; 0x46fa <__floatunsisf>
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e0       	ldi	r20, 0x00	; 0
    3a88:	51 e4       	ldi	r21, 0x41	; 65
    3a8a:	c5 d6       	rcall	.+3466   	; 0x4816 <__mulsf3>
    3a8c:	9b 01       	movw	r18, r22
    3a8e:	ac 01       	movw	r20, r24
    3a90:	60 e0       	ldi	r22, 0x00	; 0
    3a92:	74 e2       	ldi	r23, 0x24	; 36
    3a94:	84 e7       	ldi	r24, 0x74	; 116
    3a96:	9b e4       	ldi	r25, 0x4B	; 75
    3a98:	9c d5       	rcall	.+2872   	; 0x45d2 <__divsf3>
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e8       	ldi	r20, 0x80	; 128
    3aa0:	5f e3       	ldi	r21, 0x3F	; 63
    3aa2:	32 d5       	rcall	.+2660   	; 0x4508 <__subsf3>
    3aa4:	fe d5       	rcall	.+3068   	; 0x46a2 <__fixunssfsi>
    3aa6:	f4 01       	movw	r30, r8
    3aa8:	32 97       	sbiw	r30, 0x02	; 2
    3aaa:	60 83       	st	Z, r22
    3aac:	d8 01       	movw	r26, r16
    3aae:	ed 91       	ld	r30, X+
    3ab0:	fc 91       	ld	r31, X
    3ab2:	11 97       	sbiw	r26, 0x01	; 1
    3ab4:	35 97       	sbiw	r30, 0x05	; 5
    3ab6:	88 e9       	ldi	r24, 0x98	; 152
    3ab8:	80 83       	st	Z, r24
    3aba:	ed 91       	ld	r30, X+
    3abc:	fc 91       	ld	r31, X
    3abe:	34 97       	sbiw	r30, 0x04	; 4
    3ac0:	86 e0       	ldi	r24, 0x06	; 6
    3ac2:	80 83       	st	Z, r24
    3ac4:	ff be       	out	0x3f, r15	; 63
    3ac6:	c8 01       	movw	r24, r16
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	1f 91       	pop	r17
    3ace:	0f 91       	pop	r16
    3ad0:	ff 90       	pop	r15
    3ad2:	ef 90       	pop	r14
    3ad4:	cf 90       	pop	r12
    3ad6:	af 90       	pop	r10
    3ad8:	9f 90       	pop	r9
    3ada:	8f 90       	pop	r8
    3adc:	7f 90       	pop	r7
    3ade:	6f 90       	pop	r6
    3ae0:	5f 90       	pop	r5
    3ae2:	4f 90       	pop	r4
    3ae4:	3f 90       	pop	r3
    3ae6:	2f 90       	pop	r2
    3ae8:	08 95       	ret

00003aea <serial_sendByte>:
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	dc 01       	movw	r26, r24
    3af0:	89 2b       	or	r24, r25
    3af2:	01 f1       	breq	.+64     	; 0x3b34 <serial_sendByte+0x4a>
    3af4:	12 96       	adiw	r26, 0x02	; 2
    3af6:	ed 91       	ld	r30, X+
    3af8:	fc 91       	ld	r31, X
    3afa:	13 97       	sbiw	r26, 0x03	; 3
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	25 81       	ldd	r18, Z+5	; 0x05
    3b02:	98 1b       	sub	r25, r24
    3b04:	92 23       	and	r25, r18
    3b06:	84 81       	ldd	r24, Z+4	; 0x04
    3b08:	98 17       	cp	r25, r24
    3b0a:	b1 f0       	breq	.+44     	; 0x3b38 <serial_sendByte+0x4e>
    3b0c:	83 81       	ldd	r24, Z+3	; 0x03
    3b0e:	26 95       	lsr	r18
    3b10:	28 23       	and	r18, r24
    3b12:	c0 81       	ld	r28, Z
    3b14:	d1 81       	ldd	r29, Z+1	; 0x01
    3b16:	c2 0f       	add	r28, r18
    3b18:	d1 1d       	adc	r29, r1
    3b1a:	68 83       	st	Y, r22
    3b1c:	8f 5f       	subi	r24, 0xFF	; 255
    3b1e:	95 81       	ldd	r25, Z+5	; 0x05
    3b20:	89 23       	and	r24, r25
    3b22:	83 83       	std	Z+3, r24	; 0x03
    3b24:	ed 91       	ld	r30, X+
    3b26:	fc 91       	ld	r31, X
    3b28:	35 97       	sbiw	r30, 0x05	; 5
    3b2a:	80 81       	ld	r24, Z
    3b2c:	80 62       	ori	r24, 0x20	; 32
    3b2e:	80 83       	st	Z, r24
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	03 c0       	rjmp	.+6      	; 0x3b3a <serial_sendByte+0x50>
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	01 c0       	rjmp	.+2      	; 0x3b3a <serial_sendByte+0x50>
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <serial_sendBytes>:
    3b40:	ef 92       	push	r14
    3b42:	ff 92       	push	r15
    3b44:	0f 93       	push	r16
    3b46:	1f 93       	push	r17
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	7c 01       	movw	r14, r24
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <serial_sendBytes+0x14>
    3b52:	41 c0       	rjmp	.+130    	; 0x3bd6 <serial_sendBytes+0x96>
    3b54:	dc 01       	movw	r26, r24
    3b56:	12 96       	adiw	r26, 0x02	; 2
    3b58:	ed 91       	ld	r30, X+
    3b5a:	fc 91       	ld	r31, X
    3b5c:	13 97       	sbiw	r26, 0x03	; 3
    3b5e:	93 81       	ldd	r25, Z+3	; 0x03
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	98 1b       	sub	r25, r24
    3b64:	85 81       	ldd	r24, Z+5	; 0x05
    3b66:	98 23       	and	r25, r24
    3b68:	84 81       	ldd	r24, Z+4	; 0x04
    3b6a:	89 1b       	sub	r24, r25
    3b6c:	86 17       	cp	r24, r22
    3b6e:	a8 f1       	brcs	.+106    	; 0x3bda <serial_sendBytes+0x9a>
    3b70:	66 23       	and	r22, r22
    3b72:	41 f1       	breq	.+80     	; 0x3bc4 <serial_sendBytes+0x84>
    3b74:	84 2f       	mov	r24, r20
    3b76:	95 2f       	mov	r25, r21
    3b78:	dc 01       	movw	r26, r24
    3b7a:	61 50       	subi	r22, 0x01	; 1
    3b7c:	46 2f       	mov	r20, r22
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	4f 5f       	subi	r20, 0xFF	; 255
    3b82:	5f 4f       	sbci	r21, 0xFF	; 255
    3b84:	48 0f       	add	r20, r24
    3b86:	59 1f       	adc	r21, r25
    3b88:	e7 01       	movw	r28, r14
    3b8a:	ea 81       	ldd	r30, Y+2	; 0x02
    3b8c:	fb 81       	ldd	r31, Y+3	; 0x03
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	25 81       	ldd	r18, Z+5	; 0x05
    3b94:	98 1b       	sub	r25, r24
    3b96:	92 23       	and	r25, r18
    3b98:	84 81       	ldd	r24, Z+4	; 0x04
    3b9a:	98 17       	cp	r25, r24
    3b9c:	79 f0       	breq	.+30     	; 0x3bbc <serial_sendBytes+0x7c>
    3b9e:	8c 91       	ld	r24, X
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	26 95       	lsr	r18
    3ba4:	29 23       	and	r18, r25
    3ba6:	60 81       	ld	r22, Z
    3ba8:	71 81       	ldd	r23, Z+1	; 0x01
    3baa:	8b 01       	movw	r16, r22
    3bac:	02 0f       	add	r16, r18
    3bae:	11 1d       	adc	r17, r1
    3bb0:	e8 01       	movw	r28, r16
    3bb2:	88 83       	st	Y, r24
    3bb4:	9f 5f       	subi	r25, 0xFF	; 255
    3bb6:	85 81       	ldd	r24, Z+5	; 0x05
    3bb8:	98 23       	and	r25, r24
    3bba:	93 83       	std	Z+3, r25	; 0x03
    3bbc:	11 96       	adiw	r26, 0x01	; 1
    3bbe:	a4 17       	cp	r26, r20
    3bc0:	b5 07       	cpc	r27, r21
    3bc2:	11 f7       	brne	.-60     	; 0x3b88 <serial_sendBytes+0x48>
    3bc4:	d7 01       	movw	r26, r14
    3bc6:	ed 91       	ld	r30, X+
    3bc8:	fc 91       	ld	r31, X
    3bca:	35 97       	sbiw	r30, 0x05	; 5
    3bcc:	80 81       	ld	r24, Z
    3bce:	80 62       	ori	r24, 0x20	; 32
    3bd0:	80 83       	st	Z, r24
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	03 c0       	rjmp	.+6      	; 0x3bdc <serial_sendBytes+0x9c>
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	01 c0       	rjmp	.+2      	; 0x3bdc <serial_sendBytes+0x9c>
    3bda:	82 e0       	ldi	r24, 0x02	; 2
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	ff 90       	pop	r15
    3be6:	ef 90       	pop	r14
    3be8:	08 95       	ret

00003bea <serial_getByte>:
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	d1 f0       	breq	.+52     	; 0x3c22 <serial_getByte+0x38>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	14 96       	adiw	r26, 0x04	; 4
    3bf2:	ed 91       	ld	r30, X+
    3bf4:	fc 91       	ld	r31, X
    3bf6:	15 97       	sbiw	r26, 0x05	; 5
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	98 17       	cp	r25, r24
    3bfe:	99 f0       	breq	.+38     	; 0x3c26 <serial_getByte+0x3c>
    3c00:	92 81       	ldd	r25, Z+2	; 0x02
    3c02:	85 81       	ldd	r24, Z+5	; 0x05
    3c04:	86 95       	lsr	r24
    3c06:	89 23       	and	r24, r25
    3c08:	a0 81       	ld	r26, Z
    3c0a:	b1 81       	ldd	r27, Z+1	; 0x01
    3c0c:	a8 0f       	add	r26, r24
    3c0e:	b1 1d       	adc	r27, r1
    3c10:	8c 91       	ld	r24, X
    3c12:	db 01       	movw	r26, r22
    3c14:	8c 93       	st	X, r24
    3c16:	9f 5f       	subi	r25, 0xFF	; 255
    3c18:	85 81       	ldd	r24, Z+5	; 0x05
    3c1a:	98 23       	and	r25, r24
    3c1c:	92 83       	std	Z+2, r25	; 0x02
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	08 95       	ret
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	08 95       	ret
    3c26:	83 e0       	ldi	r24, 0x03	; 3
    3c28:	08 95       	ret

00003c2a <__vector_25>:
    3c2a:	1f 92       	push	r1
    3c2c:	0f 92       	push	r0
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	0f 92       	push	r0
    3c32:	11 24       	eor	r1, r1
    3c34:	0b b6       	in	r0, 0x3b	; 59
    3c36:	0f 92       	push	r0
    3c38:	2f 93       	push	r18
    3c3a:	3f 93       	push	r19
    3c3c:	4f 93       	push	r20
    3c3e:	5f 93       	push	r21
    3c40:	6f 93       	push	r22
    3c42:	7f 93       	push	r23
    3c44:	8f 93       	push	r24
    3c46:	9f 93       	push	r25
    3c48:	af 93       	push	r26
    3c4a:	bf 93       	push	r27
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	ef 93       	push	r30
    3c52:	ff 93       	push	r31
    3c54:	a0 91 d4 12 	lds	r26, 0x12D4	; 0x8012d4 <_ser_handle>
    3c58:	b0 91 d5 12 	lds	r27, 0x12D5	; 0x8012d5 <_ser_handle+0x1>
    3c5c:	10 97       	sbiw	r26, 0x00	; 0
    3c5e:	11 f1       	breq	.+68     	; 0x3ca4 <__vector_25+0x7a>
    3c60:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c64:	14 96       	adiw	r26, 0x04	; 4
    3c66:	ed 91       	ld	r30, X+
    3c68:	fc 91       	ld	r31, X
    3c6a:	15 97       	sbiw	r26, 0x05	; 5
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	25 81       	ldd	r18, Z+5	; 0x05
    3c72:	98 1b       	sub	r25, r24
    3c74:	92 23       	and	r25, r18
    3c76:	84 81       	ldd	r24, Z+4	; 0x04
    3c78:	98 17       	cp	r25, r24
    3c7a:	61 f0       	breq	.+24     	; 0x3c94 <__vector_25+0x6a>
    3c7c:	83 81       	ldd	r24, Z+3	; 0x03
    3c7e:	26 95       	lsr	r18
    3c80:	28 23       	and	r18, r24
    3c82:	c0 81       	ld	r28, Z
    3c84:	d1 81       	ldd	r29, Z+1	; 0x01
    3c86:	c2 0f       	add	r28, r18
    3c88:	d1 1d       	adc	r29, r1
    3c8a:	68 83       	st	Y, r22
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
    3c8e:	95 81       	ldd	r25, Z+5	; 0x05
    3c90:	89 23       	and	r24, r25
    3c92:	83 83       	std	Z+3, r24	; 0x03
    3c94:	16 96       	adiw	r26, 0x06	; 6
    3c96:	ed 91       	ld	r30, X+
    3c98:	fc 91       	ld	r31, X
    3c9a:	17 97       	sbiw	r26, 0x07	; 7
    3c9c:	30 97       	sbiw	r30, 0x00	; 0
    3c9e:	11 f0       	breq	.+4      	; 0x3ca4 <__vector_25+0x7a>
    3ca0:	cd 01       	movw	r24, r26
    3ca2:	19 95       	eicall
    3ca4:	ff 91       	pop	r31
    3ca6:	ef 91       	pop	r30
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	bf 91       	pop	r27
    3cae:	af 91       	pop	r26
    3cb0:	9f 91       	pop	r25
    3cb2:	8f 91       	pop	r24
    3cb4:	7f 91       	pop	r23
    3cb6:	6f 91       	pop	r22
    3cb8:	5f 91       	pop	r21
    3cba:	4f 91       	pop	r20
    3cbc:	3f 91       	pop	r19
    3cbe:	2f 91       	pop	r18
    3cc0:	0f 90       	pop	r0
    3cc2:	0b be       	out	0x3b, r0	; 59
    3cc4:	0f 90       	pop	r0
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	0f 90       	pop	r0
    3cca:	1f 90       	pop	r1
    3ccc:	18 95       	reti

00003cce <__vector_26>:
    3cce:	1f 92       	push	r1
    3cd0:	0f 92       	push	r0
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	0f 92       	push	r0
    3cd6:	11 24       	eor	r1, r1
    3cd8:	0b b6       	in	r0, 0x3b	; 59
    3cda:	0f 92       	push	r0
    3cdc:	2f 93       	push	r18
    3cde:	8f 93       	push	r24
    3ce0:	9f 93       	push	r25
    3ce2:	af 93       	push	r26
    3ce4:	bf 93       	push	r27
    3ce6:	ef 93       	push	r30
    3ce8:	ff 93       	push	r31
    3cea:	e0 91 d4 12 	lds	r30, 0x12D4	; 0x8012d4 <_ser_handle>
    3cee:	f0 91 d5 12 	lds	r31, 0x12D5	; 0x8012d5 <_ser_handle+0x1>
    3cf2:	30 97       	sbiw	r30, 0x00	; 0
    3cf4:	b9 f0       	breq	.+46     	; 0x3d24 <__vector_26+0x56>
    3cf6:	02 80       	ldd	r0, Z+2	; 0x02
    3cf8:	f3 81       	ldd	r31, Z+3	; 0x03
    3cfa:	e0 2d       	mov	r30, r0
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	98 17       	cp	r25, r24
    3d02:	b1 f0       	breq	.+44     	; 0x3d30 <__vector_26+0x62>
    3d04:	92 81       	ldd	r25, Z+2	; 0x02
    3d06:	85 81       	ldd	r24, Z+5	; 0x05
    3d08:	28 2f       	mov	r18, r24
    3d0a:	26 95       	lsr	r18
    3d0c:	29 23       	and	r18, r25
    3d0e:	a0 81       	ld	r26, Z
    3d10:	b1 81       	ldd	r27, Z+1	; 0x01
    3d12:	a2 0f       	add	r26, r18
    3d14:	b1 1d       	adc	r27, r1
    3d16:	2c 91       	ld	r18, X
    3d18:	9f 5f       	subi	r25, 0xFF	; 255
    3d1a:	89 23       	and	r24, r25
    3d1c:	82 83       	std	Z+2, r24	; 0x02
    3d1e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3d22:	0b c0       	rjmp	.+22     	; 0x3d3a <__vector_26+0x6c>
    3d24:	e1 ec       	ldi	r30, 0xC1	; 193
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	8f 7d       	andi	r24, 0xDF	; 223
    3d2c:	80 83       	st	Z, r24
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <__vector_26+0x6c>
    3d30:	e1 ec       	ldi	r30, 0xC1	; 193
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	8f 7d       	andi	r24, 0xDF	; 223
    3d38:	80 83       	st	Z, r24
    3d3a:	ff 91       	pop	r31
    3d3c:	ef 91       	pop	r30
    3d3e:	bf 91       	pop	r27
    3d40:	af 91       	pop	r26
    3d42:	9f 91       	pop	r25
    3d44:	8f 91       	pop	r24
    3d46:	2f 91       	pop	r18
    3d48:	0f 90       	pop	r0
    3d4a:	0b be       	out	0x3b, r0	; 59
    3d4c:	0f 90       	pop	r0
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	0f 90       	pop	r0
    3d52:	1f 90       	pop	r1
    3d54:	18 95       	reti

00003d56 <__vector_36>:
    3d56:	1f 92       	push	r1
    3d58:	0f 92       	push	r0
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	0f 92       	push	r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	0b b6       	in	r0, 0x3b	; 59
    3d62:	0f 92       	push	r0
    3d64:	2f 93       	push	r18
    3d66:	3f 93       	push	r19
    3d68:	4f 93       	push	r20
    3d6a:	5f 93       	push	r21
    3d6c:	6f 93       	push	r22
    3d6e:	7f 93       	push	r23
    3d70:	8f 93       	push	r24
    3d72:	9f 93       	push	r25
    3d74:	af 93       	push	r26
    3d76:	bf 93       	push	r27
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	ef 93       	push	r30
    3d7e:	ff 93       	push	r31
    3d80:	a0 91 d6 12 	lds	r26, 0x12D6	; 0x8012d6 <_ser_handle+0x2>
    3d84:	b0 91 d7 12 	lds	r27, 0x12D7	; 0x8012d7 <_ser_handle+0x3>
    3d88:	10 97       	sbiw	r26, 0x00	; 0
    3d8a:	11 f1       	breq	.+68     	; 0x3dd0 <__vector_36+0x7a>
    3d8c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3d90:	14 96       	adiw	r26, 0x04	; 4
    3d92:	ed 91       	ld	r30, X+
    3d94:	fc 91       	ld	r31, X
    3d96:	15 97       	sbiw	r26, 0x05	; 5
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	25 81       	ldd	r18, Z+5	; 0x05
    3d9e:	98 1b       	sub	r25, r24
    3da0:	92 23       	and	r25, r18
    3da2:	84 81       	ldd	r24, Z+4	; 0x04
    3da4:	98 17       	cp	r25, r24
    3da6:	61 f0       	breq	.+24     	; 0x3dc0 <__vector_36+0x6a>
    3da8:	83 81       	ldd	r24, Z+3	; 0x03
    3daa:	26 95       	lsr	r18
    3dac:	28 23       	and	r18, r24
    3dae:	c0 81       	ld	r28, Z
    3db0:	d1 81       	ldd	r29, Z+1	; 0x01
    3db2:	c2 0f       	add	r28, r18
    3db4:	d1 1d       	adc	r29, r1
    3db6:	68 83       	st	Y, r22
    3db8:	8f 5f       	subi	r24, 0xFF	; 255
    3dba:	95 81       	ldd	r25, Z+5	; 0x05
    3dbc:	89 23       	and	r24, r25
    3dbe:	83 83       	std	Z+3, r24	; 0x03
    3dc0:	16 96       	adiw	r26, 0x06	; 6
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	17 97       	sbiw	r26, 0x07	; 7
    3dc8:	30 97       	sbiw	r30, 0x00	; 0
    3dca:	11 f0       	breq	.+4      	; 0x3dd0 <__vector_36+0x7a>
    3dcc:	cd 01       	movw	r24, r26
    3dce:	19 95       	eicall
    3dd0:	ff 91       	pop	r31
    3dd2:	ef 91       	pop	r30
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	bf 91       	pop	r27
    3dda:	af 91       	pop	r26
    3ddc:	9f 91       	pop	r25
    3dde:	8f 91       	pop	r24
    3de0:	7f 91       	pop	r23
    3de2:	6f 91       	pop	r22
    3de4:	5f 91       	pop	r21
    3de6:	4f 91       	pop	r20
    3de8:	3f 91       	pop	r19
    3dea:	2f 91       	pop	r18
    3dec:	0f 90       	pop	r0
    3dee:	0b be       	out	0x3b, r0	; 59
    3df0:	0f 90       	pop	r0
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	0f 90       	pop	r0
    3df6:	1f 90       	pop	r1
    3df8:	18 95       	reti

00003dfa <__vector_37>:
    3dfa:	1f 92       	push	r1
    3dfc:	0f 92       	push	r0
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	0f 92       	push	r0
    3e02:	11 24       	eor	r1, r1
    3e04:	0b b6       	in	r0, 0x3b	; 59
    3e06:	0f 92       	push	r0
    3e08:	2f 93       	push	r18
    3e0a:	8f 93       	push	r24
    3e0c:	9f 93       	push	r25
    3e0e:	af 93       	push	r26
    3e10:	bf 93       	push	r27
    3e12:	ef 93       	push	r30
    3e14:	ff 93       	push	r31
    3e16:	e0 91 d6 12 	lds	r30, 0x12D6	; 0x8012d6 <_ser_handle+0x2>
    3e1a:	f0 91 d7 12 	lds	r31, 0x12D7	; 0x8012d7 <_ser_handle+0x3>
    3e1e:	30 97       	sbiw	r30, 0x00	; 0
    3e20:	b9 f0       	breq	.+46     	; 0x3e50 <__vector_37+0x56>
    3e22:	02 80       	ldd	r0, Z+2	; 0x02
    3e24:	f3 81       	ldd	r31, Z+3	; 0x03
    3e26:	e0 2d       	mov	r30, r0
    3e28:	93 81       	ldd	r25, Z+3	; 0x03
    3e2a:	82 81       	ldd	r24, Z+2	; 0x02
    3e2c:	98 17       	cp	r25, r24
    3e2e:	b1 f0       	breq	.+44     	; 0x3e5c <__vector_37+0x62>
    3e30:	92 81       	ldd	r25, Z+2	; 0x02
    3e32:	85 81       	ldd	r24, Z+5	; 0x05
    3e34:	28 2f       	mov	r18, r24
    3e36:	26 95       	lsr	r18
    3e38:	29 23       	and	r18, r25
    3e3a:	a0 81       	ld	r26, Z
    3e3c:	b1 81       	ldd	r27, Z+1	; 0x01
    3e3e:	a2 0f       	add	r26, r18
    3e40:	b1 1d       	adc	r27, r1
    3e42:	2c 91       	ld	r18, X
    3e44:	9f 5f       	subi	r25, 0xFF	; 255
    3e46:	89 23       	and	r24, r25
    3e48:	82 83       	std	Z+2, r24	; 0x02
    3e4a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3e4e:	0b c0       	rjmp	.+22     	; 0x3e66 <__vector_37+0x6c>
    3e50:	e9 ec       	ldi	r30, 0xC9	; 201
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	80 81       	ld	r24, Z
    3e56:	8f 7d       	andi	r24, 0xDF	; 223
    3e58:	80 83       	st	Z, r24
    3e5a:	05 c0       	rjmp	.+10     	; 0x3e66 <__vector_37+0x6c>
    3e5c:	e9 ec       	ldi	r30, 0xC9	; 201
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	8f 7d       	andi	r24, 0xDF	; 223
    3e64:	80 83       	st	Z, r24
    3e66:	ff 91       	pop	r31
    3e68:	ef 91       	pop	r30
    3e6a:	bf 91       	pop	r27
    3e6c:	af 91       	pop	r26
    3e6e:	9f 91       	pop	r25
    3e70:	8f 91       	pop	r24
    3e72:	2f 91       	pop	r18
    3e74:	0f 90       	pop	r0
    3e76:	0b be       	out	0x3b, r0	; 59
    3e78:	0f 90       	pop	r0
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	0f 90       	pop	r0
    3e7e:	1f 90       	pop	r1
    3e80:	18 95       	reti

00003e82 <__vector_51>:
    3e82:	1f 92       	push	r1
    3e84:	0f 92       	push	r0
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	0f 92       	push	r0
    3e8a:	11 24       	eor	r1, r1
    3e8c:	0b b6       	in	r0, 0x3b	; 59
    3e8e:	0f 92       	push	r0
    3e90:	2f 93       	push	r18
    3e92:	3f 93       	push	r19
    3e94:	4f 93       	push	r20
    3e96:	5f 93       	push	r21
    3e98:	6f 93       	push	r22
    3e9a:	7f 93       	push	r23
    3e9c:	8f 93       	push	r24
    3e9e:	9f 93       	push	r25
    3ea0:	af 93       	push	r26
    3ea2:	bf 93       	push	r27
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	ef 93       	push	r30
    3eaa:	ff 93       	push	r31
    3eac:	a0 91 d8 12 	lds	r26, 0x12D8	; 0x8012d8 <_ser_handle+0x4>
    3eb0:	b0 91 d9 12 	lds	r27, 0x12D9	; 0x8012d9 <_ser_handle+0x5>
    3eb4:	10 97       	sbiw	r26, 0x00	; 0
    3eb6:	11 f1       	breq	.+68     	; 0x3efc <__vector_51+0x7a>
    3eb8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3ebc:	14 96       	adiw	r26, 0x04	; 4
    3ebe:	ed 91       	ld	r30, X+
    3ec0:	fc 91       	ld	r31, X
    3ec2:	15 97       	sbiw	r26, 0x05	; 5
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	82 81       	ldd	r24, Z+2	; 0x02
    3ec8:	25 81       	ldd	r18, Z+5	; 0x05
    3eca:	98 1b       	sub	r25, r24
    3ecc:	92 23       	and	r25, r18
    3ece:	84 81       	ldd	r24, Z+4	; 0x04
    3ed0:	98 17       	cp	r25, r24
    3ed2:	61 f0       	breq	.+24     	; 0x3eec <__vector_51+0x6a>
    3ed4:	83 81       	ldd	r24, Z+3	; 0x03
    3ed6:	26 95       	lsr	r18
    3ed8:	28 23       	and	r18, r24
    3eda:	c0 81       	ld	r28, Z
    3edc:	d1 81       	ldd	r29, Z+1	; 0x01
    3ede:	c2 0f       	add	r28, r18
    3ee0:	d1 1d       	adc	r29, r1
    3ee2:	68 83       	st	Y, r22
    3ee4:	8f 5f       	subi	r24, 0xFF	; 255
    3ee6:	95 81       	ldd	r25, Z+5	; 0x05
    3ee8:	89 23       	and	r24, r25
    3eea:	83 83       	std	Z+3, r24	; 0x03
    3eec:	16 96       	adiw	r26, 0x06	; 6
    3eee:	ed 91       	ld	r30, X+
    3ef0:	fc 91       	ld	r31, X
    3ef2:	17 97       	sbiw	r26, 0x07	; 7
    3ef4:	30 97       	sbiw	r30, 0x00	; 0
    3ef6:	11 f0       	breq	.+4      	; 0x3efc <__vector_51+0x7a>
    3ef8:	cd 01       	movw	r24, r26
    3efa:	19 95       	eicall
    3efc:	ff 91       	pop	r31
    3efe:	ef 91       	pop	r30
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	bf 91       	pop	r27
    3f06:	af 91       	pop	r26
    3f08:	9f 91       	pop	r25
    3f0a:	8f 91       	pop	r24
    3f0c:	7f 91       	pop	r23
    3f0e:	6f 91       	pop	r22
    3f10:	5f 91       	pop	r21
    3f12:	4f 91       	pop	r20
    3f14:	3f 91       	pop	r19
    3f16:	2f 91       	pop	r18
    3f18:	0f 90       	pop	r0
    3f1a:	0b be       	out	0x3b, r0	; 59
    3f1c:	0f 90       	pop	r0
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	0f 90       	pop	r0
    3f22:	1f 90       	pop	r1
    3f24:	18 95       	reti

00003f26 <__vector_52>:
    3f26:	1f 92       	push	r1
    3f28:	0f 92       	push	r0
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	0f 92       	push	r0
    3f2e:	11 24       	eor	r1, r1
    3f30:	0b b6       	in	r0, 0x3b	; 59
    3f32:	0f 92       	push	r0
    3f34:	2f 93       	push	r18
    3f36:	8f 93       	push	r24
    3f38:	9f 93       	push	r25
    3f3a:	af 93       	push	r26
    3f3c:	bf 93       	push	r27
    3f3e:	ef 93       	push	r30
    3f40:	ff 93       	push	r31
    3f42:	e0 91 d8 12 	lds	r30, 0x12D8	; 0x8012d8 <_ser_handle+0x4>
    3f46:	f0 91 d9 12 	lds	r31, 0x12D9	; 0x8012d9 <_ser_handle+0x5>
    3f4a:	30 97       	sbiw	r30, 0x00	; 0
    3f4c:	b9 f0       	breq	.+46     	; 0x3f7c <__vector_52+0x56>
    3f4e:	02 80       	ldd	r0, Z+2	; 0x02
    3f50:	f3 81       	ldd	r31, Z+3	; 0x03
    3f52:	e0 2d       	mov	r30, r0
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	98 17       	cp	r25, r24
    3f5a:	b1 f0       	breq	.+44     	; 0x3f88 <__vector_52+0x62>
    3f5c:	92 81       	ldd	r25, Z+2	; 0x02
    3f5e:	85 81       	ldd	r24, Z+5	; 0x05
    3f60:	28 2f       	mov	r18, r24
    3f62:	26 95       	lsr	r18
    3f64:	29 23       	and	r18, r25
    3f66:	a0 81       	ld	r26, Z
    3f68:	b1 81       	ldd	r27, Z+1	; 0x01
    3f6a:	a2 0f       	add	r26, r18
    3f6c:	b1 1d       	adc	r27, r1
    3f6e:	2c 91       	ld	r18, X
    3f70:	9f 5f       	subi	r25, 0xFF	; 255
    3f72:	89 23       	and	r24, r25
    3f74:	82 83       	std	Z+2, r24	; 0x02
    3f76:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3f7a:	0b c0       	rjmp	.+22     	; 0x3f92 <__vector_52+0x6c>
    3f7c:	e1 ed       	ldi	r30, 0xD1	; 209
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	8f 7d       	andi	r24, 0xDF	; 223
    3f84:	80 83       	st	Z, r24
    3f86:	05 c0       	rjmp	.+10     	; 0x3f92 <__vector_52+0x6c>
    3f88:	e1 ed       	ldi	r30, 0xD1	; 209
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	8f 7d       	andi	r24, 0xDF	; 223
    3f90:	80 83       	st	Z, r24
    3f92:	ff 91       	pop	r31
    3f94:	ef 91       	pop	r30
    3f96:	bf 91       	pop	r27
    3f98:	af 91       	pop	r26
    3f9a:	9f 91       	pop	r25
    3f9c:	8f 91       	pop	r24
    3f9e:	2f 91       	pop	r18
    3fa0:	0f 90       	pop	r0
    3fa2:	0b be       	out	0x3b, r0	; 59
    3fa4:	0f 90       	pop	r0
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	0f 90       	pop	r0
    3faa:	1f 90       	pop	r1
    3fac:	18 95       	reti

00003fae <__vector_54>:
    3fae:	1f 92       	push	r1
    3fb0:	0f 92       	push	r0
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	0f 92       	push	r0
    3fb6:	11 24       	eor	r1, r1
    3fb8:	0b b6       	in	r0, 0x3b	; 59
    3fba:	0f 92       	push	r0
    3fbc:	2f 93       	push	r18
    3fbe:	3f 93       	push	r19
    3fc0:	4f 93       	push	r20
    3fc2:	5f 93       	push	r21
    3fc4:	6f 93       	push	r22
    3fc6:	7f 93       	push	r23
    3fc8:	8f 93       	push	r24
    3fca:	9f 93       	push	r25
    3fcc:	af 93       	push	r26
    3fce:	bf 93       	push	r27
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
    3fd4:	ef 93       	push	r30
    3fd6:	ff 93       	push	r31
    3fd8:	a0 91 da 12 	lds	r26, 0x12DA	; 0x8012da <_ser_handle+0x6>
    3fdc:	b0 91 db 12 	lds	r27, 0x12DB	; 0x8012db <_ser_handle+0x7>
    3fe0:	10 97       	sbiw	r26, 0x00	; 0
    3fe2:	11 f1       	breq	.+68     	; 0x4028 <__vector_54+0x7a>
    3fe4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3fe8:	14 96       	adiw	r26, 0x04	; 4
    3fea:	ed 91       	ld	r30, X+
    3fec:	fc 91       	ld	r31, X
    3fee:	15 97       	sbiw	r26, 0x05	; 5
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	25 81       	ldd	r18, Z+5	; 0x05
    3ff6:	98 1b       	sub	r25, r24
    3ff8:	92 23       	and	r25, r18
    3ffa:	84 81       	ldd	r24, Z+4	; 0x04
    3ffc:	98 17       	cp	r25, r24
    3ffe:	61 f0       	breq	.+24     	; 0x4018 <__vector_54+0x6a>
    4000:	83 81       	ldd	r24, Z+3	; 0x03
    4002:	26 95       	lsr	r18
    4004:	28 23       	and	r18, r24
    4006:	c0 81       	ld	r28, Z
    4008:	d1 81       	ldd	r29, Z+1	; 0x01
    400a:	c2 0f       	add	r28, r18
    400c:	d1 1d       	adc	r29, r1
    400e:	68 83       	st	Y, r22
    4010:	8f 5f       	subi	r24, 0xFF	; 255
    4012:	95 81       	ldd	r25, Z+5	; 0x05
    4014:	89 23       	and	r24, r25
    4016:	83 83       	std	Z+3, r24	; 0x03
    4018:	16 96       	adiw	r26, 0x06	; 6
    401a:	ed 91       	ld	r30, X+
    401c:	fc 91       	ld	r31, X
    401e:	17 97       	sbiw	r26, 0x07	; 7
    4020:	30 97       	sbiw	r30, 0x00	; 0
    4022:	11 f0       	breq	.+4      	; 0x4028 <__vector_54+0x7a>
    4024:	cd 01       	movw	r24, r26
    4026:	19 95       	eicall
    4028:	ff 91       	pop	r31
    402a:	ef 91       	pop	r30
    402c:	df 91       	pop	r29
    402e:	cf 91       	pop	r28
    4030:	bf 91       	pop	r27
    4032:	af 91       	pop	r26
    4034:	9f 91       	pop	r25
    4036:	8f 91       	pop	r24
    4038:	7f 91       	pop	r23
    403a:	6f 91       	pop	r22
    403c:	5f 91       	pop	r21
    403e:	4f 91       	pop	r20
    4040:	3f 91       	pop	r19
    4042:	2f 91       	pop	r18
    4044:	0f 90       	pop	r0
    4046:	0b be       	out	0x3b, r0	; 59
    4048:	0f 90       	pop	r0
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	0f 90       	pop	r0
    404e:	1f 90       	pop	r1
    4050:	18 95       	reti

00004052 <__vector_55>:
    4052:	1f 92       	push	r1
    4054:	0f 92       	push	r0
    4056:	0f b6       	in	r0, 0x3f	; 63
    4058:	0f 92       	push	r0
    405a:	11 24       	eor	r1, r1
    405c:	0b b6       	in	r0, 0x3b	; 59
    405e:	0f 92       	push	r0
    4060:	2f 93       	push	r18
    4062:	8f 93       	push	r24
    4064:	9f 93       	push	r25
    4066:	af 93       	push	r26
    4068:	bf 93       	push	r27
    406a:	ef 93       	push	r30
    406c:	ff 93       	push	r31
    406e:	e0 91 da 12 	lds	r30, 0x12DA	; 0x8012da <_ser_handle+0x6>
    4072:	f0 91 db 12 	lds	r31, 0x12DB	; 0x8012db <_ser_handle+0x7>
    4076:	30 97       	sbiw	r30, 0x00	; 0
    4078:	b9 f0       	breq	.+46     	; 0x40a8 <__vector_55+0x56>
    407a:	02 80       	ldd	r0, Z+2	; 0x02
    407c:	f3 81       	ldd	r31, Z+3	; 0x03
    407e:	e0 2d       	mov	r30, r0
    4080:	93 81       	ldd	r25, Z+3	; 0x03
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	98 17       	cp	r25, r24
    4086:	b1 f0       	breq	.+44     	; 0x40b4 <__vector_55+0x62>
    4088:	92 81       	ldd	r25, Z+2	; 0x02
    408a:	85 81       	ldd	r24, Z+5	; 0x05
    408c:	28 2f       	mov	r18, r24
    408e:	26 95       	lsr	r18
    4090:	29 23       	and	r18, r25
    4092:	a0 81       	ld	r26, Z
    4094:	b1 81       	ldd	r27, Z+1	; 0x01
    4096:	a2 0f       	add	r26, r18
    4098:	b1 1d       	adc	r27, r1
    409a:	2c 91       	ld	r18, X
    409c:	9f 5f       	subi	r25, 0xFF	; 255
    409e:	89 23       	and	r24, r25
    40a0:	82 83       	std	Z+2, r24	; 0x02
    40a2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    40a6:	0b c0       	rjmp	.+22     	; 0x40be <__vector_55+0x6c>
    40a8:	e1 e3       	ldi	r30, 0x31	; 49
    40aa:	f1 e0       	ldi	r31, 0x01	; 1
    40ac:	80 81       	ld	r24, Z
    40ae:	8f 7d       	andi	r24, 0xDF	; 223
    40b0:	80 83       	st	Z, r24
    40b2:	05 c0       	rjmp	.+10     	; 0x40be <__vector_55+0x6c>
    40b4:	e1 e3       	ldi	r30, 0x31	; 49
    40b6:	f1 e0       	ldi	r31, 0x01	; 1
    40b8:	80 81       	ld	r24, Z
    40ba:	8f 7d       	andi	r24, 0xDF	; 223
    40bc:	80 83       	st	Z, r24
    40be:	ff 91       	pop	r31
    40c0:	ef 91       	pop	r30
    40c2:	bf 91       	pop	r27
    40c4:	af 91       	pop	r26
    40c6:	9f 91       	pop	r25
    40c8:	8f 91       	pop	r24
    40ca:	2f 91       	pop	r18
    40cc:	0f 90       	pop	r0
    40ce:	0b be       	out	0x3b, r0	; 59
    40d0:	0f 90       	pop	r0
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	0f 90       	pop	r0
    40d6:	1f 90       	pop	r1
    40d8:	18 95       	reti

000040da <usart_getchar>:
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	1f 92       	push	r1
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	be 01       	movw	r22, r28
    40e6:	6f 5f       	subi	r22, 0xFF	; 255
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ea:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_com_serial_instance>
    40ee:	90 91 dd 12 	lds	r25, 0x12DD	; 0x8012dd <_com_serial_instance+0x1>
    40f2:	7b dd       	rcall	.-1290   	; 0x3bea <serial_getByte>
    40f4:	81 11       	cpse	r24, r1
    40f6:	f6 cf       	rjmp	.-20     	; 0x40e4 <usart_getchar+0xa>
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0f 90       	pop	r0
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	08 95       	ret

00004104 <usart_putchar>:
    4104:	68 2f       	mov	r22, r24
    4106:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_com_serial_instance>
    410a:	90 91 dd 12 	lds	r25, 0x12DD	; 0x8012dd <_com_serial_instance+0x1>
    410e:	ed dc       	rcall	.-1574   	; 0x3aea <serial_sendByte>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	08 95       	ret

00004116 <stdio_initialise>:
    4116:	8f 92       	push	r8
    4118:	9f 92       	push	r9
    411a:	af 92       	push	r10
    411c:	cf 92       	push	r12
    411e:	ef 92       	push	r14
    4120:	0f 93       	push	r16
    4122:	81 2c       	mov	r8, r1
    4124:	91 2c       	mov	r9, r1
    4126:	68 94       	set
    4128:	aa 24       	eor	r10, r10
    412a:	a7 f8       	bld	r10, 7
    412c:	68 94       	set
    412e:	cc 24       	eor	r12, r12
    4130:	c7 f8       	bld	r12, 7
    4132:	e1 2c       	mov	r14, r1
    4134:	00 e0       	ldi	r16, 0x00	; 0
    4136:	23 e0       	ldi	r18, 0x03	; 3
    4138:	40 e0       	ldi	r20, 0x00	; 0
    413a:	51 ee       	ldi	r21, 0xE1	; 225
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	38 dc       	rcall	.-1936   	; 0x39b2 <serial_create>
    4142:	90 93 dd 12 	sts	0x12DD, r25	; 0x8012dd <_com_serial_instance+0x1>
    4146:	80 93 dc 12 	sts	0x12DC, r24	; 0x8012dc <_com_serial_instance>
    414a:	ec ef       	ldi	r30, 0xFC	; 252
    414c:	f2 e1       	ldi	r31, 0x12	; 18
    414e:	8f e0       	ldi	r24, 0x0F	; 15
    4150:	92 e0       	ldi	r25, 0x02	; 2
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
    4156:	93 83       	std	Z+3, r25	; 0x03
    4158:	82 83       	std	Z+2, r24	; 0x02
    415a:	0f 91       	pop	r16
    415c:	ef 90       	pop	r14
    415e:	cf 90       	pop	r12
    4160:	af 90       	pop	r10
    4162:	9f 90       	pop	r9
    4164:	8f 90       	pop	r8
    4166:	08 95       	ret

00004168 <_turn_off>:
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	fc 01       	movw	r30, r24
    416c:	ee 0f       	add	r30, r30
    416e:	ff 1f       	adc	r31, r31
    4170:	e8 0f       	add	r30, r24
    4172:	f9 1f       	adc	r31, r25
    4174:	ee 0f       	add	r30, r30
    4176:	ff 1f       	adc	r31, r31
    4178:	e2 52       	subi	r30, 0x22	; 34
    417a:	fd 4e       	sbci	r31, 0xED	; 237
    417c:	23 81       	ldd	r18, Z+3	; 0x03
    417e:	21 11       	cpse	r18, r1
    4180:	1f c0       	rjmp	.+62     	; 0x41c0 <_turn_off+0x58>
    4182:	9c 01       	movw	r18, r24
    4184:	22 0f       	add	r18, r18
    4186:	33 1f       	adc	r19, r19
    4188:	f9 01       	movw	r30, r18
    418a:	e8 0f       	add	r30, r24
    418c:	f9 1f       	adc	r31, r25
    418e:	ee 0f       	add	r30, r30
    4190:	ff 1f       	adc	r31, r31
    4192:	e2 52       	subi	r30, 0x22	; 34
    4194:	fd 4e       	sbci	r31, 0xED	; 237
    4196:	a0 81       	ld	r26, Z
    4198:	b1 81       	ldd	r27, Z+1	; 0x01
    419a:	4c 91       	ld	r20, X
    419c:	f9 01       	movw	r30, r18
    419e:	e8 0f       	add	r30, r24
    41a0:	f9 1f       	adc	r31, r25
    41a2:	ee 0f       	add	r30, r30
    41a4:	ff 1f       	adc	r31, r31
    41a6:	e2 52       	subi	r30, 0x22	; 34
    41a8:	fd 4e       	sbci	r31, 0xED	; 237
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	02 80       	ldd	r0, Z+2	; 0x02
    41b0:	02 c0       	rjmp	.+4      	; 0x41b6 <_turn_off+0x4e>
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	0a 94       	dec	r0
    41b8:	e2 f7       	brpl	.-8      	; 0x41b2 <_turn_off+0x4a>
    41ba:	84 2b       	or	r24, r20
    41bc:	8c 93       	st	X, r24
    41be:	08 95       	ret
    41c0:	fc 01       	movw	r30, r24
    41c2:	ee 0f       	add	r30, r30
    41c4:	ff 1f       	adc	r31, r31
    41c6:	df 01       	movw	r26, r30
    41c8:	a8 0f       	add	r26, r24
    41ca:	b9 1f       	adc	r27, r25
    41cc:	aa 0f       	add	r26, r26
    41ce:	bb 1f       	adc	r27, r27
    41d0:	a2 52       	subi	r26, 0x22	; 34
    41d2:	bd 4e       	sbci	r27, 0xED	; 237
    41d4:	0d 90       	ld	r0, X+
    41d6:	bc 91       	ld	r27, X
    41d8:	a0 2d       	mov	r26, r0
    41da:	2c 91       	ld	r18, X
    41dc:	e8 0f       	add	r30, r24
    41de:	f9 1f       	adc	r31, r25
    41e0:	ee 0f       	add	r30, r30
    41e2:	ff 1f       	adc	r31, r31
    41e4:	e2 52       	subi	r30, 0x22	; 34
    41e6:	fd 4e       	sbci	r31, 0xED	; 237
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	02 80       	ldd	r0, Z+2	; 0x02
    41ee:	02 c0       	rjmp	.+4      	; 0x41f4 <_turn_off+0x8c>
    41f0:	88 0f       	add	r24, r24
    41f2:	99 1f       	adc	r25, r25
    41f4:	0a 94       	dec	r0
    41f6:	e2 f7       	brpl	.-8      	; 0x41f0 <_turn_off+0x88>
    41f8:	80 95       	com	r24
    41fa:	82 23       	and	r24, r18
    41fc:	8c 93       	st	X, r24
    41fe:	08 95       	ret

00004200 <_turn_on>:
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	fc 01       	movw	r30, r24
    4204:	ee 0f       	add	r30, r30
    4206:	ff 1f       	adc	r31, r31
    4208:	e8 0f       	add	r30, r24
    420a:	f9 1f       	adc	r31, r25
    420c:	ee 0f       	add	r30, r30
    420e:	ff 1f       	adc	r31, r31
    4210:	e2 52       	subi	r30, 0x22	; 34
    4212:	fd 4e       	sbci	r31, 0xED	; 237
    4214:	23 81       	ldd	r18, Z+3	; 0x03
    4216:	21 11       	cpse	r18, r1
    4218:	20 c0       	rjmp	.+64     	; 0x425a <_turn_on+0x5a>
    421a:	9c 01       	movw	r18, r24
    421c:	22 0f       	add	r18, r18
    421e:	33 1f       	adc	r19, r19
    4220:	f9 01       	movw	r30, r18
    4222:	e8 0f       	add	r30, r24
    4224:	f9 1f       	adc	r31, r25
    4226:	ee 0f       	add	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	e2 52       	subi	r30, 0x22	; 34
    422c:	fd 4e       	sbci	r31, 0xED	; 237
    422e:	a0 81       	ld	r26, Z
    4230:	b1 81       	ldd	r27, Z+1	; 0x01
    4232:	4c 91       	ld	r20, X
    4234:	f9 01       	movw	r30, r18
    4236:	e8 0f       	add	r30, r24
    4238:	f9 1f       	adc	r31, r25
    423a:	ee 0f       	add	r30, r30
    423c:	ff 1f       	adc	r31, r31
    423e:	e2 52       	subi	r30, 0x22	; 34
    4240:	fd 4e       	sbci	r31, 0xED	; 237
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	02 80       	ldd	r0, Z+2	; 0x02
    4248:	02 c0       	rjmp	.+4      	; 0x424e <_turn_on+0x4e>
    424a:	88 0f       	add	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	0a 94       	dec	r0
    4250:	e2 f7       	brpl	.-8      	; 0x424a <_turn_on+0x4a>
    4252:	80 95       	com	r24
    4254:	84 23       	and	r24, r20
    4256:	8c 93       	st	X, r24
    4258:	08 95       	ret
    425a:	fc 01       	movw	r30, r24
    425c:	ee 0f       	add	r30, r30
    425e:	ff 1f       	adc	r31, r31
    4260:	df 01       	movw	r26, r30
    4262:	a8 0f       	add	r26, r24
    4264:	b9 1f       	adc	r27, r25
    4266:	aa 0f       	add	r26, r26
    4268:	bb 1f       	adc	r27, r27
    426a:	a2 52       	subi	r26, 0x22	; 34
    426c:	bd 4e       	sbci	r27, 0xED	; 237
    426e:	0d 90       	ld	r0, X+
    4270:	bc 91       	ld	r27, X
    4272:	a0 2d       	mov	r26, r0
    4274:	2c 91       	ld	r18, X
    4276:	e8 0f       	add	r30, r24
    4278:	f9 1f       	adc	r31, r25
    427a:	ee 0f       	add	r30, r30
    427c:	ff 1f       	adc	r31, r31
    427e:	e2 52       	subi	r30, 0x22	; 34
    4280:	fd 4e       	sbci	r31, 0xED	; 237
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	02 80       	ldd	r0, Z+2	; 0x02
    4288:	02 c0       	rjmp	.+4      	; 0x428e <_turn_on+0x8e>
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	0a 94       	dec	r0
    4290:	e2 f7       	brpl	.-8      	; 0x428a <_turn_on+0x8a>
    4292:	82 2b       	or	r24, r18
    4294:	8c 93       	st	X, r24
    4296:	08 95       	ret

00004298 <_hal_led_task>:
    4298:	cc 24       	eor	r12, r12
    429a:	c3 94       	inc	r12
    429c:	d1 2c       	mov	r13, r1
    429e:	68 94       	set
    42a0:	bb 24       	eor	r11, r11
    42a2:	b2 f8       	bld	r11, 2
    42a4:	ce ed       	ldi	r28, 0xDE	; 222
    42a6:	d2 e1       	ldi	r29, 0x12	; 18
    42a8:	10 e0       	ldi	r17, 0x00	; 0
    42aa:	8c 81       	ldd	r24, Y+4	; 0x04
    42ac:	81 30       	cpi	r24, 0x01	; 1
    42ae:	81 f0       	breq	.+32     	; 0x42d0 <_hal_led_task+0x38>
    42b0:	18 f1       	brcs	.+70     	; 0x42f8 <_hal_led_task+0x60>
    42b2:	82 30       	cpi	r24, 0x02	; 2
    42b4:	61 f5       	brne	.+88     	; 0x430e <_hal_led_task+0x76>
    42b6:	e8 81       	ld	r30, Y
    42b8:	f9 81       	ldd	r31, Y+1	; 0x01
    42ba:	20 81       	ld	r18, Z
    42bc:	c6 01       	movw	r24, r12
    42be:	0a 80       	ldd	r0, Y+2	; 0x02
    42c0:	02 c0       	rjmp	.+4      	; 0x42c6 <_hal_led_task+0x2e>
    42c2:	88 0f       	add	r24, r24
    42c4:	99 1f       	adc	r25, r25
    42c6:	0a 94       	dec	r0
    42c8:	e2 f7       	brpl	.-8      	; 0x42c2 <_hal_led_task+0x2a>
    42ca:	82 27       	eor	r24, r18
    42cc:	80 83       	st	Z, r24
    42ce:	1f c0       	rjmp	.+62     	; 0x430e <_hal_led_task+0x76>
    42d0:	8d 81       	ldd	r24, Y+5	; 0x05
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	8a 30       	cpi	r24, 0x0A	; 10
    42d6:	10 f4       	brcc	.+4      	; 0x42dc <_hal_led_task+0x44>
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	19 c0       	rjmp	.+50     	; 0x430e <_hal_led_task+0x76>
    42dc:	1d 82       	std	Y+5, r1	; 0x05
    42de:	e8 81       	ld	r30, Y
    42e0:	f9 81       	ldd	r31, Y+1	; 0x01
    42e2:	20 81       	ld	r18, Z
    42e4:	c6 01       	movw	r24, r12
    42e6:	0a 80       	ldd	r0, Y+2	; 0x02
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <_hal_led_task+0x56>
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	0a 94       	dec	r0
    42f0:	e2 f7       	brpl	.-8      	; 0x42ea <_hal_led_task+0x52>
    42f2:	82 27       	eor	r24, r18
    42f4:	80 83       	st	Z, r24
    42f6:	0b c0       	rjmp	.+22     	; 0x430e <_hal_led_task+0x76>
    42f8:	0d 81       	ldd	r16, Y+5	; 0x05
    42fa:	00 23       	and	r16, r16
    42fc:	29 f0       	breq	.+10     	; 0x4308 <_hal_led_task+0x70>
    42fe:	81 2f       	mov	r24, r17
    4300:	7f df       	rcall	.-258    	; 0x4200 <_turn_on>
    4302:	01 50       	subi	r16, 0x01	; 1
    4304:	0d 83       	std	Y+5, r16	; 0x05
    4306:	03 c0       	rjmp	.+6      	; 0x430e <_hal_led_task+0x76>
    4308:	bc 82       	std	Y+4, r11	; 0x04
    430a:	81 2f       	mov	r24, r17
    430c:	2d df       	rcall	.-422    	; 0x4168 <_turn_off>
    430e:	1f 5f       	subi	r17, 0xFF	; 255
    4310:	26 96       	adiw	r28, 0x06	; 6
    4312:	14 30       	cpi	r17, 0x04	; 4
    4314:	51 f6       	brne	.-108    	; 0x42aa <_hal_led_task+0x12>
    4316:	65 e0       	ldi	r22, 0x05	; 5
    4318:	70 e0       	ldi	r23, 0x00	; 0
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vTaskDelay>
    4322:	c0 cf       	rjmp	.-128    	; 0x42a4 <_hal_led_task+0xc>

00004324 <status_leds_initialise>:
    4324:	ef 92       	push	r14
    4326:	ff 92       	push	r15
    4328:	0f 93       	push	r16
    432a:	1f 93       	push	r17
    432c:	cf 93       	push	r28
    432e:	df 93       	push	r29
    4330:	08 2f       	mov	r16, r24
    4332:	80 e4       	ldi	r24, 0x40	; 64
    4334:	87 b9       	out	0x07, r24	; 7
    4336:	ce ed       	ldi	r28, 0xDE	; 222
    4338:	d2 e1       	ldi	r29, 0x12	; 18
    433a:	0f 2e       	mov	r0, r31
    433c:	f8 e2       	ldi	r31, 0x28	; 40
    433e:	ef 2e       	mov	r14, r31
    4340:	f1 2c       	mov	r15, r1
    4342:	f0 2d       	mov	r31, r0
    4344:	f9 82       	std	Y+1, r15	; 0x01
    4346:	e8 82       	st	Y, r14
    4348:	86 e0       	ldi	r24, 0x06	; 6
    434a:	8a 83       	std	Y+2, r24	; 0x02
    434c:	1b 82       	std	Y+3, r1	; 0x03
    434e:	14 e0       	ldi	r17, 0x04	; 4
    4350:	1c 83       	std	Y+4, r17	; 0x04
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	09 df       	rcall	.-494    	; 0x4168 <_turn_off>
    4356:	80 e8       	ldi	r24, 0x80	; 128
    4358:	87 b9       	out	0x07, r24	; 7
    435a:	ff 82       	std	Y+7, r15	; 0x07
    435c:	ee 82       	std	Y+6, r14	; 0x06
    435e:	87 e0       	ldi	r24, 0x07	; 7
    4360:	88 87       	std	Y+8, r24	; 0x08
    4362:	19 86       	std	Y+9, r1	; 0x09
    4364:	1a 87       	std	Y+10, r17	; 0x0a
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	ff de       	rcall	.-514    	; 0x4168 <_turn_off>
    436a:	80 e2       	ldi	r24, 0x20	; 32
    436c:	83 bb       	out	0x13, r24	; 19
    436e:	84 e3       	ldi	r24, 0x34	; 52
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	9d 87       	std	Y+13, r25	; 0x0d
    4374:	8c 87       	std	Y+12, r24	; 0x0c
    4376:	85 e0       	ldi	r24, 0x05	; 5
    4378:	8e 87       	std	Y+14, r24	; 0x0e
    437a:	1f 86       	std	Y+15, r1	; 0x0f
    437c:	18 8b       	std	Y+16, r17	; 0x10
    437e:	82 e0       	ldi	r24, 0x02	; 2
    4380:	f3 de       	rcall	.-538    	; 0x4168 <_turn_off>
    4382:	80 e1       	ldi	r24, 0x10	; 16
    4384:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    4388:	82 e0       	ldi	r24, 0x02	; 2
    438a:	91 e0       	ldi	r25, 0x01	; 1
    438c:	9b 8b       	std	Y+19, r25	; 0x13
    438e:	8a 8b       	std	Y+18, r24	; 0x12
    4390:	1c 8b       	std	Y+20, r17	; 0x14
    4392:	1d 8a       	std	Y+21, r1	; 0x15
    4394:	1e 8b       	std	Y+22, r17	; 0x16
    4396:	83 e0       	ldi	r24, 0x03	; 3
    4398:	e7 de       	rcall	.-562    	; 0x4168 <_turn_off>
    439a:	e1 2c       	mov	r14, r1
    439c:	f1 2c       	mov	r15, r1
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 ec       	ldi	r20, 0xC0	; 192
    43a4:	50 e0       	ldi	r21, 0x00	; 0
    43a6:	6e e7       	ldi	r22, 0x7E	; 126
    43a8:	76 e0       	ldi	r23, 0x06	; 6
    43aa:	8c e4       	ldi	r24, 0x4C	; 76
    43ac:	91 e2       	ldi	r25, 0x21	; 33
    43ae:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xTaskCreate>
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	08 95       	ret

000043c0 <status_leds_slowBlink>:
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	fc 01       	movw	r30, r24
    43c8:	ee 0f       	add	r30, r30
    43ca:	ff 1f       	adc	r31, r31
    43cc:	df 01       	movw	r26, r30
    43ce:	a8 0f       	add	r26, r24
    43d0:	b9 1f       	adc	r27, r25
    43d2:	aa 0f       	add	r26, r26
    43d4:	bb 1f       	adc	r27, r27
    43d6:	a2 52       	subi	r26, 0x22	; 34
    43d8:	bd 4e       	sbci	r27, 0xED	; 237
    43da:	cd 91       	ld	r28, X+
    43dc:	dc 91       	ld	r29, X
    43de:	11 97       	sbiw	r26, 0x01	; 1
    43e0:	48 81       	ld	r20, Y
    43e2:	21 e0       	ldi	r18, 0x01	; 1
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	12 96       	adiw	r26, 0x02	; 2
    43e8:	0c 90       	ld	r0, X
    43ea:	12 97       	sbiw	r26, 0x02	; 2
    43ec:	02 c0       	rjmp	.+4      	; 0x43f2 <status_leds_slowBlink+0x32>
    43ee:	22 0f       	add	r18, r18
    43f0:	33 1f       	adc	r19, r19
    43f2:	0a 94       	dec	r0
    43f4:	e2 f7       	brpl	.-8      	; 0x43ee <status_leds_slowBlink+0x2e>
    43f6:	24 27       	eor	r18, r20
    43f8:	28 83       	st	Y, r18
    43fa:	fd 01       	movw	r30, r26
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	84 83       	std	Z+4, r24	; 0x04
    4400:	df 91       	pop	r29
    4402:	cf 91       	pop	r28
    4404:	08 95       	ret

00004406 <status_leds_fastBlink>:
    4406:	cf 93       	push	r28
    4408:	df 93       	push	r29
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	fc 01       	movw	r30, r24
    440e:	ee 0f       	add	r30, r30
    4410:	ff 1f       	adc	r31, r31
    4412:	df 01       	movw	r26, r30
    4414:	a8 0f       	add	r26, r24
    4416:	b9 1f       	adc	r27, r25
    4418:	aa 0f       	add	r26, r26
    441a:	bb 1f       	adc	r27, r27
    441c:	a2 52       	subi	r26, 0x22	; 34
    441e:	bd 4e       	sbci	r27, 0xED	; 237
    4420:	cd 91       	ld	r28, X+
    4422:	dc 91       	ld	r29, X
    4424:	11 97       	sbiw	r26, 0x01	; 1
    4426:	48 81       	ld	r20, Y
    4428:	21 e0       	ldi	r18, 0x01	; 1
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	12 96       	adiw	r26, 0x02	; 2
    442e:	0c 90       	ld	r0, X
    4430:	12 97       	sbiw	r26, 0x02	; 2
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <status_leds_fastBlink+0x32>
    4434:	22 0f       	add	r18, r18
    4436:	33 1f       	adc	r19, r19
    4438:	0a 94       	dec	r0
    443a:	e2 f7       	brpl	.-8      	; 0x4434 <status_leds_fastBlink+0x2e>
    443c:	24 27       	eor	r18, r20
    443e:	28 83       	st	Y, r18
    4440:	fd 01       	movw	r30, r26
    4442:	82 e0       	ldi	r24, 0x02	; 2
    4444:	84 83       	std	Z+4, r24	; 0x04
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	08 95       	ret

0000444c <status_leds_ledOn>:
    444c:	28 2f       	mov	r18, r24
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	f9 01       	movw	r30, r18
    4452:	ee 0f       	add	r30, r30
    4454:	ff 1f       	adc	r31, r31
    4456:	e2 0f       	add	r30, r18
    4458:	f3 1f       	adc	r31, r19
    445a:	ee 0f       	add	r30, r30
    445c:	ff 1f       	adc	r31, r31
    445e:	e2 52       	subi	r30, 0x22	; 34
    4460:	fd 4e       	sbci	r31, 0xED	; 237
    4462:	93 e0       	ldi	r25, 0x03	; 3
    4464:	94 83       	std	Z+4, r25	; 0x04
    4466:	cc ce       	rjmp	.-616    	; 0x4200 <_turn_on>
    4468:	08 95       	ret

0000446a <status_leds_ledOff>:
    446a:	28 2f       	mov	r18, r24
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	f9 01       	movw	r30, r18
    4470:	ee 0f       	add	r30, r30
    4472:	ff 1f       	adc	r31, r31
    4474:	e2 0f       	add	r30, r18
    4476:	f3 1f       	adc	r31, r19
    4478:	ee 0f       	add	r30, r30
    447a:	ff 1f       	adc	r31, r31
    447c:	e2 52       	subi	r30, 0x22	; 34
    447e:	fd 4e       	sbci	r31, 0xED	; 237
    4480:	94 e0       	ldi	r25, 0x04	; 4
    4482:	94 83       	std	Z+4, r25	; 0x04
    4484:	71 ce       	rjmp	.-798    	; 0x4168 <_turn_off>
    4486:	08 95       	ret

00004488 <status_leds_longPuls>:
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	fc 01       	movw	r30, r24
    448c:	ee 0f       	add	r30, r30
    448e:	ff 1f       	adc	r31, r31
    4490:	df 01       	movw	r26, r30
    4492:	a8 0f       	add	r26, r24
    4494:	b9 1f       	adc	r27, r25
    4496:	aa 0f       	add	r26, r26
    4498:	bb 1f       	adc	r27, r27
    449a:	a2 52       	subi	r26, 0x22	; 34
    449c:	bd 4e       	sbci	r27, 0xED	; 237
    449e:	24 e0       	ldi	r18, 0x04	; 4
    44a0:	15 96       	adiw	r26, 0x05	; 5
    44a2:	2c 93       	st	X, r18
    44a4:	15 97       	sbiw	r26, 0x05	; 5
    44a6:	fd 01       	movw	r30, r26
    44a8:	14 82       	std	Z+4, r1	; 0x04
    44aa:	08 95       	ret

000044ac <status_leds_shortPuls>:
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	fc 01       	movw	r30, r24
    44b0:	ee 0f       	add	r30, r30
    44b2:	ff 1f       	adc	r31, r31
    44b4:	df 01       	movw	r26, r30
    44b6:	a8 0f       	add	r26, r24
    44b8:	b9 1f       	adc	r27, r25
    44ba:	aa 0f       	add	r26, r26
    44bc:	bb 1f       	adc	r27, r27
    44be:	a2 52       	subi	r26, 0x22	; 34
    44c0:	bd 4e       	sbci	r27, 0xED	; 237
    44c2:	21 e0       	ldi	r18, 0x01	; 1
    44c4:	15 96       	adiw	r26, 0x05	; 5
    44c6:	2c 93       	st	X, r18
    44c8:	15 97       	sbiw	r26, 0x05	; 5
    44ca:	fd 01       	movw	r30, r26
    44cc:	14 82       	std	Z+4, r1	; 0x04
    44ce:	08 95       	ret

000044d0 <fifo_init>:
    44d0:	fc 01       	movw	r30, r24
    44d2:	41 11       	cpse	r20, r1
    44d4:	01 c0       	rjmp	.+2      	; 0x44d8 <fifo_init+0x8>
    44d6:	45 d3       	rcall	.+1674   	; 0x4b62 <abort>
    44d8:	84 2f       	mov	r24, r20
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	9c 01       	movw	r18, r24
    44de:	21 50       	subi	r18, 0x01	; 1
    44e0:	31 09       	sbc	r19, r1
    44e2:	82 23       	and	r24, r18
    44e4:	93 23       	and	r25, r19
    44e6:	89 2b       	or	r24, r25
    44e8:	09 f0       	breq	.+2      	; 0x44ec <fifo_init+0x1c>
    44ea:	3b d3       	rcall	.+1654   	; 0x4b62 <abort>
    44ec:	41 38       	cpi	r20, 0x81	; 129
    44ee:	08 f0       	brcs	.+2      	; 0x44f2 <fifo_init+0x22>
    44f0:	38 d3       	rcall	.+1648   	; 0x4b62 <abort>
    44f2:	12 82       	std	Z+2, r1	; 0x02
    44f4:	13 82       	std	Z+3, r1	; 0x03
    44f6:	44 83       	std	Z+4, r20	; 0x04
    44f8:	44 0f       	add	r20, r20
    44fa:	41 50       	subi	r20, 0x01	; 1
    44fc:	45 83       	std	Z+5, r20	; 0x05
    44fe:	71 83       	std	Z+1, r23	; 0x01
    4500:	60 83       	st	Z, r22
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	08 95       	ret

00004508 <__subsf3>:
    4508:	50 58       	subi	r21, 0x80	; 128

0000450a <__addsf3>:
    450a:	bb 27       	eor	r27, r27
    450c:	aa 27       	eor	r26, r26
    450e:	0e d0       	rcall	.+28     	; 0x452c <__addsf3x>
    4510:	48 c1       	rjmp	.+656    	; 0x47a2 <__fp_round>
    4512:	39 d1       	rcall	.+626    	; 0x4786 <__fp_pscA>
    4514:	30 f0       	brcs	.+12     	; 0x4522 <__addsf3+0x18>
    4516:	3e d1       	rcall	.+636    	; 0x4794 <__fp_pscB>
    4518:	20 f0       	brcs	.+8      	; 0x4522 <__addsf3+0x18>
    451a:	31 f4       	brne	.+12     	; 0x4528 <__addsf3+0x1e>
    451c:	9f 3f       	cpi	r25, 0xFF	; 255
    451e:	11 f4       	brne	.+4      	; 0x4524 <__addsf3+0x1a>
    4520:	1e f4       	brtc	.+6      	; 0x4528 <__addsf3+0x1e>
    4522:	2e c1       	rjmp	.+604    	; 0x4780 <__fp_nan>
    4524:	0e f4       	brtc	.+2      	; 0x4528 <__addsf3+0x1e>
    4526:	e0 95       	com	r30
    4528:	e7 fb       	bst	r30, 7
    452a:	24 c1       	rjmp	.+584    	; 0x4774 <__fp_inf>

0000452c <__addsf3x>:
    452c:	e9 2f       	mov	r30, r25
    452e:	4a d1       	rcall	.+660    	; 0x47c4 <__fp_split3>
    4530:	80 f3       	brcs	.-32     	; 0x4512 <__addsf3+0x8>
    4532:	ba 17       	cp	r27, r26
    4534:	62 07       	cpc	r22, r18
    4536:	73 07       	cpc	r23, r19
    4538:	84 07       	cpc	r24, r20
    453a:	95 07       	cpc	r25, r21
    453c:	18 f0       	brcs	.+6      	; 0x4544 <__addsf3x+0x18>
    453e:	71 f4       	brne	.+28     	; 0x455c <__addsf3x+0x30>
    4540:	9e f5       	brtc	.+102    	; 0x45a8 <__addsf3x+0x7c>
    4542:	62 c1       	rjmp	.+708    	; 0x4808 <__fp_zero>
    4544:	0e f4       	brtc	.+2      	; 0x4548 <__addsf3x+0x1c>
    4546:	e0 95       	com	r30
    4548:	0b 2e       	mov	r0, r27
    454a:	ba 2f       	mov	r27, r26
    454c:	a0 2d       	mov	r26, r0
    454e:	0b 01       	movw	r0, r22
    4550:	b9 01       	movw	r22, r18
    4552:	90 01       	movw	r18, r0
    4554:	0c 01       	movw	r0, r24
    4556:	ca 01       	movw	r24, r20
    4558:	a0 01       	movw	r20, r0
    455a:	11 24       	eor	r1, r1
    455c:	ff 27       	eor	r31, r31
    455e:	59 1b       	sub	r21, r25
    4560:	99 f0       	breq	.+38     	; 0x4588 <__addsf3x+0x5c>
    4562:	59 3f       	cpi	r21, 0xF9	; 249
    4564:	50 f4       	brcc	.+20     	; 0x457a <__addsf3x+0x4e>
    4566:	50 3e       	cpi	r21, 0xE0	; 224
    4568:	68 f1       	brcs	.+90     	; 0x45c4 <__addsf3x+0x98>
    456a:	1a 16       	cp	r1, r26
    456c:	f0 40       	sbci	r31, 0x00	; 0
    456e:	a2 2f       	mov	r26, r18
    4570:	23 2f       	mov	r18, r19
    4572:	34 2f       	mov	r19, r20
    4574:	44 27       	eor	r20, r20
    4576:	58 5f       	subi	r21, 0xF8	; 248
    4578:	f3 cf       	rjmp	.-26     	; 0x4560 <__addsf3x+0x34>
    457a:	46 95       	lsr	r20
    457c:	37 95       	ror	r19
    457e:	27 95       	ror	r18
    4580:	a7 95       	ror	r26
    4582:	f0 40       	sbci	r31, 0x00	; 0
    4584:	53 95       	inc	r21
    4586:	c9 f7       	brne	.-14     	; 0x457a <__addsf3x+0x4e>
    4588:	7e f4       	brtc	.+30     	; 0x45a8 <__addsf3x+0x7c>
    458a:	1f 16       	cp	r1, r31
    458c:	ba 0b       	sbc	r27, r26
    458e:	62 0b       	sbc	r22, r18
    4590:	73 0b       	sbc	r23, r19
    4592:	84 0b       	sbc	r24, r20
    4594:	ba f0       	brmi	.+46     	; 0x45c4 <__addsf3x+0x98>
    4596:	91 50       	subi	r25, 0x01	; 1
    4598:	a1 f0       	breq	.+40     	; 0x45c2 <__addsf3x+0x96>
    459a:	ff 0f       	add	r31, r31
    459c:	bb 1f       	adc	r27, r27
    459e:	66 1f       	adc	r22, r22
    45a0:	77 1f       	adc	r23, r23
    45a2:	88 1f       	adc	r24, r24
    45a4:	c2 f7       	brpl	.-16     	; 0x4596 <__addsf3x+0x6a>
    45a6:	0e c0       	rjmp	.+28     	; 0x45c4 <__addsf3x+0x98>
    45a8:	ba 0f       	add	r27, r26
    45aa:	62 1f       	adc	r22, r18
    45ac:	73 1f       	adc	r23, r19
    45ae:	84 1f       	adc	r24, r20
    45b0:	48 f4       	brcc	.+18     	; 0x45c4 <__addsf3x+0x98>
    45b2:	87 95       	ror	r24
    45b4:	77 95       	ror	r23
    45b6:	67 95       	ror	r22
    45b8:	b7 95       	ror	r27
    45ba:	f7 95       	ror	r31
    45bc:	9e 3f       	cpi	r25, 0xFE	; 254
    45be:	08 f0       	brcs	.+2      	; 0x45c2 <__addsf3x+0x96>
    45c0:	b3 cf       	rjmp	.-154    	; 0x4528 <__addsf3+0x1e>
    45c2:	93 95       	inc	r25
    45c4:	88 0f       	add	r24, r24
    45c6:	08 f0       	brcs	.+2      	; 0x45ca <__addsf3x+0x9e>
    45c8:	99 27       	eor	r25, r25
    45ca:	ee 0f       	add	r30, r30
    45cc:	97 95       	ror	r25
    45ce:	87 95       	ror	r24
    45d0:	08 95       	ret

000045d2 <__divsf3>:
    45d2:	0c d0       	rcall	.+24     	; 0x45ec <__divsf3x>
    45d4:	e6 c0       	rjmp	.+460    	; 0x47a2 <__fp_round>
    45d6:	de d0       	rcall	.+444    	; 0x4794 <__fp_pscB>
    45d8:	40 f0       	brcs	.+16     	; 0x45ea <__divsf3+0x18>
    45da:	d5 d0       	rcall	.+426    	; 0x4786 <__fp_pscA>
    45dc:	30 f0       	brcs	.+12     	; 0x45ea <__divsf3+0x18>
    45de:	21 f4       	brne	.+8      	; 0x45e8 <__divsf3+0x16>
    45e0:	5f 3f       	cpi	r21, 0xFF	; 255
    45e2:	19 f0       	breq	.+6      	; 0x45ea <__divsf3+0x18>
    45e4:	c7 c0       	rjmp	.+398    	; 0x4774 <__fp_inf>
    45e6:	51 11       	cpse	r21, r1
    45e8:	10 c1       	rjmp	.+544    	; 0x480a <__fp_szero>
    45ea:	ca c0       	rjmp	.+404    	; 0x4780 <__fp_nan>

000045ec <__divsf3x>:
    45ec:	eb d0       	rcall	.+470    	; 0x47c4 <__fp_split3>
    45ee:	98 f3       	brcs	.-26     	; 0x45d6 <__divsf3+0x4>

000045f0 <__divsf3_pse>:
    45f0:	99 23       	and	r25, r25
    45f2:	c9 f3       	breq	.-14     	; 0x45e6 <__divsf3+0x14>
    45f4:	55 23       	and	r21, r21
    45f6:	b1 f3       	breq	.-20     	; 0x45e4 <__divsf3+0x12>
    45f8:	95 1b       	sub	r25, r21
    45fa:	55 0b       	sbc	r21, r21
    45fc:	bb 27       	eor	r27, r27
    45fe:	aa 27       	eor	r26, r26
    4600:	62 17       	cp	r22, r18
    4602:	73 07       	cpc	r23, r19
    4604:	84 07       	cpc	r24, r20
    4606:	38 f0       	brcs	.+14     	; 0x4616 <__divsf3_pse+0x26>
    4608:	9f 5f       	subi	r25, 0xFF	; 255
    460a:	5f 4f       	sbci	r21, 0xFF	; 255
    460c:	22 0f       	add	r18, r18
    460e:	33 1f       	adc	r19, r19
    4610:	44 1f       	adc	r20, r20
    4612:	aa 1f       	adc	r26, r26
    4614:	a9 f3       	breq	.-22     	; 0x4600 <__divsf3_pse+0x10>
    4616:	33 d0       	rcall	.+102    	; 0x467e <__divsf3_pse+0x8e>
    4618:	0e 2e       	mov	r0, r30
    461a:	3a f0       	brmi	.+14     	; 0x462a <__divsf3_pse+0x3a>
    461c:	e0 e8       	ldi	r30, 0x80	; 128
    461e:	30 d0       	rcall	.+96     	; 0x4680 <__divsf3_pse+0x90>
    4620:	91 50       	subi	r25, 0x01	; 1
    4622:	50 40       	sbci	r21, 0x00	; 0
    4624:	e6 95       	lsr	r30
    4626:	00 1c       	adc	r0, r0
    4628:	ca f7       	brpl	.-14     	; 0x461c <__divsf3_pse+0x2c>
    462a:	29 d0       	rcall	.+82     	; 0x467e <__divsf3_pse+0x8e>
    462c:	fe 2f       	mov	r31, r30
    462e:	27 d0       	rcall	.+78     	; 0x467e <__divsf3_pse+0x8e>
    4630:	66 0f       	add	r22, r22
    4632:	77 1f       	adc	r23, r23
    4634:	88 1f       	adc	r24, r24
    4636:	bb 1f       	adc	r27, r27
    4638:	26 17       	cp	r18, r22
    463a:	37 07       	cpc	r19, r23
    463c:	48 07       	cpc	r20, r24
    463e:	ab 07       	cpc	r26, r27
    4640:	b0 e8       	ldi	r27, 0x80	; 128
    4642:	09 f0       	breq	.+2      	; 0x4646 <__divsf3_pse+0x56>
    4644:	bb 0b       	sbc	r27, r27
    4646:	80 2d       	mov	r24, r0
    4648:	bf 01       	movw	r22, r30
    464a:	ff 27       	eor	r31, r31
    464c:	93 58       	subi	r25, 0x83	; 131
    464e:	5f 4f       	sbci	r21, 0xFF	; 255
    4650:	2a f0       	brmi	.+10     	; 0x465c <__divsf3_pse+0x6c>
    4652:	9e 3f       	cpi	r25, 0xFE	; 254
    4654:	51 05       	cpc	r21, r1
    4656:	68 f0       	brcs	.+26     	; 0x4672 <__divsf3_pse+0x82>
    4658:	8d c0       	rjmp	.+282    	; 0x4774 <__fp_inf>
    465a:	d7 c0       	rjmp	.+430    	; 0x480a <__fp_szero>
    465c:	5f 3f       	cpi	r21, 0xFF	; 255
    465e:	ec f3       	brlt	.-6      	; 0x465a <__divsf3_pse+0x6a>
    4660:	98 3e       	cpi	r25, 0xE8	; 232
    4662:	dc f3       	brlt	.-10     	; 0x465a <__divsf3_pse+0x6a>
    4664:	86 95       	lsr	r24
    4666:	77 95       	ror	r23
    4668:	67 95       	ror	r22
    466a:	b7 95       	ror	r27
    466c:	f7 95       	ror	r31
    466e:	9f 5f       	subi	r25, 0xFF	; 255
    4670:	c9 f7       	brne	.-14     	; 0x4664 <__divsf3_pse+0x74>
    4672:	88 0f       	add	r24, r24
    4674:	91 1d       	adc	r25, r1
    4676:	96 95       	lsr	r25
    4678:	87 95       	ror	r24
    467a:	97 f9       	bld	r25, 7
    467c:	08 95       	ret
    467e:	e1 e0       	ldi	r30, 0x01	; 1
    4680:	66 0f       	add	r22, r22
    4682:	77 1f       	adc	r23, r23
    4684:	88 1f       	adc	r24, r24
    4686:	bb 1f       	adc	r27, r27
    4688:	62 17       	cp	r22, r18
    468a:	73 07       	cpc	r23, r19
    468c:	84 07       	cpc	r24, r20
    468e:	ba 07       	cpc	r27, r26
    4690:	20 f0       	brcs	.+8      	; 0x469a <__divsf3_pse+0xaa>
    4692:	62 1b       	sub	r22, r18
    4694:	73 0b       	sbc	r23, r19
    4696:	84 0b       	sbc	r24, r20
    4698:	ba 0b       	sbc	r27, r26
    469a:	ee 1f       	adc	r30, r30
    469c:	88 f7       	brcc	.-30     	; 0x4680 <__divsf3_pse+0x90>
    469e:	e0 95       	com	r30
    46a0:	08 95       	ret

000046a2 <__fixunssfsi>:
    46a2:	98 d0       	rcall	.+304    	; 0x47d4 <__fp_splitA>
    46a4:	88 f0       	brcs	.+34     	; 0x46c8 <__fixunssfsi+0x26>
    46a6:	9f 57       	subi	r25, 0x7F	; 127
    46a8:	90 f0       	brcs	.+36     	; 0x46ce <__fixunssfsi+0x2c>
    46aa:	b9 2f       	mov	r27, r25
    46ac:	99 27       	eor	r25, r25
    46ae:	b7 51       	subi	r27, 0x17	; 23
    46b0:	a0 f0       	brcs	.+40     	; 0x46da <__fixunssfsi+0x38>
    46b2:	d1 f0       	breq	.+52     	; 0x46e8 <__fixunssfsi+0x46>
    46b4:	66 0f       	add	r22, r22
    46b6:	77 1f       	adc	r23, r23
    46b8:	88 1f       	adc	r24, r24
    46ba:	99 1f       	adc	r25, r25
    46bc:	1a f0       	brmi	.+6      	; 0x46c4 <__fixunssfsi+0x22>
    46be:	ba 95       	dec	r27
    46c0:	c9 f7       	brne	.-14     	; 0x46b4 <__fixunssfsi+0x12>
    46c2:	12 c0       	rjmp	.+36     	; 0x46e8 <__fixunssfsi+0x46>
    46c4:	b1 30       	cpi	r27, 0x01	; 1
    46c6:	81 f0       	breq	.+32     	; 0x46e8 <__fixunssfsi+0x46>
    46c8:	9f d0       	rcall	.+318    	; 0x4808 <__fp_zero>
    46ca:	b1 e0       	ldi	r27, 0x01	; 1
    46cc:	08 95       	ret
    46ce:	9c c0       	rjmp	.+312    	; 0x4808 <__fp_zero>
    46d0:	67 2f       	mov	r22, r23
    46d2:	78 2f       	mov	r23, r24
    46d4:	88 27       	eor	r24, r24
    46d6:	b8 5f       	subi	r27, 0xF8	; 248
    46d8:	39 f0       	breq	.+14     	; 0x46e8 <__fixunssfsi+0x46>
    46da:	b9 3f       	cpi	r27, 0xF9	; 249
    46dc:	cc f3       	brlt	.-14     	; 0x46d0 <__fixunssfsi+0x2e>
    46de:	86 95       	lsr	r24
    46e0:	77 95       	ror	r23
    46e2:	67 95       	ror	r22
    46e4:	b3 95       	inc	r27
    46e6:	d9 f7       	brne	.-10     	; 0x46de <__fixunssfsi+0x3c>
    46e8:	3e f4       	brtc	.+14     	; 0x46f8 <__fixunssfsi+0x56>
    46ea:	90 95       	com	r25
    46ec:	80 95       	com	r24
    46ee:	70 95       	com	r23
    46f0:	61 95       	neg	r22
    46f2:	7f 4f       	sbci	r23, 0xFF	; 255
    46f4:	8f 4f       	sbci	r24, 0xFF	; 255
    46f6:	9f 4f       	sbci	r25, 0xFF	; 255
    46f8:	08 95       	ret

000046fa <__floatunsisf>:
    46fa:	e8 94       	clt
    46fc:	09 c0       	rjmp	.+18     	; 0x4710 <__floatsisf+0x12>

000046fe <__floatsisf>:
    46fe:	97 fb       	bst	r25, 7
    4700:	3e f4       	brtc	.+14     	; 0x4710 <__floatsisf+0x12>
    4702:	90 95       	com	r25
    4704:	80 95       	com	r24
    4706:	70 95       	com	r23
    4708:	61 95       	neg	r22
    470a:	7f 4f       	sbci	r23, 0xFF	; 255
    470c:	8f 4f       	sbci	r24, 0xFF	; 255
    470e:	9f 4f       	sbci	r25, 0xFF	; 255
    4710:	99 23       	and	r25, r25
    4712:	a9 f0       	breq	.+42     	; 0x473e <__floatsisf+0x40>
    4714:	f9 2f       	mov	r31, r25
    4716:	96 e9       	ldi	r25, 0x96	; 150
    4718:	bb 27       	eor	r27, r27
    471a:	93 95       	inc	r25
    471c:	f6 95       	lsr	r31
    471e:	87 95       	ror	r24
    4720:	77 95       	ror	r23
    4722:	67 95       	ror	r22
    4724:	b7 95       	ror	r27
    4726:	f1 11       	cpse	r31, r1
    4728:	f8 cf       	rjmp	.-16     	; 0x471a <__floatsisf+0x1c>
    472a:	fa f4       	brpl	.+62     	; 0x476a <__floatsisf+0x6c>
    472c:	bb 0f       	add	r27, r27
    472e:	11 f4       	brne	.+4      	; 0x4734 <__floatsisf+0x36>
    4730:	60 ff       	sbrs	r22, 0
    4732:	1b c0       	rjmp	.+54     	; 0x476a <__floatsisf+0x6c>
    4734:	6f 5f       	subi	r22, 0xFF	; 255
    4736:	7f 4f       	sbci	r23, 0xFF	; 255
    4738:	8f 4f       	sbci	r24, 0xFF	; 255
    473a:	9f 4f       	sbci	r25, 0xFF	; 255
    473c:	16 c0       	rjmp	.+44     	; 0x476a <__floatsisf+0x6c>
    473e:	88 23       	and	r24, r24
    4740:	11 f0       	breq	.+4      	; 0x4746 <__floatsisf+0x48>
    4742:	96 e9       	ldi	r25, 0x96	; 150
    4744:	11 c0       	rjmp	.+34     	; 0x4768 <__floatsisf+0x6a>
    4746:	77 23       	and	r23, r23
    4748:	21 f0       	breq	.+8      	; 0x4752 <__floatsisf+0x54>
    474a:	9e e8       	ldi	r25, 0x8E	; 142
    474c:	87 2f       	mov	r24, r23
    474e:	76 2f       	mov	r23, r22
    4750:	05 c0       	rjmp	.+10     	; 0x475c <__floatsisf+0x5e>
    4752:	66 23       	and	r22, r22
    4754:	71 f0       	breq	.+28     	; 0x4772 <__floatsisf+0x74>
    4756:	96 e8       	ldi	r25, 0x86	; 134
    4758:	86 2f       	mov	r24, r22
    475a:	70 e0       	ldi	r23, 0x00	; 0
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	2a f0       	brmi	.+10     	; 0x476a <__floatsisf+0x6c>
    4760:	9a 95       	dec	r25
    4762:	66 0f       	add	r22, r22
    4764:	77 1f       	adc	r23, r23
    4766:	88 1f       	adc	r24, r24
    4768:	da f7       	brpl	.-10     	; 0x4760 <__floatsisf+0x62>
    476a:	88 0f       	add	r24, r24
    476c:	96 95       	lsr	r25
    476e:	87 95       	ror	r24
    4770:	97 f9       	bld	r25, 7
    4772:	08 95       	ret

00004774 <__fp_inf>:
    4774:	97 f9       	bld	r25, 7
    4776:	9f 67       	ori	r25, 0x7F	; 127
    4778:	80 e8       	ldi	r24, 0x80	; 128
    477a:	70 e0       	ldi	r23, 0x00	; 0
    477c:	60 e0       	ldi	r22, 0x00	; 0
    477e:	08 95       	ret

00004780 <__fp_nan>:
    4780:	9f ef       	ldi	r25, 0xFF	; 255
    4782:	80 ec       	ldi	r24, 0xC0	; 192
    4784:	08 95       	ret

00004786 <__fp_pscA>:
    4786:	00 24       	eor	r0, r0
    4788:	0a 94       	dec	r0
    478a:	16 16       	cp	r1, r22
    478c:	17 06       	cpc	r1, r23
    478e:	18 06       	cpc	r1, r24
    4790:	09 06       	cpc	r0, r25
    4792:	08 95       	ret

00004794 <__fp_pscB>:
    4794:	00 24       	eor	r0, r0
    4796:	0a 94       	dec	r0
    4798:	12 16       	cp	r1, r18
    479a:	13 06       	cpc	r1, r19
    479c:	14 06       	cpc	r1, r20
    479e:	05 06       	cpc	r0, r21
    47a0:	08 95       	ret

000047a2 <__fp_round>:
    47a2:	09 2e       	mov	r0, r25
    47a4:	03 94       	inc	r0
    47a6:	00 0c       	add	r0, r0
    47a8:	11 f4       	brne	.+4      	; 0x47ae <__fp_round+0xc>
    47aa:	88 23       	and	r24, r24
    47ac:	52 f0       	brmi	.+20     	; 0x47c2 <__fp_round+0x20>
    47ae:	bb 0f       	add	r27, r27
    47b0:	40 f4       	brcc	.+16     	; 0x47c2 <__fp_round+0x20>
    47b2:	bf 2b       	or	r27, r31
    47b4:	11 f4       	brne	.+4      	; 0x47ba <__fp_round+0x18>
    47b6:	60 ff       	sbrs	r22, 0
    47b8:	04 c0       	rjmp	.+8      	; 0x47c2 <__fp_round+0x20>
    47ba:	6f 5f       	subi	r22, 0xFF	; 255
    47bc:	7f 4f       	sbci	r23, 0xFF	; 255
    47be:	8f 4f       	sbci	r24, 0xFF	; 255
    47c0:	9f 4f       	sbci	r25, 0xFF	; 255
    47c2:	08 95       	ret

000047c4 <__fp_split3>:
    47c4:	57 fd       	sbrc	r21, 7
    47c6:	90 58       	subi	r25, 0x80	; 128
    47c8:	44 0f       	add	r20, r20
    47ca:	55 1f       	adc	r21, r21
    47cc:	59 f0       	breq	.+22     	; 0x47e4 <__fp_splitA+0x10>
    47ce:	5f 3f       	cpi	r21, 0xFF	; 255
    47d0:	71 f0       	breq	.+28     	; 0x47ee <__fp_splitA+0x1a>
    47d2:	47 95       	ror	r20

000047d4 <__fp_splitA>:
    47d4:	88 0f       	add	r24, r24
    47d6:	97 fb       	bst	r25, 7
    47d8:	99 1f       	adc	r25, r25
    47da:	61 f0       	breq	.+24     	; 0x47f4 <__fp_splitA+0x20>
    47dc:	9f 3f       	cpi	r25, 0xFF	; 255
    47de:	79 f0       	breq	.+30     	; 0x47fe <__fp_splitA+0x2a>
    47e0:	87 95       	ror	r24
    47e2:	08 95       	ret
    47e4:	12 16       	cp	r1, r18
    47e6:	13 06       	cpc	r1, r19
    47e8:	14 06       	cpc	r1, r20
    47ea:	55 1f       	adc	r21, r21
    47ec:	f2 cf       	rjmp	.-28     	; 0x47d2 <__fp_split3+0xe>
    47ee:	46 95       	lsr	r20
    47f0:	f1 df       	rcall	.-30     	; 0x47d4 <__fp_splitA>
    47f2:	08 c0       	rjmp	.+16     	; 0x4804 <__fp_splitA+0x30>
    47f4:	16 16       	cp	r1, r22
    47f6:	17 06       	cpc	r1, r23
    47f8:	18 06       	cpc	r1, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	f1 cf       	rjmp	.-30     	; 0x47e0 <__fp_splitA+0xc>
    47fe:	86 95       	lsr	r24
    4800:	71 05       	cpc	r23, r1
    4802:	61 05       	cpc	r22, r1
    4804:	08 94       	sec
    4806:	08 95       	ret

00004808 <__fp_zero>:
    4808:	e8 94       	clt

0000480a <__fp_szero>:
    480a:	bb 27       	eor	r27, r27
    480c:	66 27       	eor	r22, r22
    480e:	77 27       	eor	r23, r23
    4810:	cb 01       	movw	r24, r22
    4812:	97 f9       	bld	r25, 7
    4814:	08 95       	ret

00004816 <__mulsf3>:
    4816:	0b d0       	rcall	.+22     	; 0x482e <__mulsf3x>
    4818:	c4 cf       	rjmp	.-120    	; 0x47a2 <__fp_round>
    481a:	b5 df       	rcall	.-150    	; 0x4786 <__fp_pscA>
    481c:	28 f0       	brcs	.+10     	; 0x4828 <__mulsf3+0x12>
    481e:	ba df       	rcall	.-140    	; 0x4794 <__fp_pscB>
    4820:	18 f0       	brcs	.+6      	; 0x4828 <__mulsf3+0x12>
    4822:	95 23       	and	r25, r21
    4824:	09 f0       	breq	.+2      	; 0x4828 <__mulsf3+0x12>
    4826:	a6 cf       	rjmp	.-180    	; 0x4774 <__fp_inf>
    4828:	ab cf       	rjmp	.-170    	; 0x4780 <__fp_nan>
    482a:	11 24       	eor	r1, r1
    482c:	ee cf       	rjmp	.-36     	; 0x480a <__fp_szero>

0000482e <__mulsf3x>:
    482e:	ca df       	rcall	.-108    	; 0x47c4 <__fp_split3>
    4830:	a0 f3       	brcs	.-24     	; 0x481a <__mulsf3+0x4>

00004832 <__mulsf3_pse>:
    4832:	95 9f       	mul	r25, r21
    4834:	d1 f3       	breq	.-12     	; 0x482a <__mulsf3+0x14>
    4836:	95 0f       	add	r25, r21
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	55 1f       	adc	r21, r21
    483c:	62 9f       	mul	r22, r18
    483e:	f0 01       	movw	r30, r0
    4840:	72 9f       	mul	r23, r18
    4842:	bb 27       	eor	r27, r27
    4844:	f0 0d       	add	r31, r0
    4846:	b1 1d       	adc	r27, r1
    4848:	63 9f       	mul	r22, r19
    484a:	aa 27       	eor	r26, r26
    484c:	f0 0d       	add	r31, r0
    484e:	b1 1d       	adc	r27, r1
    4850:	aa 1f       	adc	r26, r26
    4852:	64 9f       	mul	r22, r20
    4854:	66 27       	eor	r22, r22
    4856:	b0 0d       	add	r27, r0
    4858:	a1 1d       	adc	r26, r1
    485a:	66 1f       	adc	r22, r22
    485c:	82 9f       	mul	r24, r18
    485e:	22 27       	eor	r18, r18
    4860:	b0 0d       	add	r27, r0
    4862:	a1 1d       	adc	r26, r1
    4864:	62 1f       	adc	r22, r18
    4866:	73 9f       	mul	r23, r19
    4868:	b0 0d       	add	r27, r0
    486a:	a1 1d       	adc	r26, r1
    486c:	62 1f       	adc	r22, r18
    486e:	83 9f       	mul	r24, r19
    4870:	a0 0d       	add	r26, r0
    4872:	61 1d       	adc	r22, r1
    4874:	22 1f       	adc	r18, r18
    4876:	74 9f       	mul	r23, r20
    4878:	33 27       	eor	r19, r19
    487a:	a0 0d       	add	r26, r0
    487c:	61 1d       	adc	r22, r1
    487e:	23 1f       	adc	r18, r19
    4880:	84 9f       	mul	r24, r20
    4882:	60 0d       	add	r22, r0
    4884:	21 1d       	adc	r18, r1
    4886:	82 2f       	mov	r24, r18
    4888:	76 2f       	mov	r23, r22
    488a:	6a 2f       	mov	r22, r26
    488c:	11 24       	eor	r1, r1
    488e:	9f 57       	subi	r25, 0x7F	; 127
    4890:	50 40       	sbci	r21, 0x00	; 0
    4892:	8a f0       	brmi	.+34     	; 0x48b6 <__mulsf3_pse+0x84>
    4894:	e1 f0       	breq	.+56     	; 0x48ce <__mulsf3_pse+0x9c>
    4896:	88 23       	and	r24, r24
    4898:	4a f0       	brmi	.+18     	; 0x48ac <__mulsf3_pse+0x7a>
    489a:	ee 0f       	add	r30, r30
    489c:	ff 1f       	adc	r31, r31
    489e:	bb 1f       	adc	r27, r27
    48a0:	66 1f       	adc	r22, r22
    48a2:	77 1f       	adc	r23, r23
    48a4:	88 1f       	adc	r24, r24
    48a6:	91 50       	subi	r25, 0x01	; 1
    48a8:	50 40       	sbci	r21, 0x00	; 0
    48aa:	a9 f7       	brne	.-22     	; 0x4896 <__mulsf3_pse+0x64>
    48ac:	9e 3f       	cpi	r25, 0xFE	; 254
    48ae:	51 05       	cpc	r21, r1
    48b0:	70 f0       	brcs	.+28     	; 0x48ce <__mulsf3_pse+0x9c>
    48b2:	60 cf       	rjmp	.-320    	; 0x4774 <__fp_inf>
    48b4:	aa cf       	rjmp	.-172    	; 0x480a <__fp_szero>
    48b6:	5f 3f       	cpi	r21, 0xFF	; 255
    48b8:	ec f3       	brlt	.-6      	; 0x48b4 <__mulsf3_pse+0x82>
    48ba:	98 3e       	cpi	r25, 0xE8	; 232
    48bc:	dc f3       	brlt	.-10     	; 0x48b4 <__mulsf3_pse+0x82>
    48be:	86 95       	lsr	r24
    48c0:	77 95       	ror	r23
    48c2:	67 95       	ror	r22
    48c4:	b7 95       	ror	r27
    48c6:	f7 95       	ror	r31
    48c8:	e7 95       	ror	r30
    48ca:	9f 5f       	subi	r25, 0xFF	; 255
    48cc:	c1 f7       	brne	.-16     	; 0x48be <__mulsf3_pse+0x8c>
    48ce:	fe 2b       	or	r31, r30
    48d0:	88 0f       	add	r24, r24
    48d2:	91 1d       	adc	r25, r1
    48d4:	96 95       	lsr	r25
    48d6:	87 95       	ror	r24
    48d8:	97 f9       	bld	r25, 7
    48da:	08 95       	ret

000048dc <__tablejump2__>:
    48dc:	ee 0f       	add	r30, r30
    48de:	ff 1f       	adc	r31, r31
    48e0:	88 1f       	adc	r24, r24
    48e2:	8b bf       	out	0x3b, r24	; 59
    48e4:	07 90       	elpm	r0, Z+
    48e6:	f6 91       	elpm	r31, Z
    48e8:	e0 2d       	mov	r30, r0
    48ea:	19 94       	eijmp

000048ec <calloc>:
    48ec:	0f 93       	push	r16
    48ee:	1f 93       	push	r17
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	86 9f       	mul	r24, r22
    48f6:	80 01       	movw	r16, r0
    48f8:	87 9f       	mul	r24, r23
    48fa:	10 0d       	add	r17, r0
    48fc:	96 9f       	mul	r25, r22
    48fe:	10 0d       	add	r17, r0
    4900:	11 24       	eor	r1, r1
    4902:	c8 01       	movw	r24, r16
    4904:	0d d0       	rcall	.+26     	; 0x4920 <malloc>
    4906:	ec 01       	movw	r28, r24
    4908:	00 97       	sbiw	r24, 0x00	; 0
    490a:	21 f0       	breq	.+8      	; 0x4914 <calloc+0x28>
    490c:	a8 01       	movw	r20, r16
    490e:	60 e0       	ldi	r22, 0x00	; 0
    4910:	70 e0       	ldi	r23, 0x00	; 0
    4912:	34 d1       	rcall	.+616    	; 0x4b7c <memset>
    4914:	ce 01       	movw	r24, r28
    4916:	df 91       	pop	r29
    4918:	cf 91       	pop	r28
    491a:	1f 91       	pop	r17
    491c:	0f 91       	pop	r16
    491e:	08 95       	ret

00004920 <malloc>:
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	82 30       	cpi	r24, 0x02	; 2
    492a:	91 05       	cpc	r25, r1
    492c:	10 f4       	brcc	.+4      	; 0x4932 <malloc+0x12>
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	e0 91 fa 12 	lds	r30, 0x12FA	; 0x8012fa <__flp>
    4936:	f0 91 fb 12 	lds	r31, 0x12FB	; 0x8012fb <__flp+0x1>
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	a0 e0       	ldi	r26, 0x00	; 0
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	30 97       	sbiw	r30, 0x00	; 0
    4944:	19 f1       	breq	.+70     	; 0x498c <malloc+0x6c>
    4946:	40 81       	ld	r20, Z
    4948:	51 81       	ldd	r21, Z+1	; 0x01
    494a:	02 81       	ldd	r16, Z+2	; 0x02
    494c:	13 81       	ldd	r17, Z+3	; 0x03
    494e:	48 17       	cp	r20, r24
    4950:	59 07       	cpc	r21, r25
    4952:	c8 f0       	brcs	.+50     	; 0x4986 <malloc+0x66>
    4954:	84 17       	cp	r24, r20
    4956:	95 07       	cpc	r25, r21
    4958:	69 f4       	brne	.+26     	; 0x4974 <malloc+0x54>
    495a:	10 97       	sbiw	r26, 0x00	; 0
    495c:	31 f0       	breq	.+12     	; 0x496a <malloc+0x4a>
    495e:	12 96       	adiw	r26, 0x02	; 2
    4960:	0c 93       	st	X, r16
    4962:	12 97       	sbiw	r26, 0x02	; 2
    4964:	13 96       	adiw	r26, 0x03	; 3
    4966:	1c 93       	st	X, r17
    4968:	27 c0       	rjmp	.+78     	; 0x49b8 <malloc+0x98>
    496a:	00 93 fa 12 	sts	0x12FA, r16	; 0x8012fa <__flp>
    496e:	10 93 fb 12 	sts	0x12FB, r17	; 0x8012fb <__flp+0x1>
    4972:	22 c0       	rjmp	.+68     	; 0x49b8 <malloc+0x98>
    4974:	21 15       	cp	r18, r1
    4976:	31 05       	cpc	r19, r1
    4978:	19 f0       	breq	.+6      	; 0x4980 <malloc+0x60>
    497a:	42 17       	cp	r20, r18
    497c:	53 07       	cpc	r21, r19
    497e:	18 f4       	brcc	.+6      	; 0x4986 <malloc+0x66>
    4980:	9a 01       	movw	r18, r20
    4982:	bd 01       	movw	r22, r26
    4984:	ef 01       	movw	r28, r30
    4986:	df 01       	movw	r26, r30
    4988:	f8 01       	movw	r30, r16
    498a:	db cf       	rjmp	.-74     	; 0x4942 <malloc+0x22>
    498c:	21 15       	cp	r18, r1
    498e:	31 05       	cpc	r19, r1
    4990:	f9 f0       	breq	.+62     	; 0x49d0 <malloc+0xb0>
    4992:	28 1b       	sub	r18, r24
    4994:	39 0b       	sbc	r19, r25
    4996:	24 30       	cpi	r18, 0x04	; 4
    4998:	31 05       	cpc	r19, r1
    499a:	80 f4       	brcc	.+32     	; 0x49bc <malloc+0x9c>
    499c:	8a 81       	ldd	r24, Y+2	; 0x02
    499e:	9b 81       	ldd	r25, Y+3	; 0x03
    49a0:	61 15       	cp	r22, r1
    49a2:	71 05       	cpc	r23, r1
    49a4:	21 f0       	breq	.+8      	; 0x49ae <malloc+0x8e>
    49a6:	fb 01       	movw	r30, r22
    49a8:	93 83       	std	Z+3, r25	; 0x03
    49aa:	82 83       	std	Z+2, r24	; 0x02
    49ac:	04 c0       	rjmp	.+8      	; 0x49b6 <malloc+0x96>
    49ae:	90 93 fb 12 	sts	0x12FB, r25	; 0x8012fb <__flp+0x1>
    49b2:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <__flp>
    49b6:	fe 01       	movw	r30, r28
    49b8:	32 96       	adiw	r30, 0x02	; 2
    49ba:	44 c0       	rjmp	.+136    	; 0x4a44 <malloc+0x124>
    49bc:	fe 01       	movw	r30, r28
    49be:	e2 0f       	add	r30, r18
    49c0:	f3 1f       	adc	r31, r19
    49c2:	81 93       	st	Z+, r24
    49c4:	91 93       	st	Z+, r25
    49c6:	22 50       	subi	r18, 0x02	; 2
    49c8:	31 09       	sbc	r19, r1
    49ca:	39 83       	std	Y+1, r19	; 0x01
    49cc:	28 83       	st	Y, r18
    49ce:	3a c0       	rjmp	.+116    	; 0x4a44 <malloc+0x124>
    49d0:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    49d4:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    49d8:	23 2b       	or	r18, r19
    49da:	41 f4       	brne	.+16     	; 0x49ec <malloc+0xcc>
    49dc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    49e0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    49e4:	30 93 f9 12 	sts	0x12F9, r19	; 0x8012f9 <__brkval+0x1>
    49e8:	20 93 f8 12 	sts	0x12F8, r18	; 0x8012f8 <__brkval>
    49ec:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    49f0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    49f4:	21 15       	cp	r18, r1
    49f6:	31 05       	cpc	r19, r1
    49f8:	41 f4       	brne	.+16     	; 0x4a0a <malloc+0xea>
    49fa:	2d b7       	in	r18, 0x3d	; 61
    49fc:	3e b7       	in	r19, 0x3e	; 62
    49fe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a02:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a06:	24 1b       	sub	r18, r20
    4a08:	35 0b       	sbc	r19, r21
    4a0a:	e0 91 f8 12 	lds	r30, 0x12F8	; 0x8012f8 <__brkval>
    4a0e:	f0 91 f9 12 	lds	r31, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4a12:	e2 17       	cp	r30, r18
    4a14:	f3 07       	cpc	r31, r19
    4a16:	a0 f4       	brcc	.+40     	; 0x4a40 <malloc+0x120>
    4a18:	2e 1b       	sub	r18, r30
    4a1a:	3f 0b       	sbc	r19, r31
    4a1c:	28 17       	cp	r18, r24
    4a1e:	39 07       	cpc	r19, r25
    4a20:	78 f0       	brcs	.+30     	; 0x4a40 <malloc+0x120>
    4a22:	ac 01       	movw	r20, r24
    4a24:	4e 5f       	subi	r20, 0xFE	; 254
    4a26:	5f 4f       	sbci	r21, 0xFF	; 255
    4a28:	24 17       	cp	r18, r20
    4a2a:	35 07       	cpc	r19, r21
    4a2c:	48 f0       	brcs	.+18     	; 0x4a40 <malloc+0x120>
    4a2e:	4e 0f       	add	r20, r30
    4a30:	5f 1f       	adc	r21, r31
    4a32:	50 93 f9 12 	sts	0x12F9, r21	; 0x8012f9 <__brkval+0x1>
    4a36:	40 93 f8 12 	sts	0x12F8, r20	; 0x8012f8 <__brkval>
    4a3a:	81 93       	st	Z+, r24
    4a3c:	91 93       	st	Z+, r25
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <malloc+0x124>
    4a40:	e0 e0       	ldi	r30, 0x00	; 0
    4a42:	f0 e0       	ldi	r31, 0x00	; 0
    4a44:	cf 01       	movw	r24, r30
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	1f 91       	pop	r17
    4a4c:	0f 91       	pop	r16
    4a4e:	08 95       	ret

00004a50 <free>:
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	00 97       	sbiw	r24, 0x00	; 0
    4a56:	09 f4       	brne	.+2      	; 0x4a5a <free+0xa>
    4a58:	81 c0       	rjmp	.+258    	; 0x4b5c <free+0x10c>
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	32 97       	sbiw	r30, 0x02	; 2
    4a5e:	13 82       	std	Z+3, r1	; 0x03
    4a60:	12 82       	std	Z+2, r1	; 0x02
    4a62:	a0 91 fa 12 	lds	r26, 0x12FA	; 0x8012fa <__flp>
    4a66:	b0 91 fb 12 	lds	r27, 0x12FB	; 0x8012fb <__flp+0x1>
    4a6a:	10 97       	sbiw	r26, 0x00	; 0
    4a6c:	81 f4       	brne	.+32     	; 0x4a8e <free+0x3e>
    4a6e:	20 81       	ld	r18, Z
    4a70:	31 81       	ldd	r19, Z+1	; 0x01
    4a72:	82 0f       	add	r24, r18
    4a74:	93 1f       	adc	r25, r19
    4a76:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    4a7a:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4a7e:	28 17       	cp	r18, r24
    4a80:	39 07       	cpc	r19, r25
    4a82:	51 f5       	brne	.+84     	; 0x4ad8 <free+0x88>
    4a84:	f0 93 f9 12 	sts	0x12F9, r31	; 0x8012f9 <__brkval+0x1>
    4a88:	e0 93 f8 12 	sts	0x12F8, r30	; 0x8012f8 <__brkval>
    4a8c:	67 c0       	rjmp	.+206    	; 0x4b5c <free+0x10c>
    4a8e:	ed 01       	movw	r28, r26
    4a90:	20 e0       	ldi	r18, 0x00	; 0
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	ce 17       	cp	r28, r30
    4a96:	df 07       	cpc	r29, r31
    4a98:	40 f4       	brcc	.+16     	; 0x4aaa <free+0x5a>
    4a9a:	4a 81       	ldd	r20, Y+2	; 0x02
    4a9c:	5b 81       	ldd	r21, Y+3	; 0x03
    4a9e:	9e 01       	movw	r18, r28
    4aa0:	41 15       	cp	r20, r1
    4aa2:	51 05       	cpc	r21, r1
    4aa4:	f1 f0       	breq	.+60     	; 0x4ae2 <free+0x92>
    4aa6:	ea 01       	movw	r28, r20
    4aa8:	f5 cf       	rjmp	.-22     	; 0x4a94 <free+0x44>
    4aaa:	d3 83       	std	Z+3, r29	; 0x03
    4aac:	c2 83       	std	Z+2, r28	; 0x02
    4aae:	40 81       	ld	r20, Z
    4ab0:	51 81       	ldd	r21, Z+1	; 0x01
    4ab2:	84 0f       	add	r24, r20
    4ab4:	95 1f       	adc	r25, r21
    4ab6:	c8 17       	cp	r28, r24
    4ab8:	d9 07       	cpc	r29, r25
    4aba:	59 f4       	brne	.+22     	; 0x4ad2 <free+0x82>
    4abc:	88 81       	ld	r24, Y
    4abe:	99 81       	ldd	r25, Y+1	; 0x01
    4ac0:	84 0f       	add	r24, r20
    4ac2:	95 1f       	adc	r25, r21
    4ac4:	02 96       	adiw	r24, 0x02	; 2
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	80 83       	st	Z, r24
    4aca:	8a 81       	ldd	r24, Y+2	; 0x02
    4acc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ace:	93 83       	std	Z+3, r25	; 0x03
    4ad0:	82 83       	std	Z+2, r24	; 0x02
    4ad2:	21 15       	cp	r18, r1
    4ad4:	31 05       	cpc	r19, r1
    4ad6:	29 f4       	brne	.+10     	; 0x4ae2 <free+0x92>
    4ad8:	f0 93 fb 12 	sts	0x12FB, r31	; 0x8012fb <__flp+0x1>
    4adc:	e0 93 fa 12 	sts	0x12FA, r30	; 0x8012fa <__flp>
    4ae0:	3d c0       	rjmp	.+122    	; 0x4b5c <free+0x10c>
    4ae2:	e9 01       	movw	r28, r18
    4ae4:	fb 83       	std	Y+3, r31	; 0x03
    4ae6:	ea 83       	std	Y+2, r30	; 0x02
    4ae8:	49 91       	ld	r20, Y+
    4aea:	59 91       	ld	r21, Y+
    4aec:	c4 0f       	add	r28, r20
    4aee:	d5 1f       	adc	r29, r21
    4af0:	ec 17       	cp	r30, r28
    4af2:	fd 07       	cpc	r31, r29
    4af4:	61 f4       	brne	.+24     	; 0x4b0e <free+0xbe>
    4af6:	80 81       	ld	r24, Z
    4af8:	91 81       	ldd	r25, Z+1	; 0x01
    4afa:	84 0f       	add	r24, r20
    4afc:	95 1f       	adc	r25, r21
    4afe:	02 96       	adiw	r24, 0x02	; 2
    4b00:	e9 01       	movw	r28, r18
    4b02:	99 83       	std	Y+1, r25	; 0x01
    4b04:	88 83       	st	Y, r24
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	9b 83       	std	Y+3, r25	; 0x03
    4b0c:	8a 83       	std	Y+2, r24	; 0x02
    4b0e:	e0 e0       	ldi	r30, 0x00	; 0
    4b10:	f0 e0       	ldi	r31, 0x00	; 0
    4b12:	12 96       	adiw	r26, 0x02	; 2
    4b14:	8d 91       	ld	r24, X+
    4b16:	9c 91       	ld	r25, X
    4b18:	13 97       	sbiw	r26, 0x03	; 3
    4b1a:	00 97       	sbiw	r24, 0x00	; 0
    4b1c:	19 f0       	breq	.+6      	; 0x4b24 <free+0xd4>
    4b1e:	fd 01       	movw	r30, r26
    4b20:	dc 01       	movw	r26, r24
    4b22:	f7 cf       	rjmp	.-18     	; 0x4b12 <free+0xc2>
    4b24:	8d 91       	ld	r24, X+
    4b26:	9c 91       	ld	r25, X
    4b28:	11 97       	sbiw	r26, 0x01	; 1
    4b2a:	9d 01       	movw	r18, r26
    4b2c:	2e 5f       	subi	r18, 0xFE	; 254
    4b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b30:	82 0f       	add	r24, r18
    4b32:	93 1f       	adc	r25, r19
    4b34:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    4b38:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4b3c:	28 17       	cp	r18, r24
    4b3e:	39 07       	cpc	r19, r25
    4b40:	69 f4       	brne	.+26     	; 0x4b5c <free+0x10c>
    4b42:	30 97       	sbiw	r30, 0x00	; 0
    4b44:	29 f4       	brne	.+10     	; 0x4b50 <free+0x100>
    4b46:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <__flp+0x1>
    4b4a:	10 92 fa 12 	sts	0x12FA, r1	; 0x8012fa <__flp>
    4b4e:	02 c0       	rjmp	.+4      	; 0x4b54 <free+0x104>
    4b50:	13 82       	std	Z+3, r1	; 0x03
    4b52:	12 82       	std	Z+2, r1	; 0x02
    4b54:	b0 93 f9 12 	sts	0x12F9, r27	; 0x8012f9 <__brkval+0x1>
    4b58:	a0 93 f8 12 	sts	0x12F8, r26	; 0x8012f8 <__brkval>
    4b5c:	df 91       	pop	r29
    4b5e:	cf 91       	pop	r28
    4b60:	08 95       	ret

00004b62 <abort>:
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	f8 94       	cli
    4b68:	7d c3       	rjmp	.+1786   	; 0x5264 <_exit>

00004b6a <memcpy>:
    4b6a:	fb 01       	movw	r30, r22
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	02 c0       	rjmp	.+4      	; 0x4b74 <memcpy+0xa>
    4b70:	01 90       	ld	r0, Z+
    4b72:	0d 92       	st	X+, r0
    4b74:	41 50       	subi	r20, 0x01	; 1
    4b76:	50 40       	sbci	r21, 0x00	; 0
    4b78:	d8 f7       	brcc	.-10     	; 0x4b70 <memcpy+0x6>
    4b7a:	08 95       	ret

00004b7c <memset>:
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	01 c0       	rjmp	.+2      	; 0x4b82 <memset+0x6>
    4b80:	6d 93       	st	X+, r22
    4b82:	41 50       	subi	r20, 0x01	; 1
    4b84:	50 40       	sbci	r21, 0x00	; 0
    4b86:	e0 f7       	brcc	.-8      	; 0x4b80 <memset+0x4>
    4b88:	08 95       	ret

00004b8a <strcasestr>:
    4b8a:	fb 01       	movw	r30, r22
    4b8c:	51 91       	ld	r21, Z+
    4b8e:	55 23       	and	r21, r21
    4b90:	b1 f0       	breq	.+44     	; 0x4bbe <strcasestr+0x34>
    4b92:	bf 01       	movw	r22, r30
    4b94:	dc 01       	movw	r26, r24
    4b96:	05 2e       	mov	r0, r21
    4b98:	4d 91       	ld	r20, X+
    4b9a:	44 23       	and	r20, r20
    4b9c:	69 f0       	breq	.+26     	; 0x4bb8 <strcasestr+0x2e>
    4b9e:	10 d0       	rcall	.+32     	; 0x4bc0 <strcasestr+0x36>
    4ba0:	d9 f7       	brne	.-10     	; 0x4b98 <strcasestr+0xe>
    4ba2:	cd 01       	movw	r24, r26
    4ba4:	01 90       	ld	r0, Z+
    4ba6:	00 20       	and	r0, r0
    4ba8:	49 f0       	breq	.+18     	; 0x4bbc <strcasestr+0x32>
    4baa:	4d 91       	ld	r20, X+
    4bac:	41 11       	cpse	r20, r1
    4bae:	08 d0       	rcall	.+16     	; 0x4bc0 <strcasestr+0x36>
    4bb0:	c9 f3       	breq	.-14     	; 0x4ba4 <strcasestr+0x1a>
    4bb2:	fb 01       	movw	r30, r22
    4bb4:	41 11       	cpse	r20, r1
    4bb6:	ee cf       	rjmp	.-36     	; 0x4b94 <strcasestr+0xa>
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	01 97       	sbiw	r24, 0x01	; 1
    4bbe:	08 95       	ret
    4bc0:	40 25       	eor	r20, r0
    4bc2:	39 f0       	breq	.+14     	; 0x4bd2 <strcasestr+0x48>
    4bc4:	40 32       	cpi	r20, 0x20	; 32
    4bc6:	29 f4       	brne	.+10     	; 0x4bd2 <strcasestr+0x48>
    4bc8:	40 29       	or	r20, r0
    4bca:	4b 57       	subi	r20, 0x7B	; 123
    4bcc:	46 5e       	subi	r20, 0xE6	; 230
    4bce:	08 f0       	brcs	.+2      	; 0x4bd2 <strcasestr+0x48>
    4bd0:	18 94       	sez
    4bd2:	08 95       	ret

00004bd4 <strcat>:
    4bd4:	fb 01       	movw	r30, r22
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	0d 90       	ld	r0, X+
    4bda:	00 20       	and	r0, r0
    4bdc:	e9 f7       	brne	.-6      	; 0x4bd8 <strcat+0x4>
    4bde:	11 97       	sbiw	r26, 0x01	; 1
    4be0:	01 90       	ld	r0, Z+
    4be2:	0d 92       	st	X+, r0
    4be4:	00 20       	and	r0, r0
    4be6:	e1 f7       	brne	.-8      	; 0x4be0 <strcat+0xc>
    4be8:	08 95       	ret

00004bea <strcpy>:
    4bea:	fb 01       	movw	r30, r22
    4bec:	dc 01       	movw	r26, r24
    4bee:	01 90       	ld	r0, Z+
    4bf0:	0d 92       	st	X+, r0
    4bf2:	00 20       	and	r0, r0
    4bf4:	e1 f7       	brne	.-8      	; 0x4bee <strcpy+0x4>
    4bf6:	08 95       	ret

00004bf8 <strncasecmp>:
    4bf8:	fb 01       	movw	r30, r22
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	41 50       	subi	r20, 0x01	; 1
    4bfe:	50 40       	sbci	r21, 0x00	; 0
    4c00:	88 f0       	brcs	.+34     	; 0x4c24 <strncasecmp+0x2c>
    4c02:	8d 91       	ld	r24, X+
    4c04:	81 34       	cpi	r24, 0x41	; 65
    4c06:	1c f0       	brlt	.+6      	; 0x4c0e <strncasecmp+0x16>
    4c08:	8b 35       	cpi	r24, 0x5B	; 91
    4c0a:	0c f4       	brge	.+2      	; 0x4c0e <strncasecmp+0x16>
    4c0c:	80 5e       	subi	r24, 0xE0	; 224
    4c0e:	61 91       	ld	r22, Z+
    4c10:	61 34       	cpi	r22, 0x41	; 65
    4c12:	1c f0       	brlt	.+6      	; 0x4c1a <strncasecmp+0x22>
    4c14:	6b 35       	cpi	r22, 0x5B	; 91
    4c16:	0c f4       	brge	.+2      	; 0x4c1a <strncasecmp+0x22>
    4c18:	60 5e       	subi	r22, 0xE0	; 224
    4c1a:	86 1b       	sub	r24, r22
    4c1c:	61 11       	cpse	r22, r1
    4c1e:	71 f3       	breq	.-36     	; 0x4bfc <strncasecmp+0x4>
    4c20:	99 0b       	sbc	r25, r25
    4c22:	08 95       	ret
    4c24:	88 1b       	sub	r24, r24
    4c26:	fc cf       	rjmp	.-8      	; 0x4c20 <strncasecmp+0x28>

00004c28 <printf>:
    4c28:	cf 93       	push	r28
    4c2a:	df 93       	push	r29
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
    4c30:	ae 01       	movw	r20, r28
    4c32:	4a 5f       	subi	r20, 0xFA	; 250
    4c34:	5f 4f       	sbci	r21, 0xFF	; 255
    4c36:	fa 01       	movw	r30, r20
    4c38:	61 91       	ld	r22, Z+
    4c3a:	71 91       	ld	r23, Z+
    4c3c:	af 01       	movw	r20, r30
    4c3e:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <__iob+0x2>
    4c42:	90 91 ff 12 	lds	r25, 0x12FF	; 0x8012ff <__iob+0x3>
    4c46:	61 d0       	rcall	.+194    	; 0x4d0a <vfprintf>
    4c48:	df 91       	pop	r29
    4c4a:	cf 91       	pop	r28
    4c4c:	08 95       	ret

00004c4e <puts>:
    4c4e:	0f 93       	push	r16
    4c50:	1f 93       	push	r17
    4c52:	cf 93       	push	r28
    4c54:	df 93       	push	r29
    4c56:	e0 91 fe 12 	lds	r30, 0x12FE	; 0x8012fe <__iob+0x2>
    4c5a:	f0 91 ff 12 	lds	r31, 0x12FF	; 0x8012ff <__iob+0x3>
    4c5e:	23 81       	ldd	r18, Z+3	; 0x03
    4c60:	21 ff       	sbrs	r18, 1
    4c62:	1b c0       	rjmp	.+54     	; 0x4c9a <puts+0x4c>
    4c64:	8c 01       	movw	r16, r24
    4c66:	d0 e0       	ldi	r29, 0x00	; 0
    4c68:	c0 e0       	ldi	r28, 0x00	; 0
    4c6a:	f8 01       	movw	r30, r16
    4c6c:	81 91       	ld	r24, Z+
    4c6e:	8f 01       	movw	r16, r30
    4c70:	60 91 fe 12 	lds	r22, 0x12FE	; 0x8012fe <__iob+0x2>
    4c74:	70 91 ff 12 	lds	r23, 0x12FF	; 0x8012ff <__iob+0x3>
    4c78:	db 01       	movw	r26, r22
    4c7a:	18 96       	adiw	r26, 0x08	; 8
    4c7c:	ed 91       	ld	r30, X+
    4c7e:	fc 91       	ld	r31, X
    4c80:	19 97       	sbiw	r26, 0x09	; 9
    4c82:	88 23       	and	r24, r24
    4c84:	31 f0       	breq	.+12     	; 0x4c92 <puts+0x44>
    4c86:	19 95       	eicall
    4c88:	89 2b       	or	r24, r25
    4c8a:	79 f3       	breq	.-34     	; 0x4c6a <puts+0x1c>
    4c8c:	df ef       	ldi	r29, 0xFF	; 255
    4c8e:	cf ef       	ldi	r28, 0xFF	; 255
    4c90:	ec cf       	rjmp	.-40     	; 0x4c6a <puts+0x1c>
    4c92:	8a e0       	ldi	r24, 0x0A	; 10
    4c94:	19 95       	eicall
    4c96:	89 2b       	or	r24, r25
    4c98:	19 f0       	breq	.+6      	; 0x4ca0 <puts+0x52>
    4c9a:	8f ef       	ldi	r24, 0xFF	; 255
    4c9c:	9f ef       	ldi	r25, 0xFF	; 255
    4c9e:	02 c0       	rjmp	.+4      	; 0x4ca4 <puts+0x56>
    4ca0:	8d 2f       	mov	r24, r29
    4ca2:	9c 2f       	mov	r25, r28
    4ca4:	df 91       	pop	r29
    4ca6:	cf 91       	pop	r28
    4ca8:	1f 91       	pop	r17
    4caa:	0f 91       	pop	r16
    4cac:	08 95       	ret

00004cae <sprintf>:
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
    4cb2:	cf 93       	push	r28
    4cb4:	df 93       	push	r29
    4cb6:	cd b7       	in	r28, 0x3d	; 61
    4cb8:	de b7       	in	r29, 0x3e	; 62
    4cba:	2e 97       	sbiw	r28, 0x0e	; 14
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	0e 89       	ldd	r16, Y+22	; 0x16
    4cc8:	1f 89       	ldd	r17, Y+23	; 0x17
    4cca:	86 e0       	ldi	r24, 0x06	; 6
    4ccc:	8c 83       	std	Y+4, r24	; 0x04
    4cce:	1a 83       	std	Y+2, r17	; 0x02
    4cd0:	09 83       	std	Y+1, r16	; 0x01
    4cd2:	8f ef       	ldi	r24, 0xFF	; 255
    4cd4:	9f e7       	ldi	r25, 0x7F	; 127
    4cd6:	9e 83       	std	Y+6, r25	; 0x06
    4cd8:	8d 83       	std	Y+5, r24	; 0x05
    4cda:	ae 01       	movw	r20, r28
    4cdc:	46 5e       	subi	r20, 0xE6	; 230
    4cde:	5f 4f       	sbci	r21, 0xFF	; 255
    4ce0:	68 8d       	ldd	r22, Y+24	; 0x18
    4ce2:	79 8d       	ldd	r23, Y+25	; 0x19
    4ce4:	ce 01       	movw	r24, r28
    4ce6:	01 96       	adiw	r24, 0x01	; 1
    4ce8:	10 d0       	rcall	.+32     	; 0x4d0a <vfprintf>
    4cea:	ef 81       	ldd	r30, Y+7	; 0x07
    4cec:	f8 85       	ldd	r31, Y+8	; 0x08
    4cee:	e0 0f       	add	r30, r16
    4cf0:	f1 1f       	adc	r31, r17
    4cf2:	10 82       	st	Z, r1
    4cf4:	2e 96       	adiw	r28, 0x0e	; 14
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
    4d00:	df 91       	pop	r29
    4d02:	cf 91       	pop	r28
    4d04:	1f 91       	pop	r17
    4d06:	0f 91       	pop	r16
    4d08:	08 95       	ret

00004d0a <vfprintf>:
    4d0a:	2f 92       	push	r2
    4d0c:	3f 92       	push	r3
    4d0e:	4f 92       	push	r4
    4d10:	5f 92       	push	r5
    4d12:	6f 92       	push	r6
    4d14:	7f 92       	push	r7
    4d16:	8f 92       	push	r8
    4d18:	9f 92       	push	r9
    4d1a:	af 92       	push	r10
    4d1c:	bf 92       	push	r11
    4d1e:	cf 92       	push	r12
    4d20:	df 92       	push	r13
    4d22:	ef 92       	push	r14
    4d24:	ff 92       	push	r15
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
    4d2a:	cf 93       	push	r28
    4d2c:	df 93       	push	r29
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	2b 97       	sbiw	r28, 0x0b	; 11
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	cd bf       	out	0x3d, r28	; 61
    4d3e:	6c 01       	movw	r12, r24
    4d40:	7b 01       	movw	r14, r22
    4d42:	8a 01       	movw	r16, r20
    4d44:	fc 01       	movw	r30, r24
    4d46:	17 82       	std	Z+7, r1	; 0x07
    4d48:	16 82       	std	Z+6, r1	; 0x06
    4d4a:	83 81       	ldd	r24, Z+3	; 0x03
    4d4c:	81 ff       	sbrs	r24, 1
    4d4e:	bf c1       	rjmp	.+894    	; 0x50ce <vfprintf+0x3c4>
    4d50:	ce 01       	movw	r24, r28
    4d52:	01 96       	adiw	r24, 0x01	; 1
    4d54:	3c 01       	movw	r6, r24
    4d56:	f6 01       	movw	r30, r12
    4d58:	93 81       	ldd	r25, Z+3	; 0x03
    4d5a:	f7 01       	movw	r30, r14
    4d5c:	93 fd       	sbrc	r25, 3
    4d5e:	85 91       	lpm	r24, Z+
    4d60:	93 ff       	sbrs	r25, 3
    4d62:	81 91       	ld	r24, Z+
    4d64:	7f 01       	movw	r14, r30
    4d66:	88 23       	and	r24, r24
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <vfprintf+0x62>
    4d6a:	ad c1       	rjmp	.+858    	; 0x50c6 <vfprintf+0x3bc>
    4d6c:	85 32       	cpi	r24, 0x25	; 37
    4d6e:	39 f4       	brne	.+14     	; 0x4d7e <vfprintf+0x74>
    4d70:	93 fd       	sbrc	r25, 3
    4d72:	85 91       	lpm	r24, Z+
    4d74:	93 ff       	sbrs	r25, 3
    4d76:	81 91       	ld	r24, Z+
    4d78:	7f 01       	movw	r14, r30
    4d7a:	85 32       	cpi	r24, 0x25	; 37
    4d7c:	21 f4       	brne	.+8      	; 0x4d86 <vfprintf+0x7c>
    4d7e:	b6 01       	movw	r22, r12
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	d6 d1       	rcall	.+940    	; 0x5130 <fputc>
    4d84:	e8 cf       	rjmp	.-48     	; 0x4d56 <vfprintf+0x4c>
    4d86:	91 2c       	mov	r9, r1
    4d88:	21 2c       	mov	r2, r1
    4d8a:	31 2c       	mov	r3, r1
    4d8c:	ff e1       	ldi	r31, 0x1F	; 31
    4d8e:	f3 15       	cp	r31, r3
    4d90:	d8 f0       	brcs	.+54     	; 0x4dc8 <vfprintf+0xbe>
    4d92:	8b 32       	cpi	r24, 0x2B	; 43
    4d94:	79 f0       	breq	.+30     	; 0x4db4 <vfprintf+0xaa>
    4d96:	38 f4       	brcc	.+14     	; 0x4da6 <vfprintf+0x9c>
    4d98:	80 32       	cpi	r24, 0x20	; 32
    4d9a:	79 f0       	breq	.+30     	; 0x4dba <vfprintf+0xb0>
    4d9c:	83 32       	cpi	r24, 0x23	; 35
    4d9e:	a1 f4       	brne	.+40     	; 0x4dc8 <vfprintf+0xbe>
    4da0:	23 2d       	mov	r18, r3
    4da2:	20 61       	ori	r18, 0x10	; 16
    4da4:	1d c0       	rjmp	.+58     	; 0x4de0 <vfprintf+0xd6>
    4da6:	8d 32       	cpi	r24, 0x2D	; 45
    4da8:	61 f0       	breq	.+24     	; 0x4dc2 <vfprintf+0xb8>
    4daa:	80 33       	cpi	r24, 0x30	; 48
    4dac:	69 f4       	brne	.+26     	; 0x4dc8 <vfprintf+0xbe>
    4dae:	23 2d       	mov	r18, r3
    4db0:	21 60       	ori	r18, 0x01	; 1
    4db2:	16 c0       	rjmp	.+44     	; 0x4de0 <vfprintf+0xd6>
    4db4:	83 2d       	mov	r24, r3
    4db6:	82 60       	ori	r24, 0x02	; 2
    4db8:	38 2e       	mov	r3, r24
    4dba:	e3 2d       	mov	r30, r3
    4dbc:	e4 60       	ori	r30, 0x04	; 4
    4dbe:	3e 2e       	mov	r3, r30
    4dc0:	2a c0       	rjmp	.+84     	; 0x4e16 <vfprintf+0x10c>
    4dc2:	f3 2d       	mov	r31, r3
    4dc4:	f8 60       	ori	r31, 0x08	; 8
    4dc6:	1d c0       	rjmp	.+58     	; 0x4e02 <vfprintf+0xf8>
    4dc8:	37 fc       	sbrc	r3, 7
    4dca:	2d c0       	rjmp	.+90     	; 0x4e26 <vfprintf+0x11c>
    4dcc:	20 ed       	ldi	r18, 0xD0	; 208
    4dce:	28 0f       	add	r18, r24
    4dd0:	2a 30       	cpi	r18, 0x0A	; 10
    4dd2:	40 f0       	brcs	.+16     	; 0x4de4 <vfprintf+0xda>
    4dd4:	8e 32       	cpi	r24, 0x2E	; 46
    4dd6:	b9 f4       	brne	.+46     	; 0x4e06 <vfprintf+0xfc>
    4dd8:	36 fc       	sbrc	r3, 6
    4dda:	75 c1       	rjmp	.+746    	; 0x50c6 <vfprintf+0x3bc>
    4ddc:	23 2d       	mov	r18, r3
    4dde:	20 64       	ori	r18, 0x40	; 64
    4de0:	32 2e       	mov	r3, r18
    4de2:	19 c0       	rjmp	.+50     	; 0x4e16 <vfprintf+0x10c>
    4de4:	36 fe       	sbrs	r3, 6
    4de6:	06 c0       	rjmp	.+12     	; 0x4df4 <vfprintf+0xea>
    4de8:	8a e0       	ldi	r24, 0x0A	; 10
    4dea:	98 9e       	mul	r9, r24
    4dec:	20 0d       	add	r18, r0
    4dee:	11 24       	eor	r1, r1
    4df0:	92 2e       	mov	r9, r18
    4df2:	11 c0       	rjmp	.+34     	; 0x4e16 <vfprintf+0x10c>
    4df4:	ea e0       	ldi	r30, 0x0A	; 10
    4df6:	2e 9e       	mul	r2, r30
    4df8:	20 0d       	add	r18, r0
    4dfa:	11 24       	eor	r1, r1
    4dfc:	22 2e       	mov	r2, r18
    4dfe:	f3 2d       	mov	r31, r3
    4e00:	f0 62       	ori	r31, 0x20	; 32
    4e02:	3f 2e       	mov	r3, r31
    4e04:	08 c0       	rjmp	.+16     	; 0x4e16 <vfprintf+0x10c>
    4e06:	8c 36       	cpi	r24, 0x6C	; 108
    4e08:	21 f4       	brne	.+8      	; 0x4e12 <vfprintf+0x108>
    4e0a:	83 2d       	mov	r24, r3
    4e0c:	80 68       	ori	r24, 0x80	; 128
    4e0e:	38 2e       	mov	r3, r24
    4e10:	02 c0       	rjmp	.+4      	; 0x4e16 <vfprintf+0x10c>
    4e12:	88 36       	cpi	r24, 0x68	; 104
    4e14:	41 f4       	brne	.+16     	; 0x4e26 <vfprintf+0x11c>
    4e16:	f7 01       	movw	r30, r14
    4e18:	93 fd       	sbrc	r25, 3
    4e1a:	85 91       	lpm	r24, Z+
    4e1c:	93 ff       	sbrs	r25, 3
    4e1e:	81 91       	ld	r24, Z+
    4e20:	7f 01       	movw	r14, r30
    4e22:	81 11       	cpse	r24, r1
    4e24:	b3 cf       	rjmp	.-154    	; 0x4d8c <vfprintf+0x82>
    4e26:	98 2f       	mov	r25, r24
    4e28:	9f 7d       	andi	r25, 0xDF	; 223
    4e2a:	95 54       	subi	r25, 0x45	; 69
    4e2c:	93 30       	cpi	r25, 0x03	; 3
    4e2e:	28 f4       	brcc	.+10     	; 0x4e3a <vfprintf+0x130>
    4e30:	0c 5f       	subi	r16, 0xFC	; 252
    4e32:	1f 4f       	sbci	r17, 0xFF	; 255
    4e34:	9f e3       	ldi	r25, 0x3F	; 63
    4e36:	99 83       	std	Y+1, r25	; 0x01
    4e38:	0d c0       	rjmp	.+26     	; 0x4e54 <vfprintf+0x14a>
    4e3a:	83 36       	cpi	r24, 0x63	; 99
    4e3c:	31 f0       	breq	.+12     	; 0x4e4a <vfprintf+0x140>
    4e3e:	83 37       	cpi	r24, 0x73	; 115
    4e40:	71 f0       	breq	.+28     	; 0x4e5e <vfprintf+0x154>
    4e42:	83 35       	cpi	r24, 0x53	; 83
    4e44:	09 f0       	breq	.+2      	; 0x4e48 <vfprintf+0x13e>
    4e46:	55 c0       	rjmp	.+170    	; 0x4ef2 <vfprintf+0x1e8>
    4e48:	20 c0       	rjmp	.+64     	; 0x4e8a <vfprintf+0x180>
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	80 81       	ld	r24, Z
    4e4e:	89 83       	std	Y+1, r24	; 0x01
    4e50:	0e 5f       	subi	r16, 0xFE	; 254
    4e52:	1f 4f       	sbci	r17, 0xFF	; 255
    4e54:	88 24       	eor	r8, r8
    4e56:	83 94       	inc	r8
    4e58:	91 2c       	mov	r9, r1
    4e5a:	53 01       	movw	r10, r6
    4e5c:	12 c0       	rjmp	.+36     	; 0x4e82 <vfprintf+0x178>
    4e5e:	28 01       	movw	r4, r16
    4e60:	f2 e0       	ldi	r31, 0x02	; 2
    4e62:	4f 0e       	add	r4, r31
    4e64:	51 1c       	adc	r5, r1
    4e66:	f8 01       	movw	r30, r16
    4e68:	a0 80       	ld	r10, Z
    4e6a:	b1 80       	ldd	r11, Z+1	; 0x01
    4e6c:	36 fe       	sbrs	r3, 6
    4e6e:	03 c0       	rjmp	.+6      	; 0x4e76 <vfprintf+0x16c>
    4e70:	69 2d       	mov	r22, r9
    4e72:	70 e0       	ldi	r23, 0x00	; 0
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <vfprintf+0x170>
    4e76:	6f ef       	ldi	r22, 0xFF	; 255
    4e78:	7f ef       	ldi	r23, 0xFF	; 255
    4e7a:	c5 01       	movw	r24, r10
    4e7c:	4e d1       	rcall	.+668    	; 0x511a <strnlen>
    4e7e:	4c 01       	movw	r8, r24
    4e80:	82 01       	movw	r16, r4
    4e82:	f3 2d       	mov	r31, r3
    4e84:	ff 77       	andi	r31, 0x7F	; 127
    4e86:	3f 2e       	mov	r3, r31
    4e88:	15 c0       	rjmp	.+42     	; 0x4eb4 <vfprintf+0x1aa>
    4e8a:	28 01       	movw	r4, r16
    4e8c:	22 e0       	ldi	r18, 0x02	; 2
    4e8e:	42 0e       	add	r4, r18
    4e90:	51 1c       	adc	r5, r1
    4e92:	f8 01       	movw	r30, r16
    4e94:	a0 80       	ld	r10, Z
    4e96:	b1 80       	ldd	r11, Z+1	; 0x01
    4e98:	36 fe       	sbrs	r3, 6
    4e9a:	03 c0       	rjmp	.+6      	; 0x4ea2 <vfprintf+0x198>
    4e9c:	69 2d       	mov	r22, r9
    4e9e:	70 e0       	ldi	r23, 0x00	; 0
    4ea0:	02 c0       	rjmp	.+4      	; 0x4ea6 <vfprintf+0x19c>
    4ea2:	6f ef       	ldi	r22, 0xFF	; 255
    4ea4:	7f ef       	ldi	r23, 0xFF	; 255
    4ea6:	c5 01       	movw	r24, r10
    4ea8:	2d d1       	rcall	.+602    	; 0x5104 <strnlen_P>
    4eaa:	4c 01       	movw	r8, r24
    4eac:	f3 2d       	mov	r31, r3
    4eae:	f0 68       	ori	r31, 0x80	; 128
    4eb0:	3f 2e       	mov	r3, r31
    4eb2:	82 01       	movw	r16, r4
    4eb4:	33 fc       	sbrc	r3, 3
    4eb6:	19 c0       	rjmp	.+50     	; 0x4eea <vfprintf+0x1e0>
    4eb8:	82 2d       	mov	r24, r2
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	88 16       	cp	r8, r24
    4ebe:	99 06       	cpc	r9, r25
    4ec0:	a0 f4       	brcc	.+40     	; 0x4eea <vfprintf+0x1e0>
    4ec2:	b6 01       	movw	r22, r12
    4ec4:	80 e2       	ldi	r24, 0x20	; 32
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	33 d1       	rcall	.+614    	; 0x5130 <fputc>
    4eca:	2a 94       	dec	r2
    4ecc:	f5 cf       	rjmp	.-22     	; 0x4eb8 <vfprintf+0x1ae>
    4ece:	f5 01       	movw	r30, r10
    4ed0:	37 fc       	sbrc	r3, 7
    4ed2:	85 91       	lpm	r24, Z+
    4ed4:	37 fe       	sbrs	r3, 7
    4ed6:	81 91       	ld	r24, Z+
    4ed8:	5f 01       	movw	r10, r30
    4eda:	b6 01       	movw	r22, r12
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	28 d1       	rcall	.+592    	; 0x5130 <fputc>
    4ee0:	21 10       	cpse	r2, r1
    4ee2:	2a 94       	dec	r2
    4ee4:	21 e0       	ldi	r18, 0x01	; 1
    4ee6:	82 1a       	sub	r8, r18
    4ee8:	91 08       	sbc	r9, r1
    4eea:	81 14       	cp	r8, r1
    4eec:	91 04       	cpc	r9, r1
    4eee:	79 f7       	brne	.-34     	; 0x4ece <vfprintf+0x1c4>
    4ef0:	e1 c0       	rjmp	.+450    	; 0x50b4 <vfprintf+0x3aa>
    4ef2:	84 36       	cpi	r24, 0x64	; 100
    4ef4:	11 f0       	breq	.+4      	; 0x4efa <vfprintf+0x1f0>
    4ef6:	89 36       	cpi	r24, 0x69	; 105
    4ef8:	39 f5       	brne	.+78     	; 0x4f48 <vfprintf+0x23e>
    4efa:	f8 01       	movw	r30, r16
    4efc:	37 fe       	sbrs	r3, 7
    4efe:	07 c0       	rjmp	.+14     	; 0x4f0e <vfprintf+0x204>
    4f00:	60 81       	ld	r22, Z
    4f02:	71 81       	ldd	r23, Z+1	; 0x01
    4f04:	82 81       	ldd	r24, Z+2	; 0x02
    4f06:	93 81       	ldd	r25, Z+3	; 0x03
    4f08:	0c 5f       	subi	r16, 0xFC	; 252
    4f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f0c:	08 c0       	rjmp	.+16     	; 0x4f1e <vfprintf+0x214>
    4f0e:	60 81       	ld	r22, Z
    4f10:	71 81       	ldd	r23, Z+1	; 0x01
    4f12:	07 2e       	mov	r0, r23
    4f14:	00 0c       	add	r0, r0
    4f16:	88 0b       	sbc	r24, r24
    4f18:	99 0b       	sbc	r25, r25
    4f1a:	0e 5f       	subi	r16, 0xFE	; 254
    4f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f1e:	f3 2d       	mov	r31, r3
    4f20:	ff 76       	andi	r31, 0x6F	; 111
    4f22:	3f 2e       	mov	r3, r31
    4f24:	97 ff       	sbrs	r25, 7
    4f26:	09 c0       	rjmp	.+18     	; 0x4f3a <vfprintf+0x230>
    4f28:	90 95       	com	r25
    4f2a:	80 95       	com	r24
    4f2c:	70 95       	com	r23
    4f2e:	61 95       	neg	r22
    4f30:	7f 4f       	sbci	r23, 0xFF	; 255
    4f32:	8f 4f       	sbci	r24, 0xFF	; 255
    4f34:	9f 4f       	sbci	r25, 0xFF	; 255
    4f36:	f0 68       	ori	r31, 0x80	; 128
    4f38:	3f 2e       	mov	r3, r31
    4f3a:	2a e0       	ldi	r18, 0x0A	; 10
    4f3c:	30 e0       	ldi	r19, 0x00	; 0
    4f3e:	a3 01       	movw	r20, r6
    4f40:	33 d1       	rcall	.+614    	; 0x51a8 <__ultoa_invert>
    4f42:	88 2e       	mov	r8, r24
    4f44:	86 18       	sub	r8, r6
    4f46:	44 c0       	rjmp	.+136    	; 0x4fd0 <vfprintf+0x2c6>
    4f48:	85 37       	cpi	r24, 0x75	; 117
    4f4a:	31 f4       	brne	.+12     	; 0x4f58 <vfprintf+0x24e>
    4f4c:	23 2d       	mov	r18, r3
    4f4e:	2f 7e       	andi	r18, 0xEF	; 239
    4f50:	b2 2e       	mov	r11, r18
    4f52:	2a e0       	ldi	r18, 0x0A	; 10
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	25 c0       	rjmp	.+74     	; 0x4fa2 <vfprintf+0x298>
    4f58:	93 2d       	mov	r25, r3
    4f5a:	99 7f       	andi	r25, 0xF9	; 249
    4f5c:	b9 2e       	mov	r11, r25
    4f5e:	8f 36       	cpi	r24, 0x6F	; 111
    4f60:	c1 f0       	breq	.+48     	; 0x4f92 <vfprintf+0x288>
    4f62:	18 f4       	brcc	.+6      	; 0x4f6a <vfprintf+0x260>
    4f64:	88 35       	cpi	r24, 0x58	; 88
    4f66:	79 f0       	breq	.+30     	; 0x4f86 <vfprintf+0x27c>
    4f68:	ae c0       	rjmp	.+348    	; 0x50c6 <vfprintf+0x3bc>
    4f6a:	80 37       	cpi	r24, 0x70	; 112
    4f6c:	19 f0       	breq	.+6      	; 0x4f74 <vfprintf+0x26a>
    4f6e:	88 37       	cpi	r24, 0x78	; 120
    4f70:	21 f0       	breq	.+8      	; 0x4f7a <vfprintf+0x270>
    4f72:	a9 c0       	rjmp	.+338    	; 0x50c6 <vfprintf+0x3bc>
    4f74:	e9 2f       	mov	r30, r25
    4f76:	e0 61       	ori	r30, 0x10	; 16
    4f78:	be 2e       	mov	r11, r30
    4f7a:	b4 fe       	sbrs	r11, 4
    4f7c:	0d c0       	rjmp	.+26     	; 0x4f98 <vfprintf+0x28e>
    4f7e:	fb 2d       	mov	r31, r11
    4f80:	f4 60       	ori	r31, 0x04	; 4
    4f82:	bf 2e       	mov	r11, r31
    4f84:	09 c0       	rjmp	.+18     	; 0x4f98 <vfprintf+0x28e>
    4f86:	34 fe       	sbrs	r3, 4
    4f88:	0a c0       	rjmp	.+20     	; 0x4f9e <vfprintf+0x294>
    4f8a:	29 2f       	mov	r18, r25
    4f8c:	26 60       	ori	r18, 0x06	; 6
    4f8e:	b2 2e       	mov	r11, r18
    4f90:	06 c0       	rjmp	.+12     	; 0x4f9e <vfprintf+0x294>
    4f92:	28 e0       	ldi	r18, 0x08	; 8
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	05 c0       	rjmp	.+10     	; 0x4fa2 <vfprintf+0x298>
    4f98:	20 e1       	ldi	r18, 0x10	; 16
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <vfprintf+0x298>
    4f9e:	20 e1       	ldi	r18, 0x10	; 16
    4fa0:	32 e0       	ldi	r19, 0x02	; 2
    4fa2:	f8 01       	movw	r30, r16
    4fa4:	b7 fe       	sbrs	r11, 7
    4fa6:	07 c0       	rjmp	.+14     	; 0x4fb6 <vfprintf+0x2ac>
    4fa8:	60 81       	ld	r22, Z
    4faa:	71 81       	ldd	r23, Z+1	; 0x01
    4fac:	82 81       	ldd	r24, Z+2	; 0x02
    4fae:	93 81       	ldd	r25, Z+3	; 0x03
    4fb0:	0c 5f       	subi	r16, 0xFC	; 252
    4fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb4:	06 c0       	rjmp	.+12     	; 0x4fc2 <vfprintf+0x2b8>
    4fb6:	60 81       	ld	r22, Z
    4fb8:	71 81       	ldd	r23, Z+1	; 0x01
    4fba:	80 e0       	ldi	r24, 0x00	; 0
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 5f       	subi	r16, 0xFE	; 254
    4fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc2:	a3 01       	movw	r20, r6
    4fc4:	f1 d0       	rcall	.+482    	; 0x51a8 <__ultoa_invert>
    4fc6:	88 2e       	mov	r8, r24
    4fc8:	86 18       	sub	r8, r6
    4fca:	fb 2d       	mov	r31, r11
    4fcc:	ff 77       	andi	r31, 0x7F	; 127
    4fce:	3f 2e       	mov	r3, r31
    4fd0:	36 fe       	sbrs	r3, 6
    4fd2:	0d c0       	rjmp	.+26     	; 0x4fee <vfprintf+0x2e4>
    4fd4:	23 2d       	mov	r18, r3
    4fd6:	2e 7f       	andi	r18, 0xFE	; 254
    4fd8:	a2 2e       	mov	r10, r18
    4fda:	89 14       	cp	r8, r9
    4fdc:	58 f4       	brcc	.+22     	; 0x4ff4 <vfprintf+0x2ea>
    4fde:	34 fe       	sbrs	r3, 4
    4fe0:	0b c0       	rjmp	.+22     	; 0x4ff8 <vfprintf+0x2ee>
    4fe2:	32 fc       	sbrc	r3, 2
    4fe4:	09 c0       	rjmp	.+18     	; 0x4ff8 <vfprintf+0x2ee>
    4fe6:	83 2d       	mov	r24, r3
    4fe8:	8e 7e       	andi	r24, 0xEE	; 238
    4fea:	a8 2e       	mov	r10, r24
    4fec:	05 c0       	rjmp	.+10     	; 0x4ff8 <vfprintf+0x2ee>
    4fee:	b8 2c       	mov	r11, r8
    4ff0:	a3 2c       	mov	r10, r3
    4ff2:	03 c0       	rjmp	.+6      	; 0x4ffa <vfprintf+0x2f0>
    4ff4:	b8 2c       	mov	r11, r8
    4ff6:	01 c0       	rjmp	.+2      	; 0x4ffa <vfprintf+0x2f0>
    4ff8:	b9 2c       	mov	r11, r9
    4ffa:	a4 fe       	sbrs	r10, 4
    4ffc:	0f c0       	rjmp	.+30     	; 0x501c <vfprintf+0x312>
    4ffe:	fe 01       	movw	r30, r28
    5000:	e8 0d       	add	r30, r8
    5002:	f1 1d       	adc	r31, r1
    5004:	80 81       	ld	r24, Z
    5006:	80 33       	cpi	r24, 0x30	; 48
    5008:	21 f4       	brne	.+8      	; 0x5012 <vfprintf+0x308>
    500a:	9a 2d       	mov	r25, r10
    500c:	99 7e       	andi	r25, 0xE9	; 233
    500e:	a9 2e       	mov	r10, r25
    5010:	09 c0       	rjmp	.+18     	; 0x5024 <vfprintf+0x31a>
    5012:	a2 fe       	sbrs	r10, 2
    5014:	06 c0       	rjmp	.+12     	; 0x5022 <vfprintf+0x318>
    5016:	b3 94       	inc	r11
    5018:	b3 94       	inc	r11
    501a:	04 c0       	rjmp	.+8      	; 0x5024 <vfprintf+0x31a>
    501c:	8a 2d       	mov	r24, r10
    501e:	86 78       	andi	r24, 0x86	; 134
    5020:	09 f0       	breq	.+2      	; 0x5024 <vfprintf+0x31a>
    5022:	b3 94       	inc	r11
    5024:	a3 fc       	sbrc	r10, 3
    5026:	10 c0       	rjmp	.+32     	; 0x5048 <vfprintf+0x33e>
    5028:	a0 fe       	sbrs	r10, 0
    502a:	06 c0       	rjmp	.+12     	; 0x5038 <vfprintf+0x32e>
    502c:	b2 14       	cp	r11, r2
    502e:	80 f4       	brcc	.+32     	; 0x5050 <vfprintf+0x346>
    5030:	28 0c       	add	r2, r8
    5032:	92 2c       	mov	r9, r2
    5034:	9b 18       	sub	r9, r11
    5036:	0d c0       	rjmp	.+26     	; 0x5052 <vfprintf+0x348>
    5038:	b2 14       	cp	r11, r2
    503a:	58 f4       	brcc	.+22     	; 0x5052 <vfprintf+0x348>
    503c:	b6 01       	movw	r22, r12
    503e:	80 e2       	ldi	r24, 0x20	; 32
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	76 d0       	rcall	.+236    	; 0x5130 <fputc>
    5044:	b3 94       	inc	r11
    5046:	f8 cf       	rjmp	.-16     	; 0x5038 <vfprintf+0x32e>
    5048:	b2 14       	cp	r11, r2
    504a:	18 f4       	brcc	.+6      	; 0x5052 <vfprintf+0x348>
    504c:	2b 18       	sub	r2, r11
    504e:	02 c0       	rjmp	.+4      	; 0x5054 <vfprintf+0x34a>
    5050:	98 2c       	mov	r9, r8
    5052:	21 2c       	mov	r2, r1
    5054:	a4 fe       	sbrs	r10, 4
    5056:	0f c0       	rjmp	.+30     	; 0x5076 <vfprintf+0x36c>
    5058:	b6 01       	movw	r22, r12
    505a:	80 e3       	ldi	r24, 0x30	; 48
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	68 d0       	rcall	.+208    	; 0x5130 <fputc>
    5060:	a2 fe       	sbrs	r10, 2
    5062:	16 c0       	rjmp	.+44     	; 0x5090 <vfprintf+0x386>
    5064:	a1 fc       	sbrc	r10, 1
    5066:	03 c0       	rjmp	.+6      	; 0x506e <vfprintf+0x364>
    5068:	88 e7       	ldi	r24, 0x78	; 120
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <vfprintf+0x368>
    506e:	88 e5       	ldi	r24, 0x58	; 88
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	b6 01       	movw	r22, r12
    5074:	0c c0       	rjmp	.+24     	; 0x508e <vfprintf+0x384>
    5076:	8a 2d       	mov	r24, r10
    5078:	86 78       	andi	r24, 0x86	; 134
    507a:	51 f0       	breq	.+20     	; 0x5090 <vfprintf+0x386>
    507c:	a1 fe       	sbrs	r10, 1
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <vfprintf+0x37a>
    5080:	8b e2       	ldi	r24, 0x2B	; 43
    5082:	01 c0       	rjmp	.+2      	; 0x5086 <vfprintf+0x37c>
    5084:	80 e2       	ldi	r24, 0x20	; 32
    5086:	a7 fc       	sbrc	r10, 7
    5088:	8d e2       	ldi	r24, 0x2D	; 45
    508a:	b6 01       	movw	r22, r12
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	50 d0       	rcall	.+160    	; 0x5130 <fputc>
    5090:	89 14       	cp	r8, r9
    5092:	30 f4       	brcc	.+12     	; 0x50a0 <vfprintf+0x396>
    5094:	b6 01       	movw	r22, r12
    5096:	80 e3       	ldi	r24, 0x30	; 48
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	4a d0       	rcall	.+148    	; 0x5130 <fputc>
    509c:	9a 94       	dec	r9
    509e:	f8 cf       	rjmp	.-16     	; 0x5090 <vfprintf+0x386>
    50a0:	8a 94       	dec	r8
    50a2:	f3 01       	movw	r30, r6
    50a4:	e8 0d       	add	r30, r8
    50a6:	f1 1d       	adc	r31, r1
    50a8:	80 81       	ld	r24, Z
    50aa:	b6 01       	movw	r22, r12
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	40 d0       	rcall	.+128    	; 0x5130 <fputc>
    50b0:	81 10       	cpse	r8, r1
    50b2:	f6 cf       	rjmp	.-20     	; 0x50a0 <vfprintf+0x396>
    50b4:	22 20       	and	r2, r2
    50b6:	09 f4       	brne	.+2      	; 0x50ba <vfprintf+0x3b0>
    50b8:	4e ce       	rjmp	.-868    	; 0x4d56 <vfprintf+0x4c>
    50ba:	b6 01       	movw	r22, r12
    50bc:	80 e2       	ldi	r24, 0x20	; 32
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	37 d0       	rcall	.+110    	; 0x5130 <fputc>
    50c2:	2a 94       	dec	r2
    50c4:	f7 cf       	rjmp	.-18     	; 0x50b4 <vfprintf+0x3aa>
    50c6:	f6 01       	movw	r30, r12
    50c8:	86 81       	ldd	r24, Z+6	; 0x06
    50ca:	97 81       	ldd	r25, Z+7	; 0x07
    50cc:	02 c0       	rjmp	.+4      	; 0x50d2 <vfprintf+0x3c8>
    50ce:	8f ef       	ldi	r24, 0xFF	; 255
    50d0:	9f ef       	ldi	r25, 0xFF	; 255
    50d2:	2b 96       	adiw	r28, 0x0b	; 11
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	ff 90       	pop	r15
    50e8:	ef 90       	pop	r14
    50ea:	df 90       	pop	r13
    50ec:	cf 90       	pop	r12
    50ee:	bf 90       	pop	r11
    50f0:	af 90       	pop	r10
    50f2:	9f 90       	pop	r9
    50f4:	8f 90       	pop	r8
    50f6:	7f 90       	pop	r7
    50f8:	6f 90       	pop	r6
    50fa:	5f 90       	pop	r5
    50fc:	4f 90       	pop	r4
    50fe:	3f 90       	pop	r3
    5100:	2f 90       	pop	r2
    5102:	08 95       	ret

00005104 <strnlen_P>:
    5104:	fc 01       	movw	r30, r24
    5106:	05 90       	lpm	r0, Z+
    5108:	61 50       	subi	r22, 0x01	; 1
    510a:	70 40       	sbci	r23, 0x00	; 0
    510c:	01 10       	cpse	r0, r1
    510e:	d8 f7       	brcc	.-10     	; 0x5106 <strnlen_P+0x2>
    5110:	80 95       	com	r24
    5112:	90 95       	com	r25
    5114:	8e 0f       	add	r24, r30
    5116:	9f 1f       	adc	r25, r31
    5118:	08 95       	ret

0000511a <strnlen>:
    511a:	fc 01       	movw	r30, r24
    511c:	61 50       	subi	r22, 0x01	; 1
    511e:	70 40       	sbci	r23, 0x00	; 0
    5120:	01 90       	ld	r0, Z+
    5122:	01 10       	cpse	r0, r1
    5124:	d8 f7       	brcc	.-10     	; 0x511c <strnlen+0x2>
    5126:	80 95       	com	r24
    5128:	90 95       	com	r25
    512a:	8e 0f       	add	r24, r30
    512c:	9f 1f       	adc	r25, r31
    512e:	08 95       	ret

00005130 <fputc>:
    5130:	0f 93       	push	r16
    5132:	1f 93       	push	r17
    5134:	cf 93       	push	r28
    5136:	df 93       	push	r29
    5138:	fb 01       	movw	r30, r22
    513a:	23 81       	ldd	r18, Z+3	; 0x03
    513c:	21 fd       	sbrc	r18, 1
    513e:	03 c0       	rjmp	.+6      	; 0x5146 <fputc+0x16>
    5140:	8f ef       	ldi	r24, 0xFF	; 255
    5142:	9f ef       	ldi	r25, 0xFF	; 255
    5144:	2c c0       	rjmp	.+88     	; 0x519e <fputc+0x6e>
    5146:	22 ff       	sbrs	r18, 2
    5148:	16 c0       	rjmp	.+44     	; 0x5176 <fputc+0x46>
    514a:	46 81       	ldd	r20, Z+6	; 0x06
    514c:	57 81       	ldd	r21, Z+7	; 0x07
    514e:	24 81       	ldd	r18, Z+4	; 0x04
    5150:	35 81       	ldd	r19, Z+5	; 0x05
    5152:	42 17       	cp	r20, r18
    5154:	53 07       	cpc	r21, r19
    5156:	44 f4       	brge	.+16     	; 0x5168 <fputc+0x38>
    5158:	a0 81       	ld	r26, Z
    515a:	b1 81       	ldd	r27, Z+1	; 0x01
    515c:	9d 01       	movw	r18, r26
    515e:	2f 5f       	subi	r18, 0xFF	; 255
    5160:	3f 4f       	sbci	r19, 0xFF	; 255
    5162:	31 83       	std	Z+1, r19	; 0x01
    5164:	20 83       	st	Z, r18
    5166:	8c 93       	st	X, r24
    5168:	26 81       	ldd	r18, Z+6	; 0x06
    516a:	37 81       	ldd	r19, Z+7	; 0x07
    516c:	2f 5f       	subi	r18, 0xFF	; 255
    516e:	3f 4f       	sbci	r19, 0xFF	; 255
    5170:	37 83       	std	Z+7, r19	; 0x07
    5172:	26 83       	std	Z+6, r18	; 0x06
    5174:	14 c0       	rjmp	.+40     	; 0x519e <fputc+0x6e>
    5176:	8b 01       	movw	r16, r22
    5178:	ec 01       	movw	r28, r24
    517a:	fb 01       	movw	r30, r22
    517c:	00 84       	ldd	r0, Z+8	; 0x08
    517e:	f1 85       	ldd	r31, Z+9	; 0x09
    5180:	e0 2d       	mov	r30, r0
    5182:	19 95       	eicall
    5184:	89 2b       	or	r24, r25
    5186:	e1 f6       	brne	.-72     	; 0x5140 <fputc+0x10>
    5188:	d8 01       	movw	r26, r16
    518a:	16 96       	adiw	r26, 0x06	; 6
    518c:	8d 91       	ld	r24, X+
    518e:	9c 91       	ld	r25, X
    5190:	17 97       	sbiw	r26, 0x07	; 7
    5192:	01 96       	adiw	r24, 0x01	; 1
    5194:	17 96       	adiw	r26, 0x07	; 7
    5196:	9c 93       	st	X, r25
    5198:	8e 93       	st	-X, r24
    519a:	16 97       	sbiw	r26, 0x06	; 6
    519c:	ce 01       	movw	r24, r28
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	1f 91       	pop	r17
    51a4:	0f 91       	pop	r16
    51a6:	08 95       	ret

000051a8 <__ultoa_invert>:
    51a8:	fa 01       	movw	r30, r20
    51aa:	aa 27       	eor	r26, r26
    51ac:	28 30       	cpi	r18, 0x08	; 8
    51ae:	51 f1       	breq	.+84     	; 0x5204 <__ultoa_invert+0x5c>
    51b0:	20 31       	cpi	r18, 0x10	; 16
    51b2:	81 f1       	breq	.+96     	; 0x5214 <__ultoa_invert+0x6c>
    51b4:	e8 94       	clt
    51b6:	6f 93       	push	r22
    51b8:	6e 7f       	andi	r22, 0xFE	; 254
    51ba:	6e 5f       	subi	r22, 0xFE	; 254
    51bc:	7f 4f       	sbci	r23, 0xFF	; 255
    51be:	8f 4f       	sbci	r24, 0xFF	; 255
    51c0:	9f 4f       	sbci	r25, 0xFF	; 255
    51c2:	af 4f       	sbci	r26, 0xFF	; 255
    51c4:	b1 e0       	ldi	r27, 0x01	; 1
    51c6:	3e d0       	rcall	.+124    	; 0x5244 <__ultoa_invert+0x9c>
    51c8:	b4 e0       	ldi	r27, 0x04	; 4
    51ca:	3c d0       	rcall	.+120    	; 0x5244 <__ultoa_invert+0x9c>
    51cc:	67 0f       	add	r22, r23
    51ce:	78 1f       	adc	r23, r24
    51d0:	89 1f       	adc	r24, r25
    51d2:	9a 1f       	adc	r25, r26
    51d4:	a1 1d       	adc	r26, r1
    51d6:	68 0f       	add	r22, r24
    51d8:	79 1f       	adc	r23, r25
    51da:	8a 1f       	adc	r24, r26
    51dc:	91 1d       	adc	r25, r1
    51de:	a1 1d       	adc	r26, r1
    51e0:	6a 0f       	add	r22, r26
    51e2:	71 1d       	adc	r23, r1
    51e4:	81 1d       	adc	r24, r1
    51e6:	91 1d       	adc	r25, r1
    51e8:	a1 1d       	adc	r26, r1
    51ea:	20 d0       	rcall	.+64     	; 0x522c <__ultoa_invert+0x84>
    51ec:	09 f4       	brne	.+2      	; 0x51f0 <__ultoa_invert+0x48>
    51ee:	68 94       	set
    51f0:	3f 91       	pop	r19
    51f2:	2a e0       	ldi	r18, 0x0A	; 10
    51f4:	26 9f       	mul	r18, r22
    51f6:	11 24       	eor	r1, r1
    51f8:	30 19       	sub	r19, r0
    51fa:	30 5d       	subi	r19, 0xD0	; 208
    51fc:	31 93       	st	Z+, r19
    51fe:	de f6       	brtc	.-74     	; 0x51b6 <__ultoa_invert+0xe>
    5200:	cf 01       	movw	r24, r30
    5202:	08 95       	ret
    5204:	46 2f       	mov	r20, r22
    5206:	47 70       	andi	r20, 0x07	; 7
    5208:	40 5d       	subi	r20, 0xD0	; 208
    520a:	41 93       	st	Z+, r20
    520c:	b3 e0       	ldi	r27, 0x03	; 3
    520e:	0f d0       	rcall	.+30     	; 0x522e <__ultoa_invert+0x86>
    5210:	c9 f7       	brne	.-14     	; 0x5204 <__ultoa_invert+0x5c>
    5212:	f6 cf       	rjmp	.-20     	; 0x5200 <__ultoa_invert+0x58>
    5214:	46 2f       	mov	r20, r22
    5216:	4f 70       	andi	r20, 0x0F	; 15
    5218:	40 5d       	subi	r20, 0xD0	; 208
    521a:	4a 33       	cpi	r20, 0x3A	; 58
    521c:	18 f0       	brcs	.+6      	; 0x5224 <__ultoa_invert+0x7c>
    521e:	49 5d       	subi	r20, 0xD9	; 217
    5220:	31 fd       	sbrc	r19, 1
    5222:	40 52       	subi	r20, 0x20	; 32
    5224:	41 93       	st	Z+, r20
    5226:	02 d0       	rcall	.+4      	; 0x522c <__ultoa_invert+0x84>
    5228:	a9 f7       	brne	.-22     	; 0x5214 <__ultoa_invert+0x6c>
    522a:	ea cf       	rjmp	.-44     	; 0x5200 <__ultoa_invert+0x58>
    522c:	b4 e0       	ldi	r27, 0x04	; 4
    522e:	a6 95       	lsr	r26
    5230:	97 95       	ror	r25
    5232:	87 95       	ror	r24
    5234:	77 95       	ror	r23
    5236:	67 95       	ror	r22
    5238:	ba 95       	dec	r27
    523a:	c9 f7       	brne	.-14     	; 0x522e <__ultoa_invert+0x86>
    523c:	00 97       	sbiw	r24, 0x00	; 0
    523e:	61 05       	cpc	r22, r1
    5240:	71 05       	cpc	r23, r1
    5242:	08 95       	ret
    5244:	9b 01       	movw	r18, r22
    5246:	ac 01       	movw	r20, r24
    5248:	0a 2e       	mov	r0, r26
    524a:	06 94       	lsr	r0
    524c:	57 95       	ror	r21
    524e:	47 95       	ror	r20
    5250:	37 95       	ror	r19
    5252:	27 95       	ror	r18
    5254:	ba 95       	dec	r27
    5256:	c9 f7       	brne	.-14     	; 0x524a <__ultoa_invert+0xa2>
    5258:	62 0f       	add	r22, r18
    525a:	73 1f       	adc	r23, r19
    525c:	84 1f       	adc	r24, r20
    525e:	95 1f       	adc	r25, r21
    5260:	a0 1d       	adc	r26, r0
    5262:	08 95       	ret

00005264 <_exit>:
    5264:	f8 94       	cli

00005266 <__stop_program>:
    5266:	ff cf       	rjmp	.-2      	; 0x5266 <__stop_program>
