
gh-iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000065e  00800200  0000752e  000075c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000752e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d05  0080085e  0080085e  00007c20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  00007cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fbe0  00000000  00000000  000088f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ff1  00000000  00000000  000184d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007cfc  00000000  00000000  0001c4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002d6c  00000000  00000000  000241c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b76  00000000  00000000  00026f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ea20  00000000  00000000  0002baa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  0003a4c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c2       	rjmp	.+1312   	; 0x522 <__ctors_end>
       2:	00 00       	nop
       4:	af c2       	rjmp	.+1374   	; 0x564 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c2       	rjmp	.+1370   	; 0x564 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c2       	rjmp	.+1366   	; 0x564 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c2       	rjmp	.+1362   	; 0x564 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c2       	rjmp	.+1358   	; 0x564 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c2       	rjmp	.+1354   	; 0x564 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c2       	rjmp	.+1350   	; 0x564 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c2       	rjmp	.+1346   	; 0x564 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c2       	rjmp	.+1342   	; 0x564 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c2       	rjmp	.+1338   	; 0x564 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9b c2       	rjmp	.+1334   	; 0x564 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_12>
      34:	97 c2       	rjmp	.+1326   	; 0x564 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c2       	rjmp	.+1322   	; 0x564 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c2       	rjmp	.+1318   	; 0x564 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c2       	rjmp	.+1314   	; 0x564 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c2       	rjmp	.+1310   	; 0x564 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c2       	rjmp	.+1306   	; 0x564 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c2       	rjmp	.+1302   	; 0x564 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c2       	rjmp	.+1298   	; 0x564 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_21>
      58:	85 c2       	rjmp	.+1290   	; 0x564 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c2       	rjmp	.+1286   	; 0x564 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 37 30 	jmp	0x606e	; 0x606e <__vector_24>
      64:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__vector_25>
      68:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__vector_26>
      6c:	7b c2       	rjmp	.+1270   	; 0x564 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c2       	rjmp	.+1266   	; 0x564 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c2       	rjmp	.+1262   	; 0x564 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c2       	rjmp	.+1258   	; 0x564 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c2       	rjmp	.+1254   	; 0x564 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c2       	rjmp	.+1250   	; 0x564 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c2       	rjmp	.+1246   	; 0x564 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c2       	rjmp	.+1242   	; 0x564 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c2       	rjmp	.+1238   	; 0x564 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <__vector_36>
      94:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__vector_37>
      98:	65 c2       	rjmp	.+1226   	; 0x564 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d3 32 	jmp	0x65a6	; 0x65a6 <__vector_39>
      a0:	61 c2       	rjmp	.+1218   	; 0x564 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c2       	rjmp	.+1214   	; 0x564 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c2       	rjmp	.+1210   	; 0x564 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5b c2       	rjmp	.+1206   	; 0x564 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	59 c2       	rjmp	.+1202   	; 0x564 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	57 c2       	rjmp	.+1198   	; 0x564 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	55 c2       	rjmp	.+1194   	; 0x564 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c2       	rjmp	.+1190   	; 0x564 <__bad_interrupt>
      be:	00 00       	nop
      c0:	51 c2       	rjmp	.+1186   	; 0x564 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4f c2       	rjmp	.+1182   	; 0x564 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4d c2       	rjmp	.+1178   	; 0x564 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 44 2d 	jmp	0x5a88	; 0x5a88 <__vector_51>
      d0:	0c 94 96 2d 	jmp	0x5b2c	; 0x5b2c <__vector_52>
      d4:	47 c2       	rjmp	.+1166   	; 0x564 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 da 2d 	jmp	0x5bb4	; 0x5bb4 <__vector_54>
      dc:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__vector_55>
      e0:	41 c2       	rjmp	.+1154   	; 0x564 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 02       	muls	r16, r23
      e6:	07 02       	muls	r16, r23
      e8:	07 02       	muls	r16, r23
      ea:	41 02       	muls	r20, r17
      ec:	49 02       	muls	r20, r25
      ee:	5f 02       	muls	r21, r31
      f0:	07 02       	muls	r16, r23
      f2:	07 02       	muls	r16, r23
      f4:	41 02       	muls	r20, r17
      f6:	49 02       	muls	r20, r25
      f8:	f5 32       	cpi	r31, 0x25	; 37
      fa:	65 33       	cpi	r22, 0x35	; 53
      fc:	65 33       	cpi	r22, 0x35	; 53
      fe:	65 33       	cpi	r22, 0x35	; 53
     100:	65 33       	cpi	r22, 0x35	; 53
     102:	65 33       	cpi	r22, 0x35	; 53
     104:	65 33       	cpi	r22, 0x35	; 53
     106:	65 33       	cpi	r22, 0x35	; 53
     108:	f5 32       	cpi	r31, 0x25	; 37
     10a:	65 33       	cpi	r22, 0x35	; 53
     10c:	65 33       	cpi	r22, 0x35	; 53
     10e:	65 33       	cpi	r22, 0x35	; 53
     110:	65 33       	cpi	r22, 0x35	; 53
     112:	65 33       	cpi	r22, 0x35	; 53
     114:	65 33       	cpi	r22, 0x35	; 53
     116:	65 33       	cpi	r22, 0x35	; 53
     118:	f7 32       	cpi	r31, 0x27	; 39
     11a:	65 33       	cpi	r22, 0x35	; 53
     11c:	65 33       	cpi	r22, 0x35	; 53
     11e:	65 33       	cpi	r22, 0x35	; 53
     120:	65 33       	cpi	r22, 0x35	; 53
     122:	65 33       	cpi	r22, 0x35	; 53
     124:	65 33       	cpi	r22, 0x35	; 53
     126:	65 33       	cpi	r22, 0x35	; 53
     128:	65 33       	cpi	r22, 0x35	; 53
     12a:	65 33       	cpi	r22, 0x35	; 53
     12c:	65 33       	cpi	r22, 0x35	; 53
     12e:	65 33       	cpi	r22, 0x35	; 53
     130:	65 33       	cpi	r22, 0x35	; 53
     132:	65 33       	cpi	r22, 0x35	; 53
     134:	65 33       	cpi	r22, 0x35	; 53
     136:	65 33       	cpi	r22, 0x35	; 53
     138:	f7 32       	cpi	r31, 0x27	; 39
     13a:	65 33       	cpi	r22, 0x35	; 53
     13c:	65 33       	cpi	r22, 0x35	; 53
     13e:	65 33       	cpi	r22, 0x35	; 53
     140:	65 33       	cpi	r22, 0x35	; 53
     142:	65 33       	cpi	r22, 0x35	; 53
     144:	65 33       	cpi	r22, 0x35	; 53
     146:	65 33       	cpi	r22, 0x35	; 53
     148:	65 33       	cpi	r22, 0x35	; 53
     14a:	65 33       	cpi	r22, 0x35	; 53
     14c:	65 33       	cpi	r22, 0x35	; 53
     14e:	65 33       	cpi	r22, 0x35	; 53
     150:	65 33       	cpi	r22, 0x35	; 53
     152:	65 33       	cpi	r22, 0x35	; 53
     154:	65 33       	cpi	r22, 0x35	; 53
     156:	65 33       	cpi	r22, 0x35	; 53
     158:	61 33       	cpi	r22, 0x31	; 49
     15a:	65 33       	cpi	r22, 0x35	; 53
     15c:	65 33       	cpi	r22, 0x35	; 53
     15e:	65 33       	cpi	r22, 0x35	; 53
     160:	65 33       	cpi	r22, 0x35	; 53
     162:	65 33       	cpi	r22, 0x35	; 53
     164:	65 33       	cpi	r22, 0x35	; 53
     166:	65 33       	cpi	r22, 0x35	; 53
     168:	2c 33       	cpi	r18, 0x3C	; 60
     16a:	65 33       	cpi	r22, 0x35	; 53
     16c:	65 33       	cpi	r22, 0x35	; 53
     16e:	65 33       	cpi	r22, 0x35	; 53
     170:	65 33       	cpi	r22, 0x35	; 53
     172:	65 33       	cpi	r22, 0x35	; 53
     174:	65 33       	cpi	r22, 0x35	; 53
     176:	65 33       	cpi	r22, 0x35	; 53
     178:	65 33       	cpi	r22, 0x35	; 53
     17a:	65 33       	cpi	r22, 0x35	; 53
     17c:	65 33       	cpi	r22, 0x35	; 53
     17e:	65 33       	cpi	r22, 0x35	; 53
     180:	65 33       	cpi	r22, 0x35	; 53
     182:	65 33       	cpi	r22, 0x35	; 53
     184:	65 33       	cpi	r22, 0x35	; 53
     186:	65 33       	cpi	r22, 0x35	; 53
     188:	20 33       	cpi	r18, 0x30	; 48
     18a:	65 33       	cpi	r22, 0x35	; 53
     18c:	65 33       	cpi	r22, 0x35	; 53
     18e:	65 33       	cpi	r22, 0x35	; 53
     190:	65 33       	cpi	r22, 0x35	; 53
     192:	65 33       	cpi	r22, 0x35	; 53
     194:	65 33       	cpi	r22, 0x35	; 53
     196:	65 33       	cpi	r22, 0x35	; 53
     198:	44 33       	cpi	r20, 0x34	; 52
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <carbonDioxideSensor_setValue+0x4>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     21c:	0b e5       	ldi	r16, 0x5B	; 91
     21e:	12 e1       	ldi	r17, 0x12	; 18
     220:	0f 2e       	mov	r0, r31
     222:	fb e8       	ldi	r31, 0x8B	; 139
     224:	ef 2e       	mov	r14, r31
     226:	f2 e1       	ldi	r31, 0x12	; 18
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <uxDeletedTasksWaitingCleanUp>
     230:	88 23       	and	r24, r24
     232:	29 f1       	breq	.+74     	; 0x27e <prvIdleTask+0x62>
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	0f 92       	push	r0
     23a:	d8 01       	movw	r26, r16
     23c:	17 96       	adiw	r26, 0x07	; 7
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	18 97       	sbiw	r26, 0x08	; 8
     244:	c0 85       	ldd	r28, Z+8	; 0x08
     246:	d1 85       	ldd	r29, Z+9	; 0x09
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
     250:	80 91 4e 12 	lds	r24, 0x124E	; 0x80124e <uxCurrentNumberOfTasks>
     254:	81 50       	subi	r24, 0x01	; 1
     256:	80 93 4e 12 	sts	0x124E, r24	; 0x80124e <uxCurrentNumberOfTasks>
     25a:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <uxDeletedTasksWaitingCleanUp>
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <uxDeletedTasksWaitingCleanUp>
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	8b 8d       	ldd	r24, Y+27	; 0x1b
     26a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     26c:	0e 94 ca 09 	call	0x1394	; 0x1394 <vPortFree>
     270:	ce 01       	movw	r24, r28
     272:	0e 94 ca 09 	call	0x1394	; 0x1394 <vPortFree>
     276:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <uxDeletedTasksWaitingCleanUp>
     27a:	81 11       	cpse	r24, r1
     27c:	db cf       	rjmp	.-74     	; 0x234 <prvIdleTask+0x18>
     27e:	f7 01       	movw	r30, r14
     280:	80 81       	ld	r24, Z
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	10 f0       	brcs	.+4      	; 0x28a <prvIdleTask+0x6e>
     286:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
     28a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <vApplicationIdleHook>
     28e:	ce cf       	rjmp	.-100    	; 0x22c <prvIdleTask+0x10>

00000290 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	60 97       	sbiw	r28, 0x10	; 16
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	9a 87       	std	Y+10, r25	; 0x0a
     2aa:	89 87       	std	Y+9, r24	; 0x09
     2ac:	81 2c       	mov	r8, r1
     2ae:	91 2c       	mov	r9, r1
     2b0:	a1 2c       	mov	r10, r1
     2b2:	b1 2c       	mov	r11, r1
     2b4:	69 84       	ldd	r6, Y+9	; 0x09
     2b6:	7a 84       	ldd	r7, Y+10	; 0x0a
     2b8:	e0 91 05 13 	lds	r30, 0x1305	; 0x801305 <pxCurrentTimerList>
     2bc:	f0 91 06 13 	lds	r31, 0x1306	; 0x801306 <pxCurrentTimerList+0x1>
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <prvTimerTask+0x38>
     2c6:	13 c1       	rjmp	.+550    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     2c8:	07 80       	ldd	r0, Z+7	; 0x07
     2ca:	f0 85       	ldd	r31, Z+8	; 0x08
     2cc:	e0 2d       	mov	r30, r0
     2ce:	20 80       	ld	r2, Z
     2d0:	31 80       	ldd	r3, Z+1	; 0x01
     2d2:	42 80       	ldd	r4, Z+2	; 0x02
     2d4:	53 80       	ldd	r5, Z+3	; 0x03
     2d6:	0e 94 81 14 	call	0x2902	; 0x2902 <vTaskSuspendAll>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <prvSampleTimeNow>
     2e2:	6b 87       	std	Y+11, r22	; 0x0b
     2e4:	7c 87       	std	Y+12, r23	; 0x0c
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
     2e8:	9e 87       	std	Y+14, r25	; 0x0e
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	81 11       	cpse	r24, r1
     2ee:	67 c0       	rjmp	.+206    	; 0x3be <prvTimerTask+0x12e>
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	ad 85       	ldd	r26, Y+13	; 0x0d
     2f6:	be 85       	ldd	r27, Y+14	; 0x0e
     2f8:	82 15       	cp	r24, r2
     2fa:	93 05       	cpc	r25, r3
     2fc:	a4 05       	cpc	r26, r4
     2fe:	b5 05       	cpc	r27, r5
     300:	08 f4       	brcc	.+2      	; 0x304 <prvTimerTask+0x74>
     302:	45 c0       	rjmp	.+138    	; 0x38e <prvTimerTask+0xfe>
     304:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
     308:	e0 91 05 13 	lds	r30, 0x1305	; 0x801305 <pxCurrentTimerList>
     30c:	f0 91 06 13 	lds	r31, 0x1306	; 0x801306 <pxCurrentTimerList+0x1>
     310:	07 80       	ldd	r0, Z+7	; 0x07
     312:	f0 85       	ldd	r31, Z+8	; 0x08
     314:	e0 2d       	mov	r30, r0
     316:	a0 85       	ldd	r26, Z+8	; 0x08
     318:	b1 85       	ldd	r27, Z+9	; 0x09
     31a:	b8 8b       	std	Y+16, r27	; 0x10
     31c:	af 87       	std	Y+15, r26	; 0x0f
     31e:	cd 01       	movw	r24, r26
     320:	02 96       	adiw	r24, 0x02	; 2
     322:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
     326:	ef 85       	ldd	r30, Y+15	; 0x0f
     328:	f8 89       	ldd	r31, Y+16	; 0x10
     32a:	86 89       	ldd	r24, Z+22	; 0x16
     32c:	82 ff       	sbrs	r24, 2
     32e:	21 c0       	rjmp	.+66     	; 0x372 <prvTimerTask+0xe2>
     330:	46 85       	ldd	r20, Z+14	; 0x0e
     332:	57 85       	ldd	r21, Z+15	; 0x0f
     334:	60 89       	ldd	r22, Z+16	; 0x10
     336:	71 89       	ldd	r23, Z+17	; 0x11
     338:	42 0d       	add	r20, r2
     33a:	53 1d       	adc	r21, r3
     33c:	64 1d       	adc	r22, r4
     33e:	75 1d       	adc	r23, r5
     340:	72 01       	movw	r14, r4
     342:	61 01       	movw	r12, r2
     344:	0b 85       	ldd	r16, Y+11	; 0x0b
     346:	1c 85       	ldd	r17, Y+12	; 0x0c
     348:	2d 85       	ldd	r18, Y+13	; 0x0d
     34a:	3e 85       	ldd	r19, Y+14	; 0x0e
     34c:	cf 01       	movw	r24, r30
     34e:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	99 f0       	breq	.+38     	; 0x37c <prvTimerTask+0xec>
     356:	c8 2c       	mov	r12, r8
     358:	d9 2c       	mov	r13, r9
     35a:	ea 2c       	mov	r14, r10
     35c:	fb 2c       	mov	r15, r11
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a2 01       	movw	r20, r4
     364:	91 01       	movw	r18, r2
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	8f 85       	ldd	r24, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <xTimerGenericCommand>
     370:	05 c0       	rjmp	.+10     	; 0x37c <prvTimerTask+0xec>
     372:	8e 7f       	andi	r24, 0xFE	; 254
     374:	af 85       	ldd	r26, Y+15	; 0x0f
     376:	b8 89       	ldd	r27, Y+16	; 0x10
     378:	56 96       	adiw	r26, 0x16	; 22
     37a:	8c 93       	st	X, r24
     37c:	af 85       	ldd	r26, Y+15	; 0x0f
     37e:	b8 89       	ldd	r27, Y+16	; 0x10
     380:	54 96       	adiw	r26, 0x14	; 20
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	55 97       	sbiw	r26, 0x15	; 21
     388:	cd 01       	movw	r24, r26
     38a:	19 95       	eicall
     38c:	a1 c0       	rjmp	.+322    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	b2 01       	movw	r22, r4
     392:	a1 01       	movw	r20, r2
     394:	8b 85       	ldd	r24, Y+11	; 0x0b
     396:	9c 85       	ldd	r25, Y+12	; 0x0c
     398:	ad 85       	ldd	r26, Y+13	; 0x0d
     39a:	be 85       	ldd	r27, Y+14	; 0x0e
     39c:	48 1b       	sub	r20, r24
     39e:	59 0b       	sbc	r21, r25
     3a0:	6a 0b       	sbc	r22, r26
     3a2:	7b 0b       	sbc	r23, r27
     3a4:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <xTimerQueue>
     3a8:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <xTimerQueue+0x1>
     3ac:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <vQueueWaitForMessageRestricted>
     3b0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
     3b4:	81 11       	cpse	r24, r1
     3b6:	8c c0       	rjmp	.+280    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3b8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
     3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3be:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
     3c2:	86 c0       	rjmp	.+268    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <prvTimerTask+0x13c>
     3ca:	82 c0       	rjmp	.+260    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3cc:	4e 80       	ldd	r4, Y+6	; 0x06
     3ce:	5f 80       	ldd	r5, Y+7	; 0x07
     3d0:	d2 01       	movw	r26, r4
     3d2:	1c 96       	adiw	r26, 0x0c	; 12
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	1d 97       	sbiw	r26, 0x0d	; 13
     3da:	89 2b       	or	r24, r25
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <prvTimerTask+0x156>
     3de:	c2 01       	movw	r24, r4
     3e0:	02 96       	adiw	r24, 0x02	; 2
     3e2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
     3e6:	ce 01       	movw	r24, r28
     3e8:	08 96       	adiw	r24, 0x08	; 8
     3ea:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <prvSampleTimeNow>
     3ee:	8b 01       	movw	r16, r22
     3f0:	9c 01       	movw	r18, r24
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	0e 2e       	mov	r0, r30
     3f6:	00 0c       	add	r0, r0
     3f8:	ff 0b       	sbc	r31, r31
     3fa:	ea 30       	cpi	r30, 0x0A	; 10
     3fc:	f1 05       	cpc	r31, r1
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	67 c0       	rjmp	.+206    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     402:	88 27       	eor	r24, r24
     404:	ee 58       	subi	r30, 0x8E	; 142
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	8f 4f       	sbci	r24, 0xFF	; 255
     40a:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__tablejump2__>
     40e:	f2 01       	movw	r30, r4
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	81 60       	ori	r24, 0x01	; 1
     414:	86 8b       	std	Z+22, r24	; 0x16
     416:	ca 80       	ldd	r12, Y+2	; 0x02
     418:	db 80       	ldd	r13, Y+3	; 0x03
     41a:	ec 80       	ldd	r14, Y+4	; 0x04
     41c:	fd 80       	ldd	r15, Y+5	; 0x05
     41e:	46 85       	ldd	r20, Z+14	; 0x0e
     420:	57 85       	ldd	r21, Z+15	; 0x0f
     422:	60 89       	ldd	r22, Z+16	; 0x10
     424:	71 89       	ldd	r23, Z+17	; 0x11
     426:	4c 0d       	add	r20, r12
     428:	5d 1d       	adc	r21, r13
     42a:	6e 1d       	adc	r22, r14
     42c:	7f 1d       	adc	r23, r15
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <prvInsertTimerInActiveList>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	4b c0       	rjmp	.+150    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43a:	d2 01       	movw	r26, r4
     43c:	54 96       	adiw	r26, 0x14	; 20
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	55 97       	sbiw	r26, 0x15	; 21
     444:	c2 01       	movw	r24, r4
     446:	19 95       	eicall
     448:	f2 01       	movw	r30, r4
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	82 ff       	sbrs	r24, 2
     44e:	40 c0       	rjmp	.+128    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     450:	4a 81       	ldd	r20, Y+2	; 0x02
     452:	5b 81       	ldd	r21, Y+3	; 0x03
     454:	6c 81       	ldd	r22, Y+4	; 0x04
     456:	7d 81       	ldd	r23, Y+5	; 0x05
     458:	86 85       	ldd	r24, Z+14	; 0x0e
     45a:	97 85       	ldd	r25, Z+15	; 0x0f
     45c:	a0 89       	ldd	r26, Z+16	; 0x10
     45e:	b1 89       	ldd	r27, Z+17	; 0x11
     460:	9a 01       	movw	r18, r20
     462:	ab 01       	movw	r20, r22
     464:	28 0f       	add	r18, r24
     466:	39 1f       	adc	r19, r25
     468:	4a 1f       	adc	r20, r26
     46a:	5b 1f       	adc	r21, r27
     46c:	c8 2c       	mov	r12, r8
     46e:	d9 2c       	mov	r13, r9
     470:	ea 2c       	mov	r14, r10
     472:	fb 2c       	mov	r15, r11
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	c2 01       	movw	r24, r4
     47c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <xTimerGenericCommand>
     480:	27 c0       	rjmp	.+78     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     482:	d2 01       	movw	r26, r4
     484:	56 96       	adiw	r26, 0x16	; 22
     486:	8c 91       	ld	r24, X
     488:	56 97       	sbiw	r26, 0x16	; 22
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	8c 93       	st	X, r24
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     492:	f2 01       	movw	r30, r4
     494:	86 89       	ldd	r24, Z+22	; 0x16
     496:	81 60       	ori	r24, 0x01	; 1
     498:	86 8b       	std	Z+22, r24	; 0x16
     49a:	4a 81       	ldd	r20, Y+2	; 0x02
     49c:	5b 81       	ldd	r21, Y+3	; 0x03
     49e:	6c 81       	ldd	r22, Y+4	; 0x04
     4a0:	7d 81       	ldd	r23, Y+5	; 0x05
     4a2:	46 87       	std	Z+14, r20	; 0x0e
     4a4:	57 87       	std	Z+15, r21	; 0x0f
     4a6:	60 8b       	std	Z+16, r22	; 0x10
     4a8:	71 8b       	std	Z+17, r23	; 0x11
     4aa:	40 0f       	add	r20, r16
     4ac:	51 1f       	adc	r21, r17
     4ae:	62 1f       	adc	r22, r18
     4b0:	73 1f       	adc	r23, r19
     4b2:	68 01       	movw	r12, r16
     4b4:	79 01       	movw	r14, r18
     4b6:	c2 01       	movw	r24, r4
     4b8:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <prvInsertTimerInActiveList>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4be:	f2 01       	movw	r30, r4
     4c0:	86 89       	ldd	r24, Z+22	; 0x16
     4c2:	81 fd       	sbrc	r24, 1
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c6:	c2 01       	movw	r24, r4
     4c8:	65 d7       	rcall	.+3786   	; 0x1394 <vPortFree>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	86 8b       	std	Z+22, r24	; 0x16
     4d0:	28 2d       	mov	r18, r8
     4d2:	39 2d       	mov	r19, r9
     4d4:	4a 2d       	mov	r20, r10
     4d6:	5b 2d       	mov	r21, r11
     4d8:	66 2d       	mov	r22, r6
     4da:	77 2d       	mov	r23, r7
     4dc:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <xTimerQueue>
     4e0:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <xTimerQueue+0x1>
     4e4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xQueueReceive>
     4e8:	81 11       	cpse	r24, r1
     4ea:	6c cf       	rjmp	.-296    	; 0x3c4 <prvTimerTask+0x134>
     4ec:	e5 ce       	rjmp	.-566    	; 0x2b8 <prvTimerTask+0x28>
     4ee:	0e 94 81 14 	call	0x2902	; 0x2902 <vTaskSuspendAll>
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <prvSampleTimeNow>
     4fa:	6b 87       	std	Y+11, r22	; 0x0b
     4fc:	7c 87       	std	Y+12, r23	; 0x0c
     4fe:	8d 87       	std	Y+13, r24	; 0x0d
     500:	9e 87       	std	Y+14, r25	; 0x0e
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	81 11       	cpse	r24, r1
     506:	5b cf       	rjmp	.-330    	; 0x3be <prvTimerTask+0x12e>
     508:	e0 91 03 13 	lds	r30, 0x1303	; 0x801303 <pxOverflowTimerList>
     50c:	f0 91 04 13 	lds	r31, 0x1304	; 0x801304 <pxOverflowTimerList+0x1>
     510:	80 81       	ld	r24, Z
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	81 11       	cpse	r24, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	28 2c       	mov	r2, r8
     51a:	39 2c       	mov	r3, r9
     51c:	4a 2c       	mov	r4, r10
     51e:	5b 2c       	mov	r5, r11
     520:	37 cf       	rjmp	.-402    	; 0x390 <prvTimerTask+0x100>

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf ef       	ldi	r28, 0xFF	; 255
     528:	d1 e2       	ldi	r29, 0x21	; 33
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	0c bf       	out	0x3c, r16	; 60

00000532 <__do_copy_data>:
     532:	18 e0       	ldi	r17, 0x08	; 8
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b2 e0       	ldi	r27, 0x02	; 2
     538:	ee e2       	ldi	r30, 0x2E	; 46
     53a:	f5 e7       	ldi	r31, 0x75	; 117
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	0b bf       	out	0x3b, r16	; 59
     540:	02 c0       	rjmp	.+4      	; 0x546 <__do_copy_data+0x14>
     542:	07 90       	elpm	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	ae 35       	cpi	r26, 0x5E	; 94
     548:	b1 07       	cpc	r27, r17
     54a:	d9 f7       	brne	.-10     	; 0x542 <__do_copy_data+0x10>

0000054c <__do_clear_bss>:
     54c:	25 e1       	ldi	r18, 0x15	; 21
     54e:	ae e5       	ldi	r26, 0x5E	; 94
     550:	b8 e0       	ldi	r27, 0x08	; 8
     552:	01 c0       	rjmp	.+2      	; 0x556 <.do_clear_bss_start>

00000554 <.do_clear_bss_loop>:
     554:	1d 92       	st	X+, r1

00000556 <.do_clear_bss_start>:
     556:	a3 36       	cpi	r26, 0x63	; 99
     558:	b2 07       	cpc	r27, r18
     55a:	e1 f7       	brne	.-8      	; 0x554 <.do_clear_bss_loop>
     55c:	0e 94 94 21 	call	0x4328	; 0x4328 <main>
     560:	0c 94 95 3a 	jmp	0x752a	; 0x752a <_exit>

00000564 <__bad_interrupt>:
     564:	4d cd       	rjmp	.-1382   	; 0x0 <__vectors>

00000566 <carbonDioxideController_task>:
	if (rc != MHZ19_OK)
	{
		printf("CO2 sensor does not OK\n");
	}
	rc = mh_z19_takeMeassuring();	
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     566:	0f 2e       	mov	r0, r31
     568:	f8 ee       	ldi	r31, 0xE8	; 232
     56a:	cf 2e       	mov	r12, r31
     56c:	f3 e0       	ldi	r31, 0x03	; 3
     56e:	df 2e       	mov	r13, r31
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
     574:	f0 2d       	mov	r31, r0
	PORTA ^= _BV(PA1);
     576:	c2 e0       	ldi	r28, 0x02	; 2
	//mh_z19_setAutoCalibration(false);
	//mh_z19_injectCallBack(myCo2CallBack(appm));
	for(;;)
	{
	
	if (rc != MHZ19_OK)
     578:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <rc>
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <carbonDioxideController_task+0x22>
	{
		printf("CO2 sensor does not OK\n");
     580:	8f e6       	ldi	r24, 0x6F	; 111
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <puts>
	}
	rc = mh_z19_takeMeassuring();	
     588:	0e 94 90 2a 	call	0x5520	; 0x5520 <mh_z19_takeMeassuring>
     58c:	80 93 44 15 	sts	0x1544, r24	; 0x801544 <rc>
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     590:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <carbon>
     594:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <carbon+0x1>
     598:	5c d2       	rcall	.+1208   	; 0xa52 <carbonDioxideSensor_getReportInterval>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4a ef       	ldi	r20, 0xFA	; 250
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     5a6:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	ae e3       	ldi	r26, 0x3E	; 62
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     5b6:	a7 01       	movw	r20, r14
     5b8:	96 01       	movw	r18, r12
     5ba:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     5be:	ca 01       	movw	r24, r20
     5c0:	b9 01       	movw	r22, r18
     5c2:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
	PORTA ^= _BV(PA1);
     5c6:	82 b1       	in	r24, 0x02	; 2
     5c8:	8c 27       	eor	r24, r28
     5ca:	82 b9       	out	0x02, r24	; 2
	vTaskDelay(pdMS_TO_TICKS(carbonDioxideSensor_getReportInterval(carbon)*500));
     5cc:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <carbon>
     5d0:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <carbon+0x1>
     5d4:	3e d2       	rcall	.+1148   	; 0xa52 <carbonDioxideSensor_getReportInterval>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a ef       	ldi	r20, 0xFA	; 250
     5dc:	53 e4       	ldi	r21, 0x43	; 67
     5de:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     5e2:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	ae e3       	ldi	r26, 0x3E	; 62
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     5f2:	a7 01       	movw	r20, r14
     5f4:	96 01       	movw	r18, r12
     5f6:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     5fa:	ca 01       	movw	r24, r20
     5fc:	b9 01       	movw	r22, r18
     5fe:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
	//
	PORTA ^= _BV(PA1);
     602:	82 b1       	in	r24, 0x02	; 2
     604:	8c 27       	eor	r24, r28
     606:	82 b9       	out	0x02, r24	; 2
	mh_z19_getCo2Ppm(&appm);
     608:	87 e4       	ldi	r24, 0x47	; 71
     60a:	95 e1       	ldi	r25, 0x15	; 21
     60c:	0e 94 bf 2a 	call	0x557e	; 0x557e <mh_z19_getCo2Ppm>
	int u = appm;
	
	//printf("Carbon:%d\n",u);
	carbonDioxideSensor_setValue(carbon,u);
     610:	60 91 47 15 	lds	r22, 0x1547	; 0x801547 <appm>
     614:	70 91 48 15 	lds	r23, 0x1548	; 0x801548 <appm+0x1>
     618:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <carbon>
     61c:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <carbon+0x1>
     620:	f8 d1       	rcall	.+1008   	; 0xa12 <carbonDioxideSensor_setValue>
	myTime_t time = carbonDioxideSensor_getUpdateTime(carbon);
     622:	80 91 49 15 	lds	r24, 0x1549	; 0x801549 <carbon>
     626:	90 91 4a 15 	lds	r25, 0x154A	; 0x80154a <carbon+0x1>
     62a:	58 d2       	rcall	.+1200   	; 0xadc <carbonDioxideSensor_getUpdateTime>
	}
     62c:	a5 cf       	rjmp	.-182    	; 0x578 <carbonDioxideController_task+0x12>

0000062e <CO2SensorController_create>:
}
void CO2SensorController_create(carbonDioxideSensor_t co2)
{
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
		carbon = co2;
     634:	90 93 4a 15 	sts	0x154A, r25	; 0x80154a <carbon+0x1>
     638:	80 93 49 15 	sts	0x1549, r24	; 0x801549 <carbon>
		printf("CO2 sensor started!\n");
     63c:	86 e8       	ldi	r24, 0x86	; 134
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <puts>
		xTaskCreate(carbonDioxideController_task,"COXTask",configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     644:	e1 2c       	mov	r14, r1
     646:	f1 2c       	mov	r15, r1
     648:	01 e0       	ldi	r16, 0x01	; 1
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 ec       	ldi	r20, 0xC0	; 192
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	6a e9       	ldi	r22, 0x9A	; 154
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	83 eb       	ldi	r24, 0xB3	; 179
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCreate>
		//vTaskStartScheduler();
}
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	08 95       	ret

00000666 <sevenSegmentDisplayController_task>:
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
		myTime_t nowTime = myTime_getNowTime();
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
		display_7seg_display(time/100,2);
     666:	0f 2e       	mov	r0, r31
     668:	f4 e6       	ldi	r31, 0x64	; 100
     66a:	8f 2e       	mov	r8, r31
     66c:	f0 2d       	mov	r31, r0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     66e:	0f 2e       	mov	r0, r31
     670:	f8 ee       	ldi	r31, 0xE8	; 232
     672:	cf 2e       	mov	r12, r31
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	df 2e       	mov	r13, r31
     678:	e1 2c       	mov	r14, r1
     67a:	f1 2c       	mov	r15, r1
     67c:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA7);
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     67e:	68 94       	set
     680:	99 24       	eor	r9, r9
     682:	96 f8       	bld	r9, 6
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA6);
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     684:	68 94       	set
     686:	aa 24       	eor	r10, r10
     688:	a5 f8       	bld	r10, 5
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
		PORTA ^= _BV(PA5);
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     68a:	68 94       	set
     68c:	bb 24       	eor	r11, r11
     68e:	b4 f8       	bld	r11, 4
void sevenSegmentDisplayController_task(void *pvParameters)
{
	while(1)
	{
		//Show hh.mm on 7-segment Display
		PORTA ^= _BV(PA7);
     690:	82 b1       	in	r24, 0x02	; 2
     692:	80 58       	subi	r24, 0x80	; 128
     694:	82 b9       	out	0x02, r24	; 2
		myTime_t nowTime = myTime_getNowTime();
     696:	5b d5       	rcall	.+2742   	; 0x114e <myTime_getNowTime>
     698:	ec 01       	movw	r28, r24
		float time = myTime_getHour(nowTime)*100+myTime_getMin(nowTime);
     69a:	5f d5       	rcall	.+2750   	; 0x115a <myTime_getHour>
     69c:	8c 01       	movw	r16, r24
     69e:	ce 01       	movw	r24, r28
     6a0:	60 d5       	rcall	.+2752   	; 0x1162 <myTime_getMin>
     6a2:	80 9e       	mul	r8, r16
		display_7seg_display(time/100,2);
     6a4:	b0 01       	movw	r22, r0
     6a6:	81 9e       	mul	r8, r17
     6a8:	70 0d       	add	r23, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	86 0f       	add	r24, r22
     6ae:	97 1f       	adc	r25, r23
     6b0:	bc 01       	movw	r22, r24
     6b2:	99 0f       	add	r25, r25
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 a3 22 	call	0x4546	; 0x4546 <__floatsisf>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	48 ec       	ldi	r20, 0xC8	; 200
     6c2:	52 e4       	ldi	r21, 0x42	; 66
     6c4:	0e 94 08 22 	call	0x4410	; 0x4410 <__divsf3>
     6c8:	42 e0       	ldi	r20, 0x02	; 2
     6ca:	0e 94 b8 23 	call	0x4770	; 0x4770 <display_7seg_display>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4a e7       	ldi	r20, 0x7A	; 122
     6d4:	54 e4       	ldi	r21, 0x44	; 68
     6d6:	60 91 4d 15 	lds	r22, 0x154D	; 0x80154d <updateTime>
     6da:	70 91 4e 15 	lds	r23, 0x154E	; 0x80154e <updateTime+0x1>
     6de:	80 91 4f 15 	lds	r24, 0x154F	; 0x80154f <updateTime+0x2>
     6e2:	90 91 50 15 	lds	r25, 0x1550	; 0x801550 <updateTime+0x3>
     6e6:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     6ea:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
     6f2:	ae e3       	ldi	r26, 0x3E	; 62
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     6fa:	a7 01       	movw	r20, r14
     6fc:	96 01       	movw	r18, r12
     6fe:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     702:	ca 01       	movw	r24, r20
     704:	b9 01       	movw	r22, r18
     706:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
     70a:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
     70c:	80 58       	subi	r24, 0x80	; 128
     70e:	82 b9       	out	0x02, r24	; 2
     710:	82 b1       	in	r24, 0x02	; 2
		
		//Show temperature on 7-segment Display
		PORTA ^= _BV(PA6);
     712:	89 25       	eor	r24, r9
		temperatureSensor_t temperatureSensor = sensorModelManager_getTemperatureSensor();
     714:	82 b9       	out	0x02, r24	; 2
     716:	70 d4       	rcall	.+2272   	; 0xff8 <sensorModelManager_getTemperatureSensor>
		display_7seg_display(temperatureSensor_getValue(temperatureSensor),2);
     718:	22 d4       	rcall	.+2116   	; 0xf5e <temperatureSensor_getValue>
     71a:	42 e0       	ldi	r20, 0x02	; 2
     71c:	0e 94 b8 23 	call	0x4770	; 0x4770 <display_7seg_display>
     720:	20 e0       	ldi	r18, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	4a e7       	ldi	r20, 0x7A	; 122
     726:	54 e4       	ldi	r21, 0x44	; 68
     728:	60 91 4d 15 	lds	r22, 0x154D	; 0x80154d <updateTime>
     72c:	70 91 4e 15 	lds	r23, 0x154E	; 0x80154e <updateTime+0x1>
     730:	80 91 4f 15 	lds	r24, 0x154F	; 0x80154f <updateTime+0x2>
     734:	90 91 50 15 	lds	r25, 0x1550	; 0x801550 <updateTime+0x3>
     738:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     73c:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	ae e3       	ldi	r26, 0x3E	; 62
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     74c:	a7 01       	movw	r20, r14
     74e:	96 01       	movw	r18, r12
     750:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     754:	ca 01       	movw	r24, r20
     756:	b9 01       	movw	r22, r18
     758:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
     75c:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA6);
     75e:	89 25       	eor	r24, r9
     760:	82 b9       	out	0x02, r24	; 2
		
		//Show humidity on 7-segment Display
		PORTA ^= _BV(PA5);
     762:	82 b1       	in	r24, 0x02	; 2
     764:	8a 25       	eor	r24, r10
     766:	82 b9       	out	0x02, r24	; 2
		humiditySensor_t humiditySensor = sensorModelManager_getHumiditySensor();
     768:	4c d4       	rcall	.+2200   	; 0x1002 <sensorModelManager_getHumiditySensor>
     76a:	fa d2       	rcall	.+1524   	; 0xd60 <humiditySensor_getValue>
		display_7seg_display(humiditySensor_getValue(humiditySensor),2);
     76c:	42 e0       	ldi	r20, 0x02	; 2
     76e:	0e 94 b8 23 	call	0x4770	; 0x4770 <display_7seg_display>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	54 e4       	ldi	r21, 0x44	; 68
     77a:	60 91 4d 15 	lds	r22, 0x154D	; 0x80154d <updateTime>
     77e:	70 91 4e 15 	lds	r23, 0x154E	; 0x80154e <updateTime+0x1>
     782:	80 91 4f 15 	lds	r24, 0x154F	; 0x80154f <updateTime+0x2>
     786:	90 91 50 15 	lds	r25, 0x1550	; 0x801550 <updateTime+0x3>
     78a:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     78e:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
     792:	9b 01       	movw	r18, r22
     794:	ac 01       	movw	r20, r24
     796:	ae e3       	ldi	r26, 0x3E	; 62
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     79e:	a7 01       	movw	r20, r14
     7a0:	96 01       	movw	r18, r12
     7a2:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     7a6:	ca 01       	movw	r24, r20
     7a8:	b9 01       	movw	r22, r18
     7aa:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
     7ae:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA5);
     7b0:	8a 25       	eor	r24, r10
     7b2:	82 b9       	out	0x02, r24	; 2
		
		//Show carbon dioxide on 7-segment Display
		PORTA ^= _BV(PA4);
     7b4:	82 b1       	in	r24, 0x02	; 2
     7b6:	8b 25       	eor	r24, r11
     7b8:	82 b9       	out	0x02, r24	; 2
		carbonDioxideSensor_t carbonDioxideSensor = sensorModelManager_getCarbonDioxideSensor();
     7ba:	28 d4       	rcall	.+2128   	; 0x100c <sensorModelManager_getCarbonDioxideSensor>
     7bc:	70 d1       	rcall	.+736    	; 0xa9e <carbonDioxideSensor_getValue>
		display_7seg_display(carbonDioxideSensor_getValue(carbonDioxideSensor),0);
     7be:	bc 01       	movw	r22, r24
     7c0:	99 0f       	add	r25, r25
     7c2:	88 0b       	sbc	r24, r24
     7c4:	99 0b       	sbc	r25, r25
     7c6:	0e 94 a3 22 	call	0x4546	; 0x4546 <__floatsisf>
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	0e 94 b8 23 	call	0x4770	; 0x4770 <display_7seg_display>
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
		vTaskDelay(pdMS_TO_TICKS(updateTime*1000));
     7d4:	4a e7       	ldi	r20, 0x7A	; 122
     7d6:	54 e4       	ldi	r21, 0x44	; 68
     7d8:	60 91 4d 15 	lds	r22, 0x154D	; 0x80154d <updateTime>
     7dc:	70 91 4e 15 	lds	r23, 0x154E	; 0x80154e <updateTime+0x1>
     7e0:	80 91 4f 15 	lds	r24, 0x154F	; 0x80154f <updateTime+0x2>
     7e4:	90 91 50 15 	lds	r25, 0x1550	; 0x801550 <updateTime+0x3>
     7e8:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     7ec:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
     7f0:	9b 01       	movw	r18, r22
     7f2:	ac 01       	movw	r20, r24
     7f4:	ae e3       	ldi	r26, 0x3E	; 62
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     7fc:	a7 01       	movw	r20, r14
     7fe:	96 01       	movw	r18, r12
     800:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     804:	ca 01       	movw	r24, r20
     806:	b9 01       	movw	r22, r18
     808:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
     80c:	82 b1       	in	r24, 0x02	; 2
     80e:	8b 25       	eor	r24, r11
		PORTA ^= _BV(PA4);
     810:	82 b9       	out	0x02, r24	; 2
     812:	3e cf       	rjmp	.-388    	; 0x690 <sevenSegmentDisplayController_task+0x2a>

00000814 <sevenSegmentDisplayController_create>:
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
	}
}

void sevenSegmentDisplayController_create(float displayUpdateTime)
{
     818:	0f 93       	push	r16
	updateTime = displayUpdateTime;
     81a:	60 93 4d 15 	sts	0x154D, r22	; 0x80154d <updateTime>
     81e:	70 93 4e 15 	sts	0x154E, r23	; 0x80154e <updateTime+0x1>
     822:	80 93 4f 15 	sts	0x154F, r24	; 0x80154f <updateTime+0x2>
     826:	90 93 50 15 	sts	0x1550, r25	; 0x801550 <updateTime+0x3>
	//Init 7-segment Display
	display_7seg_initialise(NULL);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 69 24 	call	0x48d2	; 0x48d2 <display_7seg_initialise>
	display_7seg_powerUp();
     832:	0e 94 5e 24 	call	0x48bc	; 0x48bc <display_7seg_powerUp>
	
	printf("7-segment Display started!\n");
     836:	82 ea       	ldi	r24, 0xA2	; 162
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <puts>
	xTaskCreate(sevenSegmentDisplayController_task, "7-segment Display Task", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     83e:	e1 2c       	mov	r14, r1
     840:	f1 2c       	mov	r15, r1
     842:	01 e0       	ldi	r16, 0x01	; 1
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 ec       	ldi	r20, 0xC0	; 192
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	6d eb       	ldi	r22, 0xBD	; 189
     84e:	72 e0       	ldi	r23, 0x02	; 2
     850:	83 e3       	ldi	r24, 0x33	; 51
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCreate>
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <tempHumSensorController_task>:
	{
		long reportInterval = (temperatureSensor_getReportInterval(temperatureSensor)+humiditySensor_getReportInterval(humiditySensor))*500;
		
		if ( HIH8120_OK != hih8120_wakeup() )
		{
			printf("Temperature sensor didn't wakeup!!!");
     860:	04 ed       	ldi	r16, 0xD4	; 212
     862:	12 e0       	ldi	r17, 0x02	; 2
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(reportInterval/2));
     864:	0f 2e       	mov	r0, r31
     866:	f8 ee       	ldi	r31, 0xE8	; 232
     868:	8f 2e       	mov	r8, r31
     86a:	f3 e0       	ldi	r31, 0x03	; 3
     86c:	9f 2e       	mov	r9, r31
     86e:	a1 2c       	mov	r10, r1
     870:	b1 2c       	mov	r11, r1
     872:	f0 2d       	mov	r31, r0
		PORTA ^= _BV(PA0);
     874:	77 24       	eor	r7, r7
     876:	73 94       	inc	r7
		
		if ( HIH8120_OK !=  hih8120_measure() )
		{
			printf("Temperature sensor didn't measure!!!");
     878:	c8 ef       	ldi	r28, 0xF8	; 248
     87a:	d2 e0       	ldi	r29, 0x02	; 2

void tempHumSensorController_task(void *pvParameters)
{
	for(;;)
	{
		long reportInterval = (temperatureSensor_getReportInterval(temperatureSensor)+humiditySensor_getReportInterval(humiditySensor))*500;
     87c:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <temperatureSensor>
     880:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <temperatureSensor+0x1>
     884:	47 d3       	rcall	.+1678   	; 0xf14 <temperatureSensor_getReportInterval>
     886:	6b 01       	movw	r12, r22
     888:	7c 01       	movw	r14, r24
     88a:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <humiditySensor>
     88e:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <humiditySensor+0x1>
     892:	41 d2       	rcall	.+1154   	; 0xd16 <humiditySensor_getReportInterval>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 a4 21 	call	0x4348	; 0x4348 <__addsf3>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	4a ef       	ldi	r20, 0xFA	; 250
     8a6:	53 e4       	ldi	r21, 0x43	; 67
     8a8:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
     8ac:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__fixsfsi>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
		
		if ( HIH8120_OK != hih8120_wakeup() )
     8b4:	0e 94 5d 25 	call	0x4aba	; 0x4aba <hih8120_wakeup>
     8b8:	88 23       	and	r24, r24
     8ba:	31 f0       	breq	.+12     	; 0x8c8 <tempHumSensorController_task+0x68>
		{
			printf("Temperature sensor didn't wakeup!!!");
     8bc:	1f 93       	push	r17
     8be:	0f 93       	push	r16
     8c0:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
		}
		
		//wait sensor to wakeup
		vTaskDelay(pdMS_TO_TICKS(reportInterval/2));
     8c8:	d7 01       	movw	r26, r14
     8ca:	c6 01       	movw	r24, r12
     8cc:	ff 20       	and	r15, r15
     8ce:	1c f4       	brge	.+6      	; 0x8d6 <tempHumSensorController_task+0x76>
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	a1 1d       	adc	r26, r1
     8d4:	b1 1d       	adc	r27, r1
     8d6:	9c 01       	movw	r18, r24
     8d8:	ad 01       	movw	r20, r26
     8da:	55 95       	asr	r21
     8dc:	47 95       	ror	r20
     8de:	37 95       	ror	r19
     8e0:	27 95       	ror	r18
     8e2:	ae e3       	ldi	r26, 0x3E	; 62
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <__muluhisi3>
     8ea:	a5 01       	movw	r20, r10
     8ec:	94 01       	movw	r18, r8
     8ee:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__udivmodsi4>
     8f2:	69 01       	movw	r12, r18
     8f4:	7a 01       	movw	r14, r20
     8f6:	ca 01       	movw	r24, r20
     8f8:	b9 01       	movw	r22, r18
     8fa:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
		PORTA ^= _BV(PA0);
     8fe:	82 b1       	in	r24, 0x02	; 2
     900:	87 25       	eor	r24, r7
     902:	82 b9       	out	0x02, r24	; 2
		
		if ( HIH8120_OK !=  hih8120_measure() )
     904:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <hih8120_measure>
     908:	88 23       	and	r24, r24
     90a:	31 f0       	breq	.+12     	; 0x918 <tempHumSensorController_task+0xb8>
		{
			printf("Temperature sensor didn't measure!!!");
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
		}
		
		//wait sensor to get the value
		vTaskDelay(pdMS_TO_TICKS(reportInterval/2));
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
		PORTA ^= _BV(PA0);
     920:	82 b1       	in	r24, 0x02	; 2
     922:	87 25       	eor	r24, r7
     924:	82 b9       	out	0x02, r24	; 2
		
		//save new value
		temperature = hih8120_getTemperature();
     926:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <hih8120_getTemperature>
     92a:	ab 01       	movw	r20, r22
     92c:	bc 01       	movw	r22, r24
     92e:	40 93 62 08 	sts	0x0862, r20	; 0x800862 <temperature>
     932:	50 93 63 08 	sts	0x0863, r21	; 0x800863 <temperature+0x1>
     936:	60 93 64 08 	sts	0x0864, r22	; 0x800864 <temperature+0x2>
     93a:	70 93 65 08 	sts	0x0865, r23	; 0x800865 <temperature+0x3>
		temperatureSensor_setValue(temperatureSensor,temperature);
     93e:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <temperatureSensor>
     942:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <temperatureSensor+0x1>
     946:	66 d2       	rcall	.+1228   	; 0xe14 <temperatureSensor_setValue>
		humility = hih8120_getHumidity();
     948:	0e 94 83 25 	call	0x4b06	; 0x4b06 <hih8120_getHumidity>
     94c:	ab 01       	movw	r20, r22
     94e:	bc 01       	movw	r22, r24
     950:	40 93 5e 08 	sts	0x085E, r20	; 0x80085e <__data_end>
     954:	50 93 5f 08 	sts	0x085F, r21	; 0x80085f <__data_end+0x1>
     958:	60 93 60 08 	sts	0x0860, r22	; 0x800860 <__data_end+0x2>
     95c:	70 93 61 08 	sts	0x0861, r23	; 0x800861 <__data_end+0x3>
		humiditySensor_setValue(humiditySensor,humility);
     960:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <humiditySensor>
     964:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <humiditySensor+0x1>
     968:	ae d1       	rcall	.+860    	; 0xcc6 <humiditySensor_setValue>
		//int a = temperatureSensor_getValue(temperatureSensor);
		//int b = temperatureSensor_getValue(temperatureSensor)*10000-a*10000;
		//int c = humiditySensor_getValue(humiditySensor);
		//int d = humiditySensor_getValue(humiditySensor)*10000-c*10000;
		//printf("temperature:%d.%d,humility:%d.%d",a,b,c,d);
	}
     96a:	88 cf       	rjmp	.-240    	; 0x87c <tempHumSensorController_task+0x1c>

0000096c <tempHumSensorController_create>:
}

void tempHumSensorController_create(temperatureSensor_t tempSensor,humiditySensor_t humSensor)
{
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
	temperatureSensor = tempSensor;
     972:	90 93 52 15 	sts	0x1552, r25	; 0x801552 <temperatureSensor+0x1>
     976:	80 93 51 15 	sts	0x1551, r24	; 0x801551 <temperatureSensor>
	humiditySensor = humSensor;
     97a:	70 93 54 15 	sts	0x1554, r23	; 0x801554 <humiditySensor+0x1>
     97e:	60 93 53 15 	sts	0x1553, r22	; 0x801553 <humiditySensor>
	printf("Temperature/humidity sensor started!\n");
     982:	8d e1       	ldi	r24, 0x1D	; 29
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <puts>
	xTaskCreate(tempHumSensorController_task, "TempHumSensorTask", configMINIMAL_STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 1, NULL);
     98a:	e1 2c       	mov	r14, r1
     98c:	f1 2c       	mov	r15, r1
     98e:	01 e0       	ldi	r16, 0x01	; 1
     990:	21 e0       	ldi	r18, 0x01	; 1
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 ec       	ldi	r20, 0xC0	; 192
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	62 e4       	ldi	r22, 0x42	; 66
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	80 e3       	ldi	r24, 0x30	; 48
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCreate>
	//vTaskStartScheduler();
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	08 95       	ret

000009ac <carbonDioxideSensor_create>:
void carbonDioxideSensor_setReportInterval(carbonDioxideSensor_t self,float reportInterval)
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->reportInterval = reportInterval;
	xSemaphoreGive(self->readWriteSemaphore);
}
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	6b 01       	movw	r12, r22
     9bc:	7c 01       	movw	r14, r24
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
     9ca:	ec 01       	movw	r28, r24
     9cc:	89 2b       	or	r24, r25
     9ce:	c1 f0       	breq	.+48     	; 0xa00 <carbonDioxideSensor_create+0x54>
     9d0:	c8 82       	st	Y, r12
     9d2:	d9 82       	std	Y+1, r13	; 0x01
     9d4:	ea 82       	std	Y+2, r14	; 0x02
     9d6:	fb 82       	std	Y+3, r15	; 0x03
     9d8:	1d 82       	std	Y+5, r1	; 0x05
     9da:	1c 82       	std	Y+4, r1	; 0x04
     9dc:	1f 86       	std	Y+15, r1	; 0x0f
     9de:	1e 86       	std	Y+14, r1	; 0x0e
     9e0:	77 d3       	rcall	.+1774   	; 0x10d0 <myTime_create>
     9e2:	99 87       	std	Y+9, r25	; 0x09
     9e4:	88 87       	std	Y+8, r24	; 0x08
     9e6:	43 e0       	ldi	r20, 0x03	; 3
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	b5 d7       	rcall	.+3946   	; 0x1958 <xQueueGenericCreate>
     9ee:	9f 83       	std	Y+7, r25	; 0x07
     9f0:	8e 83       	std	Y+6, r24	; 0x06
     9f2:	00 e0       	ldi	r16, 0x00	; 0
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	a9 01       	movw	r20, r18
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	cd d7       	rcall	.+3994   	; 0x199a <xQueueGenericSend>
     a00:	ce 01       	movw	r24, r28
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	08 95       	ret

00000a12 <carbonDioxideSensor_setValue>:

void carbonDioxideSensor_setValue(carbonDioxideSensor_t self,int value)
{
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
     a1c:	8b 01       	movw	r16, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     a1e:	4f ef       	ldi	r20, 0xFF	; 255
     a20:	5f ef       	ldi	r21, 0xFF	; 255
     a22:	ba 01       	movw	r22, r20
     a24:	8e 81       	ldd	r24, Y+6	; 0x06
     a26:	9f 81       	ldd	r25, Y+7	; 0x07
     a28:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
	self->value = value;
     a2c:	1d 83       	std	Y+5, r17	; 0x05
     a2e:	0c 83       	std	Y+4, r16	; 0x04
	if (self->co2status==1)
	{
		
	}
	myTime_updateToNowTime(self->updateTime);
     a30:	88 85       	ldd	r24, Y+8	; 0x08
     a32:	99 85       	ldd	r25, Y+9	; 0x09
     a34:	65 d3       	rcall	.+1738   	; 0x1100 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     a36:	00 e0       	ldi	r16, 0x00	; 0
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	a9 01       	movw	r20, r18
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	8e 81       	ldd	r24, Y+6	; 0x06
     a44:	9f 81       	ldd	r25, Y+7	; 0x07
     a46:	a9 d7       	rcall	.+3922   	; 0x199a <xQueueGenericSend>
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <carbonDioxideSensor_getReportInterval>:

float carbonDioxideSensor_getReportInterval(carbonDioxideSensor_t self)
{
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     a62:	4f ef       	ldi	r20, 0xFF	; 255
     a64:	5f ef       	ldi	r21, 0xFF	; 255
     a66:	ba 01       	movw	r22, r20
     a68:	8e 81       	ldd	r24, Y+6	; 0x06
     a6a:	9f 81       	ldd	r25, Y+7	; 0x07
     a6c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     a70:	c8 80       	ld	r12, Y
     a72:	d9 80       	ldd	r13, Y+1	; 0x01
     a74:	ea 80       	ldd	r14, Y+2	; 0x02
     a76:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	a9 01       	movw	r20, r18
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	8e 81       	ldd	r24, Y+6	; 0x06
     a86:	9f 81       	ldd	r25, Y+7	; 0x07
     a88:	88 d7       	rcall	.+3856   	; 0x199a <xQueueGenericSend>
	return result;
}
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	08 95       	ret

00000a9e <carbonDioxideSensor_getValue>:

int carbonDioxideSensor_getValue(carbonDioxideSensor_t self)
{
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     aaa:	4f ef       	ldi	r20, 0xFF	; 255
     aac:	5f ef       	ldi	r21, 0xFF	; 255
     aae:	ba 01       	movw	r22, r20
     ab0:	8e 81       	ldd	r24, Y+6	; 0x06
     ab2:	9f 81       	ldd	r25, Y+7	; 0x07
     ab4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
	int result = self->value;
     ab8:	ec 80       	ldd	r14, Y+4	; 0x04
     aba:	fd 80       	ldd	r15, Y+5	; 0x05
	xSemaphoreGive(self->readWriteSemaphore);
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	a9 01       	movw	r20, r18
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	8e 81       	ldd	r24, Y+6	; 0x06
     aca:	9f 81       	ldd	r25, Y+7	; 0x07
     acc:	66 d7       	rcall	.+3788   	; 0x199a <xQueueGenericSend>
	return result;
}
     ace:	c7 01       	movw	r24, r14
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	08 95       	ret

00000adc <carbonDioxideSensor_getUpdateTime>:

myTime_t carbonDioxideSensor_getUpdateTime(carbonDioxideSensor_t self)
{
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     ae8:	4f ef       	ldi	r20, 0xFF	; 255
     aea:	5f ef       	ldi	r21, 0xFF	; 255
     aec:	ba 01       	movw	r22, r20
     aee:	8e 81       	ldd	r24, Y+6	; 0x06
     af0:	9f 81       	ldd	r25, Y+7	; 0x07
     af2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
	myTime_t result = self->updateTime;
     af6:	e8 84       	ldd	r14, Y+8	; 0x08
     af8:	f9 84       	ldd	r15, Y+9	; 0x09
	xSemaphoreGive(self->readWriteSemaphore);
     afa:	00 e0       	ldi	r16, 0x00	; 0
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	a9 01       	movw	r20, r18
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	8e 81       	ldd	r24, Y+6	; 0x06
     b08:	9f 81       	ldd	r25, Y+7	; 0x07
     b0a:	47 d7       	rcall	.+3726   	; 0x199a <xQueueGenericSend>
	return result;
}
     b0c:	c7 01       	movw	r24, r14
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	08 95       	ret

00000b1a <carbonDioxideSensor_setMaxCo2Value>:

void carbonDioxideSensor_setMaxCo2Value(carbonDioxideSensor_t self, int value)
{
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
     b24:	8b 01       	movw	r16, r22
	xSemaphoreTake(self->readWriteSemaphore,portMAX_DELAY);
     b26:	4f ef       	ldi	r20, 0xFF	; 255
     b28:	5f ef       	ldi	r21, 0xFF	; 255
     b2a:	ba 01       	movw	r22, r20
     b2c:	8e 81       	ldd	r24, Y+6	; 0x06
     b2e:	9f 81       	ldd	r25, Y+7	; 0x07
     b30:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
	self->maxco2 = value;
     b34:	1b 87       	std	Y+11, r17	; 0x0b
     b36:	0a 87       	std	Y+10, r16	; 0x0a
	self->co2status = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9f 87       	std	Y+15, r25	; 0x0f
     b3e:	8e 87       	std	Y+14, r24	; 0x0e
	myTime_updateToNowTime(self->updateTime);
     b40:	88 85       	ldd	r24, Y+8	; 0x08
     b42:	99 85       	ldd	r25, Y+9	; 0x09
     b44:	dd d2       	rcall	.+1466   	; 0x1100 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     b46:	00 e0       	ldi	r16, 0x00	; 0
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	a9 01       	movw	r20, r18
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	8e 81       	ldd	r24, Y+6	; 0x06
     b54:	9f 81       	ldd	r25, Y+7	; 0x07
     b56:	21 d7       	rcall	.+3650   	; 0x199a <xQueueGenericSend>
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <carbonDioxideSensor_setMinCo2Value>:

void carbonDioxideSensor_setMinCo2Value(carbonDioxideSensor_t self, int value)
{
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	ec 01       	movw	r28, r24
     b6c:	8b 01       	movw	r16, r22
	xSemaphoreTake(self->readWriteSemaphore,portMAX_DELAY);
     b6e:	4f ef       	ldi	r20, 0xFF	; 255
     b70:	5f ef       	ldi	r21, 0xFF	; 255
     b72:	ba 01       	movw	r22, r20
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
	self->minco2 = value;
     b7c:	1d 87       	std	Y+13, r17	; 0x0d
     b7e:	0c 87       	std	Y+12, r16	; 0x0c
	self->co2status = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	9f 87       	std	Y+15, r25	; 0x0f
     b86:	8e 87       	std	Y+14, r24	; 0x0e
	myTime_updateToNowTime(self->updateTime);
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	99 85       	ldd	r25, Y+9	; 0x09
     b8c:	b9 d2       	rcall	.+1394   	; 0x1100 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     b8e:	00 e0       	ldi	r16, 0x00	; 0
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	a9 01       	movw	r20, r18
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	fd d6       	rcall	.+3578   	; 0x199a <xQueueGenericSend>
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <humiditySensor_create>:
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->humstatus = value;
	myTime_updateToNowTime(self->updateTime);
	xSemaphoreGive(self->readWriteSemaphore);
}
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	6b 01       	movw	r12, r22
     bba:	7c 01       	movw	r14, r24
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	86 e1       	ldi	r24, 0x16	; 22
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
     bc8:	ec 01       	movw	r28, r24
     bca:	89 2b       	or	r24, r25
     bcc:	d1 f0       	breq	.+52     	; 0xc02 <humiditySensor_create+0x58>
     bce:	c8 82       	st	Y, r12
     bd0:	d9 82       	std	Y+1, r13	; 0x01
     bd2:	ea 82       	std	Y+2, r14	; 0x02
     bd4:	fb 82       	std	Y+3, r15	; 0x03
     bd6:	1c 82       	std	Y+4, r1	; 0x04
     bd8:	1d 82       	std	Y+5, r1	; 0x05
     bda:	1e 82       	std	Y+6, r1	; 0x06
     bdc:	1f 82       	std	Y+7, r1	; 0x07
     bde:	1d 8a       	std	Y+21, r1	; 0x15
     be0:	1c 8a       	std	Y+20, r1	; 0x14
     be2:	76 d2       	rcall	.+1260   	; 0x10d0 <myTime_create>
     be4:	9b 87       	std	Y+11, r25	; 0x0b
     be6:	8a 87       	std	Y+10, r24	; 0x0a
     be8:	43 e0       	ldi	r20, 0x03	; 3
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	b4 d6       	rcall	.+3432   	; 0x1958 <xQueueGenericCreate>
     bf0:	99 87       	std	Y+9, r25	; 0x09
     bf2:	88 87       	std	Y+8, r24	; 0x08
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	a9 01       	movw	r20, r18
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	cc d6       	rcall	.+3480   	; 0x199a <xQueueGenericSend>
     c02:	ce 01       	movw	r24, r28
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	08 95       	ret

00000c14 <humiditySensor_setMaxValue>:
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
     c24:	6a 01       	movw	r12, r20
     c26:	7b 01       	movw	r14, r22
     c28:	4f ef       	ldi	r20, 0xFF	; 255
     c2a:	5f ef       	ldi	r21, 0xFF	; 255
     c2c:	ba 01       	movw	r22, r20
     c2e:	88 85       	ldd	r24, Y+8	; 0x08
     c30:	99 85       	ldd	r25, Y+9	; 0x09
     c32:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <xQueueSemaphoreTake>
     c36:	cc 86       	std	Y+12, r12	; 0x0c
     c38:	dd 86       	std	Y+13, r13	; 0x0d
     c3a:	ee 86       	std	Y+14, r14	; 0x0e
     c3c:	ff 86       	std	Y+15, r15	; 0x0f
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9d 8b       	std	Y+21, r25	; 0x15
     c44:	8c 8b       	std	Y+20, r24	; 0x14
     c46:	8a 85       	ldd	r24, Y+10	; 0x0a
     c48:	9b 85       	ldd	r25, Y+11	; 0x0b
     c4a:	5a d2       	rcall	.+1204   	; 0x1100 <myTime_updateToNowTime>
     c4c:	00 e0       	ldi	r16, 0x00	; 0
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	a9 01       	movw	r20, r18
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	88 85       	ldd	r24, Y+8	; 0x08
     c5a:	99 85       	ldd	r25, Y+9	; 0x09
     c5c:	9e d6       	rcall	.+3388   	; 0x199a <xQueueGenericSend>
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	08 95       	ret

00000c6e <humiditySensor_setMinValue>:
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	ec 01       	movw	r28, r24
     c7e:	6a 01       	movw	r12, r20
     c80:	7b 01       	movw	r14, r22
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	5f ef       	ldi	r21, 0xFF	; 255
     c86:	ba 01       	movw	r22, r20
     c88:	88 85       	ldd	r24, Y+8	; 0x08
     c8a:	99 85       	ldd	r25, Y+9	; 0x09
     c8c:	fd d7       	rcall	.+4090   	; 0x1c88 <xQueueSemaphoreTake>
     c8e:	c8 8a       	std	Y+16, r12	; 0x10
     c90:	d9 8a       	std	Y+17, r13	; 0x11
     c92:	ea 8a       	std	Y+18, r14	; 0x12
     c94:	fb 8a       	std	Y+19, r15	; 0x13
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9d 8b       	std	Y+21, r25	; 0x15
     c9c:	8c 8b       	std	Y+20, r24	; 0x14
     c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ca2:	2e d2       	rcall	.+1116   	; 0x1100 <myTime_updateToNowTime>
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a9 01       	movw	r20, r18
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	88 85       	ldd	r24, Y+8	; 0x08
     cb2:	99 85       	ldd	r25, Y+9	; 0x09
     cb4:	72 d6       	rcall	.+3300   	; 0x199a <xQueueGenericSend>
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	08 95       	ret

00000cc6 <humiditySensor_setValue>:
void humiditySensor_setValue(humiditySensor_t self,float value)
{
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
     cd6:	6a 01       	movw	r12, r20
     cd8:	7b 01       	movw	r14, r22
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     cda:	4f ef       	ldi	r20, 0xFF	; 255
     cdc:	5f ef       	ldi	r21, 0xFF	; 255
     cde:	ba 01       	movw	r22, r20
     ce0:	88 85       	ldd	r24, Y+8	; 0x08
     ce2:	99 85       	ldd	r25, Y+9	; 0x09
     ce4:	d1 d7       	rcall	.+4002   	; 0x1c88 <xQueueSemaphoreTake>
	self->value = value;
     ce6:	cc 82       	std	Y+4, r12	; 0x04
     ce8:	dd 82       	std	Y+5, r13	; 0x05
     cea:	ee 82       	std	Y+6, r14	; 0x06
     cec:	ff 82       	std	Y+7, r15	; 0x07
	if (self->humstatus==1)
	{
		
	}
	myTime_updateToNowTime(self->updateTime);
     cee:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cf2:	06 d2       	rcall	.+1036   	; 0x1100 <myTime_updateToNowTime>
	xSemaphoreGive(self->readWriteSemaphore);
     cf4:	00 e0       	ldi	r16, 0x00	; 0
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	a9 01       	movw	r20, r18
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	88 85       	ldd	r24, Y+8	; 0x08
     d02:	99 85       	ldd	r25, Y+9	; 0x09
     d04:	4a d6       	rcall	.+3220   	; 0x199a <xQueueGenericSend>
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	08 95       	ret

00000d16 <humiditySensor_getReportInterval>:

float humiditySensor_getReportInterval(humiditySensor_t self)
{
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d26:	4f ef       	ldi	r20, 0xFF	; 255
     d28:	5f ef       	ldi	r21, 0xFF	; 255
     d2a:	ba 01       	movw	r22, r20
     d2c:	88 85       	ldd	r24, Y+8	; 0x08
     d2e:	99 85       	ldd	r25, Y+9	; 0x09
     d30:	ab d7       	rcall	.+3926   	; 0x1c88 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     d32:	c8 80       	ld	r12, Y
     d34:	d9 80       	ldd	r13, Y+1	; 0x01
     d36:	ea 80       	ldd	r14, Y+2	; 0x02
     d38:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	a9 01       	movw	r20, r18
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	88 85       	ldd	r24, Y+8	; 0x08
     d48:	99 85       	ldd	r25, Y+9	; 0x09
     d4a:	27 d6       	rcall	.+3150   	; 0x199a <xQueueGenericSend>
	return result;
}
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	08 95       	ret

00000d60 <humiditySensor_getValue>:

float humiditySensor_getValue(humiditySensor_t self)
{
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     d70:	4f ef       	ldi	r20, 0xFF	; 255
     d72:	5f ef       	ldi	r21, 0xFF	; 255
     d74:	ba 01       	movw	r22, r20
     d76:	88 85       	ldd	r24, Y+8	; 0x08
     d78:	99 85       	ldd	r25, Y+9	; 0x09
     d7a:	86 d7       	rcall	.+3852   	; 0x1c88 <xQueueSemaphoreTake>
	float result = self->value;
     d7c:	cc 80       	ldd	r12, Y+4	; 0x04
     d7e:	dd 80       	ldd	r13, Y+5	; 0x05
     d80:	ee 80       	ldd	r14, Y+6	; 0x06
     d82:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     d84:	00 e0       	ldi	r16, 0x00	; 0
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	a9 01       	movw	r20, r18
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	99 85       	ldd	r25, Y+9	; 0x09
     d94:	02 d6       	rcall	.+3076   	; 0x199a <xQueueGenericSend>
	return result;
}
     d96:	c7 01       	movw	r24, r14
     d98:	b6 01       	movw	r22, r12
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	08 95       	ret

00000daa <temperatureSensor_create>:
{
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
	self->tempstatus = value;
	myTime_updateToNowTime(self->updateTime);
	xSemaphoreGive(self->readWriteSemaphore);
}
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	6b 01       	movw	r12, r22
     dba:	7c 01       	movw	r14, r24
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	86 e1       	ldi	r24, 0x16	; 22
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
     dc8:	ec 01       	movw	r28, r24
     dca:	89 2b       	or	r24, r25
     dcc:	d1 f0       	breq	.+52     	; 0xe02 <temperatureSensor_create+0x58>
     dce:	c8 82       	st	Y, r12
     dd0:	d9 82       	std	Y+1, r13	; 0x01
     dd2:	ea 82       	std	Y+2, r14	; 0x02
     dd4:	fb 82       	std	Y+3, r15	; 0x03
     dd6:	1c 82       	std	Y+4, r1	; 0x04
     dd8:	1d 82       	std	Y+5, r1	; 0x05
     dda:	1e 82       	std	Y+6, r1	; 0x06
     ddc:	1f 82       	std	Y+7, r1	; 0x07
     dde:	1d 8a       	std	Y+21, r1	; 0x15
     de0:	1c 8a       	std	Y+20, r1	; 0x14
     de2:	76 d1       	rcall	.+748    	; 0x10d0 <myTime_create>
     de4:	9b 87       	std	Y+11, r25	; 0x0b
     de6:	8a 87       	std	Y+10, r24	; 0x0a
     de8:	43 e0       	ldi	r20, 0x03	; 3
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	b4 d5       	rcall	.+2920   	; 0x1958 <xQueueGenericCreate>
     df0:	99 87       	std	Y+9, r25	; 0x09
     df2:	88 87       	std	Y+8, r24	; 0x08
     df4:	00 e0       	ldi	r16, 0x00	; 0
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	a9 01       	movw	r20, r18
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	cc d5       	rcall	.+2968   	; 0x199a <xQueueGenericSend>
     e02:	ce 01       	movw	r24, r28
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	08 95       	ret

00000e14 <temperatureSensor_setValue>:
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ec 01       	movw	r28, r24
     e24:	6a 01       	movw	r12, r20
     e26:	7b 01       	movw	r14, r22
     e28:	4f ef       	ldi	r20, 0xFF	; 255
     e2a:	5f ef       	ldi	r21, 0xFF	; 255
     e2c:	ba 01       	movw	r22, r20
     e2e:	88 85       	ldd	r24, Y+8	; 0x08
     e30:	99 85       	ldd	r25, Y+9	; 0x09
     e32:	2a d7       	rcall	.+3668   	; 0x1c88 <xQueueSemaphoreTake>
     e34:	cc 82       	std	Y+4, r12	; 0x04
     e36:	dd 82       	std	Y+5, r13	; 0x05
     e38:	ee 82       	std	Y+6, r14	; 0x06
     e3a:	ff 82       	std	Y+7, r15	; 0x07
     e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e40:	5f d1       	rcall	.+702    	; 0x1100 <myTime_updateToNowTime>
     e42:	00 e0       	ldi	r16, 0x00	; 0
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	88 85       	ldd	r24, Y+8	; 0x08
     e50:	99 85       	ldd	r25, Y+9	; 0x09
     e52:	a3 d5       	rcall	.+2886   	; 0x199a <xQueueGenericSend>
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	08 95       	ret

00000e64 <temperatureSensor_setmaxValue>:
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
     e74:	6a 01       	movw	r12, r20
     e76:	7b 01       	movw	r14, r22
     e78:	4f ef       	ldi	r20, 0xFF	; 255
     e7a:	5f ef       	ldi	r21, 0xFF	; 255
     e7c:	ba 01       	movw	r22, r20
     e7e:	88 85       	ldd	r24, Y+8	; 0x08
     e80:	99 85       	ldd	r25, Y+9	; 0x09
     e82:	02 d7       	rcall	.+3588   	; 0x1c88 <xQueueSemaphoreTake>
     e84:	cc 86       	std	Y+12, r12	; 0x0c
     e86:	dd 86       	std	Y+13, r13	; 0x0d
     e88:	ee 86       	std	Y+14, r14	; 0x0e
     e8a:	ff 86       	std	Y+15, r15	; 0x0f
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9d 8b       	std	Y+21, r25	; 0x15
     e92:	8c 8b       	std	Y+20, r24	; 0x14
     e94:	8a 85       	ldd	r24, Y+10	; 0x0a
     e96:	9b 85       	ldd	r25, Y+11	; 0x0b
     e98:	33 d1       	rcall	.+614    	; 0x1100 <myTime_updateToNowTime>
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	88 85       	ldd	r24, Y+8	; 0x08
     ea8:	99 85       	ldd	r25, Y+9	; 0x09
     eaa:	77 d5       	rcall	.+2798   	; 0x199a <xQueueGenericSend>
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	08 95       	ret

00000ebc <temperatureSensor_setminValue>:
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ec 01       	movw	r28, r24
     ecc:	6a 01       	movw	r12, r20
     ece:	7b 01       	movw	r14, r22
     ed0:	4f ef       	ldi	r20, 0xFF	; 255
     ed2:	5f ef       	ldi	r21, 0xFF	; 255
     ed4:	ba 01       	movw	r22, r20
     ed6:	88 85       	ldd	r24, Y+8	; 0x08
     ed8:	99 85       	ldd	r25, Y+9	; 0x09
     eda:	d6 d6       	rcall	.+3500   	; 0x1c88 <xQueueSemaphoreTake>
     edc:	c8 8a       	std	Y+16, r12	; 0x10
     ede:	d9 8a       	std	Y+17, r13	; 0x11
     ee0:	ea 8a       	std	Y+18, r14	; 0x12
     ee2:	fb 8a       	std	Y+19, r15	; 0x13
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9d 8b       	std	Y+21, r25	; 0x15
     eea:	8c 8b       	std	Y+20, r24	; 0x14
     eec:	8a 85       	ldd	r24, Y+10	; 0x0a
     eee:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef0:	07 d1       	rcall	.+526    	; 0x1100 <myTime_updateToNowTime>
     ef2:	00 e0       	ldi	r16, 0x00	; 0
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	a9 01       	movw	r20, r18
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	88 85       	ldd	r24, Y+8	; 0x08
     f00:	99 85       	ldd	r25, Y+9	; 0x09
     f02:	4b d5       	rcall	.+2710   	; 0x199a <xQueueGenericSend>
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <temperatureSensor_getReportInterval>:
float temperatureSensor_getReportInterval(temperatureSensor_t self)
{
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f24:	4f ef       	ldi	r20, 0xFF	; 255
     f26:	5f ef       	ldi	r21, 0xFF	; 255
     f28:	ba 01       	movw	r22, r20
     f2a:	88 85       	ldd	r24, Y+8	; 0x08
     f2c:	99 85       	ldd	r25, Y+9	; 0x09
     f2e:	ac d6       	rcall	.+3416   	; 0x1c88 <xQueueSemaphoreTake>
	float result = self->reportInterval;
     f30:	c8 80       	ld	r12, Y
     f32:	d9 80       	ldd	r13, Y+1	; 0x01
     f34:	ea 80       	ldd	r14, Y+2	; 0x02
     f36:	fb 80       	ldd	r15, Y+3	; 0x03
	xSemaphoreGive(self->readWriteSemaphore);
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	88 85       	ldd	r24, Y+8	; 0x08
     f46:	99 85       	ldd	r25, Y+9	; 0x09
     f48:	28 d5       	rcall	.+2640   	; 0x199a <xQueueGenericSend>
	return result;
}
     f4a:	c7 01       	movw	r24, r14
     f4c:	b6 01       	movw	r22, r12
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	08 95       	ret

00000f5e <temperatureSensor_getValue>:

float temperatureSensor_getValue(temperatureSensor_t self)
{
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
	xSemaphoreTake(self->readWriteSemaphore, portMAX_DELAY);
     f6e:	4f ef       	ldi	r20, 0xFF	; 255
     f70:	5f ef       	ldi	r21, 0xFF	; 255
     f72:	ba 01       	movw	r22, r20
     f74:	88 85       	ldd	r24, Y+8	; 0x08
     f76:	99 85       	ldd	r25, Y+9	; 0x09
     f78:	87 d6       	rcall	.+3342   	; 0x1c88 <xQueueSemaphoreTake>
	float result = self->value;
     f7a:	cc 80       	ldd	r12, Y+4	; 0x04
     f7c:	dd 80       	ldd	r13, Y+5	; 0x05
     f7e:	ee 80       	ldd	r14, Y+6	; 0x06
     f80:	ff 80       	ldd	r15, Y+7	; 0x07
	xSemaphoreGive(self->readWriteSemaphore);
     f82:	00 e0       	ldi	r16, 0x00	; 0
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	88 85       	ldd	r24, Y+8	; 0x08
     f90:	99 85       	ldd	r25, Y+9	; 0x09
     f92:	03 d5       	rcall	.+2566   	; 0x199a <xQueueGenericSend>
	return result;
}
     f94:	c7 01       	movw	r24, r14
     f96:	b6 01       	movw	r22, r12
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <sensorModelManager_create>:
void sensorModelManager_setReportInterval(float reportInterval)
{
	temperatureSensor_setReportInterval(temperatureSensor,reportInterval);
	humiditySensor_setReportInterval(humiditySensor,reportInterval);
	carbonDioxideSensor_setReportInterval(carbonDioxideSensor,reportInterval);
}
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	9f e3       	ldi	r25, 0x3F	; 63
     fb0:	31 dc       	rcall	.-1950   	; 0x814 <sevenSegmentDisplayController_create>
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	9f e3       	ldi	r25, 0x3F	; 63
     fba:	f7 de       	rcall	.-530    	; 0xdaa <temperatureSensor_create>
     fbc:	90 93 52 15 	sts	0x1552, r25	; 0x801552 <temperatureSensor+0x1>
     fc0:	80 93 51 15 	sts	0x1551, r24	; 0x801551 <temperatureSensor>
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	80 e8       	ldi	r24, 0x80	; 128
     fca:	9f e3       	ldi	r25, 0x3F	; 63
     fcc:	ee dd       	rcall	.-1060   	; 0xbaa <humiditySensor_create>
     fce:	90 93 54 15 	sts	0x1554, r25	; 0x801554 <humiditySensor+0x1>
     fd2:	80 93 53 15 	sts	0x1553, r24	; 0x801553 <humiditySensor>
     fd6:	bc 01       	movw	r22, r24
     fd8:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <temperatureSensor>
     fdc:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <temperatureSensor+0x1>
     fe0:	c5 dc       	rcall	.-1654   	; 0x96c <tempHumSensorController_create>
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	80 e8       	ldi	r24, 0x80	; 128
     fe8:	9f e3       	ldi	r25, 0x3F	; 63
     fea:	e0 dc       	rcall	.-1600   	; 0x9ac <carbonDioxideSensor_create>
     fec:	90 93 56 15 	sts	0x1556, r25	; 0x801556 <carbonDioxideSensor+0x1>
     ff0:	80 93 55 15 	sts	0x1555, r24	; 0x801555 <carbonDioxideSensor>
     ff4:	1c cb       	rjmp	.-2504   	; 0x62e <CO2SensorController_create>
     ff6:	08 95       	ret

00000ff8 <sensorModelManager_getTemperatureSensor>:

temperatureSensor_t sensorModelManager_getTemperatureSensor()
{
	return temperatureSensor;
}
     ff8:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <temperatureSensor>
     ffc:	90 91 52 15 	lds	r25, 0x1552	; 0x801552 <temperatureSensor+0x1>
    1000:	08 95       	ret

00001002 <sensorModelManager_getHumiditySensor>:

humiditySensor_t sensorModelManager_getHumiditySensor()
{
	return humiditySensor;
}
    1002:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <humiditySensor>
    1006:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <humiditySensor+0x1>
    100a:	08 95       	ret

0000100c <sensorModelManager_getCarbonDioxideSensor>:

carbonDioxideSensor_t sensorModelManager_getCarbonDioxideSensor()
{
	return carbonDioxideSensor;
}
    100c:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <carbonDioxideSensor>
    1010:	90 91 56 15 	lds	r25, 0x1556	; 0x801556 <carbonDioxideSensor+0x1>
    1014:	08 95       	ret

00001016 <nowTimeClockTask>:
}

int myTime_getDay(myTime_t self)
{
	return self->day;
}
    1016:	6e e3       	ldi	r22, 0x3E	; 62
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
    1022:	e0 91 57 15 	lds	r30, 0x1557	; 0x801557 <nowTime>
    1026:	f0 91 58 15 	lds	r31, 0x1558	; 0x801558 <nowTime+0x1>
    102a:	82 85       	ldd	r24, Z+10	; 0x0a
    102c:	93 85       	ldd	r25, Z+11	; 0x0b
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	93 87       	std	Z+11, r25	; 0x0b
    1032:	82 87       	std	Z+10, r24	; 0x0a
    1034:	cc 97       	sbiw	r24, 0x3c	; 60
    1036:	7c f3       	brlt	.-34     	; 0x1016 <nowTimeClockTask>
    1038:	80 85       	ldd	r24, Z+8	; 0x08
    103a:	91 85       	ldd	r25, Z+9	; 0x09
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	91 87       	std	Z+9, r25	; 0x09
    1040:	80 87       	std	Z+8, r24	; 0x08
    1042:	13 86       	std	Z+11, r1	; 0x0b
    1044:	12 86       	std	Z+10, r1	; 0x0a
    1046:	cc 97       	sbiw	r24, 0x3c	; 60
    1048:	34 f3       	brlt	.-52     	; 0x1016 <nowTimeClockTask>
    104a:	86 81       	ldd	r24, Z+6	; 0x06
    104c:	97 81       	ldd	r25, Z+7	; 0x07
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	97 83       	std	Z+7, r25	; 0x07
    1052:	86 83       	std	Z+6, r24	; 0x06
    1054:	11 86       	std	Z+9, r1	; 0x09
    1056:	10 86       	std	Z+8, r1	; 0x08
    1058:	48 97       	sbiw	r24, 0x18	; 24
    105a:	ec f2       	brlt	.-70     	; 0x1016 <nowTimeClockTask>
    105c:	17 82       	std	Z+7, r1	; 0x07
    105e:	16 82       	std	Z+6, r1	; 0x06
    1060:	da cf       	rjmp	.-76     	; 0x1016 <nowTimeClockTask>

00001062 <mytime_tryCreateNowTime>:
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	80 91 57 15 	lds	r24, 0x1557	; 0x801557 <nowTime>
    106c:	90 91 58 15 	lds	r25, 0x1558	; 0x801558 <nowTime+0x1>
    1070:	89 2b       	or	r24, r25
    1072:	51 f5       	brne	.+84     	; 0x10c8 <mytime_tryCreateNowTime+0x66>
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	8c e0       	ldi	r24, 0x0C	; 12
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
    1080:	fc 01       	movw	r30, r24
    1082:	90 93 58 15 	sts	0x1558, r25	; 0x801558 <nowTime+0x1>
    1086:	80 93 57 15 	sts	0x1557, r24	; 0x801557 <nowTime>
    108a:	89 2b       	or	r24, r25
    108c:	e9 f0       	breq	.+58     	; 0x10c8 <mytime_tryCreateNowTime+0x66>
    108e:	11 82       	std	Z+1, r1	; 0x01
    1090:	10 82       	st	Z, r1
    1092:	13 82       	std	Z+3, r1	; 0x03
    1094:	12 82       	std	Z+2, r1	; 0x02
    1096:	15 82       	std	Z+5, r1	; 0x05
    1098:	14 82       	std	Z+4, r1	; 0x04
    109a:	17 82       	std	Z+7, r1	; 0x07
    109c:	16 82       	std	Z+6, r1	; 0x06
    109e:	11 86       	std	Z+9, r1	; 0x09
    10a0:	10 86       	std	Z+8, r1	; 0x08
    10a2:	13 86       	std	Z+11, r1	; 0x0b
    10a4:	12 86       	std	Z+10, r1	; 0x0a
    10a6:	84 e5       	ldi	r24, 0x54	; 84
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <puts>
    10ae:	e1 2c       	mov	r14, r1
    10b0:	f1 2c       	mov	r15, r1
    10b2:	01 e0       	ldi	r16, 0x01	; 1
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 ec       	ldi	r20, 0xC0	; 192
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	6e e6       	ldi	r22, 0x6E	; 110
    10be:	73 e0       	ldi	r23, 0x03	; 3
    10c0:	8b e0       	ldi	r24, 0x0B	; 11
    10c2:	98 e0       	ldi	r25, 0x08	; 8
    10c4:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCreate>
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	08 95       	ret

000010d0 <myTime_create>:
    10d0:	c8 df       	rcall	.-112    	; 0x1062 <mytime_tryCreateNowTime>
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	8c e0       	ldi	r24, 0x0C	; 12
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
    10de:	fc 01       	movw	r30, r24
    10e0:	89 2b       	or	r24, r25
    10e2:	61 f0       	breq	.+24     	; 0x10fc <myTime_create+0x2c>
    10e4:	11 82       	std	Z+1, r1	; 0x01
    10e6:	10 82       	st	Z, r1
    10e8:	13 82       	std	Z+3, r1	; 0x03
    10ea:	12 82       	std	Z+2, r1	; 0x02
    10ec:	15 82       	std	Z+5, r1	; 0x05
    10ee:	14 82       	std	Z+4, r1	; 0x04
    10f0:	17 82       	std	Z+7, r1	; 0x07
    10f2:	16 82       	std	Z+6, r1	; 0x06
    10f4:	11 86       	std	Z+9, r1	; 0x09
    10f6:	10 86       	std	Z+8, r1	; 0x08
    10f8:	13 86       	std	Z+11, r1	; 0x0b
    10fa:	12 86       	std	Z+10, r1	; 0x0a
    10fc:	cf 01       	movw	r24, r30
    10fe:	08 95       	ret

00001100 <myTime_updateToNowTime>:
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
    1106:	ad df       	rcall	.-166    	; 0x1062 <mytime_tryCreateNowTime>
    1108:	e0 91 57 15 	lds	r30, 0x1557	; 0x801557 <nowTime>
    110c:	f0 91 58 15 	lds	r31, 0x1558	; 0x801558 <nowTime+0x1>
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	99 83       	std	Y+1, r25	; 0x01
    1116:	88 83       	st	Y, r24
    1118:	e0 91 57 15 	lds	r30, 0x1557	; 0x801557 <nowTime>
    111c:	f0 91 58 15 	lds	r31, 0x1558	; 0x801558 <nowTime+0x1>
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	9b 83       	std	Y+3, r25	; 0x03
    1126:	8a 83       	std	Y+2, r24	; 0x02
    1128:	84 81       	ldd	r24, Z+4	; 0x04
    112a:	95 81       	ldd	r25, Z+5	; 0x05
    112c:	9d 83       	std	Y+5, r25	; 0x05
    112e:	8c 83       	std	Y+4, r24	; 0x04
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	97 81       	ldd	r25, Z+7	; 0x07
    1134:	9f 83       	std	Y+7, r25	; 0x07
    1136:	8e 83       	std	Y+6, r24	; 0x06
    1138:	80 85       	ldd	r24, Z+8	; 0x08
    113a:	91 85       	ldd	r25, Z+9	; 0x09
    113c:	99 87       	std	Y+9, r25	; 0x09
    113e:	88 87       	std	Y+8, r24	; 0x08
    1140:	82 85       	ldd	r24, Z+10	; 0x0a
    1142:	93 85       	ldd	r25, Z+11	; 0x0b
    1144:	9b 87       	std	Y+11, r25	; 0x0b
    1146:	8a 87       	std	Y+10, r24	; 0x0a
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <myTime_getNowTime>:
    114e:	89 df       	rcall	.-238    	; 0x1062 <mytime_tryCreateNowTime>
    1150:	80 91 57 15 	lds	r24, 0x1557	; 0x801557 <nowTime>
    1154:	90 91 58 15 	lds	r25, 0x1558	; 0x801558 <nowTime+0x1>
    1158:	08 95       	ret

0000115a <myTime_getHour>:

int myTime_getHour(myTime_t self)
{
	return self->hour;
}
    115a:	fc 01       	movw	r30, r24
    115c:	86 81       	ldd	r24, Z+6	; 0x06
    115e:	97 81       	ldd	r25, Z+7	; 0x07
    1160:	08 95       	ret

00001162 <myTime_getMin>:

int myTime_getMin(myTime_t self)
{
	return self->min;
}
    1162:	fc 01       	movw	r30, r24
    1164:	80 85       	ldd	r24, Z+8	; 0x08
    1166:	91 85       	ldd	r25, Z+9	; 0x09
    1168:	08 95       	ret

0000116a <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1170:	e2 e7       	ldi	r30, 0x72	; 114
    1172:	f8 e0       	ldi	r31, 0x08	; 8
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <prvInsertBlockIntoFreeList+0xe>
    1176:	f9 01       	movw	r30, r18
    1178:	20 81       	ld	r18, Z
    117a:	31 81       	ldd	r19, Z+1	; 0x01
    117c:	2a 17       	cp	r18, r26
    117e:	3b 07       	cpc	r19, r27
    1180:	d0 f3       	brcs	.-12     	; 0x1176 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	af 01       	movw	r20, r30
    1188:	48 0f       	add	r20, r24
    118a:	59 1f       	adc	r21, r25
    118c:	a4 17       	cp	r26, r20
    118e:	b5 07       	cpc	r27, r21
    1190:	49 f4       	brne	.+18     	; 0x11a4 <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1192:	12 96       	adiw	r26, 0x02	; 2
    1194:	4d 91       	ld	r20, X+
    1196:	5c 91       	ld	r21, X
    1198:	13 97       	sbiw	r26, 0x03	; 3
    119a:	84 0f       	add	r24, r20
    119c:	95 1f       	adc	r25, r21
    119e:	93 83       	std	Z+3, r25	; 0x03
    11a0:	82 83       	std	Z+2, r24	; 0x02
    11a2:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11a4:	12 96       	adiw	r26, 0x02	; 2
    11a6:	8d 91       	ld	r24, X+
    11a8:	9c 91       	ld	r25, X
    11aa:	13 97       	sbiw	r26, 0x03	; 3
    11ac:	ed 01       	movw	r28, r26
    11ae:	c8 0f       	add	r28, r24
    11b0:	d9 1f       	adc	r29, r25
    11b2:	2c 17       	cp	r18, r28
    11b4:	3d 07       	cpc	r19, r29
    11b6:	d9 f4       	brne	.+54     	; 0x11ee <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    11b8:	20 91 70 08 	lds	r18, 0x0870	; 0x800870 <pxEnd>
    11bc:	30 91 71 08 	lds	r19, 0x0871	; 0x800871 <pxEnd+0x1>
    11c0:	c2 17       	cp	r28, r18
    11c2:	d3 07       	cpc	r29, r19
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11c6:	2a 81       	ldd	r18, Y+2	; 0x02
    11c8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	13 96       	adiw	r26, 0x03	; 3
    11d0:	9c 93       	st	X, r25
    11d2:	8e 93       	st	-X, r24
    11d4:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11d6:	c0 81       	ld	r28, Z
    11d8:	d1 81       	ldd	r29, Z+1	; 0x01
    11da:	88 81       	ld	r24, Y
    11dc:	99 81       	ldd	r25, Y+1	; 0x01
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	9c 93       	st	X, r25
    11e2:	8e 93       	st	-X, r24
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	dc 93       	st	X, r29
    11ea:	ce 93       	st	-X, r28
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	3c 93       	st	X, r19
    11f2:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    11f4:	ae 17       	cp	r26, r30
    11f6:	bf 07       	cpc	r27, r31
    11f8:	11 f0       	breq	.+4      	; 0x11fe <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11fa:	b1 83       	std	Z+1, r27	; 0x01
    11fc:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    1216:	0e 94 81 14 	call	0x2902	; 0x2902 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    121a:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <pxEnd>
    121e:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <pxEnd+0x1>
    1222:	89 2b       	or	r24, r25
    1224:	41 f5       	brne	.+80     	; 0x1276 <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1226:	e2 e7       	ldi	r30, 0x72	; 114
    1228:	f8 e0       	ldi	r31, 0x08	; 8
    122a:	a6 e7       	ldi	r26, 0x76	; 118
    122c:	b8 e0       	ldi	r27, 0x08	; 8
    122e:	b1 83       	std	Z+1, r27	; 0x01
    1230:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1232:	13 82       	std	Z+3, r1	; 0x03
    1234:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1236:	e6 e3       	ldi	r30, 0x36	; 54
    1238:	f2 e1       	ldi	r31, 0x12	; 18
    123a:	f0 93 71 08 	sts	0x0871, r31	; 0x800871 <pxEnd+0x1>
    123e:	e0 93 70 08 	sts	0x0870, r30	; 0x800870 <pxEnd>
    pxEnd->xBlockSize = 0;
    1242:	13 82       	std	Z+3, r1	; 0x03
    1244:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    1246:	11 82       	std	Z+1, r1	; 0x01
    1248:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    124a:	80 ec       	ldi	r24, 0xC0	; 192
    124c:	99 e0       	ldi	r25, 0x09	; 9
    124e:	13 96       	adiw	r26, 0x03	; 3
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
    1254:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1256:	ed 93       	st	X+, r30
    1258:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    125a:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <xMinimumEverFreeBytesRemaining+0x1>
    125e:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1262:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <xFreeBytesRemaining+0x1>
    1266:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e8       	ldi	r25, 0x80	; 128
    126e:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <xBlockAllocatedBit+0x1>
    1272:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <xBlockAllocatedBit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1276:	e0 90 66 08 	lds	r14, 0x0866	; 0x800866 <xBlockAllocatedBit>
    127a:	f0 90 67 08 	lds	r15, 0x0867	; 0x800867 <xBlockAllocatedBit+0x1>
    127e:	c7 01       	movw	r24, r14
    1280:	8c 23       	and	r24, r28
    1282:	9d 23       	and	r25, r29
    1284:	89 2b       	or	r24, r25
    1286:	09 f0       	breq	.+2      	; 0x128a <pvPortMalloc+0x86>
    1288:	75 c0       	rjmp	.+234    	; 0x1374 <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    128a:	20 97       	sbiw	r28, 0x00	; 0
    128c:	09 f4       	brne	.+2      	; 0x1290 <pvPortMalloc+0x8c>
    128e:	75 c0       	rjmp	.+234    	; 0x137a <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1290:	9e 01       	movw	r18, r28
    1292:	2c 5f       	subi	r18, 0xFC	; 252
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1296:	c2 17       	cp	r28, r18
    1298:	d3 07       	cpc	r29, r19
    129a:	08 f0       	brcs	.+2      	; 0x129e <pvPortMalloc+0x9a>
    129c:	6e c0       	rjmp	.+220    	; 0x137a <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <pvPortMalloc+0xa2>
    12a4:	67 c0       	rjmp	.+206    	; 0x1374 <pvPortMalloc+0x170>
    12a6:	00 91 6e 08 	lds	r16, 0x086E	; 0x80086e <xFreeBytesRemaining>
    12aa:	10 91 6f 08 	lds	r17, 0x086F	; 0x80086f <xFreeBytesRemaining+0x1>
    12ae:	02 17       	cp	r16, r18
    12b0:	13 07       	cpc	r17, r19
    12b2:	08 f4       	brcc	.+2      	; 0x12b6 <pvPortMalloc+0xb2>
    12b4:	5f c0       	rjmp	.+190    	; 0x1374 <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    12b6:	c0 91 72 08 	lds	r28, 0x0872	; 0x800872 <xStart>
    12ba:	d0 91 73 08 	lds	r29, 0x0873	; 0x800873 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    12be:	e2 e7       	ldi	r30, 0x72	; 114
    12c0:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <pvPortMalloc+0xc4>
    12c4:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
    12c6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	82 17       	cp	r24, r18
    12ce:	93 07       	cpc	r25, r19
    12d0:	20 f4       	brcc	.+8      	; 0x12da <pvPortMalloc+0xd6>
    12d2:	88 81       	ld	r24, Y
    12d4:	99 81       	ldd	r25, Y+1	; 0x01
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	a9 f7       	brne	.-22     	; 0x12c4 <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    12da:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <pxEnd>
    12de:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <pxEnd+0x1>
    12e2:	c8 17       	cp	r28, r24
    12e4:	d9 07       	cpc	r29, r25
    12e6:	09 f4       	brne	.+2      	; 0x12ea <pvPortMalloc+0xe6>
    12e8:	45 c0       	rjmp	.+138    	; 0x1374 <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    12ea:	c0 80       	ld	r12, Z
    12ec:	d1 80       	ldd	r13, Z+1	; 0x01
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	c8 0e       	add	r12, r24
    12f2:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    12f4:	88 81       	ld	r24, Y
    12f6:	99 81       	ldd	r25, Y+1	; 0x01
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    12fc:	4a 81       	ldd	r20, Y+2	; 0x02
    12fe:	5b 81       	ldd	r21, Y+3	; 0x03
    1300:	42 1b       	sub	r20, r18
    1302:	53 0b       	sbc	r21, r19
    1304:	49 30       	cpi	r20, 0x09	; 9
    1306:	51 05       	cpc	r21, r1
    1308:	48 f0       	brcs	.+18     	; 0x131c <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    130a:	ce 01       	movw	r24, r28
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1310:	fc 01       	movw	r30, r24
    1312:	53 83       	std	Z+3, r21	; 0x03
    1314:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    1316:	3b 83       	std	Y+3, r19	; 0x03
    1318:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    131a:	27 df       	rcall	.-434    	; 0x116a <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	08 1b       	sub	r16, r24
    1322:	19 0b       	sbc	r17, r25
    1324:	10 93 6f 08 	sts	0x086F, r17	; 0x80086f <xFreeBytesRemaining+0x1>
    1328:	00 93 6e 08 	sts	0x086E, r16	; 0x80086e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    132c:	20 91 6c 08 	lds	r18, 0x086C	; 0x80086c <xMinimumEverFreeBytesRemaining>
    1330:	30 91 6d 08 	lds	r19, 0x086D	; 0x80086d <xMinimumEverFreeBytesRemaining+0x1>
    1334:	02 17       	cp	r16, r18
    1336:	13 07       	cpc	r17, r19
    1338:	20 f4       	brcc	.+8      	; 0x1342 <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    133a:	10 93 6d 08 	sts	0x086D, r17	; 0x80086d <xMinimumEverFreeBytesRemaining+0x1>
    133e:	00 93 6c 08 	sts	0x086C, r16	; 0x80086c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1342:	e8 2a       	or	r14, r24
    1344:	f9 2a       	or	r15, r25
    1346:	fb 82       	std	Y+3, r15	; 0x03
    1348:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    134e:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <xNumberOfSuccessfulAllocations>
    1352:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <xNumberOfSuccessfulAllocations+0x1>
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <xNumberOfSuccessfulAllocations+0x1>
    135c:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1360:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    1364:	c1 14       	cp	r12, r1
    1366:	d1 04       	cpc	r13, r1
    1368:	59 f4       	brne	.+22     	; 0x1380 <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    136a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <vApplicationMallocFailedHook>
    136e:	c1 2c       	mov	r12, r1
    1370:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1374:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
    1378:	f8 cf       	rjmp	.-16     	; 0x136a <pvPortMalloc+0x166>
    137a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
    137e:	f5 cf       	rjmp	.-22     	; 0x136a <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    1380:	c6 01       	movw	r24, r12
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	08 95       	ret

00001394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	99 f1       	breq	.+102    	; 0x1402 <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    139c:	fc 01       	movw	r30, r24
    139e:	34 97       	sbiw	r30, 0x04	; 4
    13a0:	22 81       	ldd	r18, Z+2	; 0x02
    13a2:	33 81       	ldd	r19, Z+3	; 0x03
    13a4:	40 91 66 08 	lds	r20, 0x0866	; 0x800866 <xBlockAllocatedBit>
    13a8:	50 91 67 08 	lds	r21, 0x0867	; 0x800867 <xBlockAllocatedBit+0x1>
    13ac:	b9 01       	movw	r22, r18
    13ae:	64 23       	and	r22, r20
    13b0:	75 23       	and	r23, r21
    13b2:	67 2b       	or	r22, r23
    13b4:	31 f1       	breq	.+76     	; 0x1402 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	67 2b       	or	r22, r23
    13bc:	11 f5       	brne	.+68     	; 0x1402 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13be:	ef 01       	movw	r28, r30
    13c0:	40 95       	com	r20
    13c2:	50 95       	com	r21
    13c4:	24 23       	and	r18, r20
    13c6:	35 23       	and	r19, r21
    13c8:	33 83       	std	Z+3, r19	; 0x03
    13ca:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
    13cc:	0e 94 81 14 	call	0x2902	; 0x2902 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    13d0:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <xFreeBytesRemaining>
    13d4:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <xFreeBytesRemaining+0x1>
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <xFreeBytesRemaining+0x1>
    13e4:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    13e8:	ce 01       	movw	r24, r28
    13ea:	bf de       	rcall	.-642    	; 0x116a <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    13ec:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <xNumberOfSuccessfulFrees>
    13f0:	90 91 69 08 	lds	r25, 0x0869	; 0x800869 <xNumberOfSuccessfulFrees+0x1>
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <xNumberOfSuccessfulFrees+0x1>
    13fa:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    13fe:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1408:	fc 01       	movw	r30, r24
    140a:	03 96       	adiw	r24, 0x03	; 3
    140c:	92 83       	std	Z+2, r25	; 0x02
    140e:	81 83       	std	Z+1, r24	; 0x01
    1410:	4f ef       	ldi	r20, 0xFF	; 255
    1412:	5f ef       	ldi	r21, 0xFF	; 255
    1414:	ba 01       	movw	r22, r20
    1416:	43 83       	std	Z+3, r20	; 0x03
    1418:	54 83       	std	Z+4, r21	; 0x04
    141a:	65 83       	std	Z+5, r22	; 0x05
    141c:	76 83       	std	Z+6, r23	; 0x06
    141e:	90 87       	std	Z+8, r25	; 0x08
    1420:	87 83       	std	Z+7, r24	; 0x07
    1422:	92 87       	std	Z+10, r25	; 0x0a
    1424:	81 87       	std	Z+9, r24	; 0x09
    1426:	10 82       	st	Z, r1
    1428:	08 95       	ret

0000142a <vListInitialiseItem>:
    142a:	fc 01       	movw	r30, r24
    142c:	13 86       	std	Z+11, r1	; 0x0b
    142e:	12 86       	std	Z+10, r1	; 0x0a
    1430:	08 95       	ret

00001432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    143c:	08 81       	ld	r16, Y
    143e:	19 81       	ldd	r17, Y+1	; 0x01
    1440:	2a 81       	ldd	r18, Y+2	; 0x02
    1442:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1444:	0f 3f       	cpi	r16, 0xFF	; 255
    1446:	4f ef       	ldi	r20, 0xFF	; 255
    1448:	14 07       	cpc	r17, r20
    144a:	24 07       	cpc	r18, r20
    144c:	34 07       	cpc	r19, r20
    144e:	21 f4       	brne	.+8      	; 0x1458 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1450:	fc 01       	movw	r30, r24
    1452:	a1 85       	ldd	r26, Z+9	; 0x09
    1454:	b2 85       	ldd	r27, Z+10	; 0x0a
    1456:	11 c0       	rjmp	.+34     	; 0x147a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1458:	dc 01       	movw	r26, r24
    145a:	13 96       	adiw	r26, 0x03	; 3
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <vListInsert+0x2e>
    145e:	df 01       	movw	r26, r30
    1460:	14 96       	adiw	r26, 0x04	; 4
    1462:	ed 91       	ld	r30, X+
    1464:	fc 91       	ld	r31, X
    1466:	15 97       	sbiw	r26, 0x05	; 5
    1468:	40 81       	ld	r20, Z
    146a:	51 81       	ldd	r21, Z+1	; 0x01
    146c:	62 81       	ldd	r22, Z+2	; 0x02
    146e:	73 81       	ldd	r23, Z+3	; 0x03
    1470:	04 17       	cp	r16, r20
    1472:	15 07       	cpc	r17, r21
    1474:	26 07       	cpc	r18, r22
    1476:	37 07       	cpc	r19, r23
    1478:	90 f7       	brcc	.-28     	; 0x145e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    147a:	14 96       	adiw	r26, 0x04	; 4
    147c:	ed 91       	ld	r30, X+
    147e:	fc 91       	ld	r31, X
    1480:	15 97       	sbiw	r26, 0x05	; 5
    1482:	fd 83       	std	Y+5, r31	; 0x05
    1484:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1486:	d7 83       	std	Z+7, r29	; 0x07
    1488:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    148a:	bf 83       	std	Y+7, r27	; 0x07
    148c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    148e:	15 96       	adiw	r26, 0x05	; 5
    1490:	dc 93       	st	X, r29
    1492:	ce 93       	st	-X, r28
    1494:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1496:	9b 87       	std	Y+11, r25	; 0x0b
    1498:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    149a:	fc 01       	movw	r30, r24
    149c:	20 81       	ld	r18, Z
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	20 83       	st	Z, r18
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    14b2:	a2 85       	ldd	r26, Z+10	; 0x0a
    14b4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14b6:	c4 81       	ldd	r28, Z+4	; 0x04
    14b8:	d5 81       	ldd	r29, Z+5	; 0x05
    14ba:	86 81       	ldd	r24, Z+6	; 0x06
    14bc:	97 81       	ldd	r25, Z+7	; 0x07
    14be:	9f 83       	std	Y+7, r25	; 0x07
    14c0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14c2:	c6 81       	ldd	r28, Z+6	; 0x06
    14c4:	d7 81       	ldd	r29, Z+7	; 0x07
    14c6:	84 81       	ldd	r24, Z+4	; 0x04
    14c8:	95 81       	ldd	r25, Z+5	; 0x05
    14ca:	9d 83       	std	Y+5, r25	; 0x05
    14cc:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	8d 91       	ld	r24, X+
    14d2:	9c 91       	ld	r25, X
    14d4:	12 97       	sbiw	r26, 0x02	; 2
    14d6:	e8 17       	cp	r30, r24
    14d8:	f9 07       	cpc	r31, r25
    14da:	31 f4       	brne	.+12     	; 0x14e8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    14dc:	86 81       	ldd	r24, Z+6	; 0x06
    14de:	97 81       	ldd	r25, Z+7	; 0x07
    14e0:	12 96       	adiw	r26, 0x02	; 2
    14e2:	9c 93       	st	X, r25
    14e4:	8e 93       	st	-X, r24
    14e6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    14e8:	13 86       	std	Z+11, r1	; 0x0b
    14ea:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    14ec:	8c 91       	ld	r24, X
    14ee:	81 50       	subi	r24, 0x01	; 1
    14f0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    14f2:	8c 91       	ld	r24, X
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    14fa:	fc 01       	movw	r30, r24
    14fc:	60 83       	st	Z, r22
    14fe:	31 97       	sbiw	r30, 0x01	; 1
    1500:	70 83       	st	Z, r23
    1502:	31 97       	sbiw	r30, 0x01	; 1
    1504:	10 82       	st	Z, r1
    1506:	31 97       	sbiw	r30, 0x01	; 1
    1508:	10 82       	st	Z, r1
    150a:	31 97       	sbiw	r30, 0x01	; 1
    150c:	20 e8       	ldi	r18, 0x80	; 128
    150e:	20 83       	st	Z, r18
    1510:	31 97       	sbiw	r30, 0x01	; 1
    1512:	10 82       	st	Z, r1
    1514:	31 97       	sbiw	r30, 0x01	; 1
    1516:	10 82       	st	Z, r1
    1518:	31 97       	sbiw	r30, 0x01	; 1
    151a:	10 82       	st	Z, r1
    151c:	77 97       	sbiw	r30, 0x17	; 23
    151e:	40 83       	st	Z, r20
    1520:	31 97       	sbiw	r30, 0x01	; 1
    1522:	50 83       	st	Z, r21
    1524:	86 97       	sbiw	r24, 0x26	; 38
    1526:	08 95       	ret

00001528 <xPortStartScheduler>:
    1528:	a8 95       	wdr
    152a:	90 ec       	ldi	r25, 0xC0	; 192
    152c:	88 e1       	ldi	r24, 0x18	; 24
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	a8 95       	wdr
    1534:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    153e:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    1542:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    1546:	cd 91       	ld	r28, X+
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	dd 91       	ld	r29, X+
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	ff 91       	pop	r31
    1550:	ef 91       	pop	r30
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	6f 90       	pop	r6
    1582:	5f 90       	pop	r5
    1584:	4f 90       	pop	r4
    1586:	3f 90       	pop	r3
    1588:	2f 90       	pop	r2
    158a:	1f 90       	pop	r1
    158c:	0f 90       	pop	r0
    158e:	0c be       	out	0x3c, r0	; 60
    1590:	0f 90       	pop	r0
    1592:	0b be       	out	0x3b, r0	; 59
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	08 95       	ret
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	08 95       	ret

000015a0 <vPortYield>:
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	0f 92       	push	r0
    15a8:	0b b6       	in	r0, 0x3b	; 59
    15aa:	0f 92       	push	r0
    15ac:	0c b6       	in	r0, 0x3c	; 60
    15ae:	0f 92       	push	r0
    15b0:	1f 92       	push	r1
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 92       	push	r2
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	6f 93       	push	r22
    15de:	7f 93       	push	r23
    15e0:	8f 93       	push	r24
    15e2:	9f 93       	push	r25
    15e4:	af 93       	push	r26
    15e6:	bf 93       	push	r27
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
    15f0:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    15f4:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    15f8:	0d b6       	in	r0, 0x3d	; 61
    15fa:	0d 92       	st	X+, r0
    15fc:	0e b6       	in	r0, 0x3e	; 62
    15fe:	0d 92       	st	X+, r0
    1600:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <vTaskSwitchContext>
    1604:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    1608:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    160c:	cd 91       	ld	r28, X+
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	dd 91       	ld	r29, X+
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	ff 90       	pop	r15
    1636:	ef 90       	pop	r14
    1638:	df 90       	pop	r13
    163a:	cf 90       	pop	r12
    163c:	bf 90       	pop	r11
    163e:	af 90       	pop	r10
    1640:	9f 90       	pop	r9
    1642:	8f 90       	pop	r8
    1644:	7f 90       	pop	r7
    1646:	6f 90       	pop	r6
    1648:	5f 90       	pop	r5
    164a:	4f 90       	pop	r4
    164c:	3f 90       	pop	r3
    164e:	2f 90       	pop	r2
    1650:	1f 90       	pop	r1
    1652:	0f 90       	pop	r0
    1654:	0c be       	out	0x3c, r0	; 60
    1656:	0f 90       	pop	r0
    1658:	0b be       	out	0x3b, r0	; 59
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	08 95       	ret

00001662 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	0f 92       	push	r0
    166a:	0b b6       	in	r0, 0x3b	; 59
    166c:	0f 92       	push	r0
    166e:	0c b6       	in	r0, 0x3c	; 60
    1670:	0f 92       	push	r0
    1672:	1f 92       	push	r1
    1674:	11 24       	eor	r1, r1
    1676:	2f 92       	push	r2
    1678:	3f 92       	push	r3
    167a:	4f 92       	push	r4
    167c:	5f 92       	push	r5
    167e:	6f 92       	push	r6
    1680:	7f 92       	push	r7
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	2f 93       	push	r18
    1698:	3f 93       	push	r19
    169a:	4f 93       	push	r20
    169c:	5f 93       	push	r21
    169e:	6f 93       	push	r22
    16a0:	7f 93       	push	r23
    16a2:	8f 93       	push	r24
    16a4:	9f 93       	push	r25
    16a6:	af 93       	push	r26
    16a8:	bf 93       	push	r27
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	ef 93       	push	r30
    16b0:	ff 93       	push	r31
    16b2:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    16b6:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    16ba:	0d b6       	in	r0, 0x3d	; 61
    16bc:	0d 92       	st	X+, r0
    16be:	0e b6       	in	r0, 0x3e	; 62
    16c0:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    16c2:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    16c4:	0e 94 95 14 	call	0x292a	; 0x292a <xTaskIncrementTick>
    16c8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    16ca:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    16ce:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    16d2:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    16d6:	cd 91       	ld	r28, X+
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	dd 91       	ld	r29, X+
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	df 90       	pop	r13
    1704:	cf 90       	pop	r12
    1706:	bf 90       	pop	r11
    1708:	af 90       	pop	r10
    170a:	9f 90       	pop	r9
    170c:	8f 90       	pop	r8
    170e:	7f 90       	pop	r7
    1710:	6f 90       	pop	r6
    1712:	5f 90       	pop	r5
    1714:	4f 90       	pop	r4
    1716:	3f 90       	pop	r3
    1718:	2f 90       	pop	r2
    171a:	1f 90       	pop	r1
    171c:	0f 90       	pop	r0
    171e:	0c be       	out	0x3c, r0	; 60
    1720:	0f 90       	pop	r0
    1722:	0b be       	out	0x3b, r0	; 59
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    172a:	08 95       	ret

0000172c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    172c:	9a df       	rcall	.-204    	; 0x1662 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    172e:	18 95       	reti

00001730 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	0f 92       	push	r0
    1736:	fc 01       	movw	r30, r24
    1738:	96 8d       	ldd	r25, Z+30	; 0x1e
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	91 11       	cpse	r25, r1
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret

00001746 <prvCopyDataToQueue>:
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	04 2f       	mov	r16, r20
    1752:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1754:	48 a1       	ldd	r20, Y+32	; 0x20
    1756:	41 11       	cpse	r20, r1
    1758:	0c c0       	rjmp	.+24     	; 0x1772 <prvCopyDataToQueue+0x2c>
    175a:	88 81       	ld	r24, Y
    175c:	99 81       	ldd	r25, Y+1	; 0x01
    175e:	89 2b       	or	r24, r25
    1760:	09 f0       	breq	.+2      	; 0x1764 <prvCopyDataToQueue+0x1e>
    1762:	42 c0       	rjmp	.+132    	; 0x17e8 <prvCopyDataToQueue+0xa2>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <xTaskPriorityDisinherit>
    176c:	1d 82       	std	Y+5, r1	; 0x05
    176e:	1c 82       	std	Y+4, r1	; 0x04
    1770:	42 c0       	rjmp	.+132    	; 0x17f6 <prvCopyDataToQueue+0xb0>
    1772:	01 11       	cpse	r16, r1
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <prvCopyDataToQueue+0x5e>
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	9b 81       	ldd	r25, Y+3	; 0x03
    177c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <memcpy>
    1780:	28 a1       	ldd	r18, Y+32	; 0x20
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	82 0f       	add	r24, r18
    1788:	91 1d       	adc	r25, r1
    178a:	9b 83       	std	Y+3, r25	; 0x03
    178c:	8a 83       	std	Y+2, r24	; 0x02
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	82 17       	cp	r24, r18
    1794:	93 07       	cpc	r25, r19
    1796:	50 f1       	brcs	.+84     	; 0x17ec <prvCopyDataToQueue+0xa6>
    1798:	88 81       	ld	r24, Y
    179a:	99 81       	ldd	r25, Y+1	; 0x01
    179c:	9b 83       	std	Y+3, r25	; 0x03
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	29 c0       	rjmp	.+82     	; 0x17f6 <prvCopyDataToQueue+0xb0>
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	0e 94 18 37 	call	0x6e30	; 0x6e30 <memcpy>
    17ae:	88 a1       	ldd	r24, Y+32	; 0x20
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	91 95       	neg	r25
    17b4:	81 95       	neg	r24
    17b6:	91 09       	sbc	r25, r1
    17b8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ba:	3f 81       	ldd	r19, Y+7	; 0x07
    17bc:	28 0f       	add	r18, r24
    17be:	39 1f       	adc	r19, r25
    17c0:	3f 83       	std	Y+7, r19	; 0x07
    17c2:	2e 83       	std	Y+6, r18	; 0x06
    17c4:	48 81       	ld	r20, Y
    17c6:	59 81       	ldd	r21, Y+1	; 0x01
    17c8:	24 17       	cp	r18, r20
    17ca:	35 07       	cpc	r19, r21
    17cc:	30 f4       	brcc	.+12     	; 0x17da <prvCopyDataToQueue+0x94>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	9f 83       	std	Y+7, r25	; 0x07
    17d8:	8e 83       	std	Y+6, r24	; 0x06
    17da:	02 30       	cpi	r16, 0x02	; 2
    17dc:	49 f4       	brne	.+18     	; 0x17f0 <prvCopyDataToQueue+0xaa>
    17de:	11 23       	and	r17, r17
    17e0:	49 f0       	breq	.+18     	; 0x17f4 <prvCopyDataToQueue+0xae>
    17e2:	11 50       	subi	r17, 0x01	; 1
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <prvCopyDataToQueue+0xb0>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <prvCopyDataToQueue+0xb0>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <prvCopyDataToQueue+0xb0>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <prvCopyDataToQueue+0xb0>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	1f 5f       	subi	r17, 0xFF	; 255
    17f8:	1e 8f       	std	Y+30, r17	; 0x1e
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <prvCopyDataFromQueue>:
    1804:	fc 01       	movw	r30, r24
    1806:	40 a1       	ldd	r20, Z+32	; 0x20
    1808:	44 23       	and	r20, r20
    180a:	a9 f0       	breq	.+42     	; 0x1836 <prvCopyDataFromQueue+0x32>
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	26 81       	ldd	r18, Z+6	; 0x06
    1810:	37 81       	ldd	r19, Z+7	; 0x07
    1812:	24 0f       	add	r18, r20
    1814:	35 1f       	adc	r19, r21
    1816:	37 83       	std	Z+7, r19	; 0x07
    1818:	26 83       	std	Z+6, r18	; 0x06
    181a:	84 81       	ldd	r24, Z+4	; 0x04
    181c:	95 81       	ldd	r25, Z+5	; 0x05
    181e:	28 17       	cp	r18, r24
    1820:	39 07       	cpc	r19, r25
    1822:	20 f0       	brcs	.+8      	; 0x182c <prvCopyDataFromQueue+0x28>
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	97 83       	std	Z+7, r25	; 0x07
    182a:	86 83       	std	Z+6, r24	; 0x06
    182c:	cb 01       	movw	r24, r22
    182e:	66 81       	ldd	r22, Z+6	; 0x06
    1830:	77 81       	ldd	r23, Z+7	; 0x07
    1832:	0c 94 18 37 	jmp	0x6e30	; 0x6e30 <memcpy>
    1836:	08 95       	ret

00001838 <prvUnlockQueue>:
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	8c 01       	movw	r16, r24
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	0f 92       	push	r0
    184a:	fc 01       	movw	r30, r24
    184c:	c2 a1       	ldd	r28, Z+34	; 0x22
    184e:	1c 16       	cp	r1, r28
    1850:	ac f4       	brge	.+42     	; 0x187c <prvUnlockQueue+0x44>
    1852:	83 89       	ldd	r24, Z+19	; 0x13
    1854:	81 11       	cpse	r24, r1
    1856:	06 c0       	rjmp	.+12     	; 0x1864 <prvUnlockQueue+0x2c>
    1858:	11 c0       	rjmp	.+34     	; 0x187c <prvUnlockQueue+0x44>
    185a:	f8 01       	movw	r30, r16
    185c:	83 89       	ldd	r24, Z+19	; 0x13
    185e:	81 11       	cpse	r24, r1
    1860:	05 c0       	rjmp	.+10     	; 0x186c <prvUnlockQueue+0x34>
    1862:	0c c0       	rjmp	.+24     	; 0x187c <prvUnlockQueue+0x44>
    1864:	78 01       	movw	r14, r16
    1866:	f3 e1       	ldi	r31, 0x13	; 19
    1868:	ef 0e       	add	r14, r31
    186a:	f1 1c       	adc	r15, r1
    186c:	c7 01       	movw	r24, r14
    186e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    1872:	81 11       	cpse	r24, r1
    1874:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskMissedYield>
    1878:	c1 50       	subi	r28, 0x01	; 1
    187a:	79 f7       	brne	.-34     	; 0x185a <prvUnlockQueue+0x22>
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	f8 01       	movw	r30, r16
    1880:	82 a3       	std	Z+34, r24	; 0x22
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	0f 92       	push	r0
    188c:	c1 a1       	ldd	r28, Z+33	; 0x21
    188e:	1c 16       	cp	r1, r28
    1890:	ac f4       	brge	.+42     	; 0x18bc <prvUnlockQueue+0x84>
    1892:	80 85       	ldd	r24, Z+8	; 0x08
    1894:	81 11       	cpse	r24, r1
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <prvUnlockQueue+0x6c>
    1898:	11 c0       	rjmp	.+34     	; 0x18bc <prvUnlockQueue+0x84>
    189a:	f8 01       	movw	r30, r16
    189c:	80 85       	ldd	r24, Z+8	; 0x08
    189e:	81 11       	cpse	r24, r1
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <prvUnlockQueue+0x74>
    18a2:	0c c0       	rjmp	.+24     	; 0x18bc <prvUnlockQueue+0x84>
    18a4:	78 01       	movw	r14, r16
    18a6:	f8 e0       	ldi	r31, 0x08	; 8
    18a8:	ef 0e       	add	r14, r31
    18aa:	f1 1c       	adc	r15, r1
    18ac:	c7 01       	movw	r24, r14
    18ae:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    18b2:	81 11       	cpse	r24, r1
    18b4:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskMissedYield>
    18b8:	c1 50       	subi	r28, 0x01	; 1
    18ba:	79 f7       	brne	.-34     	; 0x189a <prvUnlockQueue+0x62>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	f8 01       	movw	r30, r16
    18c0:	81 a3       	std	Z+33, r24	; 0x21
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	08 95       	ret

000018d2 <xQueueGenericReset>:
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	0f 92       	push	r0
    18de:	e8 81       	ld	r30, Y
    18e0:	f9 81       	ldd	r31, Y+1	; 0x01
    18e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e4:	28 a1       	ldd	r18, Y+32	; 0x20
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	82 9f       	mul	r24, r18
    18ec:	a0 01       	movw	r20, r0
    18ee:	83 9f       	mul	r24, r19
    18f0:	50 0d       	add	r21, r0
    18f2:	92 9f       	mul	r25, r18
    18f4:	50 0d       	add	r21, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	4e 0f       	add	r20, r30
    18fa:	5f 1f       	adc	r21, r31
    18fc:	5d 83       	std	Y+5, r21	; 0x05
    18fe:	4c 83       	std	Y+4, r20	; 0x04
    1900:	1e 8e       	std	Y+30, r1	; 0x1e
    1902:	fb 83       	std	Y+3, r31	; 0x03
    1904:	ea 83       	std	Y+2, r30	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	82 9f       	mul	r24, r18
    190a:	a0 01       	movw	r20, r0
    190c:	83 9f       	mul	r24, r19
    190e:	50 0d       	add	r21, r0
    1910:	92 9f       	mul	r25, r18
    1912:	50 0d       	add	r21, r0
    1914:	11 24       	eor	r1, r1
    1916:	cf 01       	movw	r24, r30
    1918:	84 0f       	add	r24, r20
    191a:	95 1f       	adc	r25, r21
    191c:	9f 83       	std	Y+7, r25	; 0x07
    191e:	8e 83       	std	Y+6, r24	; 0x06
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	89 a3       	std	Y+33, r24	; 0x21
    1924:	8a a3       	std	Y+34, r24	; 0x22
    1926:	61 11       	cpse	r22, r1
    1928:	0b c0       	rjmp	.+22     	; 0x1940 <xQueueGenericReset+0x6e>
    192a:	88 85       	ldd	r24, Y+8	; 0x08
    192c:	88 23       	and	r24, r24
    192e:	71 f0       	breq	.+28     	; 0x194c <xQueueGenericReset+0x7a>
    1930:	ce 01       	movw	r24, r28
    1932:	08 96       	adiw	r24, 0x08	; 8
    1934:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    1938:	88 23       	and	r24, r24
    193a:	41 f0       	breq	.+16     	; 0x194c <xQueueGenericReset+0x7a>
    193c:	31 de       	rcall	.-926    	; 0x15a0 <vPortYield>
    193e:	06 c0       	rjmp	.+12     	; 0x194c <xQueueGenericReset+0x7a>
    1940:	ce 01       	movw	r24, r28
    1942:	08 96       	adiw	r24, 0x08	; 8
    1944:	61 dd       	rcall	.-1342   	; 0x1408 <vListInitialise>
    1946:	ce 01       	movw	r24, r28
    1948:	43 96       	adiw	r24, 0x13	; 19
    194a:	5e dd       	rcall	.-1348   	; 0x1408 <vListInitialise>
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <xQueueGenericCreate>:
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	08 2f       	mov	r16, r24
    1962:	16 2f       	mov	r17, r22
    1964:	86 9f       	mul	r24, r22
    1966:	c0 01       	movw	r24, r0
    1968:	11 24       	eor	r1, r1
    196a:	83 96       	adiw	r24, 0x23	; 35
    196c:	4b dc       	rcall	.-1898   	; 0x1204 <pvPortMalloc>
    196e:	ec 01       	movw	r28, r24
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f0       	breq	.+26     	; 0x198e <xQueueGenericCreate+0x36>
    1974:	11 11       	cpse	r17, r1
    1976:	03 c0       	rjmp	.+6      	; 0x197e <xQueueGenericCreate+0x26>
    1978:	99 83       	std	Y+1, r25	; 0x01
    197a:	88 83       	st	Y, r24
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <xQueueGenericCreate+0x2c>
    197e:	83 96       	adiw	r24, 0x23	; 35
    1980:	99 83       	std	Y+1, r25	; 0x01
    1982:	88 83       	st	Y, r24
    1984:	0f 8f       	std	Y+31, r16	; 0x1f
    1986:	18 a3       	std	Y+32, r17	; 0x20
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	ce 01       	movw	r24, r28
    198c:	a2 df       	rcall	.-188    	; 0x18d2 <xQueueGenericReset>
    198e:	ce 01       	movw	r24, r28
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <xQueueGenericSend>:
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	29 97       	sbiw	r28, 0x09	; 9
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	7c 01       	movw	r14, r24
    19c2:	5b 01       	movw	r10, r22
    19c4:	2e 83       	std	Y+6, r18	; 0x06
    19c6:	3f 83       	std	Y+7, r19	; 0x07
    19c8:	48 87       	std	Y+8, r20	; 0x08
    19ca:	59 87       	std	Y+9, r21	; 0x09
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	99 24       	eor	r9, r9
    19d0:	93 94       	inc	r9
    19d2:	6c 01       	movw	r12, r24
    19d4:	88 e0       	ldi	r24, 0x08	; 8
    19d6:	c8 0e       	add	r12, r24
    19d8:	d1 1c       	adc	r13, r1
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	0f 92       	push	r0
    19e0:	f7 01       	movw	r30, r14
    19e2:	96 8d       	ldd	r25, Z+30	; 0x1e
    19e4:	87 8d       	ldd	r24, Z+31	; 0x1f
    19e6:	98 17       	cp	r25, r24
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <xQueueGenericSend+0x54>
    19ea:	02 30       	cpi	r16, 0x02	; 2
    19ec:	b1 f4       	brne	.+44     	; 0x1a1a <xQueueGenericSend+0x80>
    19ee:	40 2f       	mov	r20, r16
    19f0:	b5 01       	movw	r22, r10
    19f2:	c7 01       	movw	r24, r14
    19f4:	a8 de       	rcall	.-688    	; 0x1746 <prvCopyDataToQueue>
    19f6:	f7 01       	movw	r30, r14
    19f8:	93 89       	ldd	r25, Z+19	; 0x13
    19fa:	99 23       	and	r25, r25
    19fc:	41 f0       	breq	.+16     	; 0x1a0e <xQueueGenericSend+0x74>
    19fe:	c7 01       	movw	r24, r14
    1a00:	43 96       	adiw	r24, 0x13	; 19
    1a02:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    1a06:	88 23       	and	r24, r24
    1a08:	21 f0       	breq	.+8      	; 0x1a12 <xQueueGenericSend+0x78>
    1a0a:	ca dd       	rcall	.-1132   	; 0x15a0 <vPortYield>
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <xQueueGenericSend+0x78>
    1a0e:	81 11       	cpse	r24, r1
    1a10:	c7 dd       	rcall	.-1138   	; 0x15a0 <vPortYield>
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	51 c0       	rjmp	.+162    	; 0x1abc <xQueueGenericSend+0x122>
    1a1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a20:	b9 85       	ldd	r27, Y+9	; 0x09
    1a22:	89 2b       	or	r24, r25
    1a24:	8a 2b       	or	r24, r26
    1a26:	8b 2b       	or	r24, r27
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <xQueueGenericSend+0x98>
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	45 c0       	rjmp	.+138    	; 0x1abc <xQueueGenericSend+0x122>
    1a32:	11 11       	cpse	r17, r1
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <xQueueGenericSend+0xa6>
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <vTaskInternalSetTimeOutState>
    1a3e:	19 2d       	mov	r17, r9
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	5e d7       	rcall	.+3772   	; 0x2902 <vTaskSuspendAll>
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	0f 92       	push	r0
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	81 a1       	ldd	r24, Z+33	; 0x21
    1a50:	8f 3f       	cpi	r24, 0xFF	; 255
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <xQueueGenericSend+0xbc>
    1a54:	11 a2       	std	Z+33, r1	; 0x21
    1a56:	f7 01       	movw	r30, r14
    1a58:	82 a1       	ldd	r24, Z+34	; 0x22
    1a5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <xQueueGenericSend+0xc6>
    1a5e:	12 a2       	std	Z+34, r1	; 0x22
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	be 01       	movw	r22, r28
    1a66:	6a 5f       	subi	r22, 0xFA	; 250
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	0e 94 65 18 	call	0x30ca	; 0x30ca <xTaskCheckForTimeOut>
    1a72:	81 11       	cpse	r24, r1
    1a74:	1e c0       	rjmp	.+60     	; 0x1ab2 <xQueueGenericSend+0x118>
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	0f 92       	push	r0
    1a7c:	f7 01       	movw	r30, r14
    1a7e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a80:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	98 13       	cpse	r25, r24
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <xQueueGenericSend+0x10e>
    1a8a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a8c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a8e:	68 85       	ldd	r22, Y+8	; 0x08
    1a90:	79 85       	ldd	r23, Y+9	; 0x09
    1a92:	c6 01       	movw	r24, r12
    1a94:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <vTaskPlaceOnEventList>
    1a98:	c7 01       	movw	r24, r14
    1a9a:	ce de       	rcall	.-612    	; 0x1838 <prvUnlockQueue>
    1a9c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	9b cf       	rjmp	.-202    	; 0x19da <xQueueGenericSend+0x40>
    1aa4:	7d dd       	rcall	.-1286   	; 0x15a0 <vPortYield>
    1aa6:	99 cf       	rjmp	.-206    	; 0x19da <xQueueGenericSend+0x40>
    1aa8:	c7 01       	movw	r24, r14
    1aaa:	c6 de       	rcall	.-628    	; 0x1838 <prvUnlockQueue>
    1aac:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
    1ab0:	94 cf       	rjmp	.-216    	; 0x19da <xQueueGenericSend+0x40>
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	c1 de       	rcall	.-638    	; 0x1838 <prvUnlockQueue>
    1ab6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskResumeAll>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	29 96       	adiw	r28, 0x09	; 9
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	9f 90       	pop	r9
    1ade:	08 95       	ret

00001ae0 <xQueueGenericSendFromISR>:
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	8a 01       	movw	r16, r20
    1aee:	fc 01       	movw	r30, r24
    1af0:	56 8d       	ldd	r21, Z+30	; 0x1e
    1af2:	37 8d       	ldd	r19, Z+31	; 0x1f
    1af4:	53 17       	cp	r21, r19
    1af6:	10 f0       	brcs	.+4      	; 0x1afc <xQueueGenericSendFromISR+0x1c>
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	f9 f4       	brne	.+62     	; 0x1b3a <xQueueGenericSendFromISR+0x5a>
    1afc:	42 2f       	mov	r20, r18
    1afe:	78 01       	movw	r14, r16
    1b00:	ec 01       	movw	r28, r24
    1b02:	1a a1       	ldd	r17, Y+34	; 0x22
    1b04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b06:	ce 01       	movw	r24, r28
    1b08:	1e de       	rcall	.-964    	; 0x1746 <prvCopyDataToQueue>
    1b0a:	1f 3f       	cpi	r17, 0xFF	; 255
    1b0c:	81 f4       	brne	.+32     	; 0x1b2e <xQueueGenericSendFromISR+0x4e>
    1b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b10:	88 23       	and	r24, r24
    1b12:	a9 f0       	breq	.+42     	; 0x1b3e <xQueueGenericSendFromISR+0x5e>
    1b14:	ce 01       	movw	r24, r28
    1b16:	43 96       	adiw	r24, 0x13	; 19
    1b18:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    1b1c:	88 23       	and	r24, r24
    1b1e:	89 f0       	breq	.+34     	; 0x1b42 <xQueueGenericSendFromISR+0x62>
    1b20:	e1 14       	cp	r14, r1
    1b22:	f1 04       	cpc	r15, r1
    1b24:	81 f0       	breq	.+32     	; 0x1b46 <xQueueGenericSendFromISR+0x66>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	f7 01       	movw	r30, r14
    1b2a:	80 83       	st	Z, r24
    1b2c:	0d c0       	rjmp	.+26     	; 0x1b48 <xQueueGenericSendFromISR+0x68>
    1b2e:	ff 24       	eor	r15, r15
    1b30:	f3 94       	inc	r15
    1b32:	f1 0e       	add	r15, r17
    1b34:	fa a2       	std	Y+34, r15	; 0x22
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	07 c0       	rjmp	.+14     	; 0x1b48 <xQueueGenericSendFromISR+0x68>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <xQueueGenericSendFromISR+0x68>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <xQueueGenericSendFromISR+0x68>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <xQueueGenericSendFromISR+0x68>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	08 95       	ret

00001b56 <xQueueReceive>:
    1b56:	9f 92       	push	r9
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	29 97       	sbiw	r28, 0x09	; 9
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	8c 01       	movw	r16, r24
    1b7e:	5b 01       	movw	r10, r22
    1b80:	2e 83       	std	Y+6, r18	; 0x06
    1b82:	3f 83       	std	Y+7, r19	; 0x07
    1b84:	48 87       	std	Y+8, r20	; 0x08
    1b86:	59 87       	std	Y+9, r21	; 0x09
    1b88:	e1 2c       	mov	r14, r1
    1b8a:	99 24       	eor	r9, r9
    1b8c:	93 94       	inc	r9
    1b8e:	6c 01       	movw	r12, r24
    1b90:	83 e1       	ldi	r24, 0x13	; 19
    1b92:	c8 0e       	add	r12, r24
    1b94:	d1 1c       	adc	r13, r1
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	0f 92       	push	r0
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1ba0:	ff 20       	and	r15, r15
    1ba2:	99 f0       	breq	.+38     	; 0x1bca <xQueueReceive+0x74>
    1ba4:	b5 01       	movw	r22, r10
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	2d de       	rcall	.-934    	; 0x1804 <prvCopyDataFromQueue>
    1baa:	fa 94       	dec	r15
    1bac:	f8 01       	movw	r30, r16
    1bae:	f6 8e       	std	Z+30, r15	; 0x1e
    1bb0:	80 85       	ldd	r24, Z+8	; 0x08
    1bb2:	88 23       	and	r24, r24
    1bb4:	31 f0       	breq	.+12     	; 0x1bc2 <xQueueReceive+0x6c>
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	08 96       	adiw	r24, 0x08	; 8
    1bba:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    1bbe:	81 11       	cpse	r24, r1
    1bc0:	ef dc       	rcall	.-1570   	; 0x15a0 <vPortYield>
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	4d c0       	rjmp	.+154    	; 0x1c64 <xQueueReceive+0x10e>
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
    1bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bce:	a8 85       	ldd	r26, Y+8	; 0x08
    1bd0:	b9 85       	ldd	r27, Y+9	; 0x09
    1bd2:	89 2b       	or	r24, r25
    1bd4:	8a 2b       	or	r24, r26
    1bd6:	8b 2b       	or	r24, r27
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <xQueueReceive+0x8c>
    1bda:	0f 90       	pop	r0
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	41 c0       	rjmp	.+130    	; 0x1c64 <xQueueReceive+0x10e>
    1be2:	e1 10       	cpse	r14, r1
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <xQueueReceive+0x9a>
    1be6:	ce 01       	movw	r24, r28
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	0e 94 54 18 	call	0x30a8	; 0x30a8 <vTaskInternalSetTimeOutState>
    1bee:	e9 2c       	mov	r14, r9
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	86 d6       	rcall	.+3340   	; 0x2902 <vTaskSuspendAll>
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	0f 92       	push	r0
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	81 a1       	ldd	r24, Z+33	; 0x21
    1c00:	8f 3f       	cpi	r24, 0xFF	; 255
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <xQueueReceive+0xb0>
    1c04:	11 a2       	std	Z+33, r1	; 0x21
    1c06:	f8 01       	movw	r30, r16
    1c08:	82 a1       	ldd	r24, Z+34	; 0x22
    1c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <xQueueReceive+0xba>
    1c0e:	12 a2       	std	Z+34, r1	; 0x22
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	be 01       	movw	r22, r28
    1c16:	6a 5f       	subi	r22, 0xFA	; 250
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	0e 94 65 18 	call	0x30ca	; 0x30ca <xTaskCheckForTimeOut>
    1c22:	81 11       	cpse	r24, r1
    1c24:	16 c0       	rjmp	.+44     	; 0x1c52 <xQueueReceive+0xfc>
    1c26:	c8 01       	movw	r24, r16
    1c28:	83 dd       	rcall	.-1274   	; 0x1730 <prvIsQueueEmpty>
    1c2a:	88 23       	and	r24, r24
    1c2c:	71 f0       	breq	.+28     	; 0x1c4a <xQueueReceive+0xf4>
    1c2e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c30:	5f 81       	ldd	r21, Y+7	; 0x07
    1c32:	68 85       	ldd	r22, Y+8	; 0x08
    1c34:	79 85       	ldd	r23, Y+9	; 0x09
    1c36:	c6 01       	movw	r24, r12
    1c38:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <vTaskPlaceOnEventList>
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	fc dd       	rcall	.-1032   	; 0x1838 <prvUnlockQueue>
    1c40:	a4 d7       	rcall	.+3912   	; 0x2b8a <xTaskResumeAll>
    1c42:	81 11       	cpse	r24, r1
    1c44:	a8 cf       	rjmp	.-176    	; 0x1b96 <xQueueReceive+0x40>
    1c46:	ac dc       	rcall	.-1704   	; 0x15a0 <vPortYield>
    1c48:	a6 cf       	rjmp	.-180    	; 0x1b96 <xQueueReceive+0x40>
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	f5 dd       	rcall	.-1046   	; 0x1838 <prvUnlockQueue>
    1c4e:	9d d7       	rcall	.+3898   	; 0x2b8a <xTaskResumeAll>
    1c50:	a2 cf       	rjmp	.-188    	; 0x1b96 <xQueueReceive+0x40>
    1c52:	c8 01       	movw	r24, r16
    1c54:	f1 dd       	rcall	.-1054   	; 0x1838 <prvUnlockQueue>
    1c56:	99 d7       	rcall	.+3890   	; 0x2b8a <xTaskResumeAll>
    1c58:	c8 01       	movw	r24, r16
    1c5a:	6a dd       	rcall	.-1324   	; 0x1730 <prvIsQueueEmpty>
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <xQueueReceive+0x10c>
    1c60:	9a cf       	rjmp	.-204    	; 0x1b96 <xQueueReceive+0x40>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	29 96       	adiw	r28, 0x09	; 9
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	9f 90       	pop	r9
    1c86:	08 95       	ret

00001c88 <xQueueSemaphoreTake>:
    1c88:	bf 92       	push	r11
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	29 97       	sbiw	r28, 0x09	; 9
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	8c 01       	movw	r16, r24
    1cac:	4e 83       	std	Y+6, r20	; 0x06
    1cae:	5f 83       	std	Y+7, r21	; 0x07
    1cb0:	68 87       	std	Y+8, r22	; 0x08
    1cb2:	79 87       	std	Y+9, r23	; 0x09
    1cb4:	b1 2c       	mov	r11, r1
    1cb6:	d1 2c       	mov	r13, r1
    1cb8:	cc 24       	eor	r12, r12
    1cba:	c3 94       	inc	r12
    1cbc:	7c 01       	movw	r14, r24
    1cbe:	83 e1       	ldi	r24, 0x13	; 19
    1cc0:	e8 0e       	add	r14, r24
    1cc2:	f1 1c       	adc	r15, r1
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	0f 92       	push	r0
    1cca:	d8 01       	movw	r26, r16
    1ccc:	5e 96       	adiw	r26, 0x1e	; 30
    1cce:	8c 91       	ld	r24, X
    1cd0:	5e 97       	sbiw	r26, 0x1e	; 30
    1cd2:	88 23       	and	r24, r24
    1cd4:	e1 f0       	breq	.+56     	; 0x1d0e <xQueueSemaphoreTake+0x86>
    1cd6:	81 50       	subi	r24, 0x01	; 1
    1cd8:	5e 96       	adiw	r26, 0x1e	; 30
    1cda:	8c 93       	st	X, r24
    1cdc:	5e 97       	sbiw	r26, 0x1e	; 30
    1cde:	8d 91       	ld	r24, X+
    1ce0:	9c 91       	ld	r25, X
    1ce2:	89 2b       	or	r24, r25
    1ce4:	29 f4       	brne	.+10     	; 0x1cf0 <xQueueSemaphoreTake+0x68>
    1ce6:	0e 94 1e 1a 	call	0x343c	; 0x343c <pvTaskIncrementMutexHeldCount>
    1cea:	f8 01       	movw	r30, r16
    1cec:	95 83       	std	Z+5, r25	; 0x05
    1cee:	84 83       	std	Z+4, r24	; 0x04
    1cf0:	d8 01       	movw	r26, r16
    1cf2:	18 96       	adiw	r26, 0x08	; 8
    1cf4:	8c 91       	ld	r24, X
    1cf6:	88 23       	and	r24, r24
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <xQueueSemaphoreTake+0x7e>
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	08 96       	adiw	r24, 0x08	; 8
    1cfe:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <xTaskRemoveFromEventList>
    1d02:	81 11       	cpse	r24, r1
    1d04:	4d dc       	rcall	.-1894   	; 0x15a0 <vPortYield>
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	7b c0       	rjmp	.+246    	; 0x1e04 <xQueueSemaphoreTake+0x17c>
    1d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d10:	9f 81       	ldd	r25, Y+7	; 0x07
    1d12:	a8 85       	ldd	r26, Y+8	; 0x08
    1d14:	b9 85       	ldd	r27, Y+9	; 0x09
    1d16:	89 2b       	or	r24, r25
    1d18:	8a 2b       	or	r24, r26
    1d1a:	8b 2b       	or	r24, r27
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <xQueueSemaphoreTake+0x9e>
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	6f c0       	rjmp	.+222    	; 0x1e04 <xQueueSemaphoreTake+0x17c>
    1d26:	d1 10       	cpse	r13, r1
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <xQueueSemaphoreTake+0xac>
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <vTaskInternalSetTimeOutState>
    1d32:	dc 2c       	mov	r13, r12
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	e4 d5       	rcall	.+3016   	; 0x2902 <vTaskSuspendAll>
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	0f 92       	push	r0
    1d40:	f8 01       	movw	r30, r16
    1d42:	81 a1       	ldd	r24, Z+33	; 0x21
    1d44:	8f 3f       	cpi	r24, 0xFF	; 255
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <xQueueSemaphoreTake+0xc2>
    1d48:	11 a2       	std	Z+33, r1	; 0x21
    1d4a:	d8 01       	movw	r26, r16
    1d4c:	92 96       	adiw	r26, 0x22	; 34
    1d4e:	8c 91       	ld	r24, X
    1d50:	92 97       	sbiw	r26, 0x22	; 34
    1d52:	8f 3f       	cpi	r24, 0xFF	; 255
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <xQueueSemaphoreTake+0xd2>
    1d56:	92 96       	adiw	r26, 0x22	; 34
    1d58:	1c 92       	st	X, r1
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	be 01       	movw	r22, r28
    1d60:	6a 5f       	subi	r22, 0xFA	; 250
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	ce 01       	movw	r24, r28
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	0e 94 65 18 	call	0x30ca	; 0x30ca <xTaskCheckForTimeOut>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	25 c0       	rjmp	.+74     	; 0x1dba <xQueueSemaphoreTake+0x132>
    1d70:	c8 01       	movw	r24, r16
    1d72:	de dc       	rcall	.-1604   	; 0x1730 <prvIsQueueEmpty>
    1d74:	88 23       	and	r24, r24
    1d76:	e9 f0       	breq	.+58     	; 0x1db2 <xQueueSemaphoreTake+0x12a>
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	89 2b       	or	r24, r25
    1d80:	51 f4       	brne	.+20     	; 0x1d96 <xQueueSemaphoreTake+0x10e>
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	0f 92       	push	r0
    1d88:	84 81       	ldd	r24, Z+4	; 0x04
    1d8a:	95 81       	ldd	r25, Z+5	; 0x05
    1d8c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <xTaskPriorityInherit>
    1d90:	b8 2e       	mov	r11, r24
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	4e 81       	ldd	r20, Y+6	; 0x06
    1d98:	5f 81       	ldd	r21, Y+7	; 0x07
    1d9a:	68 85       	ldd	r22, Y+8	; 0x08
    1d9c:	79 85       	ldd	r23, Y+9	; 0x09
    1d9e:	c7 01       	movw	r24, r14
    1da0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <vTaskPlaceOnEventList>
    1da4:	c8 01       	movw	r24, r16
    1da6:	48 dd       	rcall	.-1392   	; 0x1838 <prvUnlockQueue>
    1da8:	f0 d6       	rcall	.+3552   	; 0x2b8a <xTaskResumeAll>
    1daa:	81 11       	cpse	r24, r1
    1dac:	8b cf       	rjmp	.-234    	; 0x1cc4 <xQueueSemaphoreTake+0x3c>
    1dae:	f8 db       	rcall	.-2064   	; 0x15a0 <vPortYield>
    1db0:	89 cf       	rjmp	.-238    	; 0x1cc4 <xQueueSemaphoreTake+0x3c>
    1db2:	c8 01       	movw	r24, r16
    1db4:	41 dd       	rcall	.-1406   	; 0x1838 <prvUnlockQueue>
    1db6:	e9 d6       	rcall	.+3538   	; 0x2b8a <xTaskResumeAll>
    1db8:	85 cf       	rjmp	.-246    	; 0x1cc4 <xQueueSemaphoreTake+0x3c>
    1dba:	c8 01       	movw	r24, r16
    1dbc:	3d dd       	rcall	.-1414   	; 0x1838 <prvUnlockQueue>
    1dbe:	e5 d6       	rcall	.+3530   	; 0x2b8a <xTaskResumeAll>
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	b6 dc       	rcall	.-1684   	; 0x1730 <prvIsQueueEmpty>
    1dc4:	88 23       	and	r24, r24
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <xQueueSemaphoreTake+0x142>
    1dc8:	7d cf       	rjmp	.-262    	; 0x1cc4 <xQueueSemaphoreTake+0x3c>
    1dca:	bb 20       	and	r11, r11
    1dcc:	d1 f0       	breq	.+52     	; 0x1e02 <xQueueSemaphoreTake+0x17a>
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	0f 92       	push	r0
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	83 89       	ldd	r24, Z+19	; 0x13
    1dd8:	88 23       	and	r24, r24
    1dda:	39 f0       	breq	.+14     	; 0x1dea <xQueueSemaphoreTake+0x162>
    1ddc:	02 8c       	ldd	r0, Z+26	; 0x1a
    1dde:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1de0:	e0 2d       	mov	r30, r0
    1de2:	80 81       	ld	r24, Z
    1de4:	6a e0       	ldi	r22, 0x0A	; 10
    1de6:	68 1b       	sub	r22, r24
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <xQueueSemaphoreTake+0x164>
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	d8 01       	movw	r26, r16
    1dee:	14 96       	adiw	r26, 0x04	; 4
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	15 97       	sbiw	r26, 0x05	; 5
    1df6:	0e 94 b7 19 	call	0x336e	; 0x336e <vTaskPriorityDisinheritAfterTimeout>
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <xQueueSemaphoreTake+0x17c>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	29 96       	adiw	r28, 0x09	; 9
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	08 95       	ret

00001e24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	0f 92       	push	r0
    1e30:	89 a1       	ldd	r24, Y+33	; 0x21
    1e32:	8f 3f       	cpi	r24, 0xFF	; 255
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <vQueueWaitForMessageRestricted+0x14>
    1e36:	19 a2       	std	Y+33, r1	; 0x21
    1e38:	8a a1       	ldd	r24, Y+34	; 0x22
    1e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <vQueueWaitForMessageRestricted+0x1c>
    1e3e:	1a a2       	std	Y+34, r1	; 0x22
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1e44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e46:	81 11       	cpse	r24, r1
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	43 96       	adiw	r24, 0x13	; 19
    1e4e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1e52:	ce 01       	movw	r24, r28
    1e54:	f1 dc       	rcall	.-1566   	; 0x1838 <prvUnlockQueue>
    }
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	44 81       	ldd	r20, Z+4	; 0x04
    1e60:	55 81       	ldd	r21, Z+5	; 0x05
    1e62:	22 81       	ldd	r18, Z+2	; 0x02
    1e64:	33 81       	ldd	r19, Z+3	; 0x03
    1e66:	24 0f       	add	r18, r20
    1e68:	35 1f       	adc	r19, r21
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	b9 01       	movw	r22, r18
    1e70:	68 1b       	sub	r22, r24
    1e72:	79 0b       	sbc	r23, r25
    1e74:	cb 01       	movw	r24, r22
    1e76:	64 17       	cp	r22, r20
    1e78:	75 07       	cpc	r23, r21
    1e7a:	10 f0       	brcs	.+4      	; 0x1e80 <prvBytesInBuffer+0x24>
    1e7c:	84 1b       	sub	r24, r20
    1e7e:	95 0b       	sbc	r25, r21
    1e80:	08 95       	ret

00001e82 <prvWriteBytesToBuffer>:
    1e82:	af 92       	push	r10
    1e84:	bf 92       	push	r11
    1e86:	cf 92       	push	r12
    1e88:	df 92       	push	r13
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	6c 01       	movw	r12, r24
    1e98:	5b 01       	movw	r10, r22
    1e9a:	7a 01       	movw	r14, r20
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	c2 81       	ldd	r28, Z+2	; 0x02
    1ea0:	d3 81       	ldd	r29, Z+3	; 0x03
    1ea2:	04 81       	ldd	r16, Z+4	; 0x04
    1ea4:	15 81       	ldd	r17, Z+5	; 0x05
    1ea6:	0c 1b       	sub	r16, r28
    1ea8:	1d 0b       	sbc	r17, r29
    1eaa:	40 17       	cp	r20, r16
    1eac:	51 07       	cpc	r21, r17
    1eae:	08 f4       	brcc	.+2      	; 0x1eb2 <prvWriteBytesToBuffer+0x30>
    1eb0:	8a 01       	movw	r16, r20
    1eb2:	f6 01       	movw	r30, r12
    1eb4:	84 85       	ldd	r24, Z+12	; 0x0c
    1eb6:	95 85       	ldd	r25, Z+13	; 0x0d
    1eb8:	a8 01       	movw	r20, r16
    1eba:	b5 01       	movw	r22, r10
    1ebc:	8c 0f       	add	r24, r28
    1ebe:	9d 1f       	adc	r25, r29
    1ec0:	0e 94 18 37 	call	0x6e30	; 0x6e30 <memcpy>
    1ec4:	0e 15       	cp	r16, r14
    1ec6:	1f 05       	cpc	r17, r15
    1ec8:	58 f4       	brcc	.+22     	; 0x1ee0 <prvWriteBytesToBuffer+0x5e>
    1eca:	a7 01       	movw	r20, r14
    1ecc:	40 1b       	sub	r20, r16
    1ece:	51 0b       	sbc	r21, r17
    1ed0:	b5 01       	movw	r22, r10
    1ed2:	60 0f       	add	r22, r16
    1ed4:	71 1f       	adc	r23, r17
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	84 85       	ldd	r24, Z+12	; 0x0c
    1eda:	95 85       	ldd	r25, Z+13	; 0x0d
    1edc:	0e 94 18 37 	call	0x6e30	; 0x6e30 <memcpy>
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	8e 0d       	add	r24, r14
    1ee4:	9f 1d       	adc	r25, r15
    1ee6:	f6 01       	movw	r30, r12
    1ee8:	24 81       	ldd	r18, Z+4	; 0x04
    1eea:	35 81       	ldd	r19, Z+5	; 0x05
    1eec:	82 17       	cp	r24, r18
    1eee:	93 07       	cpc	r25, r19
    1ef0:	10 f0       	brcs	.+4      	; 0x1ef6 <prvWriteBytesToBuffer+0x74>
    1ef2:	82 1b       	sub	r24, r18
    1ef4:	93 0b       	sbc	r25, r19
    1ef6:	f6 01       	movw	r30, r12
    1ef8:	93 83       	std	Z+3, r25	; 0x03
    1efa:	82 83       	std	Z+2, r24	; 0x02
    1efc:	c7 01       	movw	r24, r14
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	08 95       	ret

00001f14 <prvWriteMessageToBuffer>:
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	1f 92       	push	r1
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	5a 83       	std	Y+2, r21	; 0x02
    1f2e:	49 83       	std	Y+1, r20	; 0x01
    1f30:	21 15       	cp	r18, r1
    1f32:	31 05       	cpc	r19, r1
    1f34:	c9 f0       	breq	.+50     	; 0x1f68 <prvWriteMessageToBuffer+0x54>
    1f36:	6b 01       	movw	r12, r22
    1f38:	7c 01       	movw	r14, r24
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	86 85       	ldd	r24, Z+14	; 0x0e
    1f3e:	80 fd       	sbrc	r24, 0
    1f40:	08 c0       	rjmp	.+16     	; 0x1f52 <prvWriteMessageToBuffer+0x3e>
    1f42:	ca 01       	movw	r24, r20
    1f44:	24 17       	cp	r18, r20
    1f46:	35 07       	cpc	r19, r21
    1f48:	08 f4       	brcc	.+2      	; 0x1f4c <prvWriteMessageToBuffer+0x38>
    1f4a:	c9 01       	movw	r24, r18
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	11 c0       	rjmp	.+34     	; 0x1f74 <prvWriteMessageToBuffer+0x60>
    1f52:	20 17       	cp	r18, r16
    1f54:	31 07       	cpc	r19, r17
    1f56:	58 f0       	brcs	.+22     	; 0x1f6e <prvWriteMessageToBuffer+0x5a>
    1f58:	42 e0       	ldi	r20, 0x02	; 2
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	be 01       	movw	r22, r28
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	c7 01       	movw	r24, r14
    1f64:	8e df       	rcall	.-228    	; 0x1e82 <prvWriteBytesToBuffer>
    1f66:	06 c0       	rjmp	.+12     	; 0x1f74 <prvWriteMessageToBuffer+0x60>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	08 c0       	rjmp	.+16     	; 0x1f7e <prvWriteMessageToBuffer+0x6a>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	05 c0       	rjmp	.+10     	; 0x1f7e <prvWriteMessageToBuffer+0x6a>
    1f74:	49 81       	ldd	r20, Y+1	; 0x01
    1f76:	5a 81       	ldd	r21, Y+2	; 0x02
    1f78:	b6 01       	movw	r22, r12
    1f7a:	c7 01       	movw	r24, r14
    1f7c:	82 df       	rcall	.-252    	; 0x1e82 <prvWriteBytesToBuffer>
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	08 95       	ret

00001f94 <prvReadBytesFromBuffer>:
    1f94:	af 92       	push	r10
    1f96:	bf 92       	push	r11
    1f98:	cf 92       	push	r12
    1f9a:	df 92       	push	r13
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	7c 01       	movw	r14, r24
    1faa:	5b 01       	movw	r10, r22
    1fac:	e9 01       	movw	r28, r18
    1fae:	42 17       	cp	r20, r18
    1fb0:	53 07       	cpc	r21, r19
    1fb2:	08 f4       	brcc	.+2      	; 0x1fb6 <prvReadBytesFromBuffer+0x22>
    1fb4:	ea 01       	movw	r28, r20
    1fb6:	20 97       	sbiw	r28, 0x00	; 0
    1fb8:	79 f1       	breq	.+94     	; 0x2018 <prvReadBytesFromBuffer+0x84>
    1fba:	f7 01       	movw	r30, r14
    1fbc:	00 81       	ld	r16, Z
    1fbe:	11 81       	ldd	r17, Z+1	; 0x01
    1fc0:	c4 80       	ldd	r12, Z+4	; 0x04
    1fc2:	d5 80       	ldd	r13, Z+5	; 0x05
    1fc4:	c0 1a       	sub	r12, r16
    1fc6:	d1 0a       	sbc	r13, r17
    1fc8:	cc 15       	cp	r28, r12
    1fca:	dd 05       	cpc	r29, r13
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <prvReadBytesFromBuffer+0x3c>
    1fce:	6e 01       	movw	r12, r28
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	64 85       	ldd	r22, Z+12	; 0x0c
    1fd4:	75 85       	ldd	r23, Z+13	; 0x0d
    1fd6:	60 0f       	add	r22, r16
    1fd8:	71 1f       	adc	r23, r17
    1fda:	a6 01       	movw	r20, r12
    1fdc:	c5 01       	movw	r24, r10
    1fde:	0e 94 18 37 	call	0x6e30	; 0x6e30 <memcpy>
    1fe2:	cc 16       	cp	r12, r28
    1fe4:	dd 06       	cpc	r13, r29
    1fe6:	58 f4       	brcc	.+22     	; 0x1ffe <prvReadBytesFromBuffer+0x6a>
    1fe8:	ae 01       	movw	r20, r28
    1fea:	4c 19       	sub	r20, r12
    1fec:	5d 09       	sbc	r21, r13
    1fee:	f7 01       	movw	r30, r14
    1ff0:	64 85       	ldd	r22, Z+12	; 0x0c
    1ff2:	75 85       	ldd	r23, Z+13	; 0x0d
    1ff4:	c5 01       	movw	r24, r10
    1ff6:	8c 0d       	add	r24, r12
    1ff8:	9d 1d       	adc	r25, r13
    1ffa:	0e 94 18 37 	call	0x6e30	; 0x6e30 <memcpy>
    1ffe:	0c 0f       	add	r16, r28
    2000:	1d 1f       	adc	r17, r29
    2002:	f7 01       	movw	r30, r14
    2004:	84 81       	ldd	r24, Z+4	; 0x04
    2006:	95 81       	ldd	r25, Z+5	; 0x05
    2008:	08 17       	cp	r16, r24
    200a:	19 07       	cpc	r17, r25
    200c:	10 f0       	brcs	.+4      	; 0x2012 <prvReadBytesFromBuffer+0x7e>
    200e:	08 1b       	sub	r16, r24
    2010:	19 0b       	sbc	r17, r25
    2012:	f7 01       	movw	r30, r14
    2014:	11 83       	std	Z+1, r17	; 0x01
    2016:	00 83       	st	Z, r16
    2018:	ce 01       	movw	r24, r28
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	08 95       	ret

00002030 <xStreamBufferGenericCreate>:
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	8b 01       	movw	r16, r22
    203c:	ff 24       	eor	r15, r15
    203e:	f3 94       	inc	r15
    2040:	41 30       	cpi	r20, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <xStreamBufferGenericCreate+0x16>
    2044:	f1 2c       	mov	r15, r1
    2046:	01 15       	cp	r16, r1
    2048:	11 05       	cpc	r17, r1
    204a:	11 f4       	brne	.+4      	; 0x2050 <xStreamBufferGenericCreate+0x20>
    204c:	01 e0       	ldi	r16, 0x01	; 1
    204e:	10 e0       	ldi	r17, 0x00	; 0
    2050:	9c 01       	movw	r18, r24
    2052:	20 5f       	subi	r18, 0xF0	; 240
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	82 17       	cp	r24, r18
    2058:	93 07       	cpc	r25, r19
    205a:	b0 f4       	brcc	.+44     	; 0x2088 <xStreamBufferGenericCreate+0x58>
    205c:	ec 01       	movw	r28, r24
    205e:	21 96       	adiw	r28, 0x01	; 1
    2060:	c9 01       	movw	r24, r18
    2062:	d0 d8       	rcall	.-3680   	; 0x1204 <pvPortMalloc>
    2064:	fc 01       	movw	r30, r24
    2066:	89 2b       	or	r24, r25
    2068:	89 f0       	breq	.+34     	; 0x208c <xStreamBufferGenericCreate+0x5c>
    206a:	8f e0       	ldi	r24, 0x0F	; 15
    206c:	df 01       	movw	r26, r30
    206e:	1d 92       	st	X+, r1
    2070:	8a 95       	dec	r24
    2072:	e9 f7       	brne	.-6      	; 0x206e <xStreamBufferGenericCreate+0x3e>
    2074:	cf 01       	movw	r24, r30
    2076:	0f 96       	adiw	r24, 0x0f	; 15
    2078:	95 87       	std	Z+13, r25	; 0x0d
    207a:	84 87       	std	Z+12, r24	; 0x0c
    207c:	d5 83       	std	Z+5, r29	; 0x05
    207e:	c4 83       	std	Z+4, r28	; 0x04
    2080:	17 83       	std	Z+7, r17	; 0x07
    2082:	06 83       	std	Z+6, r16	; 0x06
    2084:	f6 86       	std	Z+14, r15	; 0x0e
    2086:	02 c0       	rjmp	.+4      	; 0x208c <xStreamBufferGenericCreate+0x5c>
    2088:	e0 e0       	ldi	r30, 0x00	; 0
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	cf 01       	movw	r24, r30
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	08 95       	ret

0000209a <xStreamBufferReset>:
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	0f 92       	push	r0
    20a0:	dc 01       	movw	r26, r24
    20a2:	18 96       	adiw	r26, 0x08	; 8
    20a4:	2d 91       	ld	r18, X+
    20a6:	3c 91       	ld	r19, X
    20a8:	19 97       	sbiw	r26, 0x09	; 9
    20aa:	23 2b       	or	r18, r19
    20ac:	51 f5       	brne	.+84     	; 0x2102 <xStreamBufferReset+0x68>
    20ae:	1a 96       	adiw	r26, 0x0a	; 10
    20b0:	2d 91       	ld	r18, X+
    20b2:	3c 91       	ld	r19, X
    20b4:	1b 97       	sbiw	r26, 0x0b	; 11
    20b6:	23 2b       	or	r18, r19
    20b8:	31 f5       	brne	.+76     	; 0x2106 <xStreamBufferReset+0x6c>
    20ba:	1e 96       	adiw	r26, 0x0e	; 14
    20bc:	2c 91       	ld	r18, X
    20be:	1e 97       	sbiw	r26, 0x0e	; 14
    20c0:	16 96       	adiw	r26, 0x06	; 6
    20c2:	4d 91       	ld	r20, X+
    20c4:	5c 91       	ld	r21, X
    20c6:	17 97       	sbiw	r26, 0x07	; 7
    20c8:	14 96       	adiw	r26, 0x04	; 4
    20ca:	6d 91       	ld	r22, X+
    20cc:	7c 91       	ld	r23, X
    20ce:	15 97       	sbiw	r26, 0x05	; 5
    20d0:	1c 96       	adiw	r26, 0x0c	; 12
    20d2:	ed 91       	ld	r30, X+
    20d4:	fc 91       	ld	r31, X
    20d6:	1d 97       	sbiw	r26, 0x0d	; 13
    20d8:	3f e0       	ldi	r19, 0x0F	; 15
    20da:	1d 92       	st	X+, r1
    20dc:	3a 95       	dec	r19
    20de:	e9 f7       	brne	.-6      	; 0x20da <xStreamBufferReset+0x40>
    20e0:	dc 01       	movw	r26, r24
    20e2:	1d 96       	adiw	r26, 0x0d	; 13
    20e4:	fc 93       	st	X, r31
    20e6:	ee 93       	st	-X, r30
    20e8:	1c 97       	sbiw	r26, 0x0c	; 12
    20ea:	15 96       	adiw	r26, 0x05	; 5
    20ec:	7c 93       	st	X, r23
    20ee:	6e 93       	st	-X, r22
    20f0:	14 97       	sbiw	r26, 0x04	; 4
    20f2:	17 96       	adiw	r26, 0x07	; 7
    20f4:	5c 93       	st	X, r21
    20f6:	4e 93       	st	-X, r20
    20f8:	16 97       	sbiw	r26, 0x06	; 6
    20fa:	1e 96       	adiw	r26, 0x0e	; 14
    20fc:	2c 93       	st	X, r18
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <xStreamBufferReset+0x6e>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <xStreamBufferReset+0x6e>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	08 95       	ret

0000210e <xStreamBufferSpacesAvailable>:
    210e:	fc 01       	movw	r30, r24
    2110:	24 81       	ldd	r18, Z+4	; 0x04
    2112:	35 81       	ldd	r19, Z+5	; 0x05
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	42 81       	ldd	r20, Z+2	; 0x02
    211a:	53 81       	ldd	r21, Z+3	; 0x03
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	84 1b       	sub	r24, r20
    2124:	95 0b       	sbc	r25, r21
    2126:	82 17       	cp	r24, r18
    2128:	93 07       	cpc	r25, r19
    212a:	10 f0       	brcs	.+4      	; 0x2130 <xStreamBufferSpacesAvailable+0x22>
    212c:	82 1b       	sub	r24, r18
    212e:	93 0b       	sbc	r25, r19
    2130:	08 95       	ret

00002132 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2132:	2f 92       	push	r2
    2134:	3f 92       	push	r3
    2136:	4f 92       	push	r4
    2138:	5f 92       	push	r5
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	2b 97       	sbiw	r28, 0x0b	; 11
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	4c 01       	movw	r8, r24
    2168:	7b 87       	std	Y+11, r23	; 0x0b
    216a:	6a 87       	std	Y+10, r22	; 0x0a
    216c:	1a 01       	movw	r2, r20
    216e:	0e 83       	std	Y+6, r16	; 0x06
    2170:	1f 83       	std	Y+7, r17	; 0x07
    2172:	28 87       	std	Y+8, r18	; 0x08
    2174:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2176:	fc 01       	movw	r30, r24
    2178:	84 81       	ldd	r24, Z+4	; 0x04
    217a:	95 81       	ldd	r25, Z+5	; 0x05
    217c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    217e:	26 85       	ldd	r18, Z+14	; 0x0e
    2180:	20 ff       	sbrs	r18, 0
    2182:	0c c0       	rjmp	.+24     	; 0x219c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2184:	2a 01       	movw	r4, r20
    2186:	f2 e0       	ldi	r31, 0x02	; 2
    2188:	4f 0e       	add	r4, r31
    218a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    218c:	84 15       	cp	r24, r4
    218e:	95 05       	cpc	r25, r5
    2190:	50 f4       	brcc	.+20     	; 0x21a6 <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2192:	1e 82       	std	Y+6, r1	; 0x06
    2194:	1f 82       	std	Y+7, r1	; 0x07
    2196:	18 86       	std	Y+8, r1	; 0x08
    2198:	19 86       	std	Y+9, r1	; 0x09
    219a:	45 c0       	rjmp	.+138    	; 0x2226 <__stack+0x27>
    219c:	2a 01       	movw	r4, r20
    219e:	84 17       	cp	r24, r20
    21a0:	95 07       	cpc	r25, r21
    21a2:	08 f4       	brcc	.+2      	; 0x21a6 <xStreamBufferSend+0x74>
    21a4:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9f 81       	ldd	r25, Y+7	; 0x07
    21aa:	a8 85       	ldd	r26, Y+8	; 0x08
    21ac:	b9 85       	ldd	r27, Y+9	; 0x09
    21ae:	89 2b       	or	r24, r25
    21b0:	8a 2b       	or	r24, r26
    21b2:	8b 2b       	or	r24, r27
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <xStreamBufferSend+0x86>
    21b6:	37 c0       	rjmp	.+110    	; 0x2226 <__stack+0x27>
    {
        vTaskSetTimeOutState( &xTimeOut );
    21b8:	ce 01       	movw	r24, r28
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	5f d7       	rcall	.+3774   	; 0x307c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21c4:	c4 01       	movw	r24, r8
    21c6:	a3 df       	rcall	.-186    	; 0x210e <xStreamBufferSpacesAvailable>
    21c8:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    21ca:	84 15       	cp	r24, r4
    21cc:	95 05       	cpc	r25, r5
    21ce:	30 f5       	brcc	.+76     	; 0x221c <__stack+0x1d>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    21da:	d4 d7       	rcall	.+4008   	; 0x3184 <xTaskGetCurrentTaskHandle>
    21dc:	f4 01       	movw	r30, r8
    21de:	93 87       	std	Z+11, r25	; 0x0b
    21e0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    21e2:	0f 90       	pop	r0
    21e4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    21e6:	ae 80       	ldd	r10, Y+6	; 0x06
    21e8:	bf 80       	ldd	r11, Y+7	; 0x07
    21ea:	c8 84       	ldd	r12, Y+8	; 0x08
    21ec:	d9 84       	ldd	r13, Y+9	; 0x09
    21ee:	e1 2c       	mov	r14, r1
    21f0:	f1 2c       	mov	r15, r1
    21f2:	00 e0       	ldi	r16, 0x00	; 0
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	98 01       	movw	r18, r16
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	ba 01       	movw	r22, r20
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	0e 94 30 1a 	call	0x3460	; 0x3460 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2204:	f4 01       	movw	r30, r8
    2206:	13 86       	std	Z+11, r1	; 0x0b
    2208:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    220a:	be 01       	movw	r22, r28
    220c:	6a 5f       	subi	r22, 0xFA	; 250
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	ce 01       	movw	r24, r28
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	5a d7       	rcall	.+3764   	; 0x30ca <xTaskCheckForTimeOut>
    2216:	88 23       	and	r24, r24
    2218:	91 f2       	breq	.-92     	; 0x21be <xStreamBufferSend+0x8c>
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x21>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2220:	61 14       	cp	r6, r1
    2222:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2224:	19 f4       	brne	.+6      	; 0x222c <__stack+0x2d>
    2226:	c4 01       	movw	r24, r8
    2228:	72 df       	rcall	.-284    	; 0x210e <xStreamBufferSpacesAvailable>
    222a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    222c:	82 01       	movw	r16, r4
    222e:	93 01       	movw	r18, r6
    2230:	a1 01       	movw	r20, r2
    2232:	6a 85       	ldd	r22, Y+10	; 0x0a
    2234:	7b 85       	ldd	r23, Y+11	; 0x0b
    2236:	c4 01       	movw	r24, r8
    2238:	6d de       	rcall	.-806    	; 0x1f14 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    223a:	6c 01       	movw	r12, r24
    223c:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    223e:	e9 f0       	breq	.+58     	; 0x227a <__stack+0x7b>
    2240:	c4 01       	movw	r24, r8
    2242:	0c de       	rcall	.-1000   	; 0x1e5c <prvBytesInBuffer>
    2244:	f4 01       	movw	r30, r8
    2246:	26 81       	ldd	r18, Z+6	; 0x06
    2248:	37 81       	ldd	r19, Z+7	; 0x07
    224a:	82 17       	cp	r24, r18
    224c:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    224e:	a8 f0       	brcs	.+42     	; 0x227a <__stack+0x7b>
    2250:	58 d3       	rcall	.+1712   	; 0x2902 <vTaskSuspendAll>
    2252:	f4 01       	movw	r30, r8
    2254:	80 85       	ldd	r24, Z+8	; 0x08
    2256:	91 85       	ldd	r25, Z+9	; 0x09
    2258:	89 2b       	or	r24, r25
    225a:	71 f0       	breq	.+28     	; 0x2278 <__stack+0x79>
    225c:	80 85       	ldd	r24, Z+8	; 0x08
    225e:	91 85       	ldd	r25, Z+9	; 0x09
    2260:	e1 2c       	mov	r14, r1
    2262:	f1 2c       	mov	r15, r1
    2264:	00 e0       	ldi	r16, 0x00	; 0
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <xTaskGenericNotify>
    2272:	f4 01       	movw	r30, r8
    2274:	11 86       	std	Z+9, r1	; 0x09
    2276:	10 86       	std	Z+8, r1	; 0x08
    2278:	88 d4       	rcall	.+2320   	; 0x2b8a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    227a:	c6 01       	movw	r24, r12
    227c:	2b 96       	adiw	r28, 0x0b	; 11
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ff 90       	pop	r15
    2292:	ef 90       	pop	r14
    2294:	df 90       	pop	r13
    2296:	cf 90       	pop	r12
    2298:	bf 90       	pop	r11
    229a:	af 90       	pop	r10
    229c:	9f 90       	pop	r9
    229e:	8f 90       	pop	r8
    22a0:	7f 90       	pop	r7
    22a2:	6f 90       	pop	r6
    22a4:	5f 90       	pop	r5
    22a6:	4f 90       	pop	r4
    22a8:	3f 90       	pop	r3
    22aa:	2f 90       	pop	r2
    22ac:	08 95       	ret

000022ae <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
    22c4:	7b 01       	movw	r14, r22
    22c6:	5a 01       	movw	r10, r20
    22c8:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    22ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    22cc:	80 ff       	sbrs	r24, 0
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    22d0:	8a 01       	movw	r16, r20
    22d2:	0e 5f       	subi	r16, 0xFE	; 254
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    22d8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    22da:	ce 01       	movw	r24, r28
    22dc:	18 df       	rcall	.-464    	; 0x210e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    22de:	9c 01       	movw	r18, r24
    22e0:	a5 01       	movw	r20, r10
    22e2:	b7 01       	movw	r22, r14
    22e4:	ce 01       	movw	r24, r28
    22e6:	16 de       	rcall	.-980    	; 0x1f14 <prvWriteMessageToBuffer>
    22e8:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    22ea:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    22ec:	c1 f0       	breq	.+48     	; 0x231e <xStreamBufferSendFromISR+0x70>
    22ee:	ce 01       	movw	r24, r28
    22f0:	b5 dd       	rcall	.-1174   	; 0x1e5c <prvBytesInBuffer>
    22f2:	2e 81       	ldd	r18, Y+6	; 0x06
    22f4:	3f 81       	ldd	r19, Y+7	; 0x07
    22f6:	82 17       	cp	r24, r18
    22f8:	93 07       	cpc	r25, r19
    22fa:	88 f0       	brcs	.+34     	; 0x231e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    22fc:	88 85       	ldd	r24, Y+8	; 0x08
    22fe:	99 85       	ldd	r25, Y+9	; 0x09
    2300:	89 2b       	or	r24, r25
    2302:	69 f0       	breq	.+26     	; 0x231e <xStreamBufferSendFromISR+0x70>
    2304:	88 85       	ldd	r24, Y+8	; 0x08
    2306:	99 85       	ldd	r25, Y+9	; 0x09
    2308:	e1 2c       	mov	r14, r1
    230a:	f1 2c       	mov	r15, r1
    230c:	00 e0       	ldi	r16, 0x00	; 0
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	a9 01       	movw	r20, r18
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	0e 94 cc 1b 	call	0x3798	; 0x3798 <xTaskGenericNotifyFromISR>
    231a:	19 86       	std	Y+9, r1	; 0x09
    231c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    231e:	c5 01       	movw	r24, r10
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	08 95       	ret

00002336 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2336:	2f 92       	push	r2
    2338:	3f 92       	push	r3
    233a:	4f 92       	push	r4
    233c:	5f 92       	push	r5
    233e:	6f 92       	push	r6
    2340:	7f 92       	push	r7
    2342:	8f 92       	push	r8
    2344:	9f 92       	push	r9
    2346:	af 92       	push	r10
    2348:	bf 92       	push	r11
    234a:	cf 92       	push	r12
    234c:	df 92       	push	r13
    234e:	ef 92       	push	r14
    2350:	ff 92       	push	r15
    2352:	0f 93       	push	r16
    2354:	1f 93       	push	r17
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	1f 92       	push	r1
    235c:	1f 92       	push	r1
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	4c 01       	movw	r8, r24
    2364:	1b 01       	movw	r2, r22
    2366:	2a 01       	movw	r4, r20
    2368:	58 01       	movw	r10, r16
    236a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    236c:	fc 01       	movw	r30, r24
    236e:	86 85       	ldd	r24, Z+14	; 0x0e
    2370:	80 fd       	sbrc	r24, 0
    2372:	03 c0       	rjmp	.+6      	; 0x237a <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2374:	61 2c       	mov	r6, r1
    2376:	71 2c       	mov	r7, r1
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    237a:	68 94       	set
    237c:	66 24       	eor	r6, r6
    237e:	61 f8       	bld	r6, 1
    2380:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2382:	a1 14       	cp	r10, r1
    2384:	b1 04       	cpc	r11, r1
    2386:	c1 04       	cpc	r12, r1
    2388:	d1 04       	cpc	r13, r1
    238a:	49 f1       	breq	.+82     	; 0x23de <xStreamBufferReceive+0xa8>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2392:	c4 01       	movw	r24, r8
    2394:	63 dd       	rcall	.-1338   	; 0x1e5c <prvBytesInBuffer>
    2396:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2398:	68 16       	cp	r6, r24
    239a:	79 06       	cpc	r7, r25
    239c:	48 f0       	brcs	.+18     	; 0x23b0 <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    23a8:	ed d6       	rcall	.+3546   	; 0x3184 <xTaskGetCurrentTaskHandle>
    23aa:	f4 01       	movw	r30, r8
    23ac:	91 87       	std	Z+9, r25	; 0x09
    23ae:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    23b0:	0f 90       	pop	r0
    23b2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    23b4:	60 16       	cp	r6, r16
    23b6:	71 06       	cpc	r7, r17
    23b8:	c0 f0       	brcs	.+48     	; 0x23ea <xStreamBufferReceive+0xb4>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    23ba:	e1 2c       	mov	r14, r1
    23bc:	f1 2c       	mov	r15, r1
    23be:	00 e0       	ldi	r16, 0x00	; 0
    23c0:	10 e0       	ldi	r17, 0x00	; 0
    23c2:	98 01       	movw	r18, r16
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	ba 01       	movw	r22, r20
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0e 94 30 1a 	call	0x3460	; 0x3460 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    23d0:	f4 01       	movw	r30, r8
    23d2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    23d4:	10 86       	std	Z+8, r1	; 0x08
    23d6:	c4 01       	movw	r24, r8
    23d8:	41 dd       	rcall	.-1406   	; 0x1e5c <prvBytesInBuffer>
    23da:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <xStreamBufferReceive+0xae>
    23de:	c4 01       	movw	r24, r8
    23e0:	3d dd       	rcall	.-1414   	; 0x1e5c <prvBytesInBuffer>
    23e2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    23e4:	60 16       	cp	r6, r16
    23e6:	71 06       	cpc	r7, r17
    23e8:	c8 f5       	brcc	.+114    	; 0x245c <xStreamBufferReceive+0x126>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    23ea:	61 14       	cp	r6, r1
    23ec:	71 04       	cpc	r7, r1
    23ee:	c1 f0       	breq	.+48     	; 0x2420 <xStreamBufferReceive+0xea>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    23f0:	f4 01       	movw	r30, r8
    23f2:	c0 80       	ld	r12, Z
    23f4:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    23f6:	98 01       	movw	r18, r16
    23f8:	a3 01       	movw	r20, r6
    23fa:	be 01       	movw	r22, r28
    23fc:	6f 5f       	subi	r22, 0xFF	; 255
    23fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2400:	c4 01       	movw	r24, r8
    2402:	c8 dd       	rcall	.-1136   	; 0x1f94 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2408:	06 19       	sub	r16, r6
    240a:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    240c:	48 16       	cp	r4, r24
    240e:	59 06       	cpc	r5, r25
    2410:	30 f4       	brcc	.+12     	; 0x241e <xStreamBufferReceive+0xe8>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2412:	f4 01       	movw	r30, r8
    2414:	d1 82       	std	Z+1, r13	; 0x01
    2416:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    2418:	41 2c       	mov	r4, r1
    241a:	51 2c       	mov	r5, r1
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <xStreamBufferReceive+0xea>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    241e:	2c 01       	movw	r4, r24
    2420:	98 01       	movw	r18, r16
    2422:	a2 01       	movw	r20, r4
    2424:	b1 01       	movw	r22, r2
    2426:	c4 01       	movw	r24, r8
    2428:	b5 dd       	rcall	.-1174   	; 0x1f94 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    242a:	6c 01       	movw	r12, r24
    242c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    242e:	c1 f0       	breq	.+48     	; 0x2460 <xStreamBufferReceive+0x12a>
    2430:	68 d2       	rcall	.+1232   	; 0x2902 <vTaskSuspendAll>
    2432:	f4 01       	movw	r30, r8
    2434:	82 85       	ldd	r24, Z+10	; 0x0a
    2436:	93 85       	ldd	r25, Z+11	; 0x0b
    2438:	89 2b       	or	r24, r25
    243a:	71 f0       	breq	.+28     	; 0x2458 <xStreamBufferReceive+0x122>
    243c:	82 85       	ldd	r24, Z+10	; 0x0a
    243e:	93 85       	ldd	r25, Z+11	; 0x0b
    2440:	e1 2c       	mov	r14, r1
    2442:	f1 2c       	mov	r15, r1
    2444:	00 e0       	ldi	r16, 0x00	; 0
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	a9 01       	movw	r20, r18
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <xTaskGenericNotify>
    2452:	f4 01       	movw	r30, r8
    2454:	13 86       	std	Z+11, r1	; 0x0b
    2456:	12 86       	std	Z+10, r1	; 0x0a
    2458:	98 d3       	rcall	.+1840   	; 0x2b8a <xTaskResumeAll>
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <xStreamBufferReceive+0x12a>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    245c:	c1 2c       	mov	r12, r1
    245e:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2460:	c6 01       	movw	r24, r12
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	df 90       	pop	r13
    2474:	cf 90       	pop	r12
    2476:	bf 90       	pop	r11
    2478:	af 90       	pop	r10
    247a:	9f 90       	pop	r9
    247c:	8f 90       	pop	r8
    247e:	7f 90       	pop	r7
    2480:	6f 90       	pop	r6
    2482:	5f 90       	pop	r5
    2484:	4f 90       	pop	r4
    2486:	3f 90       	pop	r3
    2488:	2f 90       	pop	r2
    248a:	08 95       	ret

0000248c <prvResetNextTaskUnblockTime>:
    248c:	e0 91 73 12 	lds	r30, 0x1273	; 0x801273 <pxDelayedTaskList>
    2490:	f0 91 74 12 	lds	r31, 0x1274	; 0x801274 <pxDelayedTaskList+0x1>
    2494:	80 81       	ld	r24, Z
    2496:	81 11       	cpse	r24, r1
    2498:	0c c0       	rjmp	.+24     	; 0x24b2 <prvResetNextTaskUnblockTime+0x26>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	9f ef       	ldi	r25, 0xFF	; 255
    249e:	dc 01       	movw	r26, r24
    24a0:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xNextTaskUnblockTime>
    24a4:	90 93 3e 12 	sts	0x123E, r25	; 0x80123e <xNextTaskUnblockTime+0x1>
    24a8:	a0 93 3f 12 	sts	0x123F, r26	; 0x80123f <xNextTaskUnblockTime+0x2>
    24ac:	b0 93 40 12 	sts	0x1240, r27	; 0x801240 <xNextTaskUnblockTime+0x3>
    24b0:	08 95       	ret
    24b2:	e0 91 73 12 	lds	r30, 0x1273	; 0x801273 <pxDelayedTaskList>
    24b6:	f0 91 74 12 	lds	r31, 0x1274	; 0x801274 <pxDelayedTaskList+0x1>
    24ba:	07 80       	ldd	r0, Z+7	; 0x07
    24bc:	f0 85       	ldd	r31, Z+8	; 0x08
    24be:	e0 2d       	mov	r30, r0
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	a2 81       	ldd	r26, Z+2	; 0x02
    24c6:	b3 81       	ldd	r27, Z+3	; 0x03
    24c8:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xNextTaskUnblockTime>
    24cc:	90 93 3e 12 	sts	0x123E, r25	; 0x80123e <xNextTaskUnblockTime+0x1>
    24d0:	a0 93 3f 12 	sts	0x123F, r26	; 0x80123f <xNextTaskUnblockTime+0x2>
    24d4:	b0 93 40 12 	sts	0x1240, r27	; 0x801240 <xNextTaskUnblockTime+0x3>
    24d8:	08 95       	ret

000024da <prvAddCurrentTaskToDelayedList>:
    24da:	8f 92       	push	r8
    24dc:	9f 92       	push	r9
    24de:	af 92       	push	r10
    24e0:	bf 92       	push	r11
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	6b 01       	movw	r12, r22
    24f0:	7c 01       	movw	r14, r24
    24f2:	c4 2f       	mov	r28, r20
    24f4:	80 90 4a 12 	lds	r8, 0x124A	; 0x80124a <xTickCount>
    24f8:	90 90 4b 12 	lds	r9, 0x124B	; 0x80124b <xTickCount+0x1>
    24fc:	a0 90 4c 12 	lds	r10, 0x124C	; 0x80124c <xTickCount+0x2>
    2500:	b0 90 4d 12 	lds	r11, 0x124D	; 0x80124d <xTickCount+0x3>
    2504:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2508:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    250c:	02 96       	adiw	r24, 0x02	; 2
    250e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	c8 16       	cp	r12, r24
    2516:	d8 06       	cpc	r13, r24
    2518:	e8 06       	cpc	r14, r24
    251a:	f8 06       	cpc	r15, r24
    251c:	b1 f5       	brne	.+108    	; 0x258a <prvAddCurrentTaskToDelayedList+0xb0>
    251e:	cc 23       	and	r28, r28
    2520:	a1 f1       	breq	.+104    	; 0x258a <prvAddCurrentTaskToDelayedList+0xb0>
    2522:	ef e4       	ldi	r30, 0x4F	; 79
    2524:	f2 e1       	ldi	r31, 0x12	; 18
    2526:	a1 81       	ldd	r26, Z+1	; 0x01
    2528:	b2 81       	ldd	r27, Z+2	; 0x02
    252a:	c0 91 f9 12 	lds	r28, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    252e:	d0 91 fa 12 	lds	r29, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2532:	bf 83       	std	Y+7, r27	; 0x07
    2534:	ae 83       	std	Y+6, r26	; 0x06
    2536:	c0 91 f9 12 	lds	r28, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    253a:	d0 91 fa 12 	lds	r29, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    253e:	16 96       	adiw	r26, 0x06	; 6
    2540:	8d 91       	ld	r24, X+
    2542:	9c 91       	ld	r25, X
    2544:	17 97       	sbiw	r26, 0x07	; 7
    2546:	99 87       	std	Y+9, r25	; 0x09
    2548:	88 87       	std	Y+8, r24	; 0x08
    254a:	16 96       	adiw	r26, 0x06	; 6
    254c:	cd 91       	ld	r28, X+
    254e:	dc 91       	ld	r29, X
    2550:	17 97       	sbiw	r26, 0x07	; 7
    2552:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2556:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    255a:	02 96       	adiw	r24, 0x02	; 2
    255c:	9d 83       	std	Y+5, r25	; 0x05
    255e:	8c 83       	std	Y+4, r24	; 0x04
    2560:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2564:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2568:	02 96       	adiw	r24, 0x02	; 2
    256a:	17 96       	adiw	r26, 0x07	; 7
    256c:	9c 93       	st	X, r25
    256e:	8e 93       	st	-X, r24
    2570:	16 97       	sbiw	r26, 0x06	; 6
    2572:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2576:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    257a:	1d 96       	adiw	r26, 0x0d	; 13
    257c:	fc 93       	st	X, r31
    257e:	ee 93       	st	-X, r30
    2580:	1c 97       	sbiw	r26, 0x0c	; 12
    2582:	80 81       	ld	r24, Z
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	80 83       	st	Z, r24
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <prvAddCurrentTaskToDelayedList+0x12e>
    258a:	c8 0c       	add	r12, r8
    258c:	d9 1c       	adc	r13, r9
    258e:	ea 1c       	adc	r14, r10
    2590:	fb 1c       	adc	r15, r11
    2592:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2596:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    259a:	c2 82       	std	Z+2, r12	; 0x02
    259c:	d3 82       	std	Z+3, r13	; 0x03
    259e:	e4 82       	std	Z+4, r14	; 0x04
    25a0:	f5 82       	std	Z+5, r15	; 0x05
    25a2:	c8 14       	cp	r12, r8
    25a4:	d9 04       	cpc	r13, r9
    25a6:	ea 04       	cpc	r14, r10
    25a8:	fb 04       	cpc	r15, r11
    25aa:	68 f4       	brcc	.+26     	; 0x25c6 <prvAddCurrentTaskToDelayedList+0xec>
    25ac:	60 91 f9 12 	lds	r22, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    25b0:	70 91 fa 12 	lds	r23, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    25b4:	80 91 71 12 	lds	r24, 0x1271	; 0x801271 <pxOverflowDelayedTaskList>
    25b8:	90 91 72 12 	lds	r25, 0x1272	; 0x801272 <pxOverflowDelayedTaskList+0x1>
    25bc:	6e 5f       	subi	r22, 0xFE	; 254
    25be:	7f 4f       	sbci	r23, 0xFF	; 255
    25c0:	0e 94 19 0a 	call	0x1432	; 0x1432 <vListInsert>
    25c4:	21 c0       	rjmp	.+66     	; 0x2608 <prvAddCurrentTaskToDelayedList+0x12e>
    25c6:	60 91 f9 12 	lds	r22, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    25ca:	70 91 fa 12 	lds	r23, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    25ce:	80 91 73 12 	lds	r24, 0x1273	; 0x801273 <pxDelayedTaskList>
    25d2:	90 91 74 12 	lds	r25, 0x1274	; 0x801274 <pxDelayedTaskList+0x1>
    25d6:	6e 5f       	subi	r22, 0xFE	; 254
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	0e 94 19 0a 	call	0x1432	; 0x1432 <vListInsert>
    25de:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <xNextTaskUnblockTime>
    25e2:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <xNextTaskUnblockTime+0x1>
    25e6:	a0 91 3f 12 	lds	r26, 0x123F	; 0x80123f <xNextTaskUnblockTime+0x2>
    25ea:	b0 91 40 12 	lds	r27, 0x1240	; 0x801240 <xNextTaskUnblockTime+0x3>
    25ee:	c8 16       	cp	r12, r24
    25f0:	d9 06       	cpc	r13, r25
    25f2:	ea 06       	cpc	r14, r26
    25f4:	fb 06       	cpc	r15, r27
    25f6:	40 f4       	brcc	.+16     	; 0x2608 <prvAddCurrentTaskToDelayedList+0x12e>
    25f8:	c0 92 3d 12 	sts	0x123D, r12	; 0x80123d <xNextTaskUnblockTime>
    25fc:	d0 92 3e 12 	sts	0x123E, r13	; 0x80123e <xNextTaskUnblockTime+0x1>
    2600:	e0 92 3f 12 	sts	0x123F, r14	; 0x80123f <xNextTaskUnblockTime+0x2>
    2604:	f0 92 40 12 	sts	0x1240, r15	; 0x801240 <xNextTaskUnblockTime+0x3>
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	df 90       	pop	r13
    2612:	cf 90       	pop	r12
    2614:	bf 90       	pop	r11
    2616:	af 90       	pop	r10
    2618:	9f 90       	pop	r9
    261a:	8f 90       	pop	r8
    261c:	08 95       	ret

0000261e <xTaskCreate>:
    261e:	4f 92       	push	r4
    2620:	5f 92       	push	r5
    2622:	6f 92       	push	r6
    2624:	7f 92       	push	r7
    2626:	8f 92       	push	r8
    2628:	9f 92       	push	r9
    262a:	af 92       	push	r10
    262c:	bf 92       	push	r11
    262e:	cf 92       	push	r12
    2630:	df 92       	push	r13
    2632:	ef 92       	push	r14
    2634:	ff 92       	push	r15
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	4c 01       	movw	r8, r24
    2640:	6b 01       	movw	r12, r22
    2642:	5a 01       	movw	r10, r20
    2644:	29 01       	movw	r4, r18
    2646:	ca 01       	movw	r24, r20
    2648:	0e 94 02 09 	call	0x1204	; 0x1204 <pvPortMalloc>
    264c:	3c 01       	movw	r6, r24
    264e:	89 2b       	or	r24, r25
    2650:	09 f4       	brne	.+2      	; 0x2654 <xTaskCreate+0x36>
    2652:	0d c1       	rjmp	.+538    	; 0x286e <xTaskCreate+0x250>
    2654:	84 e3       	ldi	r24, 0x34	; 52
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 02 09 	call	0x1204	; 0x1204 <pvPortMalloc>
    265c:	ec 01       	movw	r28, r24
    265e:	89 2b       	or	r24, r25
    2660:	99 f0       	breq	.+38     	; 0x2688 <xTaskCreate+0x6a>
    2662:	7c 8e       	std	Y+28, r7	; 0x1c
    2664:	6b 8e       	std	Y+27, r6	; 0x1b
    2666:	a5 01       	movw	r20, r10
    2668:	65 ea       	ldi	r22, 0xA5	; 165
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	c3 01       	movw	r24, r6
    266e:	0e 94 21 37 	call	0x6e42	; 0x6e42 <memset>
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	a8 1a       	sub	r10, r24
    2676:	b1 08       	sbc	r11, r1
    2678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267c:	a8 0e       	add	r10, r24
    267e:	b9 1e       	adc	r11, r25
    2680:	c1 14       	cp	r12, r1
    2682:	d1 04       	cpc	r13, r1
    2684:	29 f4       	brne	.+10     	; 0x2690 <xTaskCreate+0x72>
    2686:	20 c0       	rjmp	.+64     	; 0x26c8 <xTaskCreate+0xaa>
    2688:	c3 01       	movw	r24, r6
    268a:	0e 94 ca 09 	call	0x1394	; 0x1394 <vPortFree>
    268e:	ef c0       	rjmp	.+478    	; 0x286e <xTaskCreate+0x250>
    2690:	d6 01       	movw	r26, r12
    2692:	8c 91       	ld	r24, X
    2694:	8d 8f       	std	Y+29, r24	; 0x1d
    2696:	8c 91       	ld	r24, X
    2698:	88 23       	and	r24, r24
    269a:	a1 f0       	breq	.+40     	; 0x26c4 <xTaskCreate+0xa6>
    269c:	ae 01       	movw	r20, r28
    269e:	42 5e       	subi	r20, 0xE2	; 226
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	f6 01       	movw	r30, r12
    26a4:	31 96       	adiw	r30, 0x01	; 1
    26a6:	b0 e1       	ldi	r27, 0x10	; 16
    26a8:	cb 0e       	add	r12, r27
    26aa:	d1 1c       	adc	r13, r1
    26ac:	cf 01       	movw	r24, r30
    26ae:	21 91       	ld	r18, Z+
    26b0:	da 01       	movw	r26, r20
    26b2:	2d 93       	st	X+, r18
    26b4:	ad 01       	movw	r20, r26
    26b6:	dc 01       	movw	r26, r24
    26b8:	8c 91       	ld	r24, X
    26ba:	88 23       	and	r24, r24
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <xTaskCreate+0xa6>
    26be:	ce 16       	cp	r12, r30
    26c0:	df 06       	cpc	r13, r31
    26c2:	a1 f7       	brne	.-24     	; 0x26ac <xTaskCreate+0x8e>
    26c4:	1c a6       	std	Y+44, r1	; 0x2c
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <xTaskCreate+0xac>
    26c8:	1d 8e       	std	Y+29, r1	; 0x1d
    26ca:	0a 30       	cpi	r16, 0x0A	; 10
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <xTaskCreate+0xb2>
    26ce:	09 e0       	ldi	r16, 0x09	; 9
    26d0:	0a 8f       	std	Y+26, r16	; 0x1a
    26d2:	0d a7       	std	Y+45, r16	; 0x2d
    26d4:	1e a6       	std	Y+46, r1	; 0x2e
    26d6:	6e 01       	movw	r12, r28
    26d8:	b2 e0       	ldi	r27, 0x02	; 2
    26da:	cb 0e       	add	r12, r27
    26dc:	d1 1c       	adc	r13, r1
    26de:	c6 01       	movw	r24, r12
    26e0:	0e 94 15 0a 	call	0x142a	; 0x142a <vListInitialiseItem>
    26e4:	ce 01       	movw	r24, r28
    26e6:	0e 96       	adiw	r24, 0x0e	; 14
    26e8:	0e 94 15 0a 	call	0x142a	; 0x142a <vListInitialiseItem>
    26ec:	db 87       	std	Y+11, r29	; 0x0b
    26ee:	ca 87       	std	Y+10, r28	; 0x0a
    26f0:	8a e0       	ldi	r24, 0x0A	; 10
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 e0       	ldi	r26, 0x00	; 0
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	80 1b       	sub	r24, r16
    26fa:	91 09       	sbc	r25, r1
    26fc:	a1 09       	sbc	r26, r1
    26fe:	b1 09       	sbc	r27, r1
    2700:	8e 87       	std	Y+14, r24	; 0x0e
    2702:	9f 87       	std	Y+15, r25	; 0x0f
    2704:	a8 8b       	std	Y+16, r26	; 0x10
    2706:	b9 8b       	std	Y+17, r27	; 0x11
    2708:	df 8b       	std	Y+23, r29	; 0x17
    270a:	ce 8b       	std	Y+22, r28	; 0x16
    270c:	84 e0       	ldi	r24, 0x04	; 4
    270e:	fe 01       	movw	r30, r28
    2710:	bf 96       	adiw	r30, 0x2f	; 47
    2712:	df 01       	movw	r26, r30
    2714:	1d 92       	st	X+, r1
    2716:	8a 95       	dec	r24
    2718:	e9 f7       	brne	.-6      	; 0x2714 <xTaskCreate+0xf6>
    271a:	1b aa       	std	Y+51, r1	; 0x33
    271c:	a2 01       	movw	r20, r4
    271e:	b4 01       	movw	r22, r8
    2720:	c5 01       	movw	r24, r10
    2722:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <pxPortInitialiseStack>
    2726:	99 83       	std	Y+1, r25	; 0x01
    2728:	88 83       	st	Y, r24
    272a:	e1 14       	cp	r14, r1
    272c:	f1 04       	cpc	r15, r1
    272e:	19 f0       	breq	.+6      	; 0x2736 <xTaskCreate+0x118>
    2730:	f7 01       	movw	r30, r14
    2732:	d1 83       	std	Z+1, r29	; 0x01
    2734:	c0 83       	st	Z, r28
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	0f 92       	push	r0
    273c:	80 91 4e 12 	lds	r24, 0x124E	; 0x80124e <uxCurrentNumberOfTasks>
    2740:	8f 5f       	subi	r24, 0xFF	; 255
    2742:	80 93 4e 12 	sts	0x124E, r24	; 0x80124e <uxCurrentNumberOfTasks>
    2746:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    274a:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    274e:	89 2b       	or	r24, r25
    2750:	d1 f5       	brne	.+116    	; 0x27c6 <xTaskCreate+0x1a8>
    2752:	d0 93 fa 12 	sts	0x12FA, r29	; 0x8012fa <pxCurrentTCB+0x1>
    2756:	c0 93 f9 12 	sts	0x12F9, r28	; 0x8012f9 <pxCurrentTCB>
    275a:	80 91 4e 12 	lds	r24, 0x124E	; 0x80124e <uxCurrentNumberOfTasks>
    275e:	81 30       	cpi	r24, 0x01	; 1
    2760:	09 f0       	breq	.+2      	; 0x2764 <xTaskCreate+0x146>
    2762:	41 c0       	rjmp	.+130    	; 0x27e6 <xTaskCreate+0x1c8>
    2764:	0b e8       	ldi	r16, 0x8B	; 139
    2766:	12 e1       	ldi	r17, 0x12	; 18
    2768:	0f 2e       	mov	r0, r31
    276a:	f9 ef       	ldi	r31, 0xF9	; 249
    276c:	ef 2e       	mov	r14, r31
    276e:	f2 e1       	ldi	r31, 0x12	; 18
    2770:	ff 2e       	mov	r15, r31
    2772:	f0 2d       	mov	r31, r0
    2774:	c8 01       	movw	r24, r16
    2776:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    277a:	05 5f       	subi	r16, 0xF5	; 245
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	0e 15       	cp	r16, r14
    2780:	1f 05       	cpc	r17, r15
    2782:	c1 f7       	brne	.-16     	; 0x2774 <xTaskCreate+0x156>
    2784:	80 e8       	ldi	r24, 0x80	; 128
    2786:	92 e1       	ldi	r25, 0x12	; 18
    2788:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    278c:	85 e7       	ldi	r24, 0x75	; 117
    278e:	92 e1       	ldi	r25, 0x12	; 18
    2790:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    2794:	86 e6       	ldi	r24, 0x66	; 102
    2796:	92 e1       	ldi	r25, 0x12	; 18
    2798:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    279c:	8b e5       	ldi	r24, 0x5B	; 91
    279e:	92 e1       	ldi	r25, 0x12	; 18
    27a0:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    27a4:	8f e4       	ldi	r24, 0x4F	; 79
    27a6:	92 e1       	ldi	r25, 0x12	; 18
    27a8:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    27ac:	80 e8       	ldi	r24, 0x80	; 128
    27ae:	92 e1       	ldi	r25, 0x12	; 18
    27b0:	90 93 74 12 	sts	0x1274, r25	; 0x801274 <pxDelayedTaskList+0x1>
    27b4:	80 93 73 12 	sts	0x1273, r24	; 0x801273 <pxDelayedTaskList>
    27b8:	85 e7       	ldi	r24, 0x75	; 117
    27ba:	92 e1       	ldi	r25, 0x12	; 18
    27bc:	90 93 72 12 	sts	0x1272, r25	; 0x801272 <pxOverflowDelayedTaskList+0x1>
    27c0:	80 93 71 12 	sts	0x1271, r24	; 0x801271 <pxOverflowDelayedTaskList>
    27c4:	10 c0       	rjmp	.+32     	; 0x27e6 <xTaskCreate+0x1c8>
    27c6:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <xSchedulerRunning>
    27ca:	81 11       	cpse	r24, r1
    27cc:	0c c0       	rjmp	.+24     	; 0x27e6 <xTaskCreate+0x1c8>
    27ce:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    27d2:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    27d6:	92 8d       	ldd	r25, Z+26	; 0x1a
    27d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27da:	89 17       	cp	r24, r25
    27dc:	20 f0       	brcs	.+8      	; 0x27e6 <xTaskCreate+0x1c8>
    27de:	d0 93 fa 12 	sts	0x12FA, r29	; 0x8012fa <pxCurrentTCB+0x1>
    27e2:	c0 93 f9 12 	sts	0x12F9, r28	; 0x8012f9 <pxCurrentTCB>
    27e6:	80 91 41 12 	lds	r24, 0x1241	; 0x801241 <uxTaskNumber>
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	80 93 41 12 	sts	0x1241, r24	; 0x801241 <uxTaskNumber>
    27f0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27f2:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    27f6:	8e 17       	cp	r24, r30
    27f8:	10 f4       	brcc	.+4      	; 0x27fe <xTaskCreate+0x1e0>
    27fa:	e0 93 49 12 	sts	0x1249, r30	; 0x801249 <uxTopReadyPriority>
    27fe:	8b e0       	ldi	r24, 0x0B	; 11
    2800:	8e 9f       	mul	r24, r30
    2802:	f0 01       	movw	r30, r0
    2804:	11 24       	eor	r1, r1
    2806:	e5 57       	subi	r30, 0x75	; 117
    2808:	fd 4e       	sbci	r31, 0xED	; 237
    280a:	01 80       	ldd	r0, Z+1	; 0x01
    280c:	f2 81       	ldd	r31, Z+2	; 0x02
    280e:	e0 2d       	mov	r30, r0
    2810:	ff 83       	std	Y+7, r31	; 0x07
    2812:	ee 83       	std	Y+6, r30	; 0x06
    2814:	26 81       	ldd	r18, Z+6	; 0x06
    2816:	37 81       	ldd	r19, Z+7	; 0x07
    2818:	39 87       	std	Y+9, r19	; 0x09
    281a:	28 87       	std	Y+8, r18	; 0x08
    281c:	a6 81       	ldd	r26, Z+6	; 0x06
    281e:	b7 81       	ldd	r27, Z+7	; 0x07
    2820:	15 96       	adiw	r26, 0x05	; 5
    2822:	dc 92       	st	X, r13
    2824:	ce 92       	st	-X, r12
    2826:	14 97       	sbiw	r26, 0x04	; 4
    2828:	d7 82       	std	Z+7, r13	; 0x07
    282a:	c6 82       	std	Z+6, r12	; 0x06
    282c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    282e:	8e 9f       	mul	r24, r30
    2830:	f0 01       	movw	r30, r0
    2832:	11 24       	eor	r1, r1
    2834:	e5 57       	subi	r30, 0x75	; 117
    2836:	fd 4e       	sbci	r31, 0xED	; 237
    2838:	fd 87       	std	Y+13, r31	; 0x0d
    283a:	ec 87       	std	Y+12, r30	; 0x0c
    283c:	80 81       	ld	r24, Z
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	80 83       	st	Z, r24
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <xSchedulerRunning>
    284a:	88 23       	and	r24, r24
    284c:	61 f0       	breq	.+24     	; 0x2866 <xTaskCreate+0x248>
    284e:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2852:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2856:	92 8d       	ldd	r25, Z+26	; 0x1a
    2858:	8a 8d       	ldd	r24, Y+26	; 0x1a
    285a:	98 17       	cp	r25, r24
    285c:	30 f4       	brcc	.+12     	; 0x286a <xTaskCreate+0x24c>
    285e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <xTaskCreate+0x252>
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <xTaskCreate+0x252>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <xTaskCreate+0x252>
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	1f 91       	pop	r17
    2876:	0f 91       	pop	r16
    2878:	ff 90       	pop	r15
    287a:	ef 90       	pop	r14
    287c:	df 90       	pop	r13
    287e:	cf 90       	pop	r12
    2880:	bf 90       	pop	r11
    2882:	af 90       	pop	r10
    2884:	9f 90       	pop	r9
    2886:	8f 90       	pop	r8
    2888:	7f 90       	pop	r7
    288a:	6f 90       	pop	r6
    288c:	5f 90       	pop	r5
    288e:	4f 90       	pop	r4
    2890:	08 95       	ret

00002892 <vTaskStartScheduler>:
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	0f 2e       	mov	r0, r31
    289a:	fb e3       	ldi	r31, 0x3B	; 59
    289c:	ef 2e       	mov	r14, r31
    289e:	f2 e1       	ldi	r31, 0x12	; 18
    28a0:	ff 2e       	mov	r15, r31
    28a2:	f0 2d       	mov	r31, r0
    28a4:	00 e0       	ldi	r16, 0x00	; 0
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 ec       	ldi	r20, 0xC0	; 192
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	6f e7       	ldi	r22, 0x7F	; 127
    28b0:	73 e0       	ldi	r23, 0x03	; 3
    28b2:	8e e0       	ldi	r24, 0x0E	; 14
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	b3 de       	rcall	.-666    	; 0x261e <xTaskCreate>
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	e9 f4       	brne	.+58     	; 0x28f6 <vTaskStartScheduler+0x64>
    28bc:	0e 94 76 1d 	call	0x3aec	; 0x3aec <xTimerCreateTimerTask>
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	c9 f4       	brne	.+50     	; 0x28f6 <vTaskStartScheduler+0x64>
    28c4:	f8 94       	cli
    28c6:	8f ef       	ldi	r24, 0xFF	; 255
    28c8:	9f ef       	ldi	r25, 0xFF	; 255
    28ca:	dc 01       	movw	r26, r24
    28cc:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xNextTaskUnblockTime>
    28d0:	90 93 3e 12 	sts	0x123E, r25	; 0x80123e <xNextTaskUnblockTime+0x1>
    28d4:	a0 93 3f 12 	sts	0x123F, r26	; 0x80123f <xNextTaskUnblockTime+0x2>
    28d8:	b0 93 40 12 	sts	0x1240, r27	; 0x801240 <xNextTaskUnblockTime+0x3>
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 48 12 	sts	0x1248, r24	; 0x801248 <xSchedulerRunning>
    28e2:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <xTickCount>
    28e6:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <xTickCount+0x1>
    28ea:	10 92 4c 12 	sts	0x124C, r1	; 0x80124c <xTickCount+0x2>
    28ee:	10 92 4d 12 	sts	0x124D, r1	; 0x80124d <xTickCount+0x3>
    28f2:	0e 94 94 0a 	call	0x1528	; 0x1528 <xPortStartScheduler>
    28f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	08 95       	ret

00002902 <vTaskSuspendAll>:
    2902:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	80 93 3a 12 	sts	0x123A, r24	; 0x80123a <uxSchedulerSuspended>
    290c:	08 95       	ret

0000290e <xTaskGetTickCount>:
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	0f 92       	push	r0
    2914:	60 91 4a 12 	lds	r22, 0x124A	; 0x80124a <xTickCount>
    2918:	70 91 4b 12 	lds	r23, 0x124B	; 0x80124b <xTickCount+0x1>
    291c:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <xTickCount+0x2>
    2920:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <xTickCount+0x3>
    2924:	0f 90       	pop	r0
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	08 95       	ret

0000292a <xTaskIncrementTick>:
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    293e:	81 11       	cpse	r24, r1
    2940:	07 c1       	rjmp	.+526    	; 0x2b50 <xTaskIncrementTick+0x226>
    2942:	c0 90 4a 12 	lds	r12, 0x124A	; 0x80124a <xTickCount>
    2946:	d0 90 4b 12 	lds	r13, 0x124B	; 0x80124b <xTickCount+0x1>
    294a:	e0 90 4c 12 	lds	r14, 0x124C	; 0x80124c <xTickCount+0x2>
    294e:	f0 90 4d 12 	lds	r15, 0x124D	; 0x80124d <xTickCount+0x3>
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	c8 1a       	sub	r12, r24
    2956:	d8 0a       	sbc	r13, r24
    2958:	e8 0a       	sbc	r14, r24
    295a:	f8 0a       	sbc	r15, r24
    295c:	c0 92 4a 12 	sts	0x124A, r12	; 0x80124a <xTickCount>
    2960:	d0 92 4b 12 	sts	0x124B, r13	; 0x80124b <xTickCount+0x1>
    2964:	e0 92 4c 12 	sts	0x124C, r14	; 0x80124c <xTickCount+0x2>
    2968:	f0 92 4d 12 	sts	0x124D, r15	; 0x80124d <xTickCount+0x3>
    296c:	c1 14       	cp	r12, r1
    296e:	d1 04       	cpc	r13, r1
    2970:	e1 04       	cpc	r14, r1
    2972:	f1 04       	cpc	r15, r1
    2974:	b1 f4       	brne	.+44     	; 0x29a2 <xTaskIncrementTick+0x78>
    2976:	80 91 73 12 	lds	r24, 0x1273	; 0x801273 <pxDelayedTaskList>
    297a:	90 91 74 12 	lds	r25, 0x1274	; 0x801274 <pxDelayedTaskList+0x1>
    297e:	20 91 71 12 	lds	r18, 0x1271	; 0x801271 <pxOverflowDelayedTaskList>
    2982:	30 91 72 12 	lds	r19, 0x1272	; 0x801272 <pxOverflowDelayedTaskList+0x1>
    2986:	30 93 74 12 	sts	0x1274, r19	; 0x801274 <pxDelayedTaskList+0x1>
    298a:	20 93 73 12 	sts	0x1273, r18	; 0x801273 <pxDelayedTaskList>
    298e:	90 93 72 12 	sts	0x1272, r25	; 0x801272 <pxOverflowDelayedTaskList+0x1>
    2992:	80 93 71 12 	sts	0x1271, r24	; 0x801271 <pxOverflowDelayedTaskList>
    2996:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <xNumOfOverflows>
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	80 93 42 12 	sts	0x1242, r24	; 0x801242 <xNumOfOverflows>
    29a0:	75 dd       	rcall	.-1302   	; 0x248c <prvResetNextTaskUnblockTime>
    29a2:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <xNextTaskUnblockTime>
    29a6:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <xNextTaskUnblockTime+0x1>
    29aa:	a0 91 3f 12 	lds	r26, 0x123F	; 0x80123f <xNextTaskUnblockTime+0x2>
    29ae:	b0 91 40 12 	lds	r27, 0x1240	; 0x801240 <xNextTaskUnblockTime+0x3>
    29b2:	c8 16       	cp	r12, r24
    29b4:	d9 06       	cpc	r13, r25
    29b6:	ea 06       	cpc	r14, r26
    29b8:	fb 06       	cpc	r15, r27
    29ba:	10 f4       	brcc	.+4      	; 0x29c0 <xTaskIncrementTick+0x96>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	b3 c0       	rjmp	.+358    	; 0x2b26 <xTaskIncrementTick+0x1fc>
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	4b e0       	ldi	r20, 0x0B	; 11
    29c4:	51 e0       	ldi	r21, 0x01	; 1
    29c6:	e0 91 73 12 	lds	r30, 0x1273	; 0x801273 <pxDelayedTaskList>
    29ca:	f0 91 74 12 	lds	r31, 0x1274	; 0x801274 <pxDelayedTaskList+0x1>
    29ce:	90 81       	ld	r25, Z
    29d0:	91 11       	cpse	r25, r1
    29d2:	0c c0       	rjmp	.+24     	; 0x29ec <xTaskIncrementTick+0xc2>
    29d4:	4f ef       	ldi	r20, 0xFF	; 255
    29d6:	5f ef       	ldi	r21, 0xFF	; 255
    29d8:	ba 01       	movw	r22, r20
    29da:	40 93 3d 12 	sts	0x123D, r20	; 0x80123d <xNextTaskUnblockTime>
    29de:	50 93 3e 12 	sts	0x123E, r21	; 0x80123e <xNextTaskUnblockTime+0x1>
    29e2:	60 93 3f 12 	sts	0x123F, r22	; 0x80123f <xNextTaskUnblockTime+0x2>
    29e6:	70 93 40 12 	sts	0x1240, r23	; 0x801240 <xNextTaskUnblockTime+0x3>
    29ea:	9d c0       	rjmp	.+314    	; 0x2b26 <xTaskIncrementTick+0x1fc>
    29ec:	e0 91 73 12 	lds	r30, 0x1273	; 0x801273 <pxDelayedTaskList>
    29f0:	f0 91 74 12 	lds	r31, 0x1274	; 0x801274 <pxDelayedTaskList+0x1>
    29f4:	07 80       	ldd	r0, Z+7	; 0x07
    29f6:	f0 85       	ldd	r31, Z+8	; 0x08
    29f8:	e0 2d       	mov	r30, r0
    29fa:	00 84       	ldd	r0, Z+8	; 0x08
    29fc:	f1 85       	ldd	r31, Z+9	; 0x09
    29fe:	e0 2d       	mov	r30, r0
    2a00:	02 81       	ldd	r16, Z+2	; 0x02
    2a02:	13 81       	ldd	r17, Z+3	; 0x03
    2a04:	24 81       	ldd	r18, Z+4	; 0x04
    2a06:	35 81       	ldd	r19, Z+5	; 0x05
    2a08:	c0 16       	cp	r12, r16
    2a0a:	d1 06       	cpc	r13, r17
    2a0c:	e2 06       	cpc	r14, r18
    2a0e:	f3 06       	cpc	r15, r19
    2a10:	48 f4       	brcc	.+18     	; 0x2a24 <xTaskIncrementTick+0xfa>
    2a12:	00 93 3d 12 	sts	0x123D, r16	; 0x80123d <xNextTaskUnblockTime>
    2a16:	10 93 3e 12 	sts	0x123E, r17	; 0x80123e <xNextTaskUnblockTime+0x1>
    2a1a:	20 93 3f 12 	sts	0x123F, r18	; 0x80123f <xNextTaskUnblockTime+0x2>
    2a1e:	30 93 40 12 	sts	0x1240, r19	; 0x801240 <xNextTaskUnblockTime+0x3>
    2a22:	81 c0       	rjmp	.+258    	; 0x2b26 <xTaskIncrementTick+0x1fc>
    2a24:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a26:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a28:	c6 81       	ldd	r28, Z+6	; 0x06
    2a2a:	d7 81       	ldd	r29, Z+7	; 0x07
    2a2c:	20 85       	ldd	r18, Z+8	; 0x08
    2a2e:	31 85       	ldd	r19, Z+9	; 0x09
    2a30:	3f 83       	std	Y+7, r19	; 0x07
    2a32:	2e 83       	std	Y+6, r18	; 0x06
    2a34:	c0 85       	ldd	r28, Z+8	; 0x08
    2a36:	d1 85       	ldd	r29, Z+9	; 0x09
    2a38:	26 81       	ldd	r18, Z+6	; 0x06
    2a3a:	37 81       	ldd	r19, Z+7	; 0x07
    2a3c:	3d 83       	std	Y+5, r19	; 0x05
    2a3e:	2c 83       	std	Y+4, r18	; 0x04
    2a40:	9f 01       	movw	r18, r30
    2a42:	2e 5f       	subi	r18, 0xFE	; 254
    2a44:	3f 4f       	sbci	r19, 0xFF	; 255
    2a46:	11 96       	adiw	r26, 0x01	; 1
    2a48:	6d 91       	ld	r22, X+
    2a4a:	7c 91       	ld	r23, X
    2a4c:	12 97       	sbiw	r26, 0x02	; 2
    2a4e:	62 17       	cp	r22, r18
    2a50:	73 07       	cpc	r23, r19
    2a52:	31 f4       	brne	.+12     	; 0x2a60 <xTaskIncrementTick+0x136>
    2a54:	60 85       	ldd	r22, Z+8	; 0x08
    2a56:	71 85       	ldd	r23, Z+9	; 0x09
    2a58:	12 96       	adiw	r26, 0x02	; 2
    2a5a:	7c 93       	st	X, r23
    2a5c:	6e 93       	st	-X, r22
    2a5e:	11 97       	sbiw	r26, 0x01	; 1
    2a60:	15 86       	std	Z+13, r1	; 0x0d
    2a62:	14 86       	std	Z+12, r1	; 0x0c
    2a64:	9c 91       	ld	r25, X
    2a66:	91 50       	subi	r25, 0x01	; 1
    2a68:	9c 93       	st	X, r25
    2a6a:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a6c:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a6e:	10 97       	sbiw	r26, 0x00	; 0
    2a70:	09 f1       	breq	.+66     	; 0x2ab4 <xTaskIncrementTick+0x18a>
    2a72:	c2 89       	ldd	r28, Z+18	; 0x12
    2a74:	d3 89       	ldd	r29, Z+19	; 0x13
    2a76:	64 89       	ldd	r22, Z+20	; 0x14
    2a78:	75 89       	ldd	r23, Z+21	; 0x15
    2a7a:	7f 83       	std	Y+7, r23	; 0x07
    2a7c:	6e 83       	std	Y+6, r22	; 0x06
    2a7e:	c4 89       	ldd	r28, Z+20	; 0x14
    2a80:	d5 89       	ldd	r29, Z+21	; 0x15
    2a82:	62 89       	ldd	r22, Z+18	; 0x12
    2a84:	73 89       	ldd	r23, Z+19	; 0x13
    2a86:	7d 83       	std	Y+5, r23	; 0x05
    2a88:	6c 83       	std	Y+4, r22	; 0x04
    2a8a:	11 96       	adiw	r26, 0x01	; 1
    2a8c:	cd 91       	ld	r28, X+
    2a8e:	dc 91       	ld	r29, X
    2a90:	12 97       	sbiw	r26, 0x02	; 2
    2a92:	bf 01       	movw	r22, r30
    2a94:	62 5f       	subi	r22, 0xF2	; 242
    2a96:	7f 4f       	sbci	r23, 0xFF	; 255
    2a98:	c6 17       	cp	r28, r22
    2a9a:	d7 07       	cpc	r29, r23
    2a9c:	31 f4       	brne	.+12     	; 0x2aaa <xTaskIncrementTick+0x180>
    2a9e:	64 89       	ldd	r22, Z+20	; 0x14
    2aa0:	75 89       	ldd	r23, Z+21	; 0x15
    2aa2:	12 96       	adiw	r26, 0x02	; 2
    2aa4:	7c 93       	st	X, r23
    2aa6:	6e 93       	st	-X, r22
    2aa8:	11 97       	sbiw	r26, 0x01	; 1
    2aaa:	11 8e       	std	Z+25, r1	; 0x19
    2aac:	10 8e       	std	Z+24, r1	; 0x18
    2aae:	9c 91       	ld	r25, X
    2ab0:	91 50       	subi	r25, 0x01	; 1
    2ab2:	9c 93       	st	X, r25
    2ab4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2ab6:	90 91 49 12 	lds	r25, 0x1249	; 0x801249 <uxTopReadyPriority>
    2aba:	9a 17       	cp	r25, r26
    2abc:	10 f4       	brcc	.+4      	; 0x2ac2 <xTaskIncrementTick+0x198>
    2abe:	a0 93 49 12 	sts	0x1249, r26	; 0x801249 <uxTopReadyPriority>
    2ac2:	4a 9f       	mul	r20, r26
    2ac4:	d0 01       	movw	r26, r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	a5 57       	subi	r26, 0x75	; 117
    2aca:	bd 4e       	sbci	r27, 0xED	; 237
    2acc:	11 96       	adiw	r26, 0x01	; 1
    2ace:	0d 90       	ld	r0, X+
    2ad0:	bc 91       	ld	r27, X
    2ad2:	a0 2d       	mov	r26, r0
    2ad4:	b7 83       	std	Z+7, r27	; 0x07
    2ad6:	a6 83       	std	Z+6, r26	; 0x06
    2ad8:	16 96       	adiw	r26, 0x06	; 6
    2ada:	6d 91       	ld	r22, X+
    2adc:	7c 91       	ld	r23, X
    2ade:	17 97       	sbiw	r26, 0x07	; 7
    2ae0:	71 87       	std	Z+9, r23	; 0x09
    2ae2:	60 87       	std	Z+8, r22	; 0x08
    2ae4:	16 96       	adiw	r26, 0x06	; 6
    2ae6:	cd 91       	ld	r28, X+
    2ae8:	dc 91       	ld	r29, X
    2aea:	17 97       	sbiw	r26, 0x07	; 7
    2aec:	3d 83       	std	Y+5, r19	; 0x05
    2aee:	2c 83       	std	Y+4, r18	; 0x04
    2af0:	17 96       	adiw	r26, 0x07	; 7
    2af2:	3c 93       	st	X, r19
    2af4:	2e 93       	st	-X, r18
    2af6:	16 97       	sbiw	r26, 0x06	; 6
    2af8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2afa:	4a 9f       	mul	r20, r26
    2afc:	d0 01       	movw	r26, r0
    2afe:	11 24       	eor	r1, r1
    2b00:	a5 57       	subi	r26, 0x75	; 117
    2b02:	bd 4e       	sbci	r27, 0xED	; 237
    2b04:	b5 87       	std	Z+13, r27	; 0x0d
    2b06:	a4 87       	std	Z+12, r26	; 0x0c
    2b08:	9c 91       	ld	r25, X
    2b0a:	9f 5f       	subi	r25, 0xFF	; 255
    2b0c:	9c 93       	st	X, r25
    2b0e:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2b12:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2b16:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b18:	5a 96       	adiw	r26, 0x1a	; 26
    2b1a:	9c 91       	ld	r25, X
    2b1c:	29 17       	cp	r18, r25
    2b1e:	08 f4       	brcc	.+2      	; 0x2b22 <xTaskIncrementTick+0x1f8>
    2b20:	52 cf       	rjmp	.-348    	; 0x29c6 <xTaskIncrementTick+0x9c>
    2b22:	85 2f       	mov	r24, r21
    2b24:	50 cf       	rjmp	.-352    	; 0x29c6 <xTaskIncrementTick+0x9c>
    2b26:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2b2a:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2b2e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2b30:	9b e0       	ldi	r25, 0x0B	; 11
    2b32:	e9 9f       	mul	r30, r25
    2b34:	f0 01       	movw	r30, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	e5 57       	subi	r30, 0x75	; 117
    2b3a:	fd 4e       	sbci	r31, 0xED	; 237
    2b3c:	90 81       	ld	r25, Z
    2b3e:	92 30       	cpi	r25, 0x02	; 2
    2b40:	08 f0       	brcs	.+2      	; 0x2b44 <xTaskIncrementTick+0x21a>
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 91 43 12 	lds	r25, 0x1243	; 0x801243 <xYieldPending>
    2b48:	99 23       	and	r25, r25
    2b4a:	b1 f0       	breq	.+44     	; 0x2b78 <xTaskIncrementTick+0x24e>
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <xTaskIncrementTick+0x24e>
    2b50:	80 91 44 12 	lds	r24, 0x1244	; 0x801244 <xPendedTicks>
    2b54:	90 91 45 12 	lds	r25, 0x1245	; 0x801245 <xPendedTicks+0x1>
    2b58:	a0 91 46 12 	lds	r26, 0x1246	; 0x801246 <xPendedTicks+0x2>
    2b5c:	b0 91 47 12 	lds	r27, 0x1247	; 0x801247 <xPendedTicks+0x3>
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	a1 1d       	adc	r26, r1
    2b64:	b1 1d       	adc	r27, r1
    2b66:	80 93 44 12 	sts	0x1244, r24	; 0x801244 <xPendedTicks>
    2b6a:	90 93 45 12 	sts	0x1245, r25	; 0x801245 <xPendedTicks+0x1>
    2b6e:	a0 93 46 12 	sts	0x1246, r26	; 0x801246 <xPendedTicks+0x2>
    2b72:	b0 93 47 12 	sts	0x1247, r27	; 0x801247 <xPendedTicks+0x3>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	ff 90       	pop	r15
    2b82:	ef 90       	pop	r14
    2b84:	df 90       	pop	r13
    2b86:	cf 90       	pop	r12
    2b88:	08 95       	ret

00002b8a <xTaskResumeAll>:
    2b8a:	cf 92       	push	r12
    2b8c:	df 92       	push	r13
    2b8e:	ef 92       	push	r14
    2b90:	ff 92       	push	r15
    2b92:	0f 93       	push	r16
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	0f 92       	push	r0
    2ba0:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    2ba4:	81 50       	subi	r24, 0x01	; 1
    2ba6:	80 93 3a 12 	sts	0x123A, r24	; 0x80123a <uxSchedulerSuspended>
    2baa:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    2bae:	81 11       	cpse	r24, r1
    2bb0:	c4 c0       	rjmp	.+392    	; 0x2d3a <xTaskResumeAll+0x1b0>
    2bb2:	80 91 4e 12 	lds	r24, 0x124E	; 0x80124e <uxCurrentNumberOfTasks>
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	8b c0       	rjmp	.+278    	; 0x2cd0 <xTaskResumeAll+0x146>
    2bba:	c2 c0       	rjmp	.+388    	; 0x2d40 <xTaskResumeAll+0x1b6>
    2bbc:	d8 01       	movw	r26, r16
    2bbe:	17 96       	adiw	r26, 0x07	; 7
    2bc0:	ed 91       	ld	r30, X+
    2bc2:	fc 91       	ld	r31, X
    2bc4:	18 97       	sbiw	r26, 0x08	; 8
    2bc6:	00 84       	ldd	r0, Z+8	; 0x08
    2bc8:	f1 85       	ldd	r31, Z+9	; 0x09
    2bca:	e0 2d       	mov	r30, r0
    2bcc:	a0 8d       	ldd	r26, Z+24	; 0x18
    2bce:	b1 8d       	ldd	r27, Z+25	; 0x19
    2bd0:	82 89       	ldd	r24, Z+18	; 0x12
    2bd2:	93 89       	ldd	r25, Z+19	; 0x13
    2bd4:	64 89       	ldd	r22, Z+20	; 0x14
    2bd6:	75 89       	ldd	r23, Z+21	; 0x15
    2bd8:	ec 01       	movw	r28, r24
    2bda:	7f 83       	std	Y+7, r23	; 0x07
    2bdc:	6e 83       	std	Y+6, r22	; 0x06
    2bde:	84 89       	ldd	r24, Z+20	; 0x14
    2be0:	95 89       	ldd	r25, Z+21	; 0x15
    2be2:	62 89       	ldd	r22, Z+18	; 0x12
    2be4:	73 89       	ldd	r23, Z+19	; 0x13
    2be6:	ec 01       	movw	r28, r24
    2be8:	7d 83       	std	Y+5, r23	; 0x05
    2bea:	6c 83       	std	Y+4, r22	; 0x04
    2bec:	cf 01       	movw	r24, r30
    2bee:	0e 96       	adiw	r24, 0x0e	; 14
    2bf0:	11 96       	adiw	r26, 0x01	; 1
    2bf2:	6d 91       	ld	r22, X+
    2bf4:	7c 91       	ld	r23, X
    2bf6:	12 97       	sbiw	r26, 0x02	; 2
    2bf8:	68 17       	cp	r22, r24
    2bfa:	79 07       	cpc	r23, r25
    2bfc:	31 f4       	brne	.+12     	; 0x2c0a <xTaskResumeAll+0x80>
    2bfe:	84 89       	ldd	r24, Z+20	; 0x14
    2c00:	95 89       	ldd	r25, Z+21	; 0x15
    2c02:	12 96       	adiw	r26, 0x02	; 2
    2c04:	9c 93       	st	X, r25
    2c06:	8e 93       	st	-X, r24
    2c08:	11 97       	sbiw	r26, 0x01	; 1
    2c0a:	11 8e       	std	Z+25, r1	; 0x19
    2c0c:	10 8e       	std	Z+24, r1	; 0x18
    2c0e:	8c 91       	ld	r24, X
    2c10:	81 50       	subi	r24, 0x01	; 1
    2c12:	8c 93       	st	X, r24
    2c14:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c16:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c18:	86 81       	ldd	r24, Z+6	; 0x06
    2c1a:	97 81       	ldd	r25, Z+7	; 0x07
    2c1c:	60 85       	ldd	r22, Z+8	; 0x08
    2c1e:	71 85       	ldd	r23, Z+9	; 0x09
    2c20:	ec 01       	movw	r28, r24
    2c22:	7f 83       	std	Y+7, r23	; 0x07
    2c24:	6e 83       	std	Y+6, r22	; 0x06
    2c26:	80 85       	ldd	r24, Z+8	; 0x08
    2c28:	91 85       	ldd	r25, Z+9	; 0x09
    2c2a:	66 81       	ldd	r22, Z+6	; 0x06
    2c2c:	77 81       	ldd	r23, Z+7	; 0x07
    2c2e:	ec 01       	movw	r28, r24
    2c30:	7d 83       	std	Y+5, r23	; 0x05
    2c32:	6c 83       	std	Y+4, r22	; 0x04
    2c34:	cf 01       	movw	r24, r30
    2c36:	02 96       	adiw	r24, 0x02	; 2
    2c38:	11 96       	adiw	r26, 0x01	; 1
    2c3a:	6d 91       	ld	r22, X+
    2c3c:	7c 91       	ld	r23, X
    2c3e:	12 97       	sbiw	r26, 0x02	; 2
    2c40:	68 17       	cp	r22, r24
    2c42:	79 07       	cpc	r23, r25
    2c44:	31 f4       	brne	.+12     	; 0x2c52 <xTaskResumeAll+0xc8>
    2c46:	60 85       	ldd	r22, Z+8	; 0x08
    2c48:	71 85       	ldd	r23, Z+9	; 0x09
    2c4a:	12 96       	adiw	r26, 0x02	; 2
    2c4c:	7c 93       	st	X, r23
    2c4e:	6e 93       	st	-X, r22
    2c50:	11 97       	sbiw	r26, 0x01	; 1
    2c52:	15 86       	std	Z+13, r1	; 0x0d
    2c54:	14 86       	std	Z+12, r1	; 0x0c
    2c56:	2c 91       	ld	r18, X
    2c58:	21 50       	subi	r18, 0x01	; 1
    2c5a:	2c 93       	st	X, r18
    2c5c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c5e:	20 91 49 12 	lds	r18, 0x1249	; 0x801249 <uxTopReadyPriority>
    2c62:	2a 17       	cp	r18, r26
    2c64:	10 f4       	brcc	.+4      	; 0x2c6a <xTaskResumeAll+0xe0>
    2c66:	a0 93 49 12 	sts	0x1249, r26	; 0x801249 <uxTopReadyPriority>
    2c6a:	3a 9f       	mul	r19, r26
    2c6c:	d0 01       	movw	r26, r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	a5 57       	subi	r26, 0x75	; 117
    2c72:	bd 4e       	sbci	r27, 0xED	; 237
    2c74:	11 96       	adiw	r26, 0x01	; 1
    2c76:	0d 90       	ld	r0, X+
    2c78:	bc 91       	ld	r27, X
    2c7a:	a0 2d       	mov	r26, r0
    2c7c:	b7 83       	std	Z+7, r27	; 0x07
    2c7e:	a6 83       	std	Z+6, r26	; 0x06
    2c80:	16 96       	adiw	r26, 0x06	; 6
    2c82:	6d 91       	ld	r22, X+
    2c84:	7c 91       	ld	r23, X
    2c86:	17 97       	sbiw	r26, 0x07	; 7
    2c88:	71 87       	std	Z+9, r23	; 0x09
    2c8a:	60 87       	std	Z+8, r22	; 0x08
    2c8c:	16 96       	adiw	r26, 0x06	; 6
    2c8e:	6d 91       	ld	r22, X+
    2c90:	7c 91       	ld	r23, X
    2c92:	17 97       	sbiw	r26, 0x07	; 7
    2c94:	eb 01       	movw	r28, r22
    2c96:	9d 83       	std	Y+5, r25	; 0x05
    2c98:	8c 83       	std	Y+4, r24	; 0x04
    2c9a:	17 96       	adiw	r26, 0x07	; 7
    2c9c:	9c 93       	st	X, r25
    2c9e:	8e 93       	st	-X, r24
    2ca0:	16 97       	sbiw	r26, 0x06	; 6
    2ca2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2ca4:	3a 9f       	mul	r19, r26
    2ca6:	d0 01       	movw	r26, r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	a5 57       	subi	r26, 0x75	; 117
    2cac:	bd 4e       	sbci	r27, 0xED	; 237
    2cae:	b5 87       	std	Z+13, r27	; 0x0d
    2cb0:	a4 87       	std	Z+12, r26	; 0x0c
    2cb2:	8c 91       	ld	r24, X
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	8c 93       	st	X, r24
    2cb8:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2cbc:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2cc0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cc2:	5a 96       	adiw	r26, 0x1a	; 26
    2cc4:	8c 91       	ld	r24, X
    2cc6:	98 17       	cp	r25, r24
    2cc8:	48 f0       	brcs	.+18     	; 0x2cdc <xTaskResumeAll+0x152>
    2cca:	40 93 43 12 	sts	0x1243, r20	; 0x801243 <xYieldPending>
    2cce:	06 c0       	rjmp	.+12     	; 0x2cdc <xTaskResumeAll+0x152>
    2cd0:	e0 e0       	ldi	r30, 0x00	; 0
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	06 e6       	ldi	r16, 0x66	; 102
    2cd6:	12 e1       	ldi	r17, 0x12	; 18
    2cd8:	3b e0       	ldi	r19, 0x0B	; 11
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	d8 01       	movw	r26, r16
    2cde:	8c 91       	ld	r24, X
    2ce0:	81 11       	cpse	r24, r1
    2ce2:	6c cf       	rjmp	.-296    	; 0x2bbc <xTaskResumeAll+0x32>
    2ce4:	ef 2b       	or	r30, r31
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <xTaskResumeAll+0x160>
    2ce8:	d1 db       	rcall	.-2142   	; 0x248c <prvResetNextTaskUnblockTime>
    2cea:	c0 90 44 12 	lds	r12, 0x1244	; 0x801244 <xPendedTicks>
    2cee:	d0 90 45 12 	lds	r13, 0x1245	; 0x801245 <xPendedTicks+0x1>
    2cf2:	e0 90 46 12 	lds	r14, 0x1246	; 0x801246 <xPendedTicks+0x2>
    2cf6:	f0 90 47 12 	lds	r15, 0x1247	; 0x801247 <xPendedTicks+0x3>
    2cfa:	c1 14       	cp	r12, r1
    2cfc:	d1 04       	cpc	r13, r1
    2cfe:	e1 04       	cpc	r14, r1
    2d00:	f1 04       	cpc	r15, r1
    2d02:	99 f0       	breq	.+38     	; 0x2d2a <xTaskResumeAll+0x1a0>
    2d04:	c1 e0       	ldi	r28, 0x01	; 1
    2d06:	11 de       	rcall	.-990    	; 0x292a <xTaskIncrementTick>
    2d08:	81 11       	cpse	r24, r1
    2d0a:	c0 93 43 12 	sts	0x1243, r28	; 0x801243 <xYieldPending>
    2d0e:	b1 e0       	ldi	r27, 0x01	; 1
    2d10:	cb 1a       	sub	r12, r27
    2d12:	d1 08       	sbc	r13, r1
    2d14:	e1 08       	sbc	r14, r1
    2d16:	f1 08       	sbc	r15, r1
    2d18:	b1 f7       	brne	.-20     	; 0x2d06 <xTaskResumeAll+0x17c>
    2d1a:	10 92 44 12 	sts	0x1244, r1	; 0x801244 <xPendedTicks>
    2d1e:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <xPendedTicks+0x1>
    2d22:	10 92 46 12 	sts	0x1246, r1	; 0x801246 <xPendedTicks+0x2>
    2d26:	10 92 47 12 	sts	0x1247, r1	; 0x801247 <xPendedTicks+0x3>
    2d2a:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <xYieldPending>
    2d2e:	88 23       	and	r24, r24
    2d30:	31 f0       	breq	.+12     	; 0x2d3e <xTaskResumeAll+0x1b4>
    2d32:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	03 c0       	rjmp	.+6      	; 0x2d40 <xTaskResumeAll+0x1b6>
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <xTaskResumeAll+0x1b6>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	0f 90       	pop	r0
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	08 95       	ret

00002d56 <vTaskDelay>:
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	6b 01       	movw	r12, r22
    2d60:	7c 01       	movw	r14, r24
    2d62:	67 2b       	or	r22, r23
    2d64:	68 2b       	or	r22, r24
    2d66:	69 2b       	or	r22, r25
    2d68:	41 f0       	breq	.+16     	; 0x2d7a <vTaskDelay+0x24>
    2d6a:	cb dd       	rcall	.-1130   	; 0x2902 <vTaskSuspendAll>
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	c7 01       	movw	r24, r14
    2d70:	b6 01       	movw	r22, r12
    2d72:	b3 db       	rcall	.-2202   	; 0x24da <prvAddCurrentTaskToDelayedList>
    2d74:	0a df       	rcall	.-492    	; 0x2b8a <xTaskResumeAll>
    2d76:	81 11       	cpse	r24, r1
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <vTaskDelay+0x28>
    2d7a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
    2d7e:	ff 90       	pop	r15
    2d80:	ef 90       	pop	r14
    2d82:	df 90       	pop	r13
    2d84:	cf 90       	pop	r12
    2d86:	08 95       	ret

00002d88 <vTaskSwitchContext>:
    2d88:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    2d8c:	88 23       	and	r24, r24
    2d8e:	21 f0       	breq	.+8      	; 0x2d98 <vTaskSwitchContext+0x10>
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <xYieldPending>
    2d96:	08 95       	ret
    2d98:	10 92 43 12 	sts	0x1243, r1	; 0x801243 <xYieldPending>
    2d9c:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2da0:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2da4:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2da8:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2dac:	2d 91       	ld	r18, X+
    2dae:	3c 91       	ld	r19, X
    2db0:	83 8d       	ldd	r24, Z+27	; 0x1b
    2db2:	94 8d       	ldd	r25, Z+28	; 0x1c
    2db4:	82 17       	cp	r24, r18
    2db6:	93 07       	cpc	r25, r19
    2db8:	58 f0       	brcs	.+22     	; 0x2dd0 <vTaskSwitchContext+0x48>
    2dba:	60 91 f9 12 	lds	r22, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2dbe:	70 91 fa 12 	lds	r23, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2dc2:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2dc6:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2dca:	63 5e       	subi	r22, 0xE3	; 227
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	b6 d7       	rcall	.+3948   	; 0x3d3c <vApplicationStackOverflowHook>
    2dd0:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	9b e0       	ldi	r25, 0x0B	; 11
    2dda:	89 9f       	mul	r24, r25
    2ddc:	f0 01       	movw	r30, r0
    2dde:	11 24       	eor	r1, r1
    2de0:	e5 57       	subi	r30, 0x75	; 117
    2de2:	fd 4e       	sbci	r31, 0xED	; 237
    2de4:	90 81       	ld	r25, Z
    2de6:	91 11       	cpse	r25, r1
    2de8:	0e c0       	rjmp	.+28     	; 0x2e06 <vTaskSwitchContext+0x7e>
    2dea:	4b e0       	ldi	r20, 0x0B	; 11
    2dec:	81 50       	subi	r24, 0x01	; 1
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	42 9f       	mul	r20, r18
    2df4:	f0 01       	movw	r30, r0
    2df6:	43 9f       	mul	r20, r19
    2df8:	f0 0d       	add	r31, r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	e5 57       	subi	r30, 0x75	; 117
    2dfe:	fd 4e       	sbci	r31, 0xED	; 237
    2e00:	90 81       	ld	r25, Z
    2e02:	99 23       	and	r25, r25
    2e04:	99 f3       	breq	.-26     	; 0x2dec <vTaskSwitchContext+0x64>
    2e06:	9b e0       	ldi	r25, 0x0B	; 11
    2e08:	92 9f       	mul	r25, r18
    2e0a:	a0 01       	movw	r20, r0
    2e0c:	93 9f       	mul	r25, r19
    2e0e:	50 0d       	add	r21, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	da 01       	movw	r26, r20
    2e14:	a5 57       	subi	r26, 0x75	; 117
    2e16:	bd 4e       	sbci	r27, 0xED	; 237
    2e18:	11 96       	adiw	r26, 0x01	; 1
    2e1a:	ed 91       	ld	r30, X+
    2e1c:	fc 91       	ld	r31, X
    2e1e:	12 97       	sbiw	r26, 0x02	; 2
    2e20:	04 80       	ldd	r0, Z+4	; 0x04
    2e22:	f5 81       	ldd	r31, Z+5	; 0x05
    2e24:	e0 2d       	mov	r30, r0
    2e26:	12 96       	adiw	r26, 0x02	; 2
    2e28:	fc 93       	st	X, r31
    2e2a:	ee 93       	st	-X, r30
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
    2e2e:	42 57       	subi	r20, 0x72	; 114
    2e30:	5d 4e       	sbci	r21, 0xED	; 237
    2e32:	e4 17       	cp	r30, r20
    2e34:	f5 07       	cpc	r31, r21
    2e36:	29 f4       	brne	.+10     	; 0x2e42 <vTaskSwitchContext+0xba>
    2e38:	44 81       	ldd	r20, Z+4	; 0x04
    2e3a:	55 81       	ldd	r21, Z+5	; 0x05
    2e3c:	fd 01       	movw	r30, r26
    2e3e:	52 83       	std	Z+2, r21	; 0x02
    2e40:	41 83       	std	Z+1, r20	; 0x01
    2e42:	9b e0       	ldi	r25, 0x0B	; 11
    2e44:	92 9f       	mul	r25, r18
    2e46:	f0 01       	movw	r30, r0
    2e48:	93 9f       	mul	r25, r19
    2e4a:	f0 0d       	add	r31, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	e5 57       	subi	r30, 0x75	; 117
    2e50:	fd 4e       	sbci	r31, 0xED	; 237
    2e52:	01 80       	ldd	r0, Z+1	; 0x01
    2e54:	f2 81       	ldd	r31, Z+2	; 0x02
    2e56:	e0 2d       	mov	r30, r0
    2e58:	20 85       	ldd	r18, Z+8	; 0x08
    2e5a:	31 85       	ldd	r19, Z+9	; 0x09
    2e5c:	30 93 fa 12 	sts	0x12FA, r19	; 0x8012fa <pxCurrentTCB+0x1>
    2e60:	20 93 f9 12 	sts	0x12F9, r18	; 0x8012f9 <pxCurrentTCB>
    2e64:	80 93 49 12 	sts	0x1249, r24	; 0x801249 <uxTopReadyPriority>
    2e68:	08 95       	ret

00002e6a <vTaskPlaceOnEventList>:
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	6a 01       	movw	r12, r20
    2e74:	7b 01       	movw	r14, r22
    2e76:	60 91 f9 12 	lds	r22, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2e7a:	70 91 fa 12 	lds	r23, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2e7e:	62 5f       	subi	r22, 0xF2	; 242
    2e80:	7f 4f       	sbci	r23, 0xFF	; 255
    2e82:	0e 94 19 0a 	call	0x1432	; 0x1432 <vListInsert>
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	c7 01       	movw	r24, r14
    2e8a:	b6 01       	movw	r22, r12
    2e8c:	26 db       	rcall	.-2484   	; 0x24da <prvAddCurrentTaskToDelayedList>
    2e8e:	ff 90       	pop	r15
    2e90:	ef 90       	pop	r14
    2e92:	df 90       	pop	r13
    2e94:	cf 90       	pop	r12
    2e96:	08 95       	ret

00002e98 <vTaskPlaceOnEventListRestricted>:
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	ba 01       	movw	r22, r20
    2ea2:	a1 81       	ldd	r26, Z+1	; 0x01
    2ea4:	b2 81       	ldd	r27, Z+2	; 0x02
    2ea6:	c0 91 f9 12 	lds	r28, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2eaa:	d0 91 fa 12 	lds	r29, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2eae:	bb 8b       	std	Y+19, r27	; 0x13
    2eb0:	aa 8b       	std	Y+18, r26	; 0x12
    2eb2:	c0 91 f9 12 	lds	r28, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2eb6:	d0 91 fa 12 	lds	r29, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2eba:	16 96       	adiw	r26, 0x06	; 6
    2ebc:	4d 91       	ld	r20, X+
    2ebe:	5c 91       	ld	r21, X
    2ec0:	17 97       	sbiw	r26, 0x07	; 7
    2ec2:	5d 8b       	std	Y+21, r21	; 0x15
    2ec4:	4c 8b       	std	Y+20, r20	; 0x14
    2ec6:	16 96       	adiw	r26, 0x06	; 6
    2ec8:	cd 91       	ld	r28, X+
    2eca:	dc 91       	ld	r29, X
    2ecc:	17 97       	sbiw	r26, 0x07	; 7
    2ece:	40 91 f9 12 	lds	r20, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2ed2:	50 91 fa 12 	lds	r21, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2ed6:	42 5f       	subi	r20, 0xF2	; 242
    2ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eda:	5d 83       	std	Y+5, r21	; 0x05
    2edc:	4c 83       	std	Y+4, r20	; 0x04
    2ede:	40 91 f9 12 	lds	r20, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2ee2:	50 91 fa 12 	lds	r21, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2ee6:	42 5f       	subi	r20, 0xF2	; 242
    2ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eea:	17 96       	adiw	r26, 0x07	; 7
    2eec:	5c 93       	st	X, r21
    2eee:	4e 93       	st	-X, r20
    2ef0:	16 97       	sbiw	r26, 0x06	; 6
    2ef2:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    2ef6:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    2efa:	59 96       	adiw	r26, 0x19	; 25
    2efc:	fc 93       	st	X, r31
    2efe:	ee 93       	st	-X, r30
    2f00:	58 97       	sbiw	r26, 0x18	; 24
    2f02:	30 81       	ld	r19, Z
    2f04:	3f 5f       	subi	r19, 0xFF	; 255
    2f06:	30 83       	st	Z, r19
    2f08:	22 23       	and	r18, r18
    2f0a:	19 f0       	breq	.+6      	; 0x2f12 <vTaskPlaceOnEventListRestricted+0x7a>
    2f0c:	6f ef       	ldi	r22, 0xFF	; 255
    2f0e:	7f ef       	ldi	r23, 0xFF	; 255
    2f10:	cb 01       	movw	r24, r22
    2f12:	42 2f       	mov	r20, r18
    2f14:	e2 da       	rcall	.-2620   	; 0x24da <prvAddCurrentTaskToDelayedList>
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <xTaskRemoveFromEventList>:
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	dc 01       	movw	r26, r24
    2f22:	17 96       	adiw	r26, 0x07	; 7
    2f24:	ed 91       	ld	r30, X+
    2f26:	fc 91       	ld	r31, X
    2f28:	18 97       	sbiw	r26, 0x08	; 8
    2f2a:	00 84       	ldd	r0, Z+8	; 0x08
    2f2c:	f1 85       	ldd	r31, Z+9	; 0x09
    2f2e:	e0 2d       	mov	r30, r0
    2f30:	a0 8d       	ldd	r26, Z+24	; 0x18
    2f32:	b1 8d       	ldd	r27, Z+25	; 0x19
    2f34:	c2 89       	ldd	r28, Z+18	; 0x12
    2f36:	d3 89       	ldd	r29, Z+19	; 0x13
    2f38:	84 89       	ldd	r24, Z+20	; 0x14
    2f3a:	95 89       	ldd	r25, Z+21	; 0x15
    2f3c:	9f 83       	std	Y+7, r25	; 0x07
    2f3e:	8e 83       	std	Y+6, r24	; 0x06
    2f40:	c4 89       	ldd	r28, Z+20	; 0x14
    2f42:	d5 89       	ldd	r29, Z+21	; 0x15
    2f44:	82 89       	ldd	r24, Z+18	; 0x12
    2f46:	93 89       	ldd	r25, Z+19	; 0x13
    2f48:	9d 83       	std	Y+5, r25	; 0x05
    2f4a:	8c 83       	std	Y+4, r24	; 0x04
    2f4c:	9f 01       	movw	r18, r30
    2f4e:	22 5f       	subi	r18, 0xF2	; 242
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	11 96       	adiw	r26, 0x01	; 1
    2f54:	8d 91       	ld	r24, X+
    2f56:	9c 91       	ld	r25, X
    2f58:	12 97       	sbiw	r26, 0x02	; 2
    2f5a:	82 17       	cp	r24, r18
    2f5c:	93 07       	cpc	r25, r19
    2f5e:	31 f4       	brne	.+12     	; 0x2f6c <xTaskRemoveFromEventList+0x50>
    2f60:	84 89       	ldd	r24, Z+20	; 0x14
    2f62:	95 89       	ldd	r25, Z+21	; 0x15
    2f64:	12 96       	adiw	r26, 0x02	; 2
    2f66:	9c 93       	st	X, r25
    2f68:	8e 93       	st	-X, r24
    2f6a:	11 97       	sbiw	r26, 0x01	; 1
    2f6c:	11 8e       	std	Z+25, r1	; 0x19
    2f6e:	10 8e       	std	Z+24, r1	; 0x18
    2f70:	8c 91       	ld	r24, X
    2f72:	81 50       	subi	r24, 0x01	; 1
    2f74:	8c 93       	st	X, r24
    2f76:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    2f7a:	81 11       	cpse	r24, r1
    2f7c:	52 c0       	rjmp	.+164    	; 0x3022 <xTaskRemoveFromEventList+0x106>
    2f7e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2f80:	b5 85       	ldd	r27, Z+13	; 0x0d
    2f82:	c6 81       	ldd	r28, Z+6	; 0x06
    2f84:	d7 81       	ldd	r29, Z+7	; 0x07
    2f86:	80 85       	ldd	r24, Z+8	; 0x08
    2f88:	91 85       	ldd	r25, Z+9	; 0x09
    2f8a:	9f 83       	std	Y+7, r25	; 0x07
    2f8c:	8e 83       	std	Y+6, r24	; 0x06
    2f8e:	c0 85       	ldd	r28, Z+8	; 0x08
    2f90:	d1 85       	ldd	r29, Z+9	; 0x09
    2f92:	86 81       	ldd	r24, Z+6	; 0x06
    2f94:	97 81       	ldd	r25, Z+7	; 0x07
    2f96:	9d 83       	std	Y+5, r25	; 0x05
    2f98:	8c 83       	std	Y+4, r24	; 0x04
    2f9a:	9f 01       	movw	r18, r30
    2f9c:	2e 5f       	subi	r18, 0xFE	; 254
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	11 96       	adiw	r26, 0x01	; 1
    2fa2:	8d 91       	ld	r24, X+
    2fa4:	9c 91       	ld	r25, X
    2fa6:	12 97       	sbiw	r26, 0x02	; 2
    2fa8:	82 17       	cp	r24, r18
    2faa:	93 07       	cpc	r25, r19
    2fac:	31 f4       	brne	.+12     	; 0x2fba <xTaskRemoveFromEventList+0x9e>
    2fae:	80 85       	ldd	r24, Z+8	; 0x08
    2fb0:	91 85       	ldd	r25, Z+9	; 0x09
    2fb2:	12 96       	adiw	r26, 0x02	; 2
    2fb4:	9c 93       	st	X, r25
    2fb6:	8e 93       	st	-X, r24
    2fb8:	11 97       	sbiw	r26, 0x01	; 1
    2fba:	15 86       	std	Z+13, r1	; 0x0d
    2fbc:	14 86       	std	Z+12, r1	; 0x0c
    2fbe:	8c 91       	ld	r24, X
    2fc0:	81 50       	subi	r24, 0x01	; 1
    2fc2:	8c 93       	st	X, r24
    2fc4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2fc6:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    2fca:	8a 17       	cp	r24, r26
    2fcc:	10 f4       	brcc	.+4      	; 0x2fd2 <xTaskRemoveFromEventList+0xb6>
    2fce:	a0 93 49 12 	sts	0x1249, r26	; 0x801249 <uxTopReadyPriority>
    2fd2:	8b e0       	ldi	r24, 0x0B	; 11
    2fd4:	8a 9f       	mul	r24, r26
    2fd6:	d0 01       	movw	r26, r0
    2fd8:	11 24       	eor	r1, r1
    2fda:	a5 57       	subi	r26, 0x75	; 117
    2fdc:	bd 4e       	sbci	r27, 0xED	; 237
    2fde:	11 96       	adiw	r26, 0x01	; 1
    2fe0:	0d 90       	ld	r0, X+
    2fe2:	bc 91       	ld	r27, X
    2fe4:	a0 2d       	mov	r26, r0
    2fe6:	b7 83       	std	Z+7, r27	; 0x07
    2fe8:	a6 83       	std	Z+6, r26	; 0x06
    2fea:	16 96       	adiw	r26, 0x06	; 6
    2fec:	4d 91       	ld	r20, X+
    2fee:	5c 91       	ld	r21, X
    2ff0:	17 97       	sbiw	r26, 0x07	; 7
    2ff2:	51 87       	std	Z+9, r21	; 0x09
    2ff4:	40 87       	std	Z+8, r20	; 0x08
    2ff6:	16 96       	adiw	r26, 0x06	; 6
    2ff8:	cd 91       	ld	r28, X+
    2ffa:	dc 91       	ld	r29, X
    2ffc:	17 97       	sbiw	r26, 0x07	; 7
    2ffe:	3d 83       	std	Y+5, r19	; 0x05
    3000:	2c 83       	std	Y+4, r18	; 0x04
    3002:	17 96       	adiw	r26, 0x07	; 7
    3004:	3c 93       	st	X, r19
    3006:	2e 93       	st	-X, r18
    3008:	16 97       	sbiw	r26, 0x06	; 6
    300a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    300c:	8a 9f       	mul	r24, r26
    300e:	d0 01       	movw	r26, r0
    3010:	11 24       	eor	r1, r1
    3012:	a5 57       	subi	r26, 0x75	; 117
    3014:	bd 4e       	sbci	r27, 0xED	; 237
    3016:	b5 87       	std	Z+13, r27	; 0x0d
    3018:	a4 87       	std	Z+12, r26	; 0x0c
    301a:	8c 91       	ld	r24, X
    301c:	8f 5f       	subi	r24, 0xFF	; 255
    301e:	8c 93       	st	X, r24
    3020:	1c c0       	rjmp	.+56     	; 0x305a <xTaskRemoveFromEventList+0x13e>
    3022:	46 e6       	ldi	r20, 0x66	; 102
    3024:	52 e1       	ldi	r21, 0x12	; 18
    3026:	da 01       	movw	r26, r20
    3028:	11 96       	adiw	r26, 0x01	; 1
    302a:	cd 91       	ld	r28, X+
    302c:	dc 91       	ld	r29, X
    302e:	12 97       	sbiw	r26, 0x02	; 2
    3030:	d3 8b       	std	Z+19, r29	; 0x13
    3032:	c2 8b       	std	Z+18, r28	; 0x12
    3034:	8e 81       	ldd	r24, Y+6	; 0x06
    3036:	9f 81       	ldd	r25, Y+7	; 0x07
    3038:	95 8b       	std	Z+21, r25	; 0x15
    303a:	84 8b       	std	Z+20, r24	; 0x14
    303c:	8e 81       	ldd	r24, Y+6	; 0x06
    303e:	9f 81       	ldd	r25, Y+7	; 0x07
    3040:	dc 01       	movw	r26, r24
    3042:	15 96       	adiw	r26, 0x05	; 5
    3044:	3c 93       	st	X, r19
    3046:	2e 93       	st	-X, r18
    3048:	14 97       	sbiw	r26, 0x04	; 4
    304a:	3f 83       	std	Y+7, r19	; 0x07
    304c:	2e 83       	std	Y+6, r18	; 0x06
    304e:	51 8f       	std	Z+25, r21	; 0x19
    3050:	40 8f       	std	Z+24, r20	; 0x18
    3052:	da 01       	movw	r26, r20
    3054:	8c 91       	ld	r24, X
    3056:	8f 5f       	subi	r24, 0xFF	; 255
    3058:	8c 93       	st	X, r24
    305a:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    305e:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3062:	92 8d       	ldd	r25, Z+26	; 0x1a
    3064:	5a 96       	adiw	r26, 0x1a	; 26
    3066:	8c 91       	ld	r24, X
    3068:	89 17       	cp	r24, r25
    306a:	20 f4       	brcc	.+8      	; 0x3074 <xTaskRemoveFromEventList+0x158>
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <xYieldPending>
    3072:	01 c0       	rjmp	.+2      	; 0x3076 <xTaskRemoveFromEventList+0x15a>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	08 95       	ret

0000307c <vTaskSetTimeOutState>:
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	0f 92       	push	r0
    3082:	20 91 42 12 	lds	r18, 0x1242	; 0x801242 <xNumOfOverflows>
    3086:	fc 01       	movw	r30, r24
    3088:	20 83       	st	Z, r18
    308a:	40 91 4a 12 	lds	r20, 0x124A	; 0x80124a <xTickCount>
    308e:	50 91 4b 12 	lds	r21, 0x124B	; 0x80124b <xTickCount+0x1>
    3092:	60 91 4c 12 	lds	r22, 0x124C	; 0x80124c <xTickCount+0x2>
    3096:	70 91 4d 12 	lds	r23, 0x124D	; 0x80124d <xTickCount+0x3>
    309a:	41 83       	std	Z+1, r20	; 0x01
    309c:	52 83       	std	Z+2, r21	; 0x02
    309e:	63 83       	std	Z+3, r22	; 0x03
    30a0:	74 83       	std	Z+4, r23	; 0x04
    30a2:	0f 90       	pop	r0
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	08 95       	ret

000030a8 <vTaskInternalSetTimeOutState>:
    30a8:	20 91 42 12 	lds	r18, 0x1242	; 0x801242 <xNumOfOverflows>
    30ac:	fc 01       	movw	r30, r24
    30ae:	20 83       	st	Z, r18
    30b0:	40 91 4a 12 	lds	r20, 0x124A	; 0x80124a <xTickCount>
    30b4:	50 91 4b 12 	lds	r21, 0x124B	; 0x80124b <xTickCount+0x1>
    30b8:	60 91 4c 12 	lds	r22, 0x124C	; 0x80124c <xTickCount+0x2>
    30bc:	70 91 4d 12 	lds	r23, 0x124D	; 0x80124d <xTickCount+0x3>
    30c0:	41 83       	std	Z+1, r20	; 0x01
    30c2:	52 83       	std	Z+2, r21	; 0x02
    30c4:	63 83       	std	Z+3, r22	; 0x03
    30c6:	74 83       	std	Z+4, r23	; 0x04
    30c8:	08 95       	ret

000030ca <xTaskCheckForTimeOut>:
    30ca:	cf 92       	push	r12
    30cc:	df 92       	push	r13
    30ce:	ef 92       	push	r14
    30d0:	ff 92       	push	r15
    30d2:	0f 93       	push	r16
    30d4:	1f 93       	push	r17
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	fb 01       	movw	r30, r22
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	0f 92       	push	r0
    30e2:	40 91 4a 12 	lds	r20, 0x124A	; 0x80124a <xTickCount>
    30e6:	50 91 4b 12 	lds	r21, 0x124B	; 0x80124b <xTickCount+0x1>
    30ea:	60 91 4c 12 	lds	r22, 0x124C	; 0x80124c <xTickCount+0x2>
    30ee:	70 91 4d 12 	lds	r23, 0x124D	; 0x80124d <xTickCount+0x3>
    30f2:	00 81       	ld	r16, Z
    30f4:	11 81       	ldd	r17, Z+1	; 0x01
    30f6:	22 81       	ldd	r18, Z+2	; 0x02
    30f8:	33 81       	ldd	r19, Z+3	; 0x03
    30fa:	0f 3f       	cpi	r16, 0xFF	; 255
    30fc:	af ef       	ldi	r26, 0xFF	; 255
    30fe:	1a 07       	cpc	r17, r26
    3100:	2a 07       	cpc	r18, r26
    3102:	3a 07       	cpc	r19, r26
    3104:	79 f1       	breq	.+94     	; 0x3164 <xTaskCheckForTimeOut+0x9a>
    3106:	ec 01       	movw	r28, r24
    3108:	c9 80       	ldd	r12, Y+1	; 0x01
    310a:	da 80       	ldd	r13, Y+2	; 0x02
    310c:	eb 80       	ldd	r14, Y+3	; 0x03
    310e:	fc 80       	ldd	r15, Y+4	; 0x04
    3110:	a0 91 42 12 	lds	r26, 0x1242	; 0x801242 <xNumOfOverflows>
    3114:	b8 81       	ld	r27, Y
    3116:	ba 17       	cp	r27, r26
    3118:	59 f0       	breq	.+22     	; 0x3130 <xTaskCheckForTimeOut+0x66>
    311a:	4c 15       	cp	r20, r12
    311c:	5d 05       	cpc	r21, r13
    311e:	6e 05       	cpc	r22, r14
    3120:	7f 05       	cpc	r23, r15
    3122:	30 f0       	brcs	.+12     	; 0x3130 <xTaskCheckForTimeOut+0x66>
    3124:	10 82       	st	Z, r1
    3126:	11 82       	std	Z+1, r1	; 0x01
    3128:	12 82       	std	Z+2, r1	; 0x02
    312a:	13 82       	std	Z+3, r1	; 0x03
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	1b c0       	rjmp	.+54     	; 0x3166 <xTaskCheckForTimeOut+0x9c>
    3130:	4c 19       	sub	r20, r12
    3132:	5d 09       	sbc	r21, r13
    3134:	6e 09       	sbc	r22, r14
    3136:	7f 09       	sbc	r23, r15
    3138:	40 17       	cp	r20, r16
    313a:	51 07       	cpc	r21, r17
    313c:	62 07       	cpc	r22, r18
    313e:	73 07       	cpc	r23, r19
    3140:	58 f4       	brcc	.+22     	; 0x3158 <xTaskCheckForTimeOut+0x8e>
    3142:	04 1b       	sub	r16, r20
    3144:	15 0b       	sbc	r17, r21
    3146:	26 0b       	sbc	r18, r22
    3148:	37 0b       	sbc	r19, r23
    314a:	00 83       	st	Z, r16
    314c:	11 83       	std	Z+1, r17	; 0x01
    314e:	22 83       	std	Z+2, r18	; 0x02
    3150:	33 83       	std	Z+3, r19	; 0x03
    3152:	aa df       	rcall	.-172    	; 0x30a8 <vTaskInternalSetTimeOutState>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	07 c0       	rjmp	.+14     	; 0x3166 <xTaskCheckForTimeOut+0x9c>
    3158:	10 82       	st	Z, r1
    315a:	11 82       	std	Z+1, r1	; 0x01
    315c:	12 82       	std	Z+2, r1	; 0x02
    315e:	13 82       	std	Z+3, r1	; 0x03
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	01 c0       	rjmp	.+2      	; 0x3166 <xTaskCheckForTimeOut+0x9c>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	0f 90       	pop	r0
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	df 90       	pop	r13
    3178:	cf 90       	pop	r12
    317a:	08 95       	ret

0000317c <vTaskMissedYield>:
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <xYieldPending>
    3182:	08 95       	ret

00003184 <xTaskGetCurrentTaskHandle>:
    3184:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3188:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    318c:	08 95       	ret

0000318e <xTaskGetSchedulerState>:
    318e:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <xSchedulerRunning>
    3192:	88 23       	and	r24, r24
    3194:	31 f0       	breq	.+12     	; 0x31a2 <xTaskGetSchedulerState+0x14>
    3196:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    319a:	88 23       	and	r24, r24
    319c:	21 f0       	breq	.+8      	; 0x31a6 <xTaskGetSchedulerState+0x18>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	08 95       	ret
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	08 95       	ret
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	08 95       	ret

000031aa <xTaskPriorityInherit>:
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	fc 01       	movw	r30, r24
    31b4:	89 2b       	or	r24, r25
    31b6:	09 f4       	brne	.+2      	; 0x31ba <xTaskPriorityInherit+0x10>
    31b8:	79 c0       	rjmp	.+242    	; 0x32ac <xTaskPriorityInherit+0x102>
    31ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    31bc:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    31c0:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    31c4:	5a 96       	adiw	r26, 0x1a	; 26
    31c6:	9c 91       	ld	r25, X
    31c8:	89 17       	cp	r24, r25
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <xTaskPriorityInherit+0x24>
    31cc:	63 c0       	rjmp	.+198    	; 0x3294 <xTaskPriorityInherit+0xea>
    31ce:	46 85       	ldd	r20, Z+14	; 0x0e
    31d0:	57 85       	ldd	r21, Z+15	; 0x0f
    31d2:	60 89       	ldd	r22, Z+16	; 0x10
    31d4:	71 89       	ldd	r23, Z+17	; 0x11
    31d6:	77 23       	and	r23, r23
    31d8:	94 f0       	brlt	.+36     	; 0x31fe <xTaskPriorityInherit+0x54>
    31da:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    31de:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    31e2:	5a 96       	adiw	r26, 0x1a	; 26
    31e4:	9c 91       	ld	r25, X
    31e6:	4a e0       	ldi	r20, 0x0A	; 10
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	49 1b       	sub	r20, r25
    31f0:	51 09       	sbc	r21, r1
    31f2:	61 09       	sbc	r22, r1
    31f4:	71 09       	sbc	r23, r1
    31f6:	46 87       	std	Z+14, r20	; 0x0e
    31f8:	57 87       	std	Z+15, r21	; 0x0f
    31fa:	60 8b       	std	Z+16, r22	; 0x10
    31fc:	71 8b       	std	Z+17, r23	; 0x11
    31fe:	2b e0       	ldi	r18, 0x0B	; 11
    3200:	82 9f       	mul	r24, r18
    3202:	c0 01       	movw	r24, r0
    3204:	11 24       	eor	r1, r1
    3206:	85 57       	subi	r24, 0x75	; 117
    3208:	9d 4e       	sbci	r25, 0xED	; 237
    320a:	24 85       	ldd	r18, Z+12	; 0x0c
    320c:	35 85       	ldd	r19, Z+13	; 0x0d
    320e:	28 17       	cp	r18, r24
    3210:	39 07       	cpc	r19, r25
    3212:	b9 f5       	brne	.+110    	; 0x3282 <xTaskPriorityInherit+0xd8>
    3214:	ef 01       	movw	r28, r30
    3216:	8f 01       	movw	r16, r30
    3218:	0e 5f       	subi	r16, 0xFE	; 254
    321a:	1f 4f       	sbci	r17, 0xFF	; 255
    321c:	c8 01       	movw	r24, r16
    321e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
    3222:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3226:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    322a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    322c:	ea 8f       	std	Y+26, r30	; 0x1a
    322e:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    3232:	8e 17       	cp	r24, r30
    3234:	10 f4       	brcc	.+4      	; 0x323a <xTaskPriorityInherit+0x90>
    3236:	e0 93 49 12 	sts	0x1249, r30	; 0x801249 <uxTopReadyPriority>
    323a:	8b e0       	ldi	r24, 0x0B	; 11
    323c:	8e 9f       	mul	r24, r30
    323e:	f0 01       	movw	r30, r0
    3240:	11 24       	eor	r1, r1
    3242:	e5 57       	subi	r30, 0x75	; 117
    3244:	fd 4e       	sbci	r31, 0xED	; 237
    3246:	01 80       	ldd	r0, Z+1	; 0x01
    3248:	f2 81       	ldd	r31, Z+2	; 0x02
    324a:	e0 2d       	mov	r30, r0
    324c:	ff 83       	std	Y+7, r31	; 0x07
    324e:	ee 83       	std	Y+6, r30	; 0x06
    3250:	26 81       	ldd	r18, Z+6	; 0x06
    3252:	37 81       	ldd	r19, Z+7	; 0x07
    3254:	39 87       	std	Y+9, r19	; 0x09
    3256:	28 87       	std	Y+8, r18	; 0x08
    3258:	a6 81       	ldd	r26, Z+6	; 0x06
    325a:	b7 81       	ldd	r27, Z+7	; 0x07
    325c:	15 96       	adiw	r26, 0x05	; 5
    325e:	1c 93       	st	X, r17
    3260:	0e 93       	st	-X, r16
    3262:	14 97       	sbiw	r26, 0x04	; 4
    3264:	17 83       	std	Z+7, r17	; 0x07
    3266:	06 83       	std	Z+6, r16	; 0x06
    3268:	ea 8d       	ldd	r30, Y+26	; 0x1a
    326a:	8e 9f       	mul	r24, r30
    326c:	f0 01       	movw	r30, r0
    326e:	11 24       	eor	r1, r1
    3270:	e5 57       	subi	r30, 0x75	; 117
    3272:	fd 4e       	sbci	r31, 0xED	; 237
    3274:	fd 87       	std	Y+13, r31	; 0x0d
    3276:	ec 87       	std	Y+12, r30	; 0x0c
    3278:	80 81       	ld	r24, Z
    327a:	8f 5f       	subi	r24, 0xFF	; 255
    327c:	80 83       	st	Z, r24
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	16 c0       	rjmp	.+44     	; 0x32ae <xTaskPriorityInherit+0x104>
    3282:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3286:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    328a:	5a 96       	adiw	r26, 0x1a	; 26
    328c:	8c 91       	ld	r24, X
    328e:	82 8f       	std	Z+26, r24	; 0x1a
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	0d c0       	rjmp	.+26     	; 0x32ae <xTaskPriorityInherit+0x104>
    3294:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3298:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	25 a5       	ldd	r18, Z+45	; 0x2d
    32a0:	5a 96       	adiw	r26, 0x1a	; 26
    32a2:	9c 91       	ld	r25, X
    32a4:	29 17       	cp	r18, r25
    32a6:	18 f0       	brcs	.+6      	; 0x32ae <xTaskPriorityInherit+0x104>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <xTaskPriorityInherit+0x104>
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <xTaskPriorityDisinherit>:
    32b8:	0f 93       	push	r16
    32ba:	1f 93       	push	r17
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	fc 01       	movw	r30, r24
    32c2:	89 2b       	or	r24, r25
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <xTaskPriorityDisinherit+0x10>
    32c6:	49 c0       	rjmp	.+146    	; 0x335a <xTaskPriorityDisinherit+0xa2>
    32c8:	86 a5       	ldd	r24, Z+46	; 0x2e
    32ca:	81 50       	subi	r24, 0x01	; 1
    32cc:	86 a7       	std	Z+46, r24	; 0x2e
    32ce:	22 8d       	ldd	r18, Z+26	; 0x1a
    32d0:	95 a5       	ldd	r25, Z+45	; 0x2d
    32d2:	29 17       	cp	r18, r25
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <xTaskPriorityDisinherit+0x20>
    32d6:	43 c0       	rjmp	.+134    	; 0x335e <xTaskPriorityDisinherit+0xa6>
    32d8:	81 11       	cpse	r24, r1
    32da:	43 c0       	rjmp	.+134    	; 0x3362 <xTaskPriorityDisinherit+0xaa>
    32dc:	ef 01       	movw	r28, r30
    32de:	8f 01       	movw	r16, r30
    32e0:	0e 5f       	subi	r16, 0xFE	; 254
    32e2:	1f 4f       	sbci	r17, 0xFF	; 255
    32e4:	c8 01       	movw	r24, r16
    32e6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
    32ea:	ed a5       	ldd	r30, Y+45	; 0x2d
    32ec:	ea 8f       	std	Y+26, r30	; 0x1a
    32ee:	8a e0       	ldi	r24, 0x0A	; 10
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 e0       	ldi	r26, 0x00	; 0
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	8e 1b       	sub	r24, r30
    32f8:	91 09       	sbc	r25, r1
    32fa:	a1 09       	sbc	r26, r1
    32fc:	b1 09       	sbc	r27, r1
    32fe:	8e 87       	std	Y+14, r24	; 0x0e
    3300:	9f 87       	std	Y+15, r25	; 0x0f
    3302:	a8 8b       	std	Y+16, r26	; 0x10
    3304:	b9 8b       	std	Y+17, r27	; 0x11
    3306:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    330a:	8e 17       	cp	r24, r30
    330c:	10 f4       	brcc	.+4      	; 0x3312 <xTaskPriorityDisinherit+0x5a>
    330e:	e0 93 49 12 	sts	0x1249, r30	; 0x801249 <uxTopReadyPriority>
    3312:	8b e0       	ldi	r24, 0x0B	; 11
    3314:	8e 9f       	mul	r24, r30
    3316:	f0 01       	movw	r30, r0
    3318:	11 24       	eor	r1, r1
    331a:	e5 57       	subi	r30, 0x75	; 117
    331c:	fd 4e       	sbci	r31, 0xED	; 237
    331e:	01 80       	ldd	r0, Z+1	; 0x01
    3320:	f2 81       	ldd	r31, Z+2	; 0x02
    3322:	e0 2d       	mov	r30, r0
    3324:	ff 83       	std	Y+7, r31	; 0x07
    3326:	ee 83       	std	Y+6, r30	; 0x06
    3328:	26 81       	ldd	r18, Z+6	; 0x06
    332a:	37 81       	ldd	r19, Z+7	; 0x07
    332c:	39 87       	std	Y+9, r19	; 0x09
    332e:	28 87       	std	Y+8, r18	; 0x08
    3330:	a6 81       	ldd	r26, Z+6	; 0x06
    3332:	b7 81       	ldd	r27, Z+7	; 0x07
    3334:	15 96       	adiw	r26, 0x05	; 5
    3336:	1c 93       	st	X, r17
    3338:	0e 93       	st	-X, r16
    333a:	14 97       	sbiw	r26, 0x04	; 4
    333c:	17 83       	std	Z+7, r17	; 0x07
    333e:	06 83       	std	Z+6, r16	; 0x06
    3340:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3342:	8e 9f       	mul	r24, r30
    3344:	f0 01       	movw	r30, r0
    3346:	11 24       	eor	r1, r1
    3348:	e5 57       	subi	r30, 0x75	; 117
    334a:	fd 4e       	sbci	r31, 0xED	; 237
    334c:	fd 87       	std	Y+13, r31	; 0x0d
    334e:	ec 87       	std	Y+12, r30	; 0x0c
    3350:	80 81       	ld	r24, Z
    3352:	8f 5f       	subi	r24, 0xFF	; 255
    3354:	80 83       	st	Z, r24
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	05 c0       	rjmp	.+10     	; 0x3364 <xTaskPriorityDisinherit+0xac>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <xTaskPriorityDisinherit+0xac>
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <xTaskPriorityDisinherit+0xac>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	08 95       	ret

0000336e <vTaskPriorityDisinheritAfterTimeout>:
    336e:	0f 93       	push	r16
    3370:	1f 93       	push	r17
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	fc 01       	movw	r30, r24
    3378:	89 2b       	or	r24, r25
    337a:	09 f4       	brne	.+2      	; 0x337e <vTaskPriorityDisinheritAfterTimeout+0x10>
    337c:	5a c0       	rjmp	.+180    	; 0x3432 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    337e:	85 a5       	ldd	r24, Z+45	; 0x2d
    3380:	86 17       	cp	r24, r22
    3382:	08 f4       	brcc	.+2      	; 0x3386 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3384:	86 2f       	mov	r24, r22
    3386:	92 8d       	ldd	r25, Z+26	; 0x1a
    3388:	98 17       	cp	r25, r24
    338a:	09 f4       	brne	.+2      	; 0x338e <vTaskPriorityDisinheritAfterTimeout+0x20>
    338c:	52 c0       	rjmp	.+164    	; 0x3432 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    338e:	26 a5       	ldd	r18, Z+46	; 0x2e
    3390:	21 30       	cpi	r18, 0x01	; 1
    3392:	09 f0       	breq	.+2      	; 0x3396 <vTaskPriorityDisinheritAfterTimeout+0x28>
    3394:	4e c0       	rjmp	.+156    	; 0x3432 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3396:	82 8f       	std	Z+26, r24	; 0x1a
    3398:	46 85       	ldd	r20, Z+14	; 0x0e
    339a:	57 85       	ldd	r21, Z+15	; 0x0f
    339c:	60 89       	ldd	r22, Z+16	; 0x10
    339e:	71 89       	ldd	r23, Z+17	; 0x11
    33a0:	77 23       	and	r23, r23
    33a2:	64 f0       	brlt	.+24     	; 0x33bc <vTaskPriorityDisinheritAfterTimeout+0x4e>
    33a4:	4a e0       	ldi	r20, 0x0A	; 10
    33a6:	50 e0       	ldi	r21, 0x00	; 0
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	70 e0       	ldi	r23, 0x00	; 0
    33ac:	48 1b       	sub	r20, r24
    33ae:	51 09       	sbc	r21, r1
    33b0:	61 09       	sbc	r22, r1
    33b2:	71 09       	sbc	r23, r1
    33b4:	46 87       	std	Z+14, r20	; 0x0e
    33b6:	57 87       	std	Z+15, r21	; 0x0f
    33b8:	60 8b       	std	Z+16, r22	; 0x10
    33ba:	71 8b       	std	Z+17, r23	; 0x11
    33bc:	2b e0       	ldi	r18, 0x0B	; 11
    33be:	92 9f       	mul	r25, r18
    33c0:	c0 01       	movw	r24, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	85 57       	subi	r24, 0x75	; 117
    33c6:	9d 4e       	sbci	r25, 0xED	; 237
    33c8:	24 85       	ldd	r18, Z+12	; 0x0c
    33ca:	35 85       	ldd	r19, Z+13	; 0x0d
    33cc:	28 17       	cp	r18, r24
    33ce:	39 07       	cpc	r19, r25
    33d0:	81 f5       	brne	.+96     	; 0x3432 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    33d2:	ef 01       	movw	r28, r30
    33d4:	8f 01       	movw	r16, r30
    33d6:	0e 5f       	subi	r16, 0xFE	; 254
    33d8:	1f 4f       	sbci	r17, 0xFF	; 255
    33da:	c8 01       	movw	r24, r16
    33dc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
    33e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    33e2:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    33e6:	8e 17       	cp	r24, r30
    33e8:	10 f4       	brcc	.+4      	; 0x33ee <vTaskPriorityDisinheritAfterTimeout+0x80>
    33ea:	e0 93 49 12 	sts	0x1249, r30	; 0x801249 <uxTopReadyPriority>
    33ee:	8b e0       	ldi	r24, 0x0B	; 11
    33f0:	8e 9f       	mul	r24, r30
    33f2:	f0 01       	movw	r30, r0
    33f4:	11 24       	eor	r1, r1
    33f6:	e5 57       	subi	r30, 0x75	; 117
    33f8:	fd 4e       	sbci	r31, 0xED	; 237
    33fa:	01 80       	ldd	r0, Z+1	; 0x01
    33fc:	f2 81       	ldd	r31, Z+2	; 0x02
    33fe:	e0 2d       	mov	r30, r0
    3400:	ff 83       	std	Y+7, r31	; 0x07
    3402:	ee 83       	std	Y+6, r30	; 0x06
    3404:	26 81       	ldd	r18, Z+6	; 0x06
    3406:	37 81       	ldd	r19, Z+7	; 0x07
    3408:	39 87       	std	Y+9, r19	; 0x09
    340a:	28 87       	std	Y+8, r18	; 0x08
    340c:	a6 81       	ldd	r26, Z+6	; 0x06
    340e:	b7 81       	ldd	r27, Z+7	; 0x07
    3410:	15 96       	adiw	r26, 0x05	; 5
    3412:	1c 93       	st	X, r17
    3414:	0e 93       	st	-X, r16
    3416:	14 97       	sbiw	r26, 0x04	; 4
    3418:	17 83       	std	Z+7, r17	; 0x07
    341a:	06 83       	std	Z+6, r16	; 0x06
    341c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    341e:	8e 9f       	mul	r24, r30
    3420:	f0 01       	movw	r30, r0
    3422:	11 24       	eor	r1, r1
    3424:	e5 57       	subi	r30, 0x75	; 117
    3426:	fd 4e       	sbci	r31, 0xED	; 237
    3428:	fd 87       	std	Y+13, r31	; 0x0d
    342a:	ec 87       	std	Y+12, r30	; 0x0c
    342c:	80 81       	ld	r24, Z
    342e:	8f 5f       	subi	r24, 0xFF	; 255
    3430:	80 83       	st	Z, r24
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	08 95       	ret

0000343c <pvTaskIncrementMutexHeldCount>:
    343c:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3440:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3444:	89 2b       	or	r24, r25
    3446:	39 f0       	breq	.+14     	; 0x3456 <pvTaskIncrementMutexHeldCount+0x1a>
    3448:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    344c:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3450:	86 a5       	ldd	r24, Z+46	; 0x2e
    3452:	8f 5f       	subi	r24, 0xFF	; 255
    3454:	86 a7       	std	Z+46, r24	; 0x2e
    3456:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    345a:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    345e:	08 95       	ret

00003460 <xTaskGenericNotifyWait>:
    3460:	4f 92       	push	r4
    3462:	5f 92       	push	r5
    3464:	6f 92       	push	r6
    3466:	7f 92       	push	r7
    3468:	af 92       	push	r10
    346a:	bf 92       	push	r11
    346c:	cf 92       	push	r12
    346e:	df 92       	push	r13
    3470:	ef 92       	push	r14
    3472:	ff 92       	push	r15
    3474:	0f 93       	push	r16
    3476:	1f 93       	push	r17
    3478:	cf 93       	push	r28
    347a:	df 93       	push	r29
    347c:	28 01       	movw	r4, r16
    347e:	39 01       	movw	r6, r18
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	0f 92       	push	r0
    3486:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    348a:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    348e:	c8 2f       	mov	r28, r24
    3490:	d0 e0       	ldi	r29, 0x00	; 0
    3492:	ec 0f       	add	r30, r28
    3494:	fd 1f       	adc	r31, r29
    3496:	83 a9       	ldd	r24, Z+51	; 0x33
    3498:	82 30       	cpi	r24, 0x02	; 2
    349a:	79 f1       	breq	.+94     	; 0x34fa <xTaskGenericNotifyWait+0x9a>
    349c:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    34a0:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    34a4:	ce 01       	movw	r24, r28
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	e8 0f       	add	r30, r24
    34b0:	f9 1f       	adc	r31, r25
    34b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    34b4:	90 a9       	ldd	r25, Z+48	; 0x30
    34b6:	a1 a9       	ldd	r26, Z+49	; 0x31
    34b8:	b2 a9       	ldd	r27, Z+50	; 0x32
    34ba:	40 95       	com	r20
    34bc:	50 95       	com	r21
    34be:	60 95       	com	r22
    34c0:	70 95       	com	r23
    34c2:	48 23       	and	r20, r24
    34c4:	59 23       	and	r21, r25
    34c6:	6a 23       	and	r22, r26
    34c8:	7b 23       	and	r23, r27
    34ca:	47 a7       	std	Z+47, r20	; 0x2f
    34cc:	50 ab       	std	Z+48, r21	; 0x30
    34ce:	61 ab       	std	Z+49, r22	; 0x31
    34d0:	72 ab       	std	Z+50, r23	; 0x32
    34d2:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    34d6:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    34da:	ec 0f       	add	r30, r28
    34dc:	fd 1f       	adc	r31, r29
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	83 ab       	std	Z+51, r24	; 0x33
    34e2:	a1 14       	cp	r10, r1
    34e4:	b1 04       	cpc	r11, r1
    34e6:	c1 04       	cpc	r12, r1
    34e8:	d1 04       	cpc	r13, r1
    34ea:	39 f0       	breq	.+14     	; 0x34fa <xTaskGenericNotifyWait+0x9a>
    34ec:	41 e0       	ldi	r20, 0x01	; 1
    34ee:	c6 01       	movw	r24, r12
    34f0:	b5 01       	movw	r22, r10
    34f2:	0e 94 6d 12 	call	0x24da	; 0x24da <prvAddCurrentTaskToDelayedList>
    34f6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
    34fa:	0f 90       	pop	r0
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	0f 92       	push	r0
    3504:	e1 14       	cp	r14, r1
    3506:	f1 04       	cpc	r15, r1
    3508:	a1 f0       	breq	.+40     	; 0x3532 <xTaskGenericNotifyWait+0xd2>
    350a:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    350e:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3512:	ce 01       	movw	r24, r28
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	e8 0f       	add	r30, r24
    351e:	f9 1f       	adc	r31, r25
    3520:	87 a5       	ldd	r24, Z+47	; 0x2f
    3522:	90 a9       	ldd	r25, Z+48	; 0x30
    3524:	a1 a9       	ldd	r26, Z+49	; 0x31
    3526:	b2 a9       	ldd	r27, Z+50	; 0x32
    3528:	f7 01       	movw	r30, r14
    352a:	80 83       	st	Z, r24
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	a2 83       	std	Z+2, r26	; 0x02
    3530:	b3 83       	std	Z+3, r27	; 0x03
    3532:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3536:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    353a:	ec 0f       	add	r30, r28
    353c:	fd 1f       	adc	r31, r29
    353e:	83 a9       	ldd	r24, Z+51	; 0x33
    3540:	82 30       	cpi	r24, 0x02	; 2
    3542:	e9 f4       	brne	.+58     	; 0x357e <xTaskGenericNotifyWait+0x11e>
    3544:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3548:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    354c:	ce 01       	movw	r24, r28
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	e8 0f       	add	r30, r24
    3558:	f9 1f       	adc	r31, r25
    355a:	87 a5       	ldd	r24, Z+47	; 0x2f
    355c:	90 a9       	ldd	r25, Z+48	; 0x30
    355e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3560:	b2 a9       	ldd	r27, Z+50	; 0x32
    3562:	40 94       	com	r4
    3564:	50 94       	com	r5
    3566:	60 94       	com	r6
    3568:	70 94       	com	r7
    356a:	48 22       	and	r4, r24
    356c:	59 22       	and	r5, r25
    356e:	6a 22       	and	r6, r26
    3570:	7b 22       	and	r7, r27
    3572:	47 a6       	std	Z+47, r4	; 0x2f
    3574:	50 aa       	std	Z+48, r5	; 0x30
    3576:	61 aa       	std	Z+49, r6	; 0x31
    3578:	72 aa       	std	Z+50, r7	; 0x32
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <xTaskGenericNotifyWait+0x120>
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	20 91 f9 12 	lds	r18, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3584:	30 91 fa 12 	lds	r19, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3588:	c2 0f       	add	r28, r18
    358a:	d3 1f       	adc	r29, r19
    358c:	1b aa       	std	Y+51, r1	; 0x33
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	df 90       	pop	r13
    35a0:	cf 90       	pop	r12
    35a2:	bf 90       	pop	r11
    35a4:	af 90       	pop	r10
    35a6:	7f 90       	pop	r7
    35a8:	6f 90       	pop	r6
    35aa:	5f 90       	pop	r5
    35ac:	4f 90       	pop	r4
    35ae:	08 95       	ret

000035b0 <xTaskGenericNotify>:
    35b0:	8f 92       	push	r8
    35b2:	9f 92       	push	r9
    35b4:	af 92       	push	r10
    35b6:	bf 92       	push	r11
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	dc 01       	movw	r26, r24
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	0f 92       	push	r0
    35ca:	e1 14       	cp	r14, r1
    35cc:	f1 04       	cpc	r15, r1
    35ce:	79 f0       	breq	.+30     	; 0x35ee <xTaskGenericNotify+0x3e>
    35d0:	fc 01       	movw	r30, r24
    35d2:	84 e0       	ldi	r24, 0x04	; 4
    35d4:	68 9f       	mul	r22, r24
    35d6:	e0 0d       	add	r30, r0
    35d8:	f1 1d       	adc	r31, r1
    35da:	11 24       	eor	r1, r1
    35dc:	87 a4       	ldd	r8, Z+47	; 0x2f
    35de:	90 a8       	ldd	r9, Z+48	; 0x30
    35e0:	a1 a8       	ldd	r10, Z+49	; 0x31
    35e2:	b2 a8       	ldd	r11, Z+50	; 0x32
    35e4:	f7 01       	movw	r30, r14
    35e6:	80 82       	st	Z, r8
    35e8:	91 82       	std	Z+1, r9	; 0x01
    35ea:	a2 82       	std	Z+2, r10	; 0x02
    35ec:	b3 82       	std	Z+3, r11	; 0x03
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	fd 01       	movw	r30, r26
    35f2:	e6 0f       	add	r30, r22
    35f4:	f7 1f       	adc	r31, r23
    35f6:	83 a9       	ldd	r24, Z+51	; 0x33
    35f8:	92 e0       	ldi	r25, 0x02	; 2
    35fa:	93 ab       	std	Z+51, r25	; 0x33
    35fc:	02 30       	cpi	r16, 0x02	; 2
    35fe:	f9 f0       	breq	.+62     	; 0x363e <xTaskGenericNotify+0x8e>
    3600:	18 f4       	brcc	.+6      	; 0x3608 <xTaskGenericNotify+0x58>
    3602:	01 30       	cpi	r16, 0x01	; 1
    3604:	31 f0       	breq	.+12     	; 0x3612 <xTaskGenericNotify+0x62>
    3606:	49 c0       	rjmp	.+146    	; 0x369a <xTaskGenericNotify+0xea>
    3608:	03 30       	cpi	r16, 0x03	; 3
    360a:	69 f1       	breq	.+90     	; 0x3666 <xTaskGenericNotify+0xb6>
    360c:	04 30       	cpi	r16, 0x04	; 4
    360e:	b9 f1       	breq	.+110    	; 0x367e <xTaskGenericNotify+0xce>
    3610:	44 c0       	rjmp	.+136    	; 0x369a <xTaskGenericNotify+0xea>
    3612:	66 0f       	add	r22, r22
    3614:	77 1f       	adc	r23, r23
    3616:	66 0f       	add	r22, r22
    3618:	77 1f       	adc	r23, r23
    361a:	fd 01       	movw	r30, r26
    361c:	e6 0f       	add	r30, r22
    361e:	f7 1f       	adc	r31, r23
    3620:	87 a4       	ldd	r8, Z+47	; 0x2f
    3622:	90 a8       	ldd	r9, Z+48	; 0x30
    3624:	a1 a8       	ldd	r10, Z+49	; 0x31
    3626:	b2 a8       	ldd	r11, Z+50	; 0x32
    3628:	ba 01       	movw	r22, r20
    362a:	a9 01       	movw	r20, r18
    362c:	48 29       	or	r20, r8
    362e:	59 29       	or	r21, r9
    3630:	6a 29       	or	r22, r10
    3632:	7b 29       	or	r23, r11
    3634:	47 a7       	std	Z+47, r20	; 0x2f
    3636:	50 ab       	std	Z+48, r21	; 0x30
    3638:	61 ab       	std	Z+49, r22	; 0x31
    363a:	72 ab       	std	Z+50, r23	; 0x32
    363c:	2e c0       	rjmp	.+92     	; 0x369a <xTaskGenericNotify+0xea>
    363e:	66 0f       	add	r22, r22
    3640:	77 1f       	adc	r23, r23
    3642:	66 0f       	add	r22, r22
    3644:	77 1f       	adc	r23, r23
    3646:	fd 01       	movw	r30, r26
    3648:	e6 0f       	add	r30, r22
    364a:	f7 1f       	adc	r31, r23
    364c:	47 a5       	ldd	r20, Z+47	; 0x2f
    364e:	50 a9       	ldd	r21, Z+48	; 0x30
    3650:	61 a9       	ldd	r22, Z+49	; 0x31
    3652:	72 a9       	ldd	r23, Z+50	; 0x32
    3654:	4f 5f       	subi	r20, 0xFF	; 255
    3656:	5f 4f       	sbci	r21, 0xFF	; 255
    3658:	6f 4f       	sbci	r22, 0xFF	; 255
    365a:	7f 4f       	sbci	r23, 0xFF	; 255
    365c:	47 a7       	std	Z+47, r20	; 0x2f
    365e:	50 ab       	std	Z+48, r21	; 0x30
    3660:	61 ab       	std	Z+49, r22	; 0x31
    3662:	72 ab       	std	Z+50, r23	; 0x32
    3664:	1a c0       	rjmp	.+52     	; 0x369a <xTaskGenericNotify+0xea>
    3666:	66 0f       	add	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	66 0f       	add	r22, r22
    366c:	77 1f       	adc	r23, r23
    366e:	fd 01       	movw	r30, r26
    3670:	e6 0f       	add	r30, r22
    3672:	f7 1f       	adc	r31, r23
    3674:	27 a7       	std	Z+47, r18	; 0x2f
    3676:	30 ab       	std	Z+48, r19	; 0x30
    3678:	41 ab       	std	Z+49, r20	; 0x31
    367a:	52 ab       	std	Z+50, r21	; 0x32
    367c:	0e c0       	rjmp	.+28     	; 0x369a <xTaskGenericNotify+0xea>
    367e:	82 30       	cpi	r24, 0x02	; 2
    3680:	09 f4       	brne	.+2      	; 0x3684 <xTaskGenericNotify+0xd4>
    3682:	79 c0       	rjmp	.+242    	; 0x3776 <xTaskGenericNotify+0x1c6>
    3684:	66 0f       	add	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	66 0f       	add	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	fd 01       	movw	r30, r26
    368e:	e6 0f       	add	r30, r22
    3690:	f7 1f       	adc	r31, r23
    3692:	27 a7       	std	Z+47, r18	; 0x2f
    3694:	30 ab       	std	Z+48, r19	; 0x30
    3696:	41 ab       	std	Z+49, r20	; 0x31
    3698:	52 ab       	std	Z+50, r21	; 0x32
    369a:	81 30       	cpi	r24, 0x01	; 1
    369c:	09 f0       	breq	.+2      	; 0x36a0 <xTaskGenericNotify+0xf0>
    369e:	6d c0       	rjmp	.+218    	; 0x377a <xTaskGenericNotify+0x1ca>
    36a0:	1c 96       	adiw	r26, 0x0c	; 12
    36a2:	ed 91       	ld	r30, X+
    36a4:	fc 91       	ld	r31, X
    36a6:	1d 97       	sbiw	r26, 0x0d	; 13
    36a8:	16 96       	adiw	r26, 0x06	; 6
    36aa:	cd 91       	ld	r28, X+
    36ac:	dc 91       	ld	r29, X
    36ae:	17 97       	sbiw	r26, 0x07	; 7
    36b0:	18 96       	adiw	r26, 0x08	; 8
    36b2:	8d 91       	ld	r24, X+
    36b4:	9c 91       	ld	r25, X
    36b6:	19 97       	sbiw	r26, 0x09	; 9
    36b8:	9f 83       	std	Y+7, r25	; 0x07
    36ba:	8e 83       	std	Y+6, r24	; 0x06
    36bc:	18 96       	adiw	r26, 0x08	; 8
    36be:	cd 91       	ld	r28, X+
    36c0:	dc 91       	ld	r29, X
    36c2:	19 97       	sbiw	r26, 0x09	; 9
    36c4:	16 96       	adiw	r26, 0x06	; 6
    36c6:	8d 91       	ld	r24, X+
    36c8:	9c 91       	ld	r25, X
    36ca:	17 97       	sbiw	r26, 0x07	; 7
    36cc:	9d 83       	std	Y+5, r25	; 0x05
    36ce:	8c 83       	std	Y+4, r24	; 0x04
    36d0:	9d 01       	movw	r18, r26
    36d2:	2e 5f       	subi	r18, 0xFE	; 254
    36d4:	3f 4f       	sbci	r19, 0xFF	; 255
    36d6:	81 81       	ldd	r24, Z+1	; 0x01
    36d8:	92 81       	ldd	r25, Z+2	; 0x02
    36da:	82 17       	cp	r24, r18
    36dc:	93 07       	cpc	r25, r19
    36de:	31 f4       	brne	.+12     	; 0x36ec <xTaskGenericNotify+0x13c>
    36e0:	18 96       	adiw	r26, 0x08	; 8
    36e2:	8d 91       	ld	r24, X+
    36e4:	9c 91       	ld	r25, X
    36e6:	19 97       	sbiw	r26, 0x09	; 9
    36e8:	92 83       	std	Z+2, r25	; 0x02
    36ea:	81 83       	std	Z+1, r24	; 0x01
    36ec:	1d 96       	adiw	r26, 0x0d	; 13
    36ee:	1c 92       	st	X, r1
    36f0:	1e 92       	st	-X, r1
    36f2:	1c 97       	sbiw	r26, 0x0c	; 12
    36f4:	80 81       	ld	r24, Z
    36f6:	81 50       	subi	r24, 0x01	; 1
    36f8:	80 83       	st	Z, r24
    36fa:	5a 96       	adiw	r26, 0x1a	; 26
    36fc:	ec 91       	ld	r30, X
    36fe:	5a 97       	sbiw	r26, 0x1a	; 26
    3700:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    3704:	8e 17       	cp	r24, r30
    3706:	10 f4       	brcc	.+4      	; 0x370c <xTaskGenericNotify+0x15c>
    3708:	e0 93 49 12 	sts	0x1249, r30	; 0x801249 <uxTopReadyPriority>
    370c:	8b e0       	ldi	r24, 0x0B	; 11
    370e:	8e 9f       	mul	r24, r30
    3710:	f0 01       	movw	r30, r0
    3712:	11 24       	eor	r1, r1
    3714:	e5 57       	subi	r30, 0x75	; 117
    3716:	fd 4e       	sbci	r31, 0xED	; 237
    3718:	01 80       	ldd	r0, Z+1	; 0x01
    371a:	f2 81       	ldd	r31, Z+2	; 0x02
    371c:	e0 2d       	mov	r30, r0
    371e:	17 96       	adiw	r26, 0x07	; 7
    3720:	fc 93       	st	X, r31
    3722:	ee 93       	st	-X, r30
    3724:	16 97       	sbiw	r26, 0x06	; 6
    3726:	46 81       	ldd	r20, Z+6	; 0x06
    3728:	57 81       	ldd	r21, Z+7	; 0x07
    372a:	19 96       	adiw	r26, 0x09	; 9
    372c:	5c 93       	st	X, r21
    372e:	4e 93       	st	-X, r20
    3730:	18 97       	sbiw	r26, 0x08	; 8
    3732:	c6 81       	ldd	r28, Z+6	; 0x06
    3734:	d7 81       	ldd	r29, Z+7	; 0x07
    3736:	3d 83       	std	Y+5, r19	; 0x05
    3738:	2c 83       	std	Y+4, r18	; 0x04
    373a:	37 83       	std	Z+7, r19	; 0x07
    373c:	26 83       	std	Z+6, r18	; 0x06
    373e:	5a 96       	adiw	r26, 0x1a	; 26
    3740:	ec 91       	ld	r30, X
    3742:	5a 97       	sbiw	r26, 0x1a	; 26
    3744:	8e 9f       	mul	r24, r30
    3746:	f0 01       	movw	r30, r0
    3748:	11 24       	eor	r1, r1
    374a:	e5 57       	subi	r30, 0x75	; 117
    374c:	fd 4e       	sbci	r31, 0xED	; 237
    374e:	1d 96       	adiw	r26, 0x0d	; 13
    3750:	fc 93       	st	X, r31
    3752:	ee 93       	st	-X, r30
    3754:	1c 97       	sbiw	r26, 0x0c	; 12
    3756:	80 81       	ld	r24, Z
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	80 83       	st	Z, r24
    375c:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3760:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3764:	5a 96       	adiw	r26, 0x1a	; 26
    3766:	9c 91       	ld	r25, X
    3768:	82 8d       	ldd	r24, Z+26	; 0x1a
    376a:	89 17       	cp	r24, r25
    376c:	40 f4       	brcc	.+16     	; 0x377e <xTaskGenericNotify+0x1ce>
    376e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	05 c0       	rjmp	.+10     	; 0x3780 <xTaskGenericNotify+0x1d0>
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <xTaskGenericNotify+0x1d0>
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <xTaskGenericNotify+0x1d0>
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	bf 90       	pop	r11
    3790:	af 90       	pop	r10
    3792:	9f 90       	pop	r9
    3794:	8f 90       	pop	r8
    3796:	08 95       	ret

00003798 <xTaskGenericNotifyFromISR>:
    3798:	8f 92       	push	r8
    379a:	9f 92       	push	r9
    379c:	af 92       	push	r10
    379e:	bf 92       	push	r11
    37a0:	cf 92       	push	r12
    37a2:	df 92       	push	r13
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	dc 01       	movw	r26, r24
    37b0:	e1 14       	cp	r14, r1
    37b2:	f1 04       	cpc	r15, r1
    37b4:	79 f0       	breq	.+30     	; 0x37d4 <xTaskGenericNotifyFromISR+0x3c>
    37b6:	fc 01       	movw	r30, r24
    37b8:	84 e0       	ldi	r24, 0x04	; 4
    37ba:	68 9f       	mul	r22, r24
    37bc:	e0 0d       	add	r30, r0
    37be:	f1 1d       	adc	r31, r1
    37c0:	11 24       	eor	r1, r1
    37c2:	87 a4       	ldd	r8, Z+47	; 0x2f
    37c4:	90 a8       	ldd	r9, Z+48	; 0x30
    37c6:	a1 a8       	ldd	r10, Z+49	; 0x31
    37c8:	b2 a8       	ldd	r11, Z+50	; 0x32
    37ca:	f7 01       	movw	r30, r14
    37cc:	80 82       	st	Z, r8
    37ce:	91 82       	std	Z+1, r9	; 0x01
    37d0:	a2 82       	std	Z+2, r10	; 0x02
    37d2:	b3 82       	std	Z+3, r11	; 0x03
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	fd 01       	movw	r30, r26
    37d8:	e6 0f       	add	r30, r22
    37da:	f7 1f       	adc	r31, r23
    37dc:	83 a9       	ldd	r24, Z+51	; 0x33
    37de:	92 e0       	ldi	r25, 0x02	; 2
    37e0:	93 ab       	std	Z+51, r25	; 0x33
    37e2:	02 30       	cpi	r16, 0x02	; 2
    37e4:	f9 f0       	breq	.+62     	; 0x3824 <xTaskGenericNotifyFromISR+0x8c>
    37e6:	18 f4       	brcc	.+6      	; 0x37ee <xTaskGenericNotifyFromISR+0x56>
    37e8:	01 30       	cpi	r16, 0x01	; 1
    37ea:	31 f0       	breq	.+12     	; 0x37f8 <xTaskGenericNotifyFromISR+0x60>
    37ec:	49 c0       	rjmp	.+146    	; 0x3880 <xTaskGenericNotifyFromISR+0xe8>
    37ee:	03 30       	cpi	r16, 0x03	; 3
    37f0:	69 f1       	breq	.+90     	; 0x384c <xTaskGenericNotifyFromISR+0xb4>
    37f2:	04 30       	cpi	r16, 0x04	; 4
    37f4:	b9 f1       	breq	.+110    	; 0x3864 <xTaskGenericNotifyFromISR+0xcc>
    37f6:	44 c0       	rjmp	.+136    	; 0x3880 <xTaskGenericNotifyFromISR+0xe8>
    37f8:	66 0f       	add	r22, r22
    37fa:	77 1f       	adc	r23, r23
    37fc:	66 0f       	add	r22, r22
    37fe:	77 1f       	adc	r23, r23
    3800:	fd 01       	movw	r30, r26
    3802:	e6 0f       	add	r30, r22
    3804:	f7 1f       	adc	r31, r23
    3806:	87 a4       	ldd	r8, Z+47	; 0x2f
    3808:	90 a8       	ldd	r9, Z+48	; 0x30
    380a:	a1 a8       	ldd	r10, Z+49	; 0x31
    380c:	b2 a8       	ldd	r11, Z+50	; 0x32
    380e:	ba 01       	movw	r22, r20
    3810:	a9 01       	movw	r20, r18
    3812:	48 29       	or	r20, r8
    3814:	59 29       	or	r21, r9
    3816:	6a 29       	or	r22, r10
    3818:	7b 29       	or	r23, r11
    381a:	47 a7       	std	Z+47, r20	; 0x2f
    381c:	50 ab       	std	Z+48, r21	; 0x30
    381e:	61 ab       	std	Z+49, r22	; 0x31
    3820:	72 ab       	std	Z+50, r23	; 0x32
    3822:	2e c0       	rjmp	.+92     	; 0x3880 <xTaskGenericNotifyFromISR+0xe8>
    3824:	66 0f       	add	r22, r22
    3826:	77 1f       	adc	r23, r23
    3828:	66 0f       	add	r22, r22
    382a:	77 1f       	adc	r23, r23
    382c:	fd 01       	movw	r30, r26
    382e:	e6 0f       	add	r30, r22
    3830:	f7 1f       	adc	r31, r23
    3832:	47 a5       	ldd	r20, Z+47	; 0x2f
    3834:	50 a9       	ldd	r21, Z+48	; 0x30
    3836:	61 a9       	ldd	r22, Z+49	; 0x31
    3838:	72 a9       	ldd	r23, Z+50	; 0x32
    383a:	4f 5f       	subi	r20, 0xFF	; 255
    383c:	5f 4f       	sbci	r21, 0xFF	; 255
    383e:	6f 4f       	sbci	r22, 0xFF	; 255
    3840:	7f 4f       	sbci	r23, 0xFF	; 255
    3842:	47 a7       	std	Z+47, r20	; 0x2f
    3844:	50 ab       	std	Z+48, r21	; 0x30
    3846:	61 ab       	std	Z+49, r22	; 0x31
    3848:	72 ab       	std	Z+50, r23	; 0x32
    384a:	1a c0       	rjmp	.+52     	; 0x3880 <xTaskGenericNotifyFromISR+0xe8>
    384c:	66 0f       	add	r22, r22
    384e:	77 1f       	adc	r23, r23
    3850:	66 0f       	add	r22, r22
    3852:	77 1f       	adc	r23, r23
    3854:	fd 01       	movw	r30, r26
    3856:	e6 0f       	add	r30, r22
    3858:	f7 1f       	adc	r31, r23
    385a:	27 a7       	std	Z+47, r18	; 0x2f
    385c:	30 ab       	std	Z+48, r19	; 0x30
    385e:	41 ab       	std	Z+49, r20	; 0x31
    3860:	52 ab       	std	Z+50, r21	; 0x32
    3862:	0e c0       	rjmp	.+28     	; 0x3880 <xTaskGenericNotifyFromISR+0xe8>
    3864:	82 30       	cpi	r24, 0x02	; 2
    3866:	09 f4       	brne	.+2      	; 0x386a <xTaskGenericNotifyFromISR+0xd2>
    3868:	a4 c0       	rjmp	.+328    	; 0x39b2 <xTaskGenericNotifyFromISR+0x21a>
    386a:	66 0f       	add	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	66 0f       	add	r22, r22
    3870:	77 1f       	adc	r23, r23
    3872:	fd 01       	movw	r30, r26
    3874:	e6 0f       	add	r30, r22
    3876:	f7 1f       	adc	r31, r23
    3878:	27 a7       	std	Z+47, r18	; 0x2f
    387a:	30 ab       	std	Z+48, r19	; 0x30
    387c:	41 ab       	std	Z+49, r20	; 0x31
    387e:	52 ab       	std	Z+50, r21	; 0x32
    3880:	81 30       	cpi	r24, 0x01	; 1
    3882:	09 f0       	breq	.+2      	; 0x3886 <xTaskGenericNotifyFromISR+0xee>
    3884:	98 c0       	rjmp	.+304    	; 0x39b6 <xTaskGenericNotifyFromISR+0x21e>
    3886:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <uxSchedulerSuspended>
    388a:	81 11       	cpse	r24, r1
    388c:	5f c0       	rjmp	.+190    	; 0x394c <xTaskGenericNotifyFromISR+0x1b4>
    388e:	1c 96       	adiw	r26, 0x0c	; 12
    3890:	ed 91       	ld	r30, X+
    3892:	fc 91       	ld	r31, X
    3894:	1d 97       	sbiw	r26, 0x0d	; 13
    3896:	16 96       	adiw	r26, 0x06	; 6
    3898:	cd 91       	ld	r28, X+
    389a:	dc 91       	ld	r29, X
    389c:	17 97       	sbiw	r26, 0x07	; 7
    389e:	18 96       	adiw	r26, 0x08	; 8
    38a0:	8d 91       	ld	r24, X+
    38a2:	9c 91       	ld	r25, X
    38a4:	19 97       	sbiw	r26, 0x09	; 9
    38a6:	9f 83       	std	Y+7, r25	; 0x07
    38a8:	8e 83       	std	Y+6, r24	; 0x06
    38aa:	18 96       	adiw	r26, 0x08	; 8
    38ac:	cd 91       	ld	r28, X+
    38ae:	dc 91       	ld	r29, X
    38b0:	19 97       	sbiw	r26, 0x09	; 9
    38b2:	16 96       	adiw	r26, 0x06	; 6
    38b4:	8d 91       	ld	r24, X+
    38b6:	9c 91       	ld	r25, X
    38b8:	17 97       	sbiw	r26, 0x07	; 7
    38ba:	9d 83       	std	Y+5, r25	; 0x05
    38bc:	8c 83       	std	Y+4, r24	; 0x04
    38be:	9d 01       	movw	r18, r26
    38c0:	2e 5f       	subi	r18, 0xFE	; 254
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	81 81       	ldd	r24, Z+1	; 0x01
    38c6:	92 81       	ldd	r25, Z+2	; 0x02
    38c8:	82 17       	cp	r24, r18
    38ca:	93 07       	cpc	r25, r19
    38cc:	31 f4       	brne	.+12     	; 0x38da <xTaskGenericNotifyFromISR+0x142>
    38ce:	18 96       	adiw	r26, 0x08	; 8
    38d0:	8d 91       	ld	r24, X+
    38d2:	9c 91       	ld	r25, X
    38d4:	19 97       	sbiw	r26, 0x09	; 9
    38d6:	92 83       	std	Z+2, r25	; 0x02
    38d8:	81 83       	std	Z+1, r24	; 0x01
    38da:	1d 96       	adiw	r26, 0x0d	; 13
    38dc:	1c 92       	st	X, r1
    38de:	1e 92       	st	-X, r1
    38e0:	1c 97       	sbiw	r26, 0x0c	; 12
    38e2:	80 81       	ld	r24, Z
    38e4:	81 50       	subi	r24, 0x01	; 1
    38e6:	80 83       	st	Z, r24
    38e8:	5a 96       	adiw	r26, 0x1a	; 26
    38ea:	ec 91       	ld	r30, X
    38ec:	5a 97       	sbiw	r26, 0x1a	; 26
    38ee:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <uxTopReadyPriority>
    38f2:	8e 17       	cp	r24, r30
    38f4:	10 f4       	brcc	.+4      	; 0x38fa <xTaskGenericNotifyFromISR+0x162>
    38f6:	e0 93 49 12 	sts	0x1249, r30	; 0x801249 <uxTopReadyPriority>
    38fa:	8b e0       	ldi	r24, 0x0B	; 11
    38fc:	8e 9f       	mul	r24, r30
    38fe:	f0 01       	movw	r30, r0
    3900:	11 24       	eor	r1, r1
    3902:	e5 57       	subi	r30, 0x75	; 117
    3904:	fd 4e       	sbci	r31, 0xED	; 237
    3906:	01 80       	ldd	r0, Z+1	; 0x01
    3908:	f2 81       	ldd	r31, Z+2	; 0x02
    390a:	e0 2d       	mov	r30, r0
    390c:	17 96       	adiw	r26, 0x07	; 7
    390e:	fc 93       	st	X, r31
    3910:	ee 93       	st	-X, r30
    3912:	16 97       	sbiw	r26, 0x06	; 6
    3914:	46 81       	ldd	r20, Z+6	; 0x06
    3916:	57 81       	ldd	r21, Z+7	; 0x07
    3918:	19 96       	adiw	r26, 0x09	; 9
    391a:	5c 93       	st	X, r21
    391c:	4e 93       	st	-X, r20
    391e:	18 97       	sbiw	r26, 0x08	; 8
    3920:	c6 81       	ldd	r28, Z+6	; 0x06
    3922:	d7 81       	ldd	r29, Z+7	; 0x07
    3924:	3d 83       	std	Y+5, r19	; 0x05
    3926:	2c 83       	std	Y+4, r18	; 0x04
    3928:	37 83       	std	Z+7, r19	; 0x07
    392a:	26 83       	std	Z+6, r18	; 0x06
    392c:	5a 96       	adiw	r26, 0x1a	; 26
    392e:	ec 91       	ld	r30, X
    3930:	5a 97       	sbiw	r26, 0x1a	; 26
    3932:	8e 9f       	mul	r24, r30
    3934:	f0 01       	movw	r30, r0
    3936:	11 24       	eor	r1, r1
    3938:	e5 57       	subi	r30, 0x75	; 117
    393a:	fd 4e       	sbci	r31, 0xED	; 237
    393c:	1d 96       	adiw	r26, 0x0d	; 13
    393e:	fc 93       	st	X, r31
    3940:	ee 93       	st	-X, r30
    3942:	1c 97       	sbiw	r26, 0x0c	; 12
    3944:	80 81       	ld	r24, Z
    3946:	8f 5f       	subi	r24, 0xFF	; 255
    3948:	80 83       	st	Z, r24
    394a:	20 c0       	rjmp	.+64     	; 0x398c <xTaskGenericNotifyFromISR+0x1f4>
    394c:	46 e6       	ldi	r20, 0x66	; 102
    394e:	52 e1       	ldi	r21, 0x12	; 18
    3950:	fa 01       	movw	r30, r20
    3952:	c1 81       	ldd	r28, Z+1	; 0x01
    3954:	d2 81       	ldd	r29, Z+2	; 0x02
    3956:	53 96       	adiw	r26, 0x13	; 19
    3958:	dc 93       	st	X, r29
    395a:	ce 93       	st	-X, r28
    395c:	52 97       	sbiw	r26, 0x12	; 18
    395e:	8e 81       	ldd	r24, Y+6	; 0x06
    3960:	9f 81       	ldd	r25, Y+7	; 0x07
    3962:	55 96       	adiw	r26, 0x15	; 21
    3964:	9c 93       	st	X, r25
    3966:	8e 93       	st	-X, r24
    3968:	54 97       	sbiw	r26, 0x14	; 20
    396a:	2e 81       	ldd	r18, Y+6	; 0x06
    396c:	3f 81       	ldd	r19, Y+7	; 0x07
    396e:	cd 01       	movw	r24, r26
    3970:	0e 96       	adiw	r24, 0x0e	; 14
    3972:	f9 01       	movw	r30, r18
    3974:	95 83       	std	Z+5, r25	; 0x05
    3976:	84 83       	std	Z+4, r24	; 0x04
    3978:	9f 83       	std	Y+7, r25	; 0x07
    397a:	8e 83       	std	Y+6, r24	; 0x06
    397c:	59 96       	adiw	r26, 0x19	; 25
    397e:	5c 93       	st	X, r21
    3980:	4e 93       	st	-X, r20
    3982:	58 97       	sbiw	r26, 0x18	; 24
    3984:	fa 01       	movw	r30, r20
    3986:	80 81       	ld	r24, Z
    3988:	8f 5f       	subi	r24, 0xFF	; 255
    398a:	80 83       	st	Z, r24
    398c:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    3990:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>
    3994:	5a 96       	adiw	r26, 0x1a	; 26
    3996:	9c 91       	ld	r25, X
    3998:	82 8d       	ldd	r24, Z+26	; 0x1a
    399a:	89 17       	cp	r24, r25
    399c:	70 f4       	brcc	.+28     	; 0x39ba <xTaskGenericNotifyFromISR+0x222>
    399e:	c1 14       	cp	r12, r1
    39a0:	d1 04       	cpc	r13, r1
    39a2:	19 f0       	breq	.+6      	; 0x39aa <xTaskGenericNotifyFromISR+0x212>
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	f6 01       	movw	r30, r12
    39a8:	80 83       	st	Z, r24
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <xYieldPending>
    39b0:	05 c0       	rjmp	.+10     	; 0x39bc <xTaskGenericNotifyFromISR+0x224>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <xTaskGenericNotifyFromISR+0x224>
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <xTaskGenericNotifyFromISR+0x224>
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	0f 91       	pop	r16
    39c2:	ff 90       	pop	r15
    39c4:	ef 90       	pop	r14
    39c6:	df 90       	pop	r13
    39c8:	cf 90       	pop	r12
    39ca:	bf 90       	pop	r11
    39cc:	af 90       	pop	r10
    39ce:	9f 90       	pop	r9
    39d0:	8f 90       	pop	r8
    39d2:	08 95       	ret

000039d4 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	21 f4       	brne	.+8      	; 0x39e0 <xTaskGenericNotifyStateClear+0xc>
    39d8:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <pxCurrentTCB>
    39dc:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	fc 01       	movw	r30, r24
    39ea:	e6 0f       	add	r30, r22
    39ec:	f7 1f       	adc	r31, r23
    39ee:	23 a9       	ldd	r18, Z+51	; 0x33
    39f0:	22 30       	cpi	r18, 0x02	; 2
    39f2:	31 f4       	brne	.+12     	; 0x3a00 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    39f4:	fc 01       	movw	r30, r24
    39f6:	e6 0f       	add	r30, r22
    39f8:	f7 1f       	adc	r31, r23
    39fa:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	01 c0       	rjmp	.+2      	; 0x3a02 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3a00:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3a02:	0f 90       	pop	r0
    3a04:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3a06:	08 95       	ret

00003a08 <prvInsertTimerInActiveList>:
    3a08:	cf 92       	push	r12
    3a0a:	df 92       	push	r13
    3a0c:	ef 92       	push	r14
    3a0e:	ff 92       	push	r15
    3a10:	0f 93       	push	r16
    3a12:	1f 93       	push	r17
    3a14:	fc 01       	movw	r30, r24
    3a16:	42 83       	std	Z+2, r20	; 0x02
    3a18:	53 83       	std	Z+3, r21	; 0x03
    3a1a:	64 83       	std	Z+4, r22	; 0x04
    3a1c:	75 83       	std	Z+5, r23	; 0x05
    3a1e:	93 87       	std	Z+11, r25	; 0x0b
    3a20:	82 87       	std	Z+10, r24	; 0x0a
    3a22:	04 17       	cp	r16, r20
    3a24:	15 07       	cpc	r17, r21
    3a26:	26 07       	cpc	r18, r22
    3a28:	37 07       	cpc	r19, r23
    3a2a:	c0 f0       	brcs	.+48     	; 0x3a5c <prvInsertTimerInActiveList+0x54>
    3a2c:	0c 19       	sub	r16, r12
    3a2e:	1d 09       	sbc	r17, r13
    3a30:	2e 09       	sbc	r18, r14
    3a32:	3f 09       	sbc	r19, r15
    3a34:	86 85       	ldd	r24, Z+14	; 0x0e
    3a36:	97 85       	ldd	r25, Z+15	; 0x0f
    3a38:	a0 89       	ldd	r26, Z+16	; 0x10
    3a3a:	b1 89       	ldd	r27, Z+17	; 0x11
    3a3c:	08 17       	cp	r16, r24
    3a3e:	19 07       	cpc	r17, r25
    3a40:	2a 07       	cpc	r18, r26
    3a42:	3b 07       	cpc	r19, r27
    3a44:	00 f5       	brcc	.+64     	; 0x3a86 <prvInsertTimerInActiveList+0x7e>
    3a46:	bf 01       	movw	r22, r30
    3a48:	6e 5f       	subi	r22, 0xFE	; 254
    3a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4c:	80 91 03 13 	lds	r24, 0x1303	; 0x801303 <pxOverflowTimerList>
    3a50:	90 91 04 13 	lds	r25, 0x1304	; 0x801304 <pxOverflowTimerList+0x1>
    3a54:	0e 94 19 0a 	call	0x1432	; 0x1432 <vListInsert>
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	18 c0       	rjmp	.+48     	; 0x3a8c <prvInsertTimerInActiveList+0x84>
    3a5c:	0c 15       	cp	r16, r12
    3a5e:	1d 05       	cpc	r17, r13
    3a60:	2e 05       	cpc	r18, r14
    3a62:	3f 05       	cpc	r19, r15
    3a64:	28 f4       	brcc	.+10     	; 0x3a70 <prvInsertTimerInActiveList+0x68>
    3a66:	4c 15       	cp	r20, r12
    3a68:	5d 05       	cpc	r21, r13
    3a6a:	6e 05       	cpc	r22, r14
    3a6c:	7f 05       	cpc	r23, r15
    3a6e:	68 f4       	brcc	.+26     	; 0x3a8a <prvInsertTimerInActiveList+0x82>
    3a70:	bf 01       	movw	r22, r30
    3a72:	6e 5f       	subi	r22, 0xFE	; 254
    3a74:	7f 4f       	sbci	r23, 0xFF	; 255
    3a76:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <pxCurrentTimerList>
    3a7a:	90 91 06 13 	lds	r25, 0x1306	; 0x801306 <pxCurrentTimerList+0x1>
    3a7e:	0e 94 19 0a 	call	0x1432	; 0x1432 <vListInsert>
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	03 c0       	rjmp	.+6      	; 0x3a8c <prvInsertTimerInActiveList+0x84>
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	01 c0       	rjmp	.+2      	; 0x3a8c <prvInsertTimerInActiveList+0x84>
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	df 90       	pop	r13
    3a96:	cf 90       	pop	r12
    3a98:	08 95       	ret

00003a9a <prvCheckForValidListAndQueue>:
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	0f 92       	push	r0
    3aa0:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <xTimerQueue>
    3aa4:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <xTimerQueue+0x1>
    3aa8:	89 2b       	or	r24, r25
    3aaa:	e9 f4       	brne	.+58     	; 0x3ae6 <prvCheckForValidListAndQueue+0x4c>
    3aac:	82 e1       	ldi	r24, 0x12	; 18
    3aae:	93 e1       	ldi	r25, 0x13	; 19
    3ab0:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    3ab4:	87 e0       	ldi	r24, 0x07	; 7
    3ab6:	93 e1       	ldi	r25, 0x13	; 19
    3ab8:	0e 94 04 0a 	call	0x1408	; 0x1408 <vListInitialise>
    3abc:	82 e1       	ldi	r24, 0x12	; 18
    3abe:	93 e1       	ldi	r25, 0x13	; 19
    3ac0:	90 93 06 13 	sts	0x1306, r25	; 0x801306 <pxCurrentTimerList+0x1>
    3ac4:	80 93 05 13 	sts	0x1305, r24	; 0x801305 <pxCurrentTimerList>
    3ac8:	87 e0       	ldi	r24, 0x07	; 7
    3aca:	93 e1       	ldi	r25, 0x13	; 19
    3acc:	90 93 04 13 	sts	0x1304, r25	; 0x801304 <pxOverflowTimerList+0x1>
    3ad0:	80 93 03 13 	sts	0x1303, r24	; 0x801303 <pxOverflowTimerList>
    3ad4:	40 e0       	ldi	r20, 0x00	; 0
    3ad6:	67 e0       	ldi	r22, 0x07	; 7
    3ad8:	8a e0       	ldi	r24, 0x0A	; 10
    3ada:	0e 94 ac 0c 	call	0x1958	; 0x1958 <xQueueGenericCreate>
    3ade:	90 93 02 13 	sts	0x1302, r25	; 0x801302 <xTimerQueue+0x1>
    3ae2:	80 93 01 13 	sts	0x1301, r24	; 0x801301 <xTimerQueue>
    3ae6:	0f 90       	pop	r0
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	08 95       	ret

00003aec <xTimerCreateTimerTask>:
    3aec:	ef 92       	push	r14
    3aee:	ff 92       	push	r15
    3af0:	0f 93       	push	r16
    3af2:	d3 df       	rcall	.-90     	; 0x3a9a <prvCheckForValidListAndQueue>
    3af4:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <xTimerQueue>
    3af8:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <xTimerQueue+0x1>
    3afc:	89 2b       	or	r24, r25
    3afe:	91 f0       	breq	.+36     	; 0x3b24 <xTimerCreateTimerTask+0x38>
    3b00:	0f 2e       	mov	r0, r31
    3b02:	ff ef       	ldi	r31, 0xFF	; 255
    3b04:	ef 2e       	mov	r14, r31
    3b06:	f2 e1       	ldi	r31, 0x12	; 18
    3b08:	ff 2e       	mov	r15, r31
    3b0a:	f0 2d       	mov	r31, r0
    3b0c:	03 e0       	ldi	r16, 0x03	; 3
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 ec       	ldi	r20, 0xC0	; 192
    3b14:	50 e0       	ldi	r21, 0x00	; 0
    3b16:	64 e8       	ldi	r22, 0x84	; 132
    3b18:	73 e0       	ldi	r23, 0x03	; 3
    3b1a:	88 e4       	ldi	r24, 0x48	; 72
    3b1c:	91 e0       	ldi	r25, 0x01	; 1
    3b1e:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCreate>
    3b22:	01 c0       	rjmp	.+2      	; 0x3b26 <xTimerCreateTimerTask+0x3a>
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	0f 91       	pop	r16
    3b28:	ff 90       	pop	r15
    3b2a:	ef 90       	pop	r14
    3b2c:	08 95       	ret

00003b2e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3b2e:	8f 92       	push	r8
    3b30:	9f 92       	push	r9
    3b32:	af 92       	push	r10
    3b34:	bf 92       	push	r11
    3b36:	cf 92       	push	r12
    3b38:	df 92       	push	r13
    3b3a:	ef 92       	push	r14
    3b3c:	ff 92       	push	r15
    3b3e:	0f 93       	push	r16
    3b40:	1f 93       	push	r17
    3b42:	cf 93       	push	r28
    3b44:	df 93       	push	r29
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	27 97       	sbiw	r28, 0x07	; 7
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3b56:	e0 91 01 13 	lds	r30, 0x1301	; 0x801301 <xTimerQueue>
    3b5a:	f0 91 02 13 	lds	r31, 0x1302	; 0x801302 <xTimerQueue+0x1>
    3b5e:	30 97       	sbiw	r30, 0x00	; 0
    3b60:	81 f1       	breq	.+96     	; 0x3bc2 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3b62:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b64:	2a 83       	std	Y+2, r18	; 0x02
    3b66:	3b 83       	std	Y+3, r19	; 0x03
    3b68:	4c 83       	std	Y+4, r20	; 0x04
    3b6a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b6c:	9f 83       	std	Y+7, r25	; 0x07
    3b6e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b70:	66 30       	cpi	r22, 0x06	; 6
    3b72:	f4 f4       	brge	.+60     	; 0x3bb0 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b74:	0c db       	rcall	.-2536   	; 0x318e <xTaskGetSchedulerState>
    3b76:	82 30       	cpi	r24, 0x02	; 2
    3b78:	69 f4       	brne	.+26     	; 0x3b94 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b7a:	00 e0       	ldi	r16, 0x00	; 0
    3b7c:	a7 01       	movw	r20, r14
    3b7e:	96 01       	movw	r18, r12
    3b80:	be 01       	movw	r22, r28
    3b82:	6f 5f       	subi	r22, 0xFF	; 255
    3b84:	7f 4f       	sbci	r23, 0xFF	; 255
    3b86:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <xTimerQueue>
    3b8a:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <xTimerQueue+0x1>
    3b8e:	0e 94 cd 0c 	call	0x199a	; 0x199a <xQueueGenericSend>
    3b92:	18 c0       	rjmp	.+48     	; 0x3bc4 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b94:	00 e0       	ldi	r16, 0x00	; 0
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	a9 01       	movw	r20, r18
    3b9c:	be 01       	movw	r22, r28
    3b9e:	6f 5f       	subi	r22, 0xFF	; 255
    3ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba2:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <xTimerQueue>
    3ba6:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <xTimerQueue+0x1>
    3baa:	0e 94 cd 0c 	call	0x199a	; 0x199a <xQueueGenericSend>
    3bae:	0a c0       	rjmp	.+20     	; 0x3bc4 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	a8 01       	movw	r20, r16
    3bb4:	be 01       	movw	r22, r28
    3bb6:	6f 5f       	subi	r22, 0xFF	; 255
    3bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bba:	cf 01       	movw	r24, r30
    3bbc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xQueueGenericSendFromISR>
    3bc0:	01 c0       	rjmp	.+2      	; 0x3bc4 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3bc4:	27 96       	adiw	r28, 0x07	; 7
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	f8 94       	cli
    3bca:	de bf       	out	0x3e, r29	; 62
    3bcc:	0f be       	out	0x3f, r0	; 63
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	1f 91       	pop	r17
    3bd6:	0f 91       	pop	r16
    3bd8:	ff 90       	pop	r15
    3bda:	ef 90       	pop	r14
    3bdc:	df 90       	pop	r13
    3bde:	cf 90       	pop	r12
    3be0:	bf 90       	pop	r11
    3be2:	af 90       	pop	r10
    3be4:	9f 90       	pop	r9
    3be6:	8f 90       	pop	r8
    3be8:	08 95       	ret

00003bea <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3bea:	2f 92       	push	r2
    3bec:	3f 92       	push	r3
    3bee:	4f 92       	push	r4
    3bf0:	5f 92       	push	r5
    3bf2:	6f 92       	push	r6
    3bf4:	7f 92       	push	r7
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	bf 92       	push	r11
    3bfe:	cf 92       	push	r12
    3c00:	df 92       	push	r13
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3c10:	0e 94 87 14 	call	0x290e	; 0x290e <xTaskGetTickCount>
    3c14:	2b 01       	movw	r4, r22
    3c16:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    3c18:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xLastTime.2436>
    3c1c:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xLastTime.2436+0x1>
    3c20:	a0 91 fd 12 	lds	r26, 0x12FD	; 0x8012fd <xLastTime.2436+0x2>
    3c24:	b0 91 fe 12 	lds	r27, 0x12FE	; 0x8012fe <xLastTime.2436+0x3>
    3c28:	48 16       	cp	r4, r24
    3c2a:	59 06       	cpc	r5, r25
    3c2c:	6a 06       	cpc	r6, r26
    3c2e:	7b 06       	cpc	r7, r27
    3c30:	08 f0       	brcs	.+2      	; 0x3c34 <prvSampleTimeNow+0x4a>
    3c32:	53 c0       	rjmp	.+166    	; 0x3cda <prvSampleTimeNow+0xf0>
    3c34:	3b c0       	rjmp	.+118    	; 0x3cac <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3c36:	07 80       	ldd	r0, Z+7	; 0x07
    3c38:	f0 85       	ldd	r31, Z+8	; 0x08
    3c3a:	e0 2d       	mov	r30, r0
    3c3c:	80 80       	ld	r8, Z
    3c3e:	91 80       	ldd	r9, Z+1	; 0x01
    3c40:	a2 80       	ldd	r10, Z+2	; 0x02
    3c42:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c44:	c0 85       	ldd	r28, Z+8	; 0x08
    3c46:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c48:	8e 01       	movw	r16, r28
    3c4a:	0e 5f       	subi	r16, 0xFE	; 254
    3c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4e:	c8 01       	movw	r24, r16
    3c50:	0e 94 56 0a 	call	0x14ac	; 0x14ac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c54:	ec 89       	ldd	r30, Y+20	; 0x14
    3c56:	fd 89       	ldd	r31, Y+21	; 0x15
    3c58:	ce 01       	movw	r24, r28
    3c5a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c5c:	8e 89       	ldd	r24, Y+22	; 0x16
    3c5e:	82 ff       	sbrs	r24, 2
    3c60:	25 c0       	rjmp	.+74     	; 0x3cac <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c62:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c64:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c66:	a8 89       	ldd	r26, Y+16	; 0x10
    3c68:	b9 89       	ldd	r27, Y+17	; 0x11
    3c6a:	88 0d       	add	r24, r8
    3c6c:	99 1d       	adc	r25, r9
    3c6e:	aa 1d       	adc	r26, r10
    3c70:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3c72:	88 16       	cp	r8, r24
    3c74:	99 06       	cpc	r9, r25
    3c76:	aa 06       	cpc	r10, r26
    3c78:	bb 06       	cpc	r11, r27
    3c7a:	70 f4       	brcc	.+28     	; 0x3c98 <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c7c:	8a 83       	std	Y+2, r24	; 0x02
    3c7e:	9b 83       	std	Y+3, r25	; 0x03
    3c80:	ac 83       	std	Y+4, r26	; 0x04
    3c82:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c84:	db 87       	std	Y+11, r29	; 0x0b
    3c86:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c88:	b8 01       	movw	r22, r16
    3c8a:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <pxCurrentTimerList>
    3c8e:	90 91 06 13 	lds	r25, 0x1306	; 0x801306 <pxCurrentTimerList+0x1>
    3c92:	0e 94 19 0a 	call	0x1432	; 0x1432 <vListInsert>
    3c96:	0a c0       	rjmp	.+20     	; 0x3cac <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c98:	c1 2c       	mov	r12, r1
    3c9a:	d1 2c       	mov	r13, r1
    3c9c:	76 01       	movw	r14, r12
    3c9e:	00 e0       	ldi	r16, 0x00	; 0
    3ca0:	10 e0       	ldi	r17, 0x00	; 0
    3ca2:	a5 01       	movw	r20, r10
    3ca4:	94 01       	movw	r18, r8
    3ca6:	60 e0       	ldi	r22, 0x00	; 0
    3ca8:	ce 01       	movw	r24, r28
    3caa:	41 df       	rcall	.-382    	; 0x3b2e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3cac:	e0 91 05 13 	lds	r30, 0x1305	; 0x801305 <pxCurrentTimerList>
    3cb0:	f0 91 06 13 	lds	r31, 0x1306	; 0x801306 <pxCurrentTimerList+0x1>
    3cb4:	80 81       	ld	r24, Z
    3cb6:	81 11       	cpse	r24, r1
    3cb8:	be cf       	rjmp	.-132    	; 0x3c36 <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3cba:	80 91 03 13 	lds	r24, 0x1303	; 0x801303 <pxOverflowTimerList>
    3cbe:	90 91 04 13 	lds	r25, 0x1304	; 0x801304 <pxOverflowTimerList+0x1>
    3cc2:	90 93 06 13 	sts	0x1306, r25	; 0x801306 <pxCurrentTimerList+0x1>
    3cc6:	80 93 05 13 	sts	0x1305, r24	; 0x801305 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3cca:	f0 93 04 13 	sts	0x1304, r31	; 0x801304 <pxOverflowTimerList+0x1>
    3cce:	e0 93 03 13 	sts	0x1303, r30	; 0x801303 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	f1 01       	movw	r30, r2
    3cd6:	80 83       	st	Z, r24
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3cda:	f1 01       	movw	r30, r2
    3cdc:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3cde:	40 92 fb 12 	sts	0x12FB, r4	; 0x8012fb <xLastTime.2436>
    3ce2:	50 92 fc 12 	sts	0x12FC, r5	; 0x8012fc <xLastTime.2436+0x1>
    3ce6:	60 92 fd 12 	sts	0x12FD, r6	; 0x8012fd <xLastTime.2436+0x2>
    3cea:	70 92 fe 12 	sts	0x12FE, r7	; 0x8012fe <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3cee:	c3 01       	movw	r24, r6
    3cf0:	b2 01       	movw	r22, r4
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	1f 91       	pop	r17
    3cf8:	0f 91       	pop	r16
    3cfa:	ff 90       	pop	r15
    3cfc:	ef 90       	pop	r14
    3cfe:	df 90       	pop	r13
    3d00:	cf 90       	pop	r12
    3d02:	bf 90       	pop	r11
    3d04:	af 90       	pop	r10
    3d06:	9f 90       	pop	r9
    3d08:	8f 90       	pop	r8
    3d0a:	7f 90       	pop	r7
    3d0c:	6f 90       	pop	r6
    3d0e:	5f 90       	pop	r5
    3d10:	4f 90       	pop	r4
    3d12:	3f 90       	pop	r3
    3d14:	2f 90       	pop	r2
    3d16:	08 95       	ret

00003d18 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3d18:	08 95       	ret

00003d1a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3d1a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3d1c:	2f 9a       	sbi	0x05, 7	; 5
    3d1e:	08 95       	ret

00003d20 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3d20:	1f 9a       	sbi	0x03, 7	; 3
    3d22:	08 95       	ret

00003d24 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3d24:	fa df       	rcall	.-12     	; 0x3d1a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d26:	2f ef       	ldi	r18, 0xFF	; 255
    3d28:	80 e7       	ldi	r24, 0x70	; 112
    3d2a:	92 e0       	ldi	r25, 0x02	; 2
    3d2c:	21 50       	subi	r18, 0x01	; 1
    3d2e:	80 40       	sbci	r24, 0x00	; 0
    3d30:	90 40       	sbci	r25, 0x00	; 0
    3d32:	e1 f7       	brne	.-8      	; 0x3d2c <vApplicationMallocFailedHook+0x8>
    3d34:	00 c0       	rjmp	.+0      	; 0x3d36 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3d36:	00 00       	nop
    3d38:	f3 df       	rcall	.-26     	; 0x3d20 <prvBlinkMainLed>
    3d3a:	f5 cf       	rjmp	.-22     	; 0x3d26 <vApplicationMallocFailedHook+0x2>

00003d3c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3d3c:	ee df       	rcall	.-36     	; 0x3d1a <prvSetMainLedOn>
    3d3e:	2f ef       	ldi	r18, 0xFF	; 255
    3d40:	87 ea       	ldi	r24, 0xA7	; 167
    3d42:	91 e6       	ldi	r25, 0x61	; 97
    3d44:	21 50       	subi	r18, 0x01	; 1
    3d46:	80 40       	sbci	r24, 0x00	; 0
    3d48:	90 40       	sbci	r25, 0x00	; 0
    3d4a:	e1 f7       	brne	.-8      	; 0x3d44 <vApplicationStackOverflowHook+0x8>
    3d4c:	00 c0       	rjmp	.+0      	; 0x3d4e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3d4e:	00 00       	nop
    3d50:	e7 df       	rcall	.-50     	; 0x3d20 <prvBlinkMainLed>
    3d52:	f5 cf       	rjmp	.-22     	; 0x3d3e <vApplicationStackOverflowHook+0x2>

00003d54 <lora_handler_decodeUplink>:
	   
	}
}

void lora_handler_decodeUplink(lora_driver_payload_t load)
{
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
	int16_t hum;
	int16_t carbon;
	temp = (load.bytes[0] << 8) + load.bytes[1];
    hum = (load.bytes[2] << 8) + load.bytes[3];
	carbon = (load.bytes[4] << 8) + load.bytes[5];
	printf("|%d_%d_%d|",temp,hum,carbon);
    3d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	98 2f       	mov	r25, r24
    3d62:	88 27       	eor	r24, r24
    3d64:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d66:	82 0f       	add	r24, r18
    3d68:	91 1d       	adc	r25, r1
    3d6a:	9f 93       	push	r25
    3d6c:	8f 93       	push	r24
    3d6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	98 2f       	mov	r25, r24
    3d74:	88 27       	eor	r24, r24
    3d76:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d78:	82 0f       	add	r24, r18
    3d7a:	91 1d       	adc	r25, r1
    3d7c:	9f 93       	push	r25
    3d7e:	8f 93       	push	r24
    3d80:	88 85       	ldd	r24, Y+8	; 0x08
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	98 2f       	mov	r25, r24
    3d86:	88 27       	eor	r24, r24
    3d88:	29 85       	ldd	r18, Y+9	; 0x09
    3d8a:	82 0f       	add	r24, r18
    3d8c:	91 1d       	adc	r25, r1
    3d8e:	9f 93       	push	r25
    3d90:	8f 93       	push	r24
    3d92:	8d eb       	ldi	r24, 0xBD	; 189
    3d94:	93 e0       	ldi	r25, 0x03	; 3
    3d96:	9f 93       	push	r25
    3d98:	8f 93       	push	r24
    3d9a:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
}
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	df 91       	pop	r29
    3daa:	cf 91       	pop	r28
    3dac:	08 95       	ret

00003dae <lora_handler_decodeDownlink>:

void lora_handler_decodeDownlink(lora_driver_payload_t load)
{
    3dae:	4f 92       	push	r4
    3db0:	5f 92       	push	r5
    3db2:	6f 92       	push	r6
    3db4:	7f 92       	push	r7
    3db6:	8f 92       	push	r8
    3db8:	9f 92       	push	r9
    3dba:	af 92       	push	r10
    3dbc:	bf 92       	push	r11
    3dbe:	cf 92       	push	r12
    3dc0:	df 92       	push	r13
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
	int16_t status;
	int16_t tempStatus; //off=0,on=1
	int16_t humStatus; //off=0,on=1
	int16_t CO2Status; //off=0,on=1
	
	minTemp = (load.bytes[0] << 8) + load.bytes[1];
    3dd2:	ee 88       	ldd	r14, Y+22	; 0x16
    3dd4:	f1 2c       	mov	r15, r1
    3dd6:	fe 2c       	mov	r15, r14
    3dd8:	ee 24       	eor	r14, r14
    3dda:	8f 89       	ldd	r24, Y+23	; 0x17
    3ddc:	e8 0e       	add	r14, r24
    3dde:	f1 1c       	adc	r15, r1
	maxTemp = (load.bytes[2] << 8) + load.bytes[3];
    3de0:	c8 8c       	ldd	r12, Y+24	; 0x18
    3de2:	d1 2c       	mov	r13, r1
    3de4:	dc 2c       	mov	r13, r12
    3de6:	cc 24       	eor	r12, r12
    3de8:	89 8d       	ldd	r24, Y+25	; 0x19
    3dea:	c8 0e       	add	r12, r24
    3dec:	d1 1c       	adc	r13, r1
	minHum = (load.bytes[4] << 8) + load.bytes[5];
    3dee:	6a 8c       	ldd	r6, Y+26	; 0x1a
    3df0:	71 2c       	mov	r7, r1
    3df2:	76 2c       	mov	r7, r6
    3df4:	66 24       	eor	r6, r6
    3df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3df8:	68 0e       	add	r6, r24
    3dfa:	71 1c       	adc	r7, r1
	maxHum = (load.bytes[6] << 8) + load.bytes[7];
    3dfc:	0c 8d       	ldd	r16, Y+28	; 0x1c
    3dfe:	10 e0       	ldi	r17, 0x00	; 0
    3e00:	10 2f       	mov	r17, r16
    3e02:	00 27       	eor	r16, r16
    3e04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e06:	08 0f       	add	r16, r24
    3e08:	11 1d       	adc	r17, r1
	minCO2 = (load.bytes[8] << 8) + load.bytes[9];
    3e0a:	ae 8c       	ldd	r10, Y+30	; 0x1e
    3e0c:	b1 2c       	mov	r11, r1
    3e0e:	ba 2c       	mov	r11, r10
    3e10:	aa 24       	eor	r10, r10
    3e12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e14:	a8 0e       	add	r10, r24
    3e16:	b1 1c       	adc	r11, r1
	maxCO2 = (load.bytes[10] << 8) + load.bytes[11];
    3e18:	88 a0       	ldd	r8, Y+32	; 0x20
    3e1a:	91 2c       	mov	r9, r1
    3e1c:	98 2c       	mov	r9, r8
    3e1e:	88 24       	eor	r8, r8
    3e20:	89 a1       	ldd	r24, Y+33	; 0x21
    3e22:	88 0e       	add	r8, r24
    3e24:	91 1c       	adc	r9, r1
	//status = (load.bytes[12] << 8) + load.bytes[13];
	//tempStatus = status-status/10*10;
	//humStatus = status-status/100*100-tempStatus;
	//CO2Status = (status-humStatus-tempStatus)/100;
	printf("|%d_%d_%d_%d_%d_%d|",minTemp,maxTemp,minHum,maxHum,minCO2,maxCO2);
    3e26:	9f 92       	push	r9
    3e28:	8f 92       	push	r8
    3e2a:	bf 92       	push	r11
    3e2c:	af 92       	push	r10
    3e2e:	1f 93       	push	r17
    3e30:	0f 93       	push	r16
    3e32:	7f 92       	push	r7
    3e34:	6f 92       	push	r6
    3e36:	df 92       	push	r13
    3e38:	cf 92       	push	r12
    3e3a:	ff 92       	push	r15
    3e3c:	ef 92       	push	r14
    3e3e:	88 ec       	ldi	r24, 0xC8	; 200
    3e40:	93 e0       	ldi	r25, 0x03	; 3
    3e42:	9f 93       	push	r25
    3e44:	8f 93       	push	r24
    3e46:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
	//printf("|%d_%d_%d_%d_%d_%d_%d_%d_%d|",minTemp,maxTemp,minHum,maxHum,minCO2,maxCO2,tempStatus,humStatus,CO2Status);
	//setter for value limits
	temperatureSensor_setmaxValue(sensorModelManager_getTemperatureSensor(),maxTemp);
    3e4a:	0e 94 fc 07 	call	0xff8	; 0xff8 <sensorModelManager_getTemperatureSensor>
    3e4e:	2c 01       	movw	r4, r24
    3e50:	b6 01       	movw	r22, r12
    3e52:	dd 0c       	add	r13, r13
    3e54:	88 0b       	sbc	r24, r24
    3e56:	99 0b       	sbc	r25, r25
    3e58:	76 d3       	rcall	.+1772   	; 0x4546 <__floatsisf>
    3e5a:	ab 01       	movw	r20, r22
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	c2 01       	movw	r24, r4
    3e60:	0e 94 32 07 	call	0xe64	; 0xe64 <temperatureSensor_setmaxValue>
	temperatureSensor_setminValue(sensorModelManager_getTemperatureSensor(),minTemp);
    3e64:	0e 94 fc 07 	call	0xff8	; 0xff8 <sensorModelManager_getTemperatureSensor>
    3e68:	6c 01       	movw	r12, r24
    3e6a:	b7 01       	movw	r22, r14
    3e6c:	ff 0c       	add	r15, r15
    3e6e:	88 0b       	sbc	r24, r24
    3e70:	99 0b       	sbc	r25, r25
    3e72:	69 d3       	rcall	.+1746   	; 0x4546 <__floatsisf>
    3e74:	ab 01       	movw	r20, r22
    3e76:	bc 01       	movw	r22, r24
    3e78:	c6 01       	movw	r24, r12
    3e7a:	0e 94 5e 07 	call	0xebc	; 0xebc <temperatureSensor_setminValue>
	//temperatureSensor_setTempstatus(sensorModelManager_getTemperatureSensor(),tempStatus);
	carbonDioxideSensor_setMaxCo2Value(sensorModelManager_getCarbonDioxideSensor(),maxCO2);
    3e7e:	0e 94 06 08 	call	0x100c	; 0x100c <sensorModelManager_getCarbonDioxideSensor>
    3e82:	b4 01       	movw	r22, r8
    3e84:	0e 94 8d 05 	call	0xb1a	; 0xb1a <carbonDioxideSensor_setMaxCo2Value>
	carbonDioxideSensor_setMinCo2Value(sensorModelManager_getCarbonDioxideSensor(),minCO2);
    3e88:	0e 94 06 08 	call	0x100c	; 0x100c <sensorModelManager_getCarbonDioxideSensor>
    3e8c:	b5 01       	movw	r22, r10
    3e8e:	0e 94 b1 05 	call	0xb62	; 0xb62 <carbonDioxideSensor_setMinCo2Value>
	//carbonDioxideSensor_setCo2SensorStatus(sensorModelManager_getCarbonDioxideSensor(),CO2Status);
	humiditySensor_setMaxValue(sensorModelManager_getHumiditySensor(),maxHum);
    3e92:	0e 94 01 08 	call	0x1002	; 0x1002 <sensorModelManager_getHumiditySensor>
    3e96:	7c 01       	movw	r14, r24
    3e98:	b8 01       	movw	r22, r16
    3e9a:	11 0f       	add	r17, r17
    3e9c:	88 0b       	sbc	r24, r24
    3e9e:	99 0b       	sbc	r25, r25
    3ea0:	52 d3       	rcall	.+1700   	; 0x4546 <__floatsisf>
    3ea2:	ab 01       	movw	r20, r22
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	c7 01       	movw	r24, r14
    3ea8:	0e 94 0a 06 	call	0xc14	; 0xc14 <humiditySensor_setMaxValue>
	humiditySensor_setMinValue(sensorModelManager_getHumiditySensor(),minHum);
    3eac:	0e 94 01 08 	call	0x1002	; 0x1002 <sensorModelManager_getHumiditySensor>
    3eb0:	8c 01       	movw	r16, r24
    3eb2:	b3 01       	movw	r22, r6
    3eb4:	77 0c       	add	r7, r7
    3eb6:	88 0b       	sbc	r24, r24
    3eb8:	99 0b       	sbc	r25, r25
    3eba:	45 d3       	rcall	.+1674   	; 0x4546 <__floatsisf>
    3ebc:	ab 01       	movw	r20, r22
    3ebe:	bc 01       	movw	r22, r24
    3ec0:	c8 01       	movw	r24, r16
    3ec2:	0e 94 37 06 	call	0xc6e	; 0xc6e <humiditySensor_setMinValue>
	//humiditySensor_setHumStatus(sensorModelManager_getHumiditySensor(),humStatus);
}
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	df 90       	pop	r13
    3ede:	cf 90       	pop	r12
    3ee0:	bf 90       	pop	r11
    3ee2:	af 90       	pop	r10
    3ee4:	9f 90       	pop	r9
    3ee6:	8f 90       	pop	r8
    3ee8:	7f 90       	pop	r7
    3eea:	6f 90       	pop	r6
    3eec:	5f 90       	pop	r5
    3eee:	4f 90       	pop	r4
    3ef0:	08 95       	ret

00003ef2 <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	89 d7       	rcall	.+3858   	; 0x4e08 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3ef6:	62 e0       	ldi	r22, 0x02	; 2
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	81 d7       	rcall	.+3842   	; 0x4e08 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3f06:	66 e9       	ldi	r22, 0x96	; 150
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>


static void _lora_setup(void)
{
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3f18:	85 d7       	rcall	.+3850   	; 0x4e24 <lora_driver_rn2483FactoryReset>
    3f1a:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3f1e:	9f 93       	push	r25
    3f20:	8f 93       	push	r24
    3f22:	8c ed       	ldi	r24, 0xDC	; 220
    3f24:	93 e0       	ldi	r25, 0x03	; 3
    3f26:	9f 93       	push	r25
    3f28:	8f 93       	push	r24
    3f2a:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3f2e:	0e 94 90 28 	call	0x5120	; 0x5120 <lora_driver_configureToEu868>
    3f32:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3f36:	9f 93       	push	r25
    3f38:	8f 93       	push	r24
    3f3a:	8f ee       	ldi	r24, 0xEF	; 239
    3f3c:	93 e0       	ldi	r25, 0x03	; 3
    3f3e:	9f 93       	push	r25
    3f40:	8f 93       	push	r24
    3f42:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3f46:	8b e4       	ldi	r24, 0x4B	; 75
    3f48:	93 e1       	ldi	r25, 0x13	; 19
    3f4a:	7e d7       	rcall	.+3836   	; 0x4e48 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3f4c:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3f50:	cb e4       	ldi	r28, 0x4B	; 75
    3f52:	d3 e1       	ldi	r29, 0x13	; 19
    3f54:	df 93       	push	r29
    3f56:	cf 93       	push	r28
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	88 e0       	ldi	r24, 0x08	; 8
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	9f 93       	push	r25
    3f62:	8f 93       	push	r24
    3f64:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3f68:	ce 01       	movw	r24, r28
    3f6a:	8a d7       	rcall	.+3860   	; 0x4e80 <lora_driver_setDeviceIdentifier>
    3f6c:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3f70:	9f 93       	push	r25
    3f72:	8f 93       	push	r24
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	8c e1       	ldi	r24, 0x1C	; 28
    3f7a:	94 e0       	ldi	r25, 0x04	; 4
    3f7c:	9f 93       	push	r25
    3f7e:	8f 93       	push	r24
    3f80:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3f84:	ae 01       	movw	r20, r28
    3f86:	61 e3       	ldi	r22, 0x31	; 49
    3f88:	74 e0       	ldi	r23, 0x04	; 4
    3f8a:	82 e5       	ldi	r24, 0x52	; 82
    3f8c:	94 e0       	ldi	r25, 0x04	; 4
    3f8e:	0e 94 6e 29 	call	0x52dc	; 0x52dc <lora_driver_setOtaaIdentity>
    3f92:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3f96:	9f 93       	push	r25
    3f98:	8f 93       	push	r24
    3f9a:	df 93       	push	r29
    3f9c:	cf 93       	push	r28
    3f9e:	81 e3       	ldi	r24, 0x31	; 49
    3fa0:	94 e0       	ldi	r25, 0x04	; 4
    3fa2:	9f 93       	push	r25
    3fa4:	8f 93       	push	r24
    3fa6:	82 e5       	ldi	r24, 0x52	; 82
    3fa8:	94 e0       	ldi	r25, 0x04	; 4
    3faa:	9f 93       	push	r25
    3fac:	8f 93       	push	r24
    3fae:	83 e6       	ldi	r24, 0x63	; 99
    3fb0:	94 e0       	ldi	r25, 0x04	; 4
    3fb2:	9f 93       	push	r25
    3fb4:	8f 93       	push	r24
    3fb6:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3fba:	95 d7       	rcall	.+3882   	; 0x4ee6 <lora_driver_saveMac>
    3fbc:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3fc0:	9f 93       	push	r25
    3fc2:	8f 93       	push	r24
    3fc4:	89 e9       	ldi	r24, 0x99	; 153
    3fc6:	94 e0       	ldi	r25, 0x04	; 4
    3fc8:	9f 93       	push	r25
    3fca:	8f 93       	push	r24
    3fcc:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3fd0:	ed b7       	in	r30, 0x3d	; 61
    3fd2:	fe b7       	in	r31, 0x3e	; 62
    3fd4:	b2 96       	adiw	r30, 0x22	; 34
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	f8 94       	cli
    3fda:	fe bf       	out	0x3e, r31	; 62
    3fdc:	0f be       	out	0x3f, r0	; 63
    3fde:	ed bf       	out	0x3d, r30	; 61
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	0e 94 6d 28 	call	0x50da	; 0x50da <lora_driver_setAdaptiveDataRate>
    3fe6:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    3fea:	9f 93       	push	r25
    3fec:	8f 93       	push	r24
    3fee:	88 ea       	ldi	r24, 0xA8	; 168
    3ff0:	94 e0       	ldi	r25, 0x04	; 4
    3ff2:	9f 93       	push	r25
    3ff4:	8f 93       	push	r24
    3ff6:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3ffa:	84 ef       	ldi	r24, 0xF4	; 244
    3ffc:	91 e0       	ldi	r25, 0x01	; 1
    3ffe:	0e 94 78 28 	call	0x50f0	; 0x50f0 <lora_driver_setReceiveDelay>
    4002:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    4006:	9f 93       	push	r25
    4008:	8f 93       	push	r24
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	8f 93       	push	r24
    400e:	84 ef       	ldi	r24, 0xF4	; 244
    4010:	8f 93       	push	r24
    4012:	89 ec       	ldi	r24, 0xC9	; 201
    4014:	94 e0       	ldi	r25, 0x04	; 4
    4016:	9f 93       	push	r25
    4018:	8f 93       	push	r24
    401a:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
    401e:	8d b7       	in	r24, 0x3d	; 61
    4020:	9e b7       	in	r25, 0x3e	; 62
    4022:	0a 96       	adiw	r24, 0x0a	; 10
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	9e bf       	out	0x3e, r25	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	8d bf       	out	0x3d, r24	; 61
    402e:	ca e0       	ldi	r28, 0x0A	; 10
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4030:	d0 e0       	ldi	r29, 0x00	; 0
    4032:	09 ee       	ldi	r16, 0xE9	; 233

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    4034:	14 e0       	ldi	r17, 0x04	; 4
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	5c d7       	rcall	.+3768   	; 0x4ef2 <lora_driver_join>
    403a:	f8 2e       	mov	r15, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    403c:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    4040:	9f 93       	push	r25
    4042:	8f 93       	push	r24
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	1f 93       	push	r17
    404a:	0f 93       	push	r16
    404c:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>

		if ( rc != LORA_ACCEPTED)
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	f8 e0       	ldi	r31, 0x08	; 8
    405e:	ff 16       	cp	r15, r31
    4060:	09 f4       	brne	.+2      	; 0x4064 <lora_handler_task+0x172>
    4062:	d8 c0       	rjmp	.+432    	; 0x4214 <lora_handler_task+0x322>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	0e 94 ce 31 	call	0x639c	; 0x639c <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    406a:	66 e3       	ldi	r22, 0x36	; 54
    406c:	71 e0       	ldi	r23, 0x01	; 1
    406e:	80 e0       	ldi	r24, 0x00	; 0
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
    4076:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4078:	f1 f6       	brne	.-68     	; 0x4036 <lora_handler_task+0x144>
    407a:	c5 c0       	rjmp	.+394    	; 0x4206 <lora_handler_task+0x314>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    407c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
	_uplink_payload.len = 6;
	_uplink_payload.portNo = 2;
	
	for(;;)
	{
		int16_t temp = temperatureSensor_getValue(sensorModelManager_getTemperatureSensor());
    4080:	fd cf       	rjmp	.-6      	; 0x407c <lora_handler_task+0x18a>
    4082:	0e 94 fc 07 	call	0xff8	; 0xff8 <sensorModelManager_getTemperatureSensor>
    4086:	0e 94 af 07 	call	0xf5e	; 0xf5e <temperatureSensor_getValue>
    408a:	2a d2       	rcall	.+1108   	; 0x44e0 <__fixsfsi>
    408c:	36 2e       	mov	r3, r22
		int16_t hum = humiditySensor_getValue(sensorModelManager_getHumiditySensor());
    408e:	27 2e       	mov	r2, r23
    4090:	0e 94 01 08 	call	0x1002	; 0x1002 <sensorModelManager_getHumiditySensor>
    4094:	0e 94 b0 06 	call	0xd60	; 0xd60 <humiditySensor_getValue>
    4098:	23 d2       	rcall	.+1094   	; 0x44e0 <__fixsfsi>
    409a:	16 2f       	mov	r17, r22
    409c:	07 2f       	mov	r16, r23
		int16_t co2_ppm = carbonDioxideSensor_getValue(sensorModelManager_getCarbonDioxideSensor());
    409e:	0e 94 06 08 	call	0x100c	; 0x100c <sensorModelManager_getCarbonDioxideSensor>
    40a2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <carbonDioxideSensor_getValue>
		
		_uplink_payload.bytes[0] = temp >> 8;
    40a6:	2a 82       	std	Y+2, r2	; 0x02
		_uplink_payload.bytes[1] = temp & 0xFF;
    40a8:	3b 82       	std	Y+3, r3	; 0x03
		_uplink_payload.bytes[2] = hum >> 8;
    40aa:	0c 83       	std	Y+4, r16	; 0x04
		_uplink_payload.bytes[3] = hum & 0xFF;
    40ac:	1d 83       	std	Y+5, r17	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    40ae:	9e 83       	std	Y+6, r25	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    40b0:	8f 83       	std	Y+7, r24	; 0x07
    40b2:	83 e0       	ldi	r24, 0x03	; 3
    40b4:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <status_leds_shortPuls>
		PORTA ^= _BV(PA2);
    40b8:	82 b1       	in	r24, 0x02	; 2
    40ba:	89 25       	eor	r24, r9
		char *result = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
    40bc:	82 b9       	out	0x02, r24	; 2
    40be:	be 01       	movw	r22, r28
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	40 d7       	rcall	.+3712   	; 0x4f44 <lora_driver_sendUploadMessage>
    40c4:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    40c8:	8c 01       	movw	r16, r24
		printf("Upload Message >%s<\n", result);
    40ca:	1f 93       	push	r17
    40cc:	8f 93       	push	r24
    40ce:	ff 92       	push	r15
    40d0:	ef 92       	push	r14
    40d2:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
		if (result=="MAC_RX"||result=="OK")
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	25 e0       	ldi	r18, 0x05	; 5
    40e0:	0e 31       	cpi	r16, 0x1E	; 30
    40e2:	12 07       	cpc	r17, r18
    40e4:	21 f0       	breq	.+8      	; 0x40ee <lora_handler_task+0x1fc>
    40e6:	82 e0       	ldi	r24, 0x02	; 2
    40e8:	03 38       	cpi	r16, 0x83	; 131
    40ea:	18 07       	cpc	r17, r24
    40ec:	c1 f5       	brne	.+112    	; 0x415e <lora_handler_task+0x26c>
		{
			downlinkPayload.portNo = 1;
    40ee:	f6 01       	movw	r30, r12
    40f0:	80 82       	st	Z, r8
			downlinkPayload.len = 14;
    40f2:	51 82       	std	Z+1, r5	; 0x01
			PORTA ^= _BV(PA3);
    40f4:	82 b1       	in	r24, 0x02	; 2
    40f6:	84 25       	eor	r24, r4
    40f8:	82 b9       	out	0x02, r24	; 2
			xMessageBufferReceive(downLinkBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    40fa:	0f ef       	ldi	r16, 0xFF	; 255
    40fc:	1f ef       	ldi	r17, 0xFF	; 255
    40fe:	98 01       	movw	r18, r16
    4100:	46 e1       	ldi	r20, 0x16	; 22
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	b6 01       	movw	r22, r12
    4106:	80 91 1d 13 	lds	r24, 0x131D	; 0x80131d <downLinkBufferHandle>
    410a:	90 91 1e 13 	lds	r25, 0x131E	; 0x80131e <downLinkBufferHandle+0x1>
    410e:	0e 94 9b 11 	call	0x2336	; 0x2336 <xStreamBufferReceive>
			printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for Debug
    4112:	f6 01       	movw	r30, r12
    4114:	81 81       	ldd	r24, Z+1	; 0x01
    4116:	1f 92       	push	r1
    4118:	8f 93       	push	r24
    411a:	80 81       	ld	r24, Z
    411c:	1f 92       	push	r1
    411e:	8f 93       	push	r24
    4120:	7f 92       	push	r7
    4122:	6f 92       	push	r6
    4124:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
			lora_handler_decodeDownlink(downlinkPayload);
    4128:	8d b7       	in	r24, 0x3d	; 61
    412a:	9e b7       	in	r25, 0x3e	; 62
    412c:	46 97       	sbiw	r24, 0x16	; 22
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	f8 94       	cli
    4132:	9e bf       	out	0x3e, r25	; 62
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	8d bf       	out	0x3d, r24	; 61
    4138:	ad b7       	in	r26, 0x3d	; 61
    413a:	be b7       	in	r27, 0x3e	; 62
    413c:	11 96       	adiw	r26, 0x01	; 1
    413e:	86 e1       	ldi	r24, 0x16	; 22
    4140:	f6 01       	movw	r30, r12
    4142:	01 90       	ld	r0, Z+
    4144:	0d 92       	st	X+, r0
    4146:	8a 95       	dec	r24
    4148:	e1 f7       	brne	.-8      	; 0x4142 <lora_handler_task+0x250>
    414a:	31 de       	rcall	.-926    	; 0x3dae <lora_handler_decodeDownlink>
    414c:	ed b7       	in	r30, 0x3d	; 61
    414e:	fe b7       	in	r31, 0x3e	; 62
    4150:	7c 96       	adiw	r30, 0x1c	; 28
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	f8 94       	cli
    4156:	fe bf       	out	0x3e, r31	; 62
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	ed bf       	out	0x3d, r30	; 61
		}
		else if (result!="MAC_TX_OK"&&result!="OK")
    415c:	30 c0       	rjmp	.+96     	; 0x41be <lora_handler_task+0x2cc>
    415e:	05 52       	subi	r16, 0x25	; 37
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_resetRn2483(1);
    4160:	15 40       	sbci	r17, 0x05	; 5
    4162:	69 f1       	breq	.+90     	; 0x41be <lora_handler_task+0x2cc>
    4164:	88 2d       	mov	r24, r8
			vTaskDelay(2);
    4166:	50 d6       	rcall	.+3232   	; 0x4e08 <lora_driver_resetRn2483>
    4168:	62 e0       	ldi	r22, 0x02	; 2
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
			lora_driver_resetRn2483(0);
    4170:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
    4174:	80 e0       	ldi	r24, 0x00	; 0
			// Give it a chance to wakeup
			vTaskDelay(150);
    4176:	48 d6       	rcall	.+3216   	; 0x4e08 <lora_driver_resetRn2483>
    4178:	66 e9       	ldi	r22, 0x96	; 150
    417a:	70 e0       	ldi	r23, 0x00	; 0
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	90 e0       	ldi	r25, 0x00	; 0
			printf("Rejoin Network TriesLeft:>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_join(LORA_OTAA)));
    4180:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	b5 d6       	rcall	.+3434   	; 0x4ef2 <lora_driver_join>
    4188:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    418c:	9f 93       	push	r25
    418e:	8f 93       	push	r24
    4190:	bf 92       	push	r11
    4192:	af 92       	push	r10
    4194:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4198:	be 01       	movw	r22, r28
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	d3 d6       	rcall	.+3494   	; 0x4f44 <lora_driver_sendUploadMessage>
    419e:	0e 94 8f 29 	call	0x531e	; 0x531e <lora_driver_mapReturnCodeToText>
    41a2:	9f 93       	push	r25
    41a4:	8f 93       	push	r24
    41a6:	ff 92       	push	r15
    41a8:	ef 92       	push	r14
    41aa:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
    41ae:	8d b7       	in	r24, 0x3d	; 61
    41b0:	9e b7       	in	r25, 0x3e	; 62
    41b2:	08 96       	adiw	r24, 0x08	; 8
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	9e bf       	out	0x3e, r25	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	8d bf       	out	0x3d, r24	; 61
		}
		PORTA ^= _BV(PA2);
    41be:	82 b1       	in	r24, 0x02	; 2
    41c0:	89 25       	eor	r24, r9
    41c2:	82 b9       	out	0x02, r24	; 2
		lora_handler_decodeUplink(_uplink_payload);
    41c4:	ed b7       	in	r30, 0x3d	; 61
    41c6:	fe b7       	in	r31, 0x3e	; 62
    41c8:	76 97       	sbiw	r30, 0x16	; 22
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	fe bf       	out	0x3e, r31	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	ed bf       	out	0x3d, r30	; 61
    41d4:	ad b7       	in	r26, 0x3d	; 61
    41d6:	be b7       	in	r27, 0x3e	; 62
    41d8:	11 96       	adiw	r26, 0x01	; 1
    41da:	86 e1       	ldi	r24, 0x16	; 22
    41dc:	fe 01       	movw	r30, r28
    41de:	01 90       	ld	r0, Z+
    41e0:	0d 92       	st	X+, r0
    41e2:	8a 95       	dec	r24
    41e4:	e1 f7       	brne	.-8      	; 0x41de <lora_handler_task+0x2ec>
    41e6:	b6 dd       	rcall	.-1172   	; 0x3d54 <lora_handler_decodeUplink>
		//wait 1 min
		vTaskDelay(pdMS_TO_TICKS(6000));
    41e8:	64 e7       	ldi	r22, 0x74	; 116
    41ea:	71 e0       	ldi	r23, 0x01	; 1
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <vTaskDelay>
		//lora_handler_downlink();
	}
    41f4:	8d b7       	in	r24, 0x3d	; 61
    41f6:	9e b7       	in	r25, 0x3e	; 62
    41f8:	46 96       	adiw	r24, 0x16	; 22
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	9e bf       	out	0x3e, r25	; 62
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	8d bf       	out	0x3d, r24	; 61
    4204:	3e cf       	rjmp	.-388    	; 0x4082 <lora_handler_task+0x190>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	0e 94 bf 31 	call	0x637e	; 0x637e <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	0e 94 8d 31 	call	0x631a	; 0x631a <status_leds_fastBlink>
    4212:	34 cf       	rjmp	.-408    	; 0x407c <lora_handler_task+0x18a>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	0e 94 b0 31 	call	0x6360	; 0x6360 <status_leds_ledOn>

	//lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    421a:	e5 e3       	ldi	r30, 0x35	; 53
    421c:	f3 e1       	ldi	r31, 0x13	; 19
    421e:	86 e0       	ldi	r24, 0x06	; 6
    4220:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    4222:	82 e0       	ldi	r24, 0x02	; 2
    4224:	80 83       	st	Z, r24
	{
		int16_t temp = temperatureSensor_getValue(sensorModelManager_getTemperatureSensor());
		int16_t hum = humiditySensor_getValue(sensorModelManager_getHumiditySensor());
		int16_t co2_ppm = carbonDioxideSensor_getValue(sensorModelManager_getCarbonDioxideSensor());
		
		_uplink_payload.bytes[0] = temp >> 8;
    4226:	ef 01       	movw	r28, r30
		_uplink_payload.bytes[3] = hum & 0xFF;
		_uplink_payload.bytes[4] = co2_ppm >> 8;
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		PORTA ^= _BV(PA2);
    4228:	68 94       	set
    422a:	99 24       	eor	r9, r9
    422c:	92 f8       	bld	r9, 2
		char *result = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
		printf("Upload Message >%s<\n", result);
    422e:	0f 2e       	mov	r0, r31
    4230:	f9 e0       	ldi	r31, 0x09	; 9
    4232:	ef 2e       	mov	r14, r31
    4234:	f5 e0       	ldi	r31, 0x05	; 5
    4236:	ff 2e       	mov	r15, r31
    4238:	f0 2d       	mov	r31, r0
		if (result=="MAC_RX"||result=="OK")
		{
			downlinkPayload.portNo = 1;
    423a:	0f 2e       	mov	r0, r31
    423c:	ff e1       	ldi	r31, 0x1F	; 31
    423e:	cf 2e       	mov	r12, r31
    4240:	f3 e1       	ldi	r31, 0x13	; 19
    4242:	df 2e       	mov	r13, r31
    4244:	f0 2d       	mov	r31, r0
    4246:	88 24       	eor	r8, r8
    4248:	83 94       	inc	r8
			downlinkPayload.len = 14;
    424a:	0f 2e       	mov	r0, r31
    424c:	fe e0       	ldi	r31, 0x0E	; 14
    424e:	5f 2e       	mov	r5, r31
    4250:	f0 2d       	mov	r31, r0
			PORTA ^= _BV(PA3);
    4252:	68 94       	set
    4254:	44 24       	eor	r4, r4
    4256:	43 f8       	bld	r4, 3
			xMessageBufferReceive(downLinkBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
			printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for Debug
    4258:	0f 2e       	mov	r0, r31
    425a:	fc e8       	ldi	r31, 0x8C	; 140
    425c:	6f 2e       	mov	r6, r31
    425e:	f3 e0       	ldi	r31, 0x03	; 3
    4260:	7f 2e       	mov	r7, r31
    4262:	f0 2d       	mov	r31, r0
			lora_driver_resetRn2483(1);
			vTaskDelay(2);
			lora_driver_resetRn2483(0);
			// Give it a chance to wakeup
			vTaskDelay(150);
			printf("Rejoin Network TriesLeft:>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_join(LORA_OTAA)));
    4264:	0f 2e       	mov	r0, r31
    4266:	ff e2       	ldi	r31, 0x2F	; 47
    4268:	af 2e       	mov	r10, r31
    426a:	f5 e0       	ldi	r31, 0x05	; 5
    426c:	bf 2e       	mov	r11, r31
    426e:	f0 2d       	mov	r31, r0
    4270:	08 cf       	rjmp	.-496    	; 0x4082 <lora_handler_task+0x190>

00004272 <lora_handler_initialise>:
		//lora_handler_downlink();
	}
}

void lora_handler_initialise(MessageBufferHandle_t messageBufferHandle)
{
    4272:	ef 92       	push	r14
    4274:	ff 92       	push	r15
    4276:	0f 93       	push	r16
	downLinkBufferHandle = messageBufferHandle;
    4278:	90 93 1e 13 	sts	0x131E, r25	; 0x80131e <downLinkBufferHandle+0x1>
    427c:	80 93 1d 13 	sts	0x131D, r24	; 0x80131d <downLinkBufferHandle>
	xTaskCreate(lora_handler_task,"LRHand",configMINIMAL_STACK_SIZE,(void*)1,tskIDLE_PRIORITY + 2,NULL);
    4280:	e1 2c       	mov	r14, r1
    4282:	f1 2c       	mov	r15, r1
    4284:	02 e0       	ldi	r16, 0x02	; 2
    4286:	21 e0       	ldi	r18, 0x01	; 1
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	40 ec       	ldi	r20, 0xC0	; 192
    428c:	50 e0       	ldi	r21, 0x00	; 0
    428e:	6e e4       	ldi	r22, 0x4E	; 78
    4290:	75 e0       	ldi	r23, 0x05	; 5
    4292:	89 e7       	ldi	r24, 0x79	; 121
    4294:	9f e1       	ldi	r25, 0x1F	; 31
    4296:	0e 94 0f 13 	call	0x261e	; 0x261e <xTaskCreate>
}
    429a:	0f 91       	pop	r16
    429c:	ff 90       	pop	r15
    429e:	ef 90       	pop	r14
    42a0:	08 95       	ret

000042a2 <initialiseSystem>:
	// A3 for LoRaWAN downlink
	// A4 means 7-segment Display is showing carbon dioxide
	// A5 means 7-segment Display is showing humidity
	// A6 means 7-segment Display is showing temperature
	// A7 means 7-segment Display is showing time(hh.mm)
	DDRA |= _BV(DDA0) | _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5) | _BV(DDA6) | _BV(DDA7);
    42a2:	81 b1       	in	r24, 0x01	; 1
    42a4:	8f ef       	ldi	r24, 0xFF	; 255
    42a6:	81 b9       	out	0x01, r24	; 1
	//Turn off all led
	PORTA ^= _BV(PA0);
    42a8:	92 b1       	in	r25, 0x02	; 2
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	89 27       	eor	r24, r25
    42ae:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA1);
    42b0:	92 b1       	in	r25, 0x02	; 2
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	89 27       	eor	r24, r25
    42b6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA2);
    42b8:	92 b1       	in	r25, 0x02	; 2
    42ba:	84 e0       	ldi	r24, 0x04	; 4
    42bc:	89 27       	eor	r24, r25
    42be:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA3);
    42c0:	92 b1       	in	r25, 0x02	; 2
    42c2:	88 e0       	ldi	r24, 0x08	; 8
    42c4:	89 27       	eor	r24, r25
    42c6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA4);
    42c8:	92 b1       	in	r25, 0x02	; 2
    42ca:	80 e1       	ldi	r24, 0x10	; 16
    42cc:	89 27       	eor	r24, r25
    42ce:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA5);
    42d0:	92 b1       	in	r25, 0x02	; 2
    42d2:	80 e2       	ldi	r24, 0x20	; 32
    42d4:	89 27       	eor	r24, r25
    42d6:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA6);
    42d8:	92 b1       	in	r25, 0x02	; 2
    42da:	80 e4       	ldi	r24, 0x40	; 64
    42dc:	89 27       	eor	r24, r25
    42de:	82 b9       	out	0x02, r24	; 2
	PORTA ^= _BV(PA7);
    42e0:	82 b1       	in	r24, 0x02	; 2
    42e2:	80 58       	subi	r24, 0x80	; 128
    42e4:	82 b9       	out	0x02, r24	; 2
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <stdio_initialise>
    mh_z19_initialise(ser_USART3);
    42ec:	83 e0       	ldi	r24, 0x03	; 3
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <mh_z19_initialise>
	
	if ( HIH8120_OK != hih8120_initialise() )
    42f4:	ca d3       	rcall	.+1940   	; 0x4a8a <hih8120_initialise>
    42f6:	88 23       	and	r24, r24
    42f8:	41 f0       	breq	.+16     	; 0x430a <initialiseSystem+0x68>
	{
		printf("temperature/humidity sensor not init!");
    42fa:	85 e5       	ldi	r24, 0x55	; 85
    42fc:	95 e0       	ldi	r25, 0x05	; 5
    42fe:	9f 93       	push	r25
    4300:	8f 93       	push	r24
    4302:	0e 94 77 37 	call	0x6eee	; 0x6eee <printf>
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
	}
	
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    430a:	41 e0       	ldi	r20, 0x01	; 1
    430c:	60 e0       	ldi	r22, 0x00	; 0
    430e:	70 e0       	ldi	r23, 0x00	; 0
    4310:	8c e2       	ldi	r24, 0x2C	; 44
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 18 10 	call	0x2030	; 0x2030 <xStreamBufferGenericCreate>
    4318:	90 93 b0 13 	sts	0x13B0, r25	; 0x8013b0 <downLinkMessageBufferHandle+0x1>
    431c:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    4320:	bc 01       	movw	r22, r24
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	31 c5       	rjmp	.+2658   	; 0x4d88 <lora_driver_initialise>
    4326:	08 95       	ret

00004328 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    4328:	bc df       	rcall	.-136    	; 0x42a2 <initialiseSystem>
	printf("Program Started!\n");
    432a:	8b e7       	ldi	r24, 0x7B	; 123
    432c:	95 e0       	ldi	r25, 0x05	; 5
    432e:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <puts>
	sensorModelManager_create();	
    4332:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <sensorModelManager_create>
	lora_handler_initialise(downLinkMessageBufferHandle);
    4336:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <downLinkMessageBufferHandle>
    433a:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <downLinkMessageBufferHandle+0x1>
    433e:	99 df       	rcall	.-206    	; 0x4272 <lora_handler_initialise>
	vTaskStartScheduler();
    4340:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskStartScheduler>
    4344:	ff cf       	rjmp	.-2      	; 0x4344 <main+0x1c>

00004346 <__subsf3>:
    4346:	50 58       	subi	r21, 0x80	; 128

00004348 <__addsf3>:
    4348:	bb 27       	eor	r27, r27
    434a:	aa 27       	eor	r26, r26
    434c:	0e d0       	rcall	.+28     	; 0x436a <__addsf3x>
    434e:	4d c1       	rjmp	.+666    	; 0x45ea <__fp_round>
    4350:	3e d1       	rcall	.+636    	; 0x45ce <__fp_pscA>
    4352:	30 f0       	brcs	.+12     	; 0x4360 <__addsf3+0x18>
    4354:	43 d1       	rcall	.+646    	; 0x45dc <__fp_pscB>
    4356:	20 f0       	brcs	.+8      	; 0x4360 <__addsf3+0x18>
    4358:	31 f4       	brne	.+12     	; 0x4366 <__addsf3+0x1e>
    435a:	9f 3f       	cpi	r25, 0xFF	; 255
    435c:	11 f4       	brne	.+4      	; 0x4362 <__addsf3+0x1a>
    435e:	1e f4       	brtc	.+6      	; 0x4366 <__addsf3+0x1e>
    4360:	33 c1       	rjmp	.+614    	; 0x45c8 <__fp_nan>
    4362:	0e f4       	brtc	.+2      	; 0x4366 <__addsf3+0x1e>
    4364:	e0 95       	com	r30
    4366:	e7 fb       	bst	r30, 7
    4368:	29 c1       	rjmp	.+594    	; 0x45bc <__fp_inf>

0000436a <__addsf3x>:
    436a:	e9 2f       	mov	r30, r25
    436c:	4f d1       	rcall	.+670    	; 0x460c <__fp_split3>
    436e:	80 f3       	brcs	.-32     	; 0x4350 <__addsf3+0x8>
    4370:	ba 17       	cp	r27, r26
    4372:	62 07       	cpc	r22, r18
    4374:	73 07       	cpc	r23, r19
    4376:	84 07       	cpc	r24, r20
    4378:	95 07       	cpc	r25, r21
    437a:	18 f0       	brcs	.+6      	; 0x4382 <__addsf3x+0x18>
    437c:	71 f4       	brne	.+28     	; 0x439a <__addsf3x+0x30>
    437e:	9e f5       	brtc	.+102    	; 0x43e6 <__addsf3x+0x7c>
    4380:	67 c1       	rjmp	.+718    	; 0x4650 <__fp_zero>
    4382:	0e f4       	brtc	.+2      	; 0x4386 <__addsf3x+0x1c>
    4384:	e0 95       	com	r30
    4386:	0b 2e       	mov	r0, r27
    4388:	ba 2f       	mov	r27, r26
    438a:	a0 2d       	mov	r26, r0
    438c:	0b 01       	movw	r0, r22
    438e:	b9 01       	movw	r22, r18
    4390:	90 01       	movw	r18, r0
    4392:	0c 01       	movw	r0, r24
    4394:	ca 01       	movw	r24, r20
    4396:	a0 01       	movw	r20, r0
    4398:	11 24       	eor	r1, r1
    439a:	ff 27       	eor	r31, r31
    439c:	59 1b       	sub	r21, r25
    439e:	99 f0       	breq	.+38     	; 0x43c6 <__addsf3x+0x5c>
    43a0:	59 3f       	cpi	r21, 0xF9	; 249
    43a2:	50 f4       	brcc	.+20     	; 0x43b8 <__addsf3x+0x4e>
    43a4:	50 3e       	cpi	r21, 0xE0	; 224
    43a6:	68 f1       	brcs	.+90     	; 0x4402 <__addsf3x+0x98>
    43a8:	1a 16       	cp	r1, r26
    43aa:	f0 40       	sbci	r31, 0x00	; 0
    43ac:	a2 2f       	mov	r26, r18
    43ae:	23 2f       	mov	r18, r19
    43b0:	34 2f       	mov	r19, r20
    43b2:	44 27       	eor	r20, r20
    43b4:	58 5f       	subi	r21, 0xF8	; 248
    43b6:	f3 cf       	rjmp	.-26     	; 0x439e <__addsf3x+0x34>
    43b8:	46 95       	lsr	r20
    43ba:	37 95       	ror	r19
    43bc:	27 95       	ror	r18
    43be:	a7 95       	ror	r26
    43c0:	f0 40       	sbci	r31, 0x00	; 0
    43c2:	53 95       	inc	r21
    43c4:	c9 f7       	brne	.-14     	; 0x43b8 <__addsf3x+0x4e>
    43c6:	7e f4       	brtc	.+30     	; 0x43e6 <__addsf3x+0x7c>
    43c8:	1f 16       	cp	r1, r31
    43ca:	ba 0b       	sbc	r27, r26
    43cc:	62 0b       	sbc	r22, r18
    43ce:	73 0b       	sbc	r23, r19
    43d0:	84 0b       	sbc	r24, r20
    43d2:	ba f0       	brmi	.+46     	; 0x4402 <__addsf3x+0x98>
    43d4:	91 50       	subi	r25, 0x01	; 1
    43d6:	a1 f0       	breq	.+40     	; 0x4400 <__addsf3x+0x96>
    43d8:	ff 0f       	add	r31, r31
    43da:	bb 1f       	adc	r27, r27
    43dc:	66 1f       	adc	r22, r22
    43de:	77 1f       	adc	r23, r23
    43e0:	88 1f       	adc	r24, r24
    43e2:	c2 f7       	brpl	.-16     	; 0x43d4 <__addsf3x+0x6a>
    43e4:	0e c0       	rjmp	.+28     	; 0x4402 <__addsf3x+0x98>
    43e6:	ba 0f       	add	r27, r26
    43e8:	62 1f       	adc	r22, r18
    43ea:	73 1f       	adc	r23, r19
    43ec:	84 1f       	adc	r24, r20
    43ee:	48 f4       	brcc	.+18     	; 0x4402 <__addsf3x+0x98>
    43f0:	87 95       	ror	r24
    43f2:	77 95       	ror	r23
    43f4:	67 95       	ror	r22
    43f6:	b7 95       	ror	r27
    43f8:	f7 95       	ror	r31
    43fa:	9e 3f       	cpi	r25, 0xFE	; 254
    43fc:	08 f0       	brcs	.+2      	; 0x4400 <__addsf3x+0x96>
    43fe:	b3 cf       	rjmp	.-154    	; 0x4366 <__addsf3+0x1e>
    4400:	93 95       	inc	r25
    4402:	88 0f       	add	r24, r24
    4404:	08 f0       	brcs	.+2      	; 0x4408 <__addsf3x+0x9e>
    4406:	99 27       	eor	r25, r25
    4408:	ee 0f       	add	r30, r30
    440a:	97 95       	ror	r25
    440c:	87 95       	ror	r24
    440e:	08 95       	ret

00004410 <__divsf3>:
    4410:	0c d0       	rcall	.+24     	; 0x442a <__divsf3x>
    4412:	eb c0       	rjmp	.+470    	; 0x45ea <__fp_round>
    4414:	e3 d0       	rcall	.+454    	; 0x45dc <__fp_pscB>
    4416:	40 f0       	brcs	.+16     	; 0x4428 <__divsf3+0x18>
    4418:	da d0       	rcall	.+436    	; 0x45ce <__fp_pscA>
    441a:	30 f0       	brcs	.+12     	; 0x4428 <__divsf3+0x18>
    441c:	21 f4       	brne	.+8      	; 0x4426 <__divsf3+0x16>
    441e:	5f 3f       	cpi	r21, 0xFF	; 255
    4420:	19 f0       	breq	.+6      	; 0x4428 <__divsf3+0x18>
    4422:	cc c0       	rjmp	.+408    	; 0x45bc <__fp_inf>
    4424:	51 11       	cpse	r21, r1
    4426:	15 c1       	rjmp	.+554    	; 0x4652 <__fp_szero>
    4428:	cf c0       	rjmp	.+414    	; 0x45c8 <__fp_nan>

0000442a <__divsf3x>:
    442a:	f0 d0       	rcall	.+480    	; 0x460c <__fp_split3>
    442c:	98 f3       	brcs	.-26     	; 0x4414 <__divsf3+0x4>

0000442e <__divsf3_pse>:
    442e:	99 23       	and	r25, r25
    4430:	c9 f3       	breq	.-14     	; 0x4424 <__divsf3+0x14>
    4432:	55 23       	and	r21, r21
    4434:	b1 f3       	breq	.-20     	; 0x4422 <__divsf3+0x12>
    4436:	95 1b       	sub	r25, r21
    4438:	55 0b       	sbc	r21, r21
    443a:	bb 27       	eor	r27, r27
    443c:	aa 27       	eor	r26, r26
    443e:	62 17       	cp	r22, r18
    4440:	73 07       	cpc	r23, r19
    4442:	84 07       	cpc	r24, r20
    4444:	38 f0       	brcs	.+14     	; 0x4454 <__divsf3_pse+0x26>
    4446:	9f 5f       	subi	r25, 0xFF	; 255
    4448:	5f 4f       	sbci	r21, 0xFF	; 255
    444a:	22 0f       	add	r18, r18
    444c:	33 1f       	adc	r19, r19
    444e:	44 1f       	adc	r20, r20
    4450:	aa 1f       	adc	r26, r26
    4452:	a9 f3       	breq	.-22     	; 0x443e <__divsf3_pse+0x10>
    4454:	33 d0       	rcall	.+102    	; 0x44bc <__divsf3_pse+0x8e>
    4456:	0e 2e       	mov	r0, r30
    4458:	3a f0       	brmi	.+14     	; 0x4468 <__divsf3_pse+0x3a>
    445a:	e0 e8       	ldi	r30, 0x80	; 128
    445c:	30 d0       	rcall	.+96     	; 0x44be <__divsf3_pse+0x90>
    445e:	91 50       	subi	r25, 0x01	; 1
    4460:	50 40       	sbci	r21, 0x00	; 0
    4462:	e6 95       	lsr	r30
    4464:	00 1c       	adc	r0, r0
    4466:	ca f7       	brpl	.-14     	; 0x445a <__divsf3_pse+0x2c>
    4468:	29 d0       	rcall	.+82     	; 0x44bc <__divsf3_pse+0x8e>
    446a:	fe 2f       	mov	r31, r30
    446c:	27 d0       	rcall	.+78     	; 0x44bc <__divsf3_pse+0x8e>
    446e:	66 0f       	add	r22, r22
    4470:	77 1f       	adc	r23, r23
    4472:	88 1f       	adc	r24, r24
    4474:	bb 1f       	adc	r27, r27
    4476:	26 17       	cp	r18, r22
    4478:	37 07       	cpc	r19, r23
    447a:	48 07       	cpc	r20, r24
    447c:	ab 07       	cpc	r26, r27
    447e:	b0 e8       	ldi	r27, 0x80	; 128
    4480:	09 f0       	breq	.+2      	; 0x4484 <__divsf3_pse+0x56>
    4482:	bb 0b       	sbc	r27, r27
    4484:	80 2d       	mov	r24, r0
    4486:	bf 01       	movw	r22, r30
    4488:	ff 27       	eor	r31, r31
    448a:	93 58       	subi	r25, 0x83	; 131
    448c:	5f 4f       	sbci	r21, 0xFF	; 255
    448e:	2a f0       	brmi	.+10     	; 0x449a <__divsf3_pse+0x6c>
    4490:	9e 3f       	cpi	r25, 0xFE	; 254
    4492:	51 05       	cpc	r21, r1
    4494:	68 f0       	brcs	.+26     	; 0x44b0 <__divsf3_pse+0x82>
    4496:	92 c0       	rjmp	.+292    	; 0x45bc <__fp_inf>
    4498:	dc c0       	rjmp	.+440    	; 0x4652 <__fp_szero>
    449a:	5f 3f       	cpi	r21, 0xFF	; 255
    449c:	ec f3       	brlt	.-6      	; 0x4498 <__divsf3_pse+0x6a>
    449e:	98 3e       	cpi	r25, 0xE8	; 232
    44a0:	dc f3       	brlt	.-10     	; 0x4498 <__divsf3_pse+0x6a>
    44a2:	86 95       	lsr	r24
    44a4:	77 95       	ror	r23
    44a6:	67 95       	ror	r22
    44a8:	b7 95       	ror	r27
    44aa:	f7 95       	ror	r31
    44ac:	9f 5f       	subi	r25, 0xFF	; 255
    44ae:	c9 f7       	brne	.-14     	; 0x44a2 <__divsf3_pse+0x74>
    44b0:	88 0f       	add	r24, r24
    44b2:	91 1d       	adc	r25, r1
    44b4:	96 95       	lsr	r25
    44b6:	87 95       	ror	r24
    44b8:	97 f9       	bld	r25, 7
    44ba:	08 95       	ret
    44bc:	e1 e0       	ldi	r30, 0x01	; 1
    44be:	66 0f       	add	r22, r22
    44c0:	77 1f       	adc	r23, r23
    44c2:	88 1f       	adc	r24, r24
    44c4:	bb 1f       	adc	r27, r27
    44c6:	62 17       	cp	r22, r18
    44c8:	73 07       	cpc	r23, r19
    44ca:	84 07       	cpc	r24, r20
    44cc:	ba 07       	cpc	r27, r26
    44ce:	20 f0       	brcs	.+8      	; 0x44d8 <__divsf3_pse+0xaa>
    44d0:	62 1b       	sub	r22, r18
    44d2:	73 0b       	sbc	r23, r19
    44d4:	84 0b       	sbc	r24, r20
    44d6:	ba 0b       	sbc	r27, r26
    44d8:	ee 1f       	adc	r30, r30
    44da:	88 f7       	brcc	.-30     	; 0x44be <__divsf3_pse+0x90>
    44dc:	e0 95       	com	r30
    44de:	08 95       	ret

000044e0 <__fixsfsi>:
    44e0:	04 d0       	rcall	.+8      	; 0x44ea <__fixunssfsi>
    44e2:	68 94       	set
    44e4:	b1 11       	cpse	r27, r1
    44e6:	b5 c0       	rjmp	.+362    	; 0x4652 <__fp_szero>
    44e8:	08 95       	ret

000044ea <__fixunssfsi>:
    44ea:	98 d0       	rcall	.+304    	; 0x461c <__fp_splitA>
    44ec:	88 f0       	brcs	.+34     	; 0x4510 <__fixunssfsi+0x26>
    44ee:	9f 57       	subi	r25, 0x7F	; 127
    44f0:	90 f0       	brcs	.+36     	; 0x4516 <__fixunssfsi+0x2c>
    44f2:	b9 2f       	mov	r27, r25
    44f4:	99 27       	eor	r25, r25
    44f6:	b7 51       	subi	r27, 0x17	; 23
    44f8:	a0 f0       	brcs	.+40     	; 0x4522 <__fixunssfsi+0x38>
    44fa:	d1 f0       	breq	.+52     	; 0x4530 <__fixunssfsi+0x46>
    44fc:	66 0f       	add	r22, r22
    44fe:	77 1f       	adc	r23, r23
    4500:	88 1f       	adc	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	1a f0       	brmi	.+6      	; 0x450c <__fixunssfsi+0x22>
    4506:	ba 95       	dec	r27
    4508:	c9 f7       	brne	.-14     	; 0x44fc <__fixunssfsi+0x12>
    450a:	12 c0       	rjmp	.+36     	; 0x4530 <__fixunssfsi+0x46>
    450c:	b1 30       	cpi	r27, 0x01	; 1
    450e:	81 f0       	breq	.+32     	; 0x4530 <__fixunssfsi+0x46>
    4510:	9f d0       	rcall	.+318    	; 0x4650 <__fp_zero>
    4512:	b1 e0       	ldi	r27, 0x01	; 1
    4514:	08 95       	ret
    4516:	9c c0       	rjmp	.+312    	; 0x4650 <__fp_zero>
    4518:	67 2f       	mov	r22, r23
    451a:	78 2f       	mov	r23, r24
    451c:	88 27       	eor	r24, r24
    451e:	b8 5f       	subi	r27, 0xF8	; 248
    4520:	39 f0       	breq	.+14     	; 0x4530 <__fixunssfsi+0x46>
    4522:	b9 3f       	cpi	r27, 0xF9	; 249
    4524:	cc f3       	brlt	.-14     	; 0x4518 <__fixunssfsi+0x2e>
    4526:	86 95       	lsr	r24
    4528:	77 95       	ror	r23
    452a:	67 95       	ror	r22
    452c:	b3 95       	inc	r27
    452e:	d9 f7       	brne	.-10     	; 0x4526 <__fixunssfsi+0x3c>
    4530:	3e f4       	brtc	.+14     	; 0x4540 <__fixunssfsi+0x56>
    4532:	90 95       	com	r25
    4534:	80 95       	com	r24
    4536:	70 95       	com	r23
    4538:	61 95       	neg	r22
    453a:	7f 4f       	sbci	r23, 0xFF	; 255
    453c:	8f 4f       	sbci	r24, 0xFF	; 255
    453e:	9f 4f       	sbci	r25, 0xFF	; 255
    4540:	08 95       	ret

00004542 <__floatunsisf>:
    4542:	e8 94       	clt
    4544:	09 c0       	rjmp	.+18     	; 0x4558 <__floatsisf+0x12>

00004546 <__floatsisf>:
    4546:	97 fb       	bst	r25, 7
    4548:	3e f4       	brtc	.+14     	; 0x4558 <__floatsisf+0x12>
    454a:	90 95       	com	r25
    454c:	80 95       	com	r24
    454e:	70 95       	com	r23
    4550:	61 95       	neg	r22
    4552:	7f 4f       	sbci	r23, 0xFF	; 255
    4554:	8f 4f       	sbci	r24, 0xFF	; 255
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	99 23       	and	r25, r25
    455a:	a9 f0       	breq	.+42     	; 0x4586 <__floatsisf+0x40>
    455c:	f9 2f       	mov	r31, r25
    455e:	96 e9       	ldi	r25, 0x96	; 150
    4560:	bb 27       	eor	r27, r27
    4562:	93 95       	inc	r25
    4564:	f6 95       	lsr	r31
    4566:	87 95       	ror	r24
    4568:	77 95       	ror	r23
    456a:	67 95       	ror	r22
    456c:	b7 95       	ror	r27
    456e:	f1 11       	cpse	r31, r1
    4570:	f8 cf       	rjmp	.-16     	; 0x4562 <__floatsisf+0x1c>
    4572:	fa f4       	brpl	.+62     	; 0x45b2 <__floatsisf+0x6c>
    4574:	bb 0f       	add	r27, r27
    4576:	11 f4       	brne	.+4      	; 0x457c <__floatsisf+0x36>
    4578:	60 ff       	sbrs	r22, 0
    457a:	1b c0       	rjmp	.+54     	; 0x45b2 <__floatsisf+0x6c>
    457c:	6f 5f       	subi	r22, 0xFF	; 255
    457e:	7f 4f       	sbci	r23, 0xFF	; 255
    4580:	8f 4f       	sbci	r24, 0xFF	; 255
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	16 c0       	rjmp	.+44     	; 0x45b2 <__floatsisf+0x6c>
    4586:	88 23       	and	r24, r24
    4588:	11 f0       	breq	.+4      	; 0x458e <__floatsisf+0x48>
    458a:	96 e9       	ldi	r25, 0x96	; 150
    458c:	11 c0       	rjmp	.+34     	; 0x45b0 <__floatsisf+0x6a>
    458e:	77 23       	and	r23, r23
    4590:	21 f0       	breq	.+8      	; 0x459a <__floatsisf+0x54>
    4592:	9e e8       	ldi	r25, 0x8E	; 142
    4594:	87 2f       	mov	r24, r23
    4596:	76 2f       	mov	r23, r22
    4598:	05 c0       	rjmp	.+10     	; 0x45a4 <__floatsisf+0x5e>
    459a:	66 23       	and	r22, r22
    459c:	71 f0       	breq	.+28     	; 0x45ba <__floatsisf+0x74>
    459e:	96 e8       	ldi	r25, 0x86	; 134
    45a0:	86 2f       	mov	r24, r22
    45a2:	70 e0       	ldi	r23, 0x00	; 0
    45a4:	60 e0       	ldi	r22, 0x00	; 0
    45a6:	2a f0       	brmi	.+10     	; 0x45b2 <__floatsisf+0x6c>
    45a8:	9a 95       	dec	r25
    45aa:	66 0f       	add	r22, r22
    45ac:	77 1f       	adc	r23, r23
    45ae:	88 1f       	adc	r24, r24
    45b0:	da f7       	brpl	.-10     	; 0x45a8 <__floatsisf+0x62>
    45b2:	88 0f       	add	r24, r24
    45b4:	96 95       	lsr	r25
    45b6:	87 95       	ror	r24
    45b8:	97 f9       	bld	r25, 7
    45ba:	08 95       	ret

000045bc <__fp_inf>:
    45bc:	97 f9       	bld	r25, 7
    45be:	9f 67       	ori	r25, 0x7F	; 127
    45c0:	80 e8       	ldi	r24, 0x80	; 128
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	60 e0       	ldi	r22, 0x00	; 0
    45c6:	08 95       	ret

000045c8 <__fp_nan>:
    45c8:	9f ef       	ldi	r25, 0xFF	; 255
    45ca:	80 ec       	ldi	r24, 0xC0	; 192
    45cc:	08 95       	ret

000045ce <__fp_pscA>:
    45ce:	00 24       	eor	r0, r0
    45d0:	0a 94       	dec	r0
    45d2:	16 16       	cp	r1, r22
    45d4:	17 06       	cpc	r1, r23
    45d6:	18 06       	cpc	r1, r24
    45d8:	09 06       	cpc	r0, r25
    45da:	08 95       	ret

000045dc <__fp_pscB>:
    45dc:	00 24       	eor	r0, r0
    45de:	0a 94       	dec	r0
    45e0:	12 16       	cp	r1, r18
    45e2:	13 06       	cpc	r1, r19
    45e4:	14 06       	cpc	r1, r20
    45e6:	05 06       	cpc	r0, r21
    45e8:	08 95       	ret

000045ea <__fp_round>:
    45ea:	09 2e       	mov	r0, r25
    45ec:	03 94       	inc	r0
    45ee:	00 0c       	add	r0, r0
    45f0:	11 f4       	brne	.+4      	; 0x45f6 <__fp_round+0xc>
    45f2:	88 23       	and	r24, r24
    45f4:	52 f0       	brmi	.+20     	; 0x460a <__fp_round+0x20>
    45f6:	bb 0f       	add	r27, r27
    45f8:	40 f4       	brcc	.+16     	; 0x460a <__fp_round+0x20>
    45fa:	bf 2b       	or	r27, r31
    45fc:	11 f4       	brne	.+4      	; 0x4602 <__fp_round+0x18>
    45fe:	60 ff       	sbrs	r22, 0
    4600:	04 c0       	rjmp	.+8      	; 0x460a <__fp_round+0x20>
    4602:	6f 5f       	subi	r22, 0xFF	; 255
    4604:	7f 4f       	sbci	r23, 0xFF	; 255
    4606:	8f 4f       	sbci	r24, 0xFF	; 255
    4608:	9f 4f       	sbci	r25, 0xFF	; 255
    460a:	08 95       	ret

0000460c <__fp_split3>:
    460c:	57 fd       	sbrc	r21, 7
    460e:	90 58       	subi	r25, 0x80	; 128
    4610:	44 0f       	add	r20, r20
    4612:	55 1f       	adc	r21, r21
    4614:	59 f0       	breq	.+22     	; 0x462c <__fp_splitA+0x10>
    4616:	5f 3f       	cpi	r21, 0xFF	; 255
    4618:	71 f0       	breq	.+28     	; 0x4636 <__fp_splitA+0x1a>
    461a:	47 95       	ror	r20

0000461c <__fp_splitA>:
    461c:	88 0f       	add	r24, r24
    461e:	97 fb       	bst	r25, 7
    4620:	99 1f       	adc	r25, r25
    4622:	61 f0       	breq	.+24     	; 0x463c <__fp_splitA+0x20>
    4624:	9f 3f       	cpi	r25, 0xFF	; 255
    4626:	79 f0       	breq	.+30     	; 0x4646 <__fp_splitA+0x2a>
    4628:	87 95       	ror	r24
    462a:	08 95       	ret
    462c:	12 16       	cp	r1, r18
    462e:	13 06       	cpc	r1, r19
    4630:	14 06       	cpc	r1, r20
    4632:	55 1f       	adc	r21, r21
    4634:	f2 cf       	rjmp	.-28     	; 0x461a <__fp_split3+0xe>
    4636:	46 95       	lsr	r20
    4638:	f1 df       	rcall	.-30     	; 0x461c <__fp_splitA>
    463a:	08 c0       	rjmp	.+16     	; 0x464c <__fp_splitA+0x30>
    463c:	16 16       	cp	r1, r22
    463e:	17 06       	cpc	r1, r23
    4640:	18 06       	cpc	r1, r24
    4642:	99 1f       	adc	r25, r25
    4644:	f1 cf       	rjmp	.-30     	; 0x4628 <__fp_splitA+0xc>
    4646:	86 95       	lsr	r24
    4648:	71 05       	cpc	r23, r1
    464a:	61 05       	cpc	r22, r1
    464c:	08 94       	sec
    464e:	08 95       	ret

00004650 <__fp_zero>:
    4650:	e8 94       	clt

00004652 <__fp_szero>:
    4652:	bb 27       	eor	r27, r27
    4654:	66 27       	eor	r22, r22
    4656:	77 27       	eor	r23, r23
    4658:	cb 01       	movw	r24, r22
    465a:	97 f9       	bld	r25, 7
    465c:	08 95       	ret

0000465e <__mulsf3>:
    465e:	0b d0       	rcall	.+22     	; 0x4676 <__mulsf3x>
    4660:	c4 cf       	rjmp	.-120    	; 0x45ea <__fp_round>
    4662:	b5 df       	rcall	.-150    	; 0x45ce <__fp_pscA>
    4664:	28 f0       	brcs	.+10     	; 0x4670 <__mulsf3+0x12>
    4666:	ba df       	rcall	.-140    	; 0x45dc <__fp_pscB>
    4668:	18 f0       	brcs	.+6      	; 0x4670 <__mulsf3+0x12>
    466a:	95 23       	and	r25, r21
    466c:	09 f0       	breq	.+2      	; 0x4670 <__mulsf3+0x12>
    466e:	a6 cf       	rjmp	.-180    	; 0x45bc <__fp_inf>
    4670:	ab cf       	rjmp	.-170    	; 0x45c8 <__fp_nan>
    4672:	11 24       	eor	r1, r1
    4674:	ee cf       	rjmp	.-36     	; 0x4652 <__fp_szero>

00004676 <__mulsf3x>:
    4676:	ca df       	rcall	.-108    	; 0x460c <__fp_split3>
    4678:	a0 f3       	brcs	.-24     	; 0x4662 <__mulsf3+0x4>

0000467a <__mulsf3_pse>:
    467a:	95 9f       	mul	r25, r21
    467c:	d1 f3       	breq	.-12     	; 0x4672 <__mulsf3+0x14>
    467e:	95 0f       	add	r25, r21
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	55 1f       	adc	r21, r21
    4684:	62 9f       	mul	r22, r18
    4686:	f0 01       	movw	r30, r0
    4688:	72 9f       	mul	r23, r18
    468a:	bb 27       	eor	r27, r27
    468c:	f0 0d       	add	r31, r0
    468e:	b1 1d       	adc	r27, r1
    4690:	63 9f       	mul	r22, r19
    4692:	aa 27       	eor	r26, r26
    4694:	f0 0d       	add	r31, r0
    4696:	b1 1d       	adc	r27, r1
    4698:	aa 1f       	adc	r26, r26
    469a:	64 9f       	mul	r22, r20
    469c:	66 27       	eor	r22, r22
    469e:	b0 0d       	add	r27, r0
    46a0:	a1 1d       	adc	r26, r1
    46a2:	66 1f       	adc	r22, r22
    46a4:	82 9f       	mul	r24, r18
    46a6:	22 27       	eor	r18, r18
    46a8:	b0 0d       	add	r27, r0
    46aa:	a1 1d       	adc	r26, r1
    46ac:	62 1f       	adc	r22, r18
    46ae:	73 9f       	mul	r23, r19
    46b0:	b0 0d       	add	r27, r0
    46b2:	a1 1d       	adc	r26, r1
    46b4:	62 1f       	adc	r22, r18
    46b6:	83 9f       	mul	r24, r19
    46b8:	a0 0d       	add	r26, r0
    46ba:	61 1d       	adc	r22, r1
    46bc:	22 1f       	adc	r18, r18
    46be:	74 9f       	mul	r23, r20
    46c0:	33 27       	eor	r19, r19
    46c2:	a0 0d       	add	r26, r0
    46c4:	61 1d       	adc	r22, r1
    46c6:	23 1f       	adc	r18, r19
    46c8:	84 9f       	mul	r24, r20
    46ca:	60 0d       	add	r22, r0
    46cc:	21 1d       	adc	r18, r1
    46ce:	82 2f       	mov	r24, r18
    46d0:	76 2f       	mov	r23, r22
    46d2:	6a 2f       	mov	r22, r26
    46d4:	11 24       	eor	r1, r1
    46d6:	9f 57       	subi	r25, 0x7F	; 127
    46d8:	50 40       	sbci	r21, 0x00	; 0
    46da:	8a f0       	brmi	.+34     	; 0x46fe <__mulsf3_pse+0x84>
    46dc:	e1 f0       	breq	.+56     	; 0x4716 <__mulsf3_pse+0x9c>
    46de:	88 23       	and	r24, r24
    46e0:	4a f0       	brmi	.+18     	; 0x46f4 <__mulsf3_pse+0x7a>
    46e2:	ee 0f       	add	r30, r30
    46e4:	ff 1f       	adc	r31, r31
    46e6:	bb 1f       	adc	r27, r27
    46e8:	66 1f       	adc	r22, r22
    46ea:	77 1f       	adc	r23, r23
    46ec:	88 1f       	adc	r24, r24
    46ee:	91 50       	subi	r25, 0x01	; 1
    46f0:	50 40       	sbci	r21, 0x00	; 0
    46f2:	a9 f7       	brne	.-22     	; 0x46de <__mulsf3_pse+0x64>
    46f4:	9e 3f       	cpi	r25, 0xFE	; 254
    46f6:	51 05       	cpc	r21, r1
    46f8:	70 f0       	brcs	.+28     	; 0x4716 <__mulsf3_pse+0x9c>
    46fa:	60 cf       	rjmp	.-320    	; 0x45bc <__fp_inf>
    46fc:	aa cf       	rjmp	.-172    	; 0x4652 <__fp_szero>
    46fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4700:	ec f3       	brlt	.-6      	; 0x46fc <__mulsf3_pse+0x82>
    4702:	98 3e       	cpi	r25, 0xE8	; 232
    4704:	dc f3       	brlt	.-10     	; 0x46fc <__mulsf3_pse+0x82>
    4706:	86 95       	lsr	r24
    4708:	77 95       	ror	r23
    470a:	67 95       	ror	r22
    470c:	b7 95       	ror	r27
    470e:	f7 95       	ror	r31
    4710:	e7 95       	ror	r30
    4712:	9f 5f       	subi	r25, 0xFF	; 255
    4714:	c1 f7       	brne	.-16     	; 0x4706 <__mulsf3_pse+0x8c>
    4716:	fe 2b       	or	r31, r30
    4718:	88 0f       	add	r24, r24
    471a:	91 1d       	adc	r25, r1
    471c:	96 95       	lsr	r25
    471e:	87 95       	ror	r24
    4720:	97 f9       	bld	r25, 7
    4722:	08 95       	ret

00004724 <_spiCallBack>:
    4724:	81 b3       	in	r24, 0x11	; 17
    4726:	8f 60       	ori	r24, 0x0F	; 15
    4728:	81 bb       	out	0x11, r24	; 17
    472a:	28 98       	cbi	0x05, 0	; 5
    472c:	28 9a       	sbi	0x05, 0	; 5
    472e:	21 b3       	in	r18, 0x11	; 17
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	00 90 e1 13 	lds	r0, 0x13E1	; 0x8013e1 <_digitNo>
    4738:	02 c0       	rjmp	.+4      	; 0x473e <_spiCallBack+0x1a>
    473a:	88 0f       	add	r24, r24
    473c:	99 1f       	adc	r25, r25
    473e:	0a 94       	dec	r0
    4740:	e2 f7       	brpl	.-8      	; 0x473a <_spiCallBack+0x16>
    4742:	80 95       	com	r24
    4744:	82 23       	and	r24, r18
    4746:	81 bb       	out	0x11, r24	; 17
    4748:	e0 91 b1 13 	lds	r30, 0x13B1	; 0x8013b1 <_displayDoneCallBack>
    474c:	f0 91 b2 13 	lds	r31, 0x13B2	; 0x8013b2 <_displayDoneCallBack+0x1>
    4750:	30 97       	sbiw	r30, 0x00	; 0
    4752:	09 f0       	breq	.+2      	; 0x4756 <_spiCallBack+0x32>
    4754:	19 95       	eicall
    4756:	08 95       	ret

00004758 <display_7seg_displayErr>:
    4758:	9f b7       	in	r25, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	ed ed       	ldi	r30, 0xDD	; 221
    475e:	f3 e1       	ldi	r31, 0x13	; 19
    4760:	10 82       	st	Z, r1
    4762:	8e e9       	ldi	r24, 0x9E	; 158
    4764:	81 83       	std	Z+1, r24	; 0x01
    4766:	8a e0       	ldi	r24, 0x0A	; 10
    4768:	82 83       	std	Z+2, r24	; 0x02
    476a:	83 83       	std	Z+3, r24	; 0x03
    476c:	9f bf       	out	0x3f, r25	; 63
    476e:	08 95       	ret

00004770 <display_7seg_display>:
    4770:	bf 92       	push	r11
    4772:	cf 92       	push	r12
    4774:	df 92       	push	r13
    4776:	ef 92       	push	r14
    4778:	ff 92       	push	r15
    477a:	0f 93       	push	r16
    477c:	1f 93       	push	r17
    477e:	cf 93       	push	r28
    4780:	df 93       	push	r29
    4782:	6b 01       	movw	r12, r22
    4784:	7c 01       	movw	r14, r24
    4786:	b4 2e       	mov	r11, r20
    4788:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <_maxHexSegmentindex>
    478c:	83 e0       	ldi	r24, 0x03	; 3
    478e:	84 17       	cp	r24, r20
    4790:	78 f1       	brcs	.+94     	; 0x47f0 <display_7seg_display+0x80>
    4792:	64 2f       	mov	r22, r20
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	d3 de       	rcall	.-602    	; 0x4542 <__floatunsisf>
    479c:	9b 01       	movw	r18, r22
    479e:	ac 01       	movw	r20, r24
    47a0:	60 e0       	ldi	r22, 0x00	; 0
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	80 e2       	ldi	r24, 0x20	; 32
    47a6:	91 e4       	ldi	r25, 0x41	; 65
    47a8:	0e 94 01 34 	call	0x6802	; 0x6802 <pow>
    47ac:	a7 01       	movw	r20, r14
    47ae:	96 01       	movw	r18, r12
    47b0:	56 df       	rcall	.-340    	; 0x465e <__mulsf3>
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	40 e0       	ldi	r20, 0x00	; 0
    47b8:	5f e3       	ldi	r21, 0x3F	; 63
    47ba:	c6 dd       	rcall	.-1140   	; 0x4348 <__addsf3>
    47bc:	0e 94 ac 33 	call	0x6758	; 0x6758 <floor>
    47c0:	8f de       	rcall	.-738    	; 0x44e0 <__fixsfsi>
    47c2:	ab 01       	movw	r20, r22
    47c4:	77 23       	and	r23, r23
    47c6:	64 f4       	brge	.+24     	; 0x47e0 <display_7seg_display+0x70>
    47c8:	44 27       	eor	r20, r20
    47ca:	55 27       	eor	r21, r21
    47cc:	46 1b       	sub	r20, r22
    47ce:	57 0b       	sbc	r21, r23
    47d0:	21 e0       	ldi	r18, 0x01	; 1
    47d2:	48 3e       	cpi	r20, 0xE8	; 232
    47d4:	83 e0       	ldi	r24, 0x03	; 3
    47d6:	58 07       	cpc	r21, r24
    47d8:	0c f4       	brge	.+2      	; 0x47dc <display_7seg_display+0x6c>
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	11 e0       	ldi	r17, 0x01	; 1
    47de:	0c c0       	rjmp	.+24     	; 0x47f8 <display_7seg_display+0x88>
    47e0:	21 e0       	ldi	r18, 0x01	; 1
    47e2:	40 31       	cpi	r20, 0x10	; 16
    47e4:	87 e2       	ldi	r24, 0x27	; 39
    47e6:	58 07       	cpc	r21, r24
    47e8:	0c f4       	brge	.+2      	; 0x47ec <display_7seg_display+0x7c>
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	10 e0       	ldi	r17, 0x00	; 0
    47ee:	04 c0       	rjmp	.+8      	; 0x47f8 <display_7seg_display+0x88>
    47f0:	40 e0       	ldi	r20, 0x00	; 0
    47f2:	50 e0       	ldi	r21, 0x00	; 0
    47f4:	21 e0       	ldi	r18, 0x01	; 1
    47f6:	10 e0       	ldi	r17, 0x00	; 0
    47f8:	0f b7       	in	r16, 0x3f	; 63
    47fa:	f8 94       	cli
    47fc:	22 23       	and	r18, r18
    47fe:	11 f0       	breq	.+4      	; 0x4804 <display_7seg_display+0x94>
    4800:	ab df       	rcall	.-170    	; 0x4758 <display_7seg_displayErr>
    4802:	51 c0       	rjmp	.+162    	; 0x48a6 <display_7seg_display+0x136>
    4804:	c1 ee       	ldi	r28, 0xE1	; 225
    4806:	d3 e1       	ldi	r29, 0x13	; 19
    4808:	0f 2e       	mov	r0, r31
    480a:	fd ed       	ldi	r31, 0xDD	; 221
    480c:	cf 2e       	mov	r12, r31
    480e:	f3 e1       	ldi	r31, 0x13	; 19
    4810:	df 2e       	mov	r13, r31
    4812:	f0 2d       	mov	r31, r0
    4814:	0f 2e       	mov	r0, r31
    4816:	fa e0       	ldi	r31, 0x0A	; 10
    4818:	ef 2e       	mov	r14, r31
    481a:	f1 2c       	mov	r15, r1
    481c:	f0 2d       	mov	r31, r0
    481e:	ca 01       	movw	r24, r20
    4820:	b7 01       	movw	r22, r14
    4822:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__divmodhi4>
    4826:	fc 01       	movw	r30, r24
    4828:	e4 57       	subi	r30, 0x74	; 116
    482a:	fa 4f       	sbci	r31, 0xFA	; 250
    482c:	80 81       	ld	r24, Z
    482e:	8a 93       	st	-Y, r24
    4830:	46 2f       	mov	r20, r22
    4832:	57 2f       	mov	r21, r23
    4834:	cc 15       	cp	r28, r12
    4836:	dd 05       	cpc	r29, r13
    4838:	91 f7       	brne	.-28     	; 0x481e <display_7seg_display+0xae>
    483a:	43 e0       	ldi	r20, 0x03	; 3
    483c:	50 e0       	ldi	r21, 0x00	; 0
    483e:	4b 19       	sub	r20, r11
    4840:	51 09       	sbc	r21, r1
    4842:	14 16       	cp	r1, r20
    4844:	15 06       	cpc	r1, r21
    4846:	f4 f4       	brge	.+60     	; 0x4884 <display_7seg_display+0x114>
    4848:	80 91 dd 13 	lds	r24, 0x13DD	; 0x8013dd <_digitSegments>
    484c:	8c 3f       	cpi	r24, 0xFC	; 252
    484e:	49 f0       	breq	.+18     	; 0x4862 <display_7seg_display+0xf2>
    4850:	60 e0       	ldi	r22, 0x00	; 0
    4852:	19 c0       	rjmp	.+50     	; 0x4886 <display_7seg_display+0x116>
    4854:	fc 01       	movw	r30, r24
    4856:	e3 52       	subi	r30, 0x23	; 35
    4858:	fc 4e       	sbci	r31, 0xEC	; 236
    485a:	30 81       	ld	r19, Z
    485c:	3c 3f       	cpi	r19, 0xFC	; 252
    485e:	21 f0       	breq	.+8      	; 0x4868 <display_7seg_display+0xf8>
    4860:	12 c0       	rjmp	.+36     	; 0x4886 <display_7seg_display+0x116>
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	fc 01       	movw	r30, r24
    486a:	e3 52       	subi	r30, 0x23	; 35
    486c:	fc 4e       	sbci	r31, 0xEC	; 236
    486e:	10 82       	st	Z, r1
    4870:	62 2f       	mov	r22, r18
    4872:	2f 5f       	subi	r18, 0xFF	; 255
    4874:	82 2f       	mov	r24, r18
    4876:	02 2e       	mov	r0, r18
    4878:	00 0c       	add	r0, r0
    487a:	99 0b       	sbc	r25, r25
    487c:	84 17       	cp	r24, r20
    487e:	95 07       	cpc	r25, r21
    4880:	4c f3       	brlt	.-46     	; 0x4854 <display_7seg_display+0xe4>
    4882:	01 c0       	rjmp	.+2      	; 0x4886 <display_7seg_display+0x116>
    4884:	60 e0       	ldi	r22, 0x00	; 0
    4886:	11 23       	and	r17, r17
    4888:	31 f0       	breq	.+12     	; 0x4896 <display_7seg_display+0x126>
    488a:	e6 2f       	mov	r30, r22
    488c:	f0 e0       	ldi	r31, 0x00	; 0
    488e:	e3 52       	subi	r30, 0x23	; 35
    4890:	fc 4e       	sbci	r31, 0xEC	; 236
    4892:	82 e0       	ldi	r24, 0x02	; 2
    4894:	80 83       	st	Z, r24
    4896:	bb 20       	and	r11, r11
    4898:	31 f0       	breq	.+12     	; 0x48a6 <display_7seg_display+0x136>
    489a:	fa 01       	movw	r30, r20
    489c:	e3 52       	subi	r30, 0x23	; 35
    489e:	fc 4e       	sbci	r31, 0xEC	; 236
    48a0:	80 81       	ld	r24, Z
    48a2:	81 60       	ori	r24, 0x01	; 1
    48a4:	80 83       	st	Z, r24
    48a6:	0f bf       	out	0x3f, r16	; 63
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	1f 91       	pop	r17
    48ae:	0f 91       	pop	r16
    48b0:	ff 90       	pop	r15
    48b2:	ef 90       	pop	r14
    48b4:	df 90       	pop	r13
    48b6:	cf 90       	pop	r12
    48b8:	bf 90       	pop	r11
    48ba:	08 95       	ret

000048bc <display_7seg_powerUp>:
    48bc:	85 b5       	in	r24, 0x25	; 37
    48be:	85 60       	ori	r24, 0x05	; 5
    48c0:	85 bd       	out	0x25, r24	; 37
    48c2:	08 95       	ret

000048c4 <display_7seg_powerDown>:
    48c4:	85 b5       	in	r24, 0x25	; 37
    48c6:	88 7f       	andi	r24, 0xF8	; 248
    48c8:	85 bd       	out	0x25, r24	; 37
    48ca:	81 b3       	in	r24, 0x11	; 17
    48cc:	8f 60       	ori	r24, 0x0F	; 15
    48ce:	81 bb       	out	0x11, r24	; 17
    48d0:	08 95       	ret

000048d2 <display_7seg_initialise>:
    48d2:	8f 92       	push	r8
    48d4:	af 92       	push	r10
    48d6:	cf 92       	push	r12
    48d8:	ef 92       	push	r14
    48da:	0f 93       	push	r16
    48dc:	1f 93       	push	r17
    48de:	cf 93       	push	r28
    48e0:	df 93       	push	r29
    48e2:	ec 01       	movw	r28, r24
    48e4:	80 b3       	in	r24, 0x10	; 16
    48e6:	8f 60       	ori	r24, 0x0F	; 15
    48e8:	80 bb       	out	0x10, r24	; 16
    48ea:	81 b3       	in	r24, 0x11	; 17
    48ec:	8f 60       	ori	r24, 0x0F	; 15
    48ee:	81 bb       	out	0x11, r24	; 17
    48f0:	20 9a       	sbi	0x04, 0	; 4
    48f2:	82 e9       	ldi	r24, 0x92	; 146
    48f4:	93 e2       	ldi	r25, 0x23	; 35
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	81 2c       	mov	r8, r1
    48fc:	a1 2c       	mov	r10, r1
    48fe:	c1 2c       	mov	r12, r1
    4900:	e1 2c       	mov	r14, r1
    4902:	00 e0       	ldi	r16, 0x00	; 0
    4904:	10 e0       	ldi	r17, 0x00	; 0
    4906:	20 e2       	ldi	r18, 0x20	; 32
    4908:	40 e0       	ldi	r20, 0x00	; 0
    490a:	63 e0       	ldi	r22, 0x03	; 3
    490c:	80 e1       	ldi	r24, 0x10	; 16
    490e:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <spi_create>
    4912:	90 93 e3 13 	sts	0x13E3, r25	; 0x8013e3 <_spi+0x1>
    4916:	80 93 e2 13 	sts	0x13E2, r24	; 0x8013e2 <_spi>
    491a:	89 e1       	ldi	r24, 0x19	; 25
    491c:	87 bd       	out	0x27, r24	; 39
    491e:	84 b5       	in	r24, 0x24	; 36
    4920:	82 60       	ori	r24, 0x02	; 2
    4922:	84 bd       	out	0x24, r24	; 36
    4924:	ee e6       	ldi	r30, 0x6E	; 110
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	80 81       	ld	r24, Z
    492a:	82 60       	ori	r24, 0x02	; 2
    492c:	80 83       	st	Z, r24
    492e:	ca df       	rcall	.-108    	; 0x48c4 <display_7seg_powerDown>
    4930:	d0 93 b2 13 	sts	0x13B2, r29	; 0x8013b2 <_displayDoneCallBack+0x1>
    4934:	c0 93 b1 13 	sts	0x13B1, r28	; 0x8013b1 <_displayDoneCallBack>
    4938:	0f 90       	pop	r0
    493a:	0f 90       	pop	r0
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	ef 90       	pop	r14
    4946:	cf 90       	pop	r12
    4948:	af 90       	pop	r10
    494a:	8f 90       	pop	r8
    494c:	08 95       	ret

0000494e <__vector_21>:
    494e:	1f 92       	push	r1
    4950:	0f 92       	push	r0
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	0f 92       	push	r0
    4956:	11 24       	eor	r1, r1
    4958:	0b b6       	in	r0, 0x3b	; 59
    495a:	0f 92       	push	r0
    495c:	2f 93       	push	r18
    495e:	3f 93       	push	r19
    4960:	4f 93       	push	r20
    4962:	5f 93       	push	r21
    4964:	6f 93       	push	r22
    4966:	7f 93       	push	r23
    4968:	8f 93       	push	r24
    496a:	9f 93       	push	r25
    496c:	af 93       	push	r26
    496e:	bf 93       	push	r27
    4970:	ef 93       	push	r30
    4972:	ff 93       	push	r31
    4974:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <_maxHexSegmentindex>
    4978:	88 23       	and	r24, r24
    497a:	69 f1       	breq	.+90     	; 0x49d6 <__vector_21+0x88>
    497c:	20 91 b5 13 	lds	r18, 0x13B5	; 0x8013b5 <_intCounter>
    4980:	30 91 b6 13 	lds	r19, 0x13B6	; 0x8013b6 <_intCounter+0x1>
    4984:	25 3f       	cpi	r18, 0xF5	; 245
    4986:	91 e0       	ldi	r25, 0x01	; 1
    4988:	39 07       	cpc	r19, r25
    498a:	38 f4       	brcc	.+14     	; 0x499a <__vector_21+0x4c>
    498c:	2f 5f       	subi	r18, 0xFF	; 255
    498e:	3f 4f       	sbci	r19, 0xFF	; 255
    4990:	30 93 b6 13 	sts	0x13B6, r19	; 0x8013b6 <_intCounter+0x1>
    4994:	20 93 b5 13 	sts	0x13B5, r18	; 0x8013b5 <_intCounter>
    4998:	1e c0       	rjmp	.+60     	; 0x49d6 <__vector_21+0x88>
    499a:	10 92 b6 13 	sts	0x13B6, r1	; 0x8013b6 <_intCounter+0x1>
    499e:	10 92 b5 13 	sts	0x13B5, r1	; 0x8013b5 <_intCounter>
    49a2:	e0 91 b3 13 	lds	r30, 0x13B3	; 0x8013b3 <_scrollIndex>
    49a6:	2e 2f       	mov	r18, r30
    49a8:	30 e0       	ldi	r19, 0x00	; 0
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	04 97       	sbiw	r24, 0x04	; 4
    49ae:	28 17       	cp	r18, r24
    49b0:	39 07       	cpc	r19, r25
    49b2:	14 f4       	brge	.+4      	; 0x49b8 <__vector_21+0x6a>
    49b4:	ef 5f       	subi	r30, 0xFF	; 255
    49b6:	01 c0       	rjmp	.+2      	; 0x49ba <__vector_21+0x6c>
    49b8:	e0 e0       	ldi	r30, 0x00	; 0
    49ba:	e0 93 b3 13 	sts	0x13B3, r30	; 0x8013b3 <_scrollIndex>
    49be:	f0 e0       	ldi	r31, 0x00	; 0
    49c0:	e9 54       	subi	r30, 0x49	; 73
    49c2:	fc 4e       	sbci	r31, 0xEC	; 236
    49c4:	ad ed       	ldi	r26, 0xDD	; 221
    49c6:	b3 e1       	ldi	r27, 0x13	; 19
    49c8:	21 ee       	ldi	r18, 0xE1	; 225
    49ca:	33 e1       	ldi	r19, 0x13	; 19
    49cc:	81 91       	ld	r24, Z+
    49ce:	8d 93       	st	X+, r24
    49d0:	a2 17       	cp	r26, r18
    49d2:	b3 07       	cpc	r27, r19
    49d4:	d9 f7       	brne	.-10     	; 0x49cc <__vector_21+0x7e>
    49d6:	80 91 e1 13 	lds	r24, 0x13E1	; 0x8013e1 <_digitNo>
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	01 96       	adiw	r24, 0x01	; 1
    49de:	83 70       	andi	r24, 0x03	; 3
    49e0:	90 78       	andi	r25, 0x80	; 128
    49e2:	99 23       	and	r25, r25
    49e4:	24 f4       	brge	.+8      	; 0x49ee <__vector_21+0xa0>
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	8c 6f       	ori	r24, 0xFC	; 252
    49ea:	9f 6f       	ori	r25, 0xFF	; 255
    49ec:	01 96       	adiw	r24, 0x01	; 1
    49ee:	80 93 e1 13 	sts	0x13E1, r24	; 0x8013e1 <_digitNo>
    49f2:	99 27       	eor	r25, r25
    49f4:	fc 01       	movw	r30, r24
    49f6:	e3 52       	subi	r30, 0x23	; 35
    49f8:	fc 4e       	sbci	r31, 0xEC	; 236
    49fa:	60 81       	ld	r22, Z
    49fc:	60 95       	com	r22
    49fe:	80 91 e2 13 	lds	r24, 0x13E2	; 0x8013e2 <_spi>
    4a02:	90 91 e3 13 	lds	r25, 0x13E3	; 0x8013e3 <_spi+0x1>
    4a06:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <spi_sendByte>
    4a0a:	ff 91       	pop	r31
    4a0c:	ef 91       	pop	r30
    4a0e:	bf 91       	pop	r27
    4a10:	af 91       	pop	r26
    4a12:	9f 91       	pop	r25
    4a14:	8f 91       	pop	r24
    4a16:	7f 91       	pop	r23
    4a18:	6f 91       	pop	r22
    4a1a:	5f 91       	pop	r21
    4a1c:	4f 91       	pop	r20
    4a1e:	3f 91       	pop	r19
    4a20:	2f 91       	pop	r18
    4a22:	0f 90       	pop	r0
    4a24:	0b be       	out	0x3b, r0	; 59
    4a26:	0f 90       	pop	r0
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	0f 90       	pop	r0
    4a2c:	1f 90       	pop	r1
    4a2e:	18 95       	reti

00004a30 <_hihTwiCallback>:
    4a30:	65 30       	cpi	r22, 0x05	; 5
    4a32:	f1 f4       	brne	.+60     	; 0x4a70 <_hihTwiCallback+0x40>
    4a34:	fa 01       	movw	r30, r20
    4a36:	80 81       	ld	r24, Z
    4a38:	8f 73       	andi	r24, 0x3F	; 63
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	98 2f       	mov	r25, r24
    4a3e:	88 27       	eor	r24, r24
    4a40:	21 81       	ldd	r18, Z+1	; 0x01
    4a42:	82 2b       	or	r24, r18
    4a44:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4a48:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4a4c:	82 81       	ldd	r24, Z+2	; 0x02
    4a4e:	f0 e4       	ldi	r31, 0x40	; 64
    4a50:	8f 9f       	mul	r24, r31
    4a52:	c0 01       	movw	r24, r0
    4a54:	11 24       	eor	r1, r1
    4a56:	fa 01       	movw	r30, r20
    4a58:	23 81       	ldd	r18, Z+3	; 0x03
    4a5a:	26 95       	lsr	r18
    4a5c:	26 95       	lsr	r18
    4a5e:	82 2b       	or	r24, r18
    4a60:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4a64:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	80 93 e4 13 	sts	0x13E4, r24	; 0x8013e4 <_measuringIsReady>
    4a6e:	08 95       	ret
    4a70:	64 30       	cpi	r22, 0x04	; 4
    4a72:	51 f0       	breq	.+20     	; 0x4a88 <_hihTwiCallback+0x58>
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	90 e4       	ldi	r25, 0x40	; 64
    4a78:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4a7c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4a80:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4a84:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4a88:	08 95       	ret

00004a8a <hih8120_initialise>:
    4a8a:	0f 93       	push	r16
    4a8c:	1f 93       	push	r17
    4a8e:	08 e1       	ldi	r16, 0x18	; 24
    4a90:	15 e2       	ldi	r17, 0x25	; 37
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	34 e2       	ldi	r19, 0x24	; 36
    4a96:	44 ef       	ldi	r20, 0xF4	; 244
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	60 e0       	ldi	r22, 0x00	; 0
    4a9c:	87 e2       	ldi	r24, 0x27	; 39
    4a9e:	0e 94 03 32 	call	0x6406	; 0x6406 <twiCreate>
    4aa2:	90 93 e6 13 	sts	0x13E6, r25	; 0x8013e6 <_hih8120Handler+0x1>
    4aa6:	80 93 e5 13 	sts	0x13E5, r24	; 0x8013e5 <_hih8120Handler>
    4aaa:	21 e0       	ldi	r18, 0x01	; 1
    4aac:	89 2b       	or	r24, r25
    4aae:	09 f0       	breq	.+2      	; 0x4ab2 <hih8120_initialise+0x28>
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	82 2f       	mov	r24, r18
    4ab4:	1f 91       	pop	r17
    4ab6:	0f 91       	pop	r16
    4ab8:	08 95       	ret

00004aba <hih8120_wakeup>:
    4aba:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <_hih8120Handler>
    4abe:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <_hih8120Handler+0x1>
    4ac2:	00 97       	sbiw	r24, 0x00	; 0
    4ac4:	59 f0       	breq	.+22     	; 0x4adc <hih8120_wakeup+0x22>
    4ac6:	40 e0       	ldi	r20, 0x00	; 0
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	70 e0       	ldi	r23, 0x00	; 0
    4acc:	0e 94 54 32 	call	0x64a8	; 0x64a8 <twiTransmit>
    4ad0:	84 30       	cpi	r24, 0x04	; 4
    4ad2:	31 f4       	brne	.+12     	; 0x4ae0 <hih8120_wakeup+0x26>
    4ad4:	10 92 e4 13 	sts	0x13E4, r1	; 0x8013e4 <_measuringIsReady>
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	08 95       	ret
    4adc:	82 e0       	ldi	r24, 0x02	; 2
    4ade:	08 95       	ret
    4ae0:	83 e0       	ldi	r24, 0x03	; 3
    4ae2:	08 95       	ret

00004ae4 <hih8120_measure>:
    4ae4:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <_hih8120Handler>
    4ae8:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <_hih8120Handler+0x1>
    4aec:	00 97       	sbiw	r24, 0x00	; 0
    4aee:	39 f0       	breq	.+14     	; 0x4afe <hih8120_measure+0x1a>
    4af0:	64 e0       	ldi	r22, 0x04	; 4
    4af2:	0e 94 a0 32 	call	0x6540	; 0x6540 <twiReceive>
    4af6:	85 30       	cpi	r24, 0x05	; 5
    4af8:	21 f0       	breq	.+8      	; 0x4b02 <hih8120_measure+0x1e>
    4afa:	83 e0       	ldi	r24, 0x03	; 3
    4afc:	08 95       	ret
    4afe:	82 e0       	ldi	r24, 0x02	; 2
    4b00:	08 95       	ret
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	08 95       	ret

00004b06 <hih8120_getHumidity>:
    4b06:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4b0a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	17 dd       	rcall	.-1490   	; 0x4542 <__floatunsisf>
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	48 ec       	ldi	r20, 0xC8	; 200
    4b1a:	52 e4       	ldi	r21, 0x42	; 66
    4b1c:	a0 dd       	rcall	.-1216   	; 0x465e <__mulsf3>
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	38 ef       	ldi	r19, 0xF8	; 248
    4b22:	4f e7       	ldi	r20, 0x7F	; 127
    4b24:	56 e4       	ldi	r21, 0x46	; 70
    4b26:	74 cc       	rjmp	.-1816   	; 0x4410 <__divsf3>
    4b28:	08 95       	ret

00004b2a <hih8120_getTemperature>:
    4b2a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4b2e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	05 dd       	rcall	.-1526   	; 0x4542 <__floatunsisf>
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	45 e2       	ldi	r20, 0x25	; 37
    4b3e:	53 e4       	ldi	r21, 0x43	; 67
    4b40:	8e dd       	rcall	.-1252   	; 0x465e <__mulsf3>
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	38 ef       	ldi	r19, 0xF8	; 248
    4b46:	4f e7       	ldi	r20, 0x7F	; 127
    4b48:	56 e4       	ldi	r21, 0x46	; 70
    4b4a:	62 dc       	rcall	.-1852   	; 0x4410 <__divsf3>
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e2       	ldi	r20, 0x20	; 32
    4b52:	52 e4       	ldi	r21, 0x42	; 66
    4b54:	f8 cb       	rjmp	.-2064   	; 0x4346 <__subsf3>
    4b56:	08 95       	ret

00004b58 <_serialCallBack>:
    4b58:	0f 93       	push	r16
    4b5a:	1f 93       	push	r17
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	1f 92       	push	r1
    4b62:	1f 92       	push	r1
    4b64:	cd b7       	in	r28, 0x3d	; 61
    4b66:	de b7       	in	r29, 0x3e	; 62
    4b68:	8c 01       	movw	r16, r24
    4b6a:	19 82       	std	Y+1, r1	; 0x01
    4b6c:	2d c0       	rjmp	.+90     	; 0x4bc8 <_serialCallBack+0x70>
    4b6e:	e0 91 4b 14 	lds	r30, 0x144B	; 0x80144b <rec_buf_inp.2878>
    4b72:	ec 32       	cpi	r30, 0x2C	; 44
    4b74:	50 f4       	brcc	.+20     	; 0x4b8a <_serialCallBack+0x32>
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	8e 0f       	add	r24, r30
    4b7a:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <rec_buf_inp.2878>
    4b7e:	f0 e0       	ldi	r31, 0x00	; 0
    4b80:	e3 58       	subi	r30, 0x83	; 131
    4b82:	fb 4e       	sbci	r31, 0xEB	; 235
    4b84:	8a 81       	ldd	r24, Y+2	; 0x02
    4b86:	80 83       	st	Z, r24
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <_serialCallBack+0x36>
    4b8a:	10 92 4b 14 	sts	0x144B, r1	; 0x80144b <rec_buf_inp.2878>
    4b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b90:	8a 30       	cpi	r24, 0x0A	; 10
    4b92:	d1 f4       	brne	.+52     	; 0x4bc8 <_serialCallBack+0x70>
    4b94:	40 91 4b 14 	lds	r20, 0x144B	; 0x80144b <rec_buf_inp.2878>
    4b98:	50 e0       	ldi	r21, 0x00	; 0
    4b9a:	fa 01       	movw	r30, r20
    4b9c:	e5 58       	subi	r30, 0x85	; 133
    4b9e:	fb 4e       	sbci	r31, 0xEB	; 235
    4ba0:	10 82       	st	Z, r1
    4ba2:	41 50       	subi	r20, 0x01	; 1
    4ba4:	51 09       	sbc	r21, r1
    4ba6:	9e 01       	movw	r18, r28
    4ba8:	2f 5f       	subi	r18, 0xFF	; 255
    4baa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bac:	6d e7       	ldi	r22, 0x7D	; 125
    4bae:	74 e1       	ldi	r23, 0x14	; 20
    4bb0:	80 91 4e 14 	lds	r24, 0x144E	; 0x80144e <_serialReplyBufferHandle>
    4bb4:	90 91 4f 14 	lds	r25, 0x144F	; 0x80144f <_serialReplyBufferHandle+0x1>
    4bb8:	0e 94 57 11 	call	0x22ae	; 0x22ae <xStreamBufferSendFromISR>
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
    4bbe:	81 11       	cpse	r24, r1
    4bc0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vPortYield>
    4bc4:	10 92 4b 14 	sts	0x144B, r1	; 0x80144b <rec_buf_inp.2878>
    4bc8:	be 01       	movw	r22, r28
    4bca:	6e 5f       	subi	r22, 0xFE	; 254
    4bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bce:	c8 01       	movw	r24, r16
    4bd0:	0f d6       	rcall	.+3102   	; 0x57f0 <serial_getByte>
    4bd2:	88 23       	and	r24, r24
    4bd4:	61 f2       	breq	.-104    	; 0x4b6e <_serialCallBack+0x16>
    4bd6:	0f 90       	pop	r0
    4bd8:	0f 90       	pop	r0
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	08 95       	ret

00004be4 <_uploadMessage>:
    4be4:	0f 93       	push	r16
    4be6:	1f 93       	push	r17
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	8c 01       	movw	r16, r24
    4bee:	eb 01       	movw	r28, r22
    4bf0:	80 91 4e 14 	lds	r24, 0x144E	; 0x80144e <_serialReplyBufferHandle>
    4bf4:	90 91 4f 14 	lds	r25, 0x144F	; 0x80144f <_serialReplyBufferHandle+0x1>
    4bf8:	0e 94 4d 10 	call	0x209a	; 0x209a <xStreamBufferReset>
    4bfc:	b8 01       	movw	r22, r16
    4bfe:	87 ee       	ldi	r24, 0xE7	; 231
    4c00:	93 e1       	ldi	r25, 0x13	; 19
    4c02:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <strcpy>
    4c06:	20 97       	sbiw	r28, 0x00	; 0
    4c08:	79 f0       	breq	.+30     	; 0x4c28 <_uploadMessage+0x44>
    4c0a:	e7 ee       	ldi	r30, 0xE7	; 231
    4c0c:	f3 e1       	ldi	r31, 0x13	; 19
    4c0e:	01 90       	ld	r0, Z+
    4c10:	00 20       	and	r0, r0
    4c12:	e9 f7       	brne	.-6      	; 0x4c0e <_uploadMessage+0x2a>
    4c14:	31 97       	sbiw	r30, 0x01	; 1
    4c16:	80 e2       	ldi	r24, 0x20	; 32
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
    4c1e:	be 01       	movw	r22, r28
    4c20:	87 ee       	ldi	r24, 0xE7	; 231
    4c22:	93 e1       	ldi	r25, 0x13	; 19
    4c24:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <strcat>
    4c28:	e7 ee       	ldi	r30, 0xE7	; 231
    4c2a:	f3 e1       	ldi	r31, 0x13	; 19
    4c2c:	df 01       	movw	r26, r30
    4c2e:	0d 90       	ld	r0, X+
    4c30:	00 20       	and	r0, r0
    4c32:	e9 f7       	brne	.-6      	; 0x4c2e <_uploadMessage+0x4a>
    4c34:	11 97       	sbiw	r26, 0x01	; 1
    4c36:	8d e0       	ldi	r24, 0x0D	; 13
    4c38:	9a e0       	ldi	r25, 0x0A	; 10
    4c3a:	11 96       	adiw	r26, 0x01	; 1
    4c3c:	9c 93       	st	X, r25
    4c3e:	8e 93       	st	-X, r24
    4c40:	12 96       	adiw	r26, 0x02	; 2
    4c42:	1c 92       	st	X, r1
    4c44:	01 90       	ld	r0, Z+
    4c46:	00 20       	and	r0, r0
    4c48:	e9 f7       	brne	.-6      	; 0x4c44 <_uploadMessage+0x60>
    4c4a:	31 97       	sbiw	r30, 0x01	; 1
    4c4c:	e7 5e       	subi	r30, 0xE7	; 231
    4c4e:	f3 41       	sbci	r31, 0x13	; 19
    4c50:	ae 2f       	mov	r26, r30
    4c52:	87 ee       	ldi	r24, 0xE7	; 231
    4c54:	93 e1       	ldi	r25, 0x13	; 19
    4c56:	ac 01       	movw	r20, r24
    4c58:	6a 2f       	mov	r22, r26
    4c5a:	80 91 50 14 	lds	r24, 0x1450	; 0x801450 <_rn2483_serial>
    4c5e:	90 91 51 14 	lds	r25, 0x1451	; 0x801451 <_rn2483_serial+0x1>
    4c62:	71 d5       	rcall	.+2786   	; 0x5746 <serial_sendBytes>
    4c64:	81 11       	cpse	r24, r1
    4c66:	11 c0       	rjmp	.+34     	; 0x4c8a <_uploadMessage+0xa6>
    4c68:	08 e2       	ldi	r16, 0x28	; 40
    4c6a:	15 e0       	ldi	r17, 0x05	; 5
    4c6c:	20 e0       	ldi	r18, 0x00	; 0
    4c6e:	30 e0       	ldi	r19, 0x00	; 0
    4c70:	4d e2       	ldi	r20, 0x2D	; 45
    4c72:	50 e0       	ldi	r21, 0x00	; 0
    4c74:	67 ed       	ldi	r22, 0xD7	; 215
    4c76:	74 e1       	ldi	r23, 0x14	; 20
    4c78:	80 91 4e 14 	lds	r24, 0x144E	; 0x80144e <_serialReplyBufferHandle>
    4c7c:	90 91 4f 14 	lds	r25, 0x144F	; 0x80144f <_serialReplyBufferHandle+0x1>
    4c80:	0e 94 9b 11 	call	0x2336	; 0x2336 <xStreamBufferReceive>
    4c84:	87 ed       	ldi	r24, 0xD7	; 215
    4c86:	94 e1       	ldi	r25, 0x14	; 20
    4c88:	02 c0       	rjmp	.+4      	; 0x4c8e <_uploadMessage+0xaa>
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	df 91       	pop	r29
    4c90:	cf 91       	pop	r28
    4c92:	1f 91       	pop	r17
    4c94:	0f 91       	pop	r16
    4c96:	08 95       	ret

00004c98 <_reply2ReturnCode>:
    4c98:	2f 92       	push	r2
    4c9a:	3f 92       	push	r3
    4c9c:	4f 92       	push	r4
    4c9e:	5f 92       	push	r5
    4ca0:	6f 92       	push	r6
    4ca2:	7f 92       	push	r7
    4ca4:	8f 92       	push	r8
    4ca6:	9f 92       	push	r9
    4ca8:	af 92       	push	r10
    4caa:	bf 92       	push	r11
    4cac:	cf 92       	push	r12
    4cae:	df 92       	push	r13
    4cb0:	ef 92       	push	r14
    4cb2:	ff 92       	push	r15
    4cb4:	0f 93       	push	r16
    4cb6:	1f 93       	push	r17
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	5c 01       	movw	r10, r24
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	01 90       	ld	r0, Z+
    4cc2:	00 20       	and	r0, r0
    4cc4:	e9 f7       	brne	.-6      	; 0x4cc0 <_reply2ReturnCode+0x28>
    4cc6:	31 97       	sbiw	r30, 0x01	; 1
    4cc8:	6f 01       	movw	r12, r30
    4cca:	c8 1a       	sub	r12, r24
    4ccc:	d9 0a       	sbc	r13, r25
    4cce:	5c 2c       	mov	r5, r12
    4cd0:	0f 2e       	mov	r0, r31
    4cd2:	f4 e2       	ldi	r31, 0x24	; 36
    4cd4:	8f 2e       	mov	r8, r31
    4cd6:	f8 e0       	ldi	r31, 0x08	; 8
    4cd8:	9f 2e       	mov	r9, r31
    4cda:	f0 2d       	mov	r31, r0
    4cdc:	e1 2c       	mov	r14, r1
    4cde:	f1 2c       	mov	r15, r1
    4ce0:	4c 2c       	mov	r4, r12
    4ce2:	37 01       	movw	r6, r14
    4ce4:	f4 01       	movw	r30, r8
    4ce6:	01 81       	ldd	r16, Z+1	; 0x01
    4ce8:	12 81       	ldd	r17, Z+2	; 0x02
    4cea:	e8 01       	movw	r28, r16
    4cec:	09 90       	ld	r0, Y+
    4cee:	00 20       	and	r0, r0
    4cf0:	e9 f7       	brne	.-6      	; 0x4cec <_reply2ReturnCode+0x54>
    4cf2:	21 97       	sbiw	r28, 0x01	; 1
    4cf4:	c0 1b       	sub	r28, r16
    4cf6:	d1 0b       	sbc	r29, r17
    4cf8:	3c 2e       	mov	r3, r28
    4cfa:	f9 e0       	ldi	r31, 0x09	; 9
    4cfc:	cf 16       	cp	r12, r31
    4cfe:	d1 04       	cpc	r13, r1
    4d00:	58 f0       	brcs	.+22     	; 0x4d18 <_reply2ReturnCode+0x80>
    4d02:	f4 01       	movw	r30, r8
    4d04:	20 80       	ld	r2, Z
    4d06:	fe e0       	ldi	r31, 0x0E	; 14
    4d08:	2f 12       	cpse	r2, r31
    4d0a:	06 c0       	rjmp	.+12     	; 0x4d18 <_reply2ReturnCode+0x80>
    4d0c:	b8 01       	movw	r22, r16
    4d0e:	c5 01       	movw	r24, r10
    4d10:	0e 94 28 37 	call	0x6e50	; 0x6e50 <strcasestr>
    4d14:	89 2b       	or	r24, r25
    4d16:	09 f5       	brne	.+66     	; 0x4d5a <_reply2ReturnCode+0xc2>
    4d18:	44 2d       	mov	r20, r4
    4d1a:	35 14       	cp	r3, r5
    4d1c:	08 f4       	brcc	.+2      	; 0x4d20 <_reply2ReturnCode+0x88>
    4d1e:	4c 2f       	mov	r20, r28
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	b8 01       	movw	r22, r16
    4d24:	c5 01       	movw	r24, r10
    4d26:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <strncasecmp>
    4d2a:	89 2b       	or	r24, r25
    4d2c:	49 f4       	brne	.+18     	; 0x4d40 <_reply2ReturnCode+0xa8>
    4d2e:	f3 01       	movw	r30, r6
    4d30:	ee 0f       	add	r30, r30
    4d32:	ff 1f       	adc	r31, r31
    4d34:	e6 0d       	add	r30, r6
    4d36:	f7 1d       	adc	r31, r7
    4d38:	ec 5d       	subi	r30, 0xDC	; 220
    4d3a:	f7 4f       	sbci	r31, 0xF7	; 247
    4d3c:	20 80       	ld	r2, Z
    4d3e:	0d c0       	rjmp	.+26     	; 0x4d5a <_reply2ReturnCode+0xc2>
    4d40:	8f ef       	ldi	r24, 0xFF	; 255
    4d42:	e8 1a       	sub	r14, r24
    4d44:	f8 0a       	sbc	r15, r24
    4d46:	e3 e0       	ldi	r30, 0x03	; 3
    4d48:	8e 0e       	add	r8, r30
    4d4a:	91 1c       	adc	r9, r1
    4d4c:	f1 e1       	ldi	r31, 0x11	; 17
    4d4e:	ef 16       	cp	r14, r31
    4d50:	f1 04       	cpc	r15, r1
    4d52:	39 f6       	brne	.-114    	; 0x4ce2 <_reply2ReturnCode+0x4a>
    4d54:	68 94       	set
    4d56:	22 24       	eor	r2, r2
    4d58:	24 f8       	bld	r2, 4
    4d5a:	82 2d       	mov	r24, r2
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	1f 91       	pop	r17
    4d62:	0f 91       	pop	r16
    4d64:	ff 90       	pop	r15
    4d66:	ef 90       	pop	r14
    4d68:	df 90       	pop	r13
    4d6a:	cf 90       	pop	r12
    4d6c:	bf 90       	pop	r11
    4d6e:	af 90       	pop	r10
    4d70:	9f 90       	pop	r9
    4d72:	8f 90       	pop	r8
    4d74:	7f 90       	pop	r7
    4d76:	6f 90       	pop	r6
    4d78:	5f 90       	pop	r5
    4d7a:	4f 90       	pop	r4
    4d7c:	3f 90       	pop	r3
    4d7e:	2f 90       	pop	r2
    4d80:	08 95       	ret

00004d82 <_uploadMessageRc>:
    4d82:	30 df       	rcall	.-416    	; 0x4be4 <_uploadMessage>
    4d84:	89 cf       	rjmp	.-238    	; 0x4c98 <_reply2ReturnCode>
    4d86:	08 95       	ret

00004d88 <lora_driver_initialise>:
    4d88:	8f 92       	push	r8
    4d8a:	9f 92       	push	r9
    4d8c:	af 92       	push	r10
    4d8e:	cf 92       	push	r12
    4d90:	ef 92       	push	r14
    4d92:	0f 93       	push	r16
    4d94:	1f 93       	push	r17
    4d96:	cf 93       	push	r28
    4d98:	c8 2f       	mov	r28, r24
    4d9a:	8b 01       	movw	r16, r22
    4d9c:	41 e0       	ldi	r20, 0x01	; 1
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	70 e0       	ldi	r23, 0x00	; 0
    4da2:	88 ec       	ldi	r24, 0xC8	; 200
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	0e 94 18 10 	call	0x2030	; 0x2030 <xStreamBufferGenericCreate>
    4daa:	90 93 4f 14 	sts	0x144F, r25	; 0x80144f <_serialReplyBufferHandle+0x1>
    4dae:	80 93 4e 14 	sts	0x144E, r24	; 0x80144e <_serialReplyBufferHandle>
    4db2:	10 93 4d 14 	sts	0x144D, r17	; 0x80144d <_downlinkMessageBuffer+0x1>
    4db6:	00 93 4c 14 	sts	0x144C, r16	; 0x80144c <_downlinkMessageBuffer>
    4dba:	0f 2e       	mov	r0, r31
    4dbc:	fc ea       	ldi	r31, 0xAC	; 172
    4dbe:	8f 2e       	mov	r8, r31
    4dc0:	f5 e2       	ldi	r31, 0x25	; 37
    4dc2:	9f 2e       	mov	r9, r31
    4dc4:	f0 2d       	mov	r31, r0
    4dc6:	68 94       	set
    4dc8:	aa 24       	eor	r10, r10
    4dca:	a6 f8       	bld	r10, 6
    4dcc:	68 94       	set
    4dce:	cc 24       	eor	r12, r12
    4dd0:	c6 f8       	bld	r12, 6
    4dd2:	e1 2c       	mov	r14, r1
    4dd4:	00 e0       	ldi	r16, 0x00	; 0
    4dd6:	23 e0       	ldi	r18, 0x03	; 3
    4dd8:	40 e0       	ldi	r20, 0x00	; 0
    4dda:	51 ee       	ldi	r21, 0xE1	; 225
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	70 e0       	ldi	r23, 0x00	; 0
    4de0:	8c 2f       	mov	r24, r28
    4de2:	de d3       	rcall	.+1980   	; 0x55a0 <serial_create>
    4de4:	90 93 51 14 	sts	0x1451, r25	; 0x801451 <_rn2483_serial+0x1>
    4de8:	80 93 50 14 	sts	0x1450, r24	; 0x801450 <_rn2483_serial>
    4dec:	e7 e0       	ldi	r30, 0x07	; 7
    4dee:	f1 e0       	ldi	r31, 0x01	; 1
    4df0:	80 81       	ld	r24, Z
    4df2:	80 61       	ori	r24, 0x10	; 16
    4df4:	80 83       	st	Z, r24
    4df6:	cf 91       	pop	r28
    4df8:	1f 91       	pop	r17
    4dfa:	0f 91       	pop	r16
    4dfc:	ef 90       	pop	r14
    4dfe:	cf 90       	pop	r12
    4e00:	af 90       	pop	r10
    4e02:	9f 90       	pop	r9
    4e04:	8f 90       	pop	r8
    4e06:	08 95       	ret

00004e08 <lora_driver_resetRn2483>:
    4e08:	88 23       	and	r24, r24
    4e0a:	31 f0       	breq	.+12     	; 0x4e18 <lora_driver_resetRn2483+0x10>
    4e0c:	e8 e0       	ldi	r30, 0x08	; 8
    4e0e:	f1 e0       	ldi	r31, 0x01	; 1
    4e10:	80 81       	ld	r24, Z
    4e12:	8f 7e       	andi	r24, 0xEF	; 239
    4e14:	80 83       	st	Z, r24
    4e16:	08 95       	ret
    4e18:	e8 e0       	ldi	r30, 0x08	; 8
    4e1a:	f1 e0       	ldi	r31, 0x01	; 1
    4e1c:	80 81       	ld	r24, Z
    4e1e:	80 61       	ori	r24, 0x10	; 16
    4e20:	80 83       	st	Z, r24
    4e22:	08 95       	ret

00004e24 <lora_driver_rn2483FactoryReset>:
    4e24:	60 e0       	ldi	r22, 0x00	; 0
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	8b eb       	ldi	r24, 0xBB	; 187
    4e2a:	95 e0       	ldi	r25, 0x05	; 5
    4e2c:	db de       	rcall	.-586    	; 0x4be4 <_uploadMessage>
    4e2e:	e7 ed       	ldi	r30, 0xD7	; 215
    4e30:	f4 e1       	ldi	r31, 0x14	; 20
    4e32:	01 90       	ld	r0, Z+
    4e34:	00 20       	and	r0, r0
    4e36:	e9 f7       	brne	.-6      	; 0x4e32 <lora_driver_rn2483FactoryReset+0xe>
    4e38:	31 97       	sbiw	r30, 0x01	; 1
    4e3a:	e7 5d       	subi	r30, 0xD7	; 215
    4e3c:	f4 41       	sbci	r31, 0x14	; 20
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	75 97       	sbiw	r30, 0x15	; 21
    4e42:	08 f0       	brcs	.+2      	; 0x4e46 <lora_driver_rn2483FactoryReset+0x22>
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	08 95       	ret

00004e48 <lora_driver_getRn2483Hweui>:
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
    4e4c:	ec 01       	movw	r28, r24
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	8c ec       	ldi	r24, 0xCC	; 204
    4e54:	95 e0       	ldi	r25, 0x05	; 5
    4e56:	c6 de       	rcall	.-628    	; 0x4be4 <_uploadMessage>
    4e58:	e7 ed       	ldi	r30, 0xD7	; 215
    4e5a:	f4 e1       	ldi	r31, 0x14	; 20
    4e5c:	01 90       	ld	r0, Z+
    4e5e:	00 20       	and	r0, r0
    4e60:	e9 f7       	brne	.-6      	; 0x4e5c <lora_driver_getRn2483Hweui+0x14>
    4e62:	e8 5e       	subi	r30, 0xE8	; 232
    4e64:	f4 41       	sbci	r31, 0x14	; 20
    4e66:	39 f4       	brne	.+14     	; 0x4e76 <lora_driver_getRn2483Hweui+0x2e>
    4e68:	67 ed       	ldi	r22, 0xD7	; 215
    4e6a:	74 e1       	ldi	r23, 0x14	; 20
    4e6c:	ce 01       	movw	r24, r28
    4e6e:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <strcpy>
    4e72:	80 e0       	ldi	r24, 0x00	; 0
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <lora_driver_getRn2483Hweui+0x32>
    4e76:	18 82       	st	Y, r1
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	08 95       	ret

00004e80 <lora_driver_setDeviceIdentifier>:
    4e80:	fc 01       	movw	r30, r24
    4e82:	01 90       	ld	r0, Z+
    4e84:	00 20       	and	r0, r0
    4e86:	e9 f7       	brne	.-6      	; 0x4e82 <lora_driver_setDeviceIdentifier+0x2>
    4e88:	9f 01       	movw	r18, r30
    4e8a:	21 51       	subi	r18, 0x11	; 17
    4e8c:	31 09       	sbc	r19, r1
    4e8e:	28 17       	cp	r18, r24
    4e90:	39 07       	cpc	r19, r25
    4e92:	29 f4       	brne	.+10     	; 0x4e9e <lora_driver_setDeviceIdentifier+0x1e>
    4e94:	bc 01       	movw	r22, r24
    4e96:	8a ef       	ldi	r24, 0xFA	; 250
    4e98:	95 e0       	ldi	r25, 0x05	; 5
    4e9a:	73 cf       	rjmp	.-282    	; 0x4d82 <_uploadMessageRc>
    4e9c:	08 95       	ret
    4e9e:	89 e0       	ldi	r24, 0x09	; 9
    4ea0:	08 95       	ret

00004ea2 <lora_driver_setApplicationIdentifier>:
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	01 90       	ld	r0, Z+
    4ea6:	00 20       	and	r0, r0
    4ea8:	e9 f7       	brne	.-6      	; 0x4ea4 <lora_driver_setApplicationIdentifier+0x2>
    4eaa:	9f 01       	movw	r18, r30
    4eac:	21 51       	subi	r18, 0x11	; 17
    4eae:	31 09       	sbc	r19, r1
    4eb0:	28 17       	cp	r18, r24
    4eb2:	39 07       	cpc	r19, r25
    4eb4:	29 f4       	brne	.+10     	; 0x4ec0 <lora_driver_setApplicationIdentifier+0x1e>
    4eb6:	bc 01       	movw	r22, r24
    4eb8:	89 e0       	ldi	r24, 0x09	; 9
    4eba:	96 e0       	ldi	r25, 0x06	; 6
    4ebc:	62 cf       	rjmp	.-316    	; 0x4d82 <_uploadMessageRc>
    4ebe:	08 95       	ret
    4ec0:	89 e0       	ldi	r24, 0x09	; 9
    4ec2:	08 95       	ret

00004ec4 <lora_driver_setApplicationKey>:
    4ec4:	fc 01       	movw	r30, r24
    4ec6:	01 90       	ld	r0, Z+
    4ec8:	00 20       	and	r0, r0
    4eca:	e9 f7       	brne	.-6      	; 0x4ec6 <lora_driver_setApplicationKey+0x2>
    4ecc:	9f 01       	movw	r18, r30
    4ece:	21 52       	subi	r18, 0x21	; 33
    4ed0:	31 09       	sbc	r19, r1
    4ed2:	28 17       	cp	r18, r24
    4ed4:	39 07       	cpc	r19, r25
    4ed6:	29 f4       	brne	.+10     	; 0x4ee2 <lora_driver_setApplicationKey+0x1e>
    4ed8:	bc 01       	movw	r22, r24
    4eda:	88 e1       	ldi	r24, 0x18	; 24
    4edc:	96 e0       	ldi	r25, 0x06	; 6
    4ede:	51 cf       	rjmp	.-350    	; 0x4d82 <_uploadMessageRc>
    4ee0:	08 95       	ret
    4ee2:	89 e0       	ldi	r24, 0x09	; 9
    4ee4:	08 95       	ret

00004ee6 <lora_driver_saveMac>:
    4ee6:	60 e0       	ldi	r22, 0x00	; 0
    4ee8:	70 e0       	ldi	r23, 0x00	; 0
    4eea:	87 e5       	ldi	r24, 0x57	; 87
    4eec:	96 e0       	ldi	r25, 0x06	; 6
    4eee:	49 cf       	rjmp	.-366    	; 0x4d82 <_uploadMessageRc>
    4ef0:	08 95       	ret

00004ef2 <lora_driver_join>:
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	e8 2f       	mov	r30, r24
    4ef8:	f0 e0       	ldi	r31, 0x00	; 0
    4efa:	ee 0f       	add	r30, r30
    4efc:	ff 1f       	adc	r31, r31
    4efe:	e0 5e       	subi	r30, 0xE0	; 224
    4f00:	f7 4f       	sbci	r31, 0xF7	; 247
    4f02:	60 81       	ld	r22, Z
    4f04:	71 81       	ldd	r23, Z+1	; 0x01
    4f06:	80 e6       	ldi	r24, 0x60	; 96
    4f08:	96 e0       	ldi	r25, 0x06	; 6
    4f0a:	3b df       	rcall	.-394    	; 0x4d82 <_uploadMessageRc>
    4f0c:	81 11       	cpse	r24, r1
    4f0e:	14 c0       	rjmp	.+40     	; 0x4f38 <lora_driver_join+0x46>
    4f10:	08 e2       	ldi	r16, 0x28	; 40
    4f12:	15 e0       	ldi	r17, 0x05	; 5
    4f14:	20 e0       	ldi	r18, 0x00	; 0
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	4d e2       	ldi	r20, 0x2D	; 45
    4f1a:	50 e0       	ldi	r21, 0x00	; 0
    4f1c:	67 ed       	ldi	r22, 0xD7	; 215
    4f1e:	74 e1       	ldi	r23, 0x14	; 20
    4f20:	80 91 4e 14 	lds	r24, 0x144E	; 0x80144e <_serialReplyBufferHandle>
    4f24:	90 91 4f 14 	lds	r25, 0x144F	; 0x80144f <_serialReplyBufferHandle+0x1>
    4f28:	0e 94 9b 11 	call	0x2336	; 0x2336 <xStreamBufferReceive>
    4f2c:	88 23       	and	r24, r24
    4f2e:	21 f0       	breq	.+8      	; 0x4f38 <lora_driver_join+0x46>
    4f30:	87 ed       	ldi	r24, 0xD7	; 215
    4f32:	94 e1       	ldi	r25, 0x14	; 20
    4f34:	b1 de       	rcall	.-670    	; 0x4c98 <_reply2ReturnCode>
    4f36:	03 c0       	rjmp	.+6      	; 0x4f3e <lora_driver_join+0x4c>
    4f38:	87 ed       	ldi	r24, 0xD7	; 215
    4f3a:	94 e1       	ldi	r25, 0x14	; 20
    4f3c:	ad de       	rcall	.-678    	; 0x4c98 <_reply2ReturnCode>
    4f3e:	1f 91       	pop	r17
    4f40:	0f 91       	pop	r16
    4f42:	08 95       	ret

00004f44 <lora_driver_sendUploadMessage>:
    4f44:	0f 93       	push	r16
    4f46:	1f 93       	push	r17
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	1f 92       	push	r1
    4f4e:	cd b7       	in	r28, 0x3d	; 61
    4f50:	de b7       	in	r29, 0x3e	; 62
    4f52:	db 01       	movw	r26, r22
    4f54:	11 96       	adiw	r26, 0x01	; 1
    4f56:	9c 91       	ld	r25, X
    4f58:	11 97       	sbiw	r26, 0x01	; 1
    4f5a:	95 31       	cpi	r25, 0x15	; 21
    4f5c:	08 f0       	brcs	.+2      	; 0x4f60 <lora_driver_sendUploadMessage+0x1c>
    4f5e:	b4 c0       	rjmp	.+360    	; 0x50c8 <lora_driver_sendUploadMessage+0x184>
    4f60:	99 23       	and	r25, r25
    4f62:	81 f1       	breq	.+96     	; 0x4fc4 <lora_driver_sendUploadMessage+0x80>
    4f64:	60 e0       	ldi	r22, 0x00	; 0
    4f66:	70 e0       	ldi	r23, 0x00	; 0
    4f68:	27 2f       	mov	r18, r23
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	46 2f       	mov	r20, r22
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	fd 01       	movw	r30, r26
    4f72:	e4 0f       	add	r30, r20
    4f74:	f5 1f       	adc	r31, r21
    4f76:	92 81       	ldd	r25, Z+2	; 0x02
    4f78:	92 95       	swap	r25
    4f7a:	9f 70       	andi	r25, 0x0F	; 15
    4f7c:	9a 30       	cpi	r25, 0x0A	; 10
    4f7e:	10 f0       	brcs	.+4      	; 0x4f84 <lora_driver_sendUploadMessage+0x40>
    4f80:	99 5c       	subi	r25, 0xC9	; 201
    4f82:	01 c0       	rjmp	.+2      	; 0x4f86 <lora_driver_sendUploadMessage+0x42>
    4f84:	90 5d       	subi	r25, 0xD0	; 208
    4f86:	f9 01       	movw	r30, r18
    4f88:	e8 59       	subi	r30, 0x98	; 152
    4f8a:	fb 4e       	sbci	r31, 0xEB	; 235
    4f8c:	90 83       	st	Z, r25
    4f8e:	2f 5f       	subi	r18, 0xFF	; 255
    4f90:	3f 4f       	sbci	r19, 0xFF	; 255
    4f92:	fd 01       	movw	r30, r26
    4f94:	e4 0f       	add	r30, r20
    4f96:	f5 1f       	adc	r31, r21
    4f98:	92 81       	ldd	r25, Z+2	; 0x02
    4f9a:	9f 70       	andi	r25, 0x0F	; 15
    4f9c:	49 2f       	mov	r20, r25
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	4a 30       	cpi	r20, 0x0A	; 10
    4fa2:	51 05       	cpc	r21, r1
    4fa4:	14 f0       	brlt	.+4      	; 0x4faa <lora_driver_sendUploadMessage+0x66>
    4fa6:	99 5c       	subi	r25, 0xC9	; 201
    4fa8:	01 c0       	rjmp	.+2      	; 0x4fac <lora_driver_sendUploadMessage+0x68>
    4faa:	90 5d       	subi	r25, 0xD0	; 208
    4fac:	f9 01       	movw	r30, r18
    4fae:	e8 59       	subi	r30, 0x98	; 152
    4fb0:	fb 4e       	sbci	r31, 0xEB	; 235
    4fb2:	90 83       	st	Z, r25
    4fb4:	7e 5f       	subi	r23, 0xFE	; 254
    4fb6:	6f 5f       	subi	r22, 0xFF	; 255
    4fb8:	11 96       	adiw	r26, 0x01	; 1
    4fba:	9c 91       	ld	r25, X
    4fbc:	11 97       	sbiw	r26, 0x01	; 1
    4fbe:	69 17       	cp	r22, r25
    4fc0:	98 f2       	brcs	.-90     	; 0x4f68 <lora_driver_sendUploadMessage+0x24>
    4fc2:	01 c0       	rjmp	.+2      	; 0x4fc6 <lora_driver_sendUploadMessage+0x82>
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	e7 2f       	mov	r30, r23
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	e8 59       	subi	r30, 0x98	; 152
    4fcc:	fb 4e       	sbci	r31, 0xEB	; 235
    4fce:	10 82       	st	Z, r1
    4fd0:	4c 91       	ld	r20, X
    4fd2:	81 11       	cpse	r24, r1
    4fd4:	03 c0       	rjmp	.+6      	; 0x4fdc <lora_driver_sendUploadMessage+0x98>
    4fd6:	89 e6       	ldi	r24, 0x69	; 105
    4fd8:	96 e0       	ldi	r25, 0x06	; 6
    4fda:	02 c0       	rjmp	.+4      	; 0x4fe0 <lora_driver_sendUploadMessage+0x9c>
    4fdc:	8b e6       	ldi	r24, 0x6B	; 107
    4fde:	96 e0       	ldi	r25, 0x06	; 6
    4fe0:	28 e6       	ldi	r18, 0x68	; 104
    4fe2:	34 e1       	ldi	r19, 0x14	; 20
    4fe4:	3f 93       	push	r19
    4fe6:	2f 93       	push	r18
    4fe8:	1f 92       	push	r1
    4fea:	4f 93       	push	r20
    4fec:	9f 93       	push	r25
    4fee:	8f 93       	push	r24
    4ff0:	8f e6       	ldi	r24, 0x6F	; 111
    4ff2:	96 e0       	ldi	r25, 0x06	; 6
    4ff4:	9f 93       	push	r25
    4ff6:	8f 93       	push	r24
    4ff8:	8a ea       	ldi	r24, 0xAA	; 170
    4ffa:	94 e1       	ldi	r25, 0x14	; 20
    4ffc:	9f 93       	push	r25
    4ffe:	8f 93       	push	r24
    5000:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <sprintf>
    5004:	60 e0       	ldi	r22, 0x00	; 0
    5006:	70 e0       	ldi	r23, 0x00	; 0
    5008:	8a ea       	ldi	r24, 0xAA	; 170
    500a:	94 e1       	ldi	r25, 0x14	; 20
    500c:	ba de       	rcall	.-652    	; 0x4d82 <_uploadMessageRc>
    500e:	0f b6       	in	r0, 0x3f	; 63
    5010:	f8 94       	cli
    5012:	de bf       	out	0x3e, r29	; 62
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	cd bf       	out	0x3d, r28	; 61
    5018:	81 11       	cpse	r24, r1
    501a:	59 c0       	rjmp	.+178    	; 0x50ce <lora_driver_sendUploadMessage+0x18a>
    501c:	08 e2       	ldi	r16, 0x28	; 40
    501e:	15 e0       	ldi	r17, 0x05	; 5
    5020:	20 e0       	ldi	r18, 0x00	; 0
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	4d e2       	ldi	r20, 0x2D	; 45
    5026:	50 e0       	ldi	r21, 0x00	; 0
    5028:	67 ed       	ldi	r22, 0xD7	; 215
    502a:	74 e1       	ldi	r23, 0x14	; 20
    502c:	80 91 4e 14 	lds	r24, 0x144E	; 0x80144e <_serialReplyBufferHandle>
    5030:	90 91 4f 14 	lds	r25, 0x144F	; 0x80144f <_serialReplyBufferHandle+0x1>
    5034:	0e 94 9b 11 	call	0x2336	; 0x2336 <xStreamBufferReceive>
    5038:	88 23       	and	r24, r24
    503a:	09 f4       	brne	.+2      	; 0x503e <lora_driver_sendUploadMessage+0xfa>
    503c:	47 c0       	rjmp	.+142    	; 0x50cc <lora_driver_sendUploadMessage+0x188>
    503e:	87 ed       	ldi	r24, 0xD7	; 215
    5040:	94 e1       	ldi	r25, 0x14	; 20
    5042:	2a de       	rcall	.-940    	; 0x4c98 <_reply2ReturnCode>
    5044:	8e 30       	cpi	r24, 0x0E	; 14
    5046:	09 f0       	breq	.+2      	; 0x504a <lora_driver_sendUploadMessage+0x106>
    5048:	42 c0       	rjmp	.+132    	; 0x50ce <lora_driver_sendUploadMessage+0x18a>
    504a:	87 e0       	ldi	r24, 0x07	; 7
    504c:	89 83       	std	Y+1, r24	; 0x01
    504e:	80 91 4c 14 	lds	r24, 0x144C	; 0x80144c <_downlinkMessageBuffer>
    5052:	90 91 4d 14 	lds	r25, 0x144D	; 0x80144d <_downlinkMessageBuffer+0x1>
    5056:	89 2b       	or	r24, r25
    5058:	a9 f1       	breq	.+106    	; 0x50c4 <lora_driver_sendUploadMessage+0x180>
    505a:	be 01       	movw	r22, r28
    505c:	6f 5f       	subi	r22, 0xFF	; 255
    505e:	7f 4f       	sbci	r23, 0xFF	; 255
    5060:	87 ed       	ldi	r24, 0xD7	; 215
    5062:	94 e1       	ldi	r25, 0x14	; 20
    5064:	68 d1       	rcall	.+720    	; 0x5336 <decode_port_no>
    5066:	80 93 52 14 	sts	0x1452, r24	; 0x801452 <_downlinkPayload>
    506a:	e9 81       	ldd	r30, Y+1	; 0x01
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	e9 52       	subi	r30, 0x29	; 41
    5070:	fb 4e       	sbci	r31, 0xEB	; 235
    5072:	df 01       	movw	r26, r30
    5074:	0d 90       	ld	r0, X+
    5076:	00 20       	and	r0, r0
    5078:	e9 f7       	brne	.-6      	; 0x5074 <lora_driver_sendUploadMessage+0x130>
    507a:	11 97       	sbiw	r26, 0x01	; 1
    507c:	ae 1b       	sub	r26, r30
    507e:	bf 0b       	sbc	r27, r31
    5080:	aa 23       	and	r26, r26
    5082:	91 f0       	breq	.+36     	; 0x50a8 <lora_driver_sendUploadMessage+0x164>
    5084:	bb 27       	eor	r27, r27
    5086:	cd 01       	movw	r24, r26
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	9c 01       	movw	r18, r24
    508c:	12 f4       	brpl	.+4      	; 0x5092 <lora_driver_sendUploadMessage+0x14e>
    508e:	2f 5f       	subi	r18, 0xFF	; 255
    5090:	3f 4f       	sbci	r19, 0xFF	; 255
    5092:	35 95       	asr	r19
    5094:	27 95       	ror	r18
    5096:	20 93 53 14 	sts	0x1453, r18	; 0x801453 <_downlinkPayload+0x1>
    509a:	af 01       	movw	r20, r30
    509c:	4f 5f       	subi	r20, 0xFF	; 255
    509e:	5f 4f       	sbci	r21, 0xFF	; 255
    50a0:	64 e1       	ldi	r22, 0x14	; 20
    50a2:	84 e5       	ldi	r24, 0x54	; 84
    50a4:	94 e1       	ldi	r25, 0x14	; 20
    50a6:	73 d1       	rcall	.+742    	; 0x538e <decode_hexadecimal_string_bytes>
    50a8:	01 e0       	ldi	r16, 0x01	; 1
    50aa:	10 e0       	ldi	r17, 0x00	; 0
    50ac:	20 e0       	ldi	r18, 0x00	; 0
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	46 e1       	ldi	r20, 0x16	; 22
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	62 e5       	ldi	r22, 0x52	; 82
    50b6:	74 e1       	ldi	r23, 0x14	; 20
    50b8:	80 91 4c 14 	lds	r24, 0x144C	; 0x80144c <_downlinkMessageBuffer>
    50bc:	90 91 4d 14 	lds	r25, 0x144D	; 0x80144d <_downlinkMessageBuffer+0x1>
    50c0:	0e 94 99 10 	call	0x2132	; 0x2132 <xStreamBufferSend>
    50c4:	8e e0       	ldi	r24, 0x0E	; 14
    50c6:	03 c0       	rjmp	.+6      	; 0x50ce <lora_driver_sendUploadMessage+0x18a>
    50c8:	84 e1       	ldi	r24, 0x14	; 20
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <lora_driver_sendUploadMessage+0x18a>
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	0f 90       	pop	r0
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	0f 91       	pop	r16
    50d8:	08 95       	ret

000050da <lora_driver_setAdaptiveDataRate>:
    50da:	81 30       	cpi	r24, 0x01	; 1
    50dc:	19 f0       	breq	.+6      	; 0x50e4 <lora_driver_setAdaptiveDataRate+0xa>
    50de:	6f e7       	ldi	r22, 0x7F	; 127
    50e0:	76 e0       	ldi	r23, 0x06	; 6
    50e2:	02 c0       	rjmp	.+4      	; 0x50e8 <lora_driver_setAdaptiveDataRate+0xe>
    50e4:	68 e5       	ldi	r22, 0x58	; 88
    50e6:	77 e0       	ldi	r23, 0x07	; 7
    50e8:	83 e8       	ldi	r24, 0x83	; 131
    50ea:	96 e0       	ldi	r25, 0x06	; 6
    50ec:	4a ce       	rjmp	.-876    	; 0x4d82 <_uploadMessageRc>
    50ee:	08 95       	ret

000050f0 <lora_driver_setReceiveDelay>:
    50f0:	9f 93       	push	r25
    50f2:	8f 93       	push	r24
    50f4:	84 eb       	ldi	r24, 0xB4	; 180
    50f6:	96 e0       	ldi	r25, 0x06	; 6
    50f8:	9f 93       	push	r25
    50fa:	8f 93       	push	r24
    50fc:	8a ea       	ldi	r24, 0xAA	; 170
    50fe:	94 e1       	ldi	r25, 0x14	; 20
    5100:	9f 93       	push	r25
    5102:	8f 93       	push	r24
    5104:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <sprintf>
    5108:	60 e0       	ldi	r22, 0x00	; 0
    510a:	70 e0       	ldi	r23, 0x00	; 0
    510c:	8a ea       	ldi	r24, 0xAA	; 170
    510e:	94 e1       	ldi	r25, 0x14	; 20
    5110:	38 de       	rcall	.-912    	; 0x4d82 <_uploadMessageRc>
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
    511e:	08 95       	ret

00005120 <lora_driver_configureToEu868>:
    5120:	2f 92       	push	r2
    5122:	3f 92       	push	r3
    5124:	4f 92       	push	r4
    5126:	5f 92       	push	r5
    5128:	6f 92       	push	r6
    512a:	7f 92       	push	r7
    512c:	8f 92       	push	r8
    512e:	9f 92       	push	r9
    5130:	af 92       	push	r10
    5132:	bf 92       	push	r11
    5134:	cf 92       	push	r12
    5136:	df 92       	push	r13
    5138:	ef 92       	push	r14
    513a:	ff 92       	push	r15
    513c:	0f 93       	push	r16
    513e:	1f 93       	push	r17
    5140:	cf 93       	push	r28
    5142:	df 93       	push	r29
    5144:	cd b7       	in	r28, 0x3d	; 61
    5146:	de b7       	in	r29, 0x3e	; 62
    5148:	a0 97       	sbiw	r28, 0x20	; 32
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	f8 94       	cli
    514e:	de bf       	out	0x3e, r29	; 62
    5150:	0f be       	out	0x3f, r0	; 63
    5152:	cd bf       	out	0x3d, r28	; 61
    5154:	61 ee       	ldi	r22, 0xE1	; 225
    5156:	76 e0       	ldi	r23, 0x06	; 6
    5158:	8d ee       	ldi	r24, 0xED	; 237
    515a:	96 e0       	ldi	r25, 0x06	; 6
    515c:	43 dd       	rcall	.-1402   	; 0x4be4 <_uploadMessage>
    515e:	9c dd       	rcall	.-1224   	; 0x4c98 <_reply2ReturnCode>
    5160:	81 11       	cpse	r24, r1
    5162:	a3 c0       	rjmp	.+326    	; 0x52aa <lora_driver_configureToEu868+0x18a>
    5164:	80 e2       	ldi	r24, 0x20	; 32
    5166:	e2 e2       	ldi	r30, 0x22	; 34
    5168:	f2 e0       	ldi	r31, 0x02	; 2
    516a:	de 01       	movw	r26, r28
    516c:	11 96       	adiw	r26, 0x01	; 1
    516e:	01 90       	ld	r0, Z+
    5170:	0d 92       	st	X+, r0
    5172:	8a 95       	dec	r24
    5174:	e1 f7       	brne	.-8      	; 0x516e <lora_driver_configureToEu868+0x4e>
    5176:	9e 01       	movw	r18, r28
    5178:	2f 5f       	subi	r18, 0xFF	; 255
    517a:	3f 4f       	sbci	r19, 0xFF	; 255
    517c:	69 01       	movw	r12, r18
    517e:	e1 2c       	mov	r14, r1
    5180:	f1 2c       	mov	r15, r1
    5182:	0f 2e       	mov	r0, r31
    5184:	f9 ef       	ldi	r31, 0xF9	; 249
    5186:	af 2e       	mov	r10, r31
    5188:	f6 e0       	ldi	r31, 0x06	; 6
    518a:	bf 2e       	mov	r11, r31
    518c:	f0 2d       	mov	r31, r0
    518e:	0a ea       	ldi	r16, 0xAA	; 170
    5190:	14 e1       	ldi	r17, 0x14	; 20
    5192:	0f 2e       	mov	r0, r31
    5194:	f2 e1       	ldi	r31, 0x12	; 18
    5196:	4f 2e       	mov	r4, r31
    5198:	f7 e0       	ldi	r31, 0x07	; 7
    519a:	5f 2e       	mov	r5, r31
    519c:	f0 2d       	mov	r31, r0
    519e:	0f 2e       	mov	r0, r31
    51a0:	f9 e2       	ldi	r31, 0x29	; 41
    51a2:	8f 2e       	mov	r8, r31
    51a4:	f7 e0       	ldi	r31, 0x07	; 7
    51a6:	9f 2e       	mov	r9, r31
    51a8:	f0 2d       	mov	r31, r0
    51aa:	0f 2e       	mov	r0, r31
    51ac:	f3 e4       	ldi	r31, 0x43	; 67
    51ae:	6f 2e       	mov	r6, r31
    51b0:	f7 e0       	ldi	r31, 0x07	; 7
    51b2:	7f 2e       	mov	r7, r31
    51b4:	f0 2d       	mov	r31, r0
    51b6:	3e 2c       	mov	r3, r14
    51b8:	2f 2c       	mov	r2, r15
    51ba:	ff 92       	push	r15
    51bc:	ef 92       	push	r14
    51be:	bf 92       	push	r11
    51c0:	af 92       	push	r10
    51c2:	1f 93       	push	r17
    51c4:	0f 93       	push	r16
    51c6:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <sprintf>
    51ca:	60 e0       	ldi	r22, 0x00	; 0
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	c8 01       	movw	r24, r16
    51d0:	09 dd       	rcall	.-1518   	; 0x4be4 <_uploadMessage>
    51d2:	62 dd       	rcall	.-1340   	; 0x4c98 <_reply2ReturnCode>
    51d4:	0f 90       	pop	r0
    51d6:	0f 90       	pop	r0
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	0f 90       	pop	r0
    51de:	0f 90       	pop	r0
    51e0:	81 11       	cpse	r24, r1
    51e2:	63 c0       	rjmp	.+198    	; 0x52aa <lora_driver_configureToEu868+0x18a>
    51e4:	32 e0       	ldi	r19, 0x02	; 2
    51e6:	3e 15       	cp	r19, r14
    51e8:	e8 f4       	brcc	.+58     	; 0x5224 <lora_driver_configureToEu868+0x104>
    51ea:	f6 01       	movw	r30, r12
    51ec:	83 81       	ldd	r24, Z+3	; 0x03
    51ee:	8f 93       	push	r24
    51f0:	82 81       	ldd	r24, Z+2	; 0x02
    51f2:	8f 93       	push	r24
    51f4:	81 81       	ldd	r24, Z+1	; 0x01
    51f6:	8f 93       	push	r24
    51f8:	80 81       	ld	r24, Z
    51fa:	8f 93       	push	r24
    51fc:	ff 92       	push	r15
    51fe:	ef 92       	push	r14
    5200:	5f 92       	push	r5
    5202:	4f 92       	push	r4
    5204:	1f 93       	push	r17
    5206:	0f 93       	push	r16
    5208:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <sprintf>
    520c:	60 e0       	ldi	r22, 0x00	; 0
    520e:	70 e0       	ldi	r23, 0x00	; 0
    5210:	c8 01       	movw	r24, r16
    5212:	e8 dc       	rcall	.-1584   	; 0x4be4 <_uploadMessage>
    5214:	41 dd       	rcall	.-1406   	; 0x4c98 <_reply2ReturnCode>
    5216:	0f b6       	in	r0, 0x3f	; 63
    5218:	f8 94       	cli
    521a:	de bf       	out	0x3e, r29	; 62
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	cd bf       	out	0x3d, r28	; 61
    5220:	81 11       	cpse	r24, r1
    5222:	43 c0       	rjmp	.+134    	; 0x52aa <lora_driver_configureToEu868+0x18a>
    5224:	2f 92       	push	r2
    5226:	3f 92       	push	r3
    5228:	9f 92       	push	r9
    522a:	8f 92       	push	r8
    522c:	1f 93       	push	r17
    522e:	0f 93       	push	r16
    5230:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <sprintf>
    5234:	60 e0       	ldi	r22, 0x00	; 0
    5236:	70 e0       	ldi	r23, 0x00	; 0
    5238:	c8 01       	movw	r24, r16
    523a:	d4 dc       	rcall	.-1624   	; 0x4be4 <_uploadMessage>
    523c:	2d dd       	rcall	.-1446   	; 0x4c98 <_reply2ReturnCode>
    523e:	0f 90       	pop	r0
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
    5244:	0f 90       	pop	r0
    5246:	0f 90       	pop	r0
    5248:	0f 90       	pop	r0
    524a:	81 11       	cpse	r24, r1
    524c:	2e c0       	rjmp	.+92     	; 0x52aa <lora_driver_configureToEu868+0x18a>
    524e:	2f 92       	push	r2
    5250:	3f 92       	push	r3
    5252:	7f 92       	push	r7
    5254:	6f 92       	push	r6
    5256:	1f 93       	push	r17
    5258:	0f 93       	push	r16
    525a:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <sprintf>
    525e:	60 e0       	ldi	r22, 0x00	; 0
    5260:	70 e0       	ldi	r23, 0x00	; 0
    5262:	c8 01       	movw	r24, r16
    5264:	bf dc       	rcall	.-1666   	; 0x4be4 <_uploadMessage>
    5266:	18 dd       	rcall	.-1488   	; 0x4c98 <_reply2ReturnCode>
    5268:	0f 90       	pop	r0
    526a:	0f 90       	pop	r0
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	0f 90       	pop	r0
    5272:	0f 90       	pop	r0
    5274:	81 11       	cpse	r24, r1
    5276:	19 c0       	rjmp	.+50     	; 0x52aa <lora_driver_configureToEu868+0x18a>
    5278:	3f ef       	ldi	r19, 0xFF	; 255
    527a:	e3 1a       	sub	r14, r19
    527c:	f3 0a       	sbc	r15, r19
    527e:	84 e0       	ldi	r24, 0x04	; 4
    5280:	c8 0e       	add	r12, r24
    5282:	d1 1c       	adc	r13, r1
    5284:	98 e0       	ldi	r25, 0x08	; 8
    5286:	e9 16       	cp	r14, r25
    5288:	f1 04       	cpc	r15, r1
    528a:	09 f0       	breq	.+2      	; 0x528e <lora_driver_configureToEu868+0x16e>
    528c:	94 cf       	rjmp	.-216    	; 0x51b6 <lora_driver_configureToEu868+0x96>
    528e:	60 e0       	ldi	r22, 0x00	; 0
    5290:	70 e0       	ldi	r23, 0x00	; 0
    5292:	8b e5       	ldi	r24, 0x5B	; 91
    5294:	97 e0       	ldi	r25, 0x07	; 7
    5296:	a6 dc       	rcall	.-1716   	; 0x4be4 <_uploadMessage>
    5298:	ff dc       	rcall	.-1538   	; 0x4c98 <_reply2ReturnCode>
    529a:	81 11       	cpse	r24, r1
    529c:	06 c0       	rjmp	.+12     	; 0x52aa <lora_driver_configureToEu868+0x18a>
    529e:	60 e0       	ldi	r22, 0x00	; 0
    52a0:	70 e0       	ldi	r23, 0x00	; 0
    52a2:	8c e6       	ldi	r24, 0x6C	; 108
    52a4:	97 e0       	ldi	r25, 0x07	; 7
    52a6:	9e dc       	rcall	.-1732   	; 0x4be4 <_uploadMessage>
    52a8:	f7 dc       	rcall	.-1554   	; 0x4c98 <_reply2ReturnCode>
    52aa:	a0 96       	adiw	r28, 0x20	; 32
    52ac:	0f b6       	in	r0, 0x3f	; 63
    52ae:	f8 94       	cli
    52b0:	de bf       	out	0x3e, r29	; 62
    52b2:	0f be       	out	0x3f, r0	; 63
    52b4:	cd bf       	out	0x3d, r28	; 61
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	1f 91       	pop	r17
    52bc:	0f 91       	pop	r16
    52be:	ff 90       	pop	r15
    52c0:	ef 90       	pop	r14
    52c2:	df 90       	pop	r13
    52c4:	cf 90       	pop	r12
    52c6:	bf 90       	pop	r11
    52c8:	af 90       	pop	r10
    52ca:	9f 90       	pop	r9
    52cc:	8f 90       	pop	r8
    52ce:	7f 90       	pop	r7
    52d0:	6f 90       	pop	r6
    52d2:	5f 90       	pop	r5
    52d4:	4f 90       	pop	r4
    52d6:	3f 90       	pop	r3
    52d8:	2f 90       	pop	r2
    52da:	08 95       	ret

000052dc <lora_driver_setOtaaIdentity>:
    52dc:	ef 92       	push	r14
    52de:	ff 92       	push	r15
    52e0:	0f 93       	push	r16
    52e2:	1f 93       	push	r17
    52e4:	cf 93       	push	r28
    52e6:	df 93       	push	r29
    52e8:	ec 01       	movw	r28, r24
    52ea:	8b 01       	movw	r16, r22
    52ec:	7a 01       	movw	r14, r20
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	f4 de       	rcall	.-536    	; 0x50da <lora_driver_setAdaptiveDataRate>
    52f2:	81 11       	cpse	r24, r1
    52f4:	0d c0       	rjmp	.+26     	; 0x5310 <lora_driver_setOtaaIdentity+0x34>
    52f6:	ce 01       	movw	r24, r28
    52f8:	d4 dd       	rcall	.-1112   	; 0x4ea2 <lora_driver_setApplicationIdentifier>
    52fa:	81 11       	cpse	r24, r1
    52fc:	09 c0       	rjmp	.+18     	; 0x5310 <lora_driver_setOtaaIdentity+0x34>
    52fe:	c8 01       	movw	r24, r16
    5300:	e1 dd       	rcall	.-1086   	; 0x4ec4 <lora_driver_setApplicationKey>
    5302:	81 11       	cpse	r24, r1
    5304:	05 c0       	rjmp	.+10     	; 0x5310 <lora_driver_setOtaaIdentity+0x34>
    5306:	c7 01       	movw	r24, r14
    5308:	bb dd       	rcall	.-1162   	; 0x4e80 <lora_driver_setDeviceIdentifier>
    530a:	81 11       	cpse	r24, r1
    530c:	01 c0       	rjmp	.+2      	; 0x5310 <lora_driver_setOtaaIdentity+0x34>
    530e:	eb dd       	rcall	.-1066   	; 0x4ee6 <lora_driver_saveMac>
    5310:	df 91       	pop	r29
    5312:	cf 91       	pop	r28
    5314:	1f 91       	pop	r17
    5316:	0f 91       	pop	r16
    5318:	ff 90       	pop	r15
    531a:	ef 90       	pop	r14
    531c:	08 95       	ret

0000531e <lora_driver_mapReturnCodeToText>:
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	fc 01       	movw	r30, r24
    5322:	ee 0f       	add	r30, r30
    5324:	ff 1f       	adc	r31, r31
    5326:	8e 0f       	add	r24, r30
    5328:	9f 1f       	adc	r25, r31
    532a:	fc 01       	movw	r30, r24
    532c:	ec 5d       	subi	r30, 0xDC	; 220
    532e:	f7 4f       	sbci	r31, 0xF7	; 247
    5330:	81 81       	ldd	r24, Z+1	; 0x01
    5332:	92 81       	ldd	r25, Z+2	; 0x02
    5334:	08 95       	ret

00005336 <decode_port_no>:
    5336:	dc 01       	movw	r26, r24
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	29 f1       	breq	.+74     	; 0x5386 <decode_port_no+0x50>
    533c:	fb 01       	movw	r30, r22
    533e:	20 81       	ld	r18, Z
    5340:	fc 01       	movw	r30, r24
    5342:	01 90       	ld	r0, Z+
    5344:	00 20       	and	r0, r0
    5346:	e9 f7       	brne	.-6      	; 0x5342 <decode_port_no+0xc>
    5348:	31 97       	sbiw	r30, 0x01	; 1
    534a:	e8 1b       	sub	r30, r24
    534c:	f9 0b       	sbc	r31, r25
    534e:	82 2f       	mov	r24, r18
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	e8 17       	cp	r30, r24
    5354:	f9 07       	cpc	r31, r25
    5356:	c8 f0       	brcs	.+50     	; 0x538a <decode_port_no+0x54>
    5358:	80 e0       	ldi	r24, 0x00	; 0
    535a:	08 c0       	rjmp	.+16     	; 0x536c <decode_port_no+0x36>
    535c:	88 0f       	add	r24, r24
    535e:	38 2f       	mov	r19, r24
    5360:	33 0f       	add	r19, r19
    5362:	33 0f       	add	r19, r19
    5364:	83 0f       	add	r24, r19
    5366:	80 53       	subi	r24, 0x30	; 48
    5368:	89 0f       	add	r24, r25
    536a:	2f 5f       	subi	r18, 0xFF	; 255
    536c:	fd 01       	movw	r30, r26
    536e:	e2 0f       	add	r30, r18
    5370:	f1 1d       	adc	r31, r1
    5372:	90 81       	ld	r25, Z
    5374:	30 ed       	ldi	r19, 0xD0	; 208
    5376:	39 0f       	add	r19, r25
    5378:	3a 30       	cpi	r19, 0x0A	; 10
    537a:	10 f4       	brcc	.+4      	; 0x5380 <decode_port_no+0x4a>
    537c:	91 11       	cpse	r25, r1
    537e:	ee cf       	rjmp	.-36     	; 0x535c <decode_port_no+0x26>
    5380:	fb 01       	movw	r30, r22
    5382:	20 83       	st	Z, r18
    5384:	08 95       	ret
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	08 95       	ret
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	08 95       	ret

0000538e <decode_hexadecimal_string_bytes>:
    538e:	0f 93       	push	r16
    5390:	1f 93       	push	r17
    5392:	cf 93       	push	r28
    5394:	df 93       	push	r29
    5396:	dc 01       	movw	r26, r24
    5398:	ea 01       	movw	r28, r20
    539a:	20 97       	sbiw	r28, 0x00	; 0
    539c:	e1 f1       	breq	.+120    	; 0x5416 <decode_hexadecimal_string_bytes+0x88>
    539e:	fa 01       	movw	r30, r20
    53a0:	01 90       	ld	r0, Z+
    53a2:	00 20       	and	r0, r0
    53a4:	e9 f7       	brne	.-6      	; 0x53a0 <decode_hexadecimal_string_bytes+0x12>
    53a6:	31 97       	sbiw	r30, 0x01	; 1
    53a8:	e4 1b       	sub	r30, r20
    53aa:	f5 0b       	sbc	r31, r21
    53ac:	32 97       	sbiw	r30, 0x02	; 2
    53ae:	10 f5       	brcc	.+68     	; 0x53f4 <decode_hexadecimal_string_bytes+0x66>
    53b0:	32 c0       	rjmp	.+100    	; 0x5416 <decode_hexadecimal_string_bytes+0x88>
    53b2:	8d 01       	movw	r16, r26
    53b4:	04 0f       	add	r16, r20
    53b6:	15 1f       	adc	r17, r21
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	ae 01       	movw	r20, r28
    53bc:	42 0f       	add	r20, r18
    53be:	53 1f       	adc	r21, r19
    53c0:	fa 01       	movw	r30, r20
    53c2:	90 81       	ld	r25, Z
    53c4:	91 34       	cpi	r25, 0x41	; 65
    53c6:	28 f0       	brcs	.+10     	; 0x53d2 <decode_hexadecimal_string_bytes+0x44>
    53c8:	97 53       	subi	r25, 0x37	; 55
    53ca:	59 2f       	mov	r21, r25
    53cc:	52 95       	swap	r21
    53ce:	50 7f       	andi	r21, 0xF0	; 240
    53d0:	03 c0       	rjmp	.+6      	; 0x53d8 <decode_hexadecimal_string_bytes+0x4a>
    53d2:	59 2f       	mov	r21, r25
    53d4:	52 95       	swap	r21
    53d6:	50 7f       	andi	r21, 0xF0	; 240
    53d8:	2c 0f       	add	r18, r28
    53da:	3d 1f       	adc	r19, r29
    53dc:	f9 01       	movw	r30, r18
    53de:	91 81       	ldd	r25, Z+1	; 0x01
    53e0:	91 34       	cpi	r25, 0x41	; 65
    53e2:	10 f0       	brcs	.+4      	; 0x53e8 <decode_hexadecimal_string_bytes+0x5a>
    53e4:	97 53       	subi	r25, 0x37	; 55
    53e6:	01 c0       	rjmp	.+2      	; 0x53ea <decode_hexadecimal_string_bytes+0x5c>
    53e8:	90 53       	subi	r25, 0x30	; 48
    53ea:	95 0f       	add	r25, r21
    53ec:	f8 01       	movw	r30, r16
    53ee:	90 83       	st	Z, r25
    53f0:	8f 5f       	subi	r24, 0xFF	; 255
    53f2:	01 c0       	rjmp	.+2      	; 0x53f6 <decode_hexadecimal_string_bytes+0x68>
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	28 2f       	mov	r18, r24
    53f8:	22 0f       	add	r18, r18
    53fa:	48 2f       	mov	r20, r24
    53fc:	50 e0       	ldi	r21, 0x00	; 0
    53fe:	fe 01       	movw	r30, r28
    5400:	01 90       	ld	r0, Z+
    5402:	00 20       	and	r0, r0
    5404:	e9 f7       	brne	.-6      	; 0x5400 <decode_hexadecimal_string_bytes+0x72>
    5406:	31 97       	sbiw	r30, 0x01	; 1
    5408:	ec 1b       	sub	r30, r28
    540a:	fd 0b       	sbc	r31, r29
    540c:	4e 17       	cp	r20, r30
    540e:	5f 07       	cpc	r21, r31
    5410:	10 f4       	brcc	.+4      	; 0x5416 <decode_hexadecimal_string_bytes+0x88>
    5412:	86 13       	cpse	r24, r22
    5414:	ce cf       	rjmp	.-100    	; 0x53b2 <decode_hexadecimal_string_bytes+0x24>
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	1f 91       	pop	r17
    541c:	0f 91       	pop	r16
    541e:	08 95       	ret

00005420 <_serialCallBack>:
    5420:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <crc_sum.1945>
    5424:	86 0f       	add	r24, r22
    5426:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <crc_sum.1945>
    542a:	90 91 0a 15 	lds	r25, 0x150A	; 0x80150a <_mh_state>
    542e:	91 30       	cpi	r25, 0x01	; 1
    5430:	79 f0       	breq	.+30     	; 0x5450 <_serialCallBack+0x30>
    5432:	28 f0       	brcs	.+10     	; 0x543e <_serialCallBack+0x1e>
    5434:	92 30       	cpi	r25, 0x02	; 2
    5436:	a9 f0       	breq	.+42     	; 0x5462 <_serialCallBack+0x42>
    5438:	93 30       	cpi	r25, 0x03	; 3
    543a:	19 f1       	breq	.+70     	; 0x5482 <_serialCallBack+0x62>
    543c:	08 95       	ret
    543e:	6f 3f       	cpi	r22, 0xFF	; 255
    5440:	09 f0       	breq	.+2      	; 0x5444 <_serialCallBack+0x24>
    5442:	48 c0       	rjmp	.+144    	; 0x54d4 <_serialCallBack+0xb4>
    5444:	10 92 07 15 	sts	0x1507, r1	; 0x801507 <crc_sum.1945>
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <_mh_state>
    544e:	08 95       	ret
    5450:	66 38       	cpi	r22, 0x86	; 134
    5452:	09 f0       	breq	.+2      	; 0x5456 <_serialCallBack+0x36>
    5454:	3f c0       	rjmp	.+126    	; 0x54d4 <_serialCallBack+0xb4>
    5456:	10 92 06 15 	sts	0x1506, r1	; 0x801506 <inDex.1943>
    545a:	82 e0       	ldi	r24, 0x02	; 2
    545c:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <_mh_state>
    5460:	08 95       	ret
    5462:	e0 91 06 15 	lds	r30, 0x1506	; 0x801506 <inDex.1943>
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	8e 0f       	add	r24, r30
    546a:	80 93 06 15 	sts	0x1506, r24	; 0x801506 <inDex.1943>
    546e:	f0 e0       	ldi	r31, 0x00	; 0
    5470:	ec 5f       	subi	r30, 0xFC	; 252
    5472:	fa 4e       	sbci	r31, 0xEA	; 234
    5474:	60 83       	st	Z, r22
    5476:	82 30       	cpi	r24, 0x02	; 2
    5478:	69 f5       	brne	.+90     	; 0x54d4 <_serialCallBack+0xb4>
    547a:	83 e0       	ldi	r24, 0x03	; 3
    547c:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <_mh_state>
    5480:	08 95       	ret
    5482:	90 91 06 15 	lds	r25, 0x1506	; 0x801506 <inDex.1943>
    5486:	21 e0       	ldi	r18, 0x01	; 1
    5488:	29 0f       	add	r18, r25
    548a:	20 93 06 15 	sts	0x1506, r18	; 0x801506 <inDex.1943>
    548e:	96 30       	cpi	r25, 0x06	; 6
    5490:	09 f5       	brne	.+66     	; 0x54d4 <_serialCallBack+0xb4>
    5492:	81 11       	cpse	r24, r1
    5494:	0e c0       	rjmp	.+28     	; 0x54b2 <_serialCallBack+0x92>
    5496:	e4 e0       	ldi	r30, 0x04	; 4
    5498:	f5 e1       	ldi	r31, 0x15	; 21
    549a:	80 81       	ld	r24, Z
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	98 2f       	mov	r25, r24
    54a0:	88 27       	eor	r24, r24
    54a2:	21 81       	ldd	r18, Z+1	; 0x01
    54a4:	82 0f       	add	r24, r18
    54a6:	91 1d       	adc	r25, r1
    54a8:	90 93 0c 15 	sts	0x150C, r25	; 0x80150c <_ppm+0x1>
    54ac:	80 93 0b 15 	sts	0x150B, r24	; 0x80150b <_ppm>
    54b0:	04 c0       	rjmp	.+8      	; 0x54ba <_serialCallBack+0x9a>
    54b2:	10 92 0c 15 	sts	0x150C, r1	; 0x80150c <_ppm+0x1>
    54b6:	10 92 0b 15 	sts	0x150B, r1	; 0x80150b <_ppm>
    54ba:	10 92 0a 15 	sts	0x150A, r1	; 0x80150a <_mh_state>
    54be:	e0 91 08 15 	lds	r30, 0x1508	; 0x801508 <_appCallBack>
    54c2:	f0 91 09 15 	lds	r31, 0x1509	; 0x801509 <_appCallBack+0x1>
    54c6:	30 97       	sbiw	r30, 0x00	; 0
    54c8:	29 f0       	breq	.+10     	; 0x54d4 <_serialCallBack+0xb4>
    54ca:	80 91 0b 15 	lds	r24, 0x150B	; 0x80150b <_ppm>
    54ce:	90 91 0c 15 	lds	r25, 0x150C	; 0x80150c <_ppm+0x1>
    54d2:	19 95       	eicall
    54d4:	08 95       	ret

000054d6 <mh_z19_initialise>:
    54d6:	8f 92       	push	r8
    54d8:	9f 92       	push	r9
    54da:	af 92       	push	r10
    54dc:	cf 92       	push	r12
    54de:	ef 92       	push	r14
    54e0:	0f 93       	push	r16
    54e2:	0f 2e       	mov	r0, r31
    54e4:	f0 e1       	ldi	r31, 0x10	; 16
    54e6:	8f 2e       	mov	r8, r31
    54e8:	fa e2       	ldi	r31, 0x2A	; 42
    54ea:	9f 2e       	mov	r9, r31
    54ec:	f0 2d       	mov	r31, r0
    54ee:	68 94       	set
    54f0:	aa 24       	eor	r10, r10
    54f2:	a4 f8       	bld	r10, 4
    54f4:	68 94       	set
    54f6:	cc 24       	eor	r12, r12
    54f8:	c4 f8       	bld	r12, 4
    54fa:	e1 2c       	mov	r14, r1
    54fc:	00 e0       	ldi	r16, 0x00	; 0
    54fe:	23 e0       	ldi	r18, 0x03	; 3
    5500:	40 e8       	ldi	r20, 0x80	; 128
    5502:	55 e2       	ldi	r21, 0x25	; 37
    5504:	60 e0       	ldi	r22, 0x00	; 0
    5506:	70 e0       	ldi	r23, 0x00	; 0
    5508:	4b d0       	rcall	.+150    	; 0x55a0 <serial_create>
    550a:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <_serial+0x1>
    550e:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <_serial>
    5512:	0f 91       	pop	r16
    5514:	ef 90       	pop	r14
    5516:	cf 90       	pop	r12
    5518:	af 90       	pop	r10
    551a:	9f 90       	pop	r9
    551c:	8f 90       	pop	r8
    551e:	08 95       	ret

00005520 <mh_z19_takeMeassuring>:
    5520:	cf 93       	push	r28
    5522:	df 93       	push	r29
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
    5528:	29 97       	sbiw	r28, 0x09	; 9
    552a:	0f b6       	in	r0, 0x3f	; 63
    552c:	f8 94       	cli
    552e:	de bf       	out	0x3e, r29	; 62
    5530:	0f be       	out	0x3f, r0	; 63
    5532:	cd bf       	out	0x3d, r28	; 61
    5534:	89 e0       	ldi	r24, 0x09	; 9
    5536:	e2 e4       	ldi	r30, 0x42	; 66
    5538:	f2 e0       	ldi	r31, 0x02	; 2
    553a:	9e 01       	movw	r18, r28
    553c:	2f 5f       	subi	r18, 0xFF	; 255
    553e:	3f 4f       	sbci	r19, 0xFF	; 255
    5540:	d9 01       	movw	r26, r18
    5542:	01 90       	ld	r0, Z+
    5544:	0d 92       	st	X+, r0
    5546:	8a 95       	dec	r24
    5548:	e1 f7       	brne	.-8      	; 0x5542 <mh_z19_takeMeassuring+0x22>
    554a:	10 92 0c 15 	sts	0x150C, r1	; 0x80150c <_ppm+0x1>
    554e:	10 92 0b 15 	sts	0x150B, r1	; 0x80150b <_ppm>
    5552:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <_serial>
    5556:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <_serial+0x1>
    555a:	00 97       	sbiw	r24, 0x00	; 0
    555c:	31 f0       	breq	.+12     	; 0x556a <mh_z19_takeMeassuring+0x4a>
    555e:	42 2f       	mov	r20, r18
    5560:	53 2f       	mov	r21, r19
    5562:	69 e0       	ldi	r22, 0x09	; 9
    5564:	f0 d0       	rcall	.+480    	; 0x5746 <serial_sendBytes>
    5566:	80 e0       	ldi	r24, 0x00	; 0
    5568:	01 c0       	rjmp	.+2      	; 0x556c <mh_z19_takeMeassuring+0x4c>
    556a:	82 e0       	ldi	r24, 0x02	; 2
    556c:	29 96       	adiw	r28, 0x09	; 9
    556e:	0f b6       	in	r0, 0x3f	; 63
    5570:	f8 94       	cli
    5572:	de bf       	out	0x3e, r29	; 62
    5574:	0f be       	out	0x3f, r0	; 63
    5576:	cd bf       	out	0x3d, r28	; 61
    5578:	df 91       	pop	r29
    557a:	cf 91       	pop	r28
    557c:	08 95       	ret

0000557e <mh_z19_getCo2Ppm>:
    557e:	20 91 0b 15 	lds	r18, 0x150B	; 0x80150b <_ppm>
    5582:	30 91 0c 15 	lds	r19, 0x150C	; 0x80150c <_ppm+0x1>
    5586:	21 15       	cp	r18, r1
    5588:	31 05       	cpc	r19, r1
    558a:	29 f4       	brne	.+10     	; 0x5596 <mh_z19_getCo2Ppm+0x18>
    558c:	fc 01       	movw	r30, r24
    558e:	11 82       	std	Z+1, r1	; 0x01
    5590:	10 82       	st	Z, r1
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	08 95       	ret
    5596:	fc 01       	movw	r30, r24
    5598:	31 83       	std	Z+1, r19	; 0x01
    559a:	20 83       	st	Z, r18
    559c:	80 e0       	ldi	r24, 0x00	; 0
    559e:	08 95       	ret

000055a0 <serial_create>:
    55a0:	2f 92       	push	r2
    55a2:	3f 92       	push	r3
    55a4:	4f 92       	push	r4
    55a6:	5f 92       	push	r5
    55a8:	6f 92       	push	r6
    55aa:	7f 92       	push	r7
    55ac:	8f 92       	push	r8
    55ae:	9f 92       	push	r9
    55b0:	af 92       	push	r10
    55b2:	cf 92       	push	r12
    55b4:	ef 92       	push	r14
    55b6:	ff 92       	push	r15
    55b8:	0f 93       	push	r16
    55ba:	1f 93       	push	r17
    55bc:	cf 93       	push	r28
    55be:	df 93       	push	r29
    55c0:	cd b7       	in	r28, 0x3d	; 61
    55c2:	de b7       	in	r29, 0x3e	; 62
    55c4:	f8 2e       	mov	r15, r24
    55c6:	2a 01       	movw	r4, r20
    55c8:	3b 01       	movw	r6, r22
    55ca:	88 e0       	ldi	r24, 0x08	; 8
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <malloc>
    55d2:	8c 01       	movw	r16, r24
    55d4:	8f 2d       	mov	r24, r15
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	fc 01       	movw	r30, r24
    55da:	ee 0f       	add	r30, r30
    55dc:	ff 1f       	adc	r31, r31
    55de:	e1 5f       	subi	r30, 0xF1	; 241
    55e0:	fa 4e       	sbci	r31, 0xEA	; 234
    55e2:	11 83       	std	Z+1, r17	; 0x01
    55e4:	00 83       	st	Z, r16
    55e6:	01 15       	cp	r16, r1
    55e8:	11 05       	cpc	r17, r1
    55ea:	09 f4       	brne	.+2      	; 0x55ee <serial_create+0x4e>
    55ec:	6f c0       	rjmp	.+222    	; 0x56cc <serial_create+0x12c>
    55ee:	88 0f       	add	r24, r24
    55f0:	99 1f       	adc	r25, r25
    55f2:	fc 01       	movw	r30, r24
    55f4:	e5 5f       	subi	r30, 0xF5	; 245
    55f6:	fd 4f       	sbci	r31, 0xFD	; 253
    55f8:	80 81       	ld	r24, Z
    55fa:	91 81       	ldd	r25, Z+1	; 0x01
    55fc:	d8 01       	movw	r26, r16
    55fe:	8d 93       	st	X+, r24
    5600:	9c 93       	st	X, r25
    5602:	6c 2d       	mov	r22, r12
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	84 e0       	ldi	r24, 0x04	; 4
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
    560e:	1c 01       	movw	r2, r24
    5610:	61 e0       	ldi	r22, 0x01	; 1
    5612:	70 e0       	ldi	r23, 0x00	; 0
    5614:	86 e0       	ldi	r24, 0x06	; 6
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
    561c:	7c 01       	movw	r14, r24
    561e:	4c 2d       	mov	r20, r12
    5620:	b1 01       	movw	r22, r2
    5622:	0e 94 90 33 	call	0x6720	; 0x6720 <fifo_init>
    5626:	f8 01       	movw	r30, r16
    5628:	f5 82       	std	Z+5, r15	; 0x05
    562a:	e4 82       	std	Z+4, r14	; 0x04
    562c:	6a 2d       	mov	r22, r10
    562e:	70 e0       	ldi	r23, 0x00	; 0
    5630:	84 e0       	ldi	r24, 0x04	; 4
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
    5638:	1c 01       	movw	r2, r24
    563a:	61 e0       	ldi	r22, 0x01	; 1
    563c:	70 e0       	ldi	r23, 0x00	; 0
    563e:	86 e0       	ldi	r24, 0x06	; 6
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <calloc>
    5646:	7c 01       	movw	r14, r24
    5648:	4a 2d       	mov	r20, r10
    564a:	b1 01       	movw	r22, r2
    564c:	0e 94 90 33 	call	0x6720	; 0x6720 <fifo_init>
    5650:	d8 01       	movw	r26, r16
    5652:	13 96       	adiw	r26, 0x03	; 3
    5654:	fc 92       	st	X, r15
    5656:	ee 92       	st	-X, r14
    5658:	12 97       	sbiw	r26, 0x02	; 2
    565a:	17 96       	adiw	r26, 0x07	; 7
    565c:	9c 92       	st	X, r9
    565e:	8e 92       	st	-X, r8
    5660:	16 97       	sbiw	r26, 0x06	; 6
    5662:	ff b6       	in	r15, 0x3f	; 63
    5664:	f8 94       	cli
    5666:	ed 91       	ld	r30, X+
    5668:	fc 91       	ld	r31, X
    566a:	11 97       	sbiw	r26, 0x01	; 1
    566c:	36 97       	sbiw	r30, 0x06	; 6
    566e:	80 81       	ld	r24, Z
    5670:	82 60       	ori	r24, 0x02	; 2
    5672:	80 83       	st	Z, r24
    5674:	8d 90       	ld	r8, X+
    5676:	9c 90       	ld	r9, X
    5678:	c3 01       	movw	r24, r6
    567a:	b2 01       	movw	r22, r4
    567c:	0e 94 a1 22 	call	0x4542	; 0x4542 <__floatunsisf>
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	40 e0       	ldi	r20, 0x00	; 0
    5686:	51 e4       	ldi	r21, 0x41	; 65
    5688:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
    568c:	9b 01       	movw	r18, r22
    568e:	ac 01       	movw	r20, r24
    5690:	60 e0       	ldi	r22, 0x00	; 0
    5692:	74 e2       	ldi	r23, 0x24	; 36
    5694:	84 e7       	ldi	r24, 0x74	; 116
    5696:	9b e4       	ldi	r25, 0x4B	; 75
    5698:	0e 94 08 22 	call	0x4410	; 0x4410 <__divsf3>
    569c:	20 e0       	ldi	r18, 0x00	; 0
    569e:	30 e0       	ldi	r19, 0x00	; 0
    56a0:	40 e8       	ldi	r20, 0x80	; 128
    56a2:	5f e3       	ldi	r21, 0x3F	; 63
    56a4:	0e 94 a3 21 	call	0x4346	; 0x4346 <__subsf3>
    56a8:	0e 94 75 22 	call	0x44ea	; 0x44ea <__fixunssfsi>
    56ac:	f4 01       	movw	r30, r8
    56ae:	32 97       	sbiw	r30, 0x02	; 2
    56b0:	60 83       	st	Z, r22
    56b2:	d8 01       	movw	r26, r16
    56b4:	ed 91       	ld	r30, X+
    56b6:	fc 91       	ld	r31, X
    56b8:	11 97       	sbiw	r26, 0x01	; 1
    56ba:	35 97       	sbiw	r30, 0x05	; 5
    56bc:	88 e9       	ldi	r24, 0x98	; 152
    56be:	80 83       	st	Z, r24
    56c0:	ed 91       	ld	r30, X+
    56c2:	fc 91       	ld	r31, X
    56c4:	34 97       	sbiw	r30, 0x04	; 4
    56c6:	86 e0       	ldi	r24, 0x06	; 6
    56c8:	80 83       	st	Z, r24
    56ca:	ff be       	out	0x3f, r15	; 63
    56cc:	c8 01       	movw	r24, r16
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	1f 91       	pop	r17
    56d4:	0f 91       	pop	r16
    56d6:	ff 90       	pop	r15
    56d8:	ef 90       	pop	r14
    56da:	cf 90       	pop	r12
    56dc:	af 90       	pop	r10
    56de:	9f 90       	pop	r9
    56e0:	8f 90       	pop	r8
    56e2:	7f 90       	pop	r7
    56e4:	6f 90       	pop	r6
    56e6:	5f 90       	pop	r5
    56e8:	4f 90       	pop	r4
    56ea:	3f 90       	pop	r3
    56ec:	2f 90       	pop	r2
    56ee:	08 95       	ret

000056f0 <serial_sendByte>:
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	dc 01       	movw	r26, r24
    56f6:	89 2b       	or	r24, r25
    56f8:	01 f1       	breq	.+64     	; 0x573a <serial_sendByte+0x4a>
    56fa:	12 96       	adiw	r26, 0x02	; 2
    56fc:	ed 91       	ld	r30, X+
    56fe:	fc 91       	ld	r31, X
    5700:	13 97       	sbiw	r26, 0x03	; 3
    5702:	93 81       	ldd	r25, Z+3	; 0x03
    5704:	82 81       	ldd	r24, Z+2	; 0x02
    5706:	25 81       	ldd	r18, Z+5	; 0x05
    5708:	98 1b       	sub	r25, r24
    570a:	92 23       	and	r25, r18
    570c:	84 81       	ldd	r24, Z+4	; 0x04
    570e:	98 17       	cp	r25, r24
    5710:	b1 f0       	breq	.+44     	; 0x573e <serial_sendByte+0x4e>
    5712:	83 81       	ldd	r24, Z+3	; 0x03
    5714:	26 95       	lsr	r18
    5716:	28 23       	and	r18, r24
    5718:	c0 81       	ld	r28, Z
    571a:	d1 81       	ldd	r29, Z+1	; 0x01
    571c:	c2 0f       	add	r28, r18
    571e:	d1 1d       	adc	r29, r1
    5720:	68 83       	st	Y, r22
    5722:	8f 5f       	subi	r24, 0xFF	; 255
    5724:	95 81       	ldd	r25, Z+5	; 0x05
    5726:	89 23       	and	r24, r25
    5728:	83 83       	std	Z+3, r24	; 0x03
    572a:	ed 91       	ld	r30, X+
    572c:	fc 91       	ld	r31, X
    572e:	35 97       	sbiw	r30, 0x05	; 5
    5730:	80 81       	ld	r24, Z
    5732:	80 62       	ori	r24, 0x20	; 32
    5734:	80 83       	st	Z, r24
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	03 c0       	rjmp	.+6      	; 0x5740 <serial_sendByte+0x50>
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	01 c0       	rjmp	.+2      	; 0x5740 <serial_sendByte+0x50>
    573e:	82 e0       	ldi	r24, 0x02	; 2
    5740:	df 91       	pop	r29
    5742:	cf 91       	pop	r28
    5744:	08 95       	ret

00005746 <serial_sendBytes>:
    5746:	ef 92       	push	r14
    5748:	ff 92       	push	r15
    574a:	0f 93       	push	r16
    574c:	1f 93       	push	r17
    574e:	cf 93       	push	r28
    5750:	df 93       	push	r29
    5752:	7c 01       	movw	r14, r24
    5754:	00 97       	sbiw	r24, 0x00	; 0
    5756:	09 f4       	brne	.+2      	; 0x575a <serial_sendBytes+0x14>
    5758:	41 c0       	rjmp	.+130    	; 0x57dc <serial_sendBytes+0x96>
    575a:	dc 01       	movw	r26, r24
    575c:	12 96       	adiw	r26, 0x02	; 2
    575e:	ed 91       	ld	r30, X+
    5760:	fc 91       	ld	r31, X
    5762:	13 97       	sbiw	r26, 0x03	; 3
    5764:	93 81       	ldd	r25, Z+3	; 0x03
    5766:	82 81       	ldd	r24, Z+2	; 0x02
    5768:	98 1b       	sub	r25, r24
    576a:	85 81       	ldd	r24, Z+5	; 0x05
    576c:	98 23       	and	r25, r24
    576e:	84 81       	ldd	r24, Z+4	; 0x04
    5770:	89 1b       	sub	r24, r25
    5772:	86 17       	cp	r24, r22
    5774:	a8 f1       	brcs	.+106    	; 0x57e0 <serial_sendBytes+0x9a>
    5776:	66 23       	and	r22, r22
    5778:	41 f1       	breq	.+80     	; 0x57ca <serial_sendBytes+0x84>
    577a:	84 2f       	mov	r24, r20
    577c:	95 2f       	mov	r25, r21
    577e:	dc 01       	movw	r26, r24
    5780:	61 50       	subi	r22, 0x01	; 1
    5782:	46 2f       	mov	r20, r22
    5784:	50 e0       	ldi	r21, 0x00	; 0
    5786:	4f 5f       	subi	r20, 0xFF	; 255
    5788:	5f 4f       	sbci	r21, 0xFF	; 255
    578a:	48 0f       	add	r20, r24
    578c:	59 1f       	adc	r21, r25
    578e:	e7 01       	movw	r28, r14
    5790:	ea 81       	ldd	r30, Y+2	; 0x02
    5792:	fb 81       	ldd	r31, Y+3	; 0x03
    5794:	93 81       	ldd	r25, Z+3	; 0x03
    5796:	82 81       	ldd	r24, Z+2	; 0x02
    5798:	25 81       	ldd	r18, Z+5	; 0x05
    579a:	98 1b       	sub	r25, r24
    579c:	92 23       	and	r25, r18
    579e:	84 81       	ldd	r24, Z+4	; 0x04
    57a0:	98 17       	cp	r25, r24
    57a2:	79 f0       	breq	.+30     	; 0x57c2 <serial_sendBytes+0x7c>
    57a4:	8c 91       	ld	r24, X
    57a6:	93 81       	ldd	r25, Z+3	; 0x03
    57a8:	26 95       	lsr	r18
    57aa:	29 23       	and	r18, r25
    57ac:	60 81       	ld	r22, Z
    57ae:	71 81       	ldd	r23, Z+1	; 0x01
    57b0:	8b 01       	movw	r16, r22
    57b2:	02 0f       	add	r16, r18
    57b4:	11 1d       	adc	r17, r1
    57b6:	e8 01       	movw	r28, r16
    57b8:	88 83       	st	Y, r24
    57ba:	9f 5f       	subi	r25, 0xFF	; 255
    57bc:	85 81       	ldd	r24, Z+5	; 0x05
    57be:	98 23       	and	r25, r24
    57c0:	93 83       	std	Z+3, r25	; 0x03
    57c2:	11 96       	adiw	r26, 0x01	; 1
    57c4:	a4 17       	cp	r26, r20
    57c6:	b5 07       	cpc	r27, r21
    57c8:	11 f7       	brne	.-60     	; 0x578e <serial_sendBytes+0x48>
    57ca:	d7 01       	movw	r26, r14
    57cc:	ed 91       	ld	r30, X+
    57ce:	fc 91       	ld	r31, X
    57d0:	35 97       	sbiw	r30, 0x05	; 5
    57d2:	80 81       	ld	r24, Z
    57d4:	80 62       	ori	r24, 0x20	; 32
    57d6:	80 83       	st	Z, r24
    57d8:	80 e0       	ldi	r24, 0x00	; 0
    57da:	03 c0       	rjmp	.+6      	; 0x57e2 <serial_sendBytes+0x9c>
    57dc:	81 e0       	ldi	r24, 0x01	; 1
    57de:	01 c0       	rjmp	.+2      	; 0x57e2 <serial_sendBytes+0x9c>
    57e0:	82 e0       	ldi	r24, 0x02	; 2
    57e2:	df 91       	pop	r29
    57e4:	cf 91       	pop	r28
    57e6:	1f 91       	pop	r17
    57e8:	0f 91       	pop	r16
    57ea:	ff 90       	pop	r15
    57ec:	ef 90       	pop	r14
    57ee:	08 95       	ret

000057f0 <serial_getByte>:
    57f0:	00 97       	sbiw	r24, 0x00	; 0
    57f2:	d1 f0       	breq	.+52     	; 0x5828 <serial_getByte+0x38>
    57f4:	dc 01       	movw	r26, r24
    57f6:	14 96       	adiw	r26, 0x04	; 4
    57f8:	ed 91       	ld	r30, X+
    57fa:	fc 91       	ld	r31, X
    57fc:	15 97       	sbiw	r26, 0x05	; 5
    57fe:	93 81       	ldd	r25, Z+3	; 0x03
    5800:	82 81       	ldd	r24, Z+2	; 0x02
    5802:	98 17       	cp	r25, r24
    5804:	99 f0       	breq	.+38     	; 0x582c <serial_getByte+0x3c>
    5806:	92 81       	ldd	r25, Z+2	; 0x02
    5808:	85 81       	ldd	r24, Z+5	; 0x05
    580a:	86 95       	lsr	r24
    580c:	89 23       	and	r24, r25
    580e:	a0 81       	ld	r26, Z
    5810:	b1 81       	ldd	r27, Z+1	; 0x01
    5812:	a8 0f       	add	r26, r24
    5814:	b1 1d       	adc	r27, r1
    5816:	8c 91       	ld	r24, X
    5818:	db 01       	movw	r26, r22
    581a:	8c 93       	st	X, r24
    581c:	9f 5f       	subi	r25, 0xFF	; 255
    581e:	85 81       	ldd	r24, Z+5	; 0x05
    5820:	98 23       	and	r25, r24
    5822:	92 83       	std	Z+2, r25	; 0x02
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	08 95       	ret
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	08 95       	ret
    582c:	83 e0       	ldi	r24, 0x03	; 3
    582e:	08 95       	ret

00005830 <__vector_25>:
    5830:	1f 92       	push	r1
    5832:	0f 92       	push	r0
    5834:	0f b6       	in	r0, 0x3f	; 63
    5836:	0f 92       	push	r0
    5838:	11 24       	eor	r1, r1
    583a:	0b b6       	in	r0, 0x3b	; 59
    583c:	0f 92       	push	r0
    583e:	2f 93       	push	r18
    5840:	3f 93       	push	r19
    5842:	4f 93       	push	r20
    5844:	5f 93       	push	r21
    5846:	6f 93       	push	r22
    5848:	7f 93       	push	r23
    584a:	8f 93       	push	r24
    584c:	9f 93       	push	r25
    584e:	af 93       	push	r26
    5850:	bf 93       	push	r27
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
    5856:	ef 93       	push	r30
    5858:	ff 93       	push	r31
    585a:	a0 91 0f 15 	lds	r26, 0x150F	; 0x80150f <_ser_handle>
    585e:	b0 91 10 15 	lds	r27, 0x1510	; 0x801510 <_ser_handle+0x1>
    5862:	10 97       	sbiw	r26, 0x00	; 0
    5864:	11 f1       	breq	.+68     	; 0x58aa <__vector_25+0x7a>
    5866:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    586a:	14 96       	adiw	r26, 0x04	; 4
    586c:	ed 91       	ld	r30, X+
    586e:	fc 91       	ld	r31, X
    5870:	15 97       	sbiw	r26, 0x05	; 5
    5872:	93 81       	ldd	r25, Z+3	; 0x03
    5874:	82 81       	ldd	r24, Z+2	; 0x02
    5876:	25 81       	ldd	r18, Z+5	; 0x05
    5878:	98 1b       	sub	r25, r24
    587a:	92 23       	and	r25, r18
    587c:	84 81       	ldd	r24, Z+4	; 0x04
    587e:	98 17       	cp	r25, r24
    5880:	61 f0       	breq	.+24     	; 0x589a <__vector_25+0x6a>
    5882:	83 81       	ldd	r24, Z+3	; 0x03
    5884:	26 95       	lsr	r18
    5886:	28 23       	and	r18, r24
    5888:	c0 81       	ld	r28, Z
    588a:	d1 81       	ldd	r29, Z+1	; 0x01
    588c:	c2 0f       	add	r28, r18
    588e:	d1 1d       	adc	r29, r1
    5890:	68 83       	st	Y, r22
    5892:	8f 5f       	subi	r24, 0xFF	; 255
    5894:	95 81       	ldd	r25, Z+5	; 0x05
    5896:	89 23       	and	r24, r25
    5898:	83 83       	std	Z+3, r24	; 0x03
    589a:	16 96       	adiw	r26, 0x06	; 6
    589c:	ed 91       	ld	r30, X+
    589e:	fc 91       	ld	r31, X
    58a0:	17 97       	sbiw	r26, 0x07	; 7
    58a2:	30 97       	sbiw	r30, 0x00	; 0
    58a4:	11 f0       	breq	.+4      	; 0x58aa <__vector_25+0x7a>
    58a6:	cd 01       	movw	r24, r26
    58a8:	19 95       	eicall
    58aa:	ff 91       	pop	r31
    58ac:	ef 91       	pop	r30
    58ae:	df 91       	pop	r29
    58b0:	cf 91       	pop	r28
    58b2:	bf 91       	pop	r27
    58b4:	af 91       	pop	r26
    58b6:	9f 91       	pop	r25
    58b8:	8f 91       	pop	r24
    58ba:	7f 91       	pop	r23
    58bc:	6f 91       	pop	r22
    58be:	5f 91       	pop	r21
    58c0:	4f 91       	pop	r20
    58c2:	3f 91       	pop	r19
    58c4:	2f 91       	pop	r18
    58c6:	0f 90       	pop	r0
    58c8:	0b be       	out	0x3b, r0	; 59
    58ca:	0f 90       	pop	r0
    58cc:	0f be       	out	0x3f, r0	; 63
    58ce:	0f 90       	pop	r0
    58d0:	1f 90       	pop	r1
    58d2:	18 95       	reti

000058d4 <__vector_26>:
    58d4:	1f 92       	push	r1
    58d6:	0f 92       	push	r0
    58d8:	0f b6       	in	r0, 0x3f	; 63
    58da:	0f 92       	push	r0
    58dc:	11 24       	eor	r1, r1
    58de:	0b b6       	in	r0, 0x3b	; 59
    58e0:	0f 92       	push	r0
    58e2:	2f 93       	push	r18
    58e4:	8f 93       	push	r24
    58e6:	9f 93       	push	r25
    58e8:	af 93       	push	r26
    58ea:	bf 93       	push	r27
    58ec:	ef 93       	push	r30
    58ee:	ff 93       	push	r31
    58f0:	e0 91 0f 15 	lds	r30, 0x150F	; 0x80150f <_ser_handle>
    58f4:	f0 91 10 15 	lds	r31, 0x1510	; 0x801510 <_ser_handle+0x1>
    58f8:	30 97       	sbiw	r30, 0x00	; 0
    58fa:	b9 f0       	breq	.+46     	; 0x592a <__vector_26+0x56>
    58fc:	02 80       	ldd	r0, Z+2	; 0x02
    58fe:	f3 81       	ldd	r31, Z+3	; 0x03
    5900:	e0 2d       	mov	r30, r0
    5902:	93 81       	ldd	r25, Z+3	; 0x03
    5904:	82 81       	ldd	r24, Z+2	; 0x02
    5906:	98 17       	cp	r25, r24
    5908:	b1 f0       	breq	.+44     	; 0x5936 <__vector_26+0x62>
    590a:	92 81       	ldd	r25, Z+2	; 0x02
    590c:	85 81       	ldd	r24, Z+5	; 0x05
    590e:	28 2f       	mov	r18, r24
    5910:	26 95       	lsr	r18
    5912:	29 23       	and	r18, r25
    5914:	a0 81       	ld	r26, Z
    5916:	b1 81       	ldd	r27, Z+1	; 0x01
    5918:	a2 0f       	add	r26, r18
    591a:	b1 1d       	adc	r27, r1
    591c:	2c 91       	ld	r18, X
    591e:	9f 5f       	subi	r25, 0xFF	; 255
    5920:	89 23       	and	r24, r25
    5922:	82 83       	std	Z+2, r24	; 0x02
    5924:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5928:	0b c0       	rjmp	.+22     	; 0x5940 <__vector_26+0x6c>
    592a:	e1 ec       	ldi	r30, 0xC1	; 193
    592c:	f0 e0       	ldi	r31, 0x00	; 0
    592e:	80 81       	ld	r24, Z
    5930:	8f 7d       	andi	r24, 0xDF	; 223
    5932:	80 83       	st	Z, r24
    5934:	05 c0       	rjmp	.+10     	; 0x5940 <__vector_26+0x6c>
    5936:	e1 ec       	ldi	r30, 0xC1	; 193
    5938:	f0 e0       	ldi	r31, 0x00	; 0
    593a:	80 81       	ld	r24, Z
    593c:	8f 7d       	andi	r24, 0xDF	; 223
    593e:	80 83       	st	Z, r24
    5940:	ff 91       	pop	r31
    5942:	ef 91       	pop	r30
    5944:	bf 91       	pop	r27
    5946:	af 91       	pop	r26
    5948:	9f 91       	pop	r25
    594a:	8f 91       	pop	r24
    594c:	2f 91       	pop	r18
    594e:	0f 90       	pop	r0
    5950:	0b be       	out	0x3b, r0	; 59
    5952:	0f 90       	pop	r0
    5954:	0f be       	out	0x3f, r0	; 63
    5956:	0f 90       	pop	r0
    5958:	1f 90       	pop	r1
    595a:	18 95       	reti

0000595c <__vector_36>:
    595c:	1f 92       	push	r1
    595e:	0f 92       	push	r0
    5960:	0f b6       	in	r0, 0x3f	; 63
    5962:	0f 92       	push	r0
    5964:	11 24       	eor	r1, r1
    5966:	0b b6       	in	r0, 0x3b	; 59
    5968:	0f 92       	push	r0
    596a:	2f 93       	push	r18
    596c:	3f 93       	push	r19
    596e:	4f 93       	push	r20
    5970:	5f 93       	push	r21
    5972:	6f 93       	push	r22
    5974:	7f 93       	push	r23
    5976:	8f 93       	push	r24
    5978:	9f 93       	push	r25
    597a:	af 93       	push	r26
    597c:	bf 93       	push	r27
    597e:	cf 93       	push	r28
    5980:	df 93       	push	r29
    5982:	ef 93       	push	r30
    5984:	ff 93       	push	r31
    5986:	a0 91 11 15 	lds	r26, 0x1511	; 0x801511 <_ser_handle+0x2>
    598a:	b0 91 12 15 	lds	r27, 0x1512	; 0x801512 <_ser_handle+0x3>
    598e:	10 97       	sbiw	r26, 0x00	; 0
    5990:	11 f1       	breq	.+68     	; 0x59d6 <__vector_36+0x7a>
    5992:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5996:	14 96       	adiw	r26, 0x04	; 4
    5998:	ed 91       	ld	r30, X+
    599a:	fc 91       	ld	r31, X
    599c:	15 97       	sbiw	r26, 0x05	; 5
    599e:	93 81       	ldd	r25, Z+3	; 0x03
    59a0:	82 81       	ldd	r24, Z+2	; 0x02
    59a2:	25 81       	ldd	r18, Z+5	; 0x05
    59a4:	98 1b       	sub	r25, r24
    59a6:	92 23       	and	r25, r18
    59a8:	84 81       	ldd	r24, Z+4	; 0x04
    59aa:	98 17       	cp	r25, r24
    59ac:	61 f0       	breq	.+24     	; 0x59c6 <__vector_36+0x6a>
    59ae:	83 81       	ldd	r24, Z+3	; 0x03
    59b0:	26 95       	lsr	r18
    59b2:	28 23       	and	r18, r24
    59b4:	c0 81       	ld	r28, Z
    59b6:	d1 81       	ldd	r29, Z+1	; 0x01
    59b8:	c2 0f       	add	r28, r18
    59ba:	d1 1d       	adc	r29, r1
    59bc:	68 83       	st	Y, r22
    59be:	8f 5f       	subi	r24, 0xFF	; 255
    59c0:	95 81       	ldd	r25, Z+5	; 0x05
    59c2:	89 23       	and	r24, r25
    59c4:	83 83       	std	Z+3, r24	; 0x03
    59c6:	16 96       	adiw	r26, 0x06	; 6
    59c8:	ed 91       	ld	r30, X+
    59ca:	fc 91       	ld	r31, X
    59cc:	17 97       	sbiw	r26, 0x07	; 7
    59ce:	30 97       	sbiw	r30, 0x00	; 0
    59d0:	11 f0       	breq	.+4      	; 0x59d6 <__vector_36+0x7a>
    59d2:	cd 01       	movw	r24, r26
    59d4:	19 95       	eicall
    59d6:	ff 91       	pop	r31
    59d8:	ef 91       	pop	r30
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	bf 91       	pop	r27
    59e0:	af 91       	pop	r26
    59e2:	9f 91       	pop	r25
    59e4:	8f 91       	pop	r24
    59e6:	7f 91       	pop	r23
    59e8:	6f 91       	pop	r22
    59ea:	5f 91       	pop	r21
    59ec:	4f 91       	pop	r20
    59ee:	3f 91       	pop	r19
    59f0:	2f 91       	pop	r18
    59f2:	0f 90       	pop	r0
    59f4:	0b be       	out	0x3b, r0	; 59
    59f6:	0f 90       	pop	r0
    59f8:	0f be       	out	0x3f, r0	; 63
    59fa:	0f 90       	pop	r0
    59fc:	1f 90       	pop	r1
    59fe:	18 95       	reti

00005a00 <__vector_37>:
    5a00:	1f 92       	push	r1
    5a02:	0f 92       	push	r0
    5a04:	0f b6       	in	r0, 0x3f	; 63
    5a06:	0f 92       	push	r0
    5a08:	11 24       	eor	r1, r1
    5a0a:	0b b6       	in	r0, 0x3b	; 59
    5a0c:	0f 92       	push	r0
    5a0e:	2f 93       	push	r18
    5a10:	8f 93       	push	r24
    5a12:	9f 93       	push	r25
    5a14:	af 93       	push	r26
    5a16:	bf 93       	push	r27
    5a18:	ef 93       	push	r30
    5a1a:	ff 93       	push	r31
    5a1c:	e0 91 11 15 	lds	r30, 0x1511	; 0x801511 <_ser_handle+0x2>
    5a20:	f0 91 12 15 	lds	r31, 0x1512	; 0x801512 <_ser_handle+0x3>
    5a24:	30 97       	sbiw	r30, 0x00	; 0
    5a26:	b9 f0       	breq	.+46     	; 0x5a56 <__vector_37+0x56>
    5a28:	02 80       	ldd	r0, Z+2	; 0x02
    5a2a:	f3 81       	ldd	r31, Z+3	; 0x03
    5a2c:	e0 2d       	mov	r30, r0
    5a2e:	93 81       	ldd	r25, Z+3	; 0x03
    5a30:	82 81       	ldd	r24, Z+2	; 0x02
    5a32:	98 17       	cp	r25, r24
    5a34:	b1 f0       	breq	.+44     	; 0x5a62 <__vector_37+0x62>
    5a36:	92 81       	ldd	r25, Z+2	; 0x02
    5a38:	85 81       	ldd	r24, Z+5	; 0x05
    5a3a:	28 2f       	mov	r18, r24
    5a3c:	26 95       	lsr	r18
    5a3e:	29 23       	and	r18, r25
    5a40:	a0 81       	ld	r26, Z
    5a42:	b1 81       	ldd	r27, Z+1	; 0x01
    5a44:	a2 0f       	add	r26, r18
    5a46:	b1 1d       	adc	r27, r1
    5a48:	2c 91       	ld	r18, X
    5a4a:	9f 5f       	subi	r25, 0xFF	; 255
    5a4c:	89 23       	and	r24, r25
    5a4e:	82 83       	std	Z+2, r24	; 0x02
    5a50:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5a54:	0b c0       	rjmp	.+22     	; 0x5a6c <__vector_37+0x6c>
    5a56:	e9 ec       	ldi	r30, 0xC9	; 201
    5a58:	f0 e0       	ldi	r31, 0x00	; 0
    5a5a:	80 81       	ld	r24, Z
    5a5c:	8f 7d       	andi	r24, 0xDF	; 223
    5a5e:	80 83       	st	Z, r24
    5a60:	05 c0       	rjmp	.+10     	; 0x5a6c <__vector_37+0x6c>
    5a62:	e9 ec       	ldi	r30, 0xC9	; 201
    5a64:	f0 e0       	ldi	r31, 0x00	; 0
    5a66:	80 81       	ld	r24, Z
    5a68:	8f 7d       	andi	r24, 0xDF	; 223
    5a6a:	80 83       	st	Z, r24
    5a6c:	ff 91       	pop	r31
    5a6e:	ef 91       	pop	r30
    5a70:	bf 91       	pop	r27
    5a72:	af 91       	pop	r26
    5a74:	9f 91       	pop	r25
    5a76:	8f 91       	pop	r24
    5a78:	2f 91       	pop	r18
    5a7a:	0f 90       	pop	r0
    5a7c:	0b be       	out	0x3b, r0	; 59
    5a7e:	0f 90       	pop	r0
    5a80:	0f be       	out	0x3f, r0	; 63
    5a82:	0f 90       	pop	r0
    5a84:	1f 90       	pop	r1
    5a86:	18 95       	reti

00005a88 <__vector_51>:
    5a88:	1f 92       	push	r1
    5a8a:	0f 92       	push	r0
    5a8c:	0f b6       	in	r0, 0x3f	; 63
    5a8e:	0f 92       	push	r0
    5a90:	11 24       	eor	r1, r1
    5a92:	0b b6       	in	r0, 0x3b	; 59
    5a94:	0f 92       	push	r0
    5a96:	2f 93       	push	r18
    5a98:	3f 93       	push	r19
    5a9a:	4f 93       	push	r20
    5a9c:	5f 93       	push	r21
    5a9e:	6f 93       	push	r22
    5aa0:	7f 93       	push	r23
    5aa2:	8f 93       	push	r24
    5aa4:	9f 93       	push	r25
    5aa6:	af 93       	push	r26
    5aa8:	bf 93       	push	r27
    5aaa:	cf 93       	push	r28
    5aac:	df 93       	push	r29
    5aae:	ef 93       	push	r30
    5ab0:	ff 93       	push	r31
    5ab2:	a0 91 13 15 	lds	r26, 0x1513	; 0x801513 <_ser_handle+0x4>
    5ab6:	b0 91 14 15 	lds	r27, 0x1514	; 0x801514 <_ser_handle+0x5>
    5aba:	10 97       	sbiw	r26, 0x00	; 0
    5abc:	11 f1       	breq	.+68     	; 0x5b02 <__vector_51+0x7a>
    5abe:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5ac2:	14 96       	adiw	r26, 0x04	; 4
    5ac4:	ed 91       	ld	r30, X+
    5ac6:	fc 91       	ld	r31, X
    5ac8:	15 97       	sbiw	r26, 0x05	; 5
    5aca:	93 81       	ldd	r25, Z+3	; 0x03
    5acc:	82 81       	ldd	r24, Z+2	; 0x02
    5ace:	25 81       	ldd	r18, Z+5	; 0x05
    5ad0:	98 1b       	sub	r25, r24
    5ad2:	92 23       	and	r25, r18
    5ad4:	84 81       	ldd	r24, Z+4	; 0x04
    5ad6:	98 17       	cp	r25, r24
    5ad8:	61 f0       	breq	.+24     	; 0x5af2 <__vector_51+0x6a>
    5ada:	83 81       	ldd	r24, Z+3	; 0x03
    5adc:	26 95       	lsr	r18
    5ade:	28 23       	and	r18, r24
    5ae0:	c0 81       	ld	r28, Z
    5ae2:	d1 81       	ldd	r29, Z+1	; 0x01
    5ae4:	c2 0f       	add	r28, r18
    5ae6:	d1 1d       	adc	r29, r1
    5ae8:	68 83       	st	Y, r22
    5aea:	8f 5f       	subi	r24, 0xFF	; 255
    5aec:	95 81       	ldd	r25, Z+5	; 0x05
    5aee:	89 23       	and	r24, r25
    5af0:	83 83       	std	Z+3, r24	; 0x03
    5af2:	16 96       	adiw	r26, 0x06	; 6
    5af4:	ed 91       	ld	r30, X+
    5af6:	fc 91       	ld	r31, X
    5af8:	17 97       	sbiw	r26, 0x07	; 7
    5afa:	30 97       	sbiw	r30, 0x00	; 0
    5afc:	11 f0       	breq	.+4      	; 0x5b02 <__vector_51+0x7a>
    5afe:	cd 01       	movw	r24, r26
    5b00:	19 95       	eicall
    5b02:	ff 91       	pop	r31
    5b04:	ef 91       	pop	r30
    5b06:	df 91       	pop	r29
    5b08:	cf 91       	pop	r28
    5b0a:	bf 91       	pop	r27
    5b0c:	af 91       	pop	r26
    5b0e:	9f 91       	pop	r25
    5b10:	8f 91       	pop	r24
    5b12:	7f 91       	pop	r23
    5b14:	6f 91       	pop	r22
    5b16:	5f 91       	pop	r21
    5b18:	4f 91       	pop	r20
    5b1a:	3f 91       	pop	r19
    5b1c:	2f 91       	pop	r18
    5b1e:	0f 90       	pop	r0
    5b20:	0b be       	out	0x3b, r0	; 59
    5b22:	0f 90       	pop	r0
    5b24:	0f be       	out	0x3f, r0	; 63
    5b26:	0f 90       	pop	r0
    5b28:	1f 90       	pop	r1
    5b2a:	18 95       	reti

00005b2c <__vector_52>:
    5b2c:	1f 92       	push	r1
    5b2e:	0f 92       	push	r0
    5b30:	0f b6       	in	r0, 0x3f	; 63
    5b32:	0f 92       	push	r0
    5b34:	11 24       	eor	r1, r1
    5b36:	0b b6       	in	r0, 0x3b	; 59
    5b38:	0f 92       	push	r0
    5b3a:	2f 93       	push	r18
    5b3c:	8f 93       	push	r24
    5b3e:	9f 93       	push	r25
    5b40:	af 93       	push	r26
    5b42:	bf 93       	push	r27
    5b44:	ef 93       	push	r30
    5b46:	ff 93       	push	r31
    5b48:	e0 91 13 15 	lds	r30, 0x1513	; 0x801513 <_ser_handle+0x4>
    5b4c:	f0 91 14 15 	lds	r31, 0x1514	; 0x801514 <_ser_handle+0x5>
    5b50:	30 97       	sbiw	r30, 0x00	; 0
    5b52:	b9 f0       	breq	.+46     	; 0x5b82 <__vector_52+0x56>
    5b54:	02 80       	ldd	r0, Z+2	; 0x02
    5b56:	f3 81       	ldd	r31, Z+3	; 0x03
    5b58:	e0 2d       	mov	r30, r0
    5b5a:	93 81       	ldd	r25, Z+3	; 0x03
    5b5c:	82 81       	ldd	r24, Z+2	; 0x02
    5b5e:	98 17       	cp	r25, r24
    5b60:	b1 f0       	breq	.+44     	; 0x5b8e <__vector_52+0x62>
    5b62:	92 81       	ldd	r25, Z+2	; 0x02
    5b64:	85 81       	ldd	r24, Z+5	; 0x05
    5b66:	28 2f       	mov	r18, r24
    5b68:	26 95       	lsr	r18
    5b6a:	29 23       	and	r18, r25
    5b6c:	a0 81       	ld	r26, Z
    5b6e:	b1 81       	ldd	r27, Z+1	; 0x01
    5b70:	a2 0f       	add	r26, r18
    5b72:	b1 1d       	adc	r27, r1
    5b74:	2c 91       	ld	r18, X
    5b76:	9f 5f       	subi	r25, 0xFF	; 255
    5b78:	89 23       	and	r24, r25
    5b7a:	82 83       	std	Z+2, r24	; 0x02
    5b7c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5b80:	0b c0       	rjmp	.+22     	; 0x5b98 <__vector_52+0x6c>
    5b82:	e1 ed       	ldi	r30, 0xD1	; 209
    5b84:	f0 e0       	ldi	r31, 0x00	; 0
    5b86:	80 81       	ld	r24, Z
    5b88:	8f 7d       	andi	r24, 0xDF	; 223
    5b8a:	80 83       	st	Z, r24
    5b8c:	05 c0       	rjmp	.+10     	; 0x5b98 <__vector_52+0x6c>
    5b8e:	e1 ed       	ldi	r30, 0xD1	; 209
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	80 81       	ld	r24, Z
    5b94:	8f 7d       	andi	r24, 0xDF	; 223
    5b96:	80 83       	st	Z, r24
    5b98:	ff 91       	pop	r31
    5b9a:	ef 91       	pop	r30
    5b9c:	bf 91       	pop	r27
    5b9e:	af 91       	pop	r26
    5ba0:	9f 91       	pop	r25
    5ba2:	8f 91       	pop	r24
    5ba4:	2f 91       	pop	r18
    5ba6:	0f 90       	pop	r0
    5ba8:	0b be       	out	0x3b, r0	; 59
    5baa:	0f 90       	pop	r0
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	0f 90       	pop	r0
    5bb0:	1f 90       	pop	r1
    5bb2:	18 95       	reti

00005bb4 <__vector_54>:
    5bb4:	1f 92       	push	r1
    5bb6:	0f 92       	push	r0
    5bb8:	0f b6       	in	r0, 0x3f	; 63
    5bba:	0f 92       	push	r0
    5bbc:	11 24       	eor	r1, r1
    5bbe:	0b b6       	in	r0, 0x3b	; 59
    5bc0:	0f 92       	push	r0
    5bc2:	2f 93       	push	r18
    5bc4:	3f 93       	push	r19
    5bc6:	4f 93       	push	r20
    5bc8:	5f 93       	push	r21
    5bca:	6f 93       	push	r22
    5bcc:	7f 93       	push	r23
    5bce:	8f 93       	push	r24
    5bd0:	9f 93       	push	r25
    5bd2:	af 93       	push	r26
    5bd4:	bf 93       	push	r27
    5bd6:	cf 93       	push	r28
    5bd8:	df 93       	push	r29
    5bda:	ef 93       	push	r30
    5bdc:	ff 93       	push	r31
    5bde:	a0 91 15 15 	lds	r26, 0x1515	; 0x801515 <_ser_handle+0x6>
    5be2:	b0 91 16 15 	lds	r27, 0x1516	; 0x801516 <_ser_handle+0x7>
    5be6:	10 97       	sbiw	r26, 0x00	; 0
    5be8:	11 f1       	breq	.+68     	; 0x5c2e <__vector_54+0x7a>
    5bea:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5bee:	14 96       	adiw	r26, 0x04	; 4
    5bf0:	ed 91       	ld	r30, X+
    5bf2:	fc 91       	ld	r31, X
    5bf4:	15 97       	sbiw	r26, 0x05	; 5
    5bf6:	93 81       	ldd	r25, Z+3	; 0x03
    5bf8:	82 81       	ldd	r24, Z+2	; 0x02
    5bfa:	25 81       	ldd	r18, Z+5	; 0x05
    5bfc:	98 1b       	sub	r25, r24
    5bfe:	92 23       	and	r25, r18
    5c00:	84 81       	ldd	r24, Z+4	; 0x04
    5c02:	98 17       	cp	r25, r24
    5c04:	61 f0       	breq	.+24     	; 0x5c1e <__vector_54+0x6a>
    5c06:	83 81       	ldd	r24, Z+3	; 0x03
    5c08:	26 95       	lsr	r18
    5c0a:	28 23       	and	r18, r24
    5c0c:	c0 81       	ld	r28, Z
    5c0e:	d1 81       	ldd	r29, Z+1	; 0x01
    5c10:	c2 0f       	add	r28, r18
    5c12:	d1 1d       	adc	r29, r1
    5c14:	68 83       	st	Y, r22
    5c16:	8f 5f       	subi	r24, 0xFF	; 255
    5c18:	95 81       	ldd	r25, Z+5	; 0x05
    5c1a:	89 23       	and	r24, r25
    5c1c:	83 83       	std	Z+3, r24	; 0x03
    5c1e:	16 96       	adiw	r26, 0x06	; 6
    5c20:	ed 91       	ld	r30, X+
    5c22:	fc 91       	ld	r31, X
    5c24:	17 97       	sbiw	r26, 0x07	; 7
    5c26:	30 97       	sbiw	r30, 0x00	; 0
    5c28:	11 f0       	breq	.+4      	; 0x5c2e <__vector_54+0x7a>
    5c2a:	cd 01       	movw	r24, r26
    5c2c:	19 95       	eicall
    5c2e:	ff 91       	pop	r31
    5c30:	ef 91       	pop	r30
    5c32:	df 91       	pop	r29
    5c34:	cf 91       	pop	r28
    5c36:	bf 91       	pop	r27
    5c38:	af 91       	pop	r26
    5c3a:	9f 91       	pop	r25
    5c3c:	8f 91       	pop	r24
    5c3e:	7f 91       	pop	r23
    5c40:	6f 91       	pop	r22
    5c42:	5f 91       	pop	r21
    5c44:	4f 91       	pop	r20
    5c46:	3f 91       	pop	r19
    5c48:	2f 91       	pop	r18
    5c4a:	0f 90       	pop	r0
    5c4c:	0b be       	out	0x3b, r0	; 59
    5c4e:	0f 90       	pop	r0
    5c50:	0f be       	out	0x3f, r0	; 63
    5c52:	0f 90       	pop	r0
    5c54:	1f 90       	pop	r1
    5c56:	18 95       	reti

00005c58 <__vector_55>:
    5c58:	1f 92       	push	r1
    5c5a:	0f 92       	push	r0
    5c5c:	0f b6       	in	r0, 0x3f	; 63
    5c5e:	0f 92       	push	r0
    5c60:	11 24       	eor	r1, r1
    5c62:	0b b6       	in	r0, 0x3b	; 59
    5c64:	0f 92       	push	r0
    5c66:	2f 93       	push	r18
    5c68:	8f 93       	push	r24
    5c6a:	9f 93       	push	r25
    5c6c:	af 93       	push	r26
    5c6e:	bf 93       	push	r27
    5c70:	ef 93       	push	r30
    5c72:	ff 93       	push	r31
    5c74:	e0 91 15 15 	lds	r30, 0x1515	; 0x801515 <_ser_handle+0x6>
    5c78:	f0 91 16 15 	lds	r31, 0x1516	; 0x801516 <_ser_handle+0x7>
    5c7c:	30 97       	sbiw	r30, 0x00	; 0
    5c7e:	b9 f0       	breq	.+46     	; 0x5cae <__vector_55+0x56>
    5c80:	02 80       	ldd	r0, Z+2	; 0x02
    5c82:	f3 81       	ldd	r31, Z+3	; 0x03
    5c84:	e0 2d       	mov	r30, r0
    5c86:	93 81       	ldd	r25, Z+3	; 0x03
    5c88:	82 81       	ldd	r24, Z+2	; 0x02
    5c8a:	98 17       	cp	r25, r24
    5c8c:	b1 f0       	breq	.+44     	; 0x5cba <__vector_55+0x62>
    5c8e:	92 81       	ldd	r25, Z+2	; 0x02
    5c90:	85 81       	ldd	r24, Z+5	; 0x05
    5c92:	28 2f       	mov	r18, r24
    5c94:	26 95       	lsr	r18
    5c96:	29 23       	and	r18, r25
    5c98:	a0 81       	ld	r26, Z
    5c9a:	b1 81       	ldd	r27, Z+1	; 0x01
    5c9c:	a2 0f       	add	r26, r18
    5c9e:	b1 1d       	adc	r27, r1
    5ca0:	2c 91       	ld	r18, X
    5ca2:	9f 5f       	subi	r25, 0xFF	; 255
    5ca4:	89 23       	and	r24, r25
    5ca6:	82 83       	std	Z+2, r24	; 0x02
    5ca8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5cac:	0b c0       	rjmp	.+22     	; 0x5cc4 <__vector_55+0x6c>
    5cae:	e1 e3       	ldi	r30, 0x31	; 49
    5cb0:	f1 e0       	ldi	r31, 0x01	; 1
    5cb2:	80 81       	ld	r24, Z
    5cb4:	8f 7d       	andi	r24, 0xDF	; 223
    5cb6:	80 83       	st	Z, r24
    5cb8:	05 c0       	rjmp	.+10     	; 0x5cc4 <__vector_55+0x6c>
    5cba:	e1 e3       	ldi	r30, 0x31	; 49
    5cbc:	f1 e0       	ldi	r31, 0x01	; 1
    5cbe:	80 81       	ld	r24, Z
    5cc0:	8f 7d       	andi	r24, 0xDF	; 223
    5cc2:	80 83       	st	Z, r24
    5cc4:	ff 91       	pop	r31
    5cc6:	ef 91       	pop	r30
    5cc8:	bf 91       	pop	r27
    5cca:	af 91       	pop	r26
    5ccc:	9f 91       	pop	r25
    5cce:	8f 91       	pop	r24
    5cd0:	2f 91       	pop	r18
    5cd2:	0f 90       	pop	r0
    5cd4:	0b be       	out	0x3b, r0	; 59
    5cd6:	0f 90       	pop	r0
    5cd8:	0f be       	out	0x3f, r0	; 63
    5cda:	0f 90       	pop	r0
    5cdc:	1f 90       	pop	r1
    5cde:	18 95       	reti

00005ce0 <usart_getchar>:
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	1f 92       	push	r1
    5ce6:	cd b7       	in	r28, 0x3d	; 61
    5ce8:	de b7       	in	r29, 0x3e	; 62
    5cea:	be 01       	movw	r22, r28
    5cec:	6f 5f       	subi	r22, 0xFF	; 255
    5cee:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf0:	80 91 17 15 	lds	r24, 0x1517	; 0x801517 <_com_serial_instance>
    5cf4:	90 91 18 15 	lds	r25, 0x1518	; 0x801518 <_com_serial_instance+0x1>
    5cf8:	7b dd       	rcall	.-1290   	; 0x57f0 <serial_getByte>
    5cfa:	81 11       	cpse	r24, r1
    5cfc:	f6 cf       	rjmp	.-20     	; 0x5cea <usart_getchar+0xa>
    5cfe:	89 81       	ldd	r24, Y+1	; 0x01
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	0f 90       	pop	r0
    5d04:	df 91       	pop	r29
    5d06:	cf 91       	pop	r28
    5d08:	08 95       	ret

00005d0a <usart_putchar>:
    5d0a:	68 2f       	mov	r22, r24
    5d0c:	80 91 17 15 	lds	r24, 0x1517	; 0x801517 <_com_serial_instance>
    5d10:	90 91 18 15 	lds	r25, 0x1518	; 0x801518 <_com_serial_instance+0x1>
    5d14:	ed dc       	rcall	.-1574   	; 0x56f0 <serial_sendByte>
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	08 95       	ret

00005d1c <stdio_initialise>:
    5d1c:	8f 92       	push	r8
    5d1e:	9f 92       	push	r9
    5d20:	af 92       	push	r10
    5d22:	cf 92       	push	r12
    5d24:	ef 92       	push	r14
    5d26:	0f 93       	push	r16
    5d28:	81 2c       	mov	r8, r1
    5d2a:	91 2c       	mov	r9, r1
    5d2c:	68 94       	set
    5d2e:	aa 24       	eor	r10, r10
    5d30:	a7 f8       	bld	r10, 7
    5d32:	68 94       	set
    5d34:	cc 24       	eor	r12, r12
    5d36:	c7 f8       	bld	r12, 7
    5d38:	e1 2c       	mov	r14, r1
    5d3a:	00 e0       	ldi	r16, 0x00	; 0
    5d3c:	23 e0       	ldi	r18, 0x03	; 3
    5d3e:	40 e0       	ldi	r20, 0x00	; 0
    5d40:	51 ee       	ldi	r21, 0xE1	; 225
    5d42:	60 e0       	ldi	r22, 0x00	; 0
    5d44:	70 e0       	ldi	r23, 0x00	; 0
    5d46:	2c dc       	rcall	.-1960   	; 0x55a0 <serial_create>
    5d48:	90 93 18 15 	sts	0x1518, r25	; 0x801518 <_com_serial_instance+0x1>
    5d4c:	80 93 17 15 	sts	0x1517, r24	; 0x801517 <_com_serial_instance>
    5d50:	ed e5       	ldi	r30, 0x5D	; 93
    5d52:	f5 e1       	ldi	r31, 0x15	; 21
    5d54:	83 e1       	ldi	r24, 0x13	; 19
    5d56:	92 e0       	ldi	r25, 0x02	; 2
    5d58:	91 83       	std	Z+1, r25	; 0x01
    5d5a:	80 83       	st	Z, r24
    5d5c:	93 83       	std	Z+3, r25	; 0x03
    5d5e:	82 83       	std	Z+2, r24	; 0x02
    5d60:	0f 91       	pop	r16
    5d62:	ef 90       	pop	r14
    5d64:	cf 90       	pop	r12
    5d66:	af 90       	pop	r10
    5d68:	9f 90       	pop	r9
    5d6a:	8f 90       	pop	r8
    5d6c:	08 95       	ret

00005d6e <_select_instance>:
    5d6e:	e0 91 1a 15 	lds	r30, 0x151A	; 0x80151a <_this>
    5d72:	f0 91 1b 15 	lds	r31, 0x151B	; 0x80151b <_this+0x1>
    5d76:	30 97       	sbiw	r30, 0x00	; 0
    5d78:	f9 f0       	breq	.+62     	; 0x5db8 <_select_instance+0x4a>
    5d7a:	a0 81       	ld	r26, Z
    5d7c:	b1 81       	ldd	r27, Z+1	; 0x01
    5d7e:	10 97       	sbiw	r26, 0x00	; 0
    5d80:	d9 f0       	breq	.+54     	; 0x5db8 <_select_instance+0x4a>
    5d82:	23 81       	ldd	r18, Z+3	; 0x03
    5d84:	21 30       	cpi	r18, 0x01	; 1
    5d86:	69 f4       	brne	.+26     	; 0x5da2 <_select_instance+0x34>
    5d88:	4c 91       	ld	r20, X
    5d8a:	21 e0       	ldi	r18, 0x01	; 1
    5d8c:	30 e0       	ldi	r19, 0x00	; 0
    5d8e:	02 80       	ldd	r0, Z+2	; 0x02
    5d90:	02 c0       	rjmp	.+4      	; 0x5d96 <_select_instance+0x28>
    5d92:	22 0f       	add	r18, r18
    5d94:	33 1f       	adc	r19, r19
    5d96:	0a 94       	dec	r0
    5d98:	e2 f7       	brpl	.-8      	; 0x5d92 <_select_instance+0x24>
    5d9a:	20 95       	com	r18
    5d9c:	24 23       	and	r18, r20
    5d9e:	2c 93       	st	X, r18
    5da0:	0b c0       	rjmp	.+22     	; 0x5db8 <_select_instance+0x4a>
    5da2:	4c 91       	ld	r20, X
    5da4:	21 e0       	ldi	r18, 0x01	; 1
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	02 80       	ldd	r0, Z+2	; 0x02
    5daa:	02 c0       	rjmp	.+4      	; 0x5db0 <_select_instance+0x42>
    5dac:	22 0f       	add	r18, r18
    5dae:	33 1f       	adc	r19, r19
    5db0:	0a 94       	dec	r0
    5db2:	e2 f7       	brpl	.-8      	; 0x5dac <_select_instance+0x3e>
    5db4:	24 2b       	or	r18, r20
    5db6:	2c 93       	st	X, r18
    5db8:	90 93 1b 15 	sts	0x151B, r25	; 0x80151b <_this+0x1>
    5dbc:	80 93 1a 15 	sts	0x151A, r24	; 0x80151a <_this>
    5dc0:	00 97       	sbiw	r24, 0x00	; 0
    5dc2:	69 f0       	breq	.+26     	; 0x5dde <_select_instance+0x70>
    5dc4:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <_spi_active>
    5dc8:	2c b5       	in	r18, 0x2c	; 44
    5dca:	2f 73       	andi	r18, 0x3F	; 63
    5dcc:	2c bd       	out	0x2c, r18	; 44
    5dce:	fc 01       	movw	r30, r24
    5dd0:	24 81       	ldd	r18, Z+4	; 0x04
    5dd2:	2c bd       	out	0x2c, r18	; 44
    5dd4:	85 81       	ldd	r24, Z+5	; 0x05
    5dd6:	8d bd       	out	0x2d, r24	; 45
    5dd8:	8c b5       	in	r24, 0x2c	; 44
    5dda:	80 64       	ori	r24, 0x40	; 64
    5ddc:	8c bd       	out	0x2c, r24	; 44
    5dde:	08 95       	ret

00005de0 <spi_create>:
    5de0:	4f 92       	push	r4
    5de2:	5f 92       	push	r5
    5de4:	6f 92       	push	r6
    5de6:	7f 92       	push	r7
    5de8:	8f 92       	push	r8
    5dea:	9f 92       	push	r9
    5dec:	af 92       	push	r10
    5dee:	bf 92       	push	r11
    5df0:	cf 92       	push	r12
    5df2:	df 92       	push	r13
    5df4:	ef 92       	push	r14
    5df6:	ff 92       	push	r15
    5df8:	0f 93       	push	r16
    5dfa:	1f 93       	push	r17
    5dfc:	cf 93       	push	r28
    5dfe:	df 93       	push	r29
    5e00:	cd b7       	in	r28, 0x3d	; 61
    5e02:	de b7       	in	r29, 0x3e	; 62
    5e04:	98 2e       	mov	r9, r24
    5e06:	b6 2e       	mov	r11, r22
    5e08:	d4 2e       	mov	r13, r20
    5e0a:	f2 2e       	mov	r15, r18
    5e0c:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <_initialised>
    5e10:	81 11       	cpse	r24, r1
    5e12:	06 c0       	rjmp	.+12     	; 0x5e20 <spi_create+0x40>
    5e14:	84 b1       	in	r24, 0x04	; 4
    5e16:	87 60       	ori	r24, 0x07	; 7
    5e18:	84 b9       	out	0x04, r24	; 4
    5e1a:	81 e0       	ldi	r24, 0x01	; 1
    5e1c:	80 93 19 15 	sts	0x1519, r24	; 0x801519 <_initialised>
    5e20:	8c e0       	ldi	r24, 0x0C	; 12
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	e0 d6       	rcall	.+3520   	; 0x6be6 <malloc>
    5e26:	3c 01       	movw	r6, r24
    5e28:	dc 01       	movw	r26, r24
    5e2a:	11 96       	adiw	r26, 0x01	; 1
    5e2c:	1c 93       	st	X, r17
    5e2e:	0e 93       	st	-X, r16
    5e30:	12 96       	adiw	r26, 0x02	; 2
    5e32:	ec 92       	st	X, r14
    5e34:	12 97       	sbiw	r26, 0x02	; 2
    5e36:	13 96       	adiw	r26, 0x03	; 3
    5e38:	cc 92       	st	X, r12
    5e3a:	13 97       	sbiw	r26, 0x03	; 3
    5e3c:	8d 2d       	mov	r24, r13
    5e3e:	88 0f       	add	r24, r24
    5e40:	88 0f       	add	r24, r24
    5e42:	f8 2a       	or	r15, r24
    5e44:	eb 2d       	mov	r30, r11
    5e46:	f0 e0       	ldi	r31, 0x00	; 0
    5e48:	e9 5a       	subi	r30, 0xA9	; 169
    5e4a:	f7 4f       	sbci	r31, 0xF7	; 247
    5e4c:	80 81       	ld	r24, Z
    5e4e:	98 2a       	or	r9, r24
    5e50:	8f 2d       	mov	r24, r15
    5e52:	89 29       	or	r24, r9
    5e54:	14 96       	adiw	r26, 0x04	; 4
    5e56:	8c 93       	st	X, r24
    5e58:	b3 e0       	ldi	r27, 0x03	; 3
    5e5a:	bb 15       	cp	r27, r11
    5e5c:	18 f4       	brcc	.+6      	; 0x5e64 <spi_create+0x84>
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	f3 01       	movw	r30, r6
    5e62:	85 83       	std	Z+5, r24	; 0x05
    5e64:	a1 10       	cpse	r10, r1
    5e66:	06 c0       	rjmp	.+12     	; 0x5e74 <spi_create+0x94>
    5e68:	d3 01       	movw	r26, r6
    5e6a:	19 96       	adiw	r26, 0x09	; 9
    5e6c:	1c 92       	st	X, r1
    5e6e:	1e 92       	st	-X, r1
    5e70:	18 97       	sbiw	r26, 0x08	; 8
    5e72:	12 c0       	rjmp	.+36     	; 0x5e98 <spi_create+0xb8>
    5e74:	6a 2d       	mov	r22, r10
    5e76:	70 e0       	ldi	r23, 0x00	; 0
    5e78:	84 e0       	ldi	r24, 0x04	; 4
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	9a d6       	rcall	.+3380   	; 0x6bb2 <calloc>
    5e7e:	2c 01       	movw	r4, r24
    5e80:	61 e0       	ldi	r22, 0x01	; 1
    5e82:	70 e0       	ldi	r23, 0x00	; 0
    5e84:	86 e0       	ldi	r24, 0x06	; 6
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	94 d6       	rcall	.+3368   	; 0x6bb2 <calloc>
    5e8a:	6c 01       	movw	r12, r24
    5e8c:	4a 2d       	mov	r20, r10
    5e8e:	b2 01       	movw	r22, r4
    5e90:	47 d4       	rcall	.+2190   	; 0x6720 <fifo_init>
    5e92:	f3 01       	movw	r30, r6
    5e94:	d1 86       	std	Z+9, r13	; 0x09
    5e96:	c0 86       	std	Z+8, r12	; 0x08
    5e98:	81 10       	cpse	r8, r1
    5e9a:	06 c0       	rjmp	.+12     	; 0x5ea8 <spi_create+0xc8>
    5e9c:	d3 01       	movw	r26, r6
    5e9e:	17 96       	adiw	r26, 0x07	; 7
    5ea0:	1c 92       	st	X, r1
    5ea2:	1e 92       	st	-X, r1
    5ea4:	16 97       	sbiw	r26, 0x06	; 6
    5ea6:	12 c0       	rjmp	.+36     	; 0x5ecc <spi_create+0xec>
    5ea8:	68 2d       	mov	r22, r8
    5eaa:	70 e0       	ldi	r23, 0x00	; 0
    5eac:	84 e0       	ldi	r24, 0x04	; 4
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	80 d6       	rcall	.+3328   	; 0x6bb2 <calloc>
    5eb2:	5c 01       	movw	r10, r24
    5eb4:	61 e0       	ldi	r22, 0x01	; 1
    5eb6:	70 e0       	ldi	r23, 0x00	; 0
    5eb8:	86 e0       	ldi	r24, 0x06	; 6
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	7a d6       	rcall	.+3316   	; 0x6bb2 <calloc>
    5ebe:	6c 01       	movw	r12, r24
    5ec0:	48 2d       	mov	r20, r8
    5ec2:	b5 01       	movw	r22, r10
    5ec4:	2d d4       	rcall	.+2138   	; 0x6720 <fifo_init>
    5ec6:	f3 01       	movw	r30, r6
    5ec8:	d7 82       	std	Z+7, r13	; 0x07
    5eca:	c6 82       	std	Z+6, r12	; 0x06
    5ecc:	8c 89       	ldd	r24, Y+20	; 0x14
    5ece:	9d 89       	ldd	r25, Y+21	; 0x15
    5ed0:	d3 01       	movw	r26, r6
    5ed2:	1b 96       	adiw	r26, 0x0b	; 11
    5ed4:	9c 93       	st	X, r25
    5ed6:	8e 93       	st	-X, r24
    5ed8:	1a 97       	sbiw	r26, 0x0a	; 10
    5eda:	01 15       	cp	r16, r1
    5edc:	11 05       	cpc	r17, r1
    5ede:	59 f0       	breq	.+22     	; 0x5ef6 <spi_create+0x116>
    5ee0:	f8 01       	movw	r30, r16
    5ee2:	22 91       	ld	r18, -Z
    5ee4:	81 e0       	ldi	r24, 0x01	; 1
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	02 c0       	rjmp	.+4      	; 0x5eee <spi_create+0x10e>
    5eea:	88 0f       	add	r24, r24
    5eec:	99 1f       	adc	r25, r25
    5eee:	ea 94       	dec	r14
    5ef0:	e2 f7       	brpl	.-8      	; 0x5eea <spi_create+0x10a>
    5ef2:	82 2b       	or	r24, r18
    5ef4:	80 83       	st	Z, r24
    5ef6:	2f b7       	in	r18, 0x3f	; 63
    5ef8:	f8 94       	cli
    5efa:	40 91 1a 15 	lds	r20, 0x151A	; 0x80151a <_this>
    5efe:	50 91 1b 15 	lds	r21, 0x151B	; 0x80151b <_this+0x1>
    5f02:	70 92 1b 15 	sts	0x151B, r7	; 0x80151b <_this+0x1>
    5f06:	60 92 1a 15 	sts	0x151A, r6	; 0x80151a <_this>
    5f0a:	d3 01       	movw	r26, r6
    5f0c:	ed 91       	ld	r30, X+
    5f0e:	fc 91       	ld	r31, X
    5f10:	11 97       	sbiw	r26, 0x01	; 1
    5f12:	30 97       	sbiw	r30, 0x00	; 0
    5f14:	01 f1       	breq	.+64     	; 0x5f56 <spi_create+0x176>
    5f16:	13 96       	adiw	r26, 0x03	; 3
    5f18:	8c 91       	ld	r24, X
    5f1a:	13 97       	sbiw	r26, 0x03	; 3
    5f1c:	81 30       	cpi	r24, 0x01	; 1
    5f1e:	71 f4       	brne	.+28     	; 0x5f3c <spi_create+0x15c>
    5f20:	30 81       	ld	r19, Z
    5f22:	81 e0       	ldi	r24, 0x01	; 1
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	12 96       	adiw	r26, 0x02	; 2
    5f28:	0c 90       	ld	r0, X
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <spi_create+0x150>
    5f2c:	88 0f       	add	r24, r24
    5f2e:	99 1f       	adc	r25, r25
    5f30:	0a 94       	dec	r0
    5f32:	e2 f7       	brpl	.-8      	; 0x5f2c <spi_create+0x14c>
    5f34:	80 95       	com	r24
    5f36:	83 23       	and	r24, r19
    5f38:	80 83       	st	Z, r24
    5f3a:	0d c0       	rjmp	.+26     	; 0x5f56 <spi_create+0x176>
    5f3c:	30 81       	ld	r19, Z
    5f3e:	81 e0       	ldi	r24, 0x01	; 1
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	d3 01       	movw	r26, r6
    5f44:	12 96       	adiw	r26, 0x02	; 2
    5f46:	0c 90       	ld	r0, X
    5f48:	02 c0       	rjmp	.+4      	; 0x5f4e <spi_create+0x16e>
    5f4a:	88 0f       	add	r24, r24
    5f4c:	99 1f       	adc	r25, r25
    5f4e:	0a 94       	dec	r0
    5f50:	e2 f7       	brpl	.-8      	; 0x5f4a <spi_create+0x16a>
    5f52:	83 2b       	or	r24, r19
    5f54:	80 83       	st	Z, r24
    5f56:	50 93 1b 15 	sts	0x151B, r21	; 0x80151b <_this+0x1>
    5f5a:	40 93 1a 15 	sts	0x151A, r20	; 0x80151a <_this>
    5f5e:	2f bf       	out	0x3f, r18	; 63
    5f60:	c3 01       	movw	r24, r6
    5f62:	df 91       	pop	r29
    5f64:	cf 91       	pop	r28
    5f66:	1f 91       	pop	r17
    5f68:	0f 91       	pop	r16
    5f6a:	ff 90       	pop	r15
    5f6c:	ef 90       	pop	r14
    5f6e:	df 90       	pop	r13
    5f70:	cf 90       	pop	r12
    5f72:	bf 90       	pop	r11
    5f74:	af 90       	pop	r10
    5f76:	9f 90       	pop	r9
    5f78:	8f 90       	pop	r8
    5f7a:	7f 90       	pop	r7
    5f7c:	6f 90       	pop	r6
    5f7e:	5f 90       	pop	r5
    5f80:	4f 90       	pop	r4
    5f82:	08 95       	ret

00005f84 <spi_sendByte>:
    5f84:	1f 93       	push	r17
    5f86:	cf 93       	push	r28
    5f88:	df 93       	push	r29
    5f8a:	00 97       	sbiw	r24, 0x00	; 0
    5f8c:	09 f4       	brne	.+2      	; 0x5f90 <spi_sendByte+0xc>
    5f8e:	6a c0       	rjmp	.+212    	; 0x6064 <spi_sendByte+0xe0>
    5f90:	16 2f       	mov	r17, r22
    5f92:	ec 01       	movw	r28, r24
    5f94:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <_this>
    5f98:	90 91 1b 15 	lds	r25, 0x151B	; 0x80151b <_this+0x1>
    5f9c:	c8 17       	cp	r28, r24
    5f9e:	d9 07       	cpc	r29, r25
    5fa0:	11 f0       	breq	.+4      	; 0x5fa6 <spi_sendByte+0x22>
    5fa2:	ce 01       	movw	r24, r28
    5fa4:	e4 de       	rcall	.-568    	; 0x5d6e <_select_instance>
    5fa6:	8f b7       	in	r24, 0x3f	; 63
    5fa8:	2f b7       	in	r18, 0x3f	; 63
    5faa:	f8 94       	cli
    5fac:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <_spi_active>
    5fb0:	81 11       	cpse	r24, r1
    5fb2:	31 c0       	rjmp	.+98     	; 0x6016 <spi_sendByte+0x92>
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	80 93 1c 15 	sts	0x151C, r24	; 0x80151c <_spi_active>
    5fba:	a0 91 1a 15 	lds	r26, 0x151A	; 0x80151a <_this>
    5fbe:	b0 91 1b 15 	lds	r27, 0x151B	; 0x80151b <_this+0x1>
    5fc2:	ed 91       	ld	r30, X+
    5fc4:	fc 91       	ld	r31, X
    5fc6:	11 97       	sbiw	r26, 0x01	; 1
    5fc8:	30 97       	sbiw	r30, 0x00	; 0
    5fca:	f9 f0       	breq	.+62     	; 0x600a <spi_sendByte+0x86>
    5fcc:	13 96       	adiw	r26, 0x03	; 3
    5fce:	8c 91       	ld	r24, X
    5fd0:	13 97       	sbiw	r26, 0x03	; 3
    5fd2:	81 30       	cpi	r24, 0x01	; 1
    5fd4:	69 f4       	brne	.+26     	; 0x5ff0 <spi_sendByte+0x6c>
    5fd6:	30 81       	ld	r19, Z
    5fd8:	81 e0       	ldi	r24, 0x01	; 1
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	12 96       	adiw	r26, 0x02	; 2
    5fde:	0c 90       	ld	r0, X
    5fe0:	02 c0       	rjmp	.+4      	; 0x5fe6 <spi_sendByte+0x62>
    5fe2:	88 0f       	add	r24, r24
    5fe4:	99 1f       	adc	r25, r25
    5fe6:	0a 94       	dec	r0
    5fe8:	e2 f7       	brpl	.-8      	; 0x5fe2 <spi_sendByte+0x5e>
    5fea:	83 2b       	or	r24, r19
    5fec:	80 83       	st	Z, r24
    5fee:	0d c0       	rjmp	.+26     	; 0x600a <spi_sendByte+0x86>
    5ff0:	30 81       	ld	r19, Z
    5ff2:	81 e0       	ldi	r24, 0x01	; 1
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	12 96       	adiw	r26, 0x02	; 2
    5ff8:	0c 90       	ld	r0, X
    5ffa:	02 c0       	rjmp	.+4      	; 0x6000 <spi_sendByte+0x7c>
    5ffc:	88 0f       	add	r24, r24
    5ffe:	99 1f       	adc	r25, r25
    6000:	0a 94       	dec	r0
    6002:	e2 f7       	brpl	.-8      	; 0x5ffc <spi_sendByte+0x78>
    6004:	80 95       	com	r24
    6006:	83 23       	and	r24, r19
    6008:	80 83       	st	Z, r24
    600a:	8c b5       	in	r24, 0x2c	; 44
    600c:	80 68       	ori	r24, 0x80	; 128
    600e:	8c bd       	out	0x2c, r24	; 44
    6010:	1e bd       	out	0x2e, r17	; 46
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	25 c0       	rjmp	.+74     	; 0x6060 <spi_sendByte+0xdc>
    6016:	ee 81       	ldd	r30, Y+6	; 0x06
    6018:	ff 81       	ldd	r31, Y+7	; 0x07
    601a:	30 97       	sbiw	r30, 0x00	; 0
    601c:	e1 f0       	breq	.+56     	; 0x6056 <spi_sendByte+0xd2>
    601e:	34 81       	ldd	r19, Z+4	; 0x04
    6020:	83 81       	ldd	r24, Z+3	; 0x03
    6022:	42 81       	ldd	r20, Z+2	; 0x02
    6024:	95 81       	ldd	r25, Z+5	; 0x05
    6026:	84 1b       	sub	r24, r20
    6028:	89 23       	and	r24, r25
    602a:	38 17       	cp	r19, r24
    602c:	b1 f0       	breq	.+44     	; 0x605a <spi_sendByte+0xd6>
    602e:	83 81       	ldd	r24, Z+3	; 0x03
    6030:	42 81       	ldd	r20, Z+2	; 0x02
    6032:	84 1b       	sub	r24, r20
    6034:	89 23       	and	r24, r25
    6036:	38 17       	cp	r19, r24
    6038:	91 f0       	breq	.+36     	; 0x605e <spi_sendByte+0xda>
    603a:	83 81       	ldd	r24, Z+3	; 0x03
    603c:	96 95       	lsr	r25
    603e:	98 23       	and	r25, r24
    6040:	a0 81       	ld	r26, Z
    6042:	b1 81       	ldd	r27, Z+1	; 0x01
    6044:	a9 0f       	add	r26, r25
    6046:	b1 1d       	adc	r27, r1
    6048:	1c 93       	st	X, r17
    604a:	8f 5f       	subi	r24, 0xFF	; 255
    604c:	95 81       	ldd	r25, Z+5	; 0x05
    604e:	89 23       	and	r24, r25
    6050:	83 83       	std	Z+3, r24	; 0x03
    6052:	80 e0       	ldi	r24, 0x00	; 0
    6054:	05 c0       	rjmp	.+10     	; 0x6060 <spi_sendByte+0xdc>
    6056:	82 e0       	ldi	r24, 0x02	; 2
    6058:	03 c0       	rjmp	.+6      	; 0x6060 <spi_sendByte+0xdc>
    605a:	81 e0       	ldi	r24, 0x01	; 1
    605c:	01 c0       	rjmp	.+2      	; 0x6060 <spi_sendByte+0xdc>
    605e:	80 e0       	ldi	r24, 0x00	; 0
    6060:	2f bf       	out	0x3f, r18	; 63
    6062:	01 c0       	rjmp	.+2      	; 0x6066 <spi_sendByte+0xe2>
    6064:	83 e0       	ldi	r24, 0x03	; 3
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	1f 91       	pop	r17
    606c:	08 95       	ret

0000606e <__vector_24>:
    606e:	1f 92       	push	r1
    6070:	0f 92       	push	r0
    6072:	0f b6       	in	r0, 0x3f	; 63
    6074:	0f 92       	push	r0
    6076:	11 24       	eor	r1, r1
    6078:	0b b6       	in	r0, 0x3b	; 59
    607a:	0f 92       	push	r0
    607c:	2f 93       	push	r18
    607e:	3f 93       	push	r19
    6080:	4f 93       	push	r20
    6082:	5f 93       	push	r21
    6084:	6f 93       	push	r22
    6086:	7f 93       	push	r23
    6088:	8f 93       	push	r24
    608a:	9f 93       	push	r25
    608c:	af 93       	push	r26
    608e:	bf 93       	push	r27
    6090:	cf 93       	push	r28
    6092:	df 93       	push	r29
    6094:	ef 93       	push	r30
    6096:	ff 93       	push	r31
    6098:	6e b5       	in	r22, 0x2e	; 46
    609a:	a0 91 1a 15 	lds	r26, 0x151A	; 0x80151a <_this>
    609e:	b0 91 1b 15 	lds	r27, 0x151B	; 0x80151b <_this+0x1>
    60a2:	18 96       	adiw	r26, 0x08	; 8
    60a4:	ed 91       	ld	r30, X+
    60a6:	fc 91       	ld	r31, X
    60a8:	19 97       	sbiw	r26, 0x09	; 9
    60aa:	30 97       	sbiw	r30, 0x00	; 0
    60ac:	a1 f0       	breq	.+40     	; 0x60d6 <__vector_24+0x68>
    60ae:	83 81       	ldd	r24, Z+3	; 0x03
    60b0:	22 81       	ldd	r18, Z+2	; 0x02
    60b2:	95 81       	ldd	r25, Z+5	; 0x05
    60b4:	82 1b       	sub	r24, r18
    60b6:	89 23       	and	r24, r25
    60b8:	24 81       	ldd	r18, Z+4	; 0x04
    60ba:	82 17       	cp	r24, r18
    60bc:	61 f0       	breq	.+24     	; 0x60d6 <__vector_24+0x68>
    60be:	83 81       	ldd	r24, Z+3	; 0x03
    60c0:	96 95       	lsr	r25
    60c2:	98 23       	and	r25, r24
    60c4:	c0 81       	ld	r28, Z
    60c6:	d1 81       	ldd	r29, Z+1	; 0x01
    60c8:	c9 0f       	add	r28, r25
    60ca:	d1 1d       	adc	r29, r1
    60cc:	68 83       	st	Y, r22
    60ce:	8f 5f       	subi	r24, 0xFF	; 255
    60d0:	95 81       	ldd	r25, Z+5	; 0x05
    60d2:	89 23       	and	r24, r25
    60d4:	83 83       	std	Z+3, r24	; 0x03
    60d6:	16 96       	adiw	r26, 0x06	; 6
    60d8:	ed 91       	ld	r30, X+
    60da:	fc 91       	ld	r31, X
    60dc:	17 97       	sbiw	r26, 0x07	; 7
    60de:	30 97       	sbiw	r30, 0x00	; 0
    60e0:	99 f0       	breq	.+38     	; 0x6108 <__vector_24+0x9a>
    60e2:	93 81       	ldd	r25, Z+3	; 0x03
    60e4:	82 81       	ldd	r24, Z+2	; 0x02
    60e6:	98 17       	cp	r25, r24
    60e8:	79 f0       	breq	.+30     	; 0x6108 <__vector_24+0x9a>
    60ea:	92 81       	ldd	r25, Z+2	; 0x02
    60ec:	85 81       	ldd	r24, Z+5	; 0x05
    60ee:	28 2f       	mov	r18, r24
    60f0:	26 95       	lsr	r18
    60f2:	29 23       	and	r18, r25
    60f4:	a0 81       	ld	r26, Z
    60f6:	b1 81       	ldd	r27, Z+1	; 0x01
    60f8:	a2 0f       	add	r26, r18
    60fa:	b1 1d       	adc	r27, r1
    60fc:	2c 91       	ld	r18, X
    60fe:	9f 5f       	subi	r25, 0xFF	; 255
    6100:	89 23       	and	r24, r25
    6102:	82 83       	std	Z+2, r24	; 0x02
    6104:	2e bd       	out	0x2e, r18	; 46
    6106:	2d c0       	rjmp	.+90     	; 0x6162 <__vector_24+0xf4>
    6108:	8c b5       	in	r24, 0x2c	; 44
    610a:	8f 77       	andi	r24, 0x7F	; 127
    610c:	8c bd       	out	0x2c, r24	; 44
    610e:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <_spi_active>
    6112:	a0 91 1a 15 	lds	r26, 0x151A	; 0x80151a <_this>
    6116:	b0 91 1b 15 	lds	r27, 0x151B	; 0x80151b <_this+0x1>
    611a:	ed 91       	ld	r30, X+
    611c:	fc 91       	ld	r31, X
    611e:	11 97       	sbiw	r26, 0x01	; 1
    6120:	30 97       	sbiw	r30, 0x00	; 0
    6122:	f9 f0       	breq	.+62     	; 0x6162 <__vector_24+0xf4>
    6124:	13 96       	adiw	r26, 0x03	; 3
    6126:	8c 91       	ld	r24, X
    6128:	13 97       	sbiw	r26, 0x03	; 3
    612a:	81 30       	cpi	r24, 0x01	; 1
    612c:	71 f4       	brne	.+28     	; 0x614a <__vector_24+0xdc>
    612e:	20 81       	ld	r18, Z
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	12 96       	adiw	r26, 0x02	; 2
    6136:	0c 90       	ld	r0, X
    6138:	02 c0       	rjmp	.+4      	; 0x613e <__vector_24+0xd0>
    613a:	88 0f       	add	r24, r24
    613c:	99 1f       	adc	r25, r25
    613e:	0a 94       	dec	r0
    6140:	e2 f7       	brpl	.-8      	; 0x613a <__vector_24+0xcc>
    6142:	80 95       	com	r24
    6144:	82 23       	and	r24, r18
    6146:	80 83       	st	Z, r24
    6148:	0c c0       	rjmp	.+24     	; 0x6162 <__vector_24+0xf4>
    614a:	20 81       	ld	r18, Z
    614c:	81 e0       	ldi	r24, 0x01	; 1
    614e:	90 e0       	ldi	r25, 0x00	; 0
    6150:	12 96       	adiw	r26, 0x02	; 2
    6152:	0c 90       	ld	r0, X
    6154:	02 c0       	rjmp	.+4      	; 0x615a <__vector_24+0xec>
    6156:	88 0f       	add	r24, r24
    6158:	99 1f       	adc	r25, r25
    615a:	0a 94       	dec	r0
    615c:	e2 f7       	brpl	.-8      	; 0x6156 <__vector_24+0xe8>
    615e:	82 2b       	or	r24, r18
    6160:	80 83       	st	Z, r24
    6162:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <_this>
    6166:	90 91 1b 15 	lds	r25, 0x151B	; 0x80151b <_this+0x1>
    616a:	dc 01       	movw	r26, r24
    616c:	1a 96       	adiw	r26, 0x0a	; 10
    616e:	ed 91       	ld	r30, X+
    6170:	fc 91       	ld	r31, X
    6172:	1b 97       	sbiw	r26, 0x0b	; 11
    6174:	30 97       	sbiw	r30, 0x00	; 0
    6176:	09 f0       	breq	.+2      	; 0x617a <__vector_24+0x10c>
    6178:	19 95       	eicall
    617a:	ff 91       	pop	r31
    617c:	ef 91       	pop	r30
    617e:	df 91       	pop	r29
    6180:	cf 91       	pop	r28
    6182:	bf 91       	pop	r27
    6184:	af 91       	pop	r26
    6186:	9f 91       	pop	r25
    6188:	8f 91       	pop	r24
    618a:	7f 91       	pop	r23
    618c:	6f 91       	pop	r22
    618e:	5f 91       	pop	r21
    6190:	4f 91       	pop	r20
    6192:	3f 91       	pop	r19
    6194:	2f 91       	pop	r18
    6196:	0f 90       	pop	r0
    6198:	0b be       	out	0x3b, r0	; 59
    619a:	0f 90       	pop	r0
    619c:	0f be       	out	0x3f, r0	; 63
    619e:	0f 90       	pop	r0
    61a0:	1f 90       	pop	r1
    61a2:	18 95       	reti

000061a4 <_turn_off>:
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	fc 01       	movw	r30, r24
    61a8:	ee 0f       	add	r30, r30
    61aa:	ff 1f       	adc	r31, r31
    61ac:	e8 0f       	add	r30, r24
    61ae:	f9 1f       	adc	r31, r25
    61b0:	ee 0f       	add	r30, r30
    61b2:	ff 1f       	adc	r31, r31
    61b4:	e3 5e       	subi	r30, 0xE3	; 227
    61b6:	fa 4e       	sbci	r31, 0xEA	; 234
    61b8:	23 81       	ldd	r18, Z+3	; 0x03
    61ba:	21 11       	cpse	r18, r1
    61bc:	1f c0       	rjmp	.+62     	; 0x61fc <_turn_off+0x58>
    61be:	9c 01       	movw	r18, r24
    61c0:	22 0f       	add	r18, r18
    61c2:	33 1f       	adc	r19, r19
    61c4:	f9 01       	movw	r30, r18
    61c6:	e8 0f       	add	r30, r24
    61c8:	f9 1f       	adc	r31, r25
    61ca:	ee 0f       	add	r30, r30
    61cc:	ff 1f       	adc	r31, r31
    61ce:	e3 5e       	subi	r30, 0xE3	; 227
    61d0:	fa 4e       	sbci	r31, 0xEA	; 234
    61d2:	a0 81       	ld	r26, Z
    61d4:	b1 81       	ldd	r27, Z+1	; 0x01
    61d6:	4c 91       	ld	r20, X
    61d8:	f9 01       	movw	r30, r18
    61da:	e8 0f       	add	r30, r24
    61dc:	f9 1f       	adc	r31, r25
    61de:	ee 0f       	add	r30, r30
    61e0:	ff 1f       	adc	r31, r31
    61e2:	e3 5e       	subi	r30, 0xE3	; 227
    61e4:	fa 4e       	sbci	r31, 0xEA	; 234
    61e6:	81 e0       	ldi	r24, 0x01	; 1
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	02 80       	ldd	r0, Z+2	; 0x02
    61ec:	02 c0       	rjmp	.+4      	; 0x61f2 <_turn_off+0x4e>
    61ee:	88 0f       	add	r24, r24
    61f0:	99 1f       	adc	r25, r25
    61f2:	0a 94       	dec	r0
    61f4:	e2 f7       	brpl	.-8      	; 0x61ee <_turn_off+0x4a>
    61f6:	84 2b       	or	r24, r20
    61f8:	8c 93       	st	X, r24
    61fa:	08 95       	ret
    61fc:	fc 01       	movw	r30, r24
    61fe:	ee 0f       	add	r30, r30
    6200:	ff 1f       	adc	r31, r31
    6202:	df 01       	movw	r26, r30
    6204:	a8 0f       	add	r26, r24
    6206:	b9 1f       	adc	r27, r25
    6208:	aa 0f       	add	r26, r26
    620a:	bb 1f       	adc	r27, r27
    620c:	a3 5e       	subi	r26, 0xE3	; 227
    620e:	ba 4e       	sbci	r27, 0xEA	; 234
    6210:	0d 90       	ld	r0, X+
    6212:	bc 91       	ld	r27, X
    6214:	a0 2d       	mov	r26, r0
    6216:	2c 91       	ld	r18, X
    6218:	e8 0f       	add	r30, r24
    621a:	f9 1f       	adc	r31, r25
    621c:	ee 0f       	add	r30, r30
    621e:	ff 1f       	adc	r31, r31
    6220:	e3 5e       	subi	r30, 0xE3	; 227
    6222:	fa 4e       	sbci	r31, 0xEA	; 234
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	02 80       	ldd	r0, Z+2	; 0x02
    622a:	02 c0       	rjmp	.+4      	; 0x6230 <_turn_off+0x8c>
    622c:	88 0f       	add	r24, r24
    622e:	99 1f       	adc	r25, r25
    6230:	0a 94       	dec	r0
    6232:	e2 f7       	brpl	.-8      	; 0x622c <_turn_off+0x88>
    6234:	80 95       	com	r24
    6236:	82 23       	and	r24, r18
    6238:	8c 93       	st	X, r24
    623a:	08 95       	ret

0000623c <_turn_on>:
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	fc 01       	movw	r30, r24
    6240:	ee 0f       	add	r30, r30
    6242:	ff 1f       	adc	r31, r31
    6244:	e8 0f       	add	r30, r24
    6246:	f9 1f       	adc	r31, r25
    6248:	ee 0f       	add	r30, r30
    624a:	ff 1f       	adc	r31, r31
    624c:	e3 5e       	subi	r30, 0xE3	; 227
    624e:	fa 4e       	sbci	r31, 0xEA	; 234
    6250:	23 81       	ldd	r18, Z+3	; 0x03
    6252:	21 11       	cpse	r18, r1
    6254:	20 c0       	rjmp	.+64     	; 0x6296 <_turn_on+0x5a>
    6256:	9c 01       	movw	r18, r24
    6258:	22 0f       	add	r18, r18
    625a:	33 1f       	adc	r19, r19
    625c:	f9 01       	movw	r30, r18
    625e:	e8 0f       	add	r30, r24
    6260:	f9 1f       	adc	r31, r25
    6262:	ee 0f       	add	r30, r30
    6264:	ff 1f       	adc	r31, r31
    6266:	e3 5e       	subi	r30, 0xE3	; 227
    6268:	fa 4e       	sbci	r31, 0xEA	; 234
    626a:	a0 81       	ld	r26, Z
    626c:	b1 81       	ldd	r27, Z+1	; 0x01
    626e:	4c 91       	ld	r20, X
    6270:	f9 01       	movw	r30, r18
    6272:	e8 0f       	add	r30, r24
    6274:	f9 1f       	adc	r31, r25
    6276:	ee 0f       	add	r30, r30
    6278:	ff 1f       	adc	r31, r31
    627a:	e3 5e       	subi	r30, 0xE3	; 227
    627c:	fa 4e       	sbci	r31, 0xEA	; 234
    627e:	81 e0       	ldi	r24, 0x01	; 1
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	02 80       	ldd	r0, Z+2	; 0x02
    6284:	02 c0       	rjmp	.+4      	; 0x628a <_turn_on+0x4e>
    6286:	88 0f       	add	r24, r24
    6288:	99 1f       	adc	r25, r25
    628a:	0a 94       	dec	r0
    628c:	e2 f7       	brpl	.-8      	; 0x6286 <_turn_on+0x4a>
    628e:	80 95       	com	r24
    6290:	84 23       	and	r24, r20
    6292:	8c 93       	st	X, r24
    6294:	08 95       	ret
    6296:	fc 01       	movw	r30, r24
    6298:	ee 0f       	add	r30, r30
    629a:	ff 1f       	adc	r31, r31
    629c:	df 01       	movw	r26, r30
    629e:	a8 0f       	add	r26, r24
    62a0:	b9 1f       	adc	r27, r25
    62a2:	aa 0f       	add	r26, r26
    62a4:	bb 1f       	adc	r27, r27
    62a6:	a3 5e       	subi	r26, 0xE3	; 227
    62a8:	ba 4e       	sbci	r27, 0xEA	; 234
    62aa:	0d 90       	ld	r0, X+
    62ac:	bc 91       	ld	r27, X
    62ae:	a0 2d       	mov	r26, r0
    62b0:	2c 91       	ld	r18, X
    62b2:	e8 0f       	add	r30, r24
    62b4:	f9 1f       	adc	r31, r25
    62b6:	ee 0f       	add	r30, r30
    62b8:	ff 1f       	adc	r31, r31
    62ba:	e3 5e       	subi	r30, 0xE3	; 227
    62bc:	fa 4e       	sbci	r31, 0xEA	; 234
    62be:	81 e0       	ldi	r24, 0x01	; 1
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	02 80       	ldd	r0, Z+2	; 0x02
    62c4:	02 c0       	rjmp	.+4      	; 0x62ca <_turn_on+0x8e>
    62c6:	88 0f       	add	r24, r24
    62c8:	99 1f       	adc	r25, r25
    62ca:	0a 94       	dec	r0
    62cc:	e2 f7       	brpl	.-8      	; 0x62c6 <_turn_on+0x8a>
    62ce:	82 2b       	or	r24, r18
    62d0:	8c 93       	st	X, r24
    62d2:	08 95       	ret

000062d4 <status_leds_slowBlink>:
    62d4:	cf 93       	push	r28
    62d6:	df 93       	push	r29
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	fc 01       	movw	r30, r24
    62dc:	ee 0f       	add	r30, r30
    62de:	ff 1f       	adc	r31, r31
    62e0:	df 01       	movw	r26, r30
    62e2:	a8 0f       	add	r26, r24
    62e4:	b9 1f       	adc	r27, r25
    62e6:	aa 0f       	add	r26, r26
    62e8:	bb 1f       	adc	r27, r27
    62ea:	a3 5e       	subi	r26, 0xE3	; 227
    62ec:	ba 4e       	sbci	r27, 0xEA	; 234
    62ee:	cd 91       	ld	r28, X+
    62f0:	dc 91       	ld	r29, X
    62f2:	11 97       	sbiw	r26, 0x01	; 1
    62f4:	48 81       	ld	r20, Y
    62f6:	21 e0       	ldi	r18, 0x01	; 1
    62f8:	30 e0       	ldi	r19, 0x00	; 0
    62fa:	12 96       	adiw	r26, 0x02	; 2
    62fc:	0c 90       	ld	r0, X
    62fe:	12 97       	sbiw	r26, 0x02	; 2
    6300:	02 c0       	rjmp	.+4      	; 0x6306 <status_leds_slowBlink+0x32>
    6302:	22 0f       	add	r18, r18
    6304:	33 1f       	adc	r19, r19
    6306:	0a 94       	dec	r0
    6308:	e2 f7       	brpl	.-8      	; 0x6302 <status_leds_slowBlink+0x2e>
    630a:	24 27       	eor	r18, r20
    630c:	28 83       	st	Y, r18
    630e:	fd 01       	movw	r30, r26
    6310:	81 e0       	ldi	r24, 0x01	; 1
    6312:	84 83       	std	Z+4, r24	; 0x04
    6314:	df 91       	pop	r29
    6316:	cf 91       	pop	r28
    6318:	08 95       	ret

0000631a <status_leds_fastBlink>:
    631a:	cf 93       	push	r28
    631c:	df 93       	push	r29
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	fc 01       	movw	r30, r24
    6322:	ee 0f       	add	r30, r30
    6324:	ff 1f       	adc	r31, r31
    6326:	df 01       	movw	r26, r30
    6328:	a8 0f       	add	r26, r24
    632a:	b9 1f       	adc	r27, r25
    632c:	aa 0f       	add	r26, r26
    632e:	bb 1f       	adc	r27, r27
    6330:	a3 5e       	subi	r26, 0xE3	; 227
    6332:	ba 4e       	sbci	r27, 0xEA	; 234
    6334:	cd 91       	ld	r28, X+
    6336:	dc 91       	ld	r29, X
    6338:	11 97       	sbiw	r26, 0x01	; 1
    633a:	48 81       	ld	r20, Y
    633c:	21 e0       	ldi	r18, 0x01	; 1
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	12 96       	adiw	r26, 0x02	; 2
    6342:	0c 90       	ld	r0, X
    6344:	12 97       	sbiw	r26, 0x02	; 2
    6346:	02 c0       	rjmp	.+4      	; 0x634c <status_leds_fastBlink+0x32>
    6348:	22 0f       	add	r18, r18
    634a:	33 1f       	adc	r19, r19
    634c:	0a 94       	dec	r0
    634e:	e2 f7       	brpl	.-8      	; 0x6348 <status_leds_fastBlink+0x2e>
    6350:	24 27       	eor	r18, r20
    6352:	28 83       	st	Y, r18
    6354:	fd 01       	movw	r30, r26
    6356:	82 e0       	ldi	r24, 0x02	; 2
    6358:	84 83       	std	Z+4, r24	; 0x04
    635a:	df 91       	pop	r29
    635c:	cf 91       	pop	r28
    635e:	08 95       	ret

00006360 <status_leds_ledOn>:
    6360:	28 2f       	mov	r18, r24
    6362:	30 e0       	ldi	r19, 0x00	; 0
    6364:	f9 01       	movw	r30, r18
    6366:	ee 0f       	add	r30, r30
    6368:	ff 1f       	adc	r31, r31
    636a:	e2 0f       	add	r30, r18
    636c:	f3 1f       	adc	r31, r19
    636e:	ee 0f       	add	r30, r30
    6370:	ff 1f       	adc	r31, r31
    6372:	e3 5e       	subi	r30, 0xE3	; 227
    6374:	fa 4e       	sbci	r31, 0xEA	; 234
    6376:	93 e0       	ldi	r25, 0x03	; 3
    6378:	94 83       	std	Z+4, r25	; 0x04
    637a:	60 cf       	rjmp	.-320    	; 0x623c <_turn_on>
    637c:	08 95       	ret

0000637e <status_leds_ledOff>:
    637e:	28 2f       	mov	r18, r24
    6380:	30 e0       	ldi	r19, 0x00	; 0
    6382:	f9 01       	movw	r30, r18
    6384:	ee 0f       	add	r30, r30
    6386:	ff 1f       	adc	r31, r31
    6388:	e2 0f       	add	r30, r18
    638a:	f3 1f       	adc	r31, r19
    638c:	ee 0f       	add	r30, r30
    638e:	ff 1f       	adc	r31, r31
    6390:	e3 5e       	subi	r30, 0xE3	; 227
    6392:	fa 4e       	sbci	r31, 0xEA	; 234
    6394:	94 e0       	ldi	r25, 0x04	; 4
    6396:	94 83       	std	Z+4, r25	; 0x04
    6398:	05 cf       	rjmp	.-502    	; 0x61a4 <_turn_off>
    639a:	08 95       	ret

0000639c <status_leds_longPuls>:
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	fc 01       	movw	r30, r24
    63a0:	ee 0f       	add	r30, r30
    63a2:	ff 1f       	adc	r31, r31
    63a4:	df 01       	movw	r26, r30
    63a6:	a8 0f       	add	r26, r24
    63a8:	b9 1f       	adc	r27, r25
    63aa:	aa 0f       	add	r26, r26
    63ac:	bb 1f       	adc	r27, r27
    63ae:	a3 5e       	subi	r26, 0xE3	; 227
    63b0:	ba 4e       	sbci	r27, 0xEA	; 234
    63b2:	24 e0       	ldi	r18, 0x04	; 4
    63b4:	15 96       	adiw	r26, 0x05	; 5
    63b6:	2c 93       	st	X, r18
    63b8:	15 97       	sbiw	r26, 0x05	; 5
    63ba:	fd 01       	movw	r30, r26
    63bc:	14 82       	std	Z+4, r1	; 0x04
    63be:	08 95       	ret

000063c0 <status_leds_shortPuls>:
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	fc 01       	movw	r30, r24
    63c4:	ee 0f       	add	r30, r30
    63c6:	ff 1f       	adc	r31, r31
    63c8:	df 01       	movw	r26, r30
    63ca:	a8 0f       	add	r26, r24
    63cc:	b9 1f       	adc	r27, r25
    63ce:	aa 0f       	add	r26, r26
    63d0:	bb 1f       	adc	r27, r27
    63d2:	a3 5e       	subi	r26, 0xE3	; 227
    63d4:	ba 4e       	sbci	r27, 0xEA	; 234
    63d6:	21 e0       	ldi	r18, 0x01	; 1
    63d8:	15 96       	adiw	r26, 0x05	; 5
    63da:	2c 93       	st	X, r18
    63dc:	15 97       	sbiw	r26, 0x05	; 5
    63de:	fd 01       	movw	r30, r26
    63e0:	14 82       	std	Z+4, r1	; 0x04
    63e2:	08 95       	ret

000063e4 <_initTwiInterface>:
    63e4:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <_twiIsInitiated>
    63e8:	81 11       	cpse	r24, r1
    63ea:	0c c0       	rjmp	.+24     	; 0x6404 <_initTwiInterface+0x20>
    63ec:	8c e0       	ldi	r24, 0x0C	; 12
    63ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    63f2:	8f ef       	ldi	r24, 0xFF	; 255
    63f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    63f8:	84 e0       	ldi	r24, 0x04	; 4
    63fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    63fe:	81 e0       	ldi	r24, 0x01	; 1
    6400:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <_twiIsInitiated>
    6404:	08 95       	ret

00006406 <twiCreate>:
    6406:	af 92       	push	r10
    6408:	bf 92       	push	r11
    640a:	cf 92       	push	r12
    640c:	df 92       	push	r13
    640e:	ef 92       	push	r14
    6410:	ff 92       	push	r15
    6412:	0f 93       	push	r16
    6414:	1f 93       	push	r17
    6416:	cf 93       	push	r28
    6418:	df 93       	push	r29
    641a:	a8 2e       	mov	r10, r24
    641c:	b6 2e       	mov	r11, r22
    641e:	69 01       	movw	r12, r18
    6420:	7a 01       	movw	r14, r20
    6422:	84 e0       	ldi	r24, 0x04	; 4
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	df d3       	rcall	.+1982   	; 0x6be6 <malloc>
    6428:	ec 01       	movw	r28, r24
    642a:	89 2b       	or	r24, r25
    642c:	61 f1       	breq	.+88     	; 0x6486 <twiCreate+0x80>
    642e:	a8 82       	st	Y, r10
    6430:	81 e0       	ldi	r24, 0x01	; 1
    6432:	b8 12       	cpse	r11, r24
    6434:	12 c0       	rjmp	.+36     	; 0x645a <twiCreate+0x54>
    6436:	c7 01       	movw	r24, r14
    6438:	b6 01       	movw	r22, r12
    643a:	20 ea       	ldi	r18, 0xA0	; 160
    643c:	36 e8       	ldi	r19, 0x86	; 134
    643e:	41 e0       	ldi	r20, 0x01	; 1
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	60 d3       	rcall	.+1728   	; 0x6b04 <__udivmodsi4>
    6444:	da 01       	movw	r26, r20
    6446:	c9 01       	movw	r24, r18
    6448:	40 97       	sbiw	r24, 0x10	; 16
    644a:	a1 09       	sbc	r26, r1
    644c:	b1 09       	sbc	r27, r1
    644e:	b6 95       	lsr	r27
    6450:	a7 95       	ror	r26
    6452:	97 95       	ror	r25
    6454:	87 95       	ror	r24
    6456:	89 83       	std	Y+1, r24	; 0x01
    6458:	11 c0       	rjmp	.+34     	; 0x647c <twiCreate+0x76>
    645a:	c7 01       	movw	r24, r14
    645c:	b6 01       	movw	r22, r12
    645e:	20 e8       	ldi	r18, 0x80	; 128
    6460:	3a e1       	ldi	r19, 0x1A	; 26
    6462:	46 e0       	ldi	r20, 0x06	; 6
    6464:	50 e0       	ldi	r21, 0x00	; 0
    6466:	4e d3       	rcall	.+1692   	; 0x6b04 <__udivmodsi4>
    6468:	da 01       	movw	r26, r20
    646a:	c9 01       	movw	r24, r18
    646c:	40 97       	sbiw	r24, 0x10	; 16
    646e:	a1 09       	sbc	r26, r1
    6470:	b1 09       	sbc	r27, r1
    6472:	b6 95       	lsr	r27
    6474:	a7 95       	ror	r26
    6476:	97 95       	ror	r25
    6478:	87 95       	ror	r24
    647a:	89 83       	std	Y+1, r24	; 0x01
    647c:	1b 83       	std	Y+3, r17	; 0x03
    647e:	0a 83       	std	Y+2, r16	; 0x02
    6480:	8c 2f       	mov	r24, r28
    6482:	9d 2f       	mov	r25, r29
    6484:	02 c0       	rjmp	.+4      	; 0x648a <twiCreate+0x84>
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	df 91       	pop	r29
    648c:	cf 91       	pop	r28
    648e:	1f 91       	pop	r17
    6490:	0f 91       	pop	r16
    6492:	ff 90       	pop	r15
    6494:	ef 90       	pop	r14
    6496:	df 90       	pop	r13
    6498:	cf 90       	pop	r12
    649a:	bf 90       	pop	r11
    649c:	af 90       	pop	r10
    649e:	08 95       	ret

000064a0 <twiIsBusy>:
    64a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    64a4:	81 70       	andi	r24, 0x01	; 1
    64a6:	08 95       	ret

000064a8 <twiTransmit>:
    64a8:	ff 92       	push	r15
    64aa:	0f 93       	push	r16
    64ac:	1f 93       	push	r17
    64ae:	cf 93       	push	r28
    64b0:	df 93       	push	r29
    64b2:	00 97       	sbiw	r24, 0x00	; 0
    64b4:	d1 f1       	breq	.+116    	; 0x652a <twiTransmit+0x82>
    64b6:	4a 30       	cpi	r20, 0x0A	; 10
    64b8:	d0 f5       	brcc	.+116    	; 0x652e <twiTransmit+0x86>
    64ba:	f4 2e       	mov	r15, r20
    64bc:	8b 01       	movw	r16, r22
    64be:	ec 01       	movw	r28, r24
    64c0:	ef df       	rcall	.-34     	; 0x64a0 <twiIsBusy>
    64c2:	81 11       	cpse	r24, r1
    64c4:	36 c0       	rjmp	.+108    	; 0x6532 <twiTransmit+0x8a>
    64c6:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_twiCurrentHandler>
    64ca:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_twiCurrentHandler+0x1>
    64ce:	c8 17       	cp	r28, r24
    64d0:	d9 07       	cpc	r29, r25
    64d2:	41 f0       	breq	.+16     	; 0x64e4 <twiTransmit+0x3c>
    64d4:	87 df       	rcall	.-242    	; 0x63e4 <_initTwiInterface>
    64d6:	89 81       	ldd	r24, Y+1	; 0x01
    64d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    64dc:	d0 93 37 15 	sts	0x1537, r29	; 0x801537 <_twiCurrentHandler+0x1>
    64e0:	c0 93 36 15 	sts	0x1536, r28	; 0x801536 <_twiCurrentHandler>
    64e4:	81 e0       	ldi	r24, 0x01	; 1
    64e6:	8f 0d       	add	r24, r15
    64e8:	80 93 38 15 	sts	0x1538, r24	; 0x801538 <_twiMessageLen>
    64ec:	88 81       	ld	r24, Y
    64ee:	88 0f       	add	r24, r24
    64f0:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <_twiMessageBuffer>
    64f4:	ff 20       	and	r15, r15
    64f6:	89 f0       	breq	.+34     	; 0x651a <twiTransmit+0x72>
    64f8:	f8 01       	movw	r30, r16
    64fa:	aa e3       	ldi	r26, 0x3A	; 58
    64fc:	b5 e1       	ldi	r27, 0x15	; 21
    64fe:	4f ef       	ldi	r20, 0xFF	; 255
    6500:	4f 0d       	add	r20, r15
    6502:	64 2f       	mov	r22, r20
    6504:	70 e0       	ldi	r23, 0x00	; 0
    6506:	cb 01       	movw	r24, r22
    6508:	01 96       	adiw	r24, 0x01	; 1
    650a:	b8 01       	movw	r22, r16
    650c:	68 0f       	add	r22, r24
    650e:	79 1f       	adc	r23, r25
    6510:	81 91       	ld	r24, Z+
    6512:	8d 93       	st	X+, r24
    6514:	e6 17       	cp	r30, r22
    6516:	f7 07       	cpc	r31, r23
    6518:	d9 f7       	brne	.-10     	; 0x6510 <twiTransmit+0x68>
    651a:	88 ef       	ldi	r24, 0xF8	; 248
    651c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6520:	85 ea       	ldi	r24, 0xA5	; 165
    6522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6526:	84 e0       	ldi	r24, 0x04	; 4
    6528:	05 c0       	rjmp	.+10     	; 0x6534 <twiTransmit+0x8c>
    652a:	86 e0       	ldi	r24, 0x06	; 6
    652c:	03 c0       	rjmp	.+6      	; 0x6534 <twiTransmit+0x8c>
    652e:	87 e0       	ldi	r24, 0x07	; 7
    6530:	01 c0       	rjmp	.+2      	; 0x6534 <twiTransmit+0x8c>
    6532:	82 e0       	ldi	r24, 0x02	; 2
    6534:	df 91       	pop	r29
    6536:	cf 91       	pop	r28
    6538:	1f 91       	pop	r17
    653a:	0f 91       	pop	r16
    653c:	ff 90       	pop	r15
    653e:	08 95       	ret

00006540 <twiReceive>:
    6540:	1f 93       	push	r17
    6542:	cf 93       	push	r28
    6544:	df 93       	push	r29
    6546:	00 97       	sbiw	r24, 0x00	; 0
    6548:	29 f1       	breq	.+74     	; 0x6594 <twiReceive+0x54>
    654a:	6b 30       	cpi	r22, 0x0B	; 11
    654c:	28 f5       	brcc	.+74     	; 0x6598 <twiReceive+0x58>
    654e:	16 2f       	mov	r17, r22
    6550:	ec 01       	movw	r28, r24
    6552:	a6 df       	rcall	.-180    	; 0x64a0 <twiIsBusy>
    6554:	81 11       	cpse	r24, r1
    6556:	22 c0       	rjmp	.+68     	; 0x659c <twiReceive+0x5c>
    6558:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_twiCurrentHandler>
    655c:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_twiCurrentHandler+0x1>
    6560:	c8 17       	cp	r28, r24
    6562:	d9 07       	cpc	r29, r25
    6564:	41 f0       	breq	.+16     	; 0x6576 <twiReceive+0x36>
    6566:	3e df       	rcall	.-388    	; 0x63e4 <_initTwiInterface>
    6568:	89 81       	ldd	r24, Y+1	; 0x01
    656a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    656e:	d0 93 37 15 	sts	0x1537, r29	; 0x801537 <_twiCurrentHandler+0x1>
    6572:	c0 93 36 15 	sts	0x1536, r28	; 0x801536 <_twiCurrentHandler>
    6576:	10 93 38 15 	sts	0x1538, r17	; 0x801538 <_twiMessageLen>
    657a:	88 81       	ld	r24, Y
    657c:	88 0f       	add	r24, r24
    657e:	81 60       	ori	r24, 0x01	; 1
    6580:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <_twiMessageBuffer>
    6584:	88 ef       	ldi	r24, 0xF8	; 248
    6586:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    658a:	85 ea       	ldi	r24, 0xA5	; 165
    658c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6590:	85 e0       	ldi	r24, 0x05	; 5
    6592:	05 c0       	rjmp	.+10     	; 0x659e <twiReceive+0x5e>
    6594:	86 e0       	ldi	r24, 0x06	; 6
    6596:	03 c0       	rjmp	.+6      	; 0x659e <twiReceive+0x5e>
    6598:	87 e0       	ldi	r24, 0x07	; 7
    659a:	01 c0       	rjmp	.+2      	; 0x659e <twiReceive+0x5e>
    659c:	82 e0       	ldi	r24, 0x02	; 2
    659e:	df 91       	pop	r29
    65a0:	cf 91       	pop	r28
    65a2:	1f 91       	pop	r17
    65a4:	08 95       	ret

000065a6 <__vector_39>:
    65a6:	1f 92       	push	r1
    65a8:	0f 92       	push	r0
    65aa:	0f b6       	in	r0, 0x3f	; 63
    65ac:	0f 92       	push	r0
    65ae:	11 24       	eor	r1, r1
    65b0:	0b b6       	in	r0, 0x3b	; 59
    65b2:	0f 92       	push	r0
    65b4:	2f 93       	push	r18
    65b6:	3f 93       	push	r19
    65b8:	4f 93       	push	r20
    65ba:	5f 93       	push	r21
    65bc:	6f 93       	push	r22
    65be:	7f 93       	push	r23
    65c0:	8f 93       	push	r24
    65c2:	9f 93       	push	r25
    65c4:	af 93       	push	r26
    65c6:	bf 93       	push	r27
    65c8:	ef 93       	push	r30
    65ca:	ff 93       	push	r31
    65cc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    65d0:	8e 2f       	mov	r24, r30
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	fc 01       	movw	r30, r24
    65d6:	38 97       	sbiw	r30, 0x08	; 8
    65d8:	e1 35       	cpi	r30, 0x51	; 81
    65da:	f1 05       	cpc	r31, r1
    65dc:	08 f0       	brcs	.+2      	; 0x65e0 <__vector_39+0x3a>
    65de:	75 c0       	rjmp	.+234    	; 0x66ca <__vector_39+0x124>
    65e0:	88 27       	eor	r24, r24
    65e2:	e4 58       	subi	r30, 0x84	; 132
    65e4:	ff 4f       	sbci	r31, 0xFF	; 255
    65e6:	8f 4f       	sbci	r24, 0xFF	; 255
    65e8:	af c2       	rjmp	.+1374   	; 0x6b48 <__tablejump2__>
    65ea:	10 92 35 15 	sts	0x1535, r1	; 0x801535 <_index.1885>
    65ee:	e0 91 35 15 	lds	r30, 0x1535	; 0x801535 <_index.1885>
    65f2:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <_twiMessageLen>
    65f6:	e8 17       	cp	r30, r24
    65f8:	70 f4       	brcc	.+28     	; 0x6616 <__vector_39+0x70>
    65fa:	81 e0       	ldi	r24, 0x01	; 1
    65fc:	8e 0f       	add	r24, r30
    65fe:	80 93 35 15 	sts	0x1535, r24	; 0x801535 <_index.1885>
    6602:	f0 e0       	ldi	r31, 0x00	; 0
    6604:	e7 5c       	subi	r30, 0xC7	; 199
    6606:	fa 4e       	sbci	r31, 0xEA	; 234
    6608:	80 81       	ld	r24, Z
    660a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    660e:	85 e8       	ldi	r24, 0x85	; 133
    6610:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6614:	72 c0       	rjmp	.+228    	; 0x66fa <__vector_39+0x154>
    6616:	84 e9       	ldi	r24, 0x94	; 148
    6618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    661c:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_twiCurrentHandler>
    6620:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_twiCurrentHandler+0x1>
    6624:	dc 01       	movw	r26, r24
    6626:	12 96       	adiw	r26, 0x02	; 2
    6628:	ed 91       	ld	r30, X+
    662a:	fc 91       	ld	r31, X
    662c:	13 97       	sbiw	r26, 0x03	; 3
    662e:	30 97       	sbiw	r30, 0x00	; 0
    6630:	09 f4       	brne	.+2      	; 0x6634 <__vector_39+0x8e>
    6632:	63 c0       	rjmp	.+198    	; 0x66fa <__vector_39+0x154>
    6634:	20 e0       	ldi	r18, 0x00	; 0
    6636:	40 e0       	ldi	r20, 0x00	; 0
    6638:	50 e0       	ldi	r21, 0x00	; 0
    663a:	64 e0       	ldi	r22, 0x04	; 4
    663c:	19 95       	eicall
    663e:	5d c0       	rjmp	.+186    	; 0x66fa <__vector_39+0x154>
    6640:	e0 91 35 15 	lds	r30, 0x1535	; 0x801535 <_index.1885>
    6644:	81 e0       	ldi	r24, 0x01	; 1
    6646:	8e 0f       	add	r24, r30
    6648:	80 93 35 15 	sts	0x1535, r24	; 0x801535 <_index.1885>
    664c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6650:	f0 e0       	ldi	r31, 0x00	; 0
    6652:	e7 5c       	subi	r30, 0xC7	; 199
    6654:	fa 4e       	sbci	r31, 0xEA	; 234
    6656:	80 83       	st	Z, r24
    6658:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    665c:	80 34       	cpi	r24, 0x40	; 64
    665e:	11 f4       	brne	.+4      	; 0x6664 <__vector_39+0xbe>
    6660:	10 92 35 15 	sts	0x1535, r1	; 0x801535 <_index.1885>
    6664:	20 91 35 15 	lds	r18, 0x1535	; 0x801535 <_index.1885>
    6668:	30 e0       	ldi	r19, 0x00	; 0
    666a:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <_twiMessageLen>
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	01 97       	sbiw	r24, 0x01	; 1
    6672:	28 17       	cp	r18, r24
    6674:	39 07       	cpc	r19, r25
    6676:	24 f4       	brge	.+8      	; 0x6680 <__vector_39+0xda>
    6678:	85 ec       	ldi	r24, 0xC5	; 197
    667a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    667e:	3d c0       	rjmp	.+122    	; 0x66fa <__vector_39+0x154>
    6680:	85 e8       	ldi	r24, 0x85	; 133
    6682:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6686:	39 c0       	rjmp	.+114    	; 0x66fa <__vector_39+0x154>
    6688:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    668c:	e0 91 35 15 	lds	r30, 0x1535	; 0x801535 <_index.1885>
    6690:	f0 e0       	ldi	r31, 0x00	; 0
    6692:	e7 5c       	subi	r30, 0xC7	; 199
    6694:	fa 4e       	sbci	r31, 0xEA	; 234
    6696:	80 83       	st	Z, r24
    6698:	84 e9       	ldi	r24, 0x94	; 148
    669a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    669e:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_twiCurrentHandler>
    66a2:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_twiCurrentHandler+0x1>
    66a6:	dc 01       	movw	r26, r24
    66a8:	12 96       	adiw	r26, 0x02	; 2
    66aa:	ed 91       	ld	r30, X+
    66ac:	fc 91       	ld	r31, X
    66ae:	13 97       	sbiw	r26, 0x03	; 3
    66b0:	30 97       	sbiw	r30, 0x00	; 0
    66b2:	19 f1       	breq	.+70     	; 0x66fa <__vector_39+0x154>
    66b4:	20 91 38 15 	lds	r18, 0x1538	; 0x801538 <_twiMessageLen>
    66b8:	49 e3       	ldi	r20, 0x39	; 57
    66ba:	55 e1       	ldi	r21, 0x15	; 21
    66bc:	65 e0       	ldi	r22, 0x05	; 5
    66be:	19 95       	eicall
    66c0:	1c c0       	rjmp	.+56     	; 0x66fa <__vector_39+0x154>
    66c2:	85 ea       	ldi	r24, 0xA5	; 165
    66c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    66c8:	18 c0       	rjmp	.+48     	; 0x66fa <__vector_39+0x154>
    66ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    66ce:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    66d2:	84 e0       	ldi	r24, 0x04	; 4
    66d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    66d8:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <_twiCurrentHandler>
    66dc:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_twiCurrentHandler+0x1>
    66e0:	dc 01       	movw	r26, r24
    66e2:	12 96       	adiw	r26, 0x02	; 2
    66e4:	ed 91       	ld	r30, X+
    66e6:	fc 91       	ld	r31, X
    66e8:	13 97       	sbiw	r26, 0x03	; 3
    66ea:	30 97       	sbiw	r30, 0x00	; 0
    66ec:	31 f0       	breq	.+12     	; 0x66fa <__vector_39+0x154>
    66ee:	20 e0       	ldi	r18, 0x00	; 0
    66f0:	40 e0       	ldi	r20, 0x00	; 0
    66f2:	50 e0       	ldi	r21, 0x00	; 0
    66f4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    66f8:	19 95       	eicall
    66fa:	ff 91       	pop	r31
    66fc:	ef 91       	pop	r30
    66fe:	bf 91       	pop	r27
    6700:	af 91       	pop	r26
    6702:	9f 91       	pop	r25
    6704:	8f 91       	pop	r24
    6706:	7f 91       	pop	r23
    6708:	6f 91       	pop	r22
    670a:	5f 91       	pop	r21
    670c:	4f 91       	pop	r20
    670e:	3f 91       	pop	r19
    6710:	2f 91       	pop	r18
    6712:	0f 90       	pop	r0
    6714:	0b be       	out	0x3b, r0	; 59
    6716:	0f 90       	pop	r0
    6718:	0f be       	out	0x3f, r0	; 63
    671a:	0f 90       	pop	r0
    671c:	1f 90       	pop	r1
    671e:	18 95       	reti

00006720 <fifo_init>:
    6720:	fc 01       	movw	r30, r24
    6722:	41 11       	cpse	r20, r1
    6724:	01 c0       	rjmp	.+2      	; 0x6728 <fifo_init+0x8>
    6726:	80 d3       	rcall	.+1792   	; 0x6e28 <abort>
    6728:	84 2f       	mov	r24, r20
    672a:	90 e0       	ldi	r25, 0x00	; 0
    672c:	9c 01       	movw	r18, r24
    672e:	21 50       	subi	r18, 0x01	; 1
    6730:	31 09       	sbc	r19, r1
    6732:	82 23       	and	r24, r18
    6734:	93 23       	and	r25, r19
    6736:	89 2b       	or	r24, r25
    6738:	09 f0       	breq	.+2      	; 0x673c <fifo_init+0x1c>
    673a:	76 d3       	rcall	.+1772   	; 0x6e28 <abort>
    673c:	41 38       	cpi	r20, 0x81	; 129
    673e:	08 f0       	brcs	.+2      	; 0x6742 <fifo_init+0x22>
    6740:	73 d3       	rcall	.+1766   	; 0x6e28 <abort>
    6742:	12 82       	std	Z+2, r1	; 0x02
    6744:	13 82       	std	Z+3, r1	; 0x03
    6746:	44 83       	std	Z+4, r20	; 0x04
    6748:	44 0f       	add	r20, r20
    674a:	41 50       	subi	r20, 0x01	; 1
    674c:	45 83       	std	Z+5, r20	; 0x05
    674e:	71 83       	std	Z+1, r23	; 0x01
    6750:	60 83       	st	Z, r22
    6752:	80 e0       	ldi	r24, 0x00	; 0
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	08 95       	ret

00006758 <floor>:
    6758:	3c d0       	rcall	.+120    	; 0x67d2 <__fp_trunc>
    675a:	88 f0       	brcs	.+34     	; 0x677e <floor+0x26>
    675c:	9f 37       	cpi	r25, 0x7F	; 127
    675e:	48 f4       	brcc	.+18     	; 0x6772 <floor+0x1a>
    6760:	91 11       	cpse	r25, r1
    6762:	16 f0       	brts	.+4      	; 0x6768 <floor+0x10>
    6764:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__fp_szero>
    6768:	60 e0       	ldi	r22, 0x00	; 0
    676a:	70 e0       	ldi	r23, 0x00	; 0
    676c:	80 e8       	ldi	r24, 0x80	; 128
    676e:	9f eb       	ldi	r25, 0xBF	; 191
    6770:	08 95       	ret
    6772:	26 f4       	brtc	.+8      	; 0x677c <floor+0x24>
    6774:	1b 16       	cp	r1, r27
    6776:	61 1d       	adc	r22, r1
    6778:	71 1d       	adc	r23, r1
    677a:	81 1d       	adc	r24, r1
    677c:	01 c0       	rjmp	.+2      	; 0x6780 <__fp_mintl>
    677e:	1b c0       	rjmp	.+54     	; 0x67b6 <__fp_mpack>

00006780 <__fp_mintl>:
    6780:	88 23       	and	r24, r24
    6782:	71 f4       	brne	.+28     	; 0x67a0 <__fp_mintl+0x20>
    6784:	77 23       	and	r23, r23
    6786:	21 f0       	breq	.+8      	; 0x6790 <__fp_mintl+0x10>
    6788:	98 50       	subi	r25, 0x08	; 8
    678a:	87 2b       	or	r24, r23
    678c:	76 2f       	mov	r23, r22
    678e:	07 c0       	rjmp	.+14     	; 0x679e <__fp_mintl+0x1e>
    6790:	66 23       	and	r22, r22
    6792:	11 f4       	brne	.+4      	; 0x6798 <__fp_mintl+0x18>
    6794:	99 27       	eor	r25, r25
    6796:	0d c0       	rjmp	.+26     	; 0x67b2 <__fp_mintl+0x32>
    6798:	90 51       	subi	r25, 0x10	; 16
    679a:	86 2b       	or	r24, r22
    679c:	70 e0       	ldi	r23, 0x00	; 0
    679e:	60 e0       	ldi	r22, 0x00	; 0
    67a0:	2a f0       	brmi	.+10     	; 0x67ac <__fp_mintl+0x2c>
    67a2:	9a 95       	dec	r25
    67a4:	66 0f       	add	r22, r22
    67a6:	77 1f       	adc	r23, r23
    67a8:	88 1f       	adc	r24, r24
    67aa:	da f7       	brpl	.-10     	; 0x67a2 <__fp_mintl+0x22>
    67ac:	88 0f       	add	r24, r24
    67ae:	96 95       	lsr	r25
    67b0:	87 95       	ror	r24
    67b2:	97 f9       	bld	r25, 7
    67b4:	08 95       	ret

000067b6 <__fp_mpack>:
    67b6:	9f 3f       	cpi	r25, 0xFF	; 255
    67b8:	31 f0       	breq	.+12     	; 0x67c6 <__fp_mpack_finite+0xc>

000067ba <__fp_mpack_finite>:
    67ba:	91 50       	subi	r25, 0x01	; 1
    67bc:	20 f4       	brcc	.+8      	; 0x67c6 <__fp_mpack_finite+0xc>
    67be:	87 95       	ror	r24
    67c0:	77 95       	ror	r23
    67c2:	67 95       	ror	r22
    67c4:	b7 95       	ror	r27
    67c6:	88 0f       	add	r24, r24
    67c8:	91 1d       	adc	r25, r1
    67ca:	96 95       	lsr	r25
    67cc:	87 95       	ror	r24
    67ce:	97 f9       	bld	r25, 7
    67d0:	08 95       	ret

000067d2 <__fp_trunc>:
    67d2:	0e 94 0e 23 	call	0x461c	; 0x461c <__fp_splitA>
    67d6:	a0 f0       	brcs	.+40     	; 0x6800 <__fp_trunc+0x2e>
    67d8:	be e7       	ldi	r27, 0x7E	; 126
    67da:	b9 17       	cp	r27, r25
    67dc:	88 f4       	brcc	.+34     	; 0x6800 <__fp_trunc+0x2e>
    67de:	bb 27       	eor	r27, r27
    67e0:	9f 38       	cpi	r25, 0x8F	; 143
    67e2:	60 f4       	brcc	.+24     	; 0x67fc <__fp_trunc+0x2a>
    67e4:	16 16       	cp	r1, r22
    67e6:	b1 1d       	adc	r27, r1
    67e8:	67 2f       	mov	r22, r23
    67ea:	78 2f       	mov	r23, r24
    67ec:	88 27       	eor	r24, r24
    67ee:	98 5f       	subi	r25, 0xF8	; 248
    67f0:	f7 cf       	rjmp	.-18     	; 0x67e0 <__fp_trunc+0xe>
    67f2:	86 95       	lsr	r24
    67f4:	77 95       	ror	r23
    67f6:	67 95       	ror	r22
    67f8:	b1 1d       	adc	r27, r1
    67fa:	93 95       	inc	r25
    67fc:	96 39       	cpi	r25, 0x96	; 150
    67fe:	c8 f3       	brcs	.-14     	; 0x67f2 <__fp_trunc+0x20>
    6800:	08 95       	ret

00006802 <pow>:
    6802:	fa 01       	movw	r30, r20
    6804:	ee 0f       	add	r30, r30
    6806:	ff 1f       	adc	r31, r31
    6808:	30 96       	adiw	r30, 0x00	; 0
    680a:	21 05       	cpc	r18, r1
    680c:	31 05       	cpc	r19, r1
    680e:	a1 f1       	breq	.+104    	; 0x6878 <pow+0x76>
    6810:	61 15       	cp	r22, r1
    6812:	71 05       	cpc	r23, r1
    6814:	61 f4       	brne	.+24     	; 0x682e <pow+0x2c>
    6816:	80 38       	cpi	r24, 0x80	; 128
    6818:	bf e3       	ldi	r27, 0x3F	; 63
    681a:	9b 07       	cpc	r25, r27
    681c:	49 f1       	breq	.+82     	; 0x6870 <pow+0x6e>
    681e:	68 94       	set
    6820:	90 38       	cpi	r25, 0x80	; 128
    6822:	81 05       	cpc	r24, r1
    6824:	61 f0       	breq	.+24     	; 0x683e <pow+0x3c>
    6826:	80 38       	cpi	r24, 0x80	; 128
    6828:	bf ef       	ldi	r27, 0xFF	; 255
    682a:	9b 07       	cpc	r25, r27
    682c:	41 f0       	breq	.+16     	; 0x683e <pow+0x3c>
    682e:	99 23       	and	r25, r25
    6830:	4a f5       	brpl	.+82     	; 0x6884 <pow+0x82>
    6832:	ff 3f       	cpi	r31, 0xFF	; 255
    6834:	e1 05       	cpc	r30, r1
    6836:	31 05       	cpc	r19, r1
    6838:	21 05       	cpc	r18, r1
    683a:	19 f1       	breq	.+70     	; 0x6882 <pow+0x80>
    683c:	e8 94       	clt
    683e:	08 94       	sec
    6840:	e7 95       	ror	r30
    6842:	d9 01       	movw	r26, r18
    6844:	aa 23       	and	r26, r26
    6846:	29 f4       	brne	.+10     	; 0x6852 <pow+0x50>
    6848:	ab 2f       	mov	r26, r27
    684a:	be 2f       	mov	r27, r30
    684c:	f8 5f       	subi	r31, 0xF8	; 248
    684e:	d0 f3       	brcs	.-12     	; 0x6844 <pow+0x42>
    6850:	10 c0       	rjmp	.+32     	; 0x6872 <pow+0x70>
    6852:	ff 5f       	subi	r31, 0xFF	; 255
    6854:	70 f4       	brcc	.+28     	; 0x6872 <pow+0x70>
    6856:	a6 95       	lsr	r26
    6858:	e0 f7       	brcc	.-8      	; 0x6852 <pow+0x50>
    685a:	f7 39       	cpi	r31, 0x97	; 151
    685c:	50 f0       	brcs	.+20     	; 0x6872 <pow+0x70>
    685e:	19 f0       	breq	.+6      	; 0x6866 <pow+0x64>
    6860:	ff 3a       	cpi	r31, 0xAF	; 175
    6862:	38 f4       	brcc	.+14     	; 0x6872 <pow+0x70>
    6864:	9f 77       	andi	r25, 0x7F	; 127
    6866:	9f 93       	push	r25
    6868:	0d d0       	rcall	.+26     	; 0x6884 <pow+0x82>
    686a:	0f 90       	pop	r0
    686c:	07 fc       	sbrc	r0, 7
    686e:	90 58       	subi	r25, 0x80	; 128
    6870:	08 95       	ret
    6872:	46 f0       	brts	.+16     	; 0x6884 <pow+0x82>
    6874:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__fp_nan>
    6878:	60 e0       	ldi	r22, 0x00	; 0
    687a:	70 e0       	ldi	r23, 0x00	; 0
    687c:	80 e8       	ldi	r24, 0x80	; 128
    687e:	9f e3       	ldi	r25, 0x3F	; 63
    6880:	08 95       	ret
    6882:	4f e7       	ldi	r20, 0x7F	; 127
    6884:	9f 77       	andi	r25, 0x7F	; 127
    6886:	5f 93       	push	r21
    6888:	4f 93       	push	r20
    688a:	3f 93       	push	r19
    688c:	2f 93       	push	r18
    688e:	ac d0       	rcall	.+344    	; 0x69e8 <log>
    6890:	2f 91       	pop	r18
    6892:	3f 91       	pop	r19
    6894:	4f 91       	pop	r20
    6896:	5f 91       	pop	r21
    6898:	0e 94 2f 23 	call	0x465e	; 0x465e <__mulsf3>
    689c:	08 c0       	rjmp	.+16     	; 0x68ae <exp>
    689e:	29 f4       	brne	.+10     	; 0x68aa <pow+0xa8>
    68a0:	16 f0       	brts	.+4      	; 0x68a6 <pow+0xa4>
    68a2:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__fp_inf>
    68a6:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__fp_zero>
    68aa:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__fp_nan>

000068ae <exp>:
    68ae:	0e 94 0e 23 	call	0x461c	; 0x461c <__fp_splitA>
    68b2:	a8 f3       	brcs	.-22     	; 0x689e <pow+0x9c>
    68b4:	96 38       	cpi	r25, 0x86	; 134
    68b6:	a0 f7       	brcc	.-24     	; 0x68a0 <pow+0x9e>
    68b8:	07 f8       	bld	r0, 7
    68ba:	0f 92       	push	r0
    68bc:	e8 94       	clt
    68be:	2b e3       	ldi	r18, 0x3B	; 59
    68c0:	3a ea       	ldi	r19, 0xAA	; 170
    68c2:	48 eb       	ldi	r20, 0xB8	; 184
    68c4:	5f e7       	ldi	r21, 0x7F	; 127
    68c6:	0e 94 3d 23 	call	0x467a	; 0x467a <__mulsf3_pse>
    68ca:	0f 92       	push	r0
    68cc:	0f 92       	push	r0
    68ce:	0f 92       	push	r0
    68d0:	4d b7       	in	r20, 0x3d	; 61
    68d2:	5e b7       	in	r21, 0x3e	; 62
    68d4:	0f 92       	push	r0
    68d6:	cf d0       	rcall	.+414    	; 0x6a76 <modf>
    68d8:	ea e9       	ldi	r30, 0x9A	; 154
    68da:	f1 e0       	ldi	r31, 0x01	; 1
    68dc:	16 d0       	rcall	.+44     	; 0x690a <__fp_powser>
    68de:	4f 91       	pop	r20
    68e0:	5f 91       	pop	r21
    68e2:	ef 91       	pop	r30
    68e4:	ff 91       	pop	r31
    68e6:	e5 95       	asr	r30
    68e8:	ee 1f       	adc	r30, r30
    68ea:	ff 1f       	adc	r31, r31
    68ec:	49 f0       	breq	.+18     	; 0x6900 <exp+0x52>
    68ee:	fe 57       	subi	r31, 0x7E	; 126
    68f0:	e0 68       	ori	r30, 0x80	; 128
    68f2:	44 27       	eor	r20, r20
    68f4:	ee 0f       	add	r30, r30
    68f6:	44 1f       	adc	r20, r20
    68f8:	fa 95       	dec	r31
    68fa:	e1 f7       	brne	.-8      	; 0x68f4 <exp+0x46>
    68fc:	41 95       	neg	r20
    68fe:	55 0b       	sbc	r21, r21
    6900:	36 d0       	rcall	.+108    	; 0x696e <ldexp>
    6902:	0f 90       	pop	r0
    6904:	07 fe       	sbrs	r0, 7
    6906:	28 c0       	rjmp	.+80     	; 0x6958 <inverse>
    6908:	08 95       	ret

0000690a <__fp_powser>:
    690a:	df 93       	push	r29
    690c:	cf 93       	push	r28
    690e:	1f 93       	push	r17
    6910:	0f 93       	push	r16
    6912:	ff 92       	push	r15
    6914:	ef 92       	push	r14
    6916:	df 92       	push	r13
    6918:	7b 01       	movw	r14, r22
    691a:	8c 01       	movw	r16, r24
    691c:	68 94       	set
    691e:	06 c0       	rjmp	.+12     	; 0x692c <__fp_powser+0x22>
    6920:	da 2e       	mov	r13, r26
    6922:	ef 01       	movw	r28, r30
    6924:	0e 94 3b 23 	call	0x4676	; 0x4676 <__mulsf3x>
    6928:	fe 01       	movw	r30, r28
    692a:	e8 94       	clt
    692c:	a5 91       	lpm	r26, Z+
    692e:	25 91       	lpm	r18, Z+
    6930:	35 91       	lpm	r19, Z+
    6932:	45 91       	lpm	r20, Z+
    6934:	55 91       	lpm	r21, Z+
    6936:	a6 f3       	brts	.-24     	; 0x6920 <__fp_powser+0x16>
    6938:	ef 01       	movw	r28, r30
    693a:	0e 94 b5 21 	call	0x436a	; 0x436a <__addsf3x>
    693e:	fe 01       	movw	r30, r28
    6940:	97 01       	movw	r18, r14
    6942:	a8 01       	movw	r20, r16
    6944:	da 94       	dec	r13
    6946:	69 f7       	brne	.-38     	; 0x6922 <__fp_powser+0x18>
    6948:	df 90       	pop	r13
    694a:	ef 90       	pop	r14
    694c:	ff 90       	pop	r15
    694e:	0f 91       	pop	r16
    6950:	1f 91       	pop	r17
    6952:	cf 91       	pop	r28
    6954:	df 91       	pop	r29
    6956:	08 95       	ret

00006958 <inverse>:
    6958:	9b 01       	movw	r18, r22
    695a:	ac 01       	movw	r20, r24
    695c:	60 e0       	ldi	r22, 0x00	; 0
    695e:	70 e0       	ldi	r23, 0x00	; 0
    6960:	80 e8       	ldi	r24, 0x80	; 128
    6962:	9f e3       	ldi	r25, 0x3F	; 63
    6964:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__divsf3>
    6968:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__fp_inf>
    696c:	24 cf       	rjmp	.-440    	; 0x67b6 <__fp_mpack>

0000696e <ldexp>:
    696e:	0e 94 0e 23 	call	0x461c	; 0x461c <__fp_splitA>
    6972:	e0 f3       	brcs	.-8      	; 0x696c <inverse+0x14>
    6974:	99 23       	and	r25, r25
    6976:	d1 f3       	breq	.-12     	; 0x696c <inverse+0x14>
    6978:	94 0f       	add	r25, r20
    697a:	51 1d       	adc	r21, r1
    697c:	ab f3       	brvs	.-22     	; 0x6968 <inverse+0x10>
    697e:	91 50       	subi	r25, 0x01	; 1
    6980:	50 40       	sbci	r21, 0x00	; 0
    6982:	94 f0       	brlt	.+36     	; 0x69a8 <ldexp+0x3a>
    6984:	59 f0       	breq	.+22     	; 0x699c <ldexp+0x2e>
    6986:	88 23       	and	r24, r24
    6988:	32 f0       	brmi	.+12     	; 0x6996 <ldexp+0x28>
    698a:	66 0f       	add	r22, r22
    698c:	77 1f       	adc	r23, r23
    698e:	88 1f       	adc	r24, r24
    6990:	91 50       	subi	r25, 0x01	; 1
    6992:	50 40       	sbci	r21, 0x00	; 0
    6994:	c1 f7       	brne	.-16     	; 0x6986 <ldexp+0x18>
    6996:	9e 3f       	cpi	r25, 0xFE	; 254
    6998:	51 05       	cpc	r21, r1
    699a:	34 f7       	brge	.-52     	; 0x6968 <inverse+0x10>
    699c:	88 0f       	add	r24, r24
    699e:	91 1d       	adc	r25, r1
    69a0:	96 95       	lsr	r25
    69a2:	87 95       	ror	r24
    69a4:	97 f9       	bld	r25, 7
    69a6:	08 95       	ret
    69a8:	5f 3f       	cpi	r21, 0xFF	; 255
    69aa:	ac f0       	brlt	.+42     	; 0x69d6 <ldexp+0x68>
    69ac:	98 3e       	cpi	r25, 0xE8	; 232
    69ae:	9c f0       	brlt	.+38     	; 0x69d6 <ldexp+0x68>
    69b0:	bb 27       	eor	r27, r27
    69b2:	86 95       	lsr	r24
    69b4:	77 95       	ror	r23
    69b6:	67 95       	ror	r22
    69b8:	b7 95       	ror	r27
    69ba:	08 f4       	brcc	.+2      	; 0x69be <ldexp+0x50>
    69bc:	b1 60       	ori	r27, 0x01	; 1
    69be:	93 95       	inc	r25
    69c0:	c1 f7       	brne	.-16     	; 0x69b2 <ldexp+0x44>
    69c2:	bb 0f       	add	r27, r27
    69c4:	58 f7       	brcc	.-42     	; 0x699c <ldexp+0x2e>
    69c6:	11 f4       	brne	.+4      	; 0x69cc <ldexp+0x5e>
    69c8:	60 ff       	sbrs	r22, 0
    69ca:	e8 cf       	rjmp	.-48     	; 0x699c <ldexp+0x2e>
    69cc:	6f 5f       	subi	r22, 0xFF	; 255
    69ce:	7f 4f       	sbci	r23, 0xFF	; 255
    69d0:	8f 4f       	sbci	r24, 0xFF	; 255
    69d2:	9f 4f       	sbci	r25, 0xFF	; 255
    69d4:	e3 cf       	rjmp	.-58     	; 0x699c <ldexp+0x2e>
    69d6:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__fp_szero>
    69da:	0e f0       	brts	.+2      	; 0x69de <ldexp+0x70>
    69dc:	ec ce       	rjmp	.-552    	; 0x67b6 <__fp_mpack>
    69de:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__fp_nan>
    69e2:	68 94       	set
    69e4:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__fp_inf>

000069e8 <log>:
    69e8:	0e 94 0e 23 	call	0x461c	; 0x461c <__fp_splitA>
    69ec:	b0 f3       	brcs	.-20     	; 0x69da <ldexp+0x6c>
    69ee:	99 23       	and	r25, r25
    69f0:	c1 f3       	breq	.-16     	; 0x69e2 <ldexp+0x74>
    69f2:	ae f3       	brts	.-22     	; 0x69de <ldexp+0x70>
    69f4:	df 93       	push	r29
    69f6:	cf 93       	push	r28
    69f8:	1f 93       	push	r17
    69fa:	0f 93       	push	r16
    69fc:	ff 92       	push	r15
    69fe:	c9 2f       	mov	r28, r25
    6a00:	dd 27       	eor	r29, r29
    6a02:	88 23       	and	r24, r24
    6a04:	2a f0       	brmi	.+10     	; 0x6a10 <log+0x28>
    6a06:	21 97       	sbiw	r28, 0x01	; 1
    6a08:	66 0f       	add	r22, r22
    6a0a:	77 1f       	adc	r23, r23
    6a0c:	88 1f       	adc	r24, r24
    6a0e:	da f7       	brpl	.-10     	; 0x6a06 <log+0x1e>
    6a10:	20 e0       	ldi	r18, 0x00	; 0
    6a12:	30 e0       	ldi	r19, 0x00	; 0
    6a14:	40 e8       	ldi	r20, 0x80	; 128
    6a16:	5f eb       	ldi	r21, 0xBF	; 191
    6a18:	9f e3       	ldi	r25, 0x3F	; 63
    6a1a:	88 39       	cpi	r24, 0x98	; 152
    6a1c:	20 f0       	brcs	.+8      	; 0x6a26 <log+0x3e>
    6a1e:	80 3e       	cpi	r24, 0xE0	; 224
    6a20:	38 f0       	brcs	.+14     	; 0x6a30 <log+0x48>
    6a22:	21 96       	adiw	r28, 0x01	; 1
    6a24:	8f 77       	andi	r24, 0x7F	; 127
    6a26:	0e 94 a4 21 	call	0x4348	; 0x4348 <__addsf3>
    6a2a:	e2 ec       	ldi	r30, 0xC2	; 194
    6a2c:	f1 e0       	ldi	r31, 0x01	; 1
    6a2e:	04 c0       	rjmp	.+8      	; 0x6a38 <log+0x50>
    6a30:	0e 94 a4 21 	call	0x4348	; 0x4348 <__addsf3>
    6a34:	ef ee       	ldi	r30, 0xEF	; 239
    6a36:	f1 e0       	ldi	r31, 0x01	; 1
    6a38:	68 df       	rcall	.-304    	; 0x690a <__fp_powser>
    6a3a:	8b 01       	movw	r16, r22
    6a3c:	be 01       	movw	r22, r28
    6a3e:	ec 01       	movw	r28, r24
    6a40:	fb 2e       	mov	r15, r27
    6a42:	6f 57       	subi	r22, 0x7F	; 127
    6a44:	71 09       	sbc	r23, r1
    6a46:	75 95       	asr	r23
    6a48:	77 1f       	adc	r23, r23
    6a4a:	88 0b       	sbc	r24, r24
    6a4c:	99 0b       	sbc	r25, r25
    6a4e:	0e 94 a3 22 	call	0x4546	; 0x4546 <__floatsisf>
    6a52:	28 e1       	ldi	r18, 0x18	; 24
    6a54:	32 e7       	ldi	r19, 0x72	; 114
    6a56:	41 e3       	ldi	r20, 0x31	; 49
    6a58:	5f e3       	ldi	r21, 0x3F	; 63
    6a5a:	0e 94 3b 23 	call	0x4676	; 0x4676 <__mulsf3x>
    6a5e:	af 2d       	mov	r26, r15
    6a60:	98 01       	movw	r18, r16
    6a62:	ae 01       	movw	r20, r28
    6a64:	ff 90       	pop	r15
    6a66:	0f 91       	pop	r16
    6a68:	1f 91       	pop	r17
    6a6a:	cf 91       	pop	r28
    6a6c:	df 91       	pop	r29
    6a6e:	0e 94 b5 21 	call	0x436a	; 0x436a <__addsf3x>
    6a72:	0c 94 f5 22 	jmp	0x45ea	; 0x45ea <__fp_round>

00006a76 <modf>:
    6a76:	fa 01       	movw	r30, r20
    6a78:	dc 01       	movw	r26, r24
    6a7a:	aa 0f       	add	r26, r26
    6a7c:	bb 1f       	adc	r27, r27
    6a7e:	9b 01       	movw	r18, r22
    6a80:	ac 01       	movw	r20, r24
    6a82:	bf 57       	subi	r27, 0x7F	; 127
    6a84:	28 f4       	brcc	.+10     	; 0x6a90 <modf+0x1a>
    6a86:	22 27       	eor	r18, r18
    6a88:	33 27       	eor	r19, r19
    6a8a:	44 27       	eor	r20, r20
    6a8c:	50 78       	andi	r21, 0x80	; 128
    6a8e:	20 c0       	rjmp	.+64     	; 0x6ad0 <modf+0x5a>
    6a90:	b7 51       	subi	r27, 0x17	; 23
    6a92:	90 f4       	brcc	.+36     	; 0x6ab8 <modf+0x42>
    6a94:	ab 2f       	mov	r26, r27
    6a96:	00 24       	eor	r0, r0
    6a98:	46 95       	lsr	r20
    6a9a:	37 95       	ror	r19
    6a9c:	27 95       	ror	r18
    6a9e:	01 1c       	adc	r0, r1
    6aa0:	a3 95       	inc	r26
    6aa2:	d2 f3       	brmi	.-12     	; 0x6a98 <modf+0x22>
    6aa4:	00 20       	and	r0, r0
    6aa6:	71 f0       	breq	.+28     	; 0x6ac4 <modf+0x4e>
    6aa8:	22 0f       	add	r18, r18
    6aaa:	33 1f       	adc	r19, r19
    6aac:	44 1f       	adc	r20, r20
    6aae:	b3 95       	inc	r27
    6ab0:	da f3       	brmi	.-10     	; 0x6aa8 <modf+0x32>
    6ab2:	0e d0       	rcall	.+28     	; 0x6ad0 <modf+0x5a>
    6ab4:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__subsf3>
    6ab8:	61 30       	cpi	r22, 0x01	; 1
    6aba:	71 05       	cpc	r23, r1
    6abc:	a0 e8       	ldi	r26, 0x80	; 128
    6abe:	8a 07       	cpc	r24, r26
    6ac0:	b9 46       	sbci	r27, 0x69	; 105
    6ac2:	30 f4       	brcc	.+12     	; 0x6ad0 <modf+0x5a>
    6ac4:	9b 01       	movw	r18, r22
    6ac6:	ac 01       	movw	r20, r24
    6ac8:	66 27       	eor	r22, r22
    6aca:	77 27       	eor	r23, r23
    6acc:	88 27       	eor	r24, r24
    6ace:	90 78       	andi	r25, 0x80	; 128
    6ad0:	30 96       	adiw	r30, 0x00	; 0
    6ad2:	21 f0       	breq	.+8      	; 0x6adc <modf+0x66>
    6ad4:	20 83       	st	Z, r18
    6ad6:	31 83       	std	Z+1, r19	; 0x01
    6ad8:	42 83       	std	Z+2, r20	; 0x02
    6ada:	53 83       	std	Z+3, r21	; 0x03
    6adc:	08 95       	ret

00006ade <__divmodhi4>:
    6ade:	97 fb       	bst	r25, 7
    6ae0:	07 2e       	mov	r0, r23
    6ae2:	16 f4       	brtc	.+4      	; 0x6ae8 <__divmodhi4+0xa>
    6ae4:	00 94       	com	r0
    6ae6:	06 d0       	rcall	.+12     	; 0x6af4 <__divmodhi4_neg1>
    6ae8:	77 fd       	sbrc	r23, 7
    6aea:	08 d0       	rcall	.+16     	; 0x6afc <__divmodhi4_neg2>
    6aec:	3f d0       	rcall	.+126    	; 0x6b6c <__udivmodhi4>
    6aee:	07 fc       	sbrc	r0, 7
    6af0:	05 d0       	rcall	.+10     	; 0x6afc <__divmodhi4_neg2>
    6af2:	3e f4       	brtc	.+14     	; 0x6b02 <__divmodhi4_exit>

00006af4 <__divmodhi4_neg1>:
    6af4:	90 95       	com	r25
    6af6:	81 95       	neg	r24
    6af8:	9f 4f       	sbci	r25, 0xFF	; 255
    6afa:	08 95       	ret

00006afc <__divmodhi4_neg2>:
    6afc:	70 95       	com	r23
    6afe:	61 95       	neg	r22
    6b00:	7f 4f       	sbci	r23, 0xFF	; 255

00006b02 <__divmodhi4_exit>:
    6b02:	08 95       	ret

00006b04 <__udivmodsi4>:
    6b04:	a1 e2       	ldi	r26, 0x21	; 33
    6b06:	1a 2e       	mov	r1, r26
    6b08:	aa 1b       	sub	r26, r26
    6b0a:	bb 1b       	sub	r27, r27
    6b0c:	fd 01       	movw	r30, r26
    6b0e:	0d c0       	rjmp	.+26     	; 0x6b2a <__udivmodsi4_ep>

00006b10 <__udivmodsi4_loop>:
    6b10:	aa 1f       	adc	r26, r26
    6b12:	bb 1f       	adc	r27, r27
    6b14:	ee 1f       	adc	r30, r30
    6b16:	ff 1f       	adc	r31, r31
    6b18:	a2 17       	cp	r26, r18
    6b1a:	b3 07       	cpc	r27, r19
    6b1c:	e4 07       	cpc	r30, r20
    6b1e:	f5 07       	cpc	r31, r21
    6b20:	20 f0       	brcs	.+8      	; 0x6b2a <__udivmodsi4_ep>
    6b22:	a2 1b       	sub	r26, r18
    6b24:	b3 0b       	sbc	r27, r19
    6b26:	e4 0b       	sbc	r30, r20
    6b28:	f5 0b       	sbc	r31, r21

00006b2a <__udivmodsi4_ep>:
    6b2a:	66 1f       	adc	r22, r22
    6b2c:	77 1f       	adc	r23, r23
    6b2e:	88 1f       	adc	r24, r24
    6b30:	99 1f       	adc	r25, r25
    6b32:	1a 94       	dec	r1
    6b34:	69 f7       	brne	.-38     	; 0x6b10 <__udivmodsi4_loop>
    6b36:	60 95       	com	r22
    6b38:	70 95       	com	r23
    6b3a:	80 95       	com	r24
    6b3c:	90 95       	com	r25
    6b3e:	9b 01       	movw	r18, r22
    6b40:	ac 01       	movw	r20, r24
    6b42:	bd 01       	movw	r22, r26
    6b44:	cf 01       	movw	r24, r30
    6b46:	08 95       	ret

00006b48 <__tablejump2__>:
    6b48:	ee 0f       	add	r30, r30
    6b4a:	ff 1f       	adc	r31, r31
    6b4c:	88 1f       	adc	r24, r24
    6b4e:	8b bf       	out	0x3b, r24	; 59
    6b50:	07 90       	elpm	r0, Z+
    6b52:	f6 91       	elpm	r31, Z
    6b54:	e0 2d       	mov	r30, r0
    6b56:	19 94       	eijmp

00006b58 <__muluhisi3>:
    6b58:	1d d0       	rcall	.+58     	; 0x6b94 <__umulhisi3>
    6b5a:	a5 9f       	mul	r26, r21
    6b5c:	90 0d       	add	r25, r0
    6b5e:	b4 9f       	mul	r27, r20
    6b60:	90 0d       	add	r25, r0
    6b62:	a4 9f       	mul	r26, r20
    6b64:	80 0d       	add	r24, r0
    6b66:	91 1d       	adc	r25, r1
    6b68:	11 24       	eor	r1, r1
    6b6a:	08 95       	ret

00006b6c <__udivmodhi4>:
    6b6c:	aa 1b       	sub	r26, r26
    6b6e:	bb 1b       	sub	r27, r27
    6b70:	51 e1       	ldi	r21, 0x11	; 17
    6b72:	07 c0       	rjmp	.+14     	; 0x6b82 <__udivmodhi4_ep>

00006b74 <__udivmodhi4_loop>:
    6b74:	aa 1f       	adc	r26, r26
    6b76:	bb 1f       	adc	r27, r27
    6b78:	a6 17       	cp	r26, r22
    6b7a:	b7 07       	cpc	r27, r23
    6b7c:	10 f0       	brcs	.+4      	; 0x6b82 <__udivmodhi4_ep>
    6b7e:	a6 1b       	sub	r26, r22
    6b80:	b7 0b       	sbc	r27, r23

00006b82 <__udivmodhi4_ep>:
    6b82:	88 1f       	adc	r24, r24
    6b84:	99 1f       	adc	r25, r25
    6b86:	5a 95       	dec	r21
    6b88:	a9 f7       	brne	.-22     	; 0x6b74 <__udivmodhi4_loop>
    6b8a:	80 95       	com	r24
    6b8c:	90 95       	com	r25
    6b8e:	bc 01       	movw	r22, r24
    6b90:	cd 01       	movw	r24, r26
    6b92:	08 95       	ret

00006b94 <__umulhisi3>:
    6b94:	a2 9f       	mul	r26, r18
    6b96:	b0 01       	movw	r22, r0
    6b98:	b3 9f       	mul	r27, r19
    6b9a:	c0 01       	movw	r24, r0
    6b9c:	a3 9f       	mul	r26, r19
    6b9e:	70 0d       	add	r23, r0
    6ba0:	81 1d       	adc	r24, r1
    6ba2:	11 24       	eor	r1, r1
    6ba4:	91 1d       	adc	r25, r1
    6ba6:	b2 9f       	mul	r27, r18
    6ba8:	70 0d       	add	r23, r0
    6baa:	81 1d       	adc	r24, r1
    6bac:	11 24       	eor	r1, r1
    6bae:	91 1d       	adc	r25, r1
    6bb0:	08 95       	ret

00006bb2 <calloc>:
    6bb2:	0f 93       	push	r16
    6bb4:	1f 93       	push	r17
    6bb6:	cf 93       	push	r28
    6bb8:	df 93       	push	r29
    6bba:	86 9f       	mul	r24, r22
    6bbc:	80 01       	movw	r16, r0
    6bbe:	87 9f       	mul	r24, r23
    6bc0:	10 0d       	add	r17, r0
    6bc2:	96 9f       	mul	r25, r22
    6bc4:	10 0d       	add	r17, r0
    6bc6:	11 24       	eor	r1, r1
    6bc8:	c8 01       	movw	r24, r16
    6bca:	0d d0       	rcall	.+26     	; 0x6be6 <malloc>
    6bcc:	ec 01       	movw	r28, r24
    6bce:	00 97       	sbiw	r24, 0x00	; 0
    6bd0:	21 f0       	breq	.+8      	; 0x6bda <calloc+0x28>
    6bd2:	a8 01       	movw	r20, r16
    6bd4:	60 e0       	ldi	r22, 0x00	; 0
    6bd6:	70 e0       	ldi	r23, 0x00	; 0
    6bd8:	34 d1       	rcall	.+616    	; 0x6e42 <memset>
    6bda:	ce 01       	movw	r24, r28
    6bdc:	df 91       	pop	r29
    6bde:	cf 91       	pop	r28
    6be0:	1f 91       	pop	r17
    6be2:	0f 91       	pop	r16
    6be4:	08 95       	ret

00006be6 <malloc>:
    6be6:	0f 93       	push	r16
    6be8:	1f 93       	push	r17
    6bea:	cf 93       	push	r28
    6bec:	df 93       	push	r29
    6bee:	82 30       	cpi	r24, 0x02	; 2
    6bf0:	91 05       	cpc	r25, r1
    6bf2:	10 f4       	brcc	.+4      	; 0x6bf8 <malloc+0x12>
    6bf4:	82 e0       	ldi	r24, 0x02	; 2
    6bf6:	90 e0       	ldi	r25, 0x00	; 0
    6bf8:	e0 91 5b 15 	lds	r30, 0x155B	; 0x80155b <__flp>
    6bfc:	f0 91 5c 15 	lds	r31, 0x155C	; 0x80155c <__flp+0x1>
    6c00:	20 e0       	ldi	r18, 0x00	; 0
    6c02:	30 e0       	ldi	r19, 0x00	; 0
    6c04:	a0 e0       	ldi	r26, 0x00	; 0
    6c06:	b0 e0       	ldi	r27, 0x00	; 0
    6c08:	30 97       	sbiw	r30, 0x00	; 0
    6c0a:	19 f1       	breq	.+70     	; 0x6c52 <malloc+0x6c>
    6c0c:	40 81       	ld	r20, Z
    6c0e:	51 81       	ldd	r21, Z+1	; 0x01
    6c10:	02 81       	ldd	r16, Z+2	; 0x02
    6c12:	13 81       	ldd	r17, Z+3	; 0x03
    6c14:	48 17       	cp	r20, r24
    6c16:	59 07       	cpc	r21, r25
    6c18:	c8 f0       	brcs	.+50     	; 0x6c4c <malloc+0x66>
    6c1a:	84 17       	cp	r24, r20
    6c1c:	95 07       	cpc	r25, r21
    6c1e:	69 f4       	brne	.+26     	; 0x6c3a <malloc+0x54>
    6c20:	10 97       	sbiw	r26, 0x00	; 0
    6c22:	31 f0       	breq	.+12     	; 0x6c30 <malloc+0x4a>
    6c24:	12 96       	adiw	r26, 0x02	; 2
    6c26:	0c 93       	st	X, r16
    6c28:	12 97       	sbiw	r26, 0x02	; 2
    6c2a:	13 96       	adiw	r26, 0x03	; 3
    6c2c:	1c 93       	st	X, r17
    6c2e:	27 c0       	rjmp	.+78     	; 0x6c7e <malloc+0x98>
    6c30:	00 93 5b 15 	sts	0x155B, r16	; 0x80155b <__flp>
    6c34:	10 93 5c 15 	sts	0x155C, r17	; 0x80155c <__flp+0x1>
    6c38:	22 c0       	rjmp	.+68     	; 0x6c7e <malloc+0x98>
    6c3a:	21 15       	cp	r18, r1
    6c3c:	31 05       	cpc	r19, r1
    6c3e:	19 f0       	breq	.+6      	; 0x6c46 <malloc+0x60>
    6c40:	42 17       	cp	r20, r18
    6c42:	53 07       	cpc	r21, r19
    6c44:	18 f4       	brcc	.+6      	; 0x6c4c <malloc+0x66>
    6c46:	9a 01       	movw	r18, r20
    6c48:	bd 01       	movw	r22, r26
    6c4a:	ef 01       	movw	r28, r30
    6c4c:	df 01       	movw	r26, r30
    6c4e:	f8 01       	movw	r30, r16
    6c50:	db cf       	rjmp	.-74     	; 0x6c08 <malloc+0x22>
    6c52:	21 15       	cp	r18, r1
    6c54:	31 05       	cpc	r19, r1
    6c56:	f9 f0       	breq	.+62     	; 0x6c96 <malloc+0xb0>
    6c58:	28 1b       	sub	r18, r24
    6c5a:	39 0b       	sbc	r19, r25
    6c5c:	24 30       	cpi	r18, 0x04	; 4
    6c5e:	31 05       	cpc	r19, r1
    6c60:	80 f4       	brcc	.+32     	; 0x6c82 <malloc+0x9c>
    6c62:	8a 81       	ldd	r24, Y+2	; 0x02
    6c64:	9b 81       	ldd	r25, Y+3	; 0x03
    6c66:	61 15       	cp	r22, r1
    6c68:	71 05       	cpc	r23, r1
    6c6a:	21 f0       	breq	.+8      	; 0x6c74 <malloc+0x8e>
    6c6c:	fb 01       	movw	r30, r22
    6c6e:	93 83       	std	Z+3, r25	; 0x03
    6c70:	82 83       	std	Z+2, r24	; 0x02
    6c72:	04 c0       	rjmp	.+8      	; 0x6c7c <malloc+0x96>
    6c74:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <__flp+0x1>
    6c78:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <__flp>
    6c7c:	fe 01       	movw	r30, r28
    6c7e:	32 96       	adiw	r30, 0x02	; 2
    6c80:	44 c0       	rjmp	.+136    	; 0x6d0a <malloc+0x124>
    6c82:	fe 01       	movw	r30, r28
    6c84:	e2 0f       	add	r30, r18
    6c86:	f3 1f       	adc	r31, r19
    6c88:	81 93       	st	Z+, r24
    6c8a:	91 93       	st	Z+, r25
    6c8c:	22 50       	subi	r18, 0x02	; 2
    6c8e:	31 09       	sbc	r19, r1
    6c90:	39 83       	std	Y+1, r19	; 0x01
    6c92:	28 83       	st	Y, r18
    6c94:	3a c0       	rjmp	.+116    	; 0x6d0a <malloc+0x124>
    6c96:	20 91 59 15 	lds	r18, 0x1559	; 0x801559 <__brkval>
    6c9a:	30 91 5a 15 	lds	r19, 0x155A	; 0x80155a <__brkval+0x1>
    6c9e:	23 2b       	or	r18, r19
    6ca0:	41 f4       	brne	.+16     	; 0x6cb2 <malloc+0xcc>
    6ca2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6ca6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6caa:	30 93 5a 15 	sts	0x155A, r19	; 0x80155a <__brkval+0x1>
    6cae:	20 93 59 15 	sts	0x1559, r18	; 0x801559 <__brkval>
    6cb2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6cb6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6cba:	21 15       	cp	r18, r1
    6cbc:	31 05       	cpc	r19, r1
    6cbe:	41 f4       	brne	.+16     	; 0x6cd0 <malloc+0xea>
    6cc0:	2d b7       	in	r18, 0x3d	; 61
    6cc2:	3e b7       	in	r19, 0x3e	; 62
    6cc4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6cc8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6ccc:	24 1b       	sub	r18, r20
    6cce:	35 0b       	sbc	r19, r21
    6cd0:	e0 91 59 15 	lds	r30, 0x1559	; 0x801559 <__brkval>
    6cd4:	f0 91 5a 15 	lds	r31, 0x155A	; 0x80155a <__brkval+0x1>
    6cd8:	e2 17       	cp	r30, r18
    6cda:	f3 07       	cpc	r31, r19
    6cdc:	a0 f4       	brcc	.+40     	; 0x6d06 <malloc+0x120>
    6cde:	2e 1b       	sub	r18, r30
    6ce0:	3f 0b       	sbc	r19, r31
    6ce2:	28 17       	cp	r18, r24
    6ce4:	39 07       	cpc	r19, r25
    6ce6:	78 f0       	brcs	.+30     	; 0x6d06 <malloc+0x120>
    6ce8:	ac 01       	movw	r20, r24
    6cea:	4e 5f       	subi	r20, 0xFE	; 254
    6cec:	5f 4f       	sbci	r21, 0xFF	; 255
    6cee:	24 17       	cp	r18, r20
    6cf0:	35 07       	cpc	r19, r21
    6cf2:	48 f0       	brcs	.+18     	; 0x6d06 <malloc+0x120>
    6cf4:	4e 0f       	add	r20, r30
    6cf6:	5f 1f       	adc	r21, r31
    6cf8:	50 93 5a 15 	sts	0x155A, r21	; 0x80155a <__brkval+0x1>
    6cfc:	40 93 59 15 	sts	0x1559, r20	; 0x801559 <__brkval>
    6d00:	81 93       	st	Z+, r24
    6d02:	91 93       	st	Z+, r25
    6d04:	02 c0       	rjmp	.+4      	; 0x6d0a <malloc+0x124>
    6d06:	e0 e0       	ldi	r30, 0x00	; 0
    6d08:	f0 e0       	ldi	r31, 0x00	; 0
    6d0a:	cf 01       	movw	r24, r30
    6d0c:	df 91       	pop	r29
    6d0e:	cf 91       	pop	r28
    6d10:	1f 91       	pop	r17
    6d12:	0f 91       	pop	r16
    6d14:	08 95       	ret

00006d16 <free>:
    6d16:	cf 93       	push	r28
    6d18:	df 93       	push	r29
    6d1a:	00 97       	sbiw	r24, 0x00	; 0
    6d1c:	09 f4       	brne	.+2      	; 0x6d20 <free+0xa>
    6d1e:	81 c0       	rjmp	.+258    	; 0x6e22 <free+0x10c>
    6d20:	fc 01       	movw	r30, r24
    6d22:	32 97       	sbiw	r30, 0x02	; 2
    6d24:	13 82       	std	Z+3, r1	; 0x03
    6d26:	12 82       	std	Z+2, r1	; 0x02
    6d28:	a0 91 5b 15 	lds	r26, 0x155B	; 0x80155b <__flp>
    6d2c:	b0 91 5c 15 	lds	r27, 0x155C	; 0x80155c <__flp+0x1>
    6d30:	10 97       	sbiw	r26, 0x00	; 0
    6d32:	81 f4       	brne	.+32     	; 0x6d54 <free+0x3e>
    6d34:	20 81       	ld	r18, Z
    6d36:	31 81       	ldd	r19, Z+1	; 0x01
    6d38:	82 0f       	add	r24, r18
    6d3a:	93 1f       	adc	r25, r19
    6d3c:	20 91 59 15 	lds	r18, 0x1559	; 0x801559 <__brkval>
    6d40:	30 91 5a 15 	lds	r19, 0x155A	; 0x80155a <__brkval+0x1>
    6d44:	28 17       	cp	r18, r24
    6d46:	39 07       	cpc	r19, r25
    6d48:	51 f5       	brne	.+84     	; 0x6d9e <free+0x88>
    6d4a:	f0 93 5a 15 	sts	0x155A, r31	; 0x80155a <__brkval+0x1>
    6d4e:	e0 93 59 15 	sts	0x1559, r30	; 0x801559 <__brkval>
    6d52:	67 c0       	rjmp	.+206    	; 0x6e22 <free+0x10c>
    6d54:	ed 01       	movw	r28, r26
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	ce 17       	cp	r28, r30
    6d5c:	df 07       	cpc	r29, r31
    6d5e:	40 f4       	brcc	.+16     	; 0x6d70 <free+0x5a>
    6d60:	4a 81       	ldd	r20, Y+2	; 0x02
    6d62:	5b 81       	ldd	r21, Y+3	; 0x03
    6d64:	9e 01       	movw	r18, r28
    6d66:	41 15       	cp	r20, r1
    6d68:	51 05       	cpc	r21, r1
    6d6a:	f1 f0       	breq	.+60     	; 0x6da8 <free+0x92>
    6d6c:	ea 01       	movw	r28, r20
    6d6e:	f5 cf       	rjmp	.-22     	; 0x6d5a <free+0x44>
    6d70:	d3 83       	std	Z+3, r29	; 0x03
    6d72:	c2 83       	std	Z+2, r28	; 0x02
    6d74:	40 81       	ld	r20, Z
    6d76:	51 81       	ldd	r21, Z+1	; 0x01
    6d78:	84 0f       	add	r24, r20
    6d7a:	95 1f       	adc	r25, r21
    6d7c:	c8 17       	cp	r28, r24
    6d7e:	d9 07       	cpc	r29, r25
    6d80:	59 f4       	brne	.+22     	; 0x6d98 <free+0x82>
    6d82:	88 81       	ld	r24, Y
    6d84:	99 81       	ldd	r25, Y+1	; 0x01
    6d86:	84 0f       	add	r24, r20
    6d88:	95 1f       	adc	r25, r21
    6d8a:	02 96       	adiw	r24, 0x02	; 2
    6d8c:	91 83       	std	Z+1, r25	; 0x01
    6d8e:	80 83       	st	Z, r24
    6d90:	8a 81       	ldd	r24, Y+2	; 0x02
    6d92:	9b 81       	ldd	r25, Y+3	; 0x03
    6d94:	93 83       	std	Z+3, r25	; 0x03
    6d96:	82 83       	std	Z+2, r24	; 0x02
    6d98:	21 15       	cp	r18, r1
    6d9a:	31 05       	cpc	r19, r1
    6d9c:	29 f4       	brne	.+10     	; 0x6da8 <free+0x92>
    6d9e:	f0 93 5c 15 	sts	0x155C, r31	; 0x80155c <__flp+0x1>
    6da2:	e0 93 5b 15 	sts	0x155B, r30	; 0x80155b <__flp>
    6da6:	3d c0       	rjmp	.+122    	; 0x6e22 <free+0x10c>
    6da8:	e9 01       	movw	r28, r18
    6daa:	fb 83       	std	Y+3, r31	; 0x03
    6dac:	ea 83       	std	Y+2, r30	; 0x02
    6dae:	49 91       	ld	r20, Y+
    6db0:	59 91       	ld	r21, Y+
    6db2:	c4 0f       	add	r28, r20
    6db4:	d5 1f       	adc	r29, r21
    6db6:	ec 17       	cp	r30, r28
    6db8:	fd 07       	cpc	r31, r29
    6dba:	61 f4       	brne	.+24     	; 0x6dd4 <free+0xbe>
    6dbc:	80 81       	ld	r24, Z
    6dbe:	91 81       	ldd	r25, Z+1	; 0x01
    6dc0:	84 0f       	add	r24, r20
    6dc2:	95 1f       	adc	r25, r21
    6dc4:	02 96       	adiw	r24, 0x02	; 2
    6dc6:	e9 01       	movw	r28, r18
    6dc8:	99 83       	std	Y+1, r25	; 0x01
    6dca:	88 83       	st	Y, r24
    6dcc:	82 81       	ldd	r24, Z+2	; 0x02
    6dce:	93 81       	ldd	r25, Z+3	; 0x03
    6dd0:	9b 83       	std	Y+3, r25	; 0x03
    6dd2:	8a 83       	std	Y+2, r24	; 0x02
    6dd4:	e0 e0       	ldi	r30, 0x00	; 0
    6dd6:	f0 e0       	ldi	r31, 0x00	; 0
    6dd8:	12 96       	adiw	r26, 0x02	; 2
    6dda:	8d 91       	ld	r24, X+
    6ddc:	9c 91       	ld	r25, X
    6dde:	13 97       	sbiw	r26, 0x03	; 3
    6de0:	00 97       	sbiw	r24, 0x00	; 0
    6de2:	19 f0       	breq	.+6      	; 0x6dea <free+0xd4>
    6de4:	fd 01       	movw	r30, r26
    6de6:	dc 01       	movw	r26, r24
    6de8:	f7 cf       	rjmp	.-18     	; 0x6dd8 <free+0xc2>
    6dea:	8d 91       	ld	r24, X+
    6dec:	9c 91       	ld	r25, X
    6dee:	11 97       	sbiw	r26, 0x01	; 1
    6df0:	9d 01       	movw	r18, r26
    6df2:	2e 5f       	subi	r18, 0xFE	; 254
    6df4:	3f 4f       	sbci	r19, 0xFF	; 255
    6df6:	82 0f       	add	r24, r18
    6df8:	93 1f       	adc	r25, r19
    6dfa:	20 91 59 15 	lds	r18, 0x1559	; 0x801559 <__brkval>
    6dfe:	30 91 5a 15 	lds	r19, 0x155A	; 0x80155a <__brkval+0x1>
    6e02:	28 17       	cp	r18, r24
    6e04:	39 07       	cpc	r19, r25
    6e06:	69 f4       	brne	.+26     	; 0x6e22 <free+0x10c>
    6e08:	30 97       	sbiw	r30, 0x00	; 0
    6e0a:	29 f4       	brne	.+10     	; 0x6e16 <free+0x100>
    6e0c:	10 92 5c 15 	sts	0x155C, r1	; 0x80155c <__flp+0x1>
    6e10:	10 92 5b 15 	sts	0x155B, r1	; 0x80155b <__flp>
    6e14:	02 c0       	rjmp	.+4      	; 0x6e1a <free+0x104>
    6e16:	13 82       	std	Z+3, r1	; 0x03
    6e18:	12 82       	std	Z+2, r1	; 0x02
    6e1a:	b0 93 5a 15 	sts	0x155A, r27	; 0x80155a <__brkval+0x1>
    6e1e:	a0 93 59 15 	sts	0x1559, r26	; 0x801559 <__brkval>
    6e22:	df 91       	pop	r29
    6e24:	cf 91       	pop	r28
    6e26:	08 95       	ret

00006e28 <abort>:
    6e28:	81 e0       	ldi	r24, 0x01	; 1
    6e2a:	90 e0       	ldi	r25, 0x00	; 0
    6e2c:	f8 94       	cli
    6e2e:	7d c3       	rjmp	.+1786   	; 0x752a <_exit>

00006e30 <memcpy>:
    6e30:	fb 01       	movw	r30, r22
    6e32:	dc 01       	movw	r26, r24
    6e34:	02 c0       	rjmp	.+4      	; 0x6e3a <memcpy+0xa>
    6e36:	01 90       	ld	r0, Z+
    6e38:	0d 92       	st	X+, r0
    6e3a:	41 50       	subi	r20, 0x01	; 1
    6e3c:	50 40       	sbci	r21, 0x00	; 0
    6e3e:	d8 f7       	brcc	.-10     	; 0x6e36 <memcpy+0x6>
    6e40:	08 95       	ret

00006e42 <memset>:
    6e42:	dc 01       	movw	r26, r24
    6e44:	01 c0       	rjmp	.+2      	; 0x6e48 <memset+0x6>
    6e46:	6d 93       	st	X+, r22
    6e48:	41 50       	subi	r20, 0x01	; 1
    6e4a:	50 40       	sbci	r21, 0x00	; 0
    6e4c:	e0 f7       	brcc	.-8      	; 0x6e46 <memset+0x4>
    6e4e:	08 95       	ret

00006e50 <strcasestr>:
    6e50:	fb 01       	movw	r30, r22
    6e52:	51 91       	ld	r21, Z+
    6e54:	55 23       	and	r21, r21
    6e56:	b1 f0       	breq	.+44     	; 0x6e84 <strcasestr+0x34>
    6e58:	bf 01       	movw	r22, r30
    6e5a:	dc 01       	movw	r26, r24
    6e5c:	05 2e       	mov	r0, r21
    6e5e:	4d 91       	ld	r20, X+
    6e60:	44 23       	and	r20, r20
    6e62:	69 f0       	breq	.+26     	; 0x6e7e <strcasestr+0x2e>
    6e64:	10 d0       	rcall	.+32     	; 0x6e86 <strcasestr+0x36>
    6e66:	d9 f7       	brne	.-10     	; 0x6e5e <strcasestr+0xe>
    6e68:	cd 01       	movw	r24, r26
    6e6a:	01 90       	ld	r0, Z+
    6e6c:	00 20       	and	r0, r0
    6e6e:	49 f0       	breq	.+18     	; 0x6e82 <strcasestr+0x32>
    6e70:	4d 91       	ld	r20, X+
    6e72:	41 11       	cpse	r20, r1
    6e74:	08 d0       	rcall	.+16     	; 0x6e86 <strcasestr+0x36>
    6e76:	c9 f3       	breq	.-14     	; 0x6e6a <strcasestr+0x1a>
    6e78:	fb 01       	movw	r30, r22
    6e7a:	41 11       	cpse	r20, r1
    6e7c:	ee cf       	rjmp	.-36     	; 0x6e5a <strcasestr+0xa>
    6e7e:	81 e0       	ldi	r24, 0x01	; 1
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	01 97       	sbiw	r24, 0x01	; 1
    6e84:	08 95       	ret
    6e86:	40 25       	eor	r20, r0
    6e88:	39 f0       	breq	.+14     	; 0x6e98 <strcasestr+0x48>
    6e8a:	40 32       	cpi	r20, 0x20	; 32
    6e8c:	29 f4       	brne	.+10     	; 0x6e98 <strcasestr+0x48>
    6e8e:	40 29       	or	r20, r0
    6e90:	4b 57       	subi	r20, 0x7B	; 123
    6e92:	46 5e       	subi	r20, 0xE6	; 230
    6e94:	08 f0       	brcs	.+2      	; 0x6e98 <strcasestr+0x48>
    6e96:	18 94       	sez
    6e98:	08 95       	ret

00006e9a <strcat>:
    6e9a:	fb 01       	movw	r30, r22
    6e9c:	dc 01       	movw	r26, r24
    6e9e:	0d 90       	ld	r0, X+
    6ea0:	00 20       	and	r0, r0
    6ea2:	e9 f7       	brne	.-6      	; 0x6e9e <strcat+0x4>
    6ea4:	11 97       	sbiw	r26, 0x01	; 1
    6ea6:	01 90       	ld	r0, Z+
    6ea8:	0d 92       	st	X+, r0
    6eaa:	00 20       	and	r0, r0
    6eac:	e1 f7       	brne	.-8      	; 0x6ea6 <strcat+0xc>
    6eae:	08 95       	ret

00006eb0 <strcpy>:
    6eb0:	fb 01       	movw	r30, r22
    6eb2:	dc 01       	movw	r26, r24
    6eb4:	01 90       	ld	r0, Z+
    6eb6:	0d 92       	st	X+, r0
    6eb8:	00 20       	and	r0, r0
    6eba:	e1 f7       	brne	.-8      	; 0x6eb4 <strcpy+0x4>
    6ebc:	08 95       	ret

00006ebe <strncasecmp>:
    6ebe:	fb 01       	movw	r30, r22
    6ec0:	dc 01       	movw	r26, r24
    6ec2:	41 50       	subi	r20, 0x01	; 1
    6ec4:	50 40       	sbci	r21, 0x00	; 0
    6ec6:	88 f0       	brcs	.+34     	; 0x6eea <strncasecmp+0x2c>
    6ec8:	8d 91       	ld	r24, X+
    6eca:	81 34       	cpi	r24, 0x41	; 65
    6ecc:	1c f0       	brlt	.+6      	; 0x6ed4 <strncasecmp+0x16>
    6ece:	8b 35       	cpi	r24, 0x5B	; 91
    6ed0:	0c f4       	brge	.+2      	; 0x6ed4 <strncasecmp+0x16>
    6ed2:	80 5e       	subi	r24, 0xE0	; 224
    6ed4:	61 91       	ld	r22, Z+
    6ed6:	61 34       	cpi	r22, 0x41	; 65
    6ed8:	1c f0       	brlt	.+6      	; 0x6ee0 <strncasecmp+0x22>
    6eda:	6b 35       	cpi	r22, 0x5B	; 91
    6edc:	0c f4       	brge	.+2      	; 0x6ee0 <strncasecmp+0x22>
    6ede:	60 5e       	subi	r22, 0xE0	; 224
    6ee0:	86 1b       	sub	r24, r22
    6ee2:	61 11       	cpse	r22, r1
    6ee4:	71 f3       	breq	.-36     	; 0x6ec2 <strncasecmp+0x4>
    6ee6:	99 0b       	sbc	r25, r25
    6ee8:	08 95       	ret
    6eea:	88 1b       	sub	r24, r24
    6eec:	fc cf       	rjmp	.-8      	; 0x6ee6 <strncasecmp+0x28>

00006eee <printf>:
    6eee:	cf 93       	push	r28
    6ef0:	df 93       	push	r29
    6ef2:	cd b7       	in	r28, 0x3d	; 61
    6ef4:	de b7       	in	r29, 0x3e	; 62
    6ef6:	ae 01       	movw	r20, r28
    6ef8:	4a 5f       	subi	r20, 0xFA	; 250
    6efa:	5f 4f       	sbci	r21, 0xFF	; 255
    6efc:	fa 01       	movw	r30, r20
    6efe:	61 91       	ld	r22, Z+
    6f00:	71 91       	ld	r23, Z+
    6f02:	af 01       	movw	r20, r30
    6f04:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <__iob+0x2>
    6f08:	90 91 60 15 	lds	r25, 0x1560	; 0x801560 <__iob+0x3>
    6f0c:	61 d0       	rcall	.+194    	; 0x6fd0 <vfprintf>
    6f0e:	df 91       	pop	r29
    6f10:	cf 91       	pop	r28
    6f12:	08 95       	ret

00006f14 <puts>:
    6f14:	0f 93       	push	r16
    6f16:	1f 93       	push	r17
    6f18:	cf 93       	push	r28
    6f1a:	df 93       	push	r29
    6f1c:	e0 91 5f 15 	lds	r30, 0x155F	; 0x80155f <__iob+0x2>
    6f20:	f0 91 60 15 	lds	r31, 0x1560	; 0x801560 <__iob+0x3>
    6f24:	23 81       	ldd	r18, Z+3	; 0x03
    6f26:	21 ff       	sbrs	r18, 1
    6f28:	1b c0       	rjmp	.+54     	; 0x6f60 <puts+0x4c>
    6f2a:	8c 01       	movw	r16, r24
    6f2c:	d0 e0       	ldi	r29, 0x00	; 0
    6f2e:	c0 e0       	ldi	r28, 0x00	; 0
    6f30:	f8 01       	movw	r30, r16
    6f32:	81 91       	ld	r24, Z+
    6f34:	8f 01       	movw	r16, r30
    6f36:	60 91 5f 15 	lds	r22, 0x155F	; 0x80155f <__iob+0x2>
    6f3a:	70 91 60 15 	lds	r23, 0x1560	; 0x801560 <__iob+0x3>
    6f3e:	db 01       	movw	r26, r22
    6f40:	18 96       	adiw	r26, 0x08	; 8
    6f42:	ed 91       	ld	r30, X+
    6f44:	fc 91       	ld	r31, X
    6f46:	19 97       	sbiw	r26, 0x09	; 9
    6f48:	88 23       	and	r24, r24
    6f4a:	31 f0       	breq	.+12     	; 0x6f58 <puts+0x44>
    6f4c:	19 95       	eicall
    6f4e:	89 2b       	or	r24, r25
    6f50:	79 f3       	breq	.-34     	; 0x6f30 <puts+0x1c>
    6f52:	df ef       	ldi	r29, 0xFF	; 255
    6f54:	cf ef       	ldi	r28, 0xFF	; 255
    6f56:	ec cf       	rjmp	.-40     	; 0x6f30 <puts+0x1c>
    6f58:	8a e0       	ldi	r24, 0x0A	; 10
    6f5a:	19 95       	eicall
    6f5c:	89 2b       	or	r24, r25
    6f5e:	19 f0       	breq	.+6      	; 0x6f66 <puts+0x52>
    6f60:	8f ef       	ldi	r24, 0xFF	; 255
    6f62:	9f ef       	ldi	r25, 0xFF	; 255
    6f64:	02 c0       	rjmp	.+4      	; 0x6f6a <puts+0x56>
    6f66:	8d 2f       	mov	r24, r29
    6f68:	9c 2f       	mov	r25, r28
    6f6a:	df 91       	pop	r29
    6f6c:	cf 91       	pop	r28
    6f6e:	1f 91       	pop	r17
    6f70:	0f 91       	pop	r16
    6f72:	08 95       	ret

00006f74 <sprintf>:
    6f74:	0f 93       	push	r16
    6f76:	1f 93       	push	r17
    6f78:	cf 93       	push	r28
    6f7a:	df 93       	push	r29
    6f7c:	cd b7       	in	r28, 0x3d	; 61
    6f7e:	de b7       	in	r29, 0x3e	; 62
    6f80:	2e 97       	sbiw	r28, 0x0e	; 14
    6f82:	0f b6       	in	r0, 0x3f	; 63
    6f84:	f8 94       	cli
    6f86:	de bf       	out	0x3e, r29	; 62
    6f88:	0f be       	out	0x3f, r0	; 63
    6f8a:	cd bf       	out	0x3d, r28	; 61
    6f8c:	0e 89       	ldd	r16, Y+22	; 0x16
    6f8e:	1f 89       	ldd	r17, Y+23	; 0x17
    6f90:	86 e0       	ldi	r24, 0x06	; 6
    6f92:	8c 83       	std	Y+4, r24	; 0x04
    6f94:	1a 83       	std	Y+2, r17	; 0x02
    6f96:	09 83       	std	Y+1, r16	; 0x01
    6f98:	8f ef       	ldi	r24, 0xFF	; 255
    6f9a:	9f e7       	ldi	r25, 0x7F	; 127
    6f9c:	9e 83       	std	Y+6, r25	; 0x06
    6f9e:	8d 83       	std	Y+5, r24	; 0x05
    6fa0:	ae 01       	movw	r20, r28
    6fa2:	46 5e       	subi	r20, 0xE6	; 230
    6fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa6:	68 8d       	ldd	r22, Y+24	; 0x18
    6fa8:	79 8d       	ldd	r23, Y+25	; 0x19
    6faa:	ce 01       	movw	r24, r28
    6fac:	01 96       	adiw	r24, 0x01	; 1
    6fae:	10 d0       	rcall	.+32     	; 0x6fd0 <vfprintf>
    6fb0:	ef 81       	ldd	r30, Y+7	; 0x07
    6fb2:	f8 85       	ldd	r31, Y+8	; 0x08
    6fb4:	e0 0f       	add	r30, r16
    6fb6:	f1 1f       	adc	r31, r17
    6fb8:	10 82       	st	Z, r1
    6fba:	2e 96       	adiw	r28, 0x0e	; 14
    6fbc:	0f b6       	in	r0, 0x3f	; 63
    6fbe:	f8 94       	cli
    6fc0:	de bf       	out	0x3e, r29	; 62
    6fc2:	0f be       	out	0x3f, r0	; 63
    6fc4:	cd bf       	out	0x3d, r28	; 61
    6fc6:	df 91       	pop	r29
    6fc8:	cf 91       	pop	r28
    6fca:	1f 91       	pop	r17
    6fcc:	0f 91       	pop	r16
    6fce:	08 95       	ret

00006fd0 <vfprintf>:
    6fd0:	2f 92       	push	r2
    6fd2:	3f 92       	push	r3
    6fd4:	4f 92       	push	r4
    6fd6:	5f 92       	push	r5
    6fd8:	6f 92       	push	r6
    6fda:	7f 92       	push	r7
    6fdc:	8f 92       	push	r8
    6fde:	9f 92       	push	r9
    6fe0:	af 92       	push	r10
    6fe2:	bf 92       	push	r11
    6fe4:	cf 92       	push	r12
    6fe6:	df 92       	push	r13
    6fe8:	ef 92       	push	r14
    6fea:	ff 92       	push	r15
    6fec:	0f 93       	push	r16
    6fee:	1f 93       	push	r17
    6ff0:	cf 93       	push	r28
    6ff2:	df 93       	push	r29
    6ff4:	cd b7       	in	r28, 0x3d	; 61
    6ff6:	de b7       	in	r29, 0x3e	; 62
    6ff8:	2b 97       	sbiw	r28, 0x0b	; 11
    6ffa:	0f b6       	in	r0, 0x3f	; 63
    6ffc:	f8 94       	cli
    6ffe:	de bf       	out	0x3e, r29	; 62
    7000:	0f be       	out	0x3f, r0	; 63
    7002:	cd bf       	out	0x3d, r28	; 61
    7004:	6c 01       	movw	r12, r24
    7006:	7b 01       	movw	r14, r22
    7008:	8a 01       	movw	r16, r20
    700a:	fc 01       	movw	r30, r24
    700c:	17 82       	std	Z+7, r1	; 0x07
    700e:	16 82       	std	Z+6, r1	; 0x06
    7010:	83 81       	ldd	r24, Z+3	; 0x03
    7012:	81 ff       	sbrs	r24, 1
    7014:	bf c1       	rjmp	.+894    	; 0x7394 <vfprintf+0x3c4>
    7016:	ce 01       	movw	r24, r28
    7018:	01 96       	adiw	r24, 0x01	; 1
    701a:	3c 01       	movw	r6, r24
    701c:	f6 01       	movw	r30, r12
    701e:	93 81       	ldd	r25, Z+3	; 0x03
    7020:	f7 01       	movw	r30, r14
    7022:	93 fd       	sbrc	r25, 3
    7024:	85 91       	lpm	r24, Z+
    7026:	93 ff       	sbrs	r25, 3
    7028:	81 91       	ld	r24, Z+
    702a:	7f 01       	movw	r14, r30
    702c:	88 23       	and	r24, r24
    702e:	09 f4       	brne	.+2      	; 0x7032 <vfprintf+0x62>
    7030:	ad c1       	rjmp	.+858    	; 0x738c <vfprintf+0x3bc>
    7032:	85 32       	cpi	r24, 0x25	; 37
    7034:	39 f4       	brne	.+14     	; 0x7044 <vfprintf+0x74>
    7036:	93 fd       	sbrc	r25, 3
    7038:	85 91       	lpm	r24, Z+
    703a:	93 ff       	sbrs	r25, 3
    703c:	81 91       	ld	r24, Z+
    703e:	7f 01       	movw	r14, r30
    7040:	85 32       	cpi	r24, 0x25	; 37
    7042:	21 f4       	brne	.+8      	; 0x704c <vfprintf+0x7c>
    7044:	b6 01       	movw	r22, r12
    7046:	90 e0       	ldi	r25, 0x00	; 0
    7048:	d6 d1       	rcall	.+940    	; 0x73f6 <fputc>
    704a:	e8 cf       	rjmp	.-48     	; 0x701c <vfprintf+0x4c>
    704c:	91 2c       	mov	r9, r1
    704e:	21 2c       	mov	r2, r1
    7050:	31 2c       	mov	r3, r1
    7052:	ff e1       	ldi	r31, 0x1F	; 31
    7054:	f3 15       	cp	r31, r3
    7056:	d8 f0       	brcs	.+54     	; 0x708e <vfprintf+0xbe>
    7058:	8b 32       	cpi	r24, 0x2B	; 43
    705a:	79 f0       	breq	.+30     	; 0x707a <vfprintf+0xaa>
    705c:	38 f4       	brcc	.+14     	; 0x706c <vfprintf+0x9c>
    705e:	80 32       	cpi	r24, 0x20	; 32
    7060:	79 f0       	breq	.+30     	; 0x7080 <vfprintf+0xb0>
    7062:	83 32       	cpi	r24, 0x23	; 35
    7064:	a1 f4       	brne	.+40     	; 0x708e <vfprintf+0xbe>
    7066:	23 2d       	mov	r18, r3
    7068:	20 61       	ori	r18, 0x10	; 16
    706a:	1d c0       	rjmp	.+58     	; 0x70a6 <vfprintf+0xd6>
    706c:	8d 32       	cpi	r24, 0x2D	; 45
    706e:	61 f0       	breq	.+24     	; 0x7088 <vfprintf+0xb8>
    7070:	80 33       	cpi	r24, 0x30	; 48
    7072:	69 f4       	brne	.+26     	; 0x708e <vfprintf+0xbe>
    7074:	23 2d       	mov	r18, r3
    7076:	21 60       	ori	r18, 0x01	; 1
    7078:	16 c0       	rjmp	.+44     	; 0x70a6 <vfprintf+0xd6>
    707a:	83 2d       	mov	r24, r3
    707c:	82 60       	ori	r24, 0x02	; 2
    707e:	38 2e       	mov	r3, r24
    7080:	e3 2d       	mov	r30, r3
    7082:	e4 60       	ori	r30, 0x04	; 4
    7084:	3e 2e       	mov	r3, r30
    7086:	2a c0       	rjmp	.+84     	; 0x70dc <vfprintf+0x10c>
    7088:	f3 2d       	mov	r31, r3
    708a:	f8 60       	ori	r31, 0x08	; 8
    708c:	1d c0       	rjmp	.+58     	; 0x70c8 <vfprintf+0xf8>
    708e:	37 fc       	sbrc	r3, 7
    7090:	2d c0       	rjmp	.+90     	; 0x70ec <vfprintf+0x11c>
    7092:	20 ed       	ldi	r18, 0xD0	; 208
    7094:	28 0f       	add	r18, r24
    7096:	2a 30       	cpi	r18, 0x0A	; 10
    7098:	40 f0       	brcs	.+16     	; 0x70aa <vfprintf+0xda>
    709a:	8e 32       	cpi	r24, 0x2E	; 46
    709c:	b9 f4       	brne	.+46     	; 0x70cc <vfprintf+0xfc>
    709e:	36 fc       	sbrc	r3, 6
    70a0:	75 c1       	rjmp	.+746    	; 0x738c <vfprintf+0x3bc>
    70a2:	23 2d       	mov	r18, r3
    70a4:	20 64       	ori	r18, 0x40	; 64
    70a6:	32 2e       	mov	r3, r18
    70a8:	19 c0       	rjmp	.+50     	; 0x70dc <vfprintf+0x10c>
    70aa:	36 fe       	sbrs	r3, 6
    70ac:	06 c0       	rjmp	.+12     	; 0x70ba <vfprintf+0xea>
    70ae:	8a e0       	ldi	r24, 0x0A	; 10
    70b0:	98 9e       	mul	r9, r24
    70b2:	20 0d       	add	r18, r0
    70b4:	11 24       	eor	r1, r1
    70b6:	92 2e       	mov	r9, r18
    70b8:	11 c0       	rjmp	.+34     	; 0x70dc <vfprintf+0x10c>
    70ba:	ea e0       	ldi	r30, 0x0A	; 10
    70bc:	2e 9e       	mul	r2, r30
    70be:	20 0d       	add	r18, r0
    70c0:	11 24       	eor	r1, r1
    70c2:	22 2e       	mov	r2, r18
    70c4:	f3 2d       	mov	r31, r3
    70c6:	f0 62       	ori	r31, 0x20	; 32
    70c8:	3f 2e       	mov	r3, r31
    70ca:	08 c0       	rjmp	.+16     	; 0x70dc <vfprintf+0x10c>
    70cc:	8c 36       	cpi	r24, 0x6C	; 108
    70ce:	21 f4       	brne	.+8      	; 0x70d8 <vfprintf+0x108>
    70d0:	83 2d       	mov	r24, r3
    70d2:	80 68       	ori	r24, 0x80	; 128
    70d4:	38 2e       	mov	r3, r24
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <vfprintf+0x10c>
    70d8:	88 36       	cpi	r24, 0x68	; 104
    70da:	41 f4       	brne	.+16     	; 0x70ec <vfprintf+0x11c>
    70dc:	f7 01       	movw	r30, r14
    70de:	93 fd       	sbrc	r25, 3
    70e0:	85 91       	lpm	r24, Z+
    70e2:	93 ff       	sbrs	r25, 3
    70e4:	81 91       	ld	r24, Z+
    70e6:	7f 01       	movw	r14, r30
    70e8:	81 11       	cpse	r24, r1
    70ea:	b3 cf       	rjmp	.-154    	; 0x7052 <vfprintf+0x82>
    70ec:	98 2f       	mov	r25, r24
    70ee:	9f 7d       	andi	r25, 0xDF	; 223
    70f0:	95 54       	subi	r25, 0x45	; 69
    70f2:	93 30       	cpi	r25, 0x03	; 3
    70f4:	28 f4       	brcc	.+10     	; 0x7100 <vfprintf+0x130>
    70f6:	0c 5f       	subi	r16, 0xFC	; 252
    70f8:	1f 4f       	sbci	r17, 0xFF	; 255
    70fa:	9f e3       	ldi	r25, 0x3F	; 63
    70fc:	99 83       	std	Y+1, r25	; 0x01
    70fe:	0d c0       	rjmp	.+26     	; 0x711a <vfprintf+0x14a>
    7100:	83 36       	cpi	r24, 0x63	; 99
    7102:	31 f0       	breq	.+12     	; 0x7110 <vfprintf+0x140>
    7104:	83 37       	cpi	r24, 0x73	; 115
    7106:	71 f0       	breq	.+28     	; 0x7124 <vfprintf+0x154>
    7108:	83 35       	cpi	r24, 0x53	; 83
    710a:	09 f0       	breq	.+2      	; 0x710e <vfprintf+0x13e>
    710c:	55 c0       	rjmp	.+170    	; 0x71b8 <vfprintf+0x1e8>
    710e:	20 c0       	rjmp	.+64     	; 0x7150 <vfprintf+0x180>
    7110:	f8 01       	movw	r30, r16
    7112:	80 81       	ld	r24, Z
    7114:	89 83       	std	Y+1, r24	; 0x01
    7116:	0e 5f       	subi	r16, 0xFE	; 254
    7118:	1f 4f       	sbci	r17, 0xFF	; 255
    711a:	88 24       	eor	r8, r8
    711c:	83 94       	inc	r8
    711e:	91 2c       	mov	r9, r1
    7120:	53 01       	movw	r10, r6
    7122:	12 c0       	rjmp	.+36     	; 0x7148 <vfprintf+0x178>
    7124:	28 01       	movw	r4, r16
    7126:	f2 e0       	ldi	r31, 0x02	; 2
    7128:	4f 0e       	add	r4, r31
    712a:	51 1c       	adc	r5, r1
    712c:	f8 01       	movw	r30, r16
    712e:	a0 80       	ld	r10, Z
    7130:	b1 80       	ldd	r11, Z+1	; 0x01
    7132:	36 fe       	sbrs	r3, 6
    7134:	03 c0       	rjmp	.+6      	; 0x713c <vfprintf+0x16c>
    7136:	69 2d       	mov	r22, r9
    7138:	70 e0       	ldi	r23, 0x00	; 0
    713a:	02 c0       	rjmp	.+4      	; 0x7140 <vfprintf+0x170>
    713c:	6f ef       	ldi	r22, 0xFF	; 255
    713e:	7f ef       	ldi	r23, 0xFF	; 255
    7140:	c5 01       	movw	r24, r10
    7142:	4e d1       	rcall	.+668    	; 0x73e0 <strnlen>
    7144:	4c 01       	movw	r8, r24
    7146:	82 01       	movw	r16, r4
    7148:	f3 2d       	mov	r31, r3
    714a:	ff 77       	andi	r31, 0x7F	; 127
    714c:	3f 2e       	mov	r3, r31
    714e:	15 c0       	rjmp	.+42     	; 0x717a <vfprintf+0x1aa>
    7150:	28 01       	movw	r4, r16
    7152:	22 e0       	ldi	r18, 0x02	; 2
    7154:	42 0e       	add	r4, r18
    7156:	51 1c       	adc	r5, r1
    7158:	f8 01       	movw	r30, r16
    715a:	a0 80       	ld	r10, Z
    715c:	b1 80       	ldd	r11, Z+1	; 0x01
    715e:	36 fe       	sbrs	r3, 6
    7160:	03 c0       	rjmp	.+6      	; 0x7168 <vfprintf+0x198>
    7162:	69 2d       	mov	r22, r9
    7164:	70 e0       	ldi	r23, 0x00	; 0
    7166:	02 c0       	rjmp	.+4      	; 0x716c <vfprintf+0x19c>
    7168:	6f ef       	ldi	r22, 0xFF	; 255
    716a:	7f ef       	ldi	r23, 0xFF	; 255
    716c:	c5 01       	movw	r24, r10
    716e:	2d d1       	rcall	.+602    	; 0x73ca <strnlen_P>
    7170:	4c 01       	movw	r8, r24
    7172:	f3 2d       	mov	r31, r3
    7174:	f0 68       	ori	r31, 0x80	; 128
    7176:	3f 2e       	mov	r3, r31
    7178:	82 01       	movw	r16, r4
    717a:	33 fc       	sbrc	r3, 3
    717c:	19 c0       	rjmp	.+50     	; 0x71b0 <vfprintf+0x1e0>
    717e:	82 2d       	mov	r24, r2
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	88 16       	cp	r8, r24
    7184:	99 06       	cpc	r9, r25
    7186:	a0 f4       	brcc	.+40     	; 0x71b0 <vfprintf+0x1e0>
    7188:	b6 01       	movw	r22, r12
    718a:	80 e2       	ldi	r24, 0x20	; 32
    718c:	90 e0       	ldi	r25, 0x00	; 0
    718e:	33 d1       	rcall	.+614    	; 0x73f6 <fputc>
    7190:	2a 94       	dec	r2
    7192:	f5 cf       	rjmp	.-22     	; 0x717e <vfprintf+0x1ae>
    7194:	f5 01       	movw	r30, r10
    7196:	37 fc       	sbrc	r3, 7
    7198:	85 91       	lpm	r24, Z+
    719a:	37 fe       	sbrs	r3, 7
    719c:	81 91       	ld	r24, Z+
    719e:	5f 01       	movw	r10, r30
    71a0:	b6 01       	movw	r22, r12
    71a2:	90 e0       	ldi	r25, 0x00	; 0
    71a4:	28 d1       	rcall	.+592    	; 0x73f6 <fputc>
    71a6:	21 10       	cpse	r2, r1
    71a8:	2a 94       	dec	r2
    71aa:	21 e0       	ldi	r18, 0x01	; 1
    71ac:	82 1a       	sub	r8, r18
    71ae:	91 08       	sbc	r9, r1
    71b0:	81 14       	cp	r8, r1
    71b2:	91 04       	cpc	r9, r1
    71b4:	79 f7       	brne	.-34     	; 0x7194 <vfprintf+0x1c4>
    71b6:	e1 c0       	rjmp	.+450    	; 0x737a <vfprintf+0x3aa>
    71b8:	84 36       	cpi	r24, 0x64	; 100
    71ba:	11 f0       	breq	.+4      	; 0x71c0 <vfprintf+0x1f0>
    71bc:	89 36       	cpi	r24, 0x69	; 105
    71be:	39 f5       	brne	.+78     	; 0x720e <vfprintf+0x23e>
    71c0:	f8 01       	movw	r30, r16
    71c2:	37 fe       	sbrs	r3, 7
    71c4:	07 c0       	rjmp	.+14     	; 0x71d4 <vfprintf+0x204>
    71c6:	60 81       	ld	r22, Z
    71c8:	71 81       	ldd	r23, Z+1	; 0x01
    71ca:	82 81       	ldd	r24, Z+2	; 0x02
    71cc:	93 81       	ldd	r25, Z+3	; 0x03
    71ce:	0c 5f       	subi	r16, 0xFC	; 252
    71d0:	1f 4f       	sbci	r17, 0xFF	; 255
    71d2:	08 c0       	rjmp	.+16     	; 0x71e4 <vfprintf+0x214>
    71d4:	60 81       	ld	r22, Z
    71d6:	71 81       	ldd	r23, Z+1	; 0x01
    71d8:	07 2e       	mov	r0, r23
    71da:	00 0c       	add	r0, r0
    71dc:	88 0b       	sbc	r24, r24
    71de:	99 0b       	sbc	r25, r25
    71e0:	0e 5f       	subi	r16, 0xFE	; 254
    71e2:	1f 4f       	sbci	r17, 0xFF	; 255
    71e4:	f3 2d       	mov	r31, r3
    71e6:	ff 76       	andi	r31, 0x6F	; 111
    71e8:	3f 2e       	mov	r3, r31
    71ea:	97 ff       	sbrs	r25, 7
    71ec:	09 c0       	rjmp	.+18     	; 0x7200 <vfprintf+0x230>
    71ee:	90 95       	com	r25
    71f0:	80 95       	com	r24
    71f2:	70 95       	com	r23
    71f4:	61 95       	neg	r22
    71f6:	7f 4f       	sbci	r23, 0xFF	; 255
    71f8:	8f 4f       	sbci	r24, 0xFF	; 255
    71fa:	9f 4f       	sbci	r25, 0xFF	; 255
    71fc:	f0 68       	ori	r31, 0x80	; 128
    71fe:	3f 2e       	mov	r3, r31
    7200:	2a e0       	ldi	r18, 0x0A	; 10
    7202:	30 e0       	ldi	r19, 0x00	; 0
    7204:	a3 01       	movw	r20, r6
    7206:	33 d1       	rcall	.+614    	; 0x746e <__ultoa_invert>
    7208:	88 2e       	mov	r8, r24
    720a:	86 18       	sub	r8, r6
    720c:	44 c0       	rjmp	.+136    	; 0x7296 <vfprintf+0x2c6>
    720e:	85 37       	cpi	r24, 0x75	; 117
    7210:	31 f4       	brne	.+12     	; 0x721e <vfprintf+0x24e>
    7212:	23 2d       	mov	r18, r3
    7214:	2f 7e       	andi	r18, 0xEF	; 239
    7216:	b2 2e       	mov	r11, r18
    7218:	2a e0       	ldi	r18, 0x0A	; 10
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	25 c0       	rjmp	.+74     	; 0x7268 <vfprintf+0x298>
    721e:	93 2d       	mov	r25, r3
    7220:	99 7f       	andi	r25, 0xF9	; 249
    7222:	b9 2e       	mov	r11, r25
    7224:	8f 36       	cpi	r24, 0x6F	; 111
    7226:	c1 f0       	breq	.+48     	; 0x7258 <vfprintf+0x288>
    7228:	18 f4       	brcc	.+6      	; 0x7230 <vfprintf+0x260>
    722a:	88 35       	cpi	r24, 0x58	; 88
    722c:	79 f0       	breq	.+30     	; 0x724c <vfprintf+0x27c>
    722e:	ae c0       	rjmp	.+348    	; 0x738c <vfprintf+0x3bc>
    7230:	80 37       	cpi	r24, 0x70	; 112
    7232:	19 f0       	breq	.+6      	; 0x723a <vfprintf+0x26a>
    7234:	88 37       	cpi	r24, 0x78	; 120
    7236:	21 f0       	breq	.+8      	; 0x7240 <vfprintf+0x270>
    7238:	a9 c0       	rjmp	.+338    	; 0x738c <vfprintf+0x3bc>
    723a:	e9 2f       	mov	r30, r25
    723c:	e0 61       	ori	r30, 0x10	; 16
    723e:	be 2e       	mov	r11, r30
    7240:	b4 fe       	sbrs	r11, 4
    7242:	0d c0       	rjmp	.+26     	; 0x725e <vfprintf+0x28e>
    7244:	fb 2d       	mov	r31, r11
    7246:	f4 60       	ori	r31, 0x04	; 4
    7248:	bf 2e       	mov	r11, r31
    724a:	09 c0       	rjmp	.+18     	; 0x725e <vfprintf+0x28e>
    724c:	34 fe       	sbrs	r3, 4
    724e:	0a c0       	rjmp	.+20     	; 0x7264 <vfprintf+0x294>
    7250:	29 2f       	mov	r18, r25
    7252:	26 60       	ori	r18, 0x06	; 6
    7254:	b2 2e       	mov	r11, r18
    7256:	06 c0       	rjmp	.+12     	; 0x7264 <vfprintf+0x294>
    7258:	28 e0       	ldi	r18, 0x08	; 8
    725a:	30 e0       	ldi	r19, 0x00	; 0
    725c:	05 c0       	rjmp	.+10     	; 0x7268 <vfprintf+0x298>
    725e:	20 e1       	ldi	r18, 0x10	; 16
    7260:	30 e0       	ldi	r19, 0x00	; 0
    7262:	02 c0       	rjmp	.+4      	; 0x7268 <vfprintf+0x298>
    7264:	20 e1       	ldi	r18, 0x10	; 16
    7266:	32 e0       	ldi	r19, 0x02	; 2
    7268:	f8 01       	movw	r30, r16
    726a:	b7 fe       	sbrs	r11, 7
    726c:	07 c0       	rjmp	.+14     	; 0x727c <vfprintf+0x2ac>
    726e:	60 81       	ld	r22, Z
    7270:	71 81       	ldd	r23, Z+1	; 0x01
    7272:	82 81       	ldd	r24, Z+2	; 0x02
    7274:	93 81       	ldd	r25, Z+3	; 0x03
    7276:	0c 5f       	subi	r16, 0xFC	; 252
    7278:	1f 4f       	sbci	r17, 0xFF	; 255
    727a:	06 c0       	rjmp	.+12     	; 0x7288 <vfprintf+0x2b8>
    727c:	60 81       	ld	r22, Z
    727e:	71 81       	ldd	r23, Z+1	; 0x01
    7280:	80 e0       	ldi	r24, 0x00	; 0
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	0e 5f       	subi	r16, 0xFE	; 254
    7286:	1f 4f       	sbci	r17, 0xFF	; 255
    7288:	a3 01       	movw	r20, r6
    728a:	f1 d0       	rcall	.+482    	; 0x746e <__ultoa_invert>
    728c:	88 2e       	mov	r8, r24
    728e:	86 18       	sub	r8, r6
    7290:	fb 2d       	mov	r31, r11
    7292:	ff 77       	andi	r31, 0x7F	; 127
    7294:	3f 2e       	mov	r3, r31
    7296:	36 fe       	sbrs	r3, 6
    7298:	0d c0       	rjmp	.+26     	; 0x72b4 <vfprintf+0x2e4>
    729a:	23 2d       	mov	r18, r3
    729c:	2e 7f       	andi	r18, 0xFE	; 254
    729e:	a2 2e       	mov	r10, r18
    72a0:	89 14       	cp	r8, r9
    72a2:	58 f4       	brcc	.+22     	; 0x72ba <vfprintf+0x2ea>
    72a4:	34 fe       	sbrs	r3, 4
    72a6:	0b c0       	rjmp	.+22     	; 0x72be <vfprintf+0x2ee>
    72a8:	32 fc       	sbrc	r3, 2
    72aa:	09 c0       	rjmp	.+18     	; 0x72be <vfprintf+0x2ee>
    72ac:	83 2d       	mov	r24, r3
    72ae:	8e 7e       	andi	r24, 0xEE	; 238
    72b0:	a8 2e       	mov	r10, r24
    72b2:	05 c0       	rjmp	.+10     	; 0x72be <vfprintf+0x2ee>
    72b4:	b8 2c       	mov	r11, r8
    72b6:	a3 2c       	mov	r10, r3
    72b8:	03 c0       	rjmp	.+6      	; 0x72c0 <vfprintf+0x2f0>
    72ba:	b8 2c       	mov	r11, r8
    72bc:	01 c0       	rjmp	.+2      	; 0x72c0 <vfprintf+0x2f0>
    72be:	b9 2c       	mov	r11, r9
    72c0:	a4 fe       	sbrs	r10, 4
    72c2:	0f c0       	rjmp	.+30     	; 0x72e2 <vfprintf+0x312>
    72c4:	fe 01       	movw	r30, r28
    72c6:	e8 0d       	add	r30, r8
    72c8:	f1 1d       	adc	r31, r1
    72ca:	80 81       	ld	r24, Z
    72cc:	80 33       	cpi	r24, 0x30	; 48
    72ce:	21 f4       	brne	.+8      	; 0x72d8 <vfprintf+0x308>
    72d0:	9a 2d       	mov	r25, r10
    72d2:	99 7e       	andi	r25, 0xE9	; 233
    72d4:	a9 2e       	mov	r10, r25
    72d6:	09 c0       	rjmp	.+18     	; 0x72ea <vfprintf+0x31a>
    72d8:	a2 fe       	sbrs	r10, 2
    72da:	06 c0       	rjmp	.+12     	; 0x72e8 <vfprintf+0x318>
    72dc:	b3 94       	inc	r11
    72de:	b3 94       	inc	r11
    72e0:	04 c0       	rjmp	.+8      	; 0x72ea <vfprintf+0x31a>
    72e2:	8a 2d       	mov	r24, r10
    72e4:	86 78       	andi	r24, 0x86	; 134
    72e6:	09 f0       	breq	.+2      	; 0x72ea <vfprintf+0x31a>
    72e8:	b3 94       	inc	r11
    72ea:	a3 fc       	sbrc	r10, 3
    72ec:	10 c0       	rjmp	.+32     	; 0x730e <vfprintf+0x33e>
    72ee:	a0 fe       	sbrs	r10, 0
    72f0:	06 c0       	rjmp	.+12     	; 0x72fe <vfprintf+0x32e>
    72f2:	b2 14       	cp	r11, r2
    72f4:	80 f4       	brcc	.+32     	; 0x7316 <vfprintf+0x346>
    72f6:	28 0c       	add	r2, r8
    72f8:	92 2c       	mov	r9, r2
    72fa:	9b 18       	sub	r9, r11
    72fc:	0d c0       	rjmp	.+26     	; 0x7318 <vfprintf+0x348>
    72fe:	b2 14       	cp	r11, r2
    7300:	58 f4       	brcc	.+22     	; 0x7318 <vfprintf+0x348>
    7302:	b6 01       	movw	r22, r12
    7304:	80 e2       	ldi	r24, 0x20	; 32
    7306:	90 e0       	ldi	r25, 0x00	; 0
    7308:	76 d0       	rcall	.+236    	; 0x73f6 <fputc>
    730a:	b3 94       	inc	r11
    730c:	f8 cf       	rjmp	.-16     	; 0x72fe <vfprintf+0x32e>
    730e:	b2 14       	cp	r11, r2
    7310:	18 f4       	brcc	.+6      	; 0x7318 <vfprintf+0x348>
    7312:	2b 18       	sub	r2, r11
    7314:	02 c0       	rjmp	.+4      	; 0x731a <vfprintf+0x34a>
    7316:	98 2c       	mov	r9, r8
    7318:	21 2c       	mov	r2, r1
    731a:	a4 fe       	sbrs	r10, 4
    731c:	0f c0       	rjmp	.+30     	; 0x733c <vfprintf+0x36c>
    731e:	b6 01       	movw	r22, r12
    7320:	80 e3       	ldi	r24, 0x30	; 48
    7322:	90 e0       	ldi	r25, 0x00	; 0
    7324:	68 d0       	rcall	.+208    	; 0x73f6 <fputc>
    7326:	a2 fe       	sbrs	r10, 2
    7328:	16 c0       	rjmp	.+44     	; 0x7356 <vfprintf+0x386>
    732a:	a1 fc       	sbrc	r10, 1
    732c:	03 c0       	rjmp	.+6      	; 0x7334 <vfprintf+0x364>
    732e:	88 e7       	ldi	r24, 0x78	; 120
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	02 c0       	rjmp	.+4      	; 0x7338 <vfprintf+0x368>
    7334:	88 e5       	ldi	r24, 0x58	; 88
    7336:	90 e0       	ldi	r25, 0x00	; 0
    7338:	b6 01       	movw	r22, r12
    733a:	0c c0       	rjmp	.+24     	; 0x7354 <vfprintf+0x384>
    733c:	8a 2d       	mov	r24, r10
    733e:	86 78       	andi	r24, 0x86	; 134
    7340:	51 f0       	breq	.+20     	; 0x7356 <vfprintf+0x386>
    7342:	a1 fe       	sbrs	r10, 1
    7344:	02 c0       	rjmp	.+4      	; 0x734a <vfprintf+0x37a>
    7346:	8b e2       	ldi	r24, 0x2B	; 43
    7348:	01 c0       	rjmp	.+2      	; 0x734c <vfprintf+0x37c>
    734a:	80 e2       	ldi	r24, 0x20	; 32
    734c:	a7 fc       	sbrc	r10, 7
    734e:	8d e2       	ldi	r24, 0x2D	; 45
    7350:	b6 01       	movw	r22, r12
    7352:	90 e0       	ldi	r25, 0x00	; 0
    7354:	50 d0       	rcall	.+160    	; 0x73f6 <fputc>
    7356:	89 14       	cp	r8, r9
    7358:	30 f4       	brcc	.+12     	; 0x7366 <vfprintf+0x396>
    735a:	b6 01       	movw	r22, r12
    735c:	80 e3       	ldi	r24, 0x30	; 48
    735e:	90 e0       	ldi	r25, 0x00	; 0
    7360:	4a d0       	rcall	.+148    	; 0x73f6 <fputc>
    7362:	9a 94       	dec	r9
    7364:	f8 cf       	rjmp	.-16     	; 0x7356 <vfprintf+0x386>
    7366:	8a 94       	dec	r8
    7368:	f3 01       	movw	r30, r6
    736a:	e8 0d       	add	r30, r8
    736c:	f1 1d       	adc	r31, r1
    736e:	80 81       	ld	r24, Z
    7370:	b6 01       	movw	r22, r12
    7372:	90 e0       	ldi	r25, 0x00	; 0
    7374:	40 d0       	rcall	.+128    	; 0x73f6 <fputc>
    7376:	81 10       	cpse	r8, r1
    7378:	f6 cf       	rjmp	.-20     	; 0x7366 <vfprintf+0x396>
    737a:	22 20       	and	r2, r2
    737c:	09 f4       	brne	.+2      	; 0x7380 <vfprintf+0x3b0>
    737e:	4e ce       	rjmp	.-868    	; 0x701c <vfprintf+0x4c>
    7380:	b6 01       	movw	r22, r12
    7382:	80 e2       	ldi	r24, 0x20	; 32
    7384:	90 e0       	ldi	r25, 0x00	; 0
    7386:	37 d0       	rcall	.+110    	; 0x73f6 <fputc>
    7388:	2a 94       	dec	r2
    738a:	f7 cf       	rjmp	.-18     	; 0x737a <vfprintf+0x3aa>
    738c:	f6 01       	movw	r30, r12
    738e:	86 81       	ldd	r24, Z+6	; 0x06
    7390:	97 81       	ldd	r25, Z+7	; 0x07
    7392:	02 c0       	rjmp	.+4      	; 0x7398 <vfprintf+0x3c8>
    7394:	8f ef       	ldi	r24, 0xFF	; 255
    7396:	9f ef       	ldi	r25, 0xFF	; 255
    7398:	2b 96       	adiw	r28, 0x0b	; 11
    739a:	0f b6       	in	r0, 0x3f	; 63
    739c:	f8 94       	cli
    739e:	de bf       	out	0x3e, r29	; 62
    73a0:	0f be       	out	0x3f, r0	; 63
    73a2:	cd bf       	out	0x3d, r28	; 61
    73a4:	df 91       	pop	r29
    73a6:	cf 91       	pop	r28
    73a8:	1f 91       	pop	r17
    73aa:	0f 91       	pop	r16
    73ac:	ff 90       	pop	r15
    73ae:	ef 90       	pop	r14
    73b0:	df 90       	pop	r13
    73b2:	cf 90       	pop	r12
    73b4:	bf 90       	pop	r11
    73b6:	af 90       	pop	r10
    73b8:	9f 90       	pop	r9
    73ba:	8f 90       	pop	r8
    73bc:	7f 90       	pop	r7
    73be:	6f 90       	pop	r6
    73c0:	5f 90       	pop	r5
    73c2:	4f 90       	pop	r4
    73c4:	3f 90       	pop	r3
    73c6:	2f 90       	pop	r2
    73c8:	08 95       	ret

000073ca <strnlen_P>:
    73ca:	fc 01       	movw	r30, r24
    73cc:	05 90       	lpm	r0, Z+
    73ce:	61 50       	subi	r22, 0x01	; 1
    73d0:	70 40       	sbci	r23, 0x00	; 0
    73d2:	01 10       	cpse	r0, r1
    73d4:	d8 f7       	brcc	.-10     	; 0x73cc <strnlen_P+0x2>
    73d6:	80 95       	com	r24
    73d8:	90 95       	com	r25
    73da:	8e 0f       	add	r24, r30
    73dc:	9f 1f       	adc	r25, r31
    73de:	08 95       	ret

000073e0 <strnlen>:
    73e0:	fc 01       	movw	r30, r24
    73e2:	61 50       	subi	r22, 0x01	; 1
    73e4:	70 40       	sbci	r23, 0x00	; 0
    73e6:	01 90       	ld	r0, Z+
    73e8:	01 10       	cpse	r0, r1
    73ea:	d8 f7       	brcc	.-10     	; 0x73e2 <strnlen+0x2>
    73ec:	80 95       	com	r24
    73ee:	90 95       	com	r25
    73f0:	8e 0f       	add	r24, r30
    73f2:	9f 1f       	adc	r25, r31
    73f4:	08 95       	ret

000073f6 <fputc>:
    73f6:	0f 93       	push	r16
    73f8:	1f 93       	push	r17
    73fa:	cf 93       	push	r28
    73fc:	df 93       	push	r29
    73fe:	fb 01       	movw	r30, r22
    7400:	23 81       	ldd	r18, Z+3	; 0x03
    7402:	21 fd       	sbrc	r18, 1
    7404:	03 c0       	rjmp	.+6      	; 0x740c <fputc+0x16>
    7406:	8f ef       	ldi	r24, 0xFF	; 255
    7408:	9f ef       	ldi	r25, 0xFF	; 255
    740a:	2c c0       	rjmp	.+88     	; 0x7464 <fputc+0x6e>
    740c:	22 ff       	sbrs	r18, 2
    740e:	16 c0       	rjmp	.+44     	; 0x743c <fputc+0x46>
    7410:	46 81       	ldd	r20, Z+6	; 0x06
    7412:	57 81       	ldd	r21, Z+7	; 0x07
    7414:	24 81       	ldd	r18, Z+4	; 0x04
    7416:	35 81       	ldd	r19, Z+5	; 0x05
    7418:	42 17       	cp	r20, r18
    741a:	53 07       	cpc	r21, r19
    741c:	44 f4       	brge	.+16     	; 0x742e <fputc+0x38>
    741e:	a0 81       	ld	r26, Z
    7420:	b1 81       	ldd	r27, Z+1	; 0x01
    7422:	9d 01       	movw	r18, r26
    7424:	2f 5f       	subi	r18, 0xFF	; 255
    7426:	3f 4f       	sbci	r19, 0xFF	; 255
    7428:	31 83       	std	Z+1, r19	; 0x01
    742a:	20 83       	st	Z, r18
    742c:	8c 93       	st	X, r24
    742e:	26 81       	ldd	r18, Z+6	; 0x06
    7430:	37 81       	ldd	r19, Z+7	; 0x07
    7432:	2f 5f       	subi	r18, 0xFF	; 255
    7434:	3f 4f       	sbci	r19, 0xFF	; 255
    7436:	37 83       	std	Z+7, r19	; 0x07
    7438:	26 83       	std	Z+6, r18	; 0x06
    743a:	14 c0       	rjmp	.+40     	; 0x7464 <fputc+0x6e>
    743c:	8b 01       	movw	r16, r22
    743e:	ec 01       	movw	r28, r24
    7440:	fb 01       	movw	r30, r22
    7442:	00 84       	ldd	r0, Z+8	; 0x08
    7444:	f1 85       	ldd	r31, Z+9	; 0x09
    7446:	e0 2d       	mov	r30, r0
    7448:	19 95       	eicall
    744a:	89 2b       	or	r24, r25
    744c:	e1 f6       	brne	.-72     	; 0x7406 <fputc+0x10>
    744e:	d8 01       	movw	r26, r16
    7450:	16 96       	adiw	r26, 0x06	; 6
    7452:	8d 91       	ld	r24, X+
    7454:	9c 91       	ld	r25, X
    7456:	17 97       	sbiw	r26, 0x07	; 7
    7458:	01 96       	adiw	r24, 0x01	; 1
    745a:	17 96       	adiw	r26, 0x07	; 7
    745c:	9c 93       	st	X, r25
    745e:	8e 93       	st	-X, r24
    7460:	16 97       	sbiw	r26, 0x06	; 6
    7462:	ce 01       	movw	r24, r28
    7464:	df 91       	pop	r29
    7466:	cf 91       	pop	r28
    7468:	1f 91       	pop	r17
    746a:	0f 91       	pop	r16
    746c:	08 95       	ret

0000746e <__ultoa_invert>:
    746e:	fa 01       	movw	r30, r20
    7470:	aa 27       	eor	r26, r26
    7472:	28 30       	cpi	r18, 0x08	; 8
    7474:	51 f1       	breq	.+84     	; 0x74ca <__ultoa_invert+0x5c>
    7476:	20 31       	cpi	r18, 0x10	; 16
    7478:	81 f1       	breq	.+96     	; 0x74da <__ultoa_invert+0x6c>
    747a:	e8 94       	clt
    747c:	6f 93       	push	r22
    747e:	6e 7f       	andi	r22, 0xFE	; 254
    7480:	6e 5f       	subi	r22, 0xFE	; 254
    7482:	7f 4f       	sbci	r23, 0xFF	; 255
    7484:	8f 4f       	sbci	r24, 0xFF	; 255
    7486:	9f 4f       	sbci	r25, 0xFF	; 255
    7488:	af 4f       	sbci	r26, 0xFF	; 255
    748a:	b1 e0       	ldi	r27, 0x01	; 1
    748c:	3e d0       	rcall	.+124    	; 0x750a <__ultoa_invert+0x9c>
    748e:	b4 e0       	ldi	r27, 0x04	; 4
    7490:	3c d0       	rcall	.+120    	; 0x750a <__ultoa_invert+0x9c>
    7492:	67 0f       	add	r22, r23
    7494:	78 1f       	adc	r23, r24
    7496:	89 1f       	adc	r24, r25
    7498:	9a 1f       	adc	r25, r26
    749a:	a1 1d       	adc	r26, r1
    749c:	68 0f       	add	r22, r24
    749e:	79 1f       	adc	r23, r25
    74a0:	8a 1f       	adc	r24, r26
    74a2:	91 1d       	adc	r25, r1
    74a4:	a1 1d       	adc	r26, r1
    74a6:	6a 0f       	add	r22, r26
    74a8:	71 1d       	adc	r23, r1
    74aa:	81 1d       	adc	r24, r1
    74ac:	91 1d       	adc	r25, r1
    74ae:	a1 1d       	adc	r26, r1
    74b0:	20 d0       	rcall	.+64     	; 0x74f2 <__ultoa_invert+0x84>
    74b2:	09 f4       	brne	.+2      	; 0x74b6 <__ultoa_invert+0x48>
    74b4:	68 94       	set
    74b6:	3f 91       	pop	r19
    74b8:	2a e0       	ldi	r18, 0x0A	; 10
    74ba:	26 9f       	mul	r18, r22
    74bc:	11 24       	eor	r1, r1
    74be:	30 19       	sub	r19, r0
    74c0:	30 5d       	subi	r19, 0xD0	; 208
    74c2:	31 93       	st	Z+, r19
    74c4:	de f6       	brtc	.-74     	; 0x747c <__ultoa_invert+0xe>
    74c6:	cf 01       	movw	r24, r30
    74c8:	08 95       	ret
    74ca:	46 2f       	mov	r20, r22
    74cc:	47 70       	andi	r20, 0x07	; 7
    74ce:	40 5d       	subi	r20, 0xD0	; 208
    74d0:	41 93       	st	Z+, r20
    74d2:	b3 e0       	ldi	r27, 0x03	; 3
    74d4:	0f d0       	rcall	.+30     	; 0x74f4 <__ultoa_invert+0x86>
    74d6:	c9 f7       	brne	.-14     	; 0x74ca <__ultoa_invert+0x5c>
    74d8:	f6 cf       	rjmp	.-20     	; 0x74c6 <__ultoa_invert+0x58>
    74da:	46 2f       	mov	r20, r22
    74dc:	4f 70       	andi	r20, 0x0F	; 15
    74de:	40 5d       	subi	r20, 0xD0	; 208
    74e0:	4a 33       	cpi	r20, 0x3A	; 58
    74e2:	18 f0       	brcs	.+6      	; 0x74ea <__ultoa_invert+0x7c>
    74e4:	49 5d       	subi	r20, 0xD9	; 217
    74e6:	31 fd       	sbrc	r19, 1
    74e8:	40 52       	subi	r20, 0x20	; 32
    74ea:	41 93       	st	Z+, r20
    74ec:	02 d0       	rcall	.+4      	; 0x74f2 <__ultoa_invert+0x84>
    74ee:	a9 f7       	brne	.-22     	; 0x74da <__ultoa_invert+0x6c>
    74f0:	ea cf       	rjmp	.-44     	; 0x74c6 <__ultoa_invert+0x58>
    74f2:	b4 e0       	ldi	r27, 0x04	; 4
    74f4:	a6 95       	lsr	r26
    74f6:	97 95       	ror	r25
    74f8:	87 95       	ror	r24
    74fa:	77 95       	ror	r23
    74fc:	67 95       	ror	r22
    74fe:	ba 95       	dec	r27
    7500:	c9 f7       	brne	.-14     	; 0x74f4 <__ultoa_invert+0x86>
    7502:	00 97       	sbiw	r24, 0x00	; 0
    7504:	61 05       	cpc	r22, r1
    7506:	71 05       	cpc	r23, r1
    7508:	08 95       	ret
    750a:	9b 01       	movw	r18, r22
    750c:	ac 01       	movw	r20, r24
    750e:	0a 2e       	mov	r0, r26
    7510:	06 94       	lsr	r0
    7512:	57 95       	ror	r21
    7514:	47 95       	ror	r20
    7516:	37 95       	ror	r19
    7518:	27 95       	ror	r18
    751a:	ba 95       	dec	r27
    751c:	c9 f7       	brne	.-14     	; 0x7510 <__ultoa_invert+0xa2>
    751e:	62 0f       	add	r22, r18
    7520:	73 1f       	adc	r23, r19
    7522:	84 1f       	adc	r24, r20
    7524:	95 1f       	adc	r25, r21
    7526:	a0 1d       	adc	r26, r0
    7528:	08 95       	ret

0000752a <_exit>:
    752a:	f8 94       	cli

0000752c <__stop_program>:
    752c:	ff cf       	rjmp	.-2      	; 0x752c <__stop_program>
